dev-can-linux-src\netif.c

|CursorKind.TRANSLATION_UNIT: src\netif.c (Line: 0, Col: 0)
|—CursorKind.FUNCTION_DECL: netif_tx(void *) (Line: 32, Col: 7)
|——CursorKind.PARM_DECL: arg (Line: 32, Col: 23)
|——CursorKind.COMPOUND_STMT:  (Line: 32, Col: 28)
|———CursorKind.DECL_STMT:  (Line: 34, Col: 5)
|————CursorKind.STRUCT_DECL: net_device (Line: 34, Col: 12)
|————CursorKind.VAR_DECL: dev (Line: 34, Col: 24)
|—————CursorKind.TYPE_REF: struct net_device (Line: 34, Col: 12)
|———CursorKind.DECL_STMT:  (Line: 35, Col: 5)
|————CursorKind.STRUCT_DECL: can_msg (Line: 35, Col: 12)
|————CursorKind.VAR_DECL: canmsg (Line: 35, Col: 21)
|—————CursorKind.TYPE_REF: struct can_msg (Line: 35, Col: 12)
|———CursorKind.WHILE_STMT:  (Line: 37, Col: 5)
|————CursorKind.INTEGER_LITERAL:  (Line: 37, Col: 12)
|————CursorKind.COMPOUND_STMT:  (Line: 37, Col: 15)
|—————CursorKind.IF_STMT:  (Line: 38, Col: 9)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 38, Col: 13)
|——————CursorKind.COMPOUND_STMT:  (Line: 38, Col: 42)
|———————CursorKind.CALL_EXPR: log_trace (Line: 39, Col: 13)
|————————CursorKind.DECL_REF_EXPR: log_trace (Line: 39, Col: 13)
|————————CursorKind.STRING_LITERAL: "netif_tx exit: %s\n" (Line: 39, Col: 23)
|————————CursorKind.UNEXPOSED_EXPR:  (Line: 39, Col: 46)
|—————————CursorKind.DECL_REF_EXPR: dev (Line: 39, Col: 46)
|—————CursorKind.IF_STMT:  (Line: 44, Col: 9)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 44, Col: 13)
|——————CursorKind.COMPOUND_STMT:  (Line: 44, Col: 59)
|———————CursorKind.CALL_EXPR: log_trace (Line: 45, Col: 13)
|————————CursorKind.DECL_REF_EXPR: log_trace (Line: 45, Col: 13)
|————————CursorKind.STRING_LITERAL: "netif_tx exit: %s\n" (Line: 45, Col: 23)
|————————CursorKind.UNEXPOSED_EXPR:  (Line: 45, Col: 46)
|—————————CursorKind.DECL_REF_EXPR: dev (Line: 45, Col: 46)
|—————CursorKind.DECL_STMT:  (Line: 50, Col: 9)
|——————CursorKind.STRUCT_DECL: sk_buff (Line: 50, Col: 16)
|——————CursorKind.VAR_DECL: skb (Line: 50, Col: 25)
|———————CursorKind.TYPE_REF: struct sk_buff (Line: 50, Col: 16)
|—————CursorKind.DECL_STMT:  (Line: 51, Col: 9)
|——————CursorKind.STRUCT_DECL: can_frame (Line: 51, Col: 16)
|——————CursorKind.VAR_DECL: cf (Line: 51, Col: 27)
|———————CursorKind.TYPE_REF: struct can_frame (Line: 51, Col: 16)
|—————CursorKind.BINARY_OPERATOR:  (Line: 54, Col: 9)
|——————CursorKind.DECL_REF_EXPR: skb (Line: 54, Col: 9)
|——————CursorKind.UNEXPOSED_EXPR: alloc_can_skb (Line: 54, Col: 15)
|———————CursorKind.CALL_EXPR: alloc_can_skb (Line: 54, Col: 15)
|————————CursorKind.UNEXPOSED_EXPR: alloc_can_skb (Line: 54, Col: 15)
|—————————CursorKind.DECL_REF_EXPR: alloc_can_skb (Line: 54, Col: 15)
|————————CursorKind.UNEXPOSED_EXPR: dev (Line: 54, Col: 29)
|—————————CursorKind.DECL_REF_EXPR: dev (Line: 54, Col: 29)
|————————CursorKind.UNARY_OPERATOR:  (Line: 54, Col: 34)
|—————————CursorKind.DECL_REF_EXPR: cf (Line: 54, Col: 35)
|—————CursorKind.IF_STMT:  (Line: 56, Col: 9)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 56, Col: 13)
|——————CursorKind.COMPOUND_STMT:  (Line: 56, Col: 26)
|———————CursorKind.CALL_EXPR: log_err (Line: 57, Col: 13)
|————————CursorKind.UNEXPOSED_EXPR: log_err (Line: 57, Col: 13)
|—————————CursorKind.DECL_REF_EXPR: log_err (Line: 57, Col: 13)
|————————CursorKind.UNEXPOSED_EXPR:  (Line: 57, Col: 21)
|—————————CursorKind.STRING_LITERAL: "netif_tx exit: alloc_can_skb error\n" (Line: 57, Col: 21)
|—————CursorKind.BINARY_OPERATOR:  (Line: 63, Col: 9)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 63, Col: 9)
|———————CursorKind.DECL_REF_EXPR: cf (Line: 63, Col: 9)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 63, Col: 22)
|———————CursorKind.DECL_REF_EXPR: canmsg (Line: 63, Col: 22)
|—————CursorKind.BINARY_OPERATOR:  (Line: 64, Col: 9)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 64, Col: 9)
|———————CursorKind.DECL_REF_EXPR: cf (Line: 64, Col: 9)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 64, Col: 23)
|———————CursorKind.DECL_REF_EXPR: canmsg (Line: 64, Col: 23)
|—————CursorKind.IF_STMT:  (Line: 66, Col: 9)
|——————CursorKind.MEMBER_REF_EXPR:  (Line: 66, Col: 13)
|———————CursorKind.UNEXPOSED_EXPR:  (Line: 66, Col: 13)
|————————CursorKind.DECL_REF_EXPR: canmsg (Line: 66, Col: 13)
|——————CursorKind.COMPOUND_STMT:  (Line: 66, Col: 42)
|——————CursorKind.COMPOUND_STMT:  (Line: 69, Col: 14)
|———————CursorKind.COMPOUND_ASSIGNMENT_OPERATOR:  (Line: 79, Col: 13)
|————————CursorKind.UNEXPOSED_EXPR:  (Line: 79, Col: 13)
|—————————CursorKind.DECL_REF_EXPR: cf (Line: 79, Col: 13)
|————————CursorKind.INTEGER_LITERAL:  (Line: 79, Col: 28)
|—————CursorKind.DECL_STMT:  (Line: 82, Col: 9)
|——————CursorKind.VAR_DECL: i (Line: 82, Col: 13)
|—————CursorKind.FOR_STMT:  (Line: 83, Col: 9)
|——————CursorKind.BINARY_OPERATOR:  (Line: 83, Col: 14)
|———————CursorKind.DECL_REF_EXPR: i (Line: 83, Col: 14)
|———————CursorKind.INTEGER_LITERAL:  (Line: 83, Col: 18)
|——————CursorKind.BINARY_OPERATOR:  (Line: 83, Col: 21)
|———————CursorKind.DECL_REF_EXPR: i (Line: 83, Col: 21)
|———————CursorKind.UNEXPOSED_EXPR:  (Line: 83, Col: 25)
|————————CursorKind.DECL_REF_EXPR: canmsg (Line: 83, Col: 25)
|——————CursorKind.UNARY_OPERATOR:  (Line: 83, Col: 38)
|———————CursorKind.DECL_REF_EXPR: i (Line: 83, Col: 40)
|——————CursorKind.COMPOUND_STMT:  (Line: 83, Col: 43)
|———————CursorKind.BINARY_OPERATOR:  (Line: 84, Col: 13)
|————————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 84, Col: 13)
|—————————CursorKind.UNEXPOSED_EXPR:  (Line: 84, Col: 13)
|——————————CursorKind.UNEXPOSED_EXPR:  (Line: 84, Col: 13)
|———————————CursorKind.DECL_REF_EXPR: cf (Line: 84, Col: 13)
|—————————CursorKind.UNEXPOSED_EXPR: i (Line: 84, Col: 22)
|——————————CursorKind.DECL_REF_EXPR: i (Line: 84, Col: 22)
|————————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 84, Col: 27)
|—————————CursorKind.UNEXPOSED_EXPR:  (Line: 84, Col: 27)
|——————————CursorKind.UNEXPOSED_EXPR:  (Line: 84, Col: 27)
|———————————CursorKind.DECL_REF_EXPR: canmsg (Line: 84, Col: 27)
|—————————CursorKind.UNEXPOSED_EXPR: i (Line: 84, Col: 39)
|——————————CursorKind.DECL_REF_EXPR: i (Line: 84, Col: 39)
|—————CursorKind.CALL_EXPR:  (Line: 87, Col: 9)
|——————CursorKind.MEMBER_REF_EXPR:  (Line: 87, Col: 9)
|———————CursorKind.UNEXPOSED_EXPR:  (Line: 87, Col: 9)
|————————CursorKind.DECL_REF_EXPR: dev (Line: 87, Col: 9)
|——————CursorKind.DECL_REF_EXPR: skb (Line: 87, Col: 41)
|——————CursorKind.DECL_REF_EXPR: dev (Line: 87, Col: 46)
|———CursorKind.RETURN_STMT:  (Line: 90, Col: 5)
|————CursorKind.UNEXPOSED_EXPR:  (Line: 90, Col: 12)
|—————CursorKind.INTEGER_LITERAL:  (Line: 90, Col: 12)
|—CursorKind.FUNCTION_DECL: netif_rx(struct sk_buff *) (Line: 98, Col: 5)
|——CursorKind.PARM_DECL: skb (Line: 98, Col: 31)
|———CursorKind.TYPE_REF: struct sk_buff (Line: 98, Col: 22)
|——CursorKind.COMPOUND_STMT:  (Line: 98, Col: 36)
|———CursorKind.DECL_STMT:  (Line: 99, Col: 5)
|————CursorKind.STRUCT_DECL: can_frame (Line: 99, Col: 12)
|————CursorKind.VAR_DECL: msg (Line: 99, Col: 23)
|—————CursorKind.TYPE_REF: struct can_frame (Line: 99, Col: 12)
|—————CursorKind.CSTYLE_CAST_EXPR:  (Line: 99, Col: 29)
|——————CursorKind.TYPE_REF: struct can_frame (Line: 99, Col: 37)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 99, Col: 48)
|———————CursorKind.DECL_REF_EXPR: skb (Line: 99, Col: 48)
|———CursorKind.IF_STMT:  (Line: 102, Col: 5)
|————CursorKind.UNEXPOSED_EXPR:  (Line: 102, Col: 9)
|————CursorKind.COMPOUND_STMT:  (Line: 102, Col: 37)
|—————CursorKind.IF_STMT:  (Line: 103, Col: 9)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 103, Col: 13)
|——————CursorKind.COMPOUND_STMT:  (Line: 103, Col: 47)
|———————CursorKind.CALL_EXPR: log_warn (Line: 104, Col: 13)
|————————CursorKind.DECL_REF_EXPR: log_warn (Line: 104, Col: 13)
|————————CursorKind.STRING_LITERAL: "netif_rx: %s: TX timeout (by netdevice driver)\n" (Line: 104, Col: 22)
|————————CursorKind.MEMBER_REF_EXPR:  (Line: 105, Col: 21)
|—————————CursorKind.UNEXPOSED_EXPR:  (Line: 105, Col: 21)
|——————————CursorKind.DECL_REF_EXPR: skb (Line: 105, Col: 21)
|—————CursorKind.IF_STMT:  (Line: 107, Col: 9)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 107, Col: 13)
|——————CursorKind.COMPOUND_STMT:  (Line: 107, Col: 44)
|———————CursorKind.CALL_EXPR: log_warn (Line: 108, Col: 13)
|————————CursorKind.DECL_REF_EXPR: log_warn (Line: 108, Col: 13)
|————————CursorKind.STRING_LITERAL: "netif_rx: %s: lost arbitration: %x\n" (Line: 108, Col: 22)
|————————CursorKind.MEMBER_REF_EXPR:  (Line: 109, Col: 21)
|—————————CursorKind.UNEXPOSED_EXPR:  (Line: 109, Col: 21)
|——————————CursorKind.DECL_REF_EXPR: skb (Line: 109, Col: 21)
|————————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 109, Col: 37)
|—————————CursorKind.UNEXPOSED_EXPR:  (Line: 109, Col: 37)
|——————————CursorKind.UNEXPOSED_EXPR:  (Line: 109, Col: 37)
|———————————CursorKind.DECL_REF_EXPR: msg (Line: 109, Col: 37)
|—————————CursorKind.INTEGER_LITERAL:  (Line: 109, Col: 47)
|—————CursorKind.IF_STMT:  (Line: 111, Col: 9)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 111, Col: 13)
|——————CursorKind.COMPOUND_STMT:  (Line: 111, Col: 41)
|———————CursorKind.CALL_EXPR: log_warn (Line: 112, Col: 13)
|————————CursorKind.DECL_REF_EXPR: log_warn (Line: 112, Col: 13)
|————————CursorKind.STRING_LITERAL: "netif_rx: %s: controller problems: %x\n" (Line: 112, Col: 22)
|————————CursorKind.MEMBER_REF_EXPR:  (Line: 113, Col: 21)
|—————————CursorKind.UNEXPOSED_EXPR:  (Line: 113, Col: 21)
|——————————CursorKind.DECL_REF_EXPR: skb (Line: 113, Col: 21)
|————————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 113, Col: 37)
|—————————CursorKind.UNEXPOSED_EXPR:  (Line: 113, Col: 37)
|——————————CursorKind.UNEXPOSED_EXPR:  (Line: 113, Col: 37)
|———————————CursorKind.DECL_REF_EXPR: msg (Line: 113, Col: 37)
|—————————CursorKind.INTEGER_LITERAL:  (Line: 113, Col: 47)
|—————CursorKind.IF_STMT:  (Line: 115, Col: 9)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 115, Col: 13)
|——————CursorKind.COMPOUND_STMT:  (Line: 115, Col: 41)
|———————CursorKind.CALL_EXPR: log_warn (Line: 116, Col: 13)
|————————CursorKind.DECL_REF_EXPR: log_warn (Line: 116, Col: 13)
|————————CursorKind.STRING_LITERAL: "netif_rx: %s: protocol violations: %x, %x\n" (Line: 116, Col: 22)
|————————CursorKind.MEMBER_REF_EXPR:  (Line: 117, Col: 21)
|—————————CursorKind.UNEXPOSED_EXPR:  (Line: 117, Col: 21)
|——————————CursorKind.DECL_REF_EXPR: skb (Line: 117, Col: 21)
|————————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 117, Col: 37)
|—————————CursorKind.UNEXPOSED_EXPR:  (Line: 117, Col: 37)
|——————————CursorKind.UNEXPOSED_EXPR:  (Line: 117, Col: 37)
|———————————CursorKind.DECL_REF_EXPR: msg (Line: 117, Col: 37)
|—————————CursorKind.INTEGER_LITERAL:  (Line: 117, Col: 47)
|————————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 117, Col: 51)
|—————————CursorKind.UNEXPOSED_EXPR:  (Line: 117, Col: 51)
|——————————CursorKind.UNEXPOSED_EXPR:  (Line: 117, Col: 51)
|———————————CursorKind.DECL_REF_EXPR: msg (Line: 117, Col: 51)
|—————————CursorKind.INTEGER_LITERAL:  (Line: 117, Col: 61)
|—————CursorKind.IF_STMT:  (Line: 119, Col: 9)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 119, Col: 13)
|——————CursorKind.COMPOUND_STMT:  (Line: 119, Col: 40)
|———————CursorKind.CALL_EXPR: log_warn (Line: 120, Col: 13)
|————————CursorKind.DECL_REF_EXPR: log_warn (Line: 120, Col: 13)
|————————CursorKind.STRING_LITERAL: "netif_rx: %s: transceiver status: %x\n" (Line: 120, Col: 22)
|————————CursorKind.MEMBER_REF_EXPR:  (Line: 121, Col: 21)
|—————————CursorKind.UNEXPOSED_EXPR:  (Line: 121, Col: 21)
|——————————CursorKind.DECL_REF_EXPR: skb (Line: 121, Col: 21)
|————————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 121, Col: 37)
|—————————CursorKind.UNEXPOSED_EXPR:  (Line: 121, Col: 37)
|——————————CursorKind.UNEXPOSED_EXPR:  (Line: 121, Col: 37)
|———————————CursorKind.DECL_REF_EXPR: msg (Line: 121, Col: 37)
|—————————CursorKind.INTEGER_LITERAL:  (Line: 121, Col: 47)
|—————CursorKind.IF_STMT:  (Line: 123, Col: 9)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 123, Col: 13)
|——————CursorKind.COMPOUND_STMT:  (Line: 123, Col: 40)
|———————CursorKind.CALL_EXPR: log_warn (Line: 124, Col: 13)
|————————CursorKind.DECL_REF_EXPR: log_warn (Line: 124, Col: 13)
|————————CursorKind.STRING_LITERAL: "netif_rx: %s: received no ACK on transmission\n" (Line: 124, Col: 22)
|————————CursorKind.MEMBER_REF_EXPR:  (Line: 125, Col: 21)
|—————————CursorKind.UNEXPOSED_EXPR:  (Line: 125, Col: 21)
|——————————CursorKind.DECL_REF_EXPR: skb (Line: 125, Col: 21)
|—————CursorKind.IF_STMT:  (Line: 127, Col: 9)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 127, Col: 13)
|——————CursorKind.COMPOUND_STMT:  (Line: 127, Col: 43)
|———————CursorKind.CALL_EXPR: log_warn (Line: 128, Col: 13)
|————————CursorKind.DECL_REF_EXPR: log_warn (Line: 128, Col: 13)
|————————CursorKind.STRING_LITERAL: "netif_rx: %s: bus off\n" (Line: 128, Col: 22)
|————————CursorKind.MEMBER_REF_EXPR:  (Line: 128, Col: 49)
|—————————CursorKind.UNEXPOSED_EXPR:  (Line: 128, Col: 49)
|——————————CursorKind.DECL_REF_EXPR: skb (Line: 128, Col: 49)
|—————CursorKind.IF_STMT:  (Line: 130, Col: 9)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 130, Col: 13)
|——————CursorKind.COMPOUND_STMT:  (Line: 130, Col: 45)
|———————CursorKind.CALL_EXPR: log_warn (Line: 131, Col: 13)
|————————CursorKind.DECL_REF_EXPR: log_warn (Line: 131, Col: 13)
|————————CursorKind.STRING_LITERAL: "netif_rx: %s: bus error (may flood!)\n" (Line: 131, Col: 22)
|————————CursorKind.MEMBER_REF_EXPR:  (Line: 132, Col: 21)
|—————————CursorKind.UNEXPOSED_EXPR:  (Line: 132, Col: 21)
|——————————CursorKind.DECL_REF_EXPR: skb (Line: 132, Col: 21)
|—————CursorKind.IF_STMT:  (Line: 134, Col: 9)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 134, Col: 13)
|——————CursorKind.COMPOUND_STMT:  (Line: 134, Col: 46)
|———————CursorKind.CALL_EXPR: log_warn (Line: 135, Col: 13)
|————————CursorKind.DECL_REF_EXPR: log_warn (Line: 135, Col: 13)
|————————CursorKind.STRING_LITERAL: "netif_rx: %s: controller restarted\n" (Line: 135, Col: 22)
|————————CursorKind.MEMBER_REF_EXPR:  (Line: 136, Col: 21)
|—————————CursorKind.UNEXPOSED_EXPR:  (Line: 136, Col: 21)
|——————————CursorKind.DECL_REF_EXPR: skb (Line: 136, Col: 21)
|—————CursorKind.IF_STMT:  (Line: 138, Col: 9)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 138, Col: 13)
|——————CursorKind.COMPOUND_STMT:  (Line: 138, Col: 40)
|———————CursorKind.CALL_EXPR: log_warn (Line: 139, Col: 13)
|————————CursorKind.DECL_REF_EXPR: log_warn (Line: 139, Col: 13)
|————————CursorKind.STRING_LITERAL: "netif_rx: %s: TX error counter; tx:%x, rx:%x\n" (Line: 139, Col: 22)
|————————CursorKind.MEMBER_REF_EXPR:  (Line: 140, Col: 21)
|—————————CursorKind.UNEXPOSED_EXPR:  (Line: 140, Col: 21)
|——————————CursorKind.DECL_REF_EXPR: skb (Line: 140, Col: 21)
|————————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 140, Col: 37)
|—————————CursorKind.UNEXPOSED_EXPR:  (Line: 140, Col: 37)
|——————————CursorKind.UNEXPOSED_EXPR:  (Line: 140, Col: 37)
|———————————CursorKind.DECL_REF_EXPR: msg (Line: 140, Col: 37)
|—————————CursorKind.INTEGER_LITERAL:  (Line: 140, Col: 47)
|————————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 140, Col: 51)
|—————————CursorKind.UNEXPOSED_EXPR:  (Line: 140, Col: 51)
|——————————CursorKind.UNEXPOSED_EXPR:  (Line: 140, Col: 51)
|———————————CursorKind.DECL_REF_EXPR: msg (Line: 140, Col: 51)
|—————————CursorKind.INTEGER_LITERAL:  (Line: 140, Col: 61)
|—————CursorKind.CALL_EXPR: kfree_skb (Line: 143, Col: 9)
|——————CursorKind.UNEXPOSED_EXPR: kfree_skb (Line: 143, Col: 9)
|———————CursorKind.DECL_REF_EXPR: kfree_skb (Line: 143, Col: 9)
|——————CursorKind.UNEXPOSED_EXPR: skb (Line: 143, Col: 19)
|———————CursorKind.DECL_REF_EXPR: skb (Line: 143, Col: 19)
|———CursorKind.IF_STMT:  (Line: 148, Col: 5)
|————CursorKind.UNEXPOSED_EXPR:  (Line: 148, Col: 9)
|————CursorKind.COMPOUND_STMT:  (Line: 148, Col: 37)
|—————CursorKind.CALL_EXPR: log_trace (Line: 149, Col: 9)
|——————CursorKind.UNEXPOSED_EXPR: log_trace (Line: 149, Col: 9)
|———————CursorKind.DECL_REF_EXPR: log_trace (Line: 149, Col: 9)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 149, Col: 19)
|———————CursorKind.STRING_LITERAL: "netif_rx; CAN_RTR_FLAG\n" (Line: 149, Col: 19)
|—————CursorKind.IF_STMT:  (Line: 151, Col: 9)
|——————CursorKind.UNARY_OPERATOR:  (Line: 151, Col: 13)
|———————CursorKind.UNEXPOSED_EXPR:  (Line: 151, Col: 14)
|————————CursorKind.UNEXPOSED_EXPR:  (Line: 151, Col: 14)
|—————————CursorKind.DECL_REF_EXPR: skb (Line: 151, Col: 14)
|——————CursorKind.COMPOUND_STMT:  (Line: 151, Col: 28)
|———————CursorKind.CALL_EXPR: kfree_skb (Line: 152, Col: 13)
|————————CursorKind.UNEXPOSED_EXPR: kfree_skb (Line: 152, Col: 13)
|—————————CursorKind.DECL_REF_EXPR: kfree_skb (Line: 152, Col: 13)
|————————CursorKind.UNEXPOSED_EXPR: skb (Line: 152, Col: 23)
|—————————CursorKind.DECL_REF_EXPR: skb (Line: 152, Col: 23)
|———CursorKind.DECL_STMT:  (Line: 158, Col: 5)
|————CursorKind.STRUCT_DECL: can_msg (Line: 158, Col: 12)
|————CursorKind.VAR_DECL: canmsg (Line: 158, Col: 20)
|—————CursorKind.TYPE_REF: struct can_msg (Line: 158, Col: 12)
|———CursorKind.IF_STMT:  (Line: 163, Col: 5)
|————CursorKind.UNEXPOSED_EXPR:  (Line: 163, Col: 9)
|————CursorKind.COMPOUND_STMT:  (Line: 163, Col: 37)
|—————CursorKind.BINARY_OPERATOR:  (Line: 164, Col: 9)
|——————CursorKind.MEMBER_REF_EXPR:  (Line: 164, Col: 9)
|———————CursorKind.MEMBER_REF_EXPR:  (Line: 164, Col: 9)
|————————CursorKind.UNEXPOSED_EXPR:  (Line: 164, Col: 9)
|—————————CursorKind.DECL_REF_EXPR: canmsg (Line: 164, Col: 9)
|——————CursorKind.INTEGER_LITERAL:  (Line: 164, Col: 38)
|————CursorKind.COMPOUND_STMT:  (Line: 166, Col: 10)
|—————CursorKind.BINARY_OPERATOR:  (Line: 167, Col: 9)
|——————CursorKind.MEMBER_REF_EXPR:  (Line: 167, Col: 9)
|———————CursorKind.MEMBER_REF_EXPR:  (Line: 167, Col: 9)
|————————CursorKind.UNEXPOSED_EXPR:  (Line: 167, Col: 9)
|—————————CursorKind.DECL_REF_EXPR: canmsg (Line: 167, Col: 9)
|——————CursorKind.INTEGER_LITERAL:  (Line: 167, Col: 38)
|—————CursorKind.COMPOUND_ASSIGNMENT_OPERATOR:  (Line: 178, Col: 9)
|——————CursorKind.MEMBER_REF_EXPR:  (Line: 178, Col: 9)
|———————CursorKind.UNEXPOSED_EXPR:  (Line: 178, Col: 9)
|————————CursorKind.DECL_REF_EXPR: canmsg (Line: 178, Col: 9)
|——————CursorKind.INTEGER_LITERAL:  (Line: 178, Col: 24)
|———CursorKind.IF_STMT:  (Line: 182, Col: 5)
|————CursorKind.UNEXPOSED_EXPR:  (Line: 182, Col: 9)
|————CursorKind.COMPOUND_STMT:  (Line: 182, Col: 15)
|————CursorKind.IF_STMT:  (Line: 185, Col: 10)
|—————CursorKind.UNEXPOSED_EXPR:  (Line: 185, Col: 14)
|—————CursorKind.COMPOUND_STMT:  (Line: 185, Col: 40)
|—————CursorKind.COMPOUND_STMT:  (Line: 189, Col: 10)
|——————CursorKind.BINARY_OPERATOR:  (Line: 190, Col: 9)
|———————CursorKind.MEMBER_REF_EXPR:  (Line: 190, Col: 9)
|————————CursorKind.MEMBER_REF_EXPR:  (Line: 190, Col: 9)
|—————————CursorKind.UNEXPOSED_EXPR:  (Line: 190, Col: 9)
|——————————CursorKind.DECL_REF_EXPR: canmsg (Line: 190, Col: 9)
|———————CursorKind.BINARY_OPERATOR:  (Line: 190, Col: 32)
|————————CursorKind.CALL_EXPR: get_clock_time_us (Line: 190, Col: 32)
|—————————CursorKind.UNEXPOSED_EXPR: get_clock_time_us (Line: 190, Col: 32)
|——————————CursorKind.DECL_REF_EXPR: get_clock_time_us (Line: 190, Col: 32)
|————————CursorKind.INTEGER_LITERAL:  (Line: 190, Col: 52)
|———CursorKind.BINARY_OPERATOR:  (Line: 193, Col: 5)
|————CursorKind.MEMBER_REF_EXPR:  (Line: 193, Col: 5)
|—————CursorKind.MEMBER_REF_EXPR:  (Line: 193, Col: 5)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 193, Col: 5)
|———————CursorKind.DECL_REF_EXPR: canmsg (Line: 193, Col: 5)
|————CursorKind.PAREN_EXPR:  (Line: 193, Col: 34)
|—————CursorKind.CONDITIONAL_OPERATOR:  (Line: 193, Col: 35)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 193, Col: 35)
|———————CursorKind.DECL_REF_EXPR: skb (Line: 193, Col: 35)
|——————CursorKind.INTEGER_LITERAL:  (Line: 193, Col: 50)
|——————CursorKind.INTEGER_LITERAL:  (Line: 193, Col: 54)
|———CursorKind.BINARY_OPERATOR:  (Line: 194, Col: 5)
|————CursorKind.MEMBER_REF_EXPR:  (Line: 194, Col: 5)
|—————CursorKind.UNEXPOSED_EXPR:  (Line: 194, Col: 5)
|——————CursorKind.DECL_REF_EXPR: canmsg (Line: 194, Col: 5)
|————CursorKind.UNEXPOSED_EXPR:  (Line: 194, Col: 18)
|—————CursorKind.DECL_REF_EXPR: msg (Line: 194, Col: 18)
|———CursorKind.DECL_STMT:  (Line: 196, Col: 5)
|————CursorKind.VAR_DECL: i (Line: 196, Col: 9)
|———CursorKind.WHILE_STMT:  (Line: 206, Col: 5)
|————CursorKind.UNEXPOSED_EXPR:  (Line: 206, Col: 12)
|————CursorKind.COMPOUND_STMT:  (Line: 206, Col: 39)
|—————CursorKind.IF_STMT:  (Line: 207, Col: 9)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 207, Col: 13)
|——————CursorKind.COMPOUND_STMT:  (Line: 207, Col: 59)
|———————CursorKind.IF_STMT:  (Line: 208, Col: 13)
|————————CursorKind.UNEXPOSED_EXPR:  (Line: 208, Col: 17)
|————————CursorKind.COMPOUND_STMT:  (Line: 208, Col: 60)
|———CursorKind.IF_STMT:  (Line: 232, Col: 5)
|————CursorKind.UNARY_OPERATOR:  (Line: 232, Col: 9)
|—————CursorKind.UNEXPOSED_EXPR:  (Line: 232, Col: 10)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 232, Col: 10)
|———————CursorKind.DECL_REF_EXPR: skb (Line: 232, Col: 10)
|————CursorKind.COMPOUND_STMT:  (Line: 232, Col: 24)
|—————CursorKind.CALL_EXPR: kfree_skb (Line: 233, Col: 9)
|——————CursorKind.UNEXPOSED_EXPR: kfree_skb (Line: 233, Col: 9)
|———————CursorKind.DECL_REF_EXPR: kfree_skb (Line: 233, Col: 9)
|——————CursorKind.UNEXPOSED_EXPR: skb (Line: 233, Col: 19)
|———————CursorKind.DECL_REF_EXPR: skb (Line: 233, Col: 19)
|—CursorKind.FUNCTION_DECL: netif_start_queue(struct net_device *) (Line: 239, Col: 6)
|——CursorKind.PARM_DECL: dev (Line: 239, Col: 43)
|———CursorKind.TYPE_REF: struct net_device (Line: 239, Col: 31)
|——CursorKind.COMPOUND_STMT:  (Line: 240, Col: 1)
|———CursorKind.CALL_EXPR: log_trace (Line: 241, Col: 5)
|————CursorKind.UNEXPOSED_EXPR: log_trace (Line: 241, Col: 5)
|—————CursorKind.DECL_REF_EXPR: log_trace (Line: 241, Col: 5)
|————CursorKind.UNEXPOSED_EXPR:  (Line: 241, Col: 15)
|—————CursorKind.STRING_LITERAL: "netif_start_queue\n" (Line: 241, Col: 15)
|—CursorKind.FUNCTION_DECL: netif_carrier_ok(const struct net_device *) (Line: 244, Col: 6)
|——CursorKind.PARM_DECL: dev (Line: 244, Col: 48)
|———CursorKind.TYPE_REF: struct net_device (Line: 244, Col: 36)
|——CursorKind.COMPOUND_STMT:  (Line: 244, Col: 53)
|—CursorKind.FUNCTION_DECL: netif_carrier_on(struct net_device *) (Line: 248, Col: 6)
|——CursorKind.PARM_DECL: dev (Line: 248, Col: 42)
|———CursorKind.TYPE_REF: struct net_device (Line: 248, Col: 30)
|——CursorKind.COMPOUND_STMT:  (Line: 249, Col: 1)
|———CursorKind.CALL_EXPR: log_trace (Line: 250, Col: 5)
|————CursorKind.UNEXPOSED_EXPR: log_trace (Line: 250, Col: 5)
|—————CursorKind.DECL_REF_EXPR: log_trace (Line: 250, Col: 5)
|————CursorKind.UNEXPOSED_EXPR:  (Line: 250, Col: 15)
|—————CursorKind.STRING_LITERAL: "netif_carrier_on\n" (Line: 250, Col: 15)
|—CursorKind.FUNCTION_DECL: netif_carrier_off(struct net_device *) (Line: 254, Col: 6)
|——CursorKind.PARM_DECL: dev (Line: 254, Col: 43)
|———CursorKind.TYPE_REF: struct net_device (Line: 254, Col: 31)
|——CursorKind.COMPOUND_STMT:  (Line: 255, Col: 1)
|———CursorKind.CALL_EXPR: log_trace (Line: 256, Col: 5)
|————CursorKind.UNEXPOSED_EXPR: log_trace (Line: 256, Col: 5)
|—————CursorKind.DECL_REF_EXPR: log_trace (Line: 256, Col: 5)
|————CursorKind.UNEXPOSED_EXPR:  (Line: 256, Col: 15)
|—————CursorKind.STRING_LITERAL: "netif_carrier_off\n" (Line: 256, Col: 15)
|—CursorKind.FUNCTION_DECL: netif_queue_stopped(const struct net_device *) (Line: 259, Col: 5)
|——CursorKind.PARM_DECL: dev (Line: 259, Col: 50)
|———CursorKind.TYPE_REF: struct net_device (Line: 259, Col: 38)
|——CursorKind.COMPOUND_STMT:  (Line: 260, Col: 1)
|———CursorKind.CALL_EXPR: log_trace (Line: 261, Col: 5)
|————CursorKind.UNEXPOSED_EXPR: log_trace (Line: 261, Col: 5)
|—————CursorKind.DECL_REF_EXPR: log_trace (Line: 261, Col: 5)
|————CursorKind.UNEXPOSED_EXPR:  (Line: 261, Col: 15)
|—————CursorKind.STRING_LITERAL: "netif_queue_stopped\n" (Line: 261, Col: 15)
|———CursorKind.RETURN_STMT:  (Line: 263, Col: 5)
|————CursorKind.INTEGER_LITERAL:  (Line: 263, Col: 12)
|—CursorKind.FUNCTION_DECL: netif_wake_queue(struct net_device *) (Line: 266, Col: 6)
|——CursorKind.PARM_DECL: dev (Line: 266, Col: 43)
|———CursorKind.TYPE_REF: struct net_device (Line: 266, Col: 31)
|——CursorKind.COMPOUND_STMT:  (Line: 266, Col: 48)
|———CursorKind.CALL_EXPR: log_trace (Line: 267, Col: 5)
|————CursorKind.UNEXPOSED_EXPR: log_trace (Line: 267, Col: 5)
|—————CursorKind.DECL_REF_EXPR: log_trace (Line: 267, Col: 5)
|————CursorKind.UNEXPOSED_EXPR:  (Line: 267, Col: 15)
|—————CursorKind.STRING_LITERAL: "netif_wake_queue\n" (Line: 267, Col: 15)
|—CursorKind.FUNCTION_DECL: netif_stop_queue(struct net_device *) (Line: 277, Col: 6)
|——CursorKind.PARM_DECL: dev (Line: 277, Col: 43)
|———CursorKind.TYPE_REF: struct net_device (Line: 277, Col: 31)
|——CursorKind.COMPOUND_STMT:  (Line: 277, Col: 48)
|———CursorKind.CALL_EXPR: log_trace (Line: 278, Col: 5)
|————CursorKind.UNEXPOSED_EXPR: log_trace (Line: 278, Col: 5)
|—————CursorKind.DECL_REF_EXPR: log_trace (Line: 278, Col: 5)
|————CursorKind.UNEXPOSED_EXPR:  (Line: 278, Col: 15)
|—————CursorKind.STRING_LITERAL: "netif_stop_queue\n" (Line: 278, Col: 15)
|———CursorKind.IF_STMT:  (Line: 282, Col: 5)
|————CursorKind.UNEXPOSED_EXPR:  (Line: 282, Col: 9)
|————CursorKind.COMPOUND_STMT:  (Line: 282, Col: 38)
|—————CursorKind.RETURN_STMT:  (Line: 283, Col: 9)
|———CursorKind.IF_STMT:  (Line: 287, Col: 5)
|————CursorKind.UNEXPOSED_EXPR:  (Line: 287, Col: 9)
|————CursorKind.COMPOUND_STMT:  (Line: 287, Col: 32)
|—————CursorKind.RETURN_STMT:  (Line: 288, Col: 9)
|———CursorKind.WHILE_STMT:  (Line: 292, Col: 5)
|————CursorKind.UNEXPOSED_EXPR:  (Line: 292, Col: 12)
|————CursorKind.COMPOUND_STMT:  (Line: 292, Col: 62)
