CAN-Monitor-qt-CanAdapter\CanAdapterTritium.cpp

|CursorKind.TRANSLATION_UNIT: CanAdapter\CanAdapterTritium.cpp (Line: 0, Col: 0)
|—CursorKind.STRUCT_DECL: TritiumHeader (Line: 45, Col: 8)
|——CursorKind.FIELD_DECL: busNumber (Line: 47, Col: 13)
|——CursorKind.FIELD_DECL: clientIdentifier (Line: 48, Col: 10)
|———CursorKind.INTEGER_LITERAL:  (Line: 48, Col: 27)
|—CursorKind.STRUCT_DECL: TritiumMessage (Line: 51, Col: 8)
|——CursorKind.FIELD_DECL: id (Line: 53, Col: 14)
|——CursorKind.FIELD_DECL: H (Line: 54, Col: 10)
|——CursorKind.FIELD_DECL: S (Line: 55, Col: 10)
|——CursorKind.FIELD_DECL: R (Line: 56, Col: 10)
|——CursorKind.FIELD_DECL: E (Line: 57, Col: 10)
|——CursorKind.FIELD_DECL: dlc (Line: 58, Col: 13)
|——CursorKind.FIELD_DECL: data (Line: 59, Col: 13)
|———CursorKind.INTEGER_LITERAL:  (Line: 59, Col: 18)
|—CursorKind.FUNCTION_DECL: decodeHeader(TritiumHeader &, const char *) (Line: 62, Col: 13)
|——CursorKind.PARM_DECL: h (Line: 62, Col: 41)
|———CursorKind.TYPE_REF: struct TritiumHeader (Line: 62, Col: 26)
|——CursorKind.PARM_DECL: data (Line: 62, Col: 57)
|——CursorKind.COMPOUND_STMT:  (Line: 63, Col: 1)
|———CursorKind.IF_STMT:  (Line: 64, Col: 5)
|————CursorKind.UNEXPOSED_EXPR:  (Line: 64, Col: 8)
|—————CursorKind.DECL_REF_EXPR:  (Line: 64, Col: 8)
|——————CursorKind.OVERLOADED_DECL_REF: memcmp (Line: 64, Col: 8)
|—————CursorKind.UNARY_OPERATOR:  (Line: 64, Col: 15)
|——————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 64, Col: 16)
|———————CursorKind.UNEXPOSED_EXPR: data (Line: 64, Col: 16)
|————————CursorKind.DECL_REF_EXPR: data (Line: 64, Col: 16)
|———————CursorKind.INTEGER_LITERAL:  (Line: 64, Col: 21)
|—————CursorKind.STRING_LITERAL: "Tritiu" (Line: 64, Col: 25)
|—————CursorKind.INTEGER_LITERAL:  (Line: 64, Col: 35)
|————CursorKind.RETURN_STMT:  (Line: 65, Col: 9)
|—————CursorKind.CXX_BOOL_LITERAL_EXPR:  (Line: 65, Col: 16)
|———CursorKind.IF_STMT:  (Line: 66, Col: 5)
|————CursorKind.BINARY_OPERATOR:  (Line: 66, Col: 8)
|—————CursorKind.PAREN_EXPR:  (Line: 66, Col: 8)
|——————CursorKind.BINARY_OPERATOR:  (Line: 66, Col: 9)
|———————CursorKind.UNEXPOSED_EXPR:  (Line: 66, Col: 9)
|————————CursorKind.UNEXPOSED_EXPR:  (Line: 66, Col: 9)
|—————————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 66, Col: 9)
|——————————CursorKind.UNEXPOSED_EXPR: data (Line: 66, Col: 9)
|———————————CursorKind.DECL_REF_EXPR: data (Line: 66, Col: 9)
|——————————CursorKind.INTEGER_LITERAL:  (Line: 66, Col: 14)
|———————CursorKind.INTEGER_LITERAL:  (Line: 66, Col: 19)
|—————CursorKind.INTEGER_LITERAL:  (Line: 66, Col: 28)
|————CursorKind.RETURN_STMT:  (Line: 67, Col: 9)
|—————CursorKind.CXX_BOOL_LITERAL_EXPR:  (Line: 67, Col: 16)
|———CursorKind.BINARY_OPERATOR:  (Line: 69, Col: 5)
|————CursorKind.UNEXPOSED_EXPR:  (Line: 69, Col: 5)
|—————CursorKind.DECL_REF_EXPR: h (Line: 69, Col: 5)
|————CursorKind.BINARY_OPERATOR:  (Line: 69, Col: 19)
|—————CursorKind.UNEXPOSED_EXPR:  (Line: 69, Col: 19)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 69, Col: 19)
|———————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 69, Col: 19)
|————————CursorKind.UNEXPOSED_EXPR: data (Line: 69, Col: 19)
|—————————CursorKind.DECL_REF_EXPR: data (Line: 69, Col: 19)
|————————CursorKind.INTEGER_LITERAL:  (Line: 69, Col: 24)
|—————CursorKind.INTEGER_LITERAL:  (Line: 69, Col: 29)
|———CursorKind.UNEXPOSED_EXPR:  (Line: 70, Col: 5)
|————CursorKind.DECL_REF_EXPR:  (Line: 70, Col: 5)
|—————CursorKind.OVERLOADED_DECL_REF: memcpy (Line: 70, Col: 5)
|————CursorKind.MEMBER_REF_EXPR: clientIdentifier (Line: 70, Col: 14)
|—————CursorKind.DECL_REF_EXPR: h (Line: 70, Col: 12)
|————CursorKind.UNARY_OPERATOR:  (Line: 70, Col: 32)
|—————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 70, Col: 33)
|——————CursorKind.UNEXPOSED_EXPR: data (Line: 70, Col: 33)
|———————CursorKind.DECL_REF_EXPR: data (Line: 70, Col: 33)
|——————CursorKind.INTEGER_LITERAL:  (Line: 70, Col: 38)
|————CursorKind.INTEGER_LITERAL:  (Line: 70, Col: 42)
|———CursorKind.RETURN_STMT:  (Line: 72, Col: 5)
|————CursorKind.CXX_BOOL_LITERAL_EXPR:  (Line: 72, Col: 12)
|—CursorKind.FUNCTION_DECL: encodeHeader(char *, const char *, int) (Line: 75, Col: 13)
|——CursorKind.PARM_DECL: data (Line: 75, Col: 33)
|——CursorKind.PARM_DECL: clientIdentifier (Line: 75, Col: 52)
|——CursorKind.PARM_DECL: busNumber (Line: 75, Col: 78)
|——CursorKind.COMPOUND_STMT:  (Line: 76, Col: 1)
|———CursorKind.UNEXPOSED_EXPR:  (Line: 77, Col: 5)
|————CursorKind.DECL_REF_EXPR:  (Line: 77, Col: 5)
|—————CursorKind.OVERLOADED_DECL_REF: memcpy (Line: 77, Col: 5)
|————CursorKind.DECL_REF_EXPR: data (Line: 77, Col: 12)
|————CursorKind.STRING_LITERAL: "\000Tritiu`" (Line: 77, Col: 18)
|————CursorKind.INTEGER_LITERAL:  (Line: 77, Col: 36)
|———CursorKind.COMPOUND_ASSIGNMENT_OPERATOR:  (Line: 78, Col: 5)
|————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 78, Col: 5)
|—————CursorKind.UNEXPOSED_EXPR: data (Line: 78, Col: 5)
|——————CursorKind.DECL_REF_EXPR: data (Line: 78, Col: 5)
|—————CursorKind.INTEGER_LITERAL:  (Line: 78, Col: 10)
|————CursorKind.BINARY_OPERATOR:  (Line: 78, Col: 16)
|—————CursorKind.UNEXPOSED_EXPR:  (Line: 78, Col: 16)
|—————CursorKind.INTEGER_LITERAL:  (Line: 78, Col: 28)
|———CursorKind.BINARY_OPERATOR:  (Line: 79, Col: 5)
|————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 79, Col: 5)
|—————CursorKind.UNEXPOSED_EXPR: data (Line: 79, Col: 5)
|——————CursorKind.DECL_REF_EXPR: data (Line: 79, Col: 5)
|—————CursorKind.INTEGER_LITERAL:  (Line: 79, Col: 10)
|————CursorKind.UNEXPOSED_EXPR:  (Line: 79, Col: 15)
|—————CursorKind.INTEGER_LITERAL:  (Line: 79, Col: 15)
|———CursorKind.UNEXPOSED_EXPR:  (Line: 80, Col: 5)
|————CursorKind.DECL_REF_EXPR:  (Line: 80, Col: 5)
|—————CursorKind.OVERLOADED_DECL_REF: memcpy (Line: 80, Col: 5)
|————CursorKind.UNARY_OPERATOR:  (Line: 80, Col: 12)
|—————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 80, Col: 13)
|——————CursorKind.UNEXPOSED_EXPR: data (Line: 80, Col: 13)
|———————CursorKind.DECL_REF_EXPR: data (Line: 80, Col: 13)
|——————CursorKind.INTEGER_LITERAL:  (Line: 80, Col: 18)
|————CursorKind.DECL_REF_EXPR: clientIdentifier (Line: 80, Col: 22)
|————CursorKind.INTEGER_LITERAL:  (Line: 80, Col: 40)
|—CursorKind.FUNCTION_DECL: decodeMessage(TritiumMessage &, const char *) (Line: 83, Col: 13)
|——CursorKind.PARM_DECL: m (Line: 83, Col: 43)
|———CursorKind.TYPE_REF: struct TritiumMessage (Line: 83, Col: 27)
|——CursorKind.PARM_DECL: data (Line: 83, Col: 59)
|——CursorKind.COMPOUND_STMT:  (Line: 84, Col: 1)
|———CursorKind.DECL_STMT:  (Line: 85, Col: 5)
|————CursorKind.VAR_DECL: d (Line: 85, Col: 21)
|———CursorKind.BINARY_OPERATOR:  (Line: 86, Col: 5)
|————CursorKind.UNEXPOSED_EXPR:  (Line: 86, Col: 5)
|—————CursorKind.DECL_REF_EXPR: m (Line: 86, Col: 5)
|————CursorKind.BINARY_OPERATOR:  (Line: 86, Col: 13)
|—————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 86, Col: 13)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 86, Col: 13)
|——————CursorKind.INTEGER_LITERAL:  (Line: 86, Col: 15)
|—————CursorKind.INTEGER_LITERAL:  (Line: 86, Col: 21)
|———CursorKind.COMPOUND_ASSIGNMENT_OPERATOR:  (Line: 87, Col: 5)
|————CursorKind.UNEXPOSED_EXPR:  (Line: 87, Col: 5)
|—————CursorKind.DECL_REF_EXPR: m (Line: 87, Col: 5)
|————CursorKind.BINARY_OPERATOR:  (Line: 87, Col: 13)
|—————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 87, Col: 13)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 87, Col: 13)
|——————CursorKind.INTEGER_LITERAL:  (Line: 87, Col: 15)
|—————CursorKind.INTEGER_LITERAL:  (Line: 87, Col: 21)
|———CursorKind.COMPOUND_ASSIGNMENT_OPERATOR:  (Line: 88, Col: 5)
|————CursorKind.UNEXPOSED_EXPR:  (Line: 88, Col: 5)
|—————CursorKind.DECL_REF_EXPR: m (Line: 88, Col: 5)
|————CursorKind.BINARY_OPERATOR:  (Line: 88, Col: 13)
|—————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 88, Col: 13)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 88, Col: 13)
|——————CursorKind.INTEGER_LITERAL:  (Line: 88, Col: 15)
|—————CursorKind.INTEGER_LITERAL:  (Line: 88, Col: 22)
|———CursorKind.COMPOUND_ASSIGNMENT_OPERATOR:  (Line: 89, Col: 5)
|————CursorKind.UNEXPOSED_EXPR:  (Line: 89, Col: 5)
|—————CursorKind.DECL_REF_EXPR: m (Line: 89, Col: 5)
|————CursorKind.BINARY_OPERATOR:  (Line: 89, Col: 13)
|—————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 89, Col: 13)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 89, Col: 13)
|——————CursorKind.INTEGER_LITERAL:  (Line: 89, Col: 15)
|—————CursorKind.INTEGER_LITERAL:  (Line: 89, Col: 22)
|———CursorKind.BINARY_OPERATOR:  (Line: 90, Col: 5)
|————CursorKind.MEMBER_REF_EXPR: H (Line: 90, Col: 7)
|—————CursorKind.DECL_REF_EXPR: m (Line: 90, Col: 5)
|————CursorKind.CONDITIONAL_OPERATOR:  (Line: 90, Col: 11)
|—————CursorKind.BINARY_OPERATOR:  (Line: 90, Col: 11)
|——————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 90, Col: 11)
|———————CursorKind.UNEXPOSED_EXPR:  (Line: 90, Col: 11)
|———————CursorKind.INTEGER_LITERAL:  (Line: 90, Col: 13)
|——————CursorKind.INTEGER_LITERAL:  (Line: 90, Col: 18)
|—————CursorKind.INTEGER_LITERAL:  (Line: 90, Col: 25)
|—————CursorKind.INTEGER_LITERAL:  (Line: 90, Col: 27)
|———CursorKind.BINARY_OPERATOR:  (Line: 91, Col: 5)
|————CursorKind.MEMBER_REF_EXPR: S (Line: 91, Col: 7)
|—————CursorKind.DECL_REF_EXPR: m (Line: 91, Col: 5)
|————CursorKind.CONDITIONAL_OPERATOR:  (Line: 91, Col: 11)
|—————CursorKind.BINARY_OPERATOR:  (Line: 91, Col: 11)
|——————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 91, Col: 11)
|———————CursorKind.UNEXPOSED_EXPR:  (Line: 91, Col: 11)
|———————CursorKind.INTEGER_LITERAL:  (Line: 91, Col: 13)
|——————CursorKind.INTEGER_LITERAL:  (Line: 91, Col: 18)
|—————CursorKind.INTEGER_LITERAL:  (Line: 91, Col: 25)
|—————CursorKind.INTEGER_LITERAL:  (Line: 91, Col: 27)
|———CursorKind.BINARY_OPERATOR:  (Line: 92, Col: 5)
|————CursorKind.MEMBER_REF_EXPR: R (Line: 92, Col: 7)
|—————CursorKind.DECL_REF_EXPR: m (Line: 92, Col: 5)
|————CursorKind.CONDITIONAL_OPERATOR:  (Line: 92, Col: 11)
|—————CursorKind.BINARY_OPERATOR:  (Line: 92, Col: 11)
|——————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 92, Col: 11)
|———————CursorKind.UNEXPOSED_EXPR:  (Line: 92, Col: 11)
|———————CursorKind.INTEGER_LITERAL:  (Line: 92, Col: 13)
|——————CursorKind.INTEGER_LITERAL:  (Line: 92, Col: 18)
|—————CursorKind.INTEGER_LITERAL:  (Line: 92, Col: 25)
|—————CursorKind.INTEGER_LITERAL:  (Line: 92, Col: 27)
|———CursorKind.BINARY_OPERATOR:  (Line: 93, Col: 5)
|————CursorKind.MEMBER_REF_EXPR: E (Line: 93, Col: 7)
|—————CursorKind.DECL_REF_EXPR: m (Line: 93, Col: 5)
|————CursorKind.CONDITIONAL_OPERATOR:  (Line: 93, Col: 11)
|—————CursorKind.BINARY_OPERATOR:  (Line: 93, Col: 11)
|——————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 93, Col: 11)
|———————CursorKind.UNEXPOSED_EXPR:  (Line: 93, Col: 11)
|———————CursorKind.INTEGER_LITERAL:  (Line: 93, Col: 13)
|——————CursorKind.INTEGER_LITERAL:  (Line: 93, Col: 18)
|—————CursorKind.INTEGER_LITERAL:  (Line: 93, Col: 25)
|—————CursorKind.INTEGER_LITERAL:  (Line: 93, Col: 27)
|———CursorKind.BINARY_OPERATOR:  (Line: 94, Col: 5)
|————CursorKind.UNEXPOSED_EXPR:  (Line: 94, Col: 5)
|—————CursorKind.DECL_REF_EXPR: m (Line: 94, Col: 5)
|————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 94, Col: 13)
|—————CursorKind.UNEXPOSED_EXPR:  (Line: 94, Col: 13)
|—————CursorKind.INTEGER_LITERAL:  (Line: 94, Col: 15)
|———CursorKind.CALL_EXPR:  (Line: 95, Col: 5)
|————CursorKind.DECL_REF_EXPR:  (Line: 95, Col: 5)
|—————CursorKind.OVERLOADED_DECL_REF: memcpy (Line: 95, Col: 5)
|————CursorKind.UNEXPOSED_EXPR:  (Line: 95, Col: 12)
|—————CursorKind.DECL_REF_EXPR: m (Line: 95, Col: 12)
|————CursorKind.UNARY_OPERATOR:  (Line: 95, Col: 20)
|—————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 95, Col: 21)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 95, Col: 21)
|——————CursorKind.INTEGER_LITERAL:  (Line: 95, Col: 23)
|————CursorKind.INTEGER_LITERAL:  (Line: 95, Col: 27)
|—CursorKind.FUNCTION_DECL: encodeCanMessage(char *, const int &) (Line: 98, Col: 13)
|——CursorKind.PARM_DECL: data (Line: 98, Col: 37)
|——CursorKind.PARM_DECL: cmsg (Line: 98, Col: 65)
|——CursorKind.COMPOUND_STMT:  (Line: 99, Col: 1)
|———CursorKind.BINARY_OPERATOR:  (Line: 100, Col: 5)
|————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 100, Col: 5)
|—————CursorKind.UNEXPOSED_EXPR: data (Line: 100, Col: 5)
|——————CursorKind.DECL_REF_EXPR: data (Line: 100, Col: 5)
|—————CursorKind.INTEGER_LITERAL:  (Line: 100, Col: 10)
|————CursorKind.BINARY_OPERATOR:  (Line: 100, Col: 15)
|—————CursorKind.MEMBER_REF_EXPR:  (Line: 100, Col: 15)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 100, Col: 15)
|—————CursorKind.INTEGER_LITERAL:  (Line: 100, Col: 26)
|———CursorKind.BINARY_OPERATOR:  (Line: 101, Col: 5)
|————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 101, Col: 5)
|—————CursorKind.UNEXPOSED_EXPR: data (Line: 101, Col: 5)
|——————CursorKind.DECL_REF_EXPR: data (Line: 101, Col: 5)
|—————CursorKind.INTEGER_LITERAL:  (Line: 101, Col: 10)
|————CursorKind.BINARY_OPERATOR:  (Line: 101, Col: 15)
|—————CursorKind.MEMBER_REF_EXPR:  (Line: 101, Col: 15)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 101, Col: 15)
|—————CursorKind.INTEGER_LITERAL:  (Line: 101, Col: 26)
|———CursorKind.BINARY_OPERATOR:  (Line: 102, Col: 5)
|————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 102, Col: 5)
|—————CursorKind.UNEXPOSED_EXPR: data (Line: 102, Col: 5)
|——————CursorKind.DECL_REF_EXPR: data (Line: 102, Col: 5)
|—————CursorKind.INTEGER_LITERAL:  (Line: 102, Col: 10)
|————CursorKind.BINARY_OPERATOR:  (Line: 102, Col: 15)
|—————CursorKind.MEMBER_REF_EXPR:  (Line: 102, Col: 15)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 102, Col: 15)
|—————CursorKind.INTEGER_LITERAL:  (Line: 102, Col: 27)
|———CursorKind.BINARY_OPERATOR:  (Line: 103, Col: 5)
|————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 103, Col: 5)
|—————CursorKind.UNEXPOSED_EXPR: data (Line: 103, Col: 5)
|——————CursorKind.DECL_REF_EXPR: data (Line: 103, Col: 5)
|—————CursorKind.INTEGER_LITERAL:  (Line: 103, Col: 10)
|————CursorKind.BINARY_OPERATOR:  (Line: 103, Col: 15)
|—————CursorKind.MEMBER_REF_EXPR:  (Line: 103, Col: 15)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 103, Col: 15)
|—————CursorKind.INTEGER_LITERAL:  (Line: 103, Col: 27)
|———CursorKind.BINARY_OPERATOR:  (Line: 104, Col: 5)
|————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 104, Col: 5)
|—————CursorKind.UNEXPOSED_EXPR: data (Line: 104, Col: 5)
|——————CursorKind.DECL_REF_EXPR: data (Line: 104, Col: 5)
|—————CursorKind.INTEGER_LITERAL:  (Line: 104, Col: 10)
|————CursorKind.CONDITIONAL_OPERATOR:  (Line: 104, Col: 16)
|—————CursorKind.MEMBER_REF_EXPR:  (Line: 104, Col: 16)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 104, Col: 16)
|—————CursorKind.INTEGER_LITERAL:  (Line: 104, Col: 27)
|—————CursorKind.INTEGER_LITERAL:  (Line: 104, Col: 32)
|———CursorKind.COMPOUND_ASSIGNMENT_OPERATOR:  (Line: 105, Col: 5)
|————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 105, Col: 5)
|—————CursorKind.UNEXPOSED_EXPR: data (Line: 105, Col: 5)
|——————CursorKind.DECL_REF_EXPR: data (Line: 105, Col: 5)
|—————CursorKind.INTEGER_LITERAL:  (Line: 105, Col: 10)
|————CursorKind.CONDITIONAL_OPERATOR:  (Line: 105, Col: 16)
|—————CursorKind.MEMBER_REF_EXPR:  (Line: 105, Col: 16)
|——————CursorKind.UNEXPOSED_EXPR:  (Line: 105, Col: 16)
|—————CursorKind.INTEGER_LITERAL:  (Line: 105, Col: 27)
|—————CursorKind.INTEGER_LITERAL:  (Line: 105, Col: 32)
|———CursorKind.BINARY_OPERATOR:  (Line: 106, Col: 5)
|————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 106, Col: 5)
|—————CursorKind.UNEXPOSED_EXPR: data (Line: 106, Col: 5)
|——————CursorKind.DECL_REF_EXPR: data (Line: 106, Col: 5)
|—————CursorKind.INTEGER_LITERAL:  (Line: 106, Col: 10)
|————CursorKind.MEMBER_REF_EXPR:  (Line: 106, Col: 15)
|—————CursorKind.UNEXPOSED_EXPR:  (Line: 106, Col: 15)
|———CursorKind.CALL_EXPR:  (Line: 107, Col: 5)
|————CursorKind.DECL_REF_EXPR:  (Line: 107, Col: 5)
|—————CursorKind.OVERLOADED_DECL_REF: memcpy (Line: 107, Col: 5)
|————CursorKind.UNARY_OPERATOR:  (Line: 107, Col: 12)
|—————CursorKind.ARRAY_SUBSCRIPT_EXPR:  (Line: 107, Col: 13)
|——————CursorKind.UNEXPOSED_EXPR: data (Line: 107, Col: 13)
|———————CursorKind.DECL_REF_EXPR: data (Line: 107, Col: 13)
|——————CursorKind.INTEGER_LITERAL:  (Line: 107, Col: 18)
|————CursorKind.MEMBER_REF_EXPR:  (Line: 107, Col: 22)
|—————CursorKind.UNEXPOSED_EXPR:  (Line: 107, Col: 22)
|————CursorKind.MEMBER_REF_EXPR:  (Line: 107, Col: 33)
|—————CursorKind.UNEXPOSED_EXPR:  (Line: 107, Col: 33)
