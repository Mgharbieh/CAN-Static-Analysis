NMEA2000_mcp-NMEA2000_mcp.cpp

|Node:translation_unit
|—Node:comment
|—Node:preproc_include Text: #include <NMEA2000_mcp.h>
|——Node:#include Text: #include
|——Node:system_lib_string Text: <NMEA2000_mcp.h>
|—Node:type_definition Text: typedef struct tCANFrame {
  uint32_t id; // can identifier
  uint8_t len; // length of data
  uint8_t buf[8];
} CAN_message_t;
|——Node:typedef Text: typedef
|——Node:struct_specifier Text: struct tCANFrame {
  uint32_t id; // can identifier
  uint8_t len; // length of data
  uint8_t buf[8];
}
|———Node:struct Text: struct
|———Node:type_identifier Text: tCANFrame
|———Node:field_declaration_list Text: {
  uint32_t id; // can identifier
  uint8_t len; // length of data
  uint8_t buf[8];
}
|————Node:{ Text: {
|————Node:field_declaration Text: uint32_t id;
|—————Node:primitive_type Text: uint32_t
|—————Node:field_identifier Text: id
|—————Node:; Text: ;
|————Node:comment
|————Node:field_declaration Text: uint8_t len;
|—————Node:primitive_type Text: uint8_t
|—————Node:field_identifier Text: len
|—————Node:; Text: ;
|————Node:comment
|————Node:field_declaration Text: uint8_t buf[8];
|—————Node:primitive_type Text: uint8_t
|—————Node:array_declarator Text: buf[8]
|——————Node:field_identifier Text: buf
|——————Node:[ Text: [
|——————Node:number_literal Text: 8
|——————Node:] Text: ]
|—————Node:; Text: ;
|————Node:} Text: }
|——Node:type_identifier Text: CAN_message_t
|——Node:; Text: ;
|—Node:declaration Text: bool CanInUse=false;
|——Node:primitive_type Text: bool
|——Node:init_declarator Text: CanInUse=false
|———Node:identifier Text: CanInUse
|———Node:= Text: =
|———Node:false Text: false
|——Node:; Text: ;
|—Node:declaration Text: MCP_CAN *pN2kCAN=0;
|——Node:type_identifier Text: MCP_CAN
|——Node:init_declarator Text: *pN2kCAN=0
|———Node:pointer_declarator Text: *pN2kCAN
|————Node:* Text: *
|————Node:identifier Text: pN2kCAN
|———Node:= Text: =
|———Node:number_literal Text: 0
|——Node:; Text: ;
|—Node:declaration Text: volatile tCANFrame *rx_frame_buff=0;
|——Node:type_qualifier Text: volatile
|———Node:volatile Text: volatile
|——Node:type_identifier Text: tCANFrame
|——Node:init_declarator Text: *rx_frame_buff=0
|———Node:pointer_declarator Text: *rx_frame_buff
|————Node:* Text: *
|————Node:identifier Text: rx_frame_buff
|———Node:= Text: =
|———Node:number_literal Text: 0
|——Node:; Text: ;
|—Node:declaration Text: volatile uint16_t rx_frame_buf_size=0;
|——Node:type_qualifier Text: volatile
|———Node:volatile Text: volatile
|——Node:primitive_type Text: uint16_t
|——Node:init_declarator Text: rx_frame_buf_size=0
|———Node:identifier Text: rx_frame_buf_size
|———Node:= Text: =
|———Node:number_literal Text: 0
|——Node:; Text: ;
|—Node:declaration Text: volatile uint8_t rx_buffer_read=0;
|——Node:type_qualifier Text: volatile
|———Node:volatile Text: volatile
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: rx_buffer_read=0
|———Node:identifier Text: rx_buffer_read
|———Node:= Text: =
|———Node:number_literal Text: 0
|——Node:; Text: ;
|—Node:declaration Text: volatile uint8_t rx_buffer_write=0;
|——Node:type_qualifier Text: volatile
|———Node:volatile Text: volatile
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: rx_buffer_write=0
|———Node:identifier Text: rx_buffer_write
|———Node:= Text: =
|———Node:number_literal Text: 0
|——Node:; Text: ;
|—Node:declaration Text: void CanIdToN2k(unsigned long id, unsigned char &prio, unsigned long &pgn, unsigned char &src, unsigned char &dst);
|——Node:primitive_type Text: void
|——Node:function_declarator Text: CanIdToN2k(unsigned long id, unsigned char &prio, unsigned long &pgn, unsigned char &src, unsigned char &dst)
|———Node:identifier Text: CanIdToN2k
|———Node:parameter_list Text: (unsigned long id, unsigned char &prio, unsigned long &pgn, unsigned char &src, unsigned char &dst)
|————Node:( Text: (
|————Node:parameter_declaration Text: unsigned long id
|—————Node:sized_type_specifier Text: unsigned long
|——————Node:unsigned Text: unsigned
|——————Node:long Text: long
|—————Node:identifier Text: id
|————Node:, Text: ,
|————Node:parameter_declaration Text: unsigned char &prio
|—————Node:sized_type_specifier Text: unsigned char
|——————Node:unsigned Text: unsigned
|——————Node:primitive_type Text: char
|—————Node:reference_declarator Text: &prio
|——————Node:& Text: &
|——————Node:identifier Text: prio
|————Node:, Text: ,
|————Node:parameter_declaration Text: unsigned long &pgn
|—————Node:sized_type_specifier Text: unsigned long
|——————Node:unsigned Text: unsigned
|——————Node:long Text: long
|—————Node:reference_declarator Text: &pgn
|——————Node:& Text: &
|——————Node:identifier Text: pgn
|————Node:, Text: ,
|————Node:parameter_declaration Text: unsigned char &src
|—————Node:sized_type_specifier Text: unsigned char
|——————Node:unsigned Text: unsigned
|——————Node:primitive_type Text: char
|—————Node:reference_declarator Text: &src
|——————Node:& Text: &
|——————Node:identifier Text: src
|————Node:, Text: ,
|————Node:parameter_declaration Text: unsigned char &dst
|—————Node:sized_type_specifier Text: unsigned char
|——————Node:unsigned Text: unsigned
|——————Node:primitive_type Text: char
|—————Node:reference_declarator Text: &dst
|——————Node:& Text: &
|——————Node:identifier Text: dst
|————Node:) Text: )
|——Node:; Text: ;
|—Node:declaration Text: void CanInterrupt();
|——Node:primitive_type Text: void
|——Node:function_declarator Text: CanInterrupt()
|———Node:identifier Text: CanInterrupt
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:; Text: ;
|—Node:comment
|—Node:function_definition Text: void PrintDecodedCanIdAndLen(unsigned long id, unsigned char len) {
  unsigned char prio;
  unsigned long pgn;
  unsigned char src;
  unsigned char dst;
  
  if (id!=0) {
    CanIdToN2k(id,prio,pgn,src,dst);
    Serial.print("pgn: "); Serial.print(pgn); Serial.print(", prio: "); Serial.print(prio);
    Serial.print(", src: "); Serial.print(src); Serial.print(", dst: "); Serial.print(dst); 
  } else {
    Serial.print("id: "); Serial.print(id);
  }
  Serial.print(", len: "); Serial.println(len);
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: PrintDecodedCanIdAndLen(unsigned long id, unsigned char len)
|———Node:identifier Text: PrintDecodedCanIdAndLen
|———Node:parameter_list Text: (unsigned long id, unsigned char len)
|————Node:( Text: (
|————Node:parameter_declaration Text: unsigned long id
|—————Node:sized_type_specifier Text: unsigned long
|——————Node:unsigned Text: unsigned
|——————Node:long Text: long
|—————Node:identifier Text: id
|————Node:, Text: ,
|————Node:parameter_declaration Text: unsigned char len
|—————Node:sized_type_specifier Text: unsigned char
|——————Node:unsigned Text: unsigned
|——————Node:primitive_type Text: char
|—————Node:identifier Text: len
|————Node:) Text: )
|——Node:compound_statement Text: {
  unsigned char prio;
  unsigned long pgn;
  unsigned char src;
  unsigned char dst;
  
  if (id!=0) {
    CanIdToN2k(id,prio,pgn,src,dst);
    Serial.print("pgn: "); Serial.print(pgn); Serial.print(", prio: "); Serial.print(prio);
    Serial.print(", src: "); Serial.print(src); Serial.print(", dst: "); Serial.print(dst); 
  } else {
    Serial.print("id: "); Serial.print(id);
  }
  Serial.print(", len: "); Serial.println(len);
}
|———Node:{ Text: {
|———Node:declaration Text: unsigned char prio;
|————Node:sized_type_specifier Text: unsigned char
|—————Node:unsigned Text: unsigned
|—————Node:primitive_type Text: char
|————Node:identifier Text: prio
|————Node:; Text: ;
|———Node:declaration Text: unsigned long pgn;
|————Node:sized_type_specifier Text: unsigned long
|—————Node:unsigned Text: unsigned
|—————Node:long Text: long
|————Node:identifier Text: pgn
|————Node:; Text: ;
|———Node:declaration Text: unsigned char src;
|————Node:sized_type_specifier Text: unsigned char
|—————Node:unsigned Text: unsigned
|—————Node:primitive_type Text: char
|————Node:identifier Text: src
|————Node:; Text: ;
|———Node:declaration Text: unsigned char dst;
|————Node:sized_type_specifier Text: unsigned char
|—————Node:unsigned Text: unsigned
|—————Node:primitive_type Text: char
|————Node:identifier Text: dst
|————Node:; Text: ;
|———Node:if_statement Text: if (id!=0) {
    CanIdToN2k(id,prio,pgn,src,dst);
    Serial.print("pgn: "); Serial.print(pgn); Serial.print(", prio: "); Serial.print(prio);
    Serial.print(", src: "); Serial.print(src); Serial.print(", dst: "); Serial.print(dst); 
  } else {
    Serial.print("id: "); Serial.print(id);
  }
|————Node:if Text: if
|————Node:condition_clause Text: (id!=0)
|—————Node:( Text: (
|—————Node:binary_expression Text: id!=0
|——————Node:identifier Text: id
|——————Node:!= Text: !=
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {
    CanIdToN2k(id,prio,pgn,src,dst);
    Serial.print("pgn: "); Serial.print(pgn); Serial.print(", prio: "); Serial.print(prio);
    Serial.print(", src: "); Serial.print(src); Serial.print(", dst: "); Serial.print(dst); 
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: CanIdToN2k(id,prio,pgn,src,dst);
|——————Node:call_expression Text: CanIdToN2k(id,prio,pgn,src,dst)
|———————Node:identifier Text: CanIdToN2k
|———————Node:argument_list Text: (id,prio,pgn,src,dst)
|————————Node:( Text: (
|————————Node:identifier Text: id
|————————Node:, Text: ,
|————————Node:identifier Text: prio
|————————Node:, Text: ,
|————————Node:identifier Text: pgn
|————————Node:, Text: ,
|————————Node:identifier Text: src
|————————Node:, Text: ,
|————————Node:identifier Text: dst
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: Serial.print("pgn: ");
|——————Node:call_expression Text: Serial.print("pgn: ")
|———————Node:field_expression Text: Serial.print
|————————Node:identifier Text: Serial
|————————Node:. Text: .
|————————Node:field_identifier Text: print
|———————Node:argument_list Text: ("pgn: ")
|————————Node:( Text: (
|————————Node:string_literal Text: "pgn: "
|—————————Node:" Text: "
|—————————Node:string_content Text: pgn: 
|—————————Node:" Text: "
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: Serial.print(pgn);
|——————Node:call_expression Text: Serial.print(pgn)
|———————Node:field_expression Text: Serial.print
|————————Node:identifier Text: Serial
|————————Node:. Text: .
|————————Node:field_identifier Text: print
|———————Node:argument_list Text: (pgn)
|————————Node:( Text: (
|————————Node:identifier Text: pgn
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: Serial.print(", prio: ");
|——————Node:call_expression Text: Serial.print(", prio: ")
|———————Node:field_expression Text: Serial.print
|————————Node:identifier Text: Serial
|————————Node:. Text: .
|————————Node:field_identifier Text: print
|———————Node:argument_list Text: (", prio: ")
|————————Node:( Text: (
|————————Node:string_literal Text: ", prio: "
|—————————Node:" Text: "
|—————————Node:string_content Text: , prio: 
|—————————Node:" Text: "
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: Serial.print(prio);
|——————Node:call_expression Text: Serial.print(prio)
|———————Node:field_expression Text: Serial.print
|————————Node:identifier Text: Serial
|————————Node:. Text: .
|————————Node:field_identifier Text: print
|———————Node:argument_list Text: (prio)
|————————Node:( Text: (
|————————Node:identifier Text: prio
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: Serial.print(", src: ");
|——————Node:call_expression Text: Serial.print(", src: ")
|———————Node:field_expression Text: Serial.print
|————————Node:identifier Text: Serial
|————————Node:. Text: .
|————————Node:field_identifier Text: print
|———————Node:argument_list Text: (", src: ")
|————————Node:( Text: (
|————————Node:string_literal Text: ", src: "
|—————————Node:" Text: "
|—————————Node:string_content Text: , src: 
|—————————Node:" Text: "
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: Serial.print(src);
|——————Node:call_expression Text: Serial.print(src)
|———————Node:field_expression Text: Serial.print
|————————Node:identifier Text: Serial
|————————Node:. Text: .
|————————Node:field_identifier Text: print
|———————Node:argument_list Text: (src)
|————————Node:( Text: (
|————————Node:identifier Text: src
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: Serial.print(", dst: ");
|——————Node:call_expression Text: Serial.print(", dst: ")
|———————Node:field_expression Text: Serial.print
|————————Node:identifier Text: Serial
|————————Node:. Text: .
|————————Node:field_identifier Text: print
|———————Node:argument_list Text: (", dst: ")
|————————Node:( Text: (
|————————Node:string_literal Text: ", dst: "
|—————————Node:" Text: "
|—————————Node:string_content Text: , dst: 
|—————————Node:" Text: "
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: Serial.print(dst);
|——————Node:call_expression Text: Serial.print(dst)
|———————Node:field_expression Text: Serial.print
|————————Node:identifier Text: Serial
|————————Node:. Text: .
|————————Node:field_identifier Text: print
|———————Node:argument_list Text: (dst)
|————————Node:( Text: (
|————————Node:identifier Text: dst
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else {
    Serial.print("id: "); Serial.print(id);
  }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
    Serial.print("id: "); Serial.print(id);
  }
|——————Node:{ Text: {
|——————Node:expression_statement Text: Serial.print("id: ");
|———————Node:call_expression Text: Serial.print("id: ")
|————————Node:field_expression Text: Serial.print
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: print
|————————Node:argument_list Text: ("id: ")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "id: "
|——————————Node:" Text: "
|——————————Node:string_content Text: id: 
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: Serial.print(id);
|———————Node:call_expression Text: Serial.print(id)
|————————Node:field_expression Text: Serial.print
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: print
|————————Node:argument_list Text: (id)
|—————————Node:( Text: (
|—————————Node:identifier Text: id
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:} Text: }
|———Node:expression_statement Text: Serial.print(", len: ");
|————Node:call_expression Text: Serial.print(", len: ")
|—————Node:field_expression Text: Serial.print
|——————Node:identifier Text: Serial
|——————Node:. Text: .
|——————Node:field_identifier Text: print
|—————Node:argument_list Text: (", len: ")
|——————Node:( Text: (
|——————Node:string_literal Text: ", len: "
|———————Node:" Text: "
|———————Node:string_content Text: , len: 
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: Serial.println(len);
|————Node:call_expression Text: Serial.println(len)
|—————Node:field_expression Text: Serial.println
|——————Node:identifier Text: Serial
|——————Node:. Text: .
|——————Node:field_identifier Text: println
|—————Node:argument_list Text: (len)
|——————Node:( Text: (
|——————Node:identifier Text: len
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: tNMEA2000_mcp::tNMEA2000_mcp(unsigned char _N2k_CAN_CS_pin, unsigned char _N2k_CAN_clockset, 
                             unsigned char _N2k_CAN_int_pin, uint16_t _rx_frame_buf_size) : tNMEA2000(), N2kCAN() {
  IsOpen=false;
  N2k_CAN_CS_pin=_N2k_CAN_CS_pin;
  N2k_CAN_clockset=_N2k_CAN_clockset;
  if (pN2kCAN==0) { // Currently only first instace can use interrupts.
    N2k_CAN_int_pin=_N2k_CAN_int_pin;
    if ( UseInterrupt() ) {
      rx_frame_buf_size=_rx_frame_buf_size;
      if (rx_frame_buf_size<2) rx_frame_buf_size=2;
      rx_frame_buff=new tCANFrame[rx_frame_buf_size];
      pN2kCAN=&N2kCAN;
    }
  } else {
    N2k_CAN_int_pin=0xff;
  }
}
|——Node:function_declarator Text: tNMEA2000_mcp::tNMEA2000_mcp(unsigned char _N2k_CAN_CS_pin, unsigned char _N2k_CAN_clockset, 
                             unsigned char _N2k_CAN_int_pin, uint16_t _rx_frame_buf_size)
|———Node:qualified_identifier Text: tNMEA2000_mcp::tNMEA2000_mcp
|————Node:namespace_identifier Text: tNMEA2000_mcp
|————Node::: Text: ::
|————Node:identifier Text: tNMEA2000_mcp
|———Node:parameter_list Text: (unsigned char _N2k_CAN_CS_pin, unsigned char _N2k_CAN_clockset, 
                             unsigned char _N2k_CAN_int_pin, uint16_t _rx_frame_buf_size)
|————Node:( Text: (
|————Node:parameter_declaration Text: unsigned char _N2k_CAN_CS_pin
|—————Node:sized_type_specifier Text: unsigned char
|——————Node:unsigned Text: unsigned
|——————Node:primitive_type Text: char
|—————Node:identifier Text: _N2k_CAN_CS_pin
|————Node:, Text: ,
|————Node:parameter_declaration Text: unsigned char _N2k_CAN_clockset
|—————Node:sized_type_specifier Text: unsigned char
|——————Node:unsigned Text: unsigned
|——————Node:primitive_type Text: char
|—————Node:identifier Text: _N2k_CAN_clockset
|————Node:, Text: ,
|————Node:parameter_declaration Text: unsigned char _N2k_CAN_int_pin
|—————Node:sized_type_specifier Text: unsigned char
|——————Node:unsigned Text: unsigned
|——————Node:primitive_type Text: char
|—————Node:identifier Text: _N2k_CAN_int_pin
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint16_t _rx_frame_buf_size
|—————Node:primitive_type Text: uint16_t
|—————Node:identifier Text: _rx_frame_buf_size
|————Node:) Text: )
|——Node:field_initializer_list Text: : tNMEA2000(), N2kCAN()
|———Node:: Text: :
|———Node:field_initializer Text: tNMEA2000()
|————Node:field_identifier Text: tNMEA2000
|————Node:argument_list Text: ()
|—————Node:( Text: (
|—————Node:) Text: )
|———Node:, Text: ,
|———Node:field_initializer Text: N2kCAN()
|————Node:field_identifier Text: N2kCAN
|————Node:argument_list Text: ()
|—————Node:( Text: (
|—————Node:) Text: )
|——Node:compound_statement Text: {
  IsOpen=false;
  N2k_CAN_CS_pin=_N2k_CAN_CS_pin;
  N2k_CAN_clockset=_N2k_CAN_clockset;
  if (pN2kCAN==0) { // Currently only first instace can use interrupts.
    N2k_CAN_int_pin=_N2k_CAN_int_pin;
    if ( UseInterrupt() ) {
      rx_frame_buf_size=_rx_frame_buf_size;
      if (rx_frame_buf_size<2) rx_frame_buf_size=2;
      rx_frame_buff=new tCANFrame[rx_frame_buf_size];
      pN2kCAN=&N2kCAN;
    }
  } else {
    N2k_CAN_int_pin=0xff;
  }
}
|———Node:{ Text: {
|———Node:expression_statement Text: IsOpen=false;
|————Node:assignment_expression Text: IsOpen=false
|—————Node:identifier Text: IsOpen
|—————Node:= Text: =
|—————Node:false Text: false
|————Node:; Text: ;
|———Node:expression_statement Text: N2k_CAN_CS_pin=_N2k_CAN_CS_pin;
|————Node:assignment_expression Text: N2k_CAN_CS_pin=_N2k_CAN_CS_pin
|—————Node:identifier Text: N2k_CAN_CS_pin
|—————Node:= Text: =
|—————Node:identifier Text: _N2k_CAN_CS_pin
|————Node:; Text: ;
|———Node:expression_statement Text: N2k_CAN_clockset=_N2k_CAN_clockset;
|————Node:assignment_expression Text: N2k_CAN_clockset=_N2k_CAN_clockset
|—————Node:identifier Text: N2k_CAN_clockset
|—————Node:= Text: =
|—————Node:identifier Text: _N2k_CAN_clockset
|————Node:; Text: ;
|———Node:if_statement Text: if (pN2kCAN==0) { // Currently only first instace can use interrupts.
    N2k_CAN_int_pin=_N2k_CAN_int_pin;
    if ( UseInterrupt() ) {
      rx_frame_buf_size=_rx_frame_buf_size;
      if (rx_frame_buf_size<2) rx_frame_buf_size=2;
      rx_frame_buff=new tCANFrame[rx_frame_buf_size];
      pN2kCAN=&N2kCAN;
    }
  } else {
    N2k_CAN_int_pin=0xff;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (pN2kCAN==0)
|—————Node:( Text: (
|—————Node:binary_expression Text: pN2kCAN==0
|——————Node:identifier Text: pN2kCAN
|——————Node:== Text: ==
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: { // Currently only first instace can use interrupts.
    N2k_CAN_int_pin=_N2k_CAN_int_pin;
    if ( UseInterrupt() ) {
      rx_frame_buf_size=_rx_frame_buf_size;
      if (rx_frame_buf_size<2) rx_frame_buf_size=2;
      rx_frame_buff=new tCANFrame[rx_frame_buf_size];
      pN2kCAN=&N2kCAN;
    }
  }
|—————Node:{ Text: {
|—————Node:comment
|—————Node:expression_statement Text: N2k_CAN_int_pin=_N2k_CAN_int_pin;
|——————Node:assignment_expression Text: N2k_CAN_int_pin=_N2k_CAN_int_pin
|———————Node:identifier Text: N2k_CAN_int_pin
|———————Node:= Text: =
|———————Node:identifier Text: _N2k_CAN_int_pin
|——————Node:; Text: ;
|—————Node:if_statement Text: if ( UseInterrupt() ) {
      rx_frame_buf_size=_rx_frame_buf_size;
      if (rx_frame_buf_size<2) rx_frame_buf_size=2;
      rx_frame_buff=new tCANFrame[rx_frame_buf_size];
      pN2kCAN=&N2kCAN;
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: ( UseInterrupt() )
|———————Node:( Text: (
|———————Node:call_expression Text: UseInterrupt()
|————————Node:identifier Text: UseInterrupt
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {
      rx_frame_buf_size=_rx_frame_buf_size;
      if (rx_frame_buf_size<2) rx_frame_buf_size=2;
      rx_frame_buff=new tCANFrame[rx_frame_buf_size];
      pN2kCAN=&N2kCAN;
    }
|———————Node:{ Text: {
|———————Node:expression_statement Text: rx_frame_buf_size=_rx_frame_buf_size;
|————————Node:assignment_expression Text: rx_frame_buf_size=_rx_frame_buf_size
|—————————Node:identifier Text: rx_frame_buf_size
|—————————Node:= Text: =
|—————————Node:identifier Text: _rx_frame_buf_size
|————————Node:; Text: ;
|———————Node:if_statement Text: if (rx_frame_buf_size<2) rx_frame_buf_size=2;
|————————Node:if Text: if
|————————Node:condition_clause Text: (rx_frame_buf_size<2)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: rx_frame_buf_size<2
|——————————Node:identifier Text: rx_frame_buf_size
|——————————Node:< Text: <
|——————————Node:number_literal Text: 2
|—————————Node:) Text: )
|————————Node:expression_statement Text: rx_frame_buf_size=2;
|—————————Node:assignment_expression Text: rx_frame_buf_size=2
|——————————Node:identifier Text: rx_frame_buf_size
|——————————Node:= Text: =
|——————————Node:number_literal Text: 2
|—————————Node:; Text: ;
|———————Node:expression_statement Text: rx_frame_buff=new tCANFrame[rx_frame_buf_size];
|————————Node:assignment_expression Text: rx_frame_buff=new tCANFrame[rx_frame_buf_size]
|—————————Node:identifier Text: rx_frame_buff
|—————————Node:= Text: =
|—————————Node:new_expression Text: new tCANFrame[rx_frame_buf_size]
|——————————Node:new Text: new
|——————————Node:type_identifier Text: tCANFrame
|——————————Node:new_declarator Text: [rx_frame_buf_size]
|———————————Node:[ Text: [
|———————————Node:identifier Text: rx_frame_buf_size
|———————————Node:] Text: ]
|————————Node:; Text: ;
|———————Node:expression_statement Text: pN2kCAN=&N2kCAN;
|————————Node:assignment_expression Text: pN2kCAN=&N2kCAN
|—————————Node:identifier Text: pN2kCAN
|—————————Node:= Text: =
|—————————Node:pointer_expression Text: &N2kCAN
|——————————Node:& Text: &
|——————————Node:identifier Text: N2kCAN
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|————Node:else_clause Text: else {
    N2k_CAN_int_pin=0xff;
  }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
    N2k_CAN_int_pin=0xff;
  }
|——————Node:{ Text: {
|——————Node:expression_statement Text: N2k_CAN_int_pin=0xff;
|———————Node:assignment_expression Text: N2k_CAN_int_pin=0xff
|————————Node:identifier Text: N2k_CAN_int_pin
|————————Node:= Text: =
|————————Node:number_literal Text: 0xff
|———————Node:; Text: ;
|——————Node:} Text: }
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: bool tNMEA2000_mcp::CANSendFrame(unsigned long id, unsigned char len, const unsigned char *buf, bool wait_sent) {
  INT8U result;

    // Also sending should be changed to be done by interrupt. This requires modifications for mcp_can.
    uint8_t SaveSREG = SREG;   // save interrupt flag
    if ( UseInterrupt() ) cli();   // disable interrupts
    result=N2kCAN.sendMsgBuf(id, 1, len, buf,wait_sent);
    if ( UseInterrupt() ) SREG = SaveSREG;   // restore the interrupt flag
//    Serial.println(result);
    return (result==CAN_OK); 
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: tNMEA2000_mcp::CANSendFrame(unsigned long id, unsigned char len, const unsigned char *buf, bool wait_sent)
|———Node:qualified_identifier Text: tNMEA2000_mcp::CANSendFrame
|————Node:namespace_identifier Text: tNMEA2000_mcp
|————Node::: Text: ::
|————Node:identifier Text: CANSendFrame
|———Node:parameter_list Text: (unsigned long id, unsigned char len, const unsigned char *buf, bool wait_sent)
|————Node:( Text: (
|————Node:parameter_declaration Text: unsigned long id
|—————Node:sized_type_specifier Text: unsigned long
|——————Node:unsigned Text: unsigned
|——————Node:long Text: long
|—————Node:identifier Text: id
|————Node:, Text: ,
|————Node:parameter_declaration Text: unsigned char len
|—————Node:sized_type_specifier Text: unsigned char
|——————Node:unsigned Text: unsigned
|——————Node:primitive_type Text: char
|—————Node:identifier Text: len
|————Node:, Text: ,
|————Node:parameter_declaration Text: const unsigned char *buf
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:sized_type_specifier Text: unsigned char
|——————Node:unsigned Text: unsigned
|——————Node:primitive_type Text: char
|—————Node:pointer_declarator Text: *buf
|——————Node:* Text: *
|——————Node:identifier Text: buf
|————Node:, Text: ,
|————Node:parameter_declaration Text: bool wait_sent
|—————Node:primitive_type Text: bool
|—————Node:identifier Text: wait_sent
|————Node:) Text: )
|——Node:compound_statement Text: {
  INT8U result;

    // Also sending should be changed to be done by interrupt. This requires modifications for mcp_can.
    uint8_t SaveSREG = SREG;   // save interrupt flag
    if ( UseInterrupt() ) cli();   // disable interrupts
    result=N2kCAN.sendMsgBuf(id, 1, len, buf,wait_sent);
    if ( UseInterrupt() ) SREG = SaveSREG;   // restore the interrupt flag
//    Serial.println(result);
    return (result==CAN_OK); 
}
|———Node:{ Text: {
|———Node:declaration Text: INT8U result;
|————Node:type_identifier Text: INT8U
|————Node:identifier Text: result
|————Node:; Text: ;
|———Node:comment
|———Node:declaration Text: uint8_t SaveSREG = SREG;
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: SaveSREG = SREG
|—————Node:identifier Text: SaveSREG
|—————Node:= Text: =
|—————Node:identifier Text: SREG
|————Node:; Text: ;
|———Node:comment
|———Node:if_statement Text: if ( UseInterrupt() ) cli();
|————Node:if Text: if
|————Node:condition_clause Text: ( UseInterrupt() )
|—————Node:( Text: (
|—————Node:call_expression Text: UseInterrupt()
|——————Node:identifier Text: UseInterrupt
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:expression_statement Text: cli();
|—————Node:call_expression Text: cli()
|——————Node:identifier Text: cli
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: result=N2kCAN.sendMsgBuf(id, 1, len, buf,wait_sent);
|————Node:assignment_expression Text: result=N2kCAN.sendMsgBuf(id, 1, len, buf,wait_sent)
|—————Node:identifier Text: result
|—————Node:= Text: =
|—————Node:call_expression Text: N2kCAN.sendMsgBuf(id, 1, len, buf,wait_sent)
|——————Node:field_expression Text: N2kCAN.sendMsgBuf
|———————Node:identifier Text: N2kCAN
|———————Node:. Text: .
|———————Node:field_identifier Text: sendMsgBuf
|——————Node:argument_list Text: (id, 1, len, buf,wait_sent)
|———————Node:( Text: (
|———————Node:identifier Text: id
|———————Node:, Text: ,
|———————Node:number_literal Text: 1
|———————Node:, Text: ,
|———————Node:identifier Text: len
|———————Node:, Text: ,
|———————Node:identifier Text: buf
|———————Node:, Text: ,
|———————Node:identifier Text: wait_sent
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if ( UseInterrupt() ) SREG = SaveSREG;
|————Node:if Text: if
|————Node:condition_clause Text: ( UseInterrupt() )
|—————Node:( Text: (
|—————Node:call_expression Text: UseInterrupt()
|——————Node:identifier Text: UseInterrupt
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:expression_statement Text: SREG = SaveSREG;
|—————Node:assignment_expression Text: SREG = SaveSREG
|——————Node:identifier Text: SREG
|——————Node:= Text: =
|——————Node:identifier Text: SaveSREG
|—————Node:; Text: ;
|———Node:comment
|———Node:comment
|———Node:return_statement Text: return (result==CAN_OK);
|————Node:return Text: return
|————Node:parenthesized_expression Text: (result==CAN_OK)
|—————Node:( Text: (
|—————Node:binary_expression Text: result==CAN_OK
|——————Node:identifier Text: result
|——————Node:== Text: ==
|——————Node:identifier Text: CAN_OK
|—————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: bool tNMEA2000_mcp::CANOpen() {
    if (IsOpen) return true;
    
    if (CanInUse) return false; // currently prevent accidental second instance. Maybe possible in future.
    
    N2kCAN.init_CS(N2k_CAN_CS_pin);
    IsOpen=(N2kCAN.begin(CAN_250KBPS,N2k_CAN_clockset)==CAN_OK);
    
    if (IsOpen && UseInterrupt() ) {
      rx_buffer_read=0;
      rx_buffer_write=0;
      attachInterrupt(digitalPinToInterrupt(N2k_CAN_int_pin), CanInterrupt, FALLING);
    }    
    
    CanInUse=IsOpen;
    
    return IsOpen;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: tNMEA2000_mcp::CANOpen()
|———Node:qualified_identifier Text: tNMEA2000_mcp::CANOpen
|————Node:namespace_identifier Text: tNMEA2000_mcp
|————Node::: Text: ::
|————Node:identifier Text: CANOpen
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    if (IsOpen) return true;
    
    if (CanInUse) return false; // currently prevent accidental second instance. Maybe possible in future.
    
    N2kCAN.init_CS(N2k_CAN_CS_pin);
    IsOpen=(N2kCAN.begin(CAN_250KBPS,N2k_CAN_clockset)==CAN_OK);
    
    if (IsOpen && UseInterrupt() ) {
      rx_buffer_read=0;
      rx_buffer_write=0;
      attachInterrupt(digitalPinToInterrupt(N2k_CAN_int_pin), CanInterrupt, FALLING);
    }    
    
    CanInUse=IsOpen;
    
    return IsOpen;
}
|———Node:{ Text: {
|———Node:if_statement Text: if (IsOpen) return true;
|————Node:if Text: if
|————Node:condition_clause Text: (IsOpen)
|—————Node:( Text: (
|—————Node:identifier Text: IsOpen
|—————Node:) Text: )
|————Node:return_statement Text: return true;
|—————Node:return Text: return
|—————Node:true Text: true
|—————Node:; Text: ;
|———Node:if_statement Text: if (CanInUse) return false;
|————Node:if Text: if
|————Node:condition_clause Text: (CanInUse)
|—————Node:( Text: (
|—————Node:identifier Text: CanInUse
|—————Node:) Text: )
|————Node:return_statement Text: return false;
|—————Node:return Text: return
|—————Node:false Text: false
|—————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: N2kCAN.init_CS(N2k_CAN_CS_pin);
|————Node:call_expression Text: N2kCAN.init_CS(N2k_CAN_CS_pin)
|—————Node:field_expression Text: N2kCAN.init_CS
|——————Node:identifier Text: N2kCAN
|——————Node:. Text: .
|——————Node:field_identifier Text: init_CS
|—————Node:argument_list Text: (N2k_CAN_CS_pin)
|——————Node:( Text: (
|——————Node:identifier Text: N2k_CAN_CS_pin
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: IsOpen=(N2kCAN.begin(CAN_250KBPS,N2k_CAN_clockset)==CAN_OK);
|————Node:assignment_expression Text: IsOpen=(N2kCAN.begin(CAN_250KBPS,N2k_CAN_clockset)==CAN_OK)
|—————Node:identifier Text: IsOpen
|—————Node:= Text: =
|—————Node:parenthesized_expression Text: (N2kCAN.begin(CAN_250KBPS,N2k_CAN_clockset)==CAN_OK)
|——————Node:( Text: (
|——————Node:binary_expression Text: N2kCAN.begin(CAN_250KBPS,N2k_CAN_clockset)==CAN_OK
|———————Node:call_expression Text: N2kCAN.begin(CAN_250KBPS,N2k_CAN_clockset)
|————————Node:field_expression Text: N2kCAN.begin
|—————————Node:identifier Text: N2kCAN
|—————————Node:. Text: .
|—————————Node:field_identifier Text: begin
|————————Node:argument_list Text: (CAN_250KBPS,N2k_CAN_clockset)
|—————————Node:( Text: (
|—————————Node:identifier Text: CAN_250KBPS
|—————————Node:, Text: ,
|—————————Node:identifier Text: N2k_CAN_clockset
|—————————Node:) Text: )
|———————Node:== Text: ==
|———————Node:identifier Text: CAN_OK
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (IsOpen && UseInterrupt() ) {
      rx_buffer_read=0;
      rx_buffer_write=0;
      attachInterrupt(digitalPinToInterrupt(N2k_CAN_int_pin), CanInterrupt, FALLING);
    }
|————Node:if Text: if
|————Node:condition_clause Text: (IsOpen && UseInterrupt() )
|—————Node:( Text: (
|—————Node:binary_expression Text: IsOpen && UseInterrupt()
|——————Node:identifier Text: IsOpen
|——————Node:&& Text: &&
|——————Node:call_expression Text: UseInterrupt()
|———————Node:identifier Text: UseInterrupt
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
      rx_buffer_read=0;
      rx_buffer_write=0;
      attachInterrupt(digitalPinToInterrupt(N2k_CAN_int_pin), CanInterrupt, FALLING);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: rx_buffer_read=0;
|——————Node:assignment_expression Text: rx_buffer_read=0
|———————Node:identifier Text: rx_buffer_read
|———————Node:= Text: =
|———————Node:number_literal Text: 0
|——————Node:; Text: ;
|—————Node:expression_statement Text: rx_buffer_write=0;
|——————Node:assignment_expression Text: rx_buffer_write=0
|———————Node:identifier Text: rx_buffer_write
|———————Node:= Text: =
|———————Node:number_literal Text: 0
|——————Node:; Text: ;
|—————Node:expression_statement Text: attachInterrupt(digitalPinToInterrupt(N2k_CAN_int_pin), CanInterrupt, FALLING);
|——————Node:call_expression Text: attachInterrupt(digitalPinToInterrupt(N2k_CAN_int_pin), CanInterrupt, FALLING)
|———————Node:identifier Text: attachInterrupt
|———————Node:argument_list Text: (digitalPinToInterrupt(N2k_CAN_int_pin), CanInterrupt, FALLING)
|————————Node:( Text: (
|————————Node:call_expression Text: digitalPinToInterrupt(N2k_CAN_int_pin)
|—————————Node:identifier Text: digitalPinToInterrupt
|—————————Node:argument_list Text: (N2k_CAN_int_pin)
|——————————Node:( Text: (
|——————————Node:identifier Text: N2k_CAN_int_pin
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:identifier Text: CanInterrupt
|————————Node:, Text: ,
|————————Node:identifier Text: FALLING
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: CanInUse=IsOpen;
|————Node:assignment_expression Text: CanInUse=IsOpen
|—————Node:identifier Text: CanInUse
|—————Node:= Text: =
|—————Node:identifier Text: IsOpen
|————Node:; Text: ;
|———Node:return_statement Text: return IsOpen;
|————Node:return Text: return
|————Node:identifier Text: IsOpen
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: bool tNMEA2000_mcp::CANGetFrame(unsigned long &id, unsigned char &len, unsigned char *buf) {
  bool HasFrame=false;

    if ( UseInterrupt() ) {
      uint8_t SaveSREG = SREG;   // save interrupt flag
      cli();   // disable interrupts
      if (rx_buffer_read!=rx_buffer_write) {
//        Serial.print("read: "); Serial.print(rx_buffer_read); Serial.print(", write: "); Serial.println(rx_buffer_write);

        id = rx_frame_buff[rx_buffer_read].id;
        len = rx_frame_buff[rx_buffer_read].len;
        for (int i=0; i<len; buf[i]=rx_frame_buff[rx_buffer_read].buf[i], i++);
        rx_buffer_read = (rx_buffer_read + 1) % rx_frame_buf_size;
        HasFrame=( (id!=0) && (len!=0) );      
      }
      SREG = SaveSREG;   // restore the interrupt flag
    } else {
      if ( CAN_MSGAVAIL == N2kCAN.checkReceive() ) {           // check if data coming
          N2kCAN.readMsgBuf(&len, buf);    // read data,  len: data length, buf: data buf
          id = N2kCAN.getCanId();
          
          HasFrame=true;
      }
    }
    
//    if (HasFrame) PrintDecodedCanIdAndLen(id,len);
    
    return HasFrame;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: tNMEA2000_mcp::CANGetFrame(unsigned long &id, unsigned char &len, unsigned char *buf)
|———Node:qualified_identifier Text: tNMEA2000_mcp::CANGetFrame
|————Node:namespace_identifier Text: tNMEA2000_mcp
|————Node::: Text: ::
|————Node:identifier Text: CANGetFrame
|———Node:parameter_list Text: (unsigned long &id, unsigned char &len, unsigned char *buf)
|————Node:( Text: (
|————Node:parameter_declaration Text: unsigned long &id
|—————Node:sized_type_specifier Text: unsigned long
|——————Node:unsigned Text: unsigned
|——————Node:long Text: long
|—————Node:reference_declarator Text: &id
|——————Node:& Text: &
|——————Node:identifier Text: id
|————Node:, Text: ,
|————Node:parameter_declaration Text: unsigned char &len
|—————Node:sized_type_specifier Text: unsigned char
|——————Node:unsigned Text: unsigned
|——————Node:primitive_type Text: char
|—————Node:reference_declarator Text: &len
|——————Node:& Text: &
|——————Node:identifier Text: len
|————Node:, Text: ,
|————Node:parameter_declaration Text: unsigned char *buf
|—————Node:sized_type_specifier Text: unsigned char
|——————Node:unsigned Text: unsigned
|——————Node:primitive_type Text: char
|—————Node:pointer_declarator Text: *buf
|——————Node:* Text: *
|——————Node:identifier Text: buf
|————Node:) Text: )
|——Node:compound_statement Text: {
  bool HasFrame=false;

    if ( UseInterrupt() ) {
      uint8_t SaveSREG = SREG;   // save interrupt flag
      cli();   // disable interrupts
      if (rx_buffer_read!=rx_buffer_write) {
//        Serial.print("read: "); Serial.print(rx_buffer_read); Serial.print(", write: "); Serial.println(rx_buffer_write);

        id = rx_frame_buff[rx_buffer_read].id;
        len = rx_frame_buff[rx_buffer_read].len;
        for (int i=0; i<len; buf[i]=rx_frame_buff[rx_buffer_read].buf[i], i++);
        rx_buffer_read = (rx_buffer_read + 1) % rx_frame_buf_size;
        HasFrame=( (id!=0) && (len!=0) );      
      }
      SREG = SaveSREG;   // restore the interrupt flag
    } else {
      if ( CAN_MSGAVAIL == N2kCAN.checkReceive() ) {           // check if data coming
          N2kCAN.readMsgBuf(&len, buf);    // read data,  len: data length, buf: data buf
          id = N2kCAN.getCanId();
          
          HasFrame=true;
      }
    }
    
//    if (HasFrame) PrintDecodedCanIdAndLen(id,len);
    
    return HasFrame;
}
|———Node:{ Text: {
|———Node:declaration Text: bool HasFrame=false;
|————Node:primitive_type Text: bool
|————Node:init_declarator Text: HasFrame=false
|—————Node:identifier Text: HasFrame
|—————Node:= Text: =
|—————Node:false Text: false
|————Node:; Text: ;
|———Node:if_statement Text: if ( UseInterrupt() ) {
      uint8_t SaveSREG = SREG;   // save interrupt flag
      cli();   // disable interrupts
      if (rx_buffer_read!=rx_buffer_write) {
//        Serial.print("read: "); Serial.print(rx_buffer_read); Serial.print(", write: "); Serial.println(rx_buffer_write);

        id = rx_frame_buff[rx_buffer_read].id;
        len = rx_frame_buff[rx_buffer_read].len;
        for (int i=0; i<len; buf[i]=rx_frame_buff[rx_buffer_read].buf[i], i++);
        rx_buffer_read = (rx_buffer_read + 1) % rx_frame_buf_size;
        HasFrame=( (id!=0) && (len!=0) );      
      }
      SREG = SaveSREG;   // restore the interrupt flag
    } else {
      if ( CAN_MSGAVAIL == N2kCAN.checkReceive() ) {           // check if data coming
          N2kCAN.readMsgBuf(&len, buf);    // read data,  len: data length, buf: data buf
          id = N2kCAN.getCanId();
          
          HasFrame=true;
      }
    }
|————Node:if Text: if
|————Node:condition_clause Text: ( UseInterrupt() )
|—————Node:( Text: (
|—————Node:call_expression Text: UseInterrupt()
|——————Node:identifier Text: UseInterrupt
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
      uint8_t SaveSREG = SREG;   // save interrupt flag
      cli();   // disable interrupts
      if (rx_buffer_read!=rx_buffer_write) {
//        Serial.print("read: "); Serial.print(rx_buffer_read); Serial.print(", write: "); Serial.println(rx_buffer_write);

        id = rx_frame_buff[rx_buffer_read].id;
        len = rx_frame_buff[rx_buffer_read].len;
        for (int i=0; i<len; buf[i]=rx_frame_buff[rx_buffer_read].buf[i], i++);
        rx_buffer_read = (rx_buffer_read + 1) % rx_frame_buf_size;
        HasFrame=( (id!=0) && (len!=0) );      
      }
      SREG = SaveSREG;   // restore the interrupt flag
    }
|—————Node:{ Text: {
|—————Node:declaration Text: uint8_t SaveSREG = SREG;
|——————Node:primitive_type Text: uint8_t
|——————Node:init_declarator Text: SaveSREG = SREG
|———————Node:identifier Text: SaveSREG
|———————Node:= Text: =
|———————Node:identifier Text: SREG
|——————Node:; Text: ;
|—————Node:comment
|—————Node:expression_statement Text: cli();
|——————Node:call_expression Text: cli()
|———————Node:identifier Text: cli
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment
|—————Node:if_statement Text: if (rx_buffer_read!=rx_buffer_write) {
//        Serial.print("read: "); Serial.print(rx_buffer_read); Serial.print(", write: "); Serial.println(rx_buffer_write);

        id = rx_frame_buff[rx_buffer_read].id;
        len = rx_frame_buff[rx_buffer_read].len;
        for (int i=0; i<len; buf[i]=rx_frame_buff[rx_buffer_read].buf[i], i++);
        rx_buffer_read = (rx_buffer_read + 1) % rx_frame_buf_size;
        HasFrame=( (id!=0) && (len!=0) );      
      }
|——————Node:if Text: if
|——————Node:condition_clause Text: (rx_buffer_read!=rx_buffer_write)
|———————Node:( Text: (
|———————Node:binary_expression Text: rx_buffer_read!=rx_buffer_write
|————————Node:identifier Text: rx_buffer_read
|————————Node:!= Text: !=
|————————Node:identifier Text: rx_buffer_write
|———————Node:) Text: )
|——————Node:compound_statement Text: {
//        Serial.print("read: "); Serial.print(rx_buffer_read); Serial.print(", write: "); Serial.println(rx_buffer_write);

        id = rx_frame_buff[rx_buffer_read].id;
        len = rx_frame_buff[rx_buffer_read].len;
        for (int i=0; i<len; buf[i]=rx_frame_buff[rx_buffer_read].buf[i], i++);
        rx_buffer_read = (rx_buffer_read + 1) % rx_frame_buf_size;
        HasFrame=( (id!=0) && (len!=0) );      
      }
|———————Node:{ Text: {
|———————Node:comment
|———————Node:expression_statement Text: id = rx_frame_buff[rx_buffer_read].id;
|————————Node:assignment_expression Text: id = rx_frame_buff[rx_buffer_read].id
|—————————Node:identifier Text: id
|—————————Node:= Text: =
|—————————Node:field_expression Text: rx_frame_buff[rx_buffer_read].id
|——————————Node:subscript_expression Text: rx_frame_buff[rx_buffer_read]
|———————————Node:identifier Text: rx_frame_buff
|———————————Node:subscript_argument_list Text: [rx_buffer_read]
|————————————Node:[ Text: [
|————————————Node:identifier Text: rx_buffer_read
|————————————Node:] Text: ]
|——————————Node:. Text: .
|——————————Node:field_identifier Text: id
|————————Node:; Text: ;
|———————Node:expression_statement Text: len = rx_frame_buff[rx_buffer_read].len;
|————————Node:assignment_expression Text: len = rx_frame_buff[rx_buffer_read].len
|—————————Node:identifier Text: len
|—————————Node:= Text: =
|—————————Node:field_expression Text: rx_frame_buff[rx_buffer_read].len
|——————————Node:subscript_expression Text: rx_frame_buff[rx_buffer_read]
|———————————Node:identifier Text: rx_frame_buff
|———————————Node:subscript_argument_list Text: [rx_buffer_read]
|————————————Node:[ Text: [
|————————————Node:identifier Text: rx_buffer_read
|————————————Node:] Text: ]
|——————————Node:. Text: .
|——————————Node:field_identifier Text: len
|————————Node:; Text: ;
|———————Node:for_statement Text: for (int i=0; i<len; buf[i]=rx_frame_buff[rx_buffer_read].buf[i], i++);
|————————Node:for Text: for
|————————Node:( Text: (
|————————Node:declaration Text: int i=0;
|—————————Node:primitive_type Text: int
|—————————Node:init_declarator Text: i=0
|——————————Node:identifier Text: i
|——————————Node:= Text: =
|——————————Node:number_literal Text: 0
|—————————Node:; Text: ;
|————————Node:binary_expression Text: i<len
|—————————Node:identifier Text: i
|—————————Node:< Text: <
|—————————Node:identifier Text: len
|————————Node:; Text: ;
|————————Node:comma_expression Text: buf[i]=rx_frame_buff[rx_buffer_read].buf[i], i++
|—————————Node:assignment_expression Text: buf[i]=rx_frame_buff[rx_buffer_read].buf[i]
|——————————Node:subscript_expression Text: buf[i]
|———————————Node:identifier Text: buf
|———————————Node:subscript_argument_list Text: [i]
|————————————Node:[ Text: [
|————————————Node:identifier Text: i
|————————————Node:] Text: ]
|——————————Node:= Text: =
|——————————Node:subscript_expression Text: rx_frame_buff[rx_buffer_read].buf[i]
|———————————Node:field_expression Text: rx_frame_buff[rx_buffer_read].buf
|————————————Node:subscript_expression Text: rx_frame_buff[rx_buffer_read]
|—————————————Node:identifier Text: rx_frame_buff
|—————————————Node:subscript_argument_list Text: [rx_buffer_read]
|——————————————Node:[ Text: [
|——————————————Node:identifier Text: rx_buffer_read
|——————————————Node:] Text: ]
|————————————Node:. Text: .
|————————————Node:field_identifier Text: buf
|———————————Node:subscript_argument_list Text: [i]
|————————————Node:[ Text: [
|————————————Node:identifier Text: i
|————————————Node:] Text: ]
|—————————Node:, Text: ,
|—————————Node:update_expression Text: i++
|——————————Node:identifier Text: i
|——————————Node:++ Text: ++
|————————Node:) Text: )
|————————Node:expression_statement Text: ;
|—————————Node:; Text: ;
|———————Node:expression_statement Text: rx_buffer_read = (rx_buffer_read + 1) % rx_frame_buf_size;
|————————Node:assignment_expression Text: rx_buffer_read = (rx_buffer_read + 1) % rx_frame_buf_size
|—————————Node:identifier Text: rx_buffer_read
|—————————Node:= Text: =
|—————————Node:binary_expression Text: (rx_buffer_read + 1) % rx_frame_buf_size
|——————————Node:parenthesized_expression Text: (rx_buffer_read + 1)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: rx_buffer_read + 1
|————————————Node:identifier Text: rx_buffer_read
|————————————Node:+ Text: +
|————————————Node:number_literal Text: 1
|———————————Node:) Text: )
|——————————Node:% Text: %
|——————————Node:identifier Text: rx_frame_buf_size
|————————Node:; Text: ;
|———————Node:expression_statement Text: HasFrame=( (id!=0) && (len!=0) );
|————————Node:assignment_expression Text: HasFrame=( (id!=0) && (len!=0) )
|—————————Node:identifier Text: HasFrame
|—————————Node:= Text: =
|—————————Node:parenthesized_expression Text: ( (id!=0) && (len!=0) )
|——————————Node:( Text: (
|——————————Node:binary_expression Text: (id!=0) && (len!=0)
|———————————Node:parenthesized_expression Text: (id!=0)
|————————————Node:( Text: (
|————————————Node:binary_expression Text: id!=0
|—————————————Node:identifier Text: id
|—————————————Node:!= Text: !=
|—————————————Node:number_literal Text: 0
|————————————Node:) Text: )
|———————————Node:&& Text: &&
|———————————Node:parenthesized_expression Text: (len!=0)
|————————————Node:( Text: (
|————————————Node:binary_expression Text: len!=0
|—————————————Node:identifier Text: len
|—————————————Node:!= Text: !=
|—————————————Node:number_literal Text: 0
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:expression_statement Text: SREG = SaveSREG;
|——————Node:assignment_expression Text: SREG = SaveSREG
|———————Node:identifier Text: SREG
|———————Node:= Text: =
|———————Node:identifier Text: SaveSREG
|——————Node:; Text: ;
|—————Node:comment
|—————Node:} Text: }
|————Node:else_clause Text: else {
      if ( CAN_MSGAVAIL == N2kCAN.checkReceive() ) {           // check if data coming
          N2kCAN.readMsgBuf(&len, buf);    // read data,  len: data length, buf: data buf
          id = N2kCAN.getCanId();
          
          HasFrame=true;
      }
    }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
      if ( CAN_MSGAVAIL == N2kCAN.checkReceive() ) {           // check if data coming
          N2kCAN.readMsgBuf(&len, buf);    // read data,  len: data length, buf: data buf
          id = N2kCAN.getCanId();
          
          HasFrame=true;
      }
    }
|——————Node:{ Text: {
|——————Node:if_statement Text: if ( CAN_MSGAVAIL == N2kCAN.checkReceive() ) {           // check if data coming
          N2kCAN.readMsgBuf(&len, buf);    // read data,  len: data length, buf: data buf
          id = N2kCAN.getCanId();
          
          HasFrame=true;
      }
|———————Node:if Text: if
|———————Node:condition_clause Text: ( CAN_MSGAVAIL == N2kCAN.checkReceive() )
|————————Node:( Text: (
|————————Node:binary_expression Text: CAN_MSGAVAIL == N2kCAN.checkReceive()
|—————————Node:identifier Text: CAN_MSGAVAIL
|—————————Node:== Text: ==
|—————————Node:call_expression Text: N2kCAN.checkReceive()
|——————————Node:field_expression Text: N2kCAN.checkReceive
|———————————Node:identifier Text: N2kCAN
|———————————Node:. Text: .
|———————————Node:field_identifier Text: checkReceive
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|————————Node:) Text: )
|———————Node:compound_statement Text: {           // check if data coming
          N2kCAN.readMsgBuf(&len, buf);    // read data,  len: data length, buf: data buf
          id = N2kCAN.getCanId();
          
          HasFrame=true;
      }
|————————Node:{ Text: {
|————————Node:comment
|————————Node:expression_statement Text: N2kCAN.readMsgBuf(&len, buf);
|—————————Node:call_expression Text: N2kCAN.readMsgBuf(&len, buf)
|——————————Node:field_expression Text: N2kCAN.readMsgBuf
|———————————Node:identifier Text: N2kCAN
|———————————Node:. Text: .
|———————————Node:field_identifier Text: readMsgBuf
|——————————Node:argument_list Text: (&len, buf)
|———————————Node:( Text: (
|———————————Node:pointer_expression Text: &len
|————————————Node:& Text: &
|————————————Node:identifier Text: len
|———————————Node:, Text: ,
|———————————Node:identifier Text: buf
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:comment
|————————Node:expression_statement Text: id = N2kCAN.getCanId();
|—————————Node:assignment_expression Text: id = N2kCAN.getCanId()
|——————————Node:identifier Text: id
|——————————Node:= Text: =
|——————————Node:call_expression Text: N2kCAN.getCanId()
|———————————Node:field_expression Text: N2kCAN.getCanId
|————————————Node:identifier Text: N2kCAN
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getCanId
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: HasFrame=true;
|—————————Node:assignment_expression Text: HasFrame=true
|——————————Node:identifier Text: HasFrame
|——————————Node:= Text: =
|——————————Node:true Text: true
|—————————Node:; Text: ;
|————————Node:} Text: }
|——————Node:} Text: }
|———Node:comment
|———Node:return_statement Text: return HasFrame;
|————Node:return Text: return
|————Node:identifier Text: HasFrame
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:function_definition Text: void CanInterrupt() {
  // Iterate over all pending messages.
  // If either the bus is saturated or the MCU is busy, both RX buffers may be in use and
  // reading a single message does not clear the IRQ conditon.
  while ( CAN_MSGAVAIL == pN2kCAN->checkReceive() ) {           // check if data coming
    uint8_t temp = (rx_buffer_write + 1) % rx_frame_buf_size;
    uint32_t id;
    unsigned char len;
    unsigned char buf[8];

    pN2kCAN->readMsgBuf(&len,buf);
    id=pN2kCAN->getCanId();
    asm volatile ("" : : : "memory");
    if ( (temp != rx_buffer_read) && (len<=8) ) { // check is there room for new message. If not, we loose it.
      rx_frame_buff[rx_buffer_write].id=id;
      rx_frame_buff[rx_buffer_write].len=len;
      for (int i=0; i<len; rx_frame_buff[rx_buffer_write].buf[i]=buf[i], i++);
      rx_buffer_write = temp;
    }
  }
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: CanInterrupt()
|———Node:identifier Text: CanInterrupt
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
  // Iterate over all pending messages.
  // If either the bus is saturated or the MCU is busy, both RX buffers may be in use and
  // reading a single message does not clear the IRQ conditon.
  while ( CAN_MSGAVAIL == pN2kCAN->checkReceive() ) {           // check if data coming
    uint8_t temp = (rx_buffer_write + 1) % rx_frame_buf_size;
    uint32_t id;
    unsigned char len;
    unsigned char buf[8];

    pN2kCAN->readMsgBuf(&len,buf);
    id=pN2kCAN->getCanId();
    asm volatile ("" : : : "memory");
    if ( (temp != rx_buffer_read) && (len<=8) ) { // check is there room for new message. If not, we loose it.
      rx_frame_buff[rx_buffer_write].id=id;
      rx_frame_buff[rx_buffer_write].len=len;
      for (int i=0; i<len; rx_frame_buff[rx_buffer_write].buf[i]=buf[i], i++);
      rx_buffer_write = temp;
    }
  }
}
|———Node:{ Text: {
|———Node:comment
|———Node:comment
|———Node:comment
|———Node:while_statement Text: while ( CAN_MSGAVAIL == pN2kCAN->checkReceive() ) {           // check if data coming
    uint8_t temp = (rx_buffer_write + 1) % rx_frame_buf_size;
    uint32_t id;
    unsigned char len;
    unsigned char buf[8];

    pN2kCAN->readMsgBuf(&len,buf);
    id=pN2kCAN->getCanId();
    asm volatile ("" : : : "memory");
    if ( (temp != rx_buffer_read) && (len<=8) ) { // check is there room for new message. If not, we loose it.
      rx_frame_buff[rx_buffer_write].id=id;
      rx_frame_buff[rx_buffer_write].len=len;
      for (int i=0; i<len; rx_frame_buff[rx_buffer_write].buf[i]=buf[i], i++);
      rx_buffer_write = temp;
    }
  }
|————Node:while Text: while
|————Node:condition_clause Text: ( CAN_MSGAVAIL == pN2kCAN->checkReceive() )
|—————Node:( Text: (
|—————Node:binary_expression Text: CAN_MSGAVAIL == pN2kCAN->checkReceive()
|——————Node:identifier Text: CAN_MSGAVAIL
|——————Node:== Text: ==
|——————Node:call_expression Text: pN2kCAN->checkReceive()
|———————Node:field_expression Text: pN2kCAN->checkReceive
|————————Node:identifier Text: pN2kCAN
|————————Node:-> Text: ->
|————————Node:field_identifier Text: checkReceive
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {           // check if data coming
    uint8_t temp = (rx_buffer_write + 1) % rx_frame_buf_size;
    uint32_t id;
    unsigned char len;
    unsigned char buf[8];

    pN2kCAN->readMsgBuf(&len,buf);
    id=pN2kCAN->getCanId();
    asm volatile ("" : : : "memory");
    if ( (temp != rx_buffer_read) && (len<=8) ) { // check is there room for new message. If not, we loose it.
      rx_frame_buff[rx_buffer_write].id=id;
      rx_frame_buff[rx_buffer_write].len=len;
      for (int i=0; i<len; rx_frame_buff[rx_buffer_write].buf[i]=buf[i], i++);
      rx_buffer_write = temp;
    }
  }
|—————Node:{ Text: {
|—————Node:comment
|—————Node:declaration Text: uint8_t temp = (rx_buffer_write + 1) % rx_frame_buf_size;
|——————Node:primitive_type Text: uint8_t
|——————Node:init_declarator Text: temp = (rx_buffer_write + 1) % rx_frame_buf_size
|———————Node:identifier Text: temp
|———————Node:= Text: =
|———————Node:binary_expression Text: (rx_buffer_write + 1) % rx_frame_buf_size
|————————Node:parenthesized_expression Text: (rx_buffer_write + 1)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: rx_buffer_write + 1
|——————————Node:identifier Text: rx_buffer_write
|——————————Node:+ Text: +
|——————————Node:number_literal Text: 1
|—————————Node:) Text: )
|————————Node:% Text: %
|————————Node:identifier Text: rx_frame_buf_size
|——————Node:; Text: ;
|—————Node:declaration Text: uint32_t id;
|——————Node:primitive_type Text: uint32_t
|——————Node:identifier Text: id
|——————Node:; Text: ;
|—————Node:declaration Text: unsigned char len;
|——————Node:sized_type_specifier Text: unsigned char
|———————Node:unsigned Text: unsigned
|———————Node:primitive_type Text: char
|——————Node:identifier Text: len
|——————Node:; Text: ;
|—————Node:declaration Text: unsigned char buf[8];
|——————Node:sized_type_specifier Text: unsigned char
|———————Node:unsigned Text: unsigned
|———————Node:primitive_type Text: char
|——————Node:array_declarator Text: buf[8]
|———————Node:identifier Text: buf
|———————Node:[ Text: [
|———————Node:number_literal Text: 8
|———————Node:] Text: ]
|——————Node:; Text: ;
|—————Node:expression_statement Text: pN2kCAN->readMsgBuf(&len,buf);
|——————Node:call_expression Text: pN2kCAN->readMsgBuf(&len,buf)
|———————Node:field_expression Text: pN2kCAN->readMsgBuf
|————————Node:identifier Text: pN2kCAN
|————————Node:-> Text: ->
|————————Node:field_identifier Text: readMsgBuf
|———————Node:argument_list Text: (&len,buf)
|————————Node:( Text: (
|————————Node:pointer_expression Text: &len
|—————————Node:& Text: &
|—————————Node:identifier Text: len
|————————Node:, Text: ,
|————————Node:identifier Text: buf
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: id=pN2kCAN->getCanId();
|——————Node:assignment_expression Text: id=pN2kCAN->getCanId()
|———————Node:identifier Text: id
|———————Node:= Text: =
|———————Node:call_expression Text: pN2kCAN->getCanId()
|————————Node:field_expression Text: pN2kCAN->getCanId
|—————————Node:identifier Text: pN2kCAN
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: getCanId
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: asm volatile ("" : : : "memory");
|——————Node:gnu_asm_expression Text: asm volatile ("" : : : "memory")
|———————Node:asm Text: asm
|———————Node:gnu_asm_qualifier Text: volatile
|————————Node:volatile Text: volatile
|———————Node:( Text: (
|———————Node:string_literal Text: ""
|————————Node:" Text: "
|————————Node:" Text: "
|———————Node:gnu_asm_output_operand_list Text: :
|————————Node:: Text: :
|———————Node:gnu_asm_input_operand_list Text: :
|————————Node:: Text: :
|———————Node:gnu_asm_clobber_list Text: : "memory"
|————————Node:: Text: :
|————————Node:string_literal Text: "memory"
|—————————Node:" Text: "
|—————————Node:string_content Text: memory
|—————————Node:" Text: "
|———————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if ( (temp != rx_buffer_read) && (len<=8) ) { // check is there room for new message. If not, we loose it.
      rx_frame_buff[rx_buffer_write].id=id;
      rx_frame_buff[rx_buffer_write].len=len;
      for (int i=0; i<len; rx_frame_buff[rx_buffer_write].buf[i]=buf[i], i++);
      rx_buffer_write = temp;
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: ( (temp != rx_buffer_read) && (len<=8) )
|———————Node:( Text: (
|———————Node:binary_expression Text: (temp != rx_buffer_read) && (len<=8)
|————————Node:parenthesized_expression Text: (temp != rx_buffer_read)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: temp != rx_buffer_read
|——————————Node:identifier Text: temp
|——————————Node:!= Text: !=
|——————————Node:identifier Text: rx_buffer_read
|—————————Node:) Text: )
|————————Node:&& Text: &&
|————————Node:parenthesized_expression Text: (len<=8)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: len<=8
|——————————Node:identifier Text: len
|——————————Node:<= Text: <=
|——————————Node:number_literal Text: 8
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: { // check is there room for new message. If not, we loose it.
      rx_frame_buff[rx_buffer_write].id=id;
      rx_frame_buff[rx_buffer_write].len=len;
      for (int i=0; i<len; rx_frame_buff[rx_buffer_write].buf[i]=buf[i], i++);
      rx_buffer_write = temp;
    }
|———————Node:{ Text: {
|———————Node:comment
|———————Node:expression_statement Text: rx_frame_buff[rx_buffer_write].id=id;
|————————Node:assignment_expression Text: rx_frame_buff[rx_buffer_write].id=id
|—————————Node:field_expression Text: rx_frame_buff[rx_buffer_write].id
|——————————Node:subscript_expression Text: rx_frame_buff[rx_buffer_write]
|———————————Node:identifier Text: rx_frame_buff
|———————————Node:subscript_argument_list Text: [rx_buffer_write]
|————————————Node:[ Text: [
|————————————Node:identifier Text: rx_buffer_write
|————————————Node:] Text: ]
|——————————Node:. Text: .
|——————————Node:field_identifier Text: id
|—————————Node:= Text: =
|—————————Node:identifier Text: id
|————————Node:; Text: ;
|———————Node:expression_statement Text: rx_frame_buff[rx_buffer_write].len=len;
|————————Node:assignment_expression Text: rx_frame_buff[rx_buffer_write].len=len
|—————————Node:field_expression Text: rx_frame_buff[rx_buffer_write].len
|——————————Node:subscript_expression Text: rx_frame_buff[rx_buffer_write]
|———————————Node:identifier Text: rx_frame_buff
|———————————Node:subscript_argument_list Text: [rx_buffer_write]
|————————————Node:[ Text: [
|————————————Node:identifier Text: rx_buffer_write
|————————————Node:] Text: ]
|——————————Node:. Text: .
|——————————Node:field_identifier Text: len
|—————————Node:= Text: =
|—————————Node:identifier Text: len
|————————Node:; Text: ;
|———————Node:for_statement Text: for (int i=0; i<len; rx_frame_buff[rx_buffer_write].buf[i]=buf[i], i++);
|————————Node:for Text: for
|————————Node:( Text: (
|————————Node:declaration Text: int i=0;
|—————————Node:primitive_type Text: int
|—————————Node:init_declarator Text: i=0
|——————————Node:identifier Text: i
|——————————Node:= Text: =
|——————————Node:number_literal Text: 0
|—————————Node:; Text: ;
|————————Node:binary_expression Text: i<len
|—————————Node:identifier Text: i
|—————————Node:< Text: <
|—————————Node:identifier Text: len
|————————Node:; Text: ;
|————————Node:comma_expression Text: rx_frame_buff[rx_buffer_write].buf[i]=buf[i], i++
|—————————Node:assignment_expression Text: rx_frame_buff[rx_buffer_write].buf[i]=buf[i]
|——————————Node:subscript_expression Text: rx_frame_buff[rx_buffer_write].buf[i]
|———————————Node:field_expression Text: rx_frame_buff[rx_buffer_write].buf
|————————————Node:subscript_expression Text: rx_frame_buff[rx_buffer_write]
|—————————————Node:identifier Text: rx_frame_buff
|—————————————Node:subscript_argument_list Text: [rx_buffer_write]
|——————————————Node:[ Text: [
|——————————————Node:identifier Text: rx_buffer_write
|——————————————Node:] Text: ]
|————————————Node:. Text: .
|————————————Node:field_identifier Text: buf
|———————————Node:subscript_argument_list Text: [i]
|————————————Node:[ Text: [
|————————————Node:identifier Text: i
|————————————Node:] Text: ]
|——————————Node:= Text: =
|——————————Node:subscript_expression Text: buf[i]
|———————————Node:identifier Text: buf
|———————————Node:subscript_argument_list Text: [i]
|————————————Node:[ Text: [
|————————————Node:identifier Text: i
|————————————Node:] Text: ]
|—————————Node:, Text: ,
|—————————Node:update_expression Text: i++
|——————————Node:identifier Text: i
|——————————Node:++ Text: ++
|————————Node:) Text: )
|————————Node:expression_statement Text: ;
|—————————Node:; Text: ;
|———————Node:expression_statement Text: rx_buffer_write = temp;
|————————Node:assignment_expression Text: rx_buffer_write = temp
|—————————Node:identifier Text: rx_buffer_write
|—————————Node:= Text: =
|—————————Node:identifier Text: temp
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:} Text: }
