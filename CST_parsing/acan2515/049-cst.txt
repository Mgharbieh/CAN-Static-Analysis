acan2515-src\ACAN2515.cpp

|Node:translation_unit
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:preproc_include Text: #include <ACAN2515.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <ACAN2515.h>
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:declaration Text: static const uint8_t RESET_COMMAND = 0xC0 ;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: const
|———Node:const Text: const
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: RESET_COMMAND = 0xC0
|———Node:identifier Text: RESET_COMMAND
|———Node:= Text: =
|———Node:number_literal Text: 0xC0
|——Node:; Text: ;
|—Node:declaration Text: static const uint8_t WRITE_COMMAND = 0x02 ;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: const
|———Node:const Text: const
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: WRITE_COMMAND = 0x02
|———Node:identifier Text: WRITE_COMMAND
|———Node:= Text: =
|———Node:number_literal Text: 0x02
|——Node:; Text: ;
|—Node:declaration Text: static const uint8_t READ_COMMAND  = 0x03 ;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: const
|———Node:const Text: const
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: READ_COMMAND  = 0x03
|———Node:identifier Text: READ_COMMAND
|———Node:= Text: =
|———Node:number_literal Text: 0x03
|——Node:; Text: ;
|—Node:declaration Text: static const uint8_t BIT_MODIFY_COMMAND         = 0x05 ;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: const
|———Node:const Text: const
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: BIT_MODIFY_COMMAND         = 0x05
|———Node:identifier Text: BIT_MODIFY_COMMAND
|———Node:= Text: =
|———Node:number_literal Text: 0x05
|——Node:; Text: ;
|—Node:declaration Text: static const uint8_t LOAD_TX_BUFFER_COMMAND     = 0x40 ;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: const
|———Node:const Text: const
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: LOAD_TX_BUFFER_COMMAND     = 0x40
|———Node:identifier Text: LOAD_TX_BUFFER_COMMAND
|———Node:= Text: =
|———Node:number_literal Text: 0x40
|——Node:; Text: ;
|—Node:declaration Text: static const uint8_t REQUEST_TO_SEND_COMMAND    = 0x80 ;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: const
|———Node:const Text: const
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: REQUEST_TO_SEND_COMMAND    = 0x80
|———Node:identifier Text: REQUEST_TO_SEND_COMMAND
|———Node:= Text: =
|———Node:number_literal Text: 0x80
|——Node:; Text: ;
|—Node:declaration Text: static const uint8_t READ_FROM_RXB0SIDH_COMMAND = 0x90 ;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: const
|———Node:const Text: const
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: READ_FROM_RXB0SIDH_COMMAND = 0x90
|———Node:identifier Text: READ_FROM_RXB0SIDH_COMMAND
|———Node:= Text: =
|———Node:number_literal Text: 0x90
|——Node:; Text: ;
|—Node:declaration Text: static const uint8_t READ_FROM_RXB1SIDH_COMMAND = 0x94 ;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: const
|———Node:const Text: const
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: READ_FROM_RXB1SIDH_COMMAND = 0x94
|———Node:identifier Text: READ_FROM_RXB1SIDH_COMMAND
|———Node:= Text: =
|———Node:number_literal Text: 0x94
|——Node:; Text: ;
|—Node:declaration Text: static const uint8_t READ_STATUS_COMMAND        = 0xA0 ;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: const
|———Node:const Text: const
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: READ_STATUS_COMMAND        = 0xA0
|———Node:identifier Text: READ_STATUS_COMMAND
|———Node:= Text: =
|———Node:number_literal Text: 0xA0
|——Node:; Text: ;
|—Node:declaration Text: static const uint8_t RX_STATUS_COMMAND          = 0xB0 ;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: const
|———Node:const Text: const
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: RX_STATUS_COMMAND          = 0xB0
|———Node:identifier Text: RX_STATUS_COMMAND
|———Node:= Text: =
|———Node:number_literal Text: 0xB0
|——Node:; Text: ;
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:declaration Text: static const uint8_t BFPCTRL_REGISTER   = 0x0C ;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: const
|———Node:const Text: const
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: BFPCTRL_REGISTER   = 0x0C
|———Node:identifier Text: BFPCTRL_REGISTER
|———Node:= Text: =
|———Node:number_literal Text: 0x0C
|——Node:; Text: ;
|—Node:declaration Text: static const uint8_t TXRTSCTRL_REGISTER = 0x0D ;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: const
|———Node:const Text: const
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: TXRTSCTRL_REGISTER = 0x0D
|———Node:identifier Text: TXRTSCTRL_REGISTER
|———Node:= Text: =
|———Node:number_literal Text: 0x0D
|——Node:; Text: ;
|—Node:declaration Text: static const uint8_t CANSTAT_REGISTER   = 0x0E ;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: const
|———Node:const Text: const
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: CANSTAT_REGISTER   = 0x0E
|———Node:identifier Text: CANSTAT_REGISTER
|———Node:= Text: =
|———Node:number_literal Text: 0x0E
|——Node:; Text: ;
|—Node:declaration Text: static const uint8_t CANCTRL_REGISTER   = 0x0F ;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: const
|———Node:const Text: const
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: CANCTRL_REGISTER   = 0x0F
|———Node:identifier Text: CANCTRL_REGISTER
|———Node:= Text: =
|———Node:number_literal Text: 0x0F
|——Node:; Text: ;
|—Node:declaration Text: static const uint8_t TEC_REGISTER       = 0x1C ;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: const
|———Node:const Text: const
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: TEC_REGISTER       = 0x1C
|———Node:identifier Text: TEC_REGISTER
|———Node:= Text: =
|———Node:number_literal Text: 0x1C
|——Node:; Text: ;
|—Node:declaration Text: static const uint8_t REC_REGISTER       = 0x1D ;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: const
|———Node:const Text: const
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: REC_REGISTER       = 0x1D
|———Node:identifier Text: REC_REGISTER
|———Node:= Text: =
|———Node:number_literal Text: 0x1D
|——Node:; Text: ;
|—Node:declaration Text: static const uint8_t RXM0SIDH_REGISTER  = 0x20 ;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: const
|———Node:const Text: const
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: RXM0SIDH_REGISTER  = 0x20
|———Node:identifier Text: RXM0SIDH_REGISTER
|———Node:= Text: =
|———Node:number_literal Text: 0x20
|——Node:; Text: ;
|—Node:declaration Text: static const uint8_t RXM1SIDH_REGISTER  = 0x24 ;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: const
|———Node:const Text: const
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: RXM1SIDH_REGISTER  = 0x24
|———Node:identifier Text: RXM1SIDH_REGISTER
|———Node:= Text: =
|———Node:number_literal Text: 0x24
|——Node:; Text: ;
|—Node:declaration Text: static const uint8_t CNF3_REGISTER      = 0x28 ;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: const
|———Node:const Text: const
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: CNF3_REGISTER      = 0x28
|———Node:identifier Text: CNF3_REGISTER
|———Node:= Text: =
|———Node:number_literal Text: 0x28
|——Node:; Text: ;
|—Node:declaration Text: static const uint8_t CNF2_REGISTER      = 0x29 ;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: const
|———Node:const Text: const
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: CNF2_REGISTER      = 0x29
|———Node:identifier Text: CNF2_REGISTER
|———Node:= Text: =
|———Node:number_literal Text: 0x29
|——Node:; Text: ;
|—Node:declaration Text: static const uint8_t CNF1_REGISTER      = 0x2A ;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: const
|———Node:const Text: const
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: CNF1_REGISTER      = 0x2A
|———Node:identifier Text: CNF1_REGISTER
|———Node:= Text: =
|———Node:number_literal Text: 0x2A
|——Node:; Text: ;
|—Node:declaration Text: static const uint8_t CANINTF_REGISTER   = 0x2C ;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: const
|———Node:const Text: const
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: CANINTF_REGISTER   = 0x2C
|———Node:identifier Text: CANINTF_REGISTER
|———Node:= Text: =
|———Node:number_literal Text: 0x2C
|——Node:; Text: ;
|—Node:declaration Text: static const uint8_t EFLG_REGISTER      = 0x2D ;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: const
|———Node:const Text: const
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: EFLG_REGISTER      = 0x2D
|———Node:identifier Text: EFLG_REGISTER
|———Node:= Text: =
|———Node:number_literal Text: 0x2D
|——Node:; Text: ;
|—Node:declaration Text: static const uint8_t TXB0CTRL_REGISTER  = 0x30 ;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: const
|———Node:const Text: const
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: TXB0CTRL_REGISTER  = 0x30
|———Node:identifier Text: TXB0CTRL_REGISTER
|———Node:= Text: =
|———Node:number_literal Text: 0x30
|——Node:; Text: ;
|—Node:declaration Text: static const uint8_t TXB1CTRL_REGISTER  = 0x40 ;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: const
|———Node:const Text: const
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: TXB1CTRL_REGISTER  = 0x40
|———Node:identifier Text: TXB1CTRL_REGISTER
|———Node:= Text: =
|———Node:number_literal Text: 0x40
|——Node:; Text: ;
|—Node:declaration Text: static const uint8_t TXB2CTRL_REGISTER  = 0x50 ;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: const
|———Node:const Text: const
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: TXB2CTRL_REGISTER  = 0x50
|———Node:identifier Text: TXB2CTRL_REGISTER
|———Node:= Text: =
|———Node:number_literal Text: 0x50
|——Node:; Text: ;
|—Node:declaration Text: static const uint8_t RXB0CTRL_REGISTER  = 0x60 ;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: const
|———Node:const Text: const
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: RXB0CTRL_REGISTER  = 0x60
|———Node:identifier Text: RXB0CTRL_REGISTER
|———Node:= Text: =
|———Node:number_literal Text: 0x60
|——Node:; Text: ;
|—Node:declaration Text: static const uint8_t RXB1CTRL_REGISTER  = 0x70 ;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: const
|———Node:const Text: const
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: RXB1CTRL_REGISTER  = 0x70
|———Node:identifier Text: RXB1CTRL_REGISTER
|———Node:= Text: =
|———Node:number_literal Text: 0x70
|——Node:; Text: ;
|—Node:declaration Text: static const uint8_t RXFSIDH_REGISTER [6] = {0x00, 0x04, 0x08, 0x10, 0x14, 0x18} ;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: const
|———Node:const Text: const
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: RXFSIDH_REGISTER [6] = {0x00, 0x04, 0x08, 0x10, 0x14, 0x18}
|———Node:array_declarator Text: RXFSIDH_REGISTER [6]
|————Node:identifier Text: RXFSIDH_REGISTER
|————Node:[ Text: [
|————Node:number_literal Text: 6
|————Node:] Text: ]
|———Node:= Text: =
|———Node:initializer_list Text: {0x00, 0x04, 0x08, 0x10, 0x14, 0x18}
|————Node:{ Text: {
|————Node:number_literal Text: 0x00
|————Node:, Text: ,
|————Node:number_literal Text: 0x04
|————Node:, Text: ,
|————Node:number_literal Text: 0x08
|————Node:, Text: ,
|————Node:number_literal Text: 0x10
|————Node:, Text: ,
|————Node:number_literal Text: 0x14
|————Node:, Text: ,
|————Node:number_literal Text: 0x18
|————Node:} Text: }
|——Node:; Text: ;
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:preproc_ifdef Text: #ifdef ARDUINO_ARCH_ESP32
  static void myESP32Task (void * pData) {
    ACAN2515 * canDriver = (ACAN2515 *) pData ;
    while (1) {
      xSemaphoreTake (canDriver->mISRSemaphore, portMAX_DELAY) ;
      bool loop = true ;
      while (loop) {
        loop = canDriver->isr_core () ;
	    }
    }
  }
#endif
|——Node:#ifdef Text: #ifdef
|——Node:identifier Text: ARDUINO_ARCH_ESP32
|——Node:function_definition Text: static void myESP32Task (void * pData) {
    ACAN2515 * canDriver = (ACAN2515 *) pData ;
    while (1) {
      xSemaphoreTake (canDriver->mISRSemaphore, portMAX_DELAY) ;
      bool loop = true ;
      while (loop) {
        loop = canDriver->isr_core () ;
	    }
    }
  }
|———Node:storage_class_specifier Text: static
|————Node:static Text: static
|———Node:primitive_type Text: void
|———Node:function_declarator Text: myESP32Task (void * pData)
|————Node:identifier Text: myESP32Task
|————Node:parameter_list Text: (void * pData)
|—————Node:( Text: (
|—————Node:parameter_declaration Text: void * pData
|——————Node:primitive_type Text: void
|——————Node:pointer_declarator Text: * pData
|———————Node:* Text: *
|———————Node:identifier Text: pData
|—————Node:) Text: )
|———Node:compound_statement Text: {
    ACAN2515 * canDriver = (ACAN2515 *) pData ;
    while (1) {
      xSemaphoreTake (canDriver->mISRSemaphore, portMAX_DELAY) ;
      bool loop = true ;
      while (loop) {
        loop = canDriver->isr_core () ;
	    }
    }
  }
|————Node:{ Text: {
|————Node:declaration Text: ACAN2515 * canDriver = (ACAN2515 *) pData ;
|—————Node:type_identifier Text: ACAN2515
|—————Node:init_declarator Text: * canDriver = (ACAN2515 *) pData
|——————Node:pointer_declarator Text: * canDriver
|———————Node:* Text: *
|———————Node:identifier Text: canDriver
|——————Node:= Text: =
|——————Node:cast_expression Text: (ACAN2515 *) pData
|———————Node:( Text: (
|———————Node:type_descriptor Text: ACAN2515 *
|————————Node:type_identifier Text: ACAN2515
|————————Node:abstract_pointer_declarator Text: *
|—————————Node:* Text: *
|———————Node:) Text: )
|———————Node:identifier Text: pData
|—————Node:; Text: ;
|————Node:while_statement Text: while (1) {
      xSemaphoreTake (canDriver->mISRSemaphore, portMAX_DELAY) ;
      bool loop = true ;
      while (loop) {
        loop = canDriver->isr_core () ;
	    }
    }
|—————Node:while Text: while
|—————Node:condition_clause Text: (1)
|——————Node:( Text: (
|——————Node:number_literal Text: 1
|——————Node:) Text: )
|—————Node:compound_statement Text: {
      xSemaphoreTake (canDriver->mISRSemaphore, portMAX_DELAY) ;
      bool loop = true ;
      while (loop) {
        loop = canDriver->isr_core () ;
	    }
    }
|——————Node:{ Text: {
|——————Node:expression_statement Text: xSemaphoreTake (canDriver->mISRSemaphore, portMAX_DELAY) ;
|———————Node:call_expression Text: xSemaphoreTake (canDriver->mISRSemaphore, portMAX_DELAY)
|————————Node:identifier Text: xSemaphoreTake
|————————Node:argument_list Text: (canDriver->mISRSemaphore, portMAX_DELAY)
|—————————Node:( Text: (
|—————————Node:field_expression Text: canDriver->mISRSemaphore
|——————————Node:identifier Text: canDriver
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: mISRSemaphore
|—————————Node:, Text: ,
|—————————Node:identifier Text: portMAX_DELAY
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:declaration Text: bool loop = true ;
|———————Node:primitive_type Text: bool
|———————Node:init_declarator Text: loop = true
|————————Node:identifier Text: loop
|————————Node:= Text: =
|————————Node:true Text: true
|———————Node:; Text: ;
|——————Node:while_statement Text: while (loop) {
        loop = canDriver->isr_core () ;
	    }
|———————Node:while Text: while
|———————Node:condition_clause Text: (loop)
|————————Node:( Text: (
|————————Node:identifier Text: loop
|————————Node:) Text: )
|———————Node:compound_statement Text: {
        loop = canDriver->isr_core () ;
	    }
|————————Node:{ Text: {
|————————Node:expression_statement Text: loop = canDriver->isr_core () ;
|—————————Node:assignment_expression Text: loop = canDriver->isr_core ()
|——————————Node:identifier Text: loop
|——————————Node:= Text: =
|——————————Node:call_expression Text: canDriver->isr_core ()
|———————————Node:field_expression Text: canDriver->isr_core
|————————————Node:identifier Text: canDriver
|————————————Node:-> Text: ->
|————————————Node:field_identifier Text: isr_core
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:} Text: }
|——————Node:} Text: }
|————Node:} Text: }
|——Node:#endif Text: #endif
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:function_definition Text: ACAN2515::ACAN2515 (const uint8_t inCS,  // CS input of MCP2515
                    SPIClass & inSPI, // Hardware SPI object
                    const uint8_t inINT) : // INT output of MCP2515
mSPI (inSPI),
mSPISettings (10UL * 1000UL * 1000UL, MSBFIRST, SPI_MODE0),  // 10 MHz, UL suffix is required for Arduino Uno
mCS (inCS),
mINT (inINT),
mRolloverEnable (false),
#ifdef ARDUINO_ARCH_ESP32
  mISRSemaphore (xSemaphoreCreateCounting (10, 0)),
#endif
mReceiveBuffer (),
mCallBackFunctionArray (),
mTXBIsFree () {
  for (uint8_t i=0 ; i<6 ; i++) {
    mCallBackFunctionArray [i] = NULL ;
  }
}
|——Node:function_declarator Text: ACAN2515::ACAN2515 (const uint8_t inCS,  // CS input of MCP2515
                    SPIClass & inSPI, // Hardware SPI object
                    const uint8_t inINT)
|———Node:qualified_identifier Text: ACAN2515::ACAN2515
|————Node:namespace_identifier Text: ACAN2515
|————Node::: Text: ::
|————Node:identifier Text: ACAN2515
|———Node:parameter_list Text: (const uint8_t inCS,  // CS input of MCP2515
                    SPIClass & inSPI, // Hardware SPI object
                    const uint8_t inINT)
|————Node:( Text: (
|————Node:parameter_declaration Text: const uint8_t inCS
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: inCS
|————Node:, Text: ,
|————Node:comment
|————Node:parameter_declaration Text: SPIClass & inSPI
|—————Node:type_identifier Text: SPIClass
|—————Node:reference_declarator Text: & inSPI
|——————Node:& Text: &
|——————Node:identifier Text: inSPI
|————Node:, Text: ,
|————Node:comment
|————Node:parameter_declaration Text: const uint8_t inINT
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: inINT
|————Node:) Text: )
|——Node:field_initializer_list Text: : // INT output of MCP2515
mSPI (inSPI),
mSPISettings (10UL * 1000UL * 1000UL, MSBFIRST, SPI_MODE0),  // 10 MHz, UL suffix is required for Arduino Uno
mCS (inCS),
mINT (inINT),
mRolloverEnable (false),
#ifdef ARDUINO_ARCH_ESP32
  mISRSemaphore (xSemaphoreCreateCounting (10, 0)),
#endif
mReceiveBuffer (),
mCallBackFunctionArray (),
mTXBIsFree ()
|———Node:: Text: :
|———Node:comment
|———Node:field_initializer Text: mSPI (inSPI)
|————Node:field_identifier Text: mSPI
|————Node:argument_list Text: (inSPI)
|—————Node:( Text: (
|—————Node:identifier Text: inSPI
|—————Node:) Text: )
|———Node:, Text: ,
|———Node:field_initializer Text: mSPISettings (10UL * 1000UL * 1000UL, MSBFIRST, SPI_MODE0)
|————Node:field_identifier Text: mSPISettings
|————Node:argument_list Text: (10UL * 1000UL * 1000UL, MSBFIRST, SPI_MODE0)
|—————Node:( Text: (
|—————Node:binary_expression Text: 10UL * 1000UL * 1000UL
|——————Node:binary_expression Text: 10UL * 1000UL
|———————Node:number_literal Text: 10UL
|———————Node:* Text: *
|———————Node:number_literal Text: 1000UL
|——————Node:* Text: *
|——————Node:number_literal Text: 1000UL
|—————Node:, Text: ,
|—————Node:identifier Text: MSBFIRST
|—————Node:, Text: ,
|—————Node:identifier Text: SPI_MODE0
|—————Node:) Text: )
|———Node:, Text: ,
|———Node:comment
|———Node:field_initializer Text: mCS (inCS)
|————Node:field_identifier Text: mCS
|————Node:argument_list Text: (inCS)
|—————Node:( Text: (
|—————Node:identifier Text: inCS
|—————Node:) Text: )
|———Node:, Text: ,
|———Node:field_initializer Text: mINT (inINT)
|————Node:field_identifier Text: mINT
|————Node:argument_list Text: (inINT)
|—————Node:( Text: (
|—————Node:identifier Text: inINT
|—————Node:) Text: )
|———Node:, Text: ,
|———Node:field_initializer Text: mRolloverEnable (false)
|————Node:field_identifier Text: mRolloverEnable
|————Node:argument_list Text: (false)
|—————Node:( Text: (
|—————Node:false Text: false
|—————Node:) Text: )
|———Node:, Text: ,
|———Node:ERROR Text: #ifdef ARDUINO_ARCH_ESP32
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: ARDUINO_ARCH_ESP32
|———Node:field_initializer Text: mISRSemaphore (xSemaphoreCreateCounting (10, 0))
|————Node:field_identifier Text: mISRSemaphore
|————Node:argument_list Text: (xSemaphoreCreateCounting (10, 0))
|—————Node:( Text: (
|—————Node:call_expression Text: xSemaphoreCreateCounting (10, 0)
|——————Node:identifier Text: xSemaphoreCreateCounting
|——————Node:argument_list Text: (10, 0)
|———————Node:( Text: (
|———————Node:number_literal Text: 10
|———————Node:, Text: ,
|———————Node:number_literal Text: 0
|———————Node:) Text: )
|—————Node:) Text: )
|———Node:, Text: ,
|———Node:ERROR Text: #endif
|————Node:#endif Text: #endif
|———Node:field_initializer Text: mReceiveBuffer ()
|————Node:field_identifier Text: mReceiveBuffer
|————Node:argument_list Text: ()
|—————Node:( Text: (
|—————Node:) Text: )
|———Node:, Text: ,
|———Node:field_initializer Text: mCallBackFunctionArray ()
|————Node:field_identifier Text: mCallBackFunctionArray
|————Node:argument_list Text: ()
|—————Node:( Text: (
|—————Node:) Text: )
|———Node:, Text: ,
|———Node:field_initializer Text: mTXBIsFree ()
|————Node:field_identifier Text: mTXBIsFree
|————Node:argument_list Text: ()
|—————Node:( Text: (
|—————Node:) Text: )
|——Node:compound_statement Text: {
  for (uint8_t i=0 ; i<6 ; i++) {
    mCallBackFunctionArray [i] = NULL ;
  }
}
|———Node:{ Text: {
|———Node:for_statement Text: for (uint8_t i=0 ; i<6 ; i++) {
    mCallBackFunctionArray [i] = NULL ;
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:declaration Text: uint8_t i=0 ;
|—————Node:primitive_type Text: uint8_t
|—————Node:init_declarator Text: i=0
|——————Node:identifier Text: i
|——————Node:= Text: =
|——————Node:number_literal Text: 0
|—————Node:; Text: ;
|————Node:binary_expression Text: i<6
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:number_literal Text: 6
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    mCallBackFunctionArray [i] = NULL ;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: mCallBackFunctionArray [i] = NULL ;
|——————Node:assignment_expression Text: mCallBackFunctionArray [i] = NULL
|———————Node:subscript_expression Text: mCallBackFunctionArray [i]
|————————Node:identifier Text: mCallBackFunctionArray
|————————Node:subscript_argument_list Text: [i]
|—————————Node:[ Text: [
|—————————Node:identifier Text: i
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:null Text: NULL
|————————Node:NULL Text: NULL
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:} Text: }
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:function_definition Text: uint16_t ACAN2515::begin (const ACAN2515Settings & inSettings,
                          void (* inInterruptServiceRoutine) (void)) {

  return beginWithoutFilterCheck (inSettings, inInterruptServiceRoutine, ACAN2515Mask (), ACAN2515Mask (), NULL, 0) ;
}
|——Node:primitive_type Text: uint16_t
|——Node:function_declarator Text: ACAN2515::begin (const ACAN2515Settings & inSettings,
                          void (* inInterruptServiceRoutine) (void))
|———Node:qualified_identifier Text: ACAN2515::begin
|————Node:namespace_identifier Text: ACAN2515
|————Node::: Text: ::
|————Node:identifier Text: begin
|———Node:parameter_list Text: (const ACAN2515Settings & inSettings,
                          void (* inInterruptServiceRoutine) (void))
|————Node:( Text: (
|————Node:parameter_declaration Text: const ACAN2515Settings & inSettings
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: ACAN2515Settings
|—————Node:reference_declarator Text: & inSettings
|——————Node:& Text: &
|——————Node:identifier Text: inSettings
|————Node:, Text: ,
|————Node:parameter_declaration Text: void (* inInterruptServiceRoutine) (void)
|—————Node:primitive_type Text: void
|—————Node:function_declarator Text: (* inInterruptServiceRoutine) (void)
|——————Node:parenthesized_declarator Text: (* inInterruptServiceRoutine)
|———————Node:( Text: (
|———————Node:pointer_declarator Text: * inInterruptServiceRoutine
|————————Node:* Text: *
|————————Node:identifier Text: inInterruptServiceRoutine
|———————Node:) Text: )
|——————Node:parameter_list Text: (void)
|———————Node:( Text: (
|———————Node:parameter_declaration Text: void
|————————Node:primitive_type Text: void
|———————Node:) Text: )
|————Node:) Text: )
|——Node:compound_statement Text: {

  return beginWithoutFilterCheck (inSettings, inInterruptServiceRoutine, ACAN2515Mask (), ACAN2515Mask (), NULL, 0) ;
}
|———Node:{ Text: {
|———Node:return_statement Text: return beginWithoutFilterCheck (inSettings, inInterruptServiceRoutine, ACAN2515Mask (), ACAN2515Mask (), NULL, 0) ;
|————Node:return Text: return
|————Node:call_expression Text: beginWithoutFilterCheck (inSettings, inInterruptServiceRoutine, ACAN2515Mask (), ACAN2515Mask (), NULL, 0)
|—————Node:identifier Text: beginWithoutFilterCheck
|—————Node:argument_list Text: (inSettings, inInterruptServiceRoutine, ACAN2515Mask (), ACAN2515Mask (), NULL, 0)
|——————Node:( Text: (
|——————Node:identifier Text: inSettings
|——————Node:, Text: ,
|——————Node:identifier Text: inInterruptServiceRoutine
|——————Node:, Text: ,
|——————Node:call_expression Text: ACAN2515Mask ()
|———————Node:identifier Text: ACAN2515Mask
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:, Text: ,
|——————Node:call_expression Text: ACAN2515Mask ()
|———————Node:identifier Text: ACAN2515Mask
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:, Text: ,
|——————Node:null Text: NULL
|———————Node:NULL Text: NULL
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: uint16_t ACAN2515::begin (const ACAN2515Settings & inSettings,
                          void (* inInterruptServiceRoutine) (void),
                          const ACAN2515Mask inRXM0,
                          const ACAN2515AcceptanceFilter inAcceptanceFilters [],
                          const uint8_t inAcceptanceFilterCount) {
  uint16_t errorCode = 0 ;
  if (inAcceptanceFilterCount == 0) {
    errorCode = kOneFilterMaskRequiresOneOrTwoAcceptanceFilters ;
  }else if (inAcceptanceFilterCount > 2) {
    errorCode = kOneFilterMaskRequiresOneOrTwoAcceptanceFilters ;
  }else if (inAcceptanceFilters == NULL) {
    errorCode = kAcceptanceFilterArrayIsNULL ;
  }else{
    errorCode = beginWithoutFilterCheck (inSettings, inInterruptServiceRoutine,
                                         inRXM0, inRXM0, inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
  return errorCode ;
}
|——Node:primitive_type Text: uint16_t
|——Node:function_declarator Text: ACAN2515::begin (const ACAN2515Settings & inSettings,
                          void (* inInterruptServiceRoutine) (void),
                          const ACAN2515Mask inRXM0,
                          const ACAN2515AcceptanceFilter inAcceptanceFilters [],
                          const uint8_t inAcceptanceFilterCount)
|———Node:qualified_identifier Text: ACAN2515::begin
|————Node:namespace_identifier Text: ACAN2515
|————Node::: Text: ::
|————Node:identifier Text: begin
|———Node:parameter_list Text: (const ACAN2515Settings & inSettings,
                          void (* inInterruptServiceRoutine) (void),
                          const ACAN2515Mask inRXM0,
                          const ACAN2515AcceptanceFilter inAcceptanceFilters [],
                          const uint8_t inAcceptanceFilterCount)
|————Node:( Text: (
|————Node:parameter_declaration Text: const ACAN2515Settings & inSettings
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: ACAN2515Settings
|—————Node:reference_declarator Text: & inSettings
|——————Node:& Text: &
|——————Node:identifier Text: inSettings
|————Node:, Text: ,
|————Node:parameter_declaration Text: void (* inInterruptServiceRoutine) (void)
|—————Node:primitive_type Text: void
|—————Node:function_declarator Text: (* inInterruptServiceRoutine) (void)
|——————Node:parenthesized_declarator Text: (* inInterruptServiceRoutine)
|———————Node:( Text: (
|———————Node:pointer_declarator Text: * inInterruptServiceRoutine
|————————Node:* Text: *
|————————Node:identifier Text: inInterruptServiceRoutine
|———————Node:) Text: )
|——————Node:parameter_list Text: (void)
|———————Node:( Text: (
|———————Node:parameter_declaration Text: void
|————————Node:primitive_type Text: void
|———————Node:) Text: )
|————Node:, Text: ,
|————Node:parameter_declaration Text: const ACAN2515Mask inRXM0
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: ACAN2515Mask
|—————Node:identifier Text: inRXM0
|————Node:, Text: ,
|————Node:parameter_declaration Text: const ACAN2515AcceptanceFilter inAcceptanceFilters []
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: ACAN2515AcceptanceFilter
|—————Node:array_declarator Text: inAcceptanceFilters []
|——————Node:identifier Text: inAcceptanceFilters
|——————Node:[ Text: [
|——————Node:] Text: ]
|————Node:, Text: ,
|————Node:parameter_declaration Text: const uint8_t inAcceptanceFilterCount
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: inAcceptanceFilterCount
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint16_t errorCode = 0 ;
  if (inAcceptanceFilterCount == 0) {
    errorCode = kOneFilterMaskRequiresOneOrTwoAcceptanceFilters ;
  }else if (inAcceptanceFilterCount > 2) {
    errorCode = kOneFilterMaskRequiresOneOrTwoAcceptanceFilters ;
  }else if (inAcceptanceFilters == NULL) {
    errorCode = kAcceptanceFilterArrayIsNULL ;
  }else{
    errorCode = beginWithoutFilterCheck (inSettings, inInterruptServiceRoutine,
                                         inRXM0, inRXM0, inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
  return errorCode ;
}
|———Node:{ Text: {
|———Node:declaration Text: uint16_t errorCode = 0 ;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: errorCode = 0
|—————Node:identifier Text: errorCode
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:if_statement Text: if (inAcceptanceFilterCount == 0) {
    errorCode = kOneFilterMaskRequiresOneOrTwoAcceptanceFilters ;
  }else if (inAcceptanceFilterCount > 2) {
    errorCode = kOneFilterMaskRequiresOneOrTwoAcceptanceFilters ;
  }else if (inAcceptanceFilters == NULL) {
    errorCode = kAcceptanceFilterArrayIsNULL ;
  }else{
    errorCode = beginWithoutFilterCheck (inSettings, inInterruptServiceRoutine,
                                         inRXM0, inRXM0, inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (inAcceptanceFilterCount == 0)
|—————Node:( Text: (
|—————Node:binary_expression Text: inAcceptanceFilterCount == 0
|——————Node:identifier Text: inAcceptanceFilterCount
|——————Node:== Text: ==
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {
    errorCode = kOneFilterMaskRequiresOneOrTwoAcceptanceFilters ;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: errorCode = kOneFilterMaskRequiresOneOrTwoAcceptanceFilters ;
|——————Node:assignment_expression Text: errorCode = kOneFilterMaskRequiresOneOrTwoAcceptanceFilters
|———————Node:identifier Text: errorCode
|———————Node:= Text: =
|———————Node:identifier Text: kOneFilterMaskRequiresOneOrTwoAcceptanceFilters
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else if (inAcceptanceFilterCount > 2) {
    errorCode = kOneFilterMaskRequiresOneOrTwoAcceptanceFilters ;
  }else if (inAcceptanceFilters == NULL) {
    errorCode = kAcceptanceFilterArrayIsNULL ;
  }else{
    errorCode = beginWithoutFilterCheck (inSettings, inInterruptServiceRoutine,
                                         inRXM0, inRXM0, inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
|—————Node:else Text: else
|—————Node:if_statement Text: if (inAcceptanceFilterCount > 2) {
    errorCode = kOneFilterMaskRequiresOneOrTwoAcceptanceFilters ;
  }else if (inAcceptanceFilters == NULL) {
    errorCode = kAcceptanceFilterArrayIsNULL ;
  }else{
    errorCode = beginWithoutFilterCheck (inSettings, inInterruptServiceRoutine,
                                         inRXM0, inRXM0, inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
|——————Node:if Text: if
|——————Node:condition_clause Text: (inAcceptanceFilterCount > 2)
|———————Node:( Text: (
|———————Node:binary_expression Text: inAcceptanceFilterCount > 2
|————————Node:identifier Text: inAcceptanceFilterCount
|————————Node:> Text: >
|————————Node:number_literal Text: 2
|———————Node:) Text: )
|——————Node:compound_statement Text: {
    errorCode = kOneFilterMaskRequiresOneOrTwoAcceptanceFilters ;
  }
|———————Node:{ Text: {
|———————Node:expression_statement Text: errorCode = kOneFilterMaskRequiresOneOrTwoAcceptanceFilters ;
|————————Node:assignment_expression Text: errorCode = kOneFilterMaskRequiresOneOrTwoAcceptanceFilters
|—————————Node:identifier Text: errorCode
|—————————Node:= Text: =
|—————————Node:identifier Text: kOneFilterMaskRequiresOneOrTwoAcceptanceFilters
|————————Node:; Text: ;
|———————Node:} Text: }
|——————Node:else_clause Text: else if (inAcceptanceFilters == NULL) {
    errorCode = kAcceptanceFilterArrayIsNULL ;
  }else{
    errorCode = beginWithoutFilterCheck (inSettings, inInterruptServiceRoutine,
                                         inRXM0, inRXM0, inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
|———————Node:else Text: else
|———————Node:if_statement Text: if (inAcceptanceFilters == NULL) {
    errorCode = kAcceptanceFilterArrayIsNULL ;
  }else{
    errorCode = beginWithoutFilterCheck (inSettings, inInterruptServiceRoutine,
                                         inRXM0, inRXM0, inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
|————————Node:if Text: if
|————————Node:condition_clause Text: (inAcceptanceFilters == NULL)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: inAcceptanceFilters == NULL
|——————————Node:identifier Text: inAcceptanceFilters
|——————————Node:== Text: ==
|——————————Node:null Text: NULL
|———————————Node:NULL Text: NULL
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
    errorCode = kAcceptanceFilterArrayIsNULL ;
  }
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: errorCode = kAcceptanceFilterArrayIsNULL ;
|——————————Node:assignment_expression Text: errorCode = kAcceptanceFilterArrayIsNULL
|———————————Node:identifier Text: errorCode
|———————————Node:= Text: =
|———————————Node:identifier Text: kAcceptanceFilterArrayIsNULL
|——————————Node:; Text: ;
|—————————Node:} Text: }
|————————Node:else_clause Text: else{
    errorCode = beginWithoutFilterCheck (inSettings, inInterruptServiceRoutine,
                                         inRXM0, inRXM0, inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
|—————————Node:else Text: else
|—————————Node:compound_statement Text: {
    errorCode = beginWithoutFilterCheck (inSettings, inInterruptServiceRoutine,
                                         inRXM0, inRXM0, inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
|——————————Node:{ Text: {
|——————————Node:expression_statement Text: errorCode = beginWithoutFilterCheck (inSettings, inInterruptServiceRoutine,
                                         inRXM0, inRXM0, inAcceptanceFilters, inAcceptanceFilterCount) ;
|———————————Node:assignment_expression Text: errorCode = beginWithoutFilterCheck (inSettings, inInterruptServiceRoutine,
                                         inRXM0, inRXM0, inAcceptanceFilters, inAcceptanceFilterCount)
|————————————Node:identifier Text: errorCode
|————————————Node:= Text: =
|————————————Node:call_expression Text: beginWithoutFilterCheck (inSettings, inInterruptServiceRoutine,
                                         inRXM0, inRXM0, inAcceptanceFilters, inAcceptanceFilterCount)
|—————————————Node:identifier Text: beginWithoutFilterCheck
|—————————————Node:argument_list Text: (inSettings, inInterruptServiceRoutine,
                                         inRXM0, inRXM0, inAcceptanceFilters, inAcceptanceFilterCount)
|——————————————Node:( Text: (
|——————————————Node:identifier Text: inSettings
|——————————————Node:, Text: ,
|——————————————Node:identifier Text: inInterruptServiceRoutine
|——————————————Node:, Text: ,
|——————————————Node:identifier Text: inRXM0
|——————————————Node:, Text: ,
|——————————————Node:identifier Text: inRXM0
|——————————————Node:, Text: ,
|——————————————Node:identifier Text: inAcceptanceFilters
|——————————————Node:, Text: ,
|——————————————Node:identifier Text: inAcceptanceFilterCount
|——————————————Node:) Text: )
|———————————Node:; Text: ;
|——————————Node:} Text: }
|———Node:return_statement Text: return errorCode ;
|————Node:return Text: return
|————Node:identifier Text: errorCode
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: uint16_t ACAN2515::begin (const ACAN2515Settings & inSettings,
                          void (* inInterruptServiceRoutine) (void),
                          const ACAN2515Mask inRXM0,
                          const ACAN2515Mask inRXM1,
                          const ACAN2515AcceptanceFilter inAcceptanceFilters [],
                          const uint8_t inAcceptanceFilterCount) {
  uint16_t errorCode = 0 ;
  if (inAcceptanceFilterCount < 3) {
    errorCode = kTwoFilterMasksRequireThreeToSixAcceptanceFilters ;
  }else if (inAcceptanceFilterCount > 6) {
    errorCode = kTwoFilterMasksRequireThreeToSixAcceptanceFilters ;
  }else if (inAcceptanceFilters == NULL) {
    errorCode = kAcceptanceFilterArrayIsNULL ;
  }else{
    errorCode = beginWithoutFilterCheck (inSettings, inInterruptServiceRoutine,
                                         inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
  return errorCode ;
}
|——Node:primitive_type Text: uint16_t
|——Node:function_declarator Text: ACAN2515::begin (const ACAN2515Settings & inSettings,
                          void (* inInterruptServiceRoutine) (void),
                          const ACAN2515Mask inRXM0,
                          const ACAN2515Mask inRXM1,
                          const ACAN2515AcceptanceFilter inAcceptanceFilters [],
                          const uint8_t inAcceptanceFilterCount)
|———Node:qualified_identifier Text: ACAN2515::begin
|————Node:namespace_identifier Text: ACAN2515
|————Node::: Text: ::
|————Node:identifier Text: begin
|———Node:parameter_list Text: (const ACAN2515Settings & inSettings,
                          void (* inInterruptServiceRoutine) (void),
                          const ACAN2515Mask inRXM0,
                          const ACAN2515Mask inRXM1,
                          const ACAN2515AcceptanceFilter inAcceptanceFilters [],
                          const uint8_t inAcceptanceFilterCount)
|————Node:( Text: (
|————Node:parameter_declaration Text: const ACAN2515Settings & inSettings
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: ACAN2515Settings
|—————Node:reference_declarator Text: & inSettings
|——————Node:& Text: &
|——————Node:identifier Text: inSettings
|————Node:, Text: ,
|————Node:parameter_declaration Text: void (* inInterruptServiceRoutine) (void)
|—————Node:primitive_type Text: void
|—————Node:function_declarator Text: (* inInterruptServiceRoutine) (void)
|——————Node:parenthesized_declarator Text: (* inInterruptServiceRoutine)
|———————Node:( Text: (
|———————Node:pointer_declarator Text: * inInterruptServiceRoutine
|————————Node:* Text: *
|————————Node:identifier Text: inInterruptServiceRoutine
|———————Node:) Text: )
|——————Node:parameter_list Text: (void)
|———————Node:( Text: (
|———————Node:parameter_declaration Text: void
|————————Node:primitive_type Text: void
|———————Node:) Text: )
|————Node:, Text: ,
|————Node:parameter_declaration Text: const ACAN2515Mask inRXM0
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: ACAN2515Mask
|—————Node:identifier Text: inRXM0
|————Node:, Text: ,
|————Node:parameter_declaration Text: const ACAN2515Mask inRXM1
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: ACAN2515Mask
|—————Node:identifier Text: inRXM1
|————Node:, Text: ,
|————Node:parameter_declaration Text: const ACAN2515AcceptanceFilter inAcceptanceFilters []
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: ACAN2515AcceptanceFilter
|—————Node:array_declarator Text: inAcceptanceFilters []
|——————Node:identifier Text: inAcceptanceFilters
|——————Node:[ Text: [
|——————Node:] Text: ]
|————Node:, Text: ,
|————Node:parameter_declaration Text: const uint8_t inAcceptanceFilterCount
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: inAcceptanceFilterCount
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint16_t errorCode = 0 ;
  if (inAcceptanceFilterCount < 3) {
    errorCode = kTwoFilterMasksRequireThreeToSixAcceptanceFilters ;
  }else if (inAcceptanceFilterCount > 6) {
    errorCode = kTwoFilterMasksRequireThreeToSixAcceptanceFilters ;
  }else if (inAcceptanceFilters == NULL) {
    errorCode = kAcceptanceFilterArrayIsNULL ;
  }else{
    errorCode = beginWithoutFilterCheck (inSettings, inInterruptServiceRoutine,
                                         inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
  return errorCode ;
}
|———Node:{ Text: {
|———Node:declaration Text: uint16_t errorCode = 0 ;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: errorCode = 0
|—————Node:identifier Text: errorCode
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:if_statement Text: if (inAcceptanceFilterCount < 3) {
    errorCode = kTwoFilterMasksRequireThreeToSixAcceptanceFilters ;
  }else if (inAcceptanceFilterCount > 6) {
    errorCode = kTwoFilterMasksRequireThreeToSixAcceptanceFilters ;
  }else if (inAcceptanceFilters == NULL) {
    errorCode = kAcceptanceFilterArrayIsNULL ;
  }else{
    errorCode = beginWithoutFilterCheck (inSettings, inInterruptServiceRoutine,
                                         inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (inAcceptanceFilterCount < 3)
|—————Node:( Text: (
|—————Node:binary_expression Text: inAcceptanceFilterCount < 3
|——————Node:identifier Text: inAcceptanceFilterCount
|——————Node:< Text: <
|——————Node:number_literal Text: 3
|—————Node:) Text: )
|————Node:compound_statement Text: {
    errorCode = kTwoFilterMasksRequireThreeToSixAcceptanceFilters ;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: errorCode = kTwoFilterMasksRequireThreeToSixAcceptanceFilters ;
|——————Node:assignment_expression Text: errorCode = kTwoFilterMasksRequireThreeToSixAcceptanceFilters
|———————Node:identifier Text: errorCode
|———————Node:= Text: =
|———————Node:identifier Text: kTwoFilterMasksRequireThreeToSixAcceptanceFilters
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else if (inAcceptanceFilterCount > 6) {
    errorCode = kTwoFilterMasksRequireThreeToSixAcceptanceFilters ;
  }else if (inAcceptanceFilters == NULL) {
    errorCode = kAcceptanceFilterArrayIsNULL ;
  }else{
    errorCode = beginWithoutFilterCheck (inSettings, inInterruptServiceRoutine,
                                         inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
|—————Node:else Text: else
|—————Node:if_statement Text: if (inAcceptanceFilterCount > 6) {
    errorCode = kTwoFilterMasksRequireThreeToSixAcceptanceFilters ;
  }else if (inAcceptanceFilters == NULL) {
    errorCode = kAcceptanceFilterArrayIsNULL ;
  }else{
    errorCode = beginWithoutFilterCheck (inSettings, inInterruptServiceRoutine,
                                         inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
|——————Node:if Text: if
|——————Node:condition_clause Text: (inAcceptanceFilterCount > 6)
|———————Node:( Text: (
|———————Node:binary_expression Text: inAcceptanceFilterCount > 6
|————————Node:identifier Text: inAcceptanceFilterCount
|————————Node:> Text: >
|————————Node:number_literal Text: 6
|———————Node:) Text: )
|——————Node:compound_statement Text: {
    errorCode = kTwoFilterMasksRequireThreeToSixAcceptanceFilters ;
  }
|———————Node:{ Text: {
|———————Node:expression_statement Text: errorCode = kTwoFilterMasksRequireThreeToSixAcceptanceFilters ;
|————————Node:assignment_expression Text: errorCode = kTwoFilterMasksRequireThreeToSixAcceptanceFilters
|—————————Node:identifier Text: errorCode
|—————————Node:= Text: =
|—————————Node:identifier Text: kTwoFilterMasksRequireThreeToSixAcceptanceFilters
|————————Node:; Text: ;
|———————Node:} Text: }
|——————Node:else_clause Text: else if (inAcceptanceFilters == NULL) {
    errorCode = kAcceptanceFilterArrayIsNULL ;
  }else{
    errorCode = beginWithoutFilterCheck (inSettings, inInterruptServiceRoutine,
                                         inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
|———————Node:else Text: else
|———————Node:if_statement Text: if (inAcceptanceFilters == NULL) {
    errorCode = kAcceptanceFilterArrayIsNULL ;
  }else{
    errorCode = beginWithoutFilterCheck (inSettings, inInterruptServiceRoutine,
                                         inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
|————————Node:if Text: if
|————————Node:condition_clause Text: (inAcceptanceFilters == NULL)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: inAcceptanceFilters == NULL
|——————————Node:identifier Text: inAcceptanceFilters
|——————————Node:== Text: ==
|——————————Node:null Text: NULL
|———————————Node:NULL Text: NULL
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
    errorCode = kAcceptanceFilterArrayIsNULL ;
  }
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: errorCode = kAcceptanceFilterArrayIsNULL ;
|——————————Node:assignment_expression Text: errorCode = kAcceptanceFilterArrayIsNULL
|———————————Node:identifier Text: errorCode
|———————————Node:= Text: =
|———————————Node:identifier Text: kAcceptanceFilterArrayIsNULL
|——————————Node:; Text: ;
|—————————Node:} Text: }
|————————Node:else_clause Text: else{
    errorCode = beginWithoutFilterCheck (inSettings, inInterruptServiceRoutine,
                                         inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
|—————————Node:else Text: else
|—————————Node:compound_statement Text: {
    errorCode = beginWithoutFilterCheck (inSettings, inInterruptServiceRoutine,
                                         inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
|——————————Node:{ Text: {
|——————————Node:expression_statement Text: errorCode = beginWithoutFilterCheck (inSettings, inInterruptServiceRoutine,
                                         inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount) ;
|———————————Node:assignment_expression Text: errorCode = beginWithoutFilterCheck (inSettings, inInterruptServiceRoutine,
                                         inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount)
|————————————Node:identifier Text: errorCode
|————————————Node:= Text: =
|————————————Node:call_expression Text: beginWithoutFilterCheck (inSettings, inInterruptServiceRoutine,
                                         inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount)
|—————————————Node:identifier Text: beginWithoutFilterCheck
|—————————————Node:argument_list Text: (inSettings, inInterruptServiceRoutine,
                                         inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount)
|——————————————Node:( Text: (
|——————————————Node:identifier Text: inSettings
|——————————————Node:, Text: ,
|——————————————Node:identifier Text: inInterruptServiceRoutine
|——————————————Node:, Text: ,
|——————————————Node:identifier Text: inRXM0
|——————————————Node:, Text: ,
|——————————————Node:identifier Text: inRXM1
|——————————————Node:, Text: ,
|——————————————Node:identifier Text: inAcceptanceFilters
|——————————————Node:, Text: ,
|——————————————Node:identifier Text: inAcceptanceFilterCount
|——————————————Node:) Text: )
|———————————Node:; Text: ;
|——————————Node:} Text: }
|———Node:return_statement Text: return errorCode ;
|————Node:return Text: return
|————Node:identifier Text: errorCode
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: uint16_t ACAN2515::beginWithoutFilterCheck (const ACAN2515Settings & inSettings,
                                            void (* inInterruptServiceRoutine) (void),
                                            const ACAN2515Mask inRXM0,
                                            const ACAN2515Mask inRXM1,
                                            const ACAN2515AcceptanceFilter inAcceptanceFilters [],
                                            const uint8_t inAcceptanceFilterCount) {
  uint16_t errorCode = 0 ; // Means no error
//----------------------------------- Check mINT has interrupt capability
  const int8_t itPin = digitalPinToInterrupt (mINT) ;
  if ((mINT != 255) && (itPin == NOT_AN_INTERRUPT)) {
    errorCode = kINTPinIsNotAnInterrupt ;
  }
//----------------------------------- Check interrupt service routine is not null
  if ((mINT != 255) && (inInterruptServiceRoutine == NULL)) {
    errorCode |= kISRIsNull ;
  }
//----------------------------------- Check consistency between ISR and INT pin
  if ((mINT == 255) && (inInterruptServiceRoutine != NULL)) {
    errorCode |= kISRNotNullAndNoIntPin ;
  }
//----------------------------------- if no error, configure port and MCP2515
  if (errorCode == 0) {
  //--- Configure ports
    if (mINT != 255) { // 255 means interrupt is not used
      pinMode (mINT, INPUT_PULLUP) ;
    }
    pinMode (mCS, OUTPUT) ;
    digitalWrite (mCS, HIGH) ;  // CS is high outside a command
  //--- Send software reset to MCP2515
    mSPI.beginTransaction (mSPISettings) ;
      select () ;
        mSPI.transfer (RESET_COMMAND) ;
      unselect () ;
    mSPI.endTransaction () ;
  //---
    delayMicroseconds (10) ;
  //--- Internal begin
    errorCode = internalBeginOperation (inSettings, inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
//--- Configure interrupt only if no error (thanks to mvSarma)
  if (errorCode == 0) {
    #ifdef ARDUINO_ARCH_ESP32
      xTaskCreate (myESP32Task, "ACAN2515Handler", 1024, this, 256, NULL) ;
    #endif
    if (mINT != 255) { // 255 means interrupt is not used
      #ifdef ARDUINO_ARCH_ESP32
        attachInterrupt (itPin, inInterruptServiceRoutine, FALLING) ;
      #else
        mSPI.usingInterrupt (itPin) ; // usingInterrupt is not implemented in Arduino ESP32
        attachInterrupt (itPin, inInterruptServiceRoutine, LOW) ;
      #endif
    }
  }
//----------------------------------- Return
  return errorCode ;
}
|——Node:primitive_type Text: uint16_t
|——Node:function_declarator Text: ACAN2515::beginWithoutFilterCheck (const ACAN2515Settings & inSettings,
                                            void (* inInterruptServiceRoutine) (void),
                                            const ACAN2515Mask inRXM0,
                                            const ACAN2515Mask inRXM1,
                                            const ACAN2515AcceptanceFilter inAcceptanceFilters [],
                                            const uint8_t inAcceptanceFilterCount)
|———Node:qualified_identifier Text: ACAN2515::beginWithoutFilterCheck
|————Node:namespace_identifier Text: ACAN2515
|————Node::: Text: ::
|————Node:identifier Text: beginWithoutFilterCheck
|———Node:parameter_list Text: (const ACAN2515Settings & inSettings,
                                            void (* inInterruptServiceRoutine) (void),
                                            const ACAN2515Mask inRXM0,
                                            const ACAN2515Mask inRXM1,
                                            const ACAN2515AcceptanceFilter inAcceptanceFilters [],
                                            const uint8_t inAcceptanceFilterCount)
|————Node:( Text: (
|————Node:parameter_declaration Text: const ACAN2515Settings & inSettings
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: ACAN2515Settings
|—————Node:reference_declarator Text: & inSettings
|——————Node:& Text: &
|——————Node:identifier Text: inSettings
|————Node:, Text: ,
|————Node:parameter_declaration Text: void (* inInterruptServiceRoutine) (void)
|—————Node:primitive_type Text: void
|—————Node:function_declarator Text: (* inInterruptServiceRoutine) (void)
|——————Node:parenthesized_declarator Text: (* inInterruptServiceRoutine)
|———————Node:( Text: (
|———————Node:pointer_declarator Text: * inInterruptServiceRoutine
|————————Node:* Text: *
|————————Node:identifier Text: inInterruptServiceRoutine
|———————Node:) Text: )
|——————Node:parameter_list Text: (void)
|———————Node:( Text: (
|———————Node:parameter_declaration Text: void
|————————Node:primitive_type Text: void
|———————Node:) Text: )
|————Node:, Text: ,
|————Node:parameter_declaration Text: const ACAN2515Mask inRXM0
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: ACAN2515Mask
|—————Node:identifier Text: inRXM0
|————Node:, Text: ,
|————Node:parameter_declaration Text: const ACAN2515Mask inRXM1
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: ACAN2515Mask
|—————Node:identifier Text: inRXM1
|————Node:, Text: ,
|————Node:parameter_declaration Text: const ACAN2515AcceptanceFilter inAcceptanceFilters []
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: ACAN2515AcceptanceFilter
|—————Node:array_declarator Text: inAcceptanceFilters []
|——————Node:identifier Text: inAcceptanceFilters
|——————Node:[ Text: [
|——————Node:] Text: ]
|————Node:, Text: ,
|————Node:parameter_declaration Text: const uint8_t inAcceptanceFilterCount
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: inAcceptanceFilterCount
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint16_t errorCode = 0 ; // Means no error
//----------------------------------- Check mINT has interrupt capability
  const int8_t itPin = digitalPinToInterrupt (mINT) ;
  if ((mINT != 255) && (itPin == NOT_AN_INTERRUPT)) {
    errorCode = kINTPinIsNotAnInterrupt ;
  }
//----------------------------------- Check interrupt service routine is not null
  if ((mINT != 255) && (inInterruptServiceRoutine == NULL)) {
    errorCode |= kISRIsNull ;
  }
//----------------------------------- Check consistency between ISR and INT pin
  if ((mINT == 255) && (inInterruptServiceRoutine != NULL)) {
    errorCode |= kISRNotNullAndNoIntPin ;
  }
//----------------------------------- if no error, configure port and MCP2515
  if (errorCode == 0) {
  //--- Configure ports
    if (mINT != 255) { // 255 means interrupt is not used
      pinMode (mINT, INPUT_PULLUP) ;
    }
    pinMode (mCS, OUTPUT) ;
    digitalWrite (mCS, HIGH) ;  // CS is high outside a command
  //--- Send software reset to MCP2515
    mSPI.beginTransaction (mSPISettings) ;
      select () ;
        mSPI.transfer (RESET_COMMAND) ;
      unselect () ;
    mSPI.endTransaction () ;
  //---
    delayMicroseconds (10) ;
  //--- Internal begin
    errorCode = internalBeginOperation (inSettings, inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
//--- Configure interrupt only if no error (thanks to mvSarma)
  if (errorCode == 0) {
    #ifdef ARDUINO_ARCH_ESP32
      xTaskCreate (myESP32Task, "ACAN2515Handler", 1024, this, 256, NULL) ;
    #endif
    if (mINT != 255) { // 255 means interrupt is not used
      #ifdef ARDUINO_ARCH_ESP32
        attachInterrupt (itPin, inInterruptServiceRoutine, FALLING) ;
      #else
        mSPI.usingInterrupt (itPin) ; // usingInterrupt is not implemented in Arduino ESP32
        attachInterrupt (itPin, inInterruptServiceRoutine, LOW) ;
      #endif
    }
  }
//----------------------------------- Return
  return errorCode ;
}
|———Node:{ Text: {
|———Node:declaration Text: uint16_t errorCode = 0 ;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: errorCode = 0
|—————Node:identifier Text: errorCode
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:comment
|———Node:declaration Text: const int8_t itPin = digitalPinToInterrupt (mINT) ;
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: itPin = digitalPinToInterrupt (mINT)
|—————Node:identifier Text: itPin
|—————Node:= Text: =
|—————Node:call_expression Text: digitalPinToInterrupt (mINT)
|——————Node:identifier Text: digitalPinToInterrupt
|——————Node:argument_list Text: (mINT)
|———————Node:( Text: (
|———————Node:identifier Text: mINT
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if ((mINT != 255) && (itPin == NOT_AN_INTERRUPT)) {
    errorCode = kINTPinIsNotAnInterrupt ;
  }
|————Node:if Text: if
|————Node:condition_clause Text: ((mINT != 255) && (itPin == NOT_AN_INTERRUPT))
|—————Node:( Text: (
|—————Node:binary_expression Text: (mINT != 255) && (itPin == NOT_AN_INTERRUPT)
|——————Node:parenthesized_expression Text: (mINT != 255)
|———————Node:( Text: (
|———————Node:binary_expression Text: mINT != 255
|————————Node:identifier Text: mINT
|————————Node:!= Text: !=
|————————Node:number_literal Text: 255
|———————Node:) Text: )
|——————Node:&& Text: &&
|——————Node:parenthesized_expression Text: (itPin == NOT_AN_INTERRUPT)
|———————Node:( Text: (
|———————Node:binary_expression Text: itPin == NOT_AN_INTERRUPT
|————————Node:identifier Text: itPin
|————————Node:== Text: ==
|————————Node:identifier Text: NOT_AN_INTERRUPT
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
    errorCode = kINTPinIsNotAnInterrupt ;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: errorCode = kINTPinIsNotAnInterrupt ;
|——————Node:assignment_expression Text: errorCode = kINTPinIsNotAnInterrupt
|———————Node:identifier Text: errorCode
|———————Node:= Text: =
|———————Node:identifier Text: kINTPinIsNotAnInterrupt
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:if_statement Text: if ((mINT != 255) && (inInterruptServiceRoutine == NULL)) {
    errorCode |= kISRIsNull ;
  }
|————Node:if Text: if
|————Node:condition_clause Text: ((mINT != 255) && (inInterruptServiceRoutine == NULL))
|—————Node:( Text: (
|—————Node:binary_expression Text: (mINT != 255) && (inInterruptServiceRoutine == NULL)
|——————Node:parenthesized_expression Text: (mINT != 255)
|———————Node:( Text: (
|———————Node:binary_expression Text: mINT != 255
|————————Node:identifier Text: mINT
|————————Node:!= Text: !=
|————————Node:number_literal Text: 255
|———————Node:) Text: )
|——————Node:&& Text: &&
|——————Node:parenthesized_expression Text: (inInterruptServiceRoutine == NULL)
|———————Node:( Text: (
|———————Node:binary_expression Text: inInterruptServiceRoutine == NULL
|————————Node:identifier Text: inInterruptServiceRoutine
|————————Node:== Text: ==
|————————Node:null Text: NULL
|—————————Node:NULL Text: NULL
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
    errorCode |= kISRIsNull ;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: errorCode |= kISRIsNull ;
|——————Node:assignment_expression Text: errorCode |= kISRIsNull
|———————Node:identifier Text: errorCode
|———————Node:|= Text: |=
|———————Node:identifier Text: kISRIsNull
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:if_statement Text: if ((mINT == 255) && (inInterruptServiceRoutine != NULL)) {
    errorCode |= kISRNotNullAndNoIntPin ;
  }
|————Node:if Text: if
|————Node:condition_clause Text: ((mINT == 255) && (inInterruptServiceRoutine != NULL))
|—————Node:( Text: (
|—————Node:binary_expression Text: (mINT == 255) && (inInterruptServiceRoutine != NULL)
|——————Node:parenthesized_expression Text: (mINT == 255)
|———————Node:( Text: (
|———————Node:binary_expression Text: mINT == 255
|————————Node:identifier Text: mINT
|————————Node:== Text: ==
|————————Node:number_literal Text: 255
|———————Node:) Text: )
|——————Node:&& Text: &&
|——————Node:parenthesized_expression Text: (inInterruptServiceRoutine != NULL)
|———————Node:( Text: (
|———————Node:binary_expression Text: inInterruptServiceRoutine != NULL
|————————Node:identifier Text: inInterruptServiceRoutine
|————————Node:!= Text: !=
|————————Node:null Text: NULL
|—————————Node:NULL Text: NULL
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
    errorCode |= kISRNotNullAndNoIntPin ;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: errorCode |= kISRNotNullAndNoIntPin ;
|——————Node:assignment_expression Text: errorCode |= kISRNotNullAndNoIntPin
|———————Node:identifier Text: errorCode
|———————Node:|= Text: |=
|———————Node:identifier Text: kISRNotNullAndNoIntPin
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:if_statement Text: if (errorCode == 0) {
  //--- Configure ports
    if (mINT != 255) { // 255 means interrupt is not used
      pinMode (mINT, INPUT_PULLUP) ;
    }
    pinMode (mCS, OUTPUT) ;
    digitalWrite (mCS, HIGH) ;  // CS is high outside a command
  //--- Send software reset to MCP2515
    mSPI.beginTransaction (mSPISettings) ;
      select () ;
        mSPI.transfer (RESET_COMMAND) ;
      unselect () ;
    mSPI.endTransaction () ;
  //---
    delayMicroseconds (10) ;
  //--- Internal begin
    errorCode = internalBeginOperation (inSettings, inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (errorCode == 0)
|—————Node:( Text: (
|—————Node:binary_expression Text: errorCode == 0
|——————Node:identifier Text: errorCode
|——————Node:== Text: ==
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {
  //--- Configure ports
    if (mINT != 255) { // 255 means interrupt is not used
      pinMode (mINT, INPUT_PULLUP) ;
    }
    pinMode (mCS, OUTPUT) ;
    digitalWrite (mCS, HIGH) ;  // CS is high outside a command
  //--- Send software reset to MCP2515
    mSPI.beginTransaction (mSPISettings) ;
      select () ;
        mSPI.transfer (RESET_COMMAND) ;
      unselect () ;
    mSPI.endTransaction () ;
  //---
    delayMicroseconds (10) ;
  //--- Internal begin
    errorCode = internalBeginOperation (inSettings, inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
|—————Node:{ Text: {
|—————Node:comment
|—————Node:if_statement Text: if (mINT != 255) { // 255 means interrupt is not used
      pinMode (mINT, INPUT_PULLUP) ;
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: (mINT != 255)
|———————Node:( Text: (
|———————Node:binary_expression Text: mINT != 255
|————————Node:identifier Text: mINT
|————————Node:!= Text: !=
|————————Node:number_literal Text: 255
|———————Node:) Text: )
|——————Node:compound_statement Text: { // 255 means interrupt is not used
      pinMode (mINT, INPUT_PULLUP) ;
    }
|———————Node:{ Text: {
|———————Node:comment
|———————Node:expression_statement Text: pinMode (mINT, INPUT_PULLUP) ;
|————————Node:call_expression Text: pinMode (mINT, INPUT_PULLUP)
|—————————Node:identifier Text: pinMode
|—————————Node:argument_list Text: (mINT, INPUT_PULLUP)
|——————————Node:( Text: (
|——————————Node:identifier Text: mINT
|——————————Node:, Text: ,
|——————————Node:identifier Text: INPUT_PULLUP
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:expression_statement Text: pinMode (mCS, OUTPUT) ;
|——————Node:call_expression Text: pinMode (mCS, OUTPUT)
|———————Node:identifier Text: pinMode
|———————Node:argument_list Text: (mCS, OUTPUT)
|————————Node:( Text: (
|————————Node:identifier Text: mCS
|————————Node:, Text: ,
|————————Node:identifier Text: OUTPUT
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: digitalWrite (mCS, HIGH) ;
|——————Node:call_expression Text: digitalWrite (mCS, HIGH)
|———————Node:identifier Text: digitalWrite
|———————Node:argument_list Text: (mCS, HIGH)
|————————Node:( Text: (
|————————Node:identifier Text: mCS
|————————Node:, Text: ,
|————————Node:identifier Text: HIGH
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment
|—————Node:comment
|—————Node:expression_statement Text: mSPI.beginTransaction (mSPISettings) ;
|——————Node:call_expression Text: mSPI.beginTransaction (mSPISettings)
|———————Node:field_expression Text: mSPI.beginTransaction
|————————Node:identifier Text: mSPI
|————————Node:. Text: .
|————————Node:field_identifier Text: beginTransaction
|———————Node:argument_list Text: (mSPISettings)
|————————Node:( Text: (
|————————Node:identifier Text: mSPISettings
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: select () ;
|——————Node:call_expression Text: select ()
|———————Node:identifier Text: select
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: mSPI.transfer (RESET_COMMAND) ;
|——————Node:call_expression Text: mSPI.transfer (RESET_COMMAND)
|———————Node:field_expression Text: mSPI.transfer
|————————Node:identifier Text: mSPI
|————————Node:. Text: .
|————————Node:field_identifier Text: transfer
|———————Node:argument_list Text: (RESET_COMMAND)
|————————Node:( Text: (
|————————Node:identifier Text: RESET_COMMAND
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: unselect () ;
|——————Node:call_expression Text: unselect ()
|———————Node:identifier Text: unselect
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: mSPI.endTransaction () ;
|——————Node:call_expression Text: mSPI.endTransaction ()
|———————Node:field_expression Text: mSPI.endTransaction
|————————Node:identifier Text: mSPI
|————————Node:. Text: .
|————————Node:field_identifier Text: endTransaction
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment
|—————Node:expression_statement Text: delayMicroseconds (10) ;
|——————Node:call_expression Text: delayMicroseconds (10)
|———————Node:identifier Text: delayMicroseconds
|———————Node:argument_list Text: (10)
|————————Node:( Text: (
|————————Node:number_literal Text: 10
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment
|—————Node:expression_statement Text: errorCode = internalBeginOperation (inSettings, inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount) ;
|——————Node:assignment_expression Text: errorCode = internalBeginOperation (inSettings, inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount)
|———————Node:identifier Text: errorCode
|———————Node:= Text: =
|———————Node:call_expression Text: internalBeginOperation (inSettings, inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount)
|————————Node:identifier Text: internalBeginOperation
|————————Node:argument_list Text: (inSettings, inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount)
|—————————Node:( Text: (
|—————————Node:identifier Text: inSettings
|—————————Node:, Text: ,
|—————————Node:identifier Text: inRXM0
|—————————Node:, Text: ,
|—————————Node:identifier Text: inRXM1
|—————————Node:, Text: ,
|—————————Node:identifier Text: inAcceptanceFilters
|—————————Node:, Text: ,
|—————————Node:identifier Text: inAcceptanceFilterCount
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:if_statement Text: if (errorCode == 0) {
    #ifdef ARDUINO_ARCH_ESP32
      xTaskCreate (myESP32Task, "ACAN2515Handler", 1024, this, 256, NULL) ;
    #endif
    if (mINT != 255) { // 255 means interrupt is not used
      #ifdef ARDUINO_ARCH_ESP32
        attachInterrupt (itPin, inInterruptServiceRoutine, FALLING) ;
      #else
        mSPI.usingInterrupt (itPin) ; // usingInterrupt is not implemented in Arduino ESP32
        attachInterrupt (itPin, inInterruptServiceRoutine, LOW) ;
      #endif
    }
  }
|————Node:if Text: if
|————Node:condition_clause Text: (errorCode == 0)
|—————Node:( Text: (
|—————Node:binary_expression Text: errorCode == 0
|——————Node:identifier Text: errorCode
|——————Node:== Text: ==
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {
    #ifdef ARDUINO_ARCH_ESP32
      xTaskCreate (myESP32Task, "ACAN2515Handler", 1024, this, 256, NULL) ;
    #endif
    if (mINT != 255) { // 255 means interrupt is not used
      #ifdef ARDUINO_ARCH_ESP32
        attachInterrupt (itPin, inInterruptServiceRoutine, FALLING) ;
      #else
        mSPI.usingInterrupt (itPin) ; // usingInterrupt is not implemented in Arduino ESP32
        attachInterrupt (itPin, inInterruptServiceRoutine, LOW) ;
      #endif
    }
  }
|—————Node:{ Text: {
|—————Node:preproc_ifdef Text: #ifdef ARDUINO_ARCH_ESP32
      xTaskCreate (myESP32Task, "ACAN2515Handler", 1024, this, 256, NULL) ;
    #endif
|——————Node:#ifdef Text: #ifdef
|——————Node:identifier Text: ARDUINO_ARCH_ESP32
|——————Node:expression_statement Text: xTaskCreate (myESP32Task, "ACAN2515Handler", 1024, this, 256, NULL) ;
|———————Node:call_expression Text: xTaskCreate (myESP32Task, "ACAN2515Handler", 1024, this, 256, NULL)
|————————Node:identifier Text: xTaskCreate
|————————Node:argument_list Text: (myESP32Task, "ACAN2515Handler", 1024, this, 256, NULL)
|—————————Node:( Text: (
|—————————Node:identifier Text: myESP32Task
|—————————Node:, Text: ,
|—————————Node:string_literal Text: "ACAN2515Handler"
|——————————Node:" Text: "
|——————————Node:string_content Text: ACAN2515Handler
|——————————Node:" Text: "
|—————————Node:, Text: ,
|—————————Node:number_literal Text: 1024
|—————————Node:, Text: ,
|—————————Node:this Text: this
|—————————Node:, Text: ,
|—————————Node:number_literal Text: 256
|—————————Node:, Text: ,
|—————————Node:null Text: NULL
|——————————Node:NULL Text: NULL
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:#endif Text: #endif
|—————Node:if_statement Text: if (mINT != 255) { // 255 means interrupt is not used
      #ifdef ARDUINO_ARCH_ESP32
        attachInterrupt (itPin, inInterruptServiceRoutine, FALLING) ;
      #else
        mSPI.usingInterrupt (itPin) ; // usingInterrupt is not implemented in Arduino ESP32
        attachInterrupt (itPin, inInterruptServiceRoutine, LOW) ;
      #endif
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: (mINT != 255)
|———————Node:( Text: (
|———————Node:binary_expression Text: mINT != 255
|————————Node:identifier Text: mINT
|————————Node:!= Text: !=
|————————Node:number_literal Text: 255
|———————Node:) Text: )
|——————Node:compound_statement Text: { // 255 means interrupt is not used
      #ifdef ARDUINO_ARCH_ESP32
        attachInterrupt (itPin, inInterruptServiceRoutine, FALLING) ;
      #else
        mSPI.usingInterrupt (itPin) ; // usingInterrupt is not implemented in Arduino ESP32
        attachInterrupt (itPin, inInterruptServiceRoutine, LOW) ;
      #endif
    }
|———————Node:{ Text: {
|———————Node:comment
|———————Node:preproc_ifdef Text: #ifdef ARDUINO_ARCH_ESP32
        attachInterrupt (itPin, inInterruptServiceRoutine, FALLING) ;
      #else
        mSPI.usingInterrupt (itPin) ; // usingInterrupt is not implemented in Arduino ESP32
        attachInterrupt (itPin, inInterruptServiceRoutine, LOW) ;
      #endif
|————————Node:#ifdef Text: #ifdef
|————————Node:identifier Text: ARDUINO_ARCH_ESP32
|————————Node:expression_statement Text: attachInterrupt (itPin, inInterruptServiceRoutine, FALLING) ;
|—————————Node:call_expression Text: attachInterrupt (itPin, inInterruptServiceRoutine, FALLING)
|——————————Node:identifier Text: attachInterrupt
|——————————Node:argument_list Text: (itPin, inInterruptServiceRoutine, FALLING)
|———————————Node:( Text: (
|———————————Node:identifier Text: itPin
|———————————Node:, Text: ,
|———————————Node:identifier Text: inInterruptServiceRoutine
|———————————Node:, Text: ,
|———————————Node:identifier Text: FALLING
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:preproc_else Text: #else
        mSPI.usingInterrupt (itPin) ; // usingInterrupt is not implemented in Arduino ESP32
        attachInterrupt (itPin, inInterruptServiceRoutine, LOW) ;
|—————————Node:#else Text: #else
|—————————Node:expression_statement Text: mSPI.usingInterrupt (itPin) ;
|——————————Node:call_expression Text: mSPI.usingInterrupt (itPin)
|———————————Node:field_expression Text: mSPI.usingInterrupt
|————————————Node:identifier Text: mSPI
|————————————Node:. Text: .
|————————————Node:field_identifier Text: usingInterrupt
|———————————Node:argument_list Text: (itPin)
|————————————Node:( Text: (
|————————————Node:identifier Text: itPin
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:comment
|—————————Node:expression_statement Text: attachInterrupt (itPin, inInterruptServiceRoutine, LOW) ;
|——————————Node:call_expression Text: attachInterrupt (itPin, inInterruptServiceRoutine, LOW)
|———————————Node:identifier Text: attachInterrupt
|———————————Node:argument_list Text: (itPin, inInterruptServiceRoutine, LOW)
|————————————Node:( Text: (
|————————————Node:identifier Text: itPin
|————————————Node:, Text: ,
|————————————Node:identifier Text: inInterruptServiceRoutine
|————————————Node:, Text: ,
|————————————Node:identifier Text: LOW
|————————————Node:) Text: )
|——————————Node:; Text: ;
|————————Node:#endif Text: #endif
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:comment
|———Node:return_statement Text: return errorCode ;
|————Node:return Text: return
|————Node:identifier Text: errorCode
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:function_definition Text: bool ACAN2515::available (void) {
  #ifdef ARDUINO_ARCH_ESP32
    mSPI.beginTransaction (mSPISettings) ; // For ensuring mutual exclusion access
  #else
    noInterrupts () ;
  #endif
    const bool hasReceivedMessage = mReceiveBuffer.count () > 0 ;
  #ifdef ARDUINO_ARCH_ESP32
    mSPI.endTransaction () ;
  #else
    interrupts () ;
  #endif
  return hasReceivedMessage ;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: ACAN2515::available (void)
|———Node:qualified_identifier Text: ACAN2515::available
|————Node:namespace_identifier Text: ACAN2515
|————Node::: Text: ::
|————Node:identifier Text: available
|———Node:parameter_list Text: (void)
|————Node:( Text: (
|————Node:parameter_declaration Text: void
|—————Node:primitive_type Text: void
|————Node:) Text: )
|——Node:compound_statement Text: {
  #ifdef ARDUINO_ARCH_ESP32
    mSPI.beginTransaction (mSPISettings) ; // For ensuring mutual exclusion access
  #else
    noInterrupts () ;
  #endif
    const bool hasReceivedMessage = mReceiveBuffer.count () > 0 ;
  #ifdef ARDUINO_ARCH_ESP32
    mSPI.endTransaction () ;
  #else
    interrupts () ;
  #endif
  return hasReceivedMessage ;
}
|———Node:{ Text: {
|———Node:preproc_ifdef Text: #ifdef ARDUINO_ARCH_ESP32
    mSPI.beginTransaction (mSPISettings) ; // For ensuring mutual exclusion access
  #else
    noInterrupts () ;
  #endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: ARDUINO_ARCH_ESP32
|————Node:expression_statement Text: mSPI.beginTransaction (mSPISettings) ;
|—————Node:call_expression Text: mSPI.beginTransaction (mSPISettings)
|——————Node:field_expression Text: mSPI.beginTransaction
|———————Node:identifier Text: mSPI
|———————Node:. Text: .
|———————Node:field_identifier Text: beginTransaction
|——————Node:argument_list Text: (mSPISettings)
|———————Node:( Text: (
|———————Node:identifier Text: mSPISettings
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:comment
|————Node:preproc_else Text: #else
    noInterrupts () ;
|—————Node:#else Text: #else
|—————Node:expression_statement Text: noInterrupts () ;
|——————Node:call_expression Text: noInterrupts ()
|———————Node:identifier Text: noInterrupts
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:declaration Text: const bool hasReceivedMessage = mReceiveBuffer.count () > 0 ;
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: bool
|————Node:init_declarator Text: hasReceivedMessage = mReceiveBuffer.count () > 0
|—————Node:identifier Text: hasReceivedMessage
|—————Node:= Text: =
|—————Node:binary_expression Text: mReceiveBuffer.count () > 0
|——————Node:call_expression Text: mReceiveBuffer.count ()
|———————Node:field_expression Text: mReceiveBuffer.count
|————————Node:identifier Text: mReceiveBuffer
|————————Node:. Text: .
|————————Node:field_identifier Text: count
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:> Text: >
|——————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef ARDUINO_ARCH_ESP32
    mSPI.endTransaction () ;
  #else
    interrupts () ;
  #endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: ARDUINO_ARCH_ESP32
|————Node:expression_statement Text: mSPI.endTransaction () ;
|—————Node:call_expression Text: mSPI.endTransaction ()
|——————Node:field_expression Text: mSPI.endTransaction
|———————Node:identifier Text: mSPI
|———————Node:. Text: .
|———————Node:field_identifier Text: endTransaction
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:preproc_else Text: #else
    interrupts () ;
|—————Node:#else Text: #else
|—————Node:expression_statement Text: interrupts () ;
|——————Node:call_expression Text: interrupts ()
|———————Node:identifier Text: interrupts
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:return_statement Text: return hasReceivedMessage ;
|————Node:return Text: return
|————Node:identifier Text: hasReceivedMessage
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: bool ACAN2515::receive (CANMessage & outMessage) {
  #ifdef ARDUINO_ARCH_ESP32
    mSPI.beginTransaction (mSPISettings) ; // For ensuring mutual exclusion access
  #else
    noInterrupts () ;
  #endif
    const bool hasReceivedMessage = mReceiveBuffer.remove (outMessage) ;
  #ifdef ARDUINO_ARCH_ESP32
    mSPI.endTransaction () ;
  #else
    interrupts () ;
  #endif
//---
  return hasReceivedMessage ;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: ACAN2515::receive (CANMessage & outMessage)
|———Node:qualified_identifier Text: ACAN2515::receive
|————Node:namespace_identifier Text: ACAN2515
|————Node::: Text: ::
|————Node:identifier Text: receive
|———Node:parameter_list Text: (CANMessage & outMessage)
|————Node:( Text: (
|————Node:parameter_declaration Text: CANMessage & outMessage
|—————Node:type_identifier Text: CANMessage
|—————Node:reference_declarator Text: & outMessage
|——————Node:& Text: &
|——————Node:identifier Text: outMessage
|————Node:) Text: )
|——Node:compound_statement Text: {
  #ifdef ARDUINO_ARCH_ESP32
    mSPI.beginTransaction (mSPISettings) ; // For ensuring mutual exclusion access
  #else
    noInterrupts () ;
  #endif
    const bool hasReceivedMessage = mReceiveBuffer.remove (outMessage) ;
  #ifdef ARDUINO_ARCH_ESP32
    mSPI.endTransaction () ;
  #else
    interrupts () ;
  #endif
//---
  return hasReceivedMessage ;
}
|———Node:{ Text: {
|———Node:preproc_ifdef Text: #ifdef ARDUINO_ARCH_ESP32
    mSPI.beginTransaction (mSPISettings) ; // For ensuring mutual exclusion access
  #else
    noInterrupts () ;
  #endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: ARDUINO_ARCH_ESP32
|————Node:expression_statement Text: mSPI.beginTransaction (mSPISettings) ;
|—————Node:call_expression Text: mSPI.beginTransaction (mSPISettings)
|——————Node:field_expression Text: mSPI.beginTransaction
|———————Node:identifier Text: mSPI
|———————Node:. Text: .
|———————Node:field_identifier Text: beginTransaction
|——————Node:argument_list Text: (mSPISettings)
|———————Node:( Text: (
|———————Node:identifier Text: mSPISettings
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:comment
|————Node:preproc_else Text: #else
    noInterrupts () ;
|—————Node:#else Text: #else
|—————Node:expression_statement Text: noInterrupts () ;
|——————Node:call_expression Text: noInterrupts ()
|———————Node:identifier Text: noInterrupts
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:declaration Text: const bool hasReceivedMessage = mReceiveBuffer.remove (outMessage) ;
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: bool
|————Node:init_declarator Text: hasReceivedMessage = mReceiveBuffer.remove (outMessage)
|—————Node:identifier Text: hasReceivedMessage
|—————Node:= Text: =
|—————Node:call_expression Text: mReceiveBuffer.remove (outMessage)
|——————Node:field_expression Text: mReceiveBuffer.remove
|———————Node:identifier Text: mReceiveBuffer
|———————Node:. Text: .
|———————Node:field_identifier Text: remove
|——————Node:argument_list Text: (outMessage)
|———————Node:( Text: (
|———————Node:identifier Text: outMessage
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef ARDUINO_ARCH_ESP32
    mSPI.endTransaction () ;
  #else
    interrupts () ;
  #endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: ARDUINO_ARCH_ESP32
|————Node:expression_statement Text: mSPI.endTransaction () ;
|—————Node:call_expression Text: mSPI.endTransaction ()
|——————Node:field_expression Text: mSPI.endTransaction
|———————Node:identifier Text: mSPI
|———————Node:. Text: .
|———————Node:field_identifier Text: endTransaction
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:preproc_else Text: #else
    interrupts () ;
|—————Node:#else Text: #else
|—————Node:expression_statement Text: interrupts () ;
|——————Node:call_expression Text: interrupts ()
|———————Node:identifier Text: interrupts
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:comment
|———Node:return_statement Text: return hasReceivedMessage ;
|————Node:return Text: return
|————Node:identifier Text: hasReceivedMessage
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: bool ACAN2515::dispatchReceivedMessage (const tFilterMatchCallBack inFilterMatchCallBack) {
  CANMessage receivedMessage ;
  const bool hasReceived = receive (receivedMessage) ;
  if (hasReceived) {
    const uint8_t filterIndex = receivedMessage.idx ;
    if (NULL != inFilterMatchCallBack) {
      inFilterMatchCallBack (filterIndex) ;
    }
    ACANCallBackRoutine callBackFunction = mCallBackFunctionArray [filterIndex] ;
    if (NULL != callBackFunction) {
      callBackFunction (receivedMessage) ;
    }
  }
  return hasReceived ;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: ACAN2515::dispatchReceivedMessage (const tFilterMatchCallBack inFilterMatchCallBack)
|———Node:qualified_identifier Text: ACAN2515::dispatchReceivedMessage
|————Node:namespace_identifier Text: ACAN2515
|————Node::: Text: ::
|————Node:identifier Text: dispatchReceivedMessage
|———Node:parameter_list Text: (const tFilterMatchCallBack inFilterMatchCallBack)
|————Node:( Text: (
|————Node:parameter_declaration Text: const tFilterMatchCallBack inFilterMatchCallBack
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: tFilterMatchCallBack
|—————Node:identifier Text: inFilterMatchCallBack
|————Node:) Text: )
|——Node:compound_statement Text: {
  CANMessage receivedMessage ;
  const bool hasReceived = receive (receivedMessage) ;
  if (hasReceived) {
    const uint8_t filterIndex = receivedMessage.idx ;
    if (NULL != inFilterMatchCallBack) {
      inFilterMatchCallBack (filterIndex) ;
    }
    ACANCallBackRoutine callBackFunction = mCallBackFunctionArray [filterIndex] ;
    if (NULL != callBackFunction) {
      callBackFunction (receivedMessage) ;
    }
  }
  return hasReceived ;
}
|———Node:{ Text: {
|———Node:declaration Text: CANMessage receivedMessage ;
|————Node:type_identifier Text: CANMessage
|————Node:identifier Text: receivedMessage
|————Node:; Text: ;
|———Node:declaration Text: const bool hasReceived = receive (receivedMessage) ;
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: bool
|————Node:init_declarator Text: hasReceived = receive (receivedMessage)
|—————Node:identifier Text: hasReceived
|—————Node:= Text: =
|—————Node:call_expression Text: receive (receivedMessage)
|——————Node:identifier Text: receive
|——————Node:argument_list Text: (receivedMessage)
|———————Node:( Text: (
|———————Node:identifier Text: receivedMessage
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (hasReceived) {
    const uint8_t filterIndex = receivedMessage.idx ;
    if (NULL != inFilterMatchCallBack) {
      inFilterMatchCallBack (filterIndex) ;
    }
    ACANCallBackRoutine callBackFunction = mCallBackFunctionArray [filterIndex] ;
    if (NULL != callBackFunction) {
      callBackFunction (receivedMessage) ;
    }
  }
|————Node:if Text: if
|————Node:condition_clause Text: (hasReceived)
|—————Node:( Text: (
|—————Node:identifier Text: hasReceived
|—————Node:) Text: )
|————Node:compound_statement Text: {
    const uint8_t filterIndex = receivedMessage.idx ;
    if (NULL != inFilterMatchCallBack) {
      inFilterMatchCallBack (filterIndex) ;
    }
    ACANCallBackRoutine callBackFunction = mCallBackFunctionArray [filterIndex] ;
    if (NULL != callBackFunction) {
      callBackFunction (receivedMessage) ;
    }
  }
|—————Node:{ Text: {
|—————Node:declaration Text: const uint8_t filterIndex = receivedMessage.idx ;
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:primitive_type Text: uint8_t
|——————Node:init_declarator Text: filterIndex = receivedMessage.idx
|———————Node:identifier Text: filterIndex
|———————Node:= Text: =
|———————Node:field_expression Text: receivedMessage.idx
|————————Node:identifier Text: receivedMessage
|————————Node:. Text: .
|————————Node:field_identifier Text: idx
|——————Node:; Text: ;
|—————Node:if_statement Text: if (NULL != inFilterMatchCallBack) {
      inFilterMatchCallBack (filterIndex) ;
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: (NULL != inFilterMatchCallBack)
|———————Node:( Text: (
|———————Node:binary_expression Text: NULL != inFilterMatchCallBack
|————————Node:null Text: NULL
|—————————Node:NULL Text: NULL
|————————Node:!= Text: !=
|————————Node:identifier Text: inFilterMatchCallBack
|———————Node:) Text: )
|——————Node:compound_statement Text: {
      inFilterMatchCallBack (filterIndex) ;
    }
|———————Node:{ Text: {
|———————Node:expression_statement Text: inFilterMatchCallBack (filterIndex) ;
|————————Node:call_expression Text: inFilterMatchCallBack (filterIndex)
|—————————Node:identifier Text: inFilterMatchCallBack
|—————————Node:argument_list Text: (filterIndex)
|——————————Node:( Text: (
|——————————Node:identifier Text: filterIndex
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:declaration Text: ACANCallBackRoutine callBackFunction = mCallBackFunctionArray [filterIndex] ;
|——————Node:type_identifier Text: ACANCallBackRoutine
|——————Node:init_declarator Text: callBackFunction = mCallBackFunctionArray [filterIndex]
|———————Node:identifier Text: callBackFunction
|———————Node:= Text: =
|———————Node:subscript_expression Text: mCallBackFunctionArray [filterIndex]
|————————Node:identifier Text: mCallBackFunctionArray
|————————Node:subscript_argument_list Text: [filterIndex]
|—————————Node:[ Text: [
|—————————Node:identifier Text: filterIndex
|—————————Node:] Text: ]
|——————Node:; Text: ;
|—————Node:if_statement Text: if (NULL != callBackFunction) {
      callBackFunction (receivedMessage) ;
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: (NULL != callBackFunction)
|———————Node:( Text: (
|———————Node:binary_expression Text: NULL != callBackFunction
|————————Node:null Text: NULL
|—————————Node:NULL Text: NULL
|————————Node:!= Text: !=
|————————Node:identifier Text: callBackFunction
|———————Node:) Text: )
|——————Node:compound_statement Text: {
      callBackFunction (receivedMessage) ;
    }
|———————Node:{ Text: {
|———————Node:expression_statement Text: callBackFunction (receivedMessage) ;
|————————Node:call_expression Text: callBackFunction (receivedMessage)
|—————————Node:identifier Text: callBackFunction
|—————————Node:argument_list Text: (receivedMessage)
|——————————Node:( Text: (
|——————————Node:identifier Text: receivedMessage
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:return_statement Text: return hasReceived ;
|————Node:return Text: return
|————Node:identifier Text: hasReceived
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:function_definition Text: uint16_t ACAN2515::internalBeginOperation (const ACAN2515Settings & inSettings,
                                           const ACAN2515Mask inRXM0,
                                           const ACAN2515Mask inRXM1,
                                           const ACAN2515AcceptanceFilter inAcceptanceFilters [],
                                           const uint8_t inAcceptanceFilterCount) {
  uint16_t errorCode = 0 ; // Ok be default
//----------------------------------- Check if MCP2515 is accessible
  mSPI.beginTransaction (mSPISettings) ;
    write2515Register (CNF1_REGISTER, 0x55) ;
    bool ok = read2515Register (CNF1_REGISTER) == 0x55 ;
    if (ok) {
      write2515Register (CNF1_REGISTER, 0xAA) ;
      ok = read2515Register (CNF1_REGISTER) == 0xAA ;
    }
    if (!ok) {
      errorCode = kNoMCP2515 ;
    }
  mSPI.endTransaction () ;
//----------------------------------- Check if settings are correct
  if (!inSettings.mBitRateClosedToDesiredRate) {
    errorCode |= kTooFarFromDesiredBitRate ;
  }
  if (inSettings.CANBitSettingConsistency () != 0) {
    errorCode |= kInconsistentBitRateSettings ;
  }
//----------------------------------- Allocate buffer
  if (!mReceiveBuffer.initWithSize (inSettings.mReceiveBufferSize)) {
    errorCode |= kCannotAllocateReceiveBuffer ;
  }
  if (!mTransmitBuffer [0].initWithSize (inSettings.mTransmitBuffer0Size)) {
    errorCode |= kCannotAllocateTransmitBuffer0 ;
  }
  if (!mTransmitBuffer [1].initWithSize (inSettings.mTransmitBuffer1Size)) {
    errorCode |= kCannotAllocateTransmitBuffer1 ;
  }
  if (!mTransmitBuffer [2].initWithSize (inSettings.mTransmitBuffer2Size)) {
    errorCode |= kCannotAllocateTransmitBuffer2 ;
  }
  mTXBIsFree [0] = true ;
  mTXBIsFree [1] = true ;
  mTXBIsFree [2] = true ;
//----------------------------------- If ok, perform configuration
  if (errorCode == 0) {
    mSPI.beginTransaction (mSPISettings) ;
  //----------------------------------- Set CNF3, CNF2, CNF1 and CANINTE registers
    select () ;
    mSPI.transfer (WRITE_COMMAND) ;
    mSPI.transfer (CNF3_REGISTER) ;
  //--- Register CNF3:
  //  Bit 7: SOF
  //  bit 6 --> 0: No Wake-up Filter bit
  //  Bit 5-3: -
  //  Bit 2-0: PHSEG2 - 1
    const uint8_t cnf3 =
      ((inSettings.mCLKOUT_SOF_pin == ACAN2515Settings::SOF) << 6) /* SOF */ |
      ((inSettings.mPhaseSegment2 - 1) << 0) /* PHSEG2 */
    ;
   mSPI.transfer (cnf3) ;
  //--- Register CNF2:
  //  Bit 7 --> 1: BLTMODE
  //  bit 6: SAM
  //  Bit 5-3: PHSEG1 - 1
  //  Bit 2-0: PRSEG - 1
    const uint8_t cnf2 =
      0x80 /* BLTMODE */ |
      (inSettings.mTripleSampling << 6) /* SAM */ |
      ((inSettings.mPhaseSegment1 - 1) << 3) /* PHSEG1 */ |
      ((inSettings.mPropagationSegment - 1) << 0) /* PRSEG */
    ;
    mSPI.transfer (cnf2) ;
  //--- Register CNF1:
  //  Bit 7-6: SJW - 1
  //  Bit 5-0: BRP - 1
    const uint8_t cnf1 =
      ((inSettings.mSJW - 1) << 6) /* SJW */ | // Incorrect SJW setting fixed in 2.0.1
      ((inSettings.mBitRatePrescaler - 1) << 0) /* BRP */
    ;
    mSPI.transfer (cnf1) ;
  //--- Register CANINTE: activate interrupts
  //  Bit 7 --> 0: MERRE
  //  Bit 6 --> 0: WAKIE
  //  Bit 5 --> 0: ERRIE
  //  Bit 4 --> 1: TX2IE
  //  Bit 3 --> 1: TX1IE
  //  Bit 2 --> 1: TX0IE
  //  Bit 1 --> 1: RX1IE
  //  Bit 0 --> 1: RX0IE
    mSPI.transfer (0x1F) ;
    unselect () ;
  //----------------------------------- Deactivate the RXnBF Pins (High Impedance State)
    write2515Register (BFPCTRL_REGISTER, 0) ;
  //----------------------------------- Set TXnRTS as inputs
    write2515Register (TXRTSCTRL_REGISTER, 0);
  //----------------------------------- RXBnCTRL
    mRolloverEnable = inSettings.mRolloverEnable ;
    const uint8_t acceptAll = (inAcceptanceFilterCount == 0) ? 0x60 : 0x00 ;
    write2515Register (RXB0CTRL_REGISTER, acceptAll | (uint8_t (inSettings.mRolloverEnable) << 2)) ;
    write2515Register (RXB1CTRL_REGISTER, acceptAll) ;
  //----------------------------------- Setup mask registers
    setupMaskRegister (inRXM0, RXM0SIDH_REGISTER) ;
    setupMaskRegister (inRXM1, RXM1SIDH_REGISTER) ;
    if (inAcceptanceFilterCount > 0) {
      uint8_t idx = 0 ;
      while (idx < inAcceptanceFilterCount) {
        setupMaskRegister (inAcceptanceFilters [idx].mMask, RXFSIDH_REGISTER [idx]) ;
        mCallBackFunctionArray [idx] = inAcceptanceFilters [idx].mCallBack ;
        idx += 1 ;
      }
      while (idx < 6) {
        setupMaskRegister (inAcceptanceFilters [inAcceptanceFilterCount-1].mMask, RXFSIDH_REGISTER [idx]) ;
        mCallBackFunctionArray [idx] = inAcceptanceFilters [inAcceptanceFilterCount-1].mCallBack ;
        idx += 1 ;
      }
//     }else{
//       for (int i=0 ; i<6 ; i++) {
//         setupMaskRegister (ACAN2515Mask (), RXFSIDH_REGISTER [i]) ;
//       }
    }
  //----------------------------------- Set TXBi priorities
    write2515Register (TXB0CTRL_REGISTER, inSettings.mTXBPriority & 3) ;
    write2515Register (TXB1CTRL_REGISTER, (inSettings.mTXBPriority >> 2) & 3) ;
    write2515Register (TXB2CTRL_REGISTER, (inSettings.mTXBPriority >> 4) & 3) ;
    mSPI.endTransaction () ;
  //----------------------------------- Reset device to requested mode
    uint8_t canctrl = inSettings.mOneShotModeEnabled ? (1 << 3) : 0 ;
    switch (inSettings.mCLKOUT_SOF_pin) {
    case ACAN2515Settings::CLOCK :
      canctrl |= 0x04 | 0x00 ; // Same as default setting
      break ;
    case ACAN2515Settings::CLOCK2 :
      canctrl |= 0x04 | 0x01 ;
      break ;
    case ACAN2515Settings::CLOCK4 :
      canctrl |= 0x04 | 0x02 ;
      break ;
    case ACAN2515Settings::CLOCK8 :
      canctrl |= 0x04 | 0x03 ;
      break ;
    case ACAN2515Settings::SOF :
      canctrl |= 0x04 ;
      break ;
    case ACAN2515Settings::HiZ :
      break ;
    }
  //--- Request mode
    const uint8_t requestedMode = (uint8_t) inSettings.mRequestedMode ;
    errorCode |= setRequestedMode (canctrl | requestedMode) ;
  }
//-----------------------------------
  return errorCode ;
}
|——Node:primitive_type Text: uint16_t
|——Node:function_declarator Text: ACAN2515::internalBeginOperation (const ACAN2515Settings & inSettings,
                                           const ACAN2515Mask inRXM0,
                                           const ACAN2515Mask inRXM1,
                                           const ACAN2515AcceptanceFilter inAcceptanceFilters [],
                                           const uint8_t inAcceptanceFilterCount)
|———Node:qualified_identifier Text: ACAN2515::internalBeginOperation
|————Node:namespace_identifier Text: ACAN2515
|————Node::: Text: ::
|————Node:identifier Text: internalBeginOperation
|———Node:parameter_list Text: (const ACAN2515Settings & inSettings,
                                           const ACAN2515Mask inRXM0,
                                           const ACAN2515Mask inRXM1,
                                           const ACAN2515AcceptanceFilter inAcceptanceFilters [],
                                           const uint8_t inAcceptanceFilterCount)
|————Node:( Text: (
|————Node:parameter_declaration Text: const ACAN2515Settings & inSettings
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: ACAN2515Settings
|—————Node:reference_declarator Text: & inSettings
|——————Node:& Text: &
|——————Node:identifier Text: inSettings
|————Node:, Text: ,
|————Node:parameter_declaration Text: const ACAN2515Mask inRXM0
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: ACAN2515Mask
|—————Node:identifier Text: inRXM0
|————Node:, Text: ,
|————Node:parameter_declaration Text: const ACAN2515Mask inRXM1
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: ACAN2515Mask
|—————Node:identifier Text: inRXM1
|————Node:, Text: ,
|————Node:parameter_declaration Text: const ACAN2515AcceptanceFilter inAcceptanceFilters []
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: ACAN2515AcceptanceFilter
|—————Node:array_declarator Text: inAcceptanceFilters []
|——————Node:identifier Text: inAcceptanceFilters
|——————Node:[ Text: [
|——————Node:] Text: ]
|————Node:, Text: ,
|————Node:parameter_declaration Text: const uint8_t inAcceptanceFilterCount
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: inAcceptanceFilterCount
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint16_t errorCode = 0 ; // Ok be default
//----------------------------------- Check if MCP2515 is accessible
  mSPI.beginTransaction (mSPISettings) ;
    write2515Register (CNF1_REGISTER, 0x55) ;
    bool ok = read2515Register (CNF1_REGISTER) == 0x55 ;
    if (ok) {
      write2515Register (CNF1_REGISTER, 0xAA) ;
      ok = read2515Register (CNF1_REGISTER) == 0xAA ;
    }
    if (!ok) {
      errorCode = kNoMCP2515 ;
    }
  mSPI.endTransaction () ;
//----------------------------------- Check if settings are correct
  if (!inSettings.mBitRateClosedToDesiredRate) {
    errorCode |= kTooFarFromDesiredBitRate ;
  }
  if (inSettings.CANBitSettingConsistency () != 0) {
    errorCode |= kInconsistentBitRateSettings ;
  }
//----------------------------------- Allocate buffer
  if (!mReceiveBuffer.initWithSize (inSettings.mReceiveBufferSize)) {
    errorCode |= kCannotAllocateReceiveBuffer ;
  }
  if (!mTransmitBuffer [0].initWithSize (inSettings.mTransmitBuffer0Size)) {
    errorCode |= kCannotAllocateTransmitBuffer0 ;
  }
  if (!mTransmitBuffer [1].initWithSize (inSettings.mTransmitBuffer1Size)) {
    errorCode |= kCannotAllocateTransmitBuffer1 ;
  }
  if (!mTransmitBuffer [2].initWithSize (inSettings.mTransmitBuffer2Size)) {
    errorCode |= kCannotAllocateTransmitBuffer2 ;
  }
  mTXBIsFree [0] = true ;
  mTXBIsFree [1] = true ;
  mTXBIsFree [2] = true ;
//----------------------------------- If ok, perform configuration
  if (errorCode == 0) {
    mSPI.beginTransaction (mSPISettings) ;
  //----------------------------------- Set CNF3, CNF2, CNF1 and CANINTE registers
    select () ;
    mSPI.transfer (WRITE_COMMAND) ;
    mSPI.transfer (CNF3_REGISTER) ;
  //--- Register CNF3:
  //  Bit 7: SOF
  //  bit 6 --> 0: No Wake-up Filter bit
  //  Bit 5-3: -
  //  Bit 2-0: PHSEG2 - 1
    const uint8_t cnf3 =
      ((inSettings.mCLKOUT_SOF_pin == ACAN2515Settings::SOF) << 6) /* SOF */ |
      ((inSettings.mPhaseSegment2 - 1) << 0) /* PHSEG2 */
    ;
   mSPI.transfer (cnf3) ;
  //--- Register CNF2:
  //  Bit 7 --> 1: BLTMODE
  //  bit 6: SAM
  //  Bit 5-3: PHSEG1 - 1
  //  Bit 2-0: PRSEG - 1
    const uint8_t cnf2 =
      0x80 /* BLTMODE */ |
      (inSettings.mTripleSampling << 6) /* SAM */ |
      ((inSettings.mPhaseSegment1 - 1) << 3) /* PHSEG1 */ |
      ((inSettings.mPropagationSegment - 1) << 0) /* PRSEG */
    ;
    mSPI.transfer (cnf2) ;
  //--- Register CNF1:
  //  Bit 7-6: SJW - 1
  //  Bit 5-0: BRP - 1
    const uint8_t cnf1 =
      ((inSettings.mSJW - 1) << 6) /* SJW */ | // Incorrect SJW setting fixed in 2.0.1
      ((inSettings.mBitRatePrescaler - 1) << 0) /* BRP */
    ;
    mSPI.transfer (cnf1) ;
  //--- Register CANINTE: activate interrupts
  //  Bit 7 --> 0: MERRE
  //  Bit 6 --> 0: WAKIE
  //  Bit 5 --> 0: ERRIE
  //  Bit 4 --> 1: TX2IE
  //  Bit 3 --> 1: TX1IE
  //  Bit 2 --> 1: TX0IE
  //  Bit 1 --> 1: RX1IE
  //  Bit 0 --> 1: RX0IE
    mSPI.transfer (0x1F) ;
    unselect () ;
  //----------------------------------- Deactivate the RXnBF Pins (High Impedance State)
    write2515Register (BFPCTRL_REGISTER, 0) ;
  //----------------------------------- Set TXnRTS as inputs
    write2515Register (TXRTSCTRL_REGISTER, 0);
  //----------------------------------- RXBnCTRL
    mRolloverEnable = inSettings.mRolloverEnable ;
    const uint8_t acceptAll = (inAcceptanceFilterCount == 0) ? 0x60 : 0x00 ;
    write2515Register (RXB0CTRL_REGISTER, acceptAll | (uint8_t (inSettings.mRolloverEnable) << 2)) ;
    write2515Register (RXB1CTRL_REGISTER, acceptAll) ;
  //----------------------------------- Setup mask registers
    setupMaskRegister (inRXM0, RXM0SIDH_REGISTER) ;
    setupMaskRegister (inRXM1, RXM1SIDH_REGISTER) ;
    if (inAcceptanceFilterCount > 0) {
      uint8_t idx = 0 ;
      while (idx < inAcceptanceFilterCount) {
        setupMaskRegister (inAcceptanceFilters [idx].mMask, RXFSIDH_REGISTER [idx]) ;
        mCallBackFunctionArray [idx] = inAcceptanceFilters [idx].mCallBack ;
        idx += 1 ;
      }
      while (idx < 6) {
        setupMaskRegister (inAcceptanceFilters [inAcceptanceFilterCount-1].mMask, RXFSIDH_REGISTER [idx]) ;
        mCallBackFunctionArray [idx] = inAcceptanceFilters [inAcceptanceFilterCount-1].mCallBack ;
        idx += 1 ;
      }
//     }else{
//       for (int i=0 ; i<6 ; i++) {
//         setupMaskRegister (ACAN2515Mask (), RXFSIDH_REGISTER [i]) ;
//       }
    }
  //----------------------------------- Set TXBi priorities
    write2515Register (TXB0CTRL_REGISTER, inSettings.mTXBPriority & 3) ;
    write2515Register (TXB1CTRL_REGISTER, (inSettings.mTXBPriority >> 2) & 3) ;
    write2515Register (TXB2CTRL_REGISTER, (inSettings.mTXBPriority >> 4) & 3) ;
    mSPI.endTransaction () ;
  //----------------------------------- Reset device to requested mode
    uint8_t canctrl = inSettings.mOneShotModeEnabled ? (1 << 3) : 0 ;
    switch (inSettings.mCLKOUT_SOF_pin) {
    case ACAN2515Settings::CLOCK :
      canctrl |= 0x04 | 0x00 ; // Same as default setting
      break ;
    case ACAN2515Settings::CLOCK2 :
      canctrl |= 0x04 | 0x01 ;
      break ;
    case ACAN2515Settings::CLOCK4 :
      canctrl |= 0x04 | 0x02 ;
      break ;
    case ACAN2515Settings::CLOCK8 :
      canctrl |= 0x04 | 0x03 ;
      break ;
    case ACAN2515Settings::SOF :
      canctrl |= 0x04 ;
      break ;
    case ACAN2515Settings::HiZ :
      break ;
    }
  //--- Request mode
    const uint8_t requestedMode = (uint8_t) inSettings.mRequestedMode ;
    errorCode |= setRequestedMode (canctrl | requestedMode) ;
  }
//-----------------------------------
  return errorCode ;
}
|———Node:{ Text: {
|———Node:declaration Text: uint16_t errorCode = 0 ;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: errorCode = 0
|—————Node:identifier Text: errorCode
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:comment
|———Node:expression_statement Text: mSPI.beginTransaction (mSPISettings) ;
|————Node:call_expression Text: mSPI.beginTransaction (mSPISettings)
|—————Node:field_expression Text: mSPI.beginTransaction
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: beginTransaction
|—————Node:argument_list Text: (mSPISettings)
|——————Node:( Text: (
|——————Node:identifier Text: mSPISettings
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: write2515Register (CNF1_REGISTER, 0x55) ;
|————Node:call_expression Text: write2515Register (CNF1_REGISTER, 0x55)
|—————Node:identifier Text: write2515Register
|—————Node:argument_list Text: (CNF1_REGISTER, 0x55)
|——————Node:( Text: (
|——————Node:identifier Text: CNF1_REGISTER
|——————Node:, Text: ,
|——————Node:number_literal Text: 0x55
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: bool ok = read2515Register (CNF1_REGISTER) == 0x55 ;
|————Node:primitive_type Text: bool
|————Node:init_declarator Text: ok = read2515Register (CNF1_REGISTER) == 0x55
|—————Node:identifier Text: ok
|—————Node:= Text: =
|—————Node:binary_expression Text: read2515Register (CNF1_REGISTER) == 0x55
|——————Node:call_expression Text: read2515Register (CNF1_REGISTER)
|———————Node:identifier Text: read2515Register
|———————Node:argument_list Text: (CNF1_REGISTER)
|————————Node:( Text: (
|————————Node:identifier Text: CNF1_REGISTER
|————————Node:) Text: )
|——————Node:== Text: ==
|——————Node:number_literal Text: 0x55
|————Node:; Text: ;
|———Node:if_statement Text: if (ok) {
      write2515Register (CNF1_REGISTER, 0xAA) ;
      ok = read2515Register (CNF1_REGISTER) == 0xAA ;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (ok)
|—————Node:( Text: (
|—————Node:identifier Text: ok
|—————Node:) Text: )
|————Node:compound_statement Text: {
      write2515Register (CNF1_REGISTER, 0xAA) ;
      ok = read2515Register (CNF1_REGISTER) == 0xAA ;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: write2515Register (CNF1_REGISTER, 0xAA) ;
|——————Node:call_expression Text: write2515Register (CNF1_REGISTER, 0xAA)
|———————Node:identifier Text: write2515Register
|———————Node:argument_list Text: (CNF1_REGISTER, 0xAA)
|————————Node:( Text: (
|————————Node:identifier Text: CNF1_REGISTER
|————————Node:, Text: ,
|————————Node:number_literal Text: 0xAA
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: ok = read2515Register (CNF1_REGISTER) == 0xAA ;
|——————Node:assignment_expression Text: ok = read2515Register (CNF1_REGISTER) == 0xAA
|———————Node:identifier Text: ok
|———————Node:= Text: =
|———————Node:binary_expression Text: read2515Register (CNF1_REGISTER) == 0xAA
|————————Node:call_expression Text: read2515Register (CNF1_REGISTER)
|—————————Node:identifier Text: read2515Register
|—————————Node:argument_list Text: (CNF1_REGISTER)
|——————————Node:( Text: (
|——————————Node:identifier Text: CNF1_REGISTER
|——————————Node:) Text: )
|————————Node:== Text: ==
|————————Node:number_literal Text: 0xAA
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:if_statement Text: if (!ok) {
      errorCode = kNoMCP2515 ;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (!ok)
|—————Node:( Text: (
|—————Node:unary_expression Text: !ok
|——————Node:! Text: !
|——————Node:identifier Text: ok
|—————Node:) Text: )
|————Node:compound_statement Text: {
      errorCode = kNoMCP2515 ;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: errorCode = kNoMCP2515 ;
|——————Node:assignment_expression Text: errorCode = kNoMCP2515
|———————Node:identifier Text: errorCode
|———————Node:= Text: =
|———————Node:identifier Text: kNoMCP2515
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: mSPI.endTransaction () ;
|————Node:call_expression Text: mSPI.endTransaction ()
|—————Node:field_expression Text: mSPI.endTransaction
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: endTransaction
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:if_statement Text: if (!inSettings.mBitRateClosedToDesiredRate) {
    errorCode |= kTooFarFromDesiredBitRate ;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (!inSettings.mBitRateClosedToDesiredRate)
|—————Node:( Text: (
|—————Node:unary_expression Text: !inSettings.mBitRateClosedToDesiredRate
|——————Node:! Text: !
|——————Node:field_expression Text: inSettings.mBitRateClosedToDesiredRate
|———————Node:identifier Text: inSettings
|———————Node:. Text: .
|———————Node:field_identifier Text: mBitRateClosedToDesiredRate
|—————Node:) Text: )
|————Node:compound_statement Text: {
    errorCode |= kTooFarFromDesiredBitRate ;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: errorCode |= kTooFarFromDesiredBitRate ;
|——————Node:assignment_expression Text: errorCode |= kTooFarFromDesiredBitRate
|———————Node:identifier Text: errorCode
|———————Node:|= Text: |=
|———————Node:identifier Text: kTooFarFromDesiredBitRate
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:if_statement Text: if (inSettings.CANBitSettingConsistency () != 0) {
    errorCode |= kInconsistentBitRateSettings ;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (inSettings.CANBitSettingConsistency () != 0)
|—————Node:( Text: (
|—————Node:binary_expression Text: inSettings.CANBitSettingConsistency () != 0
|——————Node:call_expression Text: inSettings.CANBitSettingConsistency ()
|———————Node:field_expression Text: inSettings.CANBitSettingConsistency
|————————Node:identifier Text: inSettings
|————————Node:. Text: .
|————————Node:field_identifier Text: CANBitSettingConsistency
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:!= Text: !=
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {
    errorCode |= kInconsistentBitRateSettings ;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: errorCode |= kInconsistentBitRateSettings ;
|——————Node:assignment_expression Text: errorCode |= kInconsistentBitRateSettings
|———————Node:identifier Text: errorCode
|———————Node:|= Text: |=
|———————Node:identifier Text: kInconsistentBitRateSettings
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:if_statement Text: if (!mReceiveBuffer.initWithSize (inSettings.mReceiveBufferSize)) {
    errorCode |= kCannotAllocateReceiveBuffer ;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (!mReceiveBuffer.initWithSize (inSettings.mReceiveBufferSize))
|—————Node:( Text: (
|—————Node:unary_expression Text: !mReceiveBuffer.initWithSize (inSettings.mReceiveBufferSize)
|——————Node:! Text: !
|——————Node:call_expression Text: mReceiveBuffer.initWithSize (inSettings.mReceiveBufferSize)
|———————Node:field_expression Text: mReceiveBuffer.initWithSize
|————————Node:identifier Text: mReceiveBuffer
|————————Node:. Text: .
|————————Node:field_identifier Text: initWithSize
|———————Node:argument_list Text: (inSettings.mReceiveBufferSize)
|————————Node:( Text: (
|————————Node:field_expression Text: inSettings.mReceiveBufferSize
|—————————Node:identifier Text: inSettings
|—————————Node:. Text: .
|—————————Node:field_identifier Text: mReceiveBufferSize
|————————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
    errorCode |= kCannotAllocateReceiveBuffer ;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: errorCode |= kCannotAllocateReceiveBuffer ;
|——————Node:assignment_expression Text: errorCode |= kCannotAllocateReceiveBuffer
|———————Node:identifier Text: errorCode
|———————Node:|= Text: |=
|———————Node:identifier Text: kCannotAllocateReceiveBuffer
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:if_statement Text: if (!mTransmitBuffer [0].initWithSize (inSettings.mTransmitBuffer0Size)) {
    errorCode |= kCannotAllocateTransmitBuffer0 ;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (!mTransmitBuffer [0].initWithSize (inSettings.mTransmitBuffer0Size))
|—————Node:( Text: (
|—————Node:unary_expression Text: !mTransmitBuffer [0].initWithSize (inSettings.mTransmitBuffer0Size)
|——————Node:! Text: !
|——————Node:call_expression Text: mTransmitBuffer [0].initWithSize (inSettings.mTransmitBuffer0Size)
|———————Node:field_expression Text: mTransmitBuffer [0].initWithSize
|————————Node:subscript_expression Text: mTransmitBuffer [0]
|—————————Node:identifier Text: mTransmitBuffer
|—————————Node:subscript_argument_list Text: [0]
|——————————Node:[ Text: [
|——————————Node:number_literal Text: 0
|——————————Node:] Text: ]
|————————Node:. Text: .
|————————Node:field_identifier Text: initWithSize
|———————Node:argument_list Text: (inSettings.mTransmitBuffer0Size)
|————————Node:( Text: (
|————————Node:field_expression Text: inSettings.mTransmitBuffer0Size
|—————————Node:identifier Text: inSettings
|—————————Node:. Text: .
|—————————Node:field_identifier Text: mTransmitBuffer0Size
|————————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
    errorCode |= kCannotAllocateTransmitBuffer0 ;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: errorCode |= kCannotAllocateTransmitBuffer0 ;
|——————Node:assignment_expression Text: errorCode |= kCannotAllocateTransmitBuffer0
|———————Node:identifier Text: errorCode
|———————Node:|= Text: |=
|———————Node:identifier Text: kCannotAllocateTransmitBuffer0
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:if_statement Text: if (!mTransmitBuffer [1].initWithSize (inSettings.mTransmitBuffer1Size)) {
    errorCode |= kCannotAllocateTransmitBuffer1 ;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (!mTransmitBuffer [1].initWithSize (inSettings.mTransmitBuffer1Size))
|—————Node:( Text: (
|—————Node:unary_expression Text: !mTransmitBuffer [1].initWithSize (inSettings.mTransmitBuffer1Size)
|——————Node:! Text: !
|——————Node:call_expression Text: mTransmitBuffer [1].initWithSize (inSettings.mTransmitBuffer1Size)
|———————Node:field_expression Text: mTransmitBuffer [1].initWithSize
|————————Node:subscript_expression Text: mTransmitBuffer [1]
|—————————Node:identifier Text: mTransmitBuffer
|—————————Node:subscript_argument_list Text: [1]
|——————————Node:[ Text: [
|——————————Node:number_literal Text: 1
|——————————Node:] Text: ]
|————————Node:. Text: .
|————————Node:field_identifier Text: initWithSize
|———————Node:argument_list Text: (inSettings.mTransmitBuffer1Size)
|————————Node:( Text: (
|————————Node:field_expression Text: inSettings.mTransmitBuffer1Size
|—————————Node:identifier Text: inSettings
|—————————Node:. Text: .
|—————————Node:field_identifier Text: mTransmitBuffer1Size
|————————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
    errorCode |= kCannotAllocateTransmitBuffer1 ;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: errorCode |= kCannotAllocateTransmitBuffer1 ;
|——————Node:assignment_expression Text: errorCode |= kCannotAllocateTransmitBuffer1
|———————Node:identifier Text: errorCode
|———————Node:|= Text: |=
|———————Node:identifier Text: kCannotAllocateTransmitBuffer1
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:if_statement Text: if (!mTransmitBuffer [2].initWithSize (inSettings.mTransmitBuffer2Size)) {
    errorCode |= kCannotAllocateTransmitBuffer2 ;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (!mTransmitBuffer [2].initWithSize (inSettings.mTransmitBuffer2Size))
|—————Node:( Text: (
|—————Node:unary_expression Text: !mTransmitBuffer [2].initWithSize (inSettings.mTransmitBuffer2Size)
|——————Node:! Text: !
|——————Node:call_expression Text: mTransmitBuffer [2].initWithSize (inSettings.mTransmitBuffer2Size)
|———————Node:field_expression Text: mTransmitBuffer [2].initWithSize
|————————Node:subscript_expression Text: mTransmitBuffer [2]
|—————————Node:identifier Text: mTransmitBuffer
|—————————Node:subscript_argument_list Text: [2]
|——————————Node:[ Text: [
|——————————Node:number_literal Text: 2
|——————————Node:] Text: ]
|————————Node:. Text: .
|————————Node:field_identifier Text: initWithSize
|———————Node:argument_list Text: (inSettings.mTransmitBuffer2Size)
|————————Node:( Text: (
|————————Node:field_expression Text: inSettings.mTransmitBuffer2Size
|—————————Node:identifier Text: inSettings
|—————————Node:. Text: .
|—————————Node:field_identifier Text: mTransmitBuffer2Size
|————————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
    errorCode |= kCannotAllocateTransmitBuffer2 ;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: errorCode |= kCannotAllocateTransmitBuffer2 ;
|——————Node:assignment_expression Text: errorCode |= kCannotAllocateTransmitBuffer2
|———————Node:identifier Text: errorCode
|———————Node:|= Text: |=
|———————Node:identifier Text: kCannotAllocateTransmitBuffer2
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: mTXBIsFree [0] = true ;
|————Node:assignment_expression Text: mTXBIsFree [0] = true
|—————Node:subscript_expression Text: mTXBIsFree [0]
|——————Node:identifier Text: mTXBIsFree
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:true Text: true
|————Node:; Text: ;
|———Node:expression_statement Text: mTXBIsFree [1] = true ;
|————Node:assignment_expression Text: mTXBIsFree [1] = true
|—————Node:subscript_expression Text: mTXBIsFree [1]
|——————Node:identifier Text: mTXBIsFree
|——————Node:subscript_argument_list Text: [1]
|———————Node:[ Text: [
|———————Node:number_literal Text: 1
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:true Text: true
|————Node:; Text: ;
|———Node:expression_statement Text: mTXBIsFree [2] = true ;
|————Node:assignment_expression Text: mTXBIsFree [2] = true
|—————Node:subscript_expression Text: mTXBIsFree [2]
|——————Node:identifier Text: mTXBIsFree
|——————Node:subscript_argument_list Text: [2]
|———————Node:[ Text: [
|———————Node:number_literal Text: 2
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:true Text: true
|————Node:; Text: ;
|———Node:comment
|———Node:if_statement Text: if (errorCode == 0) {
    mSPI.beginTransaction (mSPISettings) ;
  //----------------------------------- Set CNF3, CNF2, CNF1 and CANINTE registers
    select () ;
    mSPI.transfer (WRITE_COMMAND) ;
    mSPI.transfer (CNF3_REGISTER) ;
  //--- Register CNF3:
  //  Bit 7: SOF
  //  bit 6 --> 0: No Wake-up Filter bit
  //  Bit 5-3: -
  //  Bit 2-0: PHSEG2 - 1
    const uint8_t cnf3 =
      ((inSettings.mCLKOUT_SOF_pin == ACAN2515Settings::SOF) << 6) /* SOF */ |
      ((inSettings.mPhaseSegment2 - 1) << 0) /* PHSEG2 */
    ;
   mSPI.transfer (cnf3) ;
  //--- Register CNF2:
  //  Bit 7 --> 1: BLTMODE
  //  bit 6: SAM
  //  Bit 5-3: PHSEG1 - 1
  //  Bit 2-0: PRSEG - 1
    const uint8_t cnf2 =
      0x80 /* BLTMODE */ |
      (inSettings.mTripleSampling << 6) /* SAM */ |
      ((inSettings.mPhaseSegment1 - 1) << 3) /* PHSEG1 */ |
      ((inSettings.mPropagationSegment - 1) << 0) /* PRSEG */
    ;
    mSPI.transfer (cnf2) ;
  //--- Register CNF1:
  //  Bit 7-6: SJW - 1
  //  Bit 5-0: BRP - 1
    const uint8_t cnf1 =
      ((inSettings.mSJW - 1) << 6) /* SJW */ | // Incorrect SJW setting fixed in 2.0.1
      ((inSettings.mBitRatePrescaler - 1) << 0) /* BRP */
    ;
    mSPI.transfer (cnf1) ;
  //--- Register CANINTE: activate interrupts
  //  Bit 7 --> 0: MERRE
  //  Bit 6 --> 0: WAKIE
  //  Bit 5 --> 0: ERRIE
  //  Bit 4 --> 1: TX2IE
  //  Bit 3 --> 1: TX1IE
  //  Bit 2 --> 1: TX0IE
  //  Bit 1 --> 1: RX1IE
  //  Bit 0 --> 1: RX0IE
    mSPI.transfer (0x1F) ;
    unselect () ;
  //----------------------------------- Deactivate the RXnBF Pins (High Impedance State)
    write2515Register (BFPCTRL_REGISTER, 0) ;
  //----------------------------------- Set TXnRTS as inputs
    write2515Register (TXRTSCTRL_REGISTER, 0);
  //----------------------------------- RXBnCTRL
    mRolloverEnable = inSettings.mRolloverEnable ;
    const uint8_t acceptAll = (inAcceptanceFilterCount == 0) ? 0x60 : 0x00 ;
    write2515Register (RXB0CTRL_REGISTER, acceptAll | (uint8_t (inSettings.mRolloverEnable) << 2)) ;
    write2515Register (RXB1CTRL_REGISTER, acceptAll) ;
  //----------------------------------- Setup mask registers
    setupMaskRegister (inRXM0, RXM0SIDH_REGISTER) ;
    setupMaskRegister (inRXM1, RXM1SIDH_REGISTER) ;
    if (inAcceptanceFilterCount > 0) {
      uint8_t idx = 0 ;
      while (idx < inAcceptanceFilterCount) {
        setupMaskRegister (inAcceptanceFilters [idx].mMask, RXFSIDH_REGISTER [idx]) ;
        mCallBackFunctionArray [idx] = inAcceptanceFilters [idx].mCallBack ;
        idx += 1 ;
      }
      while (idx < 6) {
        setupMaskRegister (inAcceptanceFilters [inAcceptanceFilterCount-1].mMask, RXFSIDH_REGISTER [idx]) ;
        mCallBackFunctionArray [idx] = inAcceptanceFilters [inAcceptanceFilterCount-1].mCallBack ;
        idx += 1 ;
      }
//     }else{
//       for (int i=0 ; i<6 ; i++) {
//         setupMaskRegister (ACAN2515Mask (), RXFSIDH_REGISTER [i]) ;
//       }
    }
  //----------------------------------- Set TXBi priorities
    write2515Register (TXB0CTRL_REGISTER, inSettings.mTXBPriority & 3) ;
    write2515Register (TXB1CTRL_REGISTER, (inSettings.mTXBPriority >> 2) & 3) ;
    write2515Register (TXB2CTRL_REGISTER, (inSettings.mTXBPriority >> 4) & 3) ;
    mSPI.endTransaction () ;
  //----------------------------------- Reset device to requested mode
    uint8_t canctrl = inSettings.mOneShotModeEnabled ? (1 << 3) : 0 ;
    switch (inSettings.mCLKOUT_SOF_pin) {
    case ACAN2515Settings::CLOCK :
      canctrl |= 0x04 | 0x00 ; // Same as default setting
      break ;
    case ACAN2515Settings::CLOCK2 :
      canctrl |= 0x04 | 0x01 ;
      break ;
    case ACAN2515Settings::CLOCK4 :
      canctrl |= 0x04 | 0x02 ;
      break ;
    case ACAN2515Settings::CLOCK8 :
      canctrl |= 0x04 | 0x03 ;
      break ;
    case ACAN2515Settings::SOF :
      canctrl |= 0x04 ;
      break ;
    case ACAN2515Settings::HiZ :
      break ;
    }
  //--- Request mode
    const uint8_t requestedMode = (uint8_t) inSettings.mRequestedMode ;
    errorCode |= setRequestedMode (canctrl | requestedMode) ;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (errorCode == 0)
|—————Node:( Text: (
|—————Node:binary_expression Text: errorCode == 0
|——————Node:identifier Text: errorCode
|——————Node:== Text: ==
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {
    mSPI.beginTransaction (mSPISettings) ;
  //----------------------------------- Set CNF3, CNF2, CNF1 and CANINTE registers
    select () ;
    mSPI.transfer (WRITE_COMMAND) ;
    mSPI.transfer (CNF3_REGISTER) ;
  //--- Register CNF3:
  //  Bit 7: SOF
  //  bit 6 --> 0: No Wake-up Filter bit
  //  Bit 5-3: -
  //  Bit 2-0: PHSEG2 - 1
    const uint8_t cnf3 =
      ((inSettings.mCLKOUT_SOF_pin == ACAN2515Settings::SOF) << 6) /* SOF */ |
      ((inSettings.mPhaseSegment2 - 1) << 0) /* PHSEG2 */
    ;
   mSPI.transfer (cnf3) ;
  //--- Register CNF2:
  //  Bit 7 --> 1: BLTMODE
  //  bit 6: SAM
  //  Bit 5-3: PHSEG1 - 1
  //  Bit 2-0: PRSEG - 1
    const uint8_t cnf2 =
      0x80 /* BLTMODE */ |
      (inSettings.mTripleSampling << 6) /* SAM */ |
      ((inSettings.mPhaseSegment1 - 1) << 3) /* PHSEG1 */ |
      ((inSettings.mPropagationSegment - 1) << 0) /* PRSEG */
    ;
    mSPI.transfer (cnf2) ;
  //--- Register CNF1:
  //  Bit 7-6: SJW - 1
  //  Bit 5-0: BRP - 1
    const uint8_t cnf1 =
      ((inSettings.mSJW - 1) << 6) /* SJW */ | // Incorrect SJW setting fixed in 2.0.1
      ((inSettings.mBitRatePrescaler - 1) << 0) /* BRP */
    ;
    mSPI.transfer (cnf1) ;
  //--- Register CANINTE: activate interrupts
  //  Bit 7 --> 0: MERRE
  //  Bit 6 --> 0: WAKIE
  //  Bit 5 --> 0: ERRIE
  //  Bit 4 --> 1: TX2IE
  //  Bit 3 --> 1: TX1IE
  //  Bit 2 --> 1: TX0IE
  //  Bit 1 --> 1: RX1IE
  //  Bit 0 --> 1: RX0IE
    mSPI.transfer (0x1F) ;
    unselect () ;
  //----------------------------------- Deactivate the RXnBF Pins (High Impedance State)
    write2515Register (BFPCTRL_REGISTER, 0) ;
  //----------------------------------- Set TXnRTS as inputs
    write2515Register (TXRTSCTRL_REGISTER, 0);
  //----------------------------------- RXBnCTRL
    mRolloverEnable = inSettings.mRolloverEnable ;
    const uint8_t acceptAll = (inAcceptanceFilterCount == 0) ? 0x60 : 0x00 ;
    write2515Register (RXB0CTRL_REGISTER, acceptAll | (uint8_t (inSettings.mRolloverEnable) << 2)) ;
    write2515Register (RXB1CTRL_REGISTER, acceptAll) ;
  //----------------------------------- Setup mask registers
    setupMaskRegister (inRXM0, RXM0SIDH_REGISTER) ;
    setupMaskRegister (inRXM1, RXM1SIDH_REGISTER) ;
    if (inAcceptanceFilterCount > 0) {
      uint8_t idx = 0 ;
      while (idx < inAcceptanceFilterCount) {
        setupMaskRegister (inAcceptanceFilters [idx].mMask, RXFSIDH_REGISTER [idx]) ;
        mCallBackFunctionArray [idx] = inAcceptanceFilters [idx].mCallBack ;
        idx += 1 ;
      }
      while (idx < 6) {
        setupMaskRegister (inAcceptanceFilters [inAcceptanceFilterCount-1].mMask, RXFSIDH_REGISTER [idx]) ;
        mCallBackFunctionArray [idx] = inAcceptanceFilters [inAcceptanceFilterCount-1].mCallBack ;
        idx += 1 ;
      }
//     }else{
//       for (int i=0 ; i<6 ; i++) {
//         setupMaskRegister (ACAN2515Mask (), RXFSIDH_REGISTER [i]) ;
//       }
    }
  //----------------------------------- Set TXBi priorities
    write2515Register (TXB0CTRL_REGISTER, inSettings.mTXBPriority & 3) ;
    write2515Register (TXB1CTRL_REGISTER, (inSettings.mTXBPriority >> 2) & 3) ;
    write2515Register (TXB2CTRL_REGISTER, (inSettings.mTXBPriority >> 4) & 3) ;
    mSPI.endTransaction () ;
  //----------------------------------- Reset device to requested mode
    uint8_t canctrl = inSettings.mOneShotModeEnabled ? (1 << 3) : 0 ;
    switch (inSettings.mCLKOUT_SOF_pin) {
    case ACAN2515Settings::CLOCK :
      canctrl |= 0x04 | 0x00 ; // Same as default setting
      break ;
    case ACAN2515Settings::CLOCK2 :
      canctrl |= 0x04 | 0x01 ;
      break ;
    case ACAN2515Settings::CLOCK4 :
      canctrl |= 0x04 | 0x02 ;
      break ;
    case ACAN2515Settings::CLOCK8 :
      canctrl |= 0x04 | 0x03 ;
      break ;
    case ACAN2515Settings::SOF :
      canctrl |= 0x04 ;
      break ;
    case ACAN2515Settings::HiZ :
      break ;
    }
  //--- Request mode
    const uint8_t requestedMode = (uint8_t) inSettings.mRequestedMode ;
    errorCode |= setRequestedMode (canctrl | requestedMode) ;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: mSPI.beginTransaction (mSPISettings) ;
|——————Node:call_expression Text: mSPI.beginTransaction (mSPISettings)
|———————Node:field_expression Text: mSPI.beginTransaction
|————————Node:identifier Text: mSPI
|————————Node:. Text: .
|————————Node:field_identifier Text: beginTransaction
|———————Node:argument_list Text: (mSPISettings)
|————————Node:( Text: (
|————————Node:identifier Text: mSPISettings
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment
|—————Node:expression_statement Text: select () ;
|——————Node:call_expression Text: select ()
|———————Node:identifier Text: select
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: mSPI.transfer (WRITE_COMMAND) ;
|——————Node:call_expression Text: mSPI.transfer (WRITE_COMMAND)
|———————Node:field_expression Text: mSPI.transfer
|————————Node:identifier Text: mSPI
|————————Node:. Text: .
|————————Node:field_identifier Text: transfer
|———————Node:argument_list Text: (WRITE_COMMAND)
|————————Node:( Text: (
|————————Node:identifier Text: WRITE_COMMAND
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: mSPI.transfer (CNF3_REGISTER) ;
|——————Node:call_expression Text: mSPI.transfer (CNF3_REGISTER)
|———————Node:field_expression Text: mSPI.transfer
|————————Node:identifier Text: mSPI
|————————Node:. Text: .
|————————Node:field_identifier Text: transfer
|———————Node:argument_list Text: (CNF3_REGISTER)
|————————Node:( Text: (
|————————Node:identifier Text: CNF3_REGISTER
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment
|—————Node:comment
|—————Node:comment
|—————Node:comment
|—————Node:comment
|—————Node:declaration Text: const uint8_t cnf3 =
      ((inSettings.mCLKOUT_SOF_pin == ACAN2515Settings::SOF) << 6) /* SOF */ |
      ((inSettings.mPhaseSegment2 - 1) << 0) /* PHSEG2 */
    ;
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:primitive_type Text: uint8_t
|——————Node:init_declarator Text: cnf3 =
      ((inSettings.mCLKOUT_SOF_pin == ACAN2515Settings::SOF) << 6) /* SOF */ |
      ((inSettings.mPhaseSegment2 - 1) << 0)
|———————Node:identifier Text: cnf3
|———————Node:= Text: =
|———————Node:binary_expression Text: ((inSettings.mCLKOUT_SOF_pin == ACAN2515Settings::SOF) << 6) /* SOF */ |
      ((inSettings.mPhaseSegment2 - 1) << 0)
|————————Node:parenthesized_expression Text: ((inSettings.mCLKOUT_SOF_pin == ACAN2515Settings::SOF) << 6)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: (inSettings.mCLKOUT_SOF_pin == ACAN2515Settings::SOF) << 6
|——————————Node:parenthesized_expression Text: (inSettings.mCLKOUT_SOF_pin == ACAN2515Settings::SOF)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: inSettings.mCLKOUT_SOF_pin == ACAN2515Settings::SOF
|————————————Node:field_expression Text: inSettings.mCLKOUT_SOF_pin
|—————————————Node:identifier Text: inSettings
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: mCLKOUT_SOF_pin
|————————————Node:== Text: ==
|————————————Node:qualified_identifier Text: ACAN2515Settings::SOF
|—————————————Node:namespace_identifier Text: ACAN2515Settings
|—————————————Node::: Text: ::
|—————————————Node:identifier Text: SOF
|———————————Node:) Text: )
|——————————Node:<< Text: <<
|——————————Node:number_literal Text: 6
|—————————Node:) Text: )
|————————Node:comment
|————————Node:| Text: |
|————————Node:parenthesized_expression Text: ((inSettings.mPhaseSegment2 - 1) << 0)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: (inSettings.mPhaseSegment2 - 1) << 0
|——————————Node:parenthesized_expression Text: (inSettings.mPhaseSegment2 - 1)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: inSettings.mPhaseSegment2 - 1
|————————————Node:field_expression Text: inSettings.mPhaseSegment2
|—————————————Node:identifier Text: inSettings
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: mPhaseSegment2
|————————————Node:- Text: -
|————————————Node:number_literal Text: 1
|———————————Node:) Text: )
|——————————Node:<< Text: <<
|——————————Node:number_literal Text: 0
|—————————Node:) Text: )
|——————Node:comment
|——————Node:; Text: ;
|—————Node:expression_statement Text: mSPI.transfer (cnf3) ;
|——————Node:call_expression Text: mSPI.transfer (cnf3)
|———————Node:field_expression Text: mSPI.transfer
|————————Node:identifier Text: mSPI
|————————Node:. Text: .
|————————Node:field_identifier Text: transfer
|———————Node:argument_list Text: (cnf3)
|————————Node:( Text: (
|————————Node:identifier Text: cnf3
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment
|—————Node:comment
|—————Node:comment
|—————Node:comment
|—————Node:comment
|—————Node:declaration Text: const uint8_t cnf2 =
      0x80 /* BLTMODE */ |
      (inSettings.mTripleSampling << 6) /* SAM */ |
      ((inSettings.mPhaseSegment1 - 1) << 3) /* PHSEG1 */ |
      ((inSettings.mPropagationSegment - 1) << 0) /* PRSEG */
    ;
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:primitive_type Text: uint8_t
|——————Node:init_declarator Text: cnf2 =
      0x80 /* BLTMODE */ |
      (inSettings.mTripleSampling << 6) /* SAM */ |
      ((inSettings.mPhaseSegment1 - 1) << 3) /* PHSEG1 */ |
      ((inSettings.mPropagationSegment - 1) << 0)
|———————Node:identifier Text: cnf2
|———————Node:= Text: =
|———————Node:binary_expression Text: 0x80 /* BLTMODE */ |
      (inSettings.mTripleSampling << 6) /* SAM */ |
      ((inSettings.mPhaseSegment1 - 1) << 3) /* PHSEG1 */ |
      ((inSettings.mPropagationSegment - 1) << 0)
|————————Node:binary_expression Text: 0x80 /* BLTMODE */ |
      (inSettings.mTripleSampling << 6) /* SAM */ |
      ((inSettings.mPhaseSegment1 - 1) << 3)
|—————————Node:binary_expression Text: 0x80 /* BLTMODE */ |
      (inSettings.mTripleSampling << 6)
|——————————Node:number_literal Text: 0x80
|——————————Node:comment
|——————————Node:| Text: |
|——————————Node:parenthesized_expression Text: (inSettings.mTripleSampling << 6)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: inSettings.mTripleSampling << 6
|————————————Node:field_expression Text: inSettings.mTripleSampling
|—————————————Node:identifier Text: inSettings
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: mTripleSampling
|————————————Node:<< Text: <<
|————————————Node:number_literal Text: 6
|———————————Node:) Text: )
|—————————Node:comment
|—————————Node:| Text: |
|—————————Node:parenthesized_expression Text: ((inSettings.mPhaseSegment1 - 1) << 3)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: (inSettings.mPhaseSegment1 - 1) << 3
|———————————Node:parenthesized_expression Text: (inSettings.mPhaseSegment1 - 1)
|————————————Node:( Text: (
|————————————Node:binary_expression Text: inSettings.mPhaseSegment1 - 1
|—————————————Node:field_expression Text: inSettings.mPhaseSegment1
|——————————————Node:identifier Text: inSettings
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: mPhaseSegment1
|—————————————Node:- Text: -
|—————————————Node:number_literal Text: 1
|————————————Node:) Text: )
|———————————Node:<< Text: <<
|———————————Node:number_literal Text: 3
|——————————Node:) Text: )
|————————Node:comment
|————————Node:| Text: |
|————————Node:parenthesized_expression Text: ((inSettings.mPropagationSegment - 1) << 0)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: (inSettings.mPropagationSegment - 1) << 0
|——————————Node:parenthesized_expression Text: (inSettings.mPropagationSegment - 1)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: inSettings.mPropagationSegment - 1
|————————————Node:field_expression Text: inSettings.mPropagationSegment
|—————————————Node:identifier Text: inSettings
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: mPropagationSegment
|————————————Node:- Text: -
|————————————Node:number_literal Text: 1
|———————————Node:) Text: )
|——————————Node:<< Text: <<
|——————————Node:number_literal Text: 0
|—————————Node:) Text: )
|——————Node:comment
|——————Node:; Text: ;
|—————Node:expression_statement Text: mSPI.transfer (cnf2) ;
|——————Node:call_expression Text: mSPI.transfer (cnf2)
|———————Node:field_expression Text: mSPI.transfer
|————————Node:identifier Text: mSPI
|————————Node:. Text: .
|————————Node:field_identifier Text: transfer
|———————Node:argument_list Text: (cnf2)
|————————Node:( Text: (
|————————Node:identifier Text: cnf2
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment
|—————Node:comment
|—————Node:comment
|—————Node:declaration Text: const uint8_t cnf1 =
      ((inSettings.mSJW - 1) << 6) /* SJW */ | // Incorrect SJW setting fixed in 2.0.1
      ((inSettings.mBitRatePrescaler - 1) << 0) /* BRP */
    ;
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:primitive_type Text: uint8_t
|——————Node:init_declarator Text: cnf1 =
      ((inSettings.mSJW - 1) << 6) /* SJW */ | // Incorrect SJW setting fixed in 2.0.1
      ((inSettings.mBitRatePrescaler - 1) << 0)
|———————Node:identifier Text: cnf1
|———————Node:= Text: =
|———————Node:binary_expression Text: ((inSettings.mSJW - 1) << 6) /* SJW */ | // Incorrect SJW setting fixed in 2.0.1
      ((inSettings.mBitRatePrescaler - 1) << 0)
|————————Node:parenthesized_expression Text: ((inSettings.mSJW - 1) << 6)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: (inSettings.mSJW - 1) << 6
|——————————Node:parenthesized_expression Text: (inSettings.mSJW - 1)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: inSettings.mSJW - 1
|————————————Node:field_expression Text: inSettings.mSJW
|—————————————Node:identifier Text: inSettings
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: mSJW
|————————————Node:- Text: -
|————————————Node:number_literal Text: 1
|———————————Node:) Text: )
|——————————Node:<< Text: <<
|——————————Node:number_literal Text: 6
|—————————Node:) Text: )
|————————Node:comment
|————————Node:| Text: |
|————————Node:comment
|————————Node:parenthesized_expression Text: ((inSettings.mBitRatePrescaler - 1) << 0)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: (inSettings.mBitRatePrescaler - 1) << 0
|——————————Node:parenthesized_expression Text: (inSettings.mBitRatePrescaler - 1)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: inSettings.mBitRatePrescaler - 1
|————————————Node:field_expression Text: inSettings.mBitRatePrescaler
|—————————————Node:identifier Text: inSettings
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: mBitRatePrescaler
|————————————Node:- Text: -
|————————————Node:number_literal Text: 1
|———————————Node:) Text: )
|——————————Node:<< Text: <<
|——————————Node:number_literal Text: 0
|—————————Node:) Text: )
|——————Node:comment
|——————Node:; Text: ;
|—————Node:expression_statement Text: mSPI.transfer (cnf1) ;
|——————Node:call_expression Text: mSPI.transfer (cnf1)
|———————Node:field_expression Text: mSPI.transfer
|————————Node:identifier Text: mSPI
|————————Node:. Text: .
|————————Node:field_identifier Text: transfer
|———————Node:argument_list Text: (cnf1)
|————————Node:( Text: (
|————————Node:identifier Text: cnf1
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment
|—————Node:comment
|—————Node:comment
|—————Node:comment
|—————Node:comment
|—————Node:comment
|—————Node:comment
|—————Node:comment
|—————Node:comment
|—————Node:expression_statement Text: mSPI.transfer (0x1F) ;
|——————Node:call_expression Text: mSPI.transfer (0x1F)
|———————Node:field_expression Text: mSPI.transfer
|————————Node:identifier Text: mSPI
|————————Node:. Text: .
|————————Node:field_identifier Text: transfer
|———————Node:argument_list Text: (0x1F)
|————————Node:( Text: (
|————————Node:number_literal Text: 0x1F
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: unselect () ;
|——————Node:call_expression Text: unselect ()
|———————Node:identifier Text: unselect
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment
|—————Node:expression_statement Text: write2515Register (BFPCTRL_REGISTER, 0) ;
|——————Node:call_expression Text: write2515Register (BFPCTRL_REGISTER, 0)
|———————Node:identifier Text: write2515Register
|———————Node:argument_list Text: (BFPCTRL_REGISTER, 0)
|————————Node:( Text: (
|————————Node:identifier Text: BFPCTRL_REGISTER
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment
|—————Node:expression_statement Text: write2515Register (TXRTSCTRL_REGISTER, 0);
|——————Node:call_expression Text: write2515Register (TXRTSCTRL_REGISTER, 0)
|———————Node:identifier Text: write2515Register
|———————Node:argument_list Text: (TXRTSCTRL_REGISTER, 0)
|————————Node:( Text: (
|————————Node:identifier Text: TXRTSCTRL_REGISTER
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment
|—————Node:expression_statement Text: mRolloverEnable = inSettings.mRolloverEnable ;
|——————Node:assignment_expression Text: mRolloverEnable = inSettings.mRolloverEnable
|———————Node:identifier Text: mRolloverEnable
|———————Node:= Text: =
|———————Node:field_expression Text: inSettings.mRolloverEnable
|————————Node:identifier Text: inSettings
|————————Node:. Text: .
|————————Node:field_identifier Text: mRolloverEnable
|——————Node:; Text: ;
|—————Node:declaration Text: const uint8_t acceptAll = (inAcceptanceFilterCount == 0) ? 0x60 : 0x00 ;
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:primitive_type Text: uint8_t
|——————Node:init_declarator Text: acceptAll = (inAcceptanceFilterCount == 0) ? 0x60 : 0x00
|———————Node:identifier Text: acceptAll
|———————Node:= Text: =
|———————Node:conditional_expression Text: (inAcceptanceFilterCount == 0) ? 0x60 : 0x00
|————————Node:parenthesized_expression Text: (inAcceptanceFilterCount == 0)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: inAcceptanceFilterCount == 0
|——————————Node:identifier Text: inAcceptanceFilterCount
|——————————Node:== Text: ==
|——————————Node:number_literal Text: 0
|—————————Node:) Text: )
|————————Node:? Text: ?
|————————Node:number_literal Text: 0x60
|————————Node:: Text: :
|————————Node:number_literal Text: 0x00
|——————Node:; Text: ;
|—————Node:expression_statement Text: write2515Register (RXB0CTRL_REGISTER, acceptAll | (uint8_t (inSettings.mRolloverEnable) << 2)) ;
|——————Node:call_expression Text: write2515Register (RXB0CTRL_REGISTER, acceptAll | (uint8_t (inSettings.mRolloverEnable) << 2))
|———————Node:identifier Text: write2515Register
|———————Node:argument_list Text: (RXB0CTRL_REGISTER, acceptAll | (uint8_t (inSettings.mRolloverEnable) << 2))
|————————Node:( Text: (
|————————Node:identifier Text: RXB0CTRL_REGISTER
|————————Node:, Text: ,
|————————Node:binary_expression Text: acceptAll | (uint8_t (inSettings.mRolloverEnable) << 2)
|—————————Node:identifier Text: acceptAll
|—————————Node:| Text: |
|—————————Node:parenthesized_expression Text: (uint8_t (inSettings.mRolloverEnable) << 2)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: uint8_t (inSettings.mRolloverEnable) << 2
|———————————Node:call_expression Text: uint8_t (inSettings.mRolloverEnable)
|————————————Node:primitive_type Text: uint8_t
|————————————Node:argument_list Text: (inSettings.mRolloverEnable)
|—————————————Node:( Text: (
|—————————————Node:field_expression Text: inSettings.mRolloverEnable
|——————————————Node:identifier Text: inSettings
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: mRolloverEnable
|—————————————Node:) Text: )
|———————————Node:<< Text: <<
|———————————Node:number_literal Text: 2
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: write2515Register (RXB1CTRL_REGISTER, acceptAll) ;
|——————Node:call_expression Text: write2515Register (RXB1CTRL_REGISTER, acceptAll)
|———————Node:identifier Text: write2515Register
|———————Node:argument_list Text: (RXB1CTRL_REGISTER, acceptAll)
|————————Node:( Text: (
|————————Node:identifier Text: RXB1CTRL_REGISTER
|————————Node:, Text: ,
|————————Node:identifier Text: acceptAll
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment
|—————Node:expression_statement Text: setupMaskRegister (inRXM0, RXM0SIDH_REGISTER) ;
|——————Node:call_expression Text: setupMaskRegister (inRXM0, RXM0SIDH_REGISTER)
|———————Node:identifier Text: setupMaskRegister
|———————Node:argument_list Text: (inRXM0, RXM0SIDH_REGISTER)
|————————Node:( Text: (
|————————Node:identifier Text: inRXM0
|————————Node:, Text: ,
|————————Node:identifier Text: RXM0SIDH_REGISTER
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: setupMaskRegister (inRXM1, RXM1SIDH_REGISTER) ;
|——————Node:call_expression Text: setupMaskRegister (inRXM1, RXM1SIDH_REGISTER)
|———————Node:identifier Text: setupMaskRegister
|———————Node:argument_list Text: (inRXM1, RXM1SIDH_REGISTER)
|————————Node:( Text: (
|————————Node:identifier Text: inRXM1
|————————Node:, Text: ,
|————————Node:identifier Text: RXM1SIDH_REGISTER
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (inAcceptanceFilterCount > 0) {
      uint8_t idx = 0 ;
      while (idx < inAcceptanceFilterCount) {
        setupMaskRegister (inAcceptanceFilters [idx].mMask, RXFSIDH_REGISTER [idx]) ;
        mCallBackFunctionArray [idx] = inAcceptanceFilters [idx].mCallBack ;
        idx += 1 ;
      }
      while (idx < 6) {
        setupMaskRegister (inAcceptanceFilters [inAcceptanceFilterCount-1].mMask, RXFSIDH_REGISTER [idx]) ;
        mCallBackFunctionArray [idx] = inAcceptanceFilters [inAcceptanceFilterCount-1].mCallBack ;
        idx += 1 ;
      }
//     }else{
//       for (int i=0 ; i<6 ; i++) {
//         setupMaskRegister (ACAN2515Mask (), RXFSIDH_REGISTER [i]) ;
//       }
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: (inAcceptanceFilterCount > 0)
|———————Node:( Text: (
|———————Node:binary_expression Text: inAcceptanceFilterCount > 0
|————————Node:identifier Text: inAcceptanceFilterCount
|————————Node:> Text: >
|————————Node:number_literal Text: 0
|———————Node:) Text: )
|——————Node:compound_statement Text: {
      uint8_t idx = 0 ;
      while (idx < inAcceptanceFilterCount) {
        setupMaskRegister (inAcceptanceFilters [idx].mMask, RXFSIDH_REGISTER [idx]) ;
        mCallBackFunctionArray [idx] = inAcceptanceFilters [idx].mCallBack ;
        idx += 1 ;
      }
      while (idx < 6) {
        setupMaskRegister (inAcceptanceFilters [inAcceptanceFilterCount-1].mMask, RXFSIDH_REGISTER [idx]) ;
        mCallBackFunctionArray [idx] = inAcceptanceFilters [inAcceptanceFilterCount-1].mCallBack ;
        idx += 1 ;
      }
//     }else{
//       for (int i=0 ; i<6 ; i++) {
//         setupMaskRegister (ACAN2515Mask (), RXFSIDH_REGISTER [i]) ;
//       }
    }
|———————Node:{ Text: {
|———————Node:declaration Text: uint8_t idx = 0 ;
|————————Node:primitive_type Text: uint8_t
|————————Node:init_declarator Text: idx = 0
|—————————Node:identifier Text: idx
|—————————Node:= Text: =
|—————————Node:number_literal Text: 0
|————————Node:; Text: ;
|———————Node:while_statement Text: while (idx < inAcceptanceFilterCount) {
        setupMaskRegister (inAcceptanceFilters [idx].mMask, RXFSIDH_REGISTER [idx]) ;
        mCallBackFunctionArray [idx] = inAcceptanceFilters [idx].mCallBack ;
        idx += 1 ;
      }
|————————Node:while Text: while
|————————Node:condition_clause Text: (idx < inAcceptanceFilterCount)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: idx < inAcceptanceFilterCount
|——————————Node:identifier Text: idx
|——————————Node:< Text: <
|——————————Node:identifier Text: inAcceptanceFilterCount
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
        setupMaskRegister (inAcceptanceFilters [idx].mMask, RXFSIDH_REGISTER [idx]) ;
        mCallBackFunctionArray [idx] = inAcceptanceFilters [idx].mCallBack ;
        idx += 1 ;
      }
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: setupMaskRegister (inAcceptanceFilters [idx].mMask, RXFSIDH_REGISTER [idx]) ;
|——————————Node:call_expression Text: setupMaskRegister (inAcceptanceFilters [idx].mMask, RXFSIDH_REGISTER [idx])
|———————————Node:identifier Text: setupMaskRegister
|———————————Node:argument_list Text: (inAcceptanceFilters [idx].mMask, RXFSIDH_REGISTER [idx])
|————————————Node:( Text: (
|————————————Node:field_expression Text: inAcceptanceFilters [idx].mMask
|—————————————Node:subscript_expression Text: inAcceptanceFilters [idx]
|——————————————Node:identifier Text: inAcceptanceFilters
|——————————————Node:subscript_argument_list Text: [idx]
|———————————————Node:[ Text: [
|———————————————Node:identifier Text: idx
|———————————————Node:] Text: ]
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: mMask
|————————————Node:, Text: ,
|————————————Node:subscript_expression Text: RXFSIDH_REGISTER [idx]
|—————————————Node:identifier Text: RXFSIDH_REGISTER
|—————————————Node:subscript_argument_list Text: [idx]
|——————————————Node:[ Text: [
|——————————————Node:identifier Text: idx
|——————————————Node:] Text: ]
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:expression_statement Text: mCallBackFunctionArray [idx] = inAcceptanceFilters [idx].mCallBack ;
|——————————Node:assignment_expression Text: mCallBackFunctionArray [idx] = inAcceptanceFilters [idx].mCallBack
|———————————Node:subscript_expression Text: mCallBackFunctionArray [idx]
|————————————Node:identifier Text: mCallBackFunctionArray
|————————————Node:subscript_argument_list Text: [idx]
|—————————————Node:[ Text: [
|—————————————Node:identifier Text: idx
|—————————————Node:] Text: ]
|———————————Node:= Text: =
|———————————Node:field_expression Text: inAcceptanceFilters [idx].mCallBack
|————————————Node:subscript_expression Text: inAcceptanceFilters [idx]
|—————————————Node:identifier Text: inAcceptanceFilters
|—————————————Node:subscript_argument_list Text: [idx]
|——————————————Node:[ Text: [
|——————————————Node:identifier Text: idx
|——————————————Node:] Text: ]
|————————————Node:. Text: .
|————————————Node:field_identifier Text: mCallBack
|——————————Node:; Text: ;
|—————————Node:expression_statement Text: idx += 1 ;
|——————————Node:assignment_expression Text: idx += 1
|———————————Node:identifier Text: idx
|———————————Node:+= Text: +=
|———————————Node:number_literal Text: 1
|——————————Node:; Text: ;
|—————————Node:} Text: }
|———————Node:while_statement Text: while (idx < 6) {
        setupMaskRegister (inAcceptanceFilters [inAcceptanceFilterCount-1].mMask, RXFSIDH_REGISTER [idx]) ;
        mCallBackFunctionArray [idx] = inAcceptanceFilters [inAcceptanceFilterCount-1].mCallBack ;
        idx += 1 ;
      }
|————————Node:while Text: while
|————————Node:condition_clause Text: (idx < 6)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: idx < 6
|——————————Node:identifier Text: idx
|——————————Node:< Text: <
|——————————Node:number_literal Text: 6
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
        setupMaskRegister (inAcceptanceFilters [inAcceptanceFilterCount-1].mMask, RXFSIDH_REGISTER [idx]) ;
        mCallBackFunctionArray [idx] = inAcceptanceFilters [inAcceptanceFilterCount-1].mCallBack ;
        idx += 1 ;
      }
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: setupMaskRegister (inAcceptanceFilters [inAcceptanceFilterCount-1].mMask, RXFSIDH_REGISTER [idx]) ;
|——————————Node:call_expression Text: setupMaskRegister (inAcceptanceFilters [inAcceptanceFilterCount-1].mMask, RXFSIDH_REGISTER [idx])
|———————————Node:identifier Text: setupMaskRegister
|———————————Node:argument_list Text: (inAcceptanceFilters [inAcceptanceFilterCount-1].mMask, RXFSIDH_REGISTER [idx])
|————————————Node:( Text: (
|————————————Node:field_expression Text: inAcceptanceFilters [inAcceptanceFilterCount-1].mMask
|—————————————Node:subscript_expression Text: inAcceptanceFilters [inAcceptanceFilterCount-1]
|——————————————Node:identifier Text: inAcceptanceFilters
|——————————————Node:subscript_argument_list Text: [inAcceptanceFilterCount-1]
|———————————————Node:[ Text: [
|———————————————Node:binary_expression Text: inAcceptanceFilterCount-1
|————————————————Node:identifier Text: inAcceptanceFilterCount
|————————————————Node:- Text: -
|————————————————Node:number_literal Text: 1
|———————————————Node:] Text: ]
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: mMask
|————————————Node:, Text: ,
|————————————Node:subscript_expression Text: RXFSIDH_REGISTER [idx]
|—————————————Node:identifier Text: RXFSIDH_REGISTER
|—————————————Node:subscript_argument_list Text: [idx]
|——————————————Node:[ Text: [
|——————————————Node:identifier Text: idx
|——————————————Node:] Text: ]
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:expression_statement Text: mCallBackFunctionArray [idx] = inAcceptanceFilters [inAcceptanceFilterCount-1].mCallBack ;
|——————————Node:assignment_expression Text: mCallBackFunctionArray [idx] = inAcceptanceFilters [inAcceptanceFilterCount-1].mCallBack
|———————————Node:subscript_expression Text: mCallBackFunctionArray [idx]
|————————————Node:identifier Text: mCallBackFunctionArray
|————————————Node:subscript_argument_list Text: [idx]
|—————————————Node:[ Text: [
|—————————————Node:identifier Text: idx
|—————————————Node:] Text: ]
|———————————Node:= Text: =
|———————————Node:field_expression Text: inAcceptanceFilters [inAcceptanceFilterCount-1].mCallBack
|————————————Node:subscript_expression Text: inAcceptanceFilters [inAcceptanceFilterCount-1]
|—————————————Node:identifier Text: inAcceptanceFilters
|—————————————Node:subscript_argument_list Text: [inAcceptanceFilterCount-1]
|——————————————Node:[ Text: [
|——————————————Node:binary_expression Text: inAcceptanceFilterCount-1
|———————————————Node:identifier Text: inAcceptanceFilterCount
|———————————————Node:- Text: -
|———————————————Node:number_literal Text: 1
|——————————————Node:] Text: ]
|————————————Node:. Text: .
|————————————Node:field_identifier Text: mCallBack
|——————————Node:; Text: ;
|—————————Node:expression_statement Text: idx += 1 ;
|——————————Node:assignment_expression Text: idx += 1
|———————————Node:identifier Text: idx
|———————————Node:+= Text: +=
|———————————Node:number_literal Text: 1
|——————————Node:; Text: ;
|—————————Node:} Text: }
|———————Node:comment
|———————Node:comment
|———————Node:comment
|———————Node:comment
|———————Node:} Text: }
|—————Node:comment
|—————Node:expression_statement Text: write2515Register (TXB0CTRL_REGISTER, inSettings.mTXBPriority & 3) ;
|——————Node:call_expression Text: write2515Register (TXB0CTRL_REGISTER, inSettings.mTXBPriority & 3)
|———————Node:identifier Text: write2515Register
|———————Node:argument_list Text: (TXB0CTRL_REGISTER, inSettings.mTXBPriority & 3)
|————————Node:( Text: (
|————————Node:identifier Text: TXB0CTRL_REGISTER
|————————Node:, Text: ,
|————————Node:binary_expression Text: inSettings.mTXBPriority & 3
|—————————Node:field_expression Text: inSettings.mTXBPriority
|——————————Node:identifier Text: inSettings
|——————————Node:. Text: .
|——————————Node:field_identifier Text: mTXBPriority
|—————————Node:& Text: &
|—————————Node:number_literal Text: 3
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: write2515Register (TXB1CTRL_REGISTER, (inSettings.mTXBPriority >> 2) & 3) ;
|——————Node:call_expression Text: write2515Register (TXB1CTRL_REGISTER, (inSettings.mTXBPriority >> 2) & 3)
|———————Node:identifier Text: write2515Register
|———————Node:argument_list Text: (TXB1CTRL_REGISTER, (inSettings.mTXBPriority >> 2) & 3)
|————————Node:( Text: (
|————————Node:identifier Text: TXB1CTRL_REGISTER
|————————Node:, Text: ,
|————————Node:binary_expression Text: (inSettings.mTXBPriority >> 2) & 3
|—————————Node:parenthesized_expression Text: (inSettings.mTXBPriority >> 2)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: inSettings.mTXBPriority >> 2
|———————————Node:field_expression Text: inSettings.mTXBPriority
|————————————Node:identifier Text: inSettings
|————————————Node:. Text: .
|————————————Node:field_identifier Text: mTXBPriority
|———————————Node:>> Text: >>
|———————————Node:number_literal Text: 2
|——————————Node:) Text: )
|—————————Node:& Text: &
|—————————Node:number_literal Text: 3
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: write2515Register (TXB2CTRL_REGISTER, (inSettings.mTXBPriority >> 4) & 3) ;
|——————Node:call_expression Text: write2515Register (TXB2CTRL_REGISTER, (inSettings.mTXBPriority >> 4) & 3)
|———————Node:identifier Text: write2515Register
|———————Node:argument_list Text: (TXB2CTRL_REGISTER, (inSettings.mTXBPriority >> 4) & 3)
|————————Node:( Text: (
|————————Node:identifier Text: TXB2CTRL_REGISTER
|————————Node:, Text: ,
|————————Node:binary_expression Text: (inSettings.mTXBPriority >> 4) & 3
|—————————Node:parenthesized_expression Text: (inSettings.mTXBPriority >> 4)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: inSettings.mTXBPriority >> 4
|———————————Node:field_expression Text: inSettings.mTXBPriority
|————————————Node:identifier Text: inSettings
|————————————Node:. Text: .
|————————————Node:field_identifier Text: mTXBPriority
|———————————Node:>> Text: >>
|———————————Node:number_literal Text: 4
|——————————Node:) Text: )
|—————————Node:& Text: &
|—————————Node:number_literal Text: 3
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: mSPI.endTransaction () ;
|——————Node:call_expression Text: mSPI.endTransaction ()
|———————Node:field_expression Text: mSPI.endTransaction
|————————Node:identifier Text: mSPI
|————————Node:. Text: .
|————————Node:field_identifier Text: endTransaction
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment
|—————Node:declaration Text: uint8_t canctrl = inSettings.mOneShotModeEnabled ? (1 << 3) : 0 ;
|——————Node:primitive_type Text: uint8_t
|——————Node:init_declarator Text: canctrl = inSettings.mOneShotModeEnabled ? (1 << 3) : 0
|———————Node:identifier Text: canctrl
|———————Node:= Text: =
|———————Node:conditional_expression Text: inSettings.mOneShotModeEnabled ? (1 << 3) : 0
|————————Node:field_expression Text: inSettings.mOneShotModeEnabled
|—————————Node:identifier Text: inSettings
|—————————Node:. Text: .
|—————————Node:field_identifier Text: mOneShotModeEnabled
|————————Node:? Text: ?
|————————Node:parenthesized_expression Text: (1 << 3)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: 1 << 3
|——————————Node:number_literal Text: 1
|——————————Node:<< Text: <<
|——————————Node:number_literal Text: 3
|—————————Node:) Text: )
|————————Node:: Text: :
|————————Node:number_literal Text: 0
|——————Node:; Text: ;
|—————Node:switch_statement Text: switch (inSettings.mCLKOUT_SOF_pin) {
    case ACAN2515Settings::CLOCK :
      canctrl |= 0x04 | 0x00 ; // Same as default setting
      break ;
    case ACAN2515Settings::CLOCK2 :
      canctrl |= 0x04 | 0x01 ;
      break ;
    case ACAN2515Settings::CLOCK4 :
      canctrl |= 0x04 | 0x02 ;
      break ;
    case ACAN2515Settings::CLOCK8 :
      canctrl |= 0x04 | 0x03 ;
      break ;
    case ACAN2515Settings::SOF :
      canctrl |= 0x04 ;
      break ;
    case ACAN2515Settings::HiZ :
      break ;
    }
|——————Node:switch Text: switch
|——————Node:condition_clause Text: (inSettings.mCLKOUT_SOF_pin)
|———————Node:( Text: (
|———————Node:field_expression Text: inSettings.mCLKOUT_SOF_pin
|————————Node:identifier Text: inSettings
|————————Node:. Text: .
|————————Node:field_identifier Text: mCLKOUT_SOF_pin
|———————Node:) Text: )
|——————Node:compound_statement Text: {
    case ACAN2515Settings::CLOCK :
      canctrl |= 0x04 | 0x00 ; // Same as default setting
      break ;
    case ACAN2515Settings::CLOCK2 :
      canctrl |= 0x04 | 0x01 ;
      break ;
    case ACAN2515Settings::CLOCK4 :
      canctrl |= 0x04 | 0x02 ;
      break ;
    case ACAN2515Settings::CLOCK8 :
      canctrl |= 0x04 | 0x03 ;
      break ;
    case ACAN2515Settings::SOF :
      canctrl |= 0x04 ;
      break ;
    case ACAN2515Settings::HiZ :
      break ;
    }
|———————Node:{ Text: {
|———————Node:case_statement Text: case ACAN2515Settings::CLOCK :
      canctrl |= 0x04 | 0x00 ; // Same as default setting
      break ;
|————————Node:case Text: case
|————————Node:qualified_identifier Text: ACAN2515Settings::CLOCK
|—————————Node:namespace_identifier Text: ACAN2515Settings
|—————————Node::: Text: ::
|—————————Node:identifier Text: CLOCK
|————————Node:: Text: :
|————————Node:expression_statement Text: canctrl |= 0x04 | 0x00 ;
|—————————Node:assignment_expression Text: canctrl |= 0x04 | 0x00
|——————————Node:identifier Text: canctrl
|——————————Node:|= Text: |=
|——————————Node:binary_expression Text: 0x04 | 0x00
|———————————Node:number_literal Text: 0x04
|———————————Node:| Text: |
|———————————Node:number_literal Text: 0x00
|—————————Node:; Text: ;
|————————Node:comment
|————————Node:break_statement Text: break ;
|—————————Node:break Text: break
|—————————Node:; Text: ;
|———————Node:case_statement Text: case ACAN2515Settings::CLOCK2 :
      canctrl |= 0x04 | 0x01 ;
      break ;
|————————Node:case Text: case
|————————Node:qualified_identifier Text: ACAN2515Settings::CLOCK2
|—————————Node:namespace_identifier Text: ACAN2515Settings
|—————————Node::: Text: ::
|—————————Node:identifier Text: CLOCK2
|————————Node:: Text: :
|————————Node:expression_statement Text: canctrl |= 0x04 | 0x01 ;
|—————————Node:assignment_expression Text: canctrl |= 0x04 | 0x01
|——————————Node:identifier Text: canctrl
|——————————Node:|= Text: |=
|——————————Node:binary_expression Text: 0x04 | 0x01
|———————————Node:number_literal Text: 0x04
|———————————Node:| Text: |
|———————————Node:number_literal Text: 0x01
|—————————Node:; Text: ;
|————————Node:break_statement Text: break ;
|—————————Node:break Text: break
|—————————Node:; Text: ;
|———————Node:case_statement Text: case ACAN2515Settings::CLOCK4 :
      canctrl |= 0x04 | 0x02 ;
      break ;
|————————Node:case Text: case
|————————Node:qualified_identifier Text: ACAN2515Settings::CLOCK4
|—————————Node:namespace_identifier Text: ACAN2515Settings
|—————————Node::: Text: ::
|—————————Node:identifier Text: CLOCK4
|————————Node:: Text: :
|————————Node:expression_statement Text: canctrl |= 0x04 | 0x02 ;
|—————————Node:assignment_expression Text: canctrl |= 0x04 | 0x02
|——————————Node:identifier Text: canctrl
|——————————Node:|= Text: |=
|——————————Node:binary_expression Text: 0x04 | 0x02
|———————————Node:number_literal Text: 0x04
|———————————Node:| Text: |
|———————————Node:number_literal Text: 0x02
|—————————Node:; Text: ;
|————————Node:break_statement Text: break ;
|—————————Node:break Text: break
|—————————Node:; Text: ;
|———————Node:case_statement Text: case ACAN2515Settings::CLOCK8 :
      canctrl |= 0x04 | 0x03 ;
      break ;
|————————Node:case Text: case
|————————Node:qualified_identifier Text: ACAN2515Settings::CLOCK8
|—————————Node:namespace_identifier Text: ACAN2515Settings
|—————————Node::: Text: ::
|—————————Node:identifier Text: CLOCK8
|————————Node:: Text: :
|————————Node:expression_statement Text: canctrl |= 0x04 | 0x03 ;
|—————————Node:assignment_expression Text: canctrl |= 0x04 | 0x03
|——————————Node:identifier Text: canctrl
|——————————Node:|= Text: |=
|——————————Node:binary_expression Text: 0x04 | 0x03
|———————————Node:number_literal Text: 0x04
|———————————Node:| Text: |
|———————————Node:number_literal Text: 0x03
|—————————Node:; Text: ;
|————————Node:break_statement Text: break ;
|—————————Node:break Text: break
|—————————Node:; Text: ;
|———————Node:case_statement Text: case ACAN2515Settings::SOF :
      canctrl |= 0x04 ;
      break ;
|————————Node:case Text: case
|————————Node:qualified_identifier Text: ACAN2515Settings::SOF
|—————————Node:namespace_identifier Text: ACAN2515Settings
|—————————Node::: Text: ::
|—————————Node:identifier Text: SOF
|————————Node:: Text: :
|————————Node:expression_statement Text: canctrl |= 0x04 ;
|—————————Node:assignment_expression Text: canctrl |= 0x04
|——————————Node:identifier Text: canctrl
|——————————Node:|= Text: |=
|——————————Node:number_literal Text: 0x04
|—————————Node:; Text: ;
|————————Node:break_statement Text: break ;
|—————————Node:break Text: break
|—————————Node:; Text: ;
|———————Node:case_statement Text: case ACAN2515Settings::HiZ :
      break ;
|————————Node:case Text: case
|————————Node:qualified_identifier Text: ACAN2515Settings::HiZ
|—————————Node:namespace_identifier Text: ACAN2515Settings
|—————————Node::: Text: ::
|—————————Node:identifier Text: HiZ
|————————Node:: Text: :
|————————Node:break_statement Text: break ;
|—————————Node:break Text: break
|—————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:comment
|—————Node:declaration Text: const uint8_t requestedMode = (uint8_t) inSettings.mRequestedMode ;
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:primitive_type Text: uint8_t
|——————Node:init_declarator Text: requestedMode = (uint8_t) inSettings.mRequestedMode
|———————Node:identifier Text: requestedMode
|———————Node:= Text: =
|———————Node:cast_expression Text: (uint8_t) inSettings.mRequestedMode
|————————Node:( Text: (
|————————Node:type_descriptor Text: uint8_t
|—————————Node:primitive_type Text: uint8_t
|————————Node:) Text: )
|————————Node:field_expression Text: inSettings.mRequestedMode
|—————————Node:identifier Text: inSettings
|—————————Node:. Text: .
|—————————Node:field_identifier Text: mRequestedMode
|——————Node:; Text: ;
|—————Node:expression_statement Text: errorCode |= setRequestedMode (canctrl | requestedMode) ;
|——————Node:assignment_expression Text: errorCode |= setRequestedMode (canctrl | requestedMode)
|———————Node:identifier Text: errorCode
|———————Node:|= Text: |=
|———————Node:call_expression Text: setRequestedMode (canctrl | requestedMode)
|————————Node:identifier Text: setRequestedMode
|————————Node:argument_list Text: (canctrl | requestedMode)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: canctrl | requestedMode
|——————————Node:identifier Text: canctrl
|——————————Node:| Text: |
|——————————Node:identifier Text: requestedMode
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:return_statement Text: return errorCode ;
|————Node:return Text: return
|————Node:identifier Text: errorCode
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:function_definition Text: uint16_t ACAN2515::setRequestedMode (const uint8_t inCANControlRegister) {
  uint16_t errorCode = 0 ;
//--- Request mode
  mSPI.beginTransaction (mSPISettings) ;
    write2515Register (CANCTRL_REGISTER, inCANControlRegister) ;
  mSPI.endTransaction () ;
//--- Wait until requested mode is reached (during 1 or 2 ms)
  bool wait = true ;
  const uint32_t deadline = millis () + 2 ;
  while (wait) {
    mSPI.beginTransaction (mSPISettings) ;
      const uint8_t actualMode = read2515Register (CANSTAT_REGISTER) & 0xE0 ;
    mSPI.endTransaction () ;
    wait = actualMode != (inCANControlRegister & 0xE0) ;
    if (wait && (millis () >= deadline)) {
      errorCode |= kRequestedModeTimeOut ;
      wait = false ;
    }
  }
//---
  return errorCode ;
}
|——Node:primitive_type Text: uint16_t
|——Node:function_declarator Text: ACAN2515::setRequestedMode (const uint8_t inCANControlRegister)
|———Node:qualified_identifier Text: ACAN2515::setRequestedMode
|————Node:namespace_identifier Text: ACAN2515
|————Node::: Text: ::
|————Node:identifier Text: setRequestedMode
|———Node:parameter_list Text: (const uint8_t inCANControlRegister)
|————Node:( Text: (
|————Node:parameter_declaration Text: const uint8_t inCANControlRegister
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: inCANControlRegister
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint16_t errorCode = 0 ;
//--- Request mode
  mSPI.beginTransaction (mSPISettings) ;
    write2515Register (CANCTRL_REGISTER, inCANControlRegister) ;
  mSPI.endTransaction () ;
//--- Wait until requested mode is reached (during 1 or 2 ms)
  bool wait = true ;
  const uint32_t deadline = millis () + 2 ;
  while (wait) {
    mSPI.beginTransaction (mSPISettings) ;
      const uint8_t actualMode = read2515Register (CANSTAT_REGISTER) & 0xE0 ;
    mSPI.endTransaction () ;
    wait = actualMode != (inCANControlRegister & 0xE0) ;
    if (wait && (millis () >= deadline)) {
      errorCode |= kRequestedModeTimeOut ;
      wait = false ;
    }
  }
//---
  return errorCode ;
}
|———Node:{ Text: {
|———Node:declaration Text: uint16_t errorCode = 0 ;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: errorCode = 0
|—————Node:identifier Text: errorCode
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: mSPI.beginTransaction (mSPISettings) ;
|————Node:call_expression Text: mSPI.beginTransaction (mSPISettings)
|—————Node:field_expression Text: mSPI.beginTransaction
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: beginTransaction
|—————Node:argument_list Text: (mSPISettings)
|——————Node:( Text: (
|——————Node:identifier Text: mSPISettings
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: write2515Register (CANCTRL_REGISTER, inCANControlRegister) ;
|————Node:call_expression Text: write2515Register (CANCTRL_REGISTER, inCANControlRegister)
|—————Node:identifier Text: write2515Register
|—————Node:argument_list Text: (CANCTRL_REGISTER, inCANControlRegister)
|——————Node:( Text: (
|——————Node:identifier Text: CANCTRL_REGISTER
|——————Node:, Text: ,
|——————Node:identifier Text: inCANControlRegister
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mSPI.endTransaction () ;
|————Node:call_expression Text: mSPI.endTransaction ()
|—————Node:field_expression Text: mSPI.endTransaction
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: endTransaction
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:declaration Text: bool wait = true ;
|————Node:primitive_type Text: bool
|————Node:init_declarator Text: wait = true
|—————Node:identifier Text: wait
|—————Node:= Text: =
|—————Node:true Text: true
|————Node:; Text: ;
|———Node:declaration Text: const uint32_t deadline = millis () + 2 ;
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: deadline = millis () + 2
|—————Node:identifier Text: deadline
|—————Node:= Text: =
|—————Node:binary_expression Text: millis () + 2
|——————Node:call_expression Text: millis ()
|———————Node:identifier Text: millis
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:+ Text: +
|——————Node:number_literal Text: 2
|————Node:; Text: ;
|———Node:while_statement Text: while (wait) {
    mSPI.beginTransaction (mSPISettings) ;
      const uint8_t actualMode = read2515Register (CANSTAT_REGISTER) & 0xE0 ;
    mSPI.endTransaction () ;
    wait = actualMode != (inCANControlRegister & 0xE0) ;
    if (wait && (millis () >= deadline)) {
      errorCode |= kRequestedModeTimeOut ;
      wait = false ;
    }
  }
|————Node:while Text: while
|————Node:condition_clause Text: (wait)
|—————Node:( Text: (
|—————Node:identifier Text: wait
|—————Node:) Text: )
|————Node:compound_statement Text: {
    mSPI.beginTransaction (mSPISettings) ;
      const uint8_t actualMode = read2515Register (CANSTAT_REGISTER) & 0xE0 ;
    mSPI.endTransaction () ;
    wait = actualMode != (inCANControlRegister & 0xE0) ;
    if (wait && (millis () >= deadline)) {
      errorCode |= kRequestedModeTimeOut ;
      wait = false ;
    }
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: mSPI.beginTransaction (mSPISettings) ;
|——————Node:call_expression Text: mSPI.beginTransaction (mSPISettings)
|———————Node:field_expression Text: mSPI.beginTransaction
|————————Node:identifier Text: mSPI
|————————Node:. Text: .
|————————Node:field_identifier Text: beginTransaction
|———————Node:argument_list Text: (mSPISettings)
|————————Node:( Text: (
|————————Node:identifier Text: mSPISettings
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:declaration Text: const uint8_t actualMode = read2515Register (CANSTAT_REGISTER) & 0xE0 ;
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:primitive_type Text: uint8_t
|——————Node:init_declarator Text: actualMode = read2515Register (CANSTAT_REGISTER) & 0xE0
|———————Node:identifier Text: actualMode
|———————Node:= Text: =
|———————Node:binary_expression Text: read2515Register (CANSTAT_REGISTER) & 0xE0
|————————Node:call_expression Text: read2515Register (CANSTAT_REGISTER)
|—————————Node:identifier Text: read2515Register
|—————————Node:argument_list Text: (CANSTAT_REGISTER)
|——————————Node:( Text: (
|——————————Node:identifier Text: CANSTAT_REGISTER
|——————————Node:) Text: )
|————————Node:& Text: &
|————————Node:number_literal Text: 0xE0
|——————Node:; Text: ;
|—————Node:expression_statement Text: mSPI.endTransaction () ;
|——————Node:call_expression Text: mSPI.endTransaction ()
|———————Node:field_expression Text: mSPI.endTransaction
|————————Node:identifier Text: mSPI
|————————Node:. Text: .
|————————Node:field_identifier Text: endTransaction
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: wait = actualMode != (inCANControlRegister & 0xE0) ;
|——————Node:assignment_expression Text: wait = actualMode != (inCANControlRegister & 0xE0)
|———————Node:identifier Text: wait
|———————Node:= Text: =
|———————Node:binary_expression Text: actualMode != (inCANControlRegister & 0xE0)
|————————Node:identifier Text: actualMode
|————————Node:!= Text: !=
|————————Node:parenthesized_expression Text: (inCANControlRegister & 0xE0)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: inCANControlRegister & 0xE0
|——————————Node:identifier Text: inCANControlRegister
|——————————Node:& Text: &
|——————————Node:number_literal Text: 0xE0
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (wait && (millis () >= deadline)) {
      errorCode |= kRequestedModeTimeOut ;
      wait = false ;
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: (wait && (millis () >= deadline))
|———————Node:( Text: (
|———————Node:binary_expression Text: wait && (millis () >= deadline)
|————————Node:identifier Text: wait
|————————Node:&& Text: &&
|————————Node:parenthesized_expression Text: (millis () >= deadline)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: millis () >= deadline
|——————————Node:call_expression Text: millis ()
|———————————Node:identifier Text: millis
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:>= Text: >=
|——————————Node:identifier Text: deadline
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {
      errorCode |= kRequestedModeTimeOut ;
      wait = false ;
    }
|———————Node:{ Text: {
|———————Node:expression_statement Text: errorCode |= kRequestedModeTimeOut ;
|————————Node:assignment_expression Text: errorCode |= kRequestedModeTimeOut
|—————————Node:identifier Text: errorCode
|—————————Node:|= Text: |=
|—————————Node:identifier Text: kRequestedModeTimeOut
|————————Node:; Text: ;
|———————Node:expression_statement Text: wait = false ;
|————————Node:assignment_expression Text: wait = false
|—————————Node:identifier Text: wait
|—————————Node:= Text: =
|—————————Node:false Text: false
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:comment
|———Node:return_statement Text: return errorCode ;
|————Node:return Text: return
|————Node:identifier Text: errorCode
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:function_definition Text: uint16_t ACAN2515::changeModeOnTheFly (const ACAN2515Settings::RequestedMode inRequestedMode) {
//--- Read current mode register (for saving settings of bits 0 ... 4)
  mSPI.beginTransaction (mSPISettings) ;
    const uint8_t currentMode = read2515Register (CANCTRL_REGISTER) ;
  mSPI.endTransaction () ;
//--- New mode
  const uint8_t newMode = (currentMode & 0x1F) | (uint8_t) inRequestedMode ;
//--- Set new mode
  const uint16_t errorCode = setRequestedMode (newMode) ;
//---
  return errorCode ;
}
|——Node:primitive_type Text: uint16_t
|——Node:function_declarator Text: ACAN2515::changeModeOnTheFly (const ACAN2515Settings::RequestedMode inRequestedMode)
|———Node:qualified_identifier Text: ACAN2515::changeModeOnTheFly
|————Node:namespace_identifier Text: ACAN2515
|————Node::: Text: ::
|————Node:identifier Text: changeModeOnTheFly
|———Node:parameter_list Text: (const ACAN2515Settings::RequestedMode inRequestedMode)
|————Node:( Text: (
|————Node:parameter_declaration Text: const ACAN2515Settings::RequestedMode inRequestedMode
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:qualified_identifier Text: ACAN2515Settings::RequestedMode
|——————Node:namespace_identifier Text: ACAN2515Settings
|——————Node::: Text: ::
|——————Node:type_identifier Text: RequestedMode
|—————Node:identifier Text: inRequestedMode
|————Node:) Text: )
|——Node:compound_statement Text: {
//--- Read current mode register (for saving settings of bits 0 ... 4)
  mSPI.beginTransaction (mSPISettings) ;
    const uint8_t currentMode = read2515Register (CANCTRL_REGISTER) ;
  mSPI.endTransaction () ;
//--- New mode
  const uint8_t newMode = (currentMode & 0x1F) | (uint8_t) inRequestedMode ;
//--- Set new mode
  const uint16_t errorCode = setRequestedMode (newMode) ;
//---
  return errorCode ;
}
|———Node:{ Text: {
|———Node:comment
|———Node:expression_statement Text: mSPI.beginTransaction (mSPISettings) ;
|————Node:call_expression Text: mSPI.beginTransaction (mSPISettings)
|—————Node:field_expression Text: mSPI.beginTransaction
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: beginTransaction
|—————Node:argument_list Text: (mSPISettings)
|——————Node:( Text: (
|——————Node:identifier Text: mSPISettings
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: const uint8_t currentMode = read2515Register (CANCTRL_REGISTER) ;
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: currentMode = read2515Register (CANCTRL_REGISTER)
|—————Node:identifier Text: currentMode
|—————Node:= Text: =
|—————Node:call_expression Text: read2515Register (CANCTRL_REGISTER)
|——————Node:identifier Text: read2515Register
|——————Node:argument_list Text: (CANCTRL_REGISTER)
|———————Node:( Text: (
|———————Node:identifier Text: CANCTRL_REGISTER
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mSPI.endTransaction () ;
|————Node:call_expression Text: mSPI.endTransaction ()
|—————Node:field_expression Text: mSPI.endTransaction
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: endTransaction
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:declaration Text: const uint8_t newMode = (currentMode & 0x1F) | (uint8_t) inRequestedMode ;
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: newMode = (currentMode & 0x1F) | (uint8_t) inRequestedMode
|—————Node:identifier Text: newMode
|—————Node:= Text: =
|—————Node:binary_expression Text: (currentMode & 0x1F) | (uint8_t) inRequestedMode
|——————Node:parenthesized_expression Text: (currentMode & 0x1F)
|———————Node:( Text: (
|———————Node:binary_expression Text: currentMode & 0x1F
|————————Node:identifier Text: currentMode
|————————Node:& Text: &
|————————Node:number_literal Text: 0x1F
|———————Node:) Text: )
|——————Node:| Text: |
|——————Node:cast_expression Text: (uint8_t) inRequestedMode
|———————Node:( Text: (
|———————Node:type_descriptor Text: uint8_t
|————————Node:primitive_type Text: uint8_t
|———————Node:) Text: )
|———————Node:identifier Text: inRequestedMode
|————Node:; Text: ;
|———Node:comment
|———Node:declaration Text: const uint16_t errorCode = setRequestedMode (newMode) ;
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: errorCode = setRequestedMode (newMode)
|—————Node:identifier Text: errorCode
|—————Node:= Text: =
|—————Node:call_expression Text: setRequestedMode (newMode)
|——————Node:identifier Text: setRequestedMode
|——————Node:argument_list Text: (newMode)
|———————Node:( Text: (
|———————Node:identifier Text: newMode
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:return_statement Text: return errorCode ;
|————Node:return Text: return
|————Node:identifier Text: errorCode
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:function_definition Text: uint16_t ACAN2515::setFiltersOnTheFly (void) {
  return internalSetFiltersOnTheFly (ACAN2515Mask (), ACAN2515Mask (), NULL, 0) ;
}
|——Node:primitive_type Text: uint16_t
|——Node:function_declarator Text: ACAN2515::setFiltersOnTheFly (void)
|———Node:qualified_identifier Text: ACAN2515::setFiltersOnTheFly
|————Node:namespace_identifier Text: ACAN2515
|————Node::: Text: ::
|————Node:identifier Text: setFiltersOnTheFly
|———Node:parameter_list Text: (void)
|————Node:( Text: (
|————Node:parameter_declaration Text: void
|—————Node:primitive_type Text: void
|————Node:) Text: )
|——Node:compound_statement Text: {
  return internalSetFiltersOnTheFly (ACAN2515Mask (), ACAN2515Mask (), NULL, 0) ;
}
|———Node:{ Text: {
|———Node:return_statement Text: return internalSetFiltersOnTheFly (ACAN2515Mask (), ACAN2515Mask (), NULL, 0) ;
|————Node:return Text: return
|————Node:call_expression Text: internalSetFiltersOnTheFly (ACAN2515Mask (), ACAN2515Mask (), NULL, 0)
|—————Node:identifier Text: internalSetFiltersOnTheFly
|—————Node:argument_list Text: (ACAN2515Mask (), ACAN2515Mask (), NULL, 0)
|——————Node:( Text: (
|——————Node:call_expression Text: ACAN2515Mask ()
|———————Node:identifier Text: ACAN2515Mask
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:, Text: ,
|——————Node:call_expression Text: ACAN2515Mask ()
|———————Node:identifier Text: ACAN2515Mask
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:, Text: ,
|——————Node:null Text: NULL
|———————Node:NULL Text: NULL
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: uint16_t ACAN2515::setFiltersOnTheFly (const ACAN2515Mask inRXM0,
                                       const ACAN2515AcceptanceFilter inAcceptanceFilters [],
                                       const uint8_t inAcceptanceFilterCount) {
  uint16_t errorCode = 0 ;
  if (inAcceptanceFilterCount == 0) {
    errorCode = kOneFilterMaskRequiresOneOrTwoAcceptanceFilters ;
  }else if (inAcceptanceFilterCount > 2) {
    errorCode = kOneFilterMaskRequiresOneOrTwoAcceptanceFilters ;
  }else if (inAcceptanceFilters == NULL) {
    errorCode = kAcceptanceFilterArrayIsNULL ;
  }else{
    errorCode = internalSetFiltersOnTheFly (inRXM0, ACAN2515Mask (), inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
  return errorCode ;
}
|——Node:primitive_type Text: uint16_t
|——Node:function_declarator Text: ACAN2515::setFiltersOnTheFly (const ACAN2515Mask inRXM0,
                                       const ACAN2515AcceptanceFilter inAcceptanceFilters [],
                                       const uint8_t inAcceptanceFilterCount)
|———Node:qualified_identifier Text: ACAN2515::setFiltersOnTheFly
|————Node:namespace_identifier Text: ACAN2515
|————Node::: Text: ::
|————Node:identifier Text: setFiltersOnTheFly
|———Node:parameter_list Text: (const ACAN2515Mask inRXM0,
                                       const ACAN2515AcceptanceFilter inAcceptanceFilters [],
                                       const uint8_t inAcceptanceFilterCount)
|————Node:( Text: (
|————Node:parameter_declaration Text: const ACAN2515Mask inRXM0
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: ACAN2515Mask
|—————Node:identifier Text: inRXM0
|————Node:, Text: ,
|————Node:parameter_declaration Text: const ACAN2515AcceptanceFilter inAcceptanceFilters []
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: ACAN2515AcceptanceFilter
|—————Node:array_declarator Text: inAcceptanceFilters []
|——————Node:identifier Text: inAcceptanceFilters
|——————Node:[ Text: [
|——————Node:] Text: ]
|————Node:, Text: ,
|————Node:parameter_declaration Text: const uint8_t inAcceptanceFilterCount
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: inAcceptanceFilterCount
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint16_t errorCode = 0 ;
  if (inAcceptanceFilterCount == 0) {
    errorCode = kOneFilterMaskRequiresOneOrTwoAcceptanceFilters ;
  }else if (inAcceptanceFilterCount > 2) {
    errorCode = kOneFilterMaskRequiresOneOrTwoAcceptanceFilters ;
  }else if (inAcceptanceFilters == NULL) {
    errorCode = kAcceptanceFilterArrayIsNULL ;
  }else{
    errorCode = internalSetFiltersOnTheFly (inRXM0, ACAN2515Mask (), inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
  return errorCode ;
}
|———Node:{ Text: {
|———Node:declaration Text: uint16_t errorCode = 0 ;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: errorCode = 0
|—————Node:identifier Text: errorCode
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:if_statement Text: if (inAcceptanceFilterCount == 0) {
    errorCode = kOneFilterMaskRequiresOneOrTwoAcceptanceFilters ;
  }else if (inAcceptanceFilterCount > 2) {
    errorCode = kOneFilterMaskRequiresOneOrTwoAcceptanceFilters ;
  }else if (inAcceptanceFilters == NULL) {
    errorCode = kAcceptanceFilterArrayIsNULL ;
  }else{
    errorCode = internalSetFiltersOnTheFly (inRXM0, ACAN2515Mask (), inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (inAcceptanceFilterCount == 0)
|—————Node:( Text: (
|—————Node:binary_expression Text: inAcceptanceFilterCount == 0
|——————Node:identifier Text: inAcceptanceFilterCount
|——————Node:== Text: ==
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {
    errorCode = kOneFilterMaskRequiresOneOrTwoAcceptanceFilters ;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: errorCode = kOneFilterMaskRequiresOneOrTwoAcceptanceFilters ;
|——————Node:assignment_expression Text: errorCode = kOneFilterMaskRequiresOneOrTwoAcceptanceFilters
|———————Node:identifier Text: errorCode
|———————Node:= Text: =
|———————Node:identifier Text: kOneFilterMaskRequiresOneOrTwoAcceptanceFilters
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else if (inAcceptanceFilterCount > 2) {
    errorCode = kOneFilterMaskRequiresOneOrTwoAcceptanceFilters ;
  }else if (inAcceptanceFilters == NULL) {
    errorCode = kAcceptanceFilterArrayIsNULL ;
  }else{
    errorCode = internalSetFiltersOnTheFly (inRXM0, ACAN2515Mask (), inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
|—————Node:else Text: else
|—————Node:if_statement Text: if (inAcceptanceFilterCount > 2) {
    errorCode = kOneFilterMaskRequiresOneOrTwoAcceptanceFilters ;
  }else if (inAcceptanceFilters == NULL) {
    errorCode = kAcceptanceFilterArrayIsNULL ;
  }else{
    errorCode = internalSetFiltersOnTheFly (inRXM0, ACAN2515Mask (), inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
|——————Node:if Text: if
|——————Node:condition_clause Text: (inAcceptanceFilterCount > 2)
|———————Node:( Text: (
|———————Node:binary_expression Text: inAcceptanceFilterCount > 2
|————————Node:identifier Text: inAcceptanceFilterCount
|————————Node:> Text: >
|————————Node:number_literal Text: 2
|———————Node:) Text: )
|——————Node:compound_statement Text: {
    errorCode = kOneFilterMaskRequiresOneOrTwoAcceptanceFilters ;
  }
|———————Node:{ Text: {
|———————Node:expression_statement Text: errorCode = kOneFilterMaskRequiresOneOrTwoAcceptanceFilters ;
|————————Node:assignment_expression Text: errorCode = kOneFilterMaskRequiresOneOrTwoAcceptanceFilters
|—————————Node:identifier Text: errorCode
|—————————Node:= Text: =
|—————————Node:identifier Text: kOneFilterMaskRequiresOneOrTwoAcceptanceFilters
|————————Node:; Text: ;
|———————Node:} Text: }
|——————Node:else_clause Text: else if (inAcceptanceFilters == NULL) {
    errorCode = kAcceptanceFilterArrayIsNULL ;
  }else{
    errorCode = internalSetFiltersOnTheFly (inRXM0, ACAN2515Mask (), inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
|———————Node:else Text: else
|———————Node:if_statement Text: if (inAcceptanceFilters == NULL) {
    errorCode = kAcceptanceFilterArrayIsNULL ;
  }else{
    errorCode = internalSetFiltersOnTheFly (inRXM0, ACAN2515Mask (), inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
|————————Node:if Text: if
|————————Node:condition_clause Text: (inAcceptanceFilters == NULL)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: inAcceptanceFilters == NULL
|——————————Node:identifier Text: inAcceptanceFilters
|——————————Node:== Text: ==
|——————————Node:null Text: NULL
|———————————Node:NULL Text: NULL
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
    errorCode = kAcceptanceFilterArrayIsNULL ;
  }
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: errorCode = kAcceptanceFilterArrayIsNULL ;
|——————————Node:assignment_expression Text: errorCode = kAcceptanceFilterArrayIsNULL
|———————————Node:identifier Text: errorCode
|———————————Node:= Text: =
|———————————Node:identifier Text: kAcceptanceFilterArrayIsNULL
|——————————Node:; Text: ;
|—————————Node:} Text: }
|————————Node:else_clause Text: else{
    errorCode = internalSetFiltersOnTheFly (inRXM0, ACAN2515Mask (), inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
|—————————Node:else Text: else
|—————————Node:compound_statement Text: {
    errorCode = internalSetFiltersOnTheFly (inRXM0, ACAN2515Mask (), inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
|——————————Node:{ Text: {
|——————————Node:expression_statement Text: errorCode = internalSetFiltersOnTheFly (inRXM0, ACAN2515Mask (), inAcceptanceFilters, inAcceptanceFilterCount) ;
|———————————Node:assignment_expression Text: errorCode = internalSetFiltersOnTheFly (inRXM0, ACAN2515Mask (), inAcceptanceFilters, inAcceptanceFilterCount)
|————————————Node:identifier Text: errorCode
|————————————Node:= Text: =
|————————————Node:call_expression Text: internalSetFiltersOnTheFly (inRXM0, ACAN2515Mask (), inAcceptanceFilters, inAcceptanceFilterCount)
|—————————————Node:identifier Text: internalSetFiltersOnTheFly
|—————————————Node:argument_list Text: (inRXM0, ACAN2515Mask (), inAcceptanceFilters, inAcceptanceFilterCount)
|——————————————Node:( Text: (
|——————————————Node:identifier Text: inRXM0
|——————————————Node:, Text: ,
|——————————————Node:call_expression Text: ACAN2515Mask ()
|———————————————Node:identifier Text: ACAN2515Mask
|———————————————Node:argument_list Text: ()
|————————————————Node:( Text: (
|————————————————Node:) Text: )
|——————————————Node:, Text: ,
|——————————————Node:identifier Text: inAcceptanceFilters
|——————————————Node:, Text: ,
|——————————————Node:identifier Text: inAcceptanceFilterCount
|——————————————Node:) Text: )
|———————————Node:; Text: ;
|——————————Node:} Text: }
|———Node:return_statement Text: return errorCode ;
|————Node:return Text: return
|————Node:identifier Text: errorCode
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: uint16_t ACAN2515::setFiltersOnTheFly (const ACAN2515Mask inRXM0,
                                       const ACAN2515Mask inRXM1,
                                       const ACAN2515AcceptanceFilter inAcceptanceFilters [],
                                       const uint8_t inAcceptanceFilterCount) {
  uint16_t errorCode = 0 ;
  if (inAcceptanceFilterCount < 3) {
    errorCode = kTwoFilterMasksRequireThreeToSixAcceptanceFilters ;
  }else if (inAcceptanceFilterCount > 6) {
    errorCode = kTwoFilterMasksRequireThreeToSixAcceptanceFilters ;
  }else if (inAcceptanceFilters == NULL) {
    errorCode = kAcceptanceFilterArrayIsNULL ;
  }else{
    errorCode = internalSetFiltersOnTheFly (inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
  return errorCode ;
}
|——Node:primitive_type Text: uint16_t
|——Node:function_declarator Text: ACAN2515::setFiltersOnTheFly (const ACAN2515Mask inRXM0,
                                       const ACAN2515Mask inRXM1,
                                       const ACAN2515AcceptanceFilter inAcceptanceFilters [],
                                       const uint8_t inAcceptanceFilterCount)
|———Node:qualified_identifier Text: ACAN2515::setFiltersOnTheFly
|————Node:namespace_identifier Text: ACAN2515
|————Node::: Text: ::
|————Node:identifier Text: setFiltersOnTheFly
|———Node:parameter_list Text: (const ACAN2515Mask inRXM0,
                                       const ACAN2515Mask inRXM1,
                                       const ACAN2515AcceptanceFilter inAcceptanceFilters [],
                                       const uint8_t inAcceptanceFilterCount)
|————Node:( Text: (
|————Node:parameter_declaration Text: const ACAN2515Mask inRXM0
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: ACAN2515Mask
|—————Node:identifier Text: inRXM0
|————Node:, Text: ,
|————Node:parameter_declaration Text: const ACAN2515Mask inRXM1
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: ACAN2515Mask
|—————Node:identifier Text: inRXM1
|————Node:, Text: ,
|————Node:parameter_declaration Text: const ACAN2515AcceptanceFilter inAcceptanceFilters []
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: ACAN2515AcceptanceFilter
|—————Node:array_declarator Text: inAcceptanceFilters []
|——————Node:identifier Text: inAcceptanceFilters
|——————Node:[ Text: [
|——————Node:] Text: ]
|————Node:, Text: ,
|————Node:parameter_declaration Text: const uint8_t inAcceptanceFilterCount
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: inAcceptanceFilterCount
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint16_t errorCode = 0 ;
  if (inAcceptanceFilterCount < 3) {
    errorCode = kTwoFilterMasksRequireThreeToSixAcceptanceFilters ;
  }else if (inAcceptanceFilterCount > 6) {
    errorCode = kTwoFilterMasksRequireThreeToSixAcceptanceFilters ;
  }else if (inAcceptanceFilters == NULL) {
    errorCode = kAcceptanceFilterArrayIsNULL ;
  }else{
    errorCode = internalSetFiltersOnTheFly (inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
  return errorCode ;
}
|———Node:{ Text: {
|———Node:declaration Text: uint16_t errorCode = 0 ;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: errorCode = 0
|—————Node:identifier Text: errorCode
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:if_statement Text: if (inAcceptanceFilterCount < 3) {
    errorCode = kTwoFilterMasksRequireThreeToSixAcceptanceFilters ;
  }else if (inAcceptanceFilterCount > 6) {
    errorCode = kTwoFilterMasksRequireThreeToSixAcceptanceFilters ;
  }else if (inAcceptanceFilters == NULL) {
    errorCode = kAcceptanceFilterArrayIsNULL ;
  }else{
    errorCode = internalSetFiltersOnTheFly (inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (inAcceptanceFilterCount < 3)
|—————Node:( Text: (
|—————Node:binary_expression Text: inAcceptanceFilterCount < 3
|——————Node:identifier Text: inAcceptanceFilterCount
|——————Node:< Text: <
|——————Node:number_literal Text: 3
|—————Node:) Text: )
|————Node:compound_statement Text: {
    errorCode = kTwoFilterMasksRequireThreeToSixAcceptanceFilters ;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: errorCode = kTwoFilterMasksRequireThreeToSixAcceptanceFilters ;
|——————Node:assignment_expression Text: errorCode = kTwoFilterMasksRequireThreeToSixAcceptanceFilters
|———————Node:identifier Text: errorCode
|———————Node:= Text: =
|———————Node:identifier Text: kTwoFilterMasksRequireThreeToSixAcceptanceFilters
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else if (inAcceptanceFilterCount > 6) {
    errorCode = kTwoFilterMasksRequireThreeToSixAcceptanceFilters ;
  }else if (inAcceptanceFilters == NULL) {
    errorCode = kAcceptanceFilterArrayIsNULL ;
  }else{
    errorCode = internalSetFiltersOnTheFly (inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
|—————Node:else Text: else
|—————Node:if_statement Text: if (inAcceptanceFilterCount > 6) {
    errorCode = kTwoFilterMasksRequireThreeToSixAcceptanceFilters ;
  }else if (inAcceptanceFilters == NULL) {
    errorCode = kAcceptanceFilterArrayIsNULL ;
  }else{
    errorCode = internalSetFiltersOnTheFly (inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
|——————Node:if Text: if
|——————Node:condition_clause Text: (inAcceptanceFilterCount > 6)
|———————Node:( Text: (
|———————Node:binary_expression Text: inAcceptanceFilterCount > 6
|————————Node:identifier Text: inAcceptanceFilterCount
|————————Node:> Text: >
|————————Node:number_literal Text: 6
|———————Node:) Text: )
|——————Node:compound_statement Text: {
    errorCode = kTwoFilterMasksRequireThreeToSixAcceptanceFilters ;
  }
|———————Node:{ Text: {
|———————Node:expression_statement Text: errorCode = kTwoFilterMasksRequireThreeToSixAcceptanceFilters ;
|————————Node:assignment_expression Text: errorCode = kTwoFilterMasksRequireThreeToSixAcceptanceFilters
|—————————Node:identifier Text: errorCode
|—————————Node:= Text: =
|—————————Node:identifier Text: kTwoFilterMasksRequireThreeToSixAcceptanceFilters
|————————Node:; Text: ;
|———————Node:} Text: }
|——————Node:else_clause Text: else if (inAcceptanceFilters == NULL) {
    errorCode = kAcceptanceFilterArrayIsNULL ;
  }else{
    errorCode = internalSetFiltersOnTheFly (inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
|———————Node:else Text: else
|———————Node:if_statement Text: if (inAcceptanceFilters == NULL) {
    errorCode = kAcceptanceFilterArrayIsNULL ;
  }else{
    errorCode = internalSetFiltersOnTheFly (inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
|————————Node:if Text: if
|————————Node:condition_clause Text: (inAcceptanceFilters == NULL)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: inAcceptanceFilters == NULL
|——————————Node:identifier Text: inAcceptanceFilters
|——————————Node:== Text: ==
|——————————Node:null Text: NULL
|———————————Node:NULL Text: NULL
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
    errorCode = kAcceptanceFilterArrayIsNULL ;
  }
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: errorCode = kAcceptanceFilterArrayIsNULL ;
|——————————Node:assignment_expression Text: errorCode = kAcceptanceFilterArrayIsNULL
|———————————Node:identifier Text: errorCode
|———————————Node:= Text: =
|———————————Node:identifier Text: kAcceptanceFilterArrayIsNULL
|——————————Node:; Text: ;
|—————————Node:} Text: }
|————————Node:else_clause Text: else{
    errorCode = internalSetFiltersOnTheFly (inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
|—————————Node:else Text: else
|—————————Node:compound_statement Text: {
    errorCode = internalSetFiltersOnTheFly (inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount) ;
  }
|——————————Node:{ Text: {
|——————————Node:expression_statement Text: errorCode = internalSetFiltersOnTheFly (inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount) ;
|———————————Node:assignment_expression Text: errorCode = internalSetFiltersOnTheFly (inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount)
|————————————Node:identifier Text: errorCode
|————————————Node:= Text: =
|————————————Node:call_expression Text: internalSetFiltersOnTheFly (inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount)
|—————————————Node:identifier Text: internalSetFiltersOnTheFly
|—————————————Node:argument_list Text: (inRXM0, inRXM1, inAcceptanceFilters, inAcceptanceFilterCount)
|——————————————Node:( Text: (
|——————————————Node:identifier Text: inRXM0
|——————————————Node:, Text: ,
|——————————————Node:identifier Text: inRXM1
|——————————————Node:, Text: ,
|——————————————Node:identifier Text: inAcceptanceFilters
|——————————————Node:, Text: ,
|——————————————Node:identifier Text: inAcceptanceFilterCount
|——————————————Node:) Text: )
|———————————Node:; Text: ;
|——————————Node:} Text: }
|———Node:return_statement Text: return errorCode ;
|————Node:return Text: return
|————Node:identifier Text: errorCode
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: uint16_t ACAN2515::internalSetFiltersOnTheFly (const ACAN2515Mask inRXM0,
                                               const ACAN2515Mask inRXM1,
                                               const ACAN2515AcceptanceFilter inAcceptanceFilters [],
                                               const uint8_t inAcceptanceFilterCount) {
//--- Read current mode register
  mSPI.beginTransaction (mSPISettings) ;
    const uint8_t currentMode = read2515Register (CANCTRL_REGISTER) ;
  mSPI.endTransaction () ;
//--- Request configuration mode
  const uint8_t configurationMode = (currentMode & 0x1F) | (0b100 << 5) ; // Preserve bits 0 ... 4
  uint16_t errorCode = setRequestedMode (configurationMode) ;
//--- Setup mask registers
  if (errorCode == 0) {
    const uint8_t acceptAll = (inAcceptanceFilterCount == 0) ? 0x60 : 0x00 ;
    write2515Register (RXB0CTRL_REGISTER, acceptAll | (uint8_t (mRolloverEnable) << 2)) ;
    write2515Register (RXB1CTRL_REGISTER, acceptAll) ;
    setupMaskRegister (inRXM0, RXM0SIDH_REGISTER) ;
    setupMaskRegister (inRXM1, RXM1SIDH_REGISTER) ;
    if (inAcceptanceFilterCount > 0) {
      uint8_t idx = 0 ;
      while (idx < inAcceptanceFilterCount) {
        setupMaskRegister (inAcceptanceFilters [idx].mMask, RXFSIDH_REGISTER [idx]) ;
        mCallBackFunctionArray [idx] = inAcceptanceFilters [idx].mCallBack ;
        idx += 1 ;
      }
      while (idx < 6) {
        setupMaskRegister (inAcceptanceFilters [inAcceptanceFilterCount-1].mMask, RXFSIDH_REGISTER [idx]) ;
        mCallBackFunctionArray [idx] = inAcceptanceFilters [inAcceptanceFilterCount-1].mCallBack ;
        idx += 1 ;
      }
    }
  }
//--- Restore saved mode
  if (errorCode == 0) {
    errorCode = setRequestedMode (currentMode) ;
  }
//---
  return errorCode ;
}
|——Node:primitive_type Text: uint16_t
|——Node:function_declarator Text: ACAN2515::internalSetFiltersOnTheFly (const ACAN2515Mask inRXM0,
                                               const ACAN2515Mask inRXM1,
                                               const ACAN2515AcceptanceFilter inAcceptanceFilters [],
                                               const uint8_t inAcceptanceFilterCount)
|———Node:qualified_identifier Text: ACAN2515::internalSetFiltersOnTheFly
|————Node:namespace_identifier Text: ACAN2515
|————Node::: Text: ::
|————Node:identifier Text: internalSetFiltersOnTheFly
|———Node:parameter_list Text: (const ACAN2515Mask inRXM0,
                                               const ACAN2515Mask inRXM1,
                                               const ACAN2515AcceptanceFilter inAcceptanceFilters [],
                                               const uint8_t inAcceptanceFilterCount)
|————Node:( Text: (
|————Node:parameter_declaration Text: const ACAN2515Mask inRXM0
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: ACAN2515Mask
|—————Node:identifier Text: inRXM0
|————Node:, Text: ,
|————Node:parameter_declaration Text: const ACAN2515Mask inRXM1
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: ACAN2515Mask
|—————Node:identifier Text: inRXM1
|————Node:, Text: ,
|————Node:parameter_declaration Text: const ACAN2515AcceptanceFilter inAcceptanceFilters []
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: ACAN2515AcceptanceFilter
|—————Node:array_declarator Text: inAcceptanceFilters []
|——————Node:identifier Text: inAcceptanceFilters
|——————Node:[ Text: [
|——————Node:] Text: ]
|————Node:, Text: ,
|————Node:parameter_declaration Text: const uint8_t inAcceptanceFilterCount
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: inAcceptanceFilterCount
|————Node:) Text: )
|——Node:compound_statement Text: {
//--- Read current mode register
  mSPI.beginTransaction (mSPISettings) ;
    const uint8_t currentMode = read2515Register (CANCTRL_REGISTER) ;
  mSPI.endTransaction () ;
//--- Request configuration mode
  const uint8_t configurationMode = (currentMode & 0x1F) | (0b100 << 5) ; // Preserve bits 0 ... 4
  uint16_t errorCode = setRequestedMode (configurationMode) ;
//--- Setup mask registers
  if (errorCode == 0) {
    const uint8_t acceptAll = (inAcceptanceFilterCount == 0) ? 0x60 : 0x00 ;
    write2515Register (RXB0CTRL_REGISTER, acceptAll | (uint8_t (mRolloverEnable) << 2)) ;
    write2515Register (RXB1CTRL_REGISTER, acceptAll) ;
    setupMaskRegister (inRXM0, RXM0SIDH_REGISTER) ;
    setupMaskRegister (inRXM1, RXM1SIDH_REGISTER) ;
    if (inAcceptanceFilterCount > 0) {
      uint8_t idx = 0 ;
      while (idx < inAcceptanceFilterCount) {
        setupMaskRegister (inAcceptanceFilters [idx].mMask, RXFSIDH_REGISTER [idx]) ;
        mCallBackFunctionArray [idx] = inAcceptanceFilters [idx].mCallBack ;
        idx += 1 ;
      }
      while (idx < 6) {
        setupMaskRegister (inAcceptanceFilters [inAcceptanceFilterCount-1].mMask, RXFSIDH_REGISTER [idx]) ;
        mCallBackFunctionArray [idx] = inAcceptanceFilters [inAcceptanceFilterCount-1].mCallBack ;
        idx += 1 ;
      }
    }
  }
//--- Restore saved mode
  if (errorCode == 0) {
    errorCode = setRequestedMode (currentMode) ;
  }
//---
  return errorCode ;
}
|———Node:{ Text: {
|———Node:comment
|———Node:expression_statement Text: mSPI.beginTransaction (mSPISettings) ;
|————Node:call_expression Text: mSPI.beginTransaction (mSPISettings)
|—————Node:field_expression Text: mSPI.beginTransaction
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: beginTransaction
|—————Node:argument_list Text: (mSPISettings)
|——————Node:( Text: (
|——————Node:identifier Text: mSPISettings
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: const uint8_t currentMode = read2515Register (CANCTRL_REGISTER) ;
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: currentMode = read2515Register (CANCTRL_REGISTER)
|—————Node:identifier Text: currentMode
|—————Node:= Text: =
|—————Node:call_expression Text: read2515Register (CANCTRL_REGISTER)
|——————Node:identifier Text: read2515Register
|——————Node:argument_list Text: (CANCTRL_REGISTER)
|———————Node:( Text: (
|———————Node:identifier Text: CANCTRL_REGISTER
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mSPI.endTransaction () ;
|————Node:call_expression Text: mSPI.endTransaction ()
|—————Node:field_expression Text: mSPI.endTransaction
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: endTransaction
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:declaration Text: const uint8_t configurationMode = (currentMode & 0x1F) | (0b100 << 5) ;
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: configurationMode = (currentMode & 0x1F) | (0b100 << 5)
|—————Node:identifier Text: configurationMode
|—————Node:= Text: =
|—————Node:binary_expression Text: (currentMode & 0x1F) | (0b100 << 5)
|——————Node:parenthesized_expression Text: (currentMode & 0x1F)
|———————Node:( Text: (
|———————Node:binary_expression Text: currentMode & 0x1F
|————————Node:identifier Text: currentMode
|————————Node:& Text: &
|————————Node:number_literal Text: 0x1F
|———————Node:) Text: )
|——————Node:| Text: |
|——————Node:parenthesized_expression Text: (0b100 << 5)
|———————Node:( Text: (
|———————Node:binary_expression Text: 0b100 << 5
|————————Node:number_literal Text: 0b100
|————————Node:<< Text: <<
|————————Node:number_literal Text: 5
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:declaration Text: uint16_t errorCode = setRequestedMode (configurationMode) ;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: errorCode = setRequestedMode (configurationMode)
|—————Node:identifier Text: errorCode
|—————Node:= Text: =
|—————Node:call_expression Text: setRequestedMode (configurationMode)
|——————Node:identifier Text: setRequestedMode
|——————Node:argument_list Text: (configurationMode)
|———————Node:( Text: (
|———————Node:identifier Text: configurationMode
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:if_statement Text: if (errorCode == 0) {
    const uint8_t acceptAll = (inAcceptanceFilterCount == 0) ? 0x60 : 0x00 ;
    write2515Register (RXB0CTRL_REGISTER, acceptAll | (uint8_t (mRolloverEnable) << 2)) ;
    write2515Register (RXB1CTRL_REGISTER, acceptAll) ;
    setupMaskRegister (inRXM0, RXM0SIDH_REGISTER) ;
    setupMaskRegister (inRXM1, RXM1SIDH_REGISTER) ;
    if (inAcceptanceFilterCount > 0) {
      uint8_t idx = 0 ;
      while (idx < inAcceptanceFilterCount) {
        setupMaskRegister (inAcceptanceFilters [idx].mMask, RXFSIDH_REGISTER [idx]) ;
        mCallBackFunctionArray [idx] = inAcceptanceFilters [idx].mCallBack ;
        idx += 1 ;
      }
      while (idx < 6) {
        setupMaskRegister (inAcceptanceFilters [inAcceptanceFilterCount-1].mMask, RXFSIDH_REGISTER [idx]) ;
        mCallBackFunctionArray [idx] = inAcceptanceFilters [inAcceptanceFilterCount-1].mCallBack ;
        idx += 1 ;
      }
    }
  }
|————Node:if Text: if
|————Node:condition_clause Text: (errorCode == 0)
|—————Node:( Text: (
|—————Node:binary_expression Text: errorCode == 0
|——————Node:identifier Text: errorCode
|——————Node:== Text: ==
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {
    const uint8_t acceptAll = (inAcceptanceFilterCount == 0) ? 0x60 : 0x00 ;
    write2515Register (RXB0CTRL_REGISTER, acceptAll | (uint8_t (mRolloverEnable) << 2)) ;
    write2515Register (RXB1CTRL_REGISTER, acceptAll) ;
    setupMaskRegister (inRXM0, RXM0SIDH_REGISTER) ;
    setupMaskRegister (inRXM1, RXM1SIDH_REGISTER) ;
    if (inAcceptanceFilterCount > 0) {
      uint8_t idx = 0 ;
      while (idx < inAcceptanceFilterCount) {
        setupMaskRegister (inAcceptanceFilters [idx].mMask, RXFSIDH_REGISTER [idx]) ;
        mCallBackFunctionArray [idx] = inAcceptanceFilters [idx].mCallBack ;
        idx += 1 ;
      }
      while (idx < 6) {
        setupMaskRegister (inAcceptanceFilters [inAcceptanceFilterCount-1].mMask, RXFSIDH_REGISTER [idx]) ;
        mCallBackFunctionArray [idx] = inAcceptanceFilters [inAcceptanceFilterCount-1].mCallBack ;
        idx += 1 ;
      }
    }
  }
|—————Node:{ Text: {
|—————Node:declaration Text: const uint8_t acceptAll = (inAcceptanceFilterCount == 0) ? 0x60 : 0x00 ;
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:primitive_type Text: uint8_t
|——————Node:init_declarator Text: acceptAll = (inAcceptanceFilterCount == 0) ? 0x60 : 0x00
|———————Node:identifier Text: acceptAll
|———————Node:= Text: =
|———————Node:conditional_expression Text: (inAcceptanceFilterCount == 0) ? 0x60 : 0x00
|————————Node:parenthesized_expression Text: (inAcceptanceFilterCount == 0)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: inAcceptanceFilterCount == 0
|——————————Node:identifier Text: inAcceptanceFilterCount
|——————————Node:== Text: ==
|——————————Node:number_literal Text: 0
|—————————Node:) Text: )
|————————Node:? Text: ?
|————————Node:number_literal Text: 0x60
|————————Node:: Text: :
|————————Node:number_literal Text: 0x00
|——————Node:; Text: ;
|—————Node:expression_statement Text: write2515Register (RXB0CTRL_REGISTER, acceptAll | (uint8_t (mRolloverEnable) << 2)) ;
|——————Node:call_expression Text: write2515Register (RXB0CTRL_REGISTER, acceptAll | (uint8_t (mRolloverEnable) << 2))
|———————Node:identifier Text: write2515Register
|———————Node:argument_list Text: (RXB0CTRL_REGISTER, acceptAll | (uint8_t (mRolloverEnable) << 2))
|————————Node:( Text: (
|————————Node:identifier Text: RXB0CTRL_REGISTER
|————————Node:, Text: ,
|————————Node:binary_expression Text: acceptAll | (uint8_t (mRolloverEnable) << 2)
|—————————Node:identifier Text: acceptAll
|—————————Node:| Text: |
|—————————Node:parenthesized_expression Text: (uint8_t (mRolloverEnable) << 2)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: uint8_t (mRolloverEnable) << 2
|———————————Node:call_expression Text: uint8_t (mRolloverEnable)
|————————————Node:primitive_type Text: uint8_t
|————————————Node:argument_list Text: (mRolloverEnable)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: mRolloverEnable
|—————————————Node:) Text: )
|———————————Node:<< Text: <<
|———————————Node:number_literal Text: 2
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: write2515Register (RXB1CTRL_REGISTER, acceptAll) ;
|——————Node:call_expression Text: write2515Register (RXB1CTRL_REGISTER, acceptAll)
|———————Node:identifier Text: write2515Register
|———————Node:argument_list Text: (RXB1CTRL_REGISTER, acceptAll)
|————————Node:( Text: (
|————————Node:identifier Text: RXB1CTRL_REGISTER
|————————Node:, Text: ,
|————————Node:identifier Text: acceptAll
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: setupMaskRegister (inRXM0, RXM0SIDH_REGISTER) ;
|——————Node:call_expression Text: setupMaskRegister (inRXM0, RXM0SIDH_REGISTER)
|———————Node:identifier Text: setupMaskRegister
|———————Node:argument_list Text: (inRXM0, RXM0SIDH_REGISTER)
|————————Node:( Text: (
|————————Node:identifier Text: inRXM0
|————————Node:, Text: ,
|————————Node:identifier Text: RXM0SIDH_REGISTER
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: setupMaskRegister (inRXM1, RXM1SIDH_REGISTER) ;
|——————Node:call_expression Text: setupMaskRegister (inRXM1, RXM1SIDH_REGISTER)
|———————Node:identifier Text: setupMaskRegister
|———————Node:argument_list Text: (inRXM1, RXM1SIDH_REGISTER)
|————————Node:( Text: (
|————————Node:identifier Text: inRXM1
|————————Node:, Text: ,
|————————Node:identifier Text: RXM1SIDH_REGISTER
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (inAcceptanceFilterCount > 0) {
      uint8_t idx = 0 ;
      while (idx < inAcceptanceFilterCount) {
        setupMaskRegister (inAcceptanceFilters [idx].mMask, RXFSIDH_REGISTER [idx]) ;
        mCallBackFunctionArray [idx] = inAcceptanceFilters [idx].mCallBack ;
        idx += 1 ;
      }
      while (idx < 6) {
        setupMaskRegister (inAcceptanceFilters [inAcceptanceFilterCount-1].mMask, RXFSIDH_REGISTER [idx]) ;
        mCallBackFunctionArray [idx] = inAcceptanceFilters [inAcceptanceFilterCount-1].mCallBack ;
        idx += 1 ;
      }
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: (inAcceptanceFilterCount > 0)
|———————Node:( Text: (
|———————Node:binary_expression Text: inAcceptanceFilterCount > 0
|————————Node:identifier Text: inAcceptanceFilterCount
|————————Node:> Text: >
|————————Node:number_literal Text: 0
|———————Node:) Text: )
|——————Node:compound_statement Text: {
      uint8_t idx = 0 ;
      while (idx < inAcceptanceFilterCount) {
        setupMaskRegister (inAcceptanceFilters [idx].mMask, RXFSIDH_REGISTER [idx]) ;
        mCallBackFunctionArray [idx] = inAcceptanceFilters [idx].mCallBack ;
        idx += 1 ;
      }
      while (idx < 6) {
        setupMaskRegister (inAcceptanceFilters [inAcceptanceFilterCount-1].mMask, RXFSIDH_REGISTER [idx]) ;
        mCallBackFunctionArray [idx] = inAcceptanceFilters [inAcceptanceFilterCount-1].mCallBack ;
        idx += 1 ;
      }
    }
|———————Node:{ Text: {
|———————Node:declaration Text: uint8_t idx = 0 ;
|————————Node:primitive_type Text: uint8_t
|————————Node:init_declarator Text: idx = 0
|—————————Node:identifier Text: idx
|—————————Node:= Text: =
|—————————Node:number_literal Text: 0
|————————Node:; Text: ;
|———————Node:while_statement Text: while (idx < inAcceptanceFilterCount) {
        setupMaskRegister (inAcceptanceFilters [idx].mMask, RXFSIDH_REGISTER [idx]) ;
        mCallBackFunctionArray [idx] = inAcceptanceFilters [idx].mCallBack ;
        idx += 1 ;
      }
|————————Node:while Text: while
|————————Node:condition_clause Text: (idx < inAcceptanceFilterCount)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: idx < inAcceptanceFilterCount
|——————————Node:identifier Text: idx
|——————————Node:< Text: <
|——————————Node:identifier Text: inAcceptanceFilterCount
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
        setupMaskRegister (inAcceptanceFilters [idx].mMask, RXFSIDH_REGISTER [idx]) ;
        mCallBackFunctionArray [idx] = inAcceptanceFilters [idx].mCallBack ;
        idx += 1 ;
      }
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: setupMaskRegister (inAcceptanceFilters [idx].mMask, RXFSIDH_REGISTER [idx]) ;
|——————————Node:call_expression Text: setupMaskRegister (inAcceptanceFilters [idx].mMask, RXFSIDH_REGISTER [idx])
|———————————Node:identifier Text: setupMaskRegister
|———————————Node:argument_list Text: (inAcceptanceFilters [idx].mMask, RXFSIDH_REGISTER [idx])
|————————————Node:( Text: (
|————————————Node:field_expression Text: inAcceptanceFilters [idx].mMask
|—————————————Node:subscript_expression Text: inAcceptanceFilters [idx]
|——————————————Node:identifier Text: inAcceptanceFilters
|——————————————Node:subscript_argument_list Text: [idx]
|———————————————Node:[ Text: [
|———————————————Node:identifier Text: idx
|———————————————Node:] Text: ]
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: mMask
|————————————Node:, Text: ,
|————————————Node:subscript_expression Text: RXFSIDH_REGISTER [idx]
|—————————————Node:identifier Text: RXFSIDH_REGISTER
|—————————————Node:subscript_argument_list Text: [idx]
|——————————————Node:[ Text: [
|——————————————Node:identifier Text: idx
|——————————————Node:] Text: ]
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:expression_statement Text: mCallBackFunctionArray [idx] = inAcceptanceFilters [idx].mCallBack ;
|——————————Node:assignment_expression Text: mCallBackFunctionArray [idx] = inAcceptanceFilters [idx].mCallBack
|———————————Node:subscript_expression Text: mCallBackFunctionArray [idx]
|————————————Node:identifier Text: mCallBackFunctionArray
|————————————Node:subscript_argument_list Text: [idx]
|—————————————Node:[ Text: [
|—————————————Node:identifier Text: idx
|—————————————Node:] Text: ]
|———————————Node:= Text: =
|———————————Node:field_expression Text: inAcceptanceFilters [idx].mCallBack
|————————————Node:subscript_expression Text: inAcceptanceFilters [idx]
|—————————————Node:identifier Text: inAcceptanceFilters
|—————————————Node:subscript_argument_list Text: [idx]
|——————————————Node:[ Text: [
|——————————————Node:identifier Text: idx
|——————————————Node:] Text: ]
|————————————Node:. Text: .
|————————————Node:field_identifier Text: mCallBack
|——————————Node:; Text: ;
|—————————Node:expression_statement Text: idx += 1 ;
|——————————Node:assignment_expression Text: idx += 1
|———————————Node:identifier Text: idx
|———————————Node:+= Text: +=
|———————————Node:number_literal Text: 1
|——————————Node:; Text: ;
|—————————Node:} Text: }
|———————Node:while_statement Text: while (idx < 6) {
        setupMaskRegister (inAcceptanceFilters [inAcceptanceFilterCount-1].mMask, RXFSIDH_REGISTER [idx]) ;
        mCallBackFunctionArray [idx] = inAcceptanceFilters [inAcceptanceFilterCount-1].mCallBack ;
        idx += 1 ;
      }
|————————Node:while Text: while
|————————Node:condition_clause Text: (idx < 6)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: idx < 6
|——————————Node:identifier Text: idx
|——————————Node:< Text: <
|——————————Node:number_literal Text: 6
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
        setupMaskRegister (inAcceptanceFilters [inAcceptanceFilterCount-1].mMask, RXFSIDH_REGISTER [idx]) ;
        mCallBackFunctionArray [idx] = inAcceptanceFilters [inAcceptanceFilterCount-1].mCallBack ;
        idx += 1 ;
      }
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: setupMaskRegister (inAcceptanceFilters [inAcceptanceFilterCount-1].mMask, RXFSIDH_REGISTER [idx]) ;
|——————————Node:call_expression Text: setupMaskRegister (inAcceptanceFilters [inAcceptanceFilterCount-1].mMask, RXFSIDH_REGISTER [idx])
|———————————Node:identifier Text: setupMaskRegister
|———————————Node:argument_list Text: (inAcceptanceFilters [inAcceptanceFilterCount-1].mMask, RXFSIDH_REGISTER [idx])
|————————————Node:( Text: (
|————————————Node:field_expression Text: inAcceptanceFilters [inAcceptanceFilterCount-1].mMask
|—————————————Node:subscript_expression Text: inAcceptanceFilters [inAcceptanceFilterCount-1]
|——————————————Node:identifier Text: inAcceptanceFilters
|——————————————Node:subscript_argument_list Text: [inAcceptanceFilterCount-1]
|———————————————Node:[ Text: [
|———————————————Node:binary_expression Text: inAcceptanceFilterCount-1
|————————————————Node:identifier Text: inAcceptanceFilterCount
|————————————————Node:- Text: -
|————————————————Node:number_literal Text: 1
|———————————————Node:] Text: ]
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: mMask
|————————————Node:, Text: ,
|————————————Node:subscript_expression Text: RXFSIDH_REGISTER [idx]
|—————————————Node:identifier Text: RXFSIDH_REGISTER
|—————————————Node:subscript_argument_list Text: [idx]
|——————————————Node:[ Text: [
|——————————————Node:identifier Text: idx
|——————————————Node:] Text: ]
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:expression_statement Text: mCallBackFunctionArray [idx] = inAcceptanceFilters [inAcceptanceFilterCount-1].mCallBack ;
|——————————Node:assignment_expression Text: mCallBackFunctionArray [idx] = inAcceptanceFilters [inAcceptanceFilterCount-1].mCallBack
|———————————Node:subscript_expression Text: mCallBackFunctionArray [idx]
|————————————Node:identifier Text: mCallBackFunctionArray
|————————————Node:subscript_argument_list Text: [idx]
|—————————————Node:[ Text: [
|—————————————Node:identifier Text: idx
|—————————————Node:] Text: ]
|———————————Node:= Text: =
|———————————Node:field_expression Text: inAcceptanceFilters [inAcceptanceFilterCount-1].mCallBack
|————————————Node:subscript_expression Text: inAcceptanceFilters [inAcceptanceFilterCount-1]
|—————————————Node:identifier Text: inAcceptanceFilters
|—————————————Node:subscript_argument_list Text: [inAcceptanceFilterCount-1]
|——————————————Node:[ Text: [
|——————————————Node:binary_expression Text: inAcceptanceFilterCount-1
|———————————————Node:identifier Text: inAcceptanceFilterCount
|———————————————Node:- Text: -
|———————————————Node:number_literal Text: 1
|——————————————Node:] Text: ]
|————————————Node:. Text: .
|————————————Node:field_identifier Text: mCallBack
|——————————Node:; Text: ;
|—————————Node:expression_statement Text: idx += 1 ;
|——————————Node:assignment_expression Text: idx += 1
|———————————Node:identifier Text: idx
|———————————Node:+= Text: +=
|———————————Node:number_literal Text: 1
|——————————Node:; Text: ;
|—————————Node:} Text: }
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:comment
|———Node:if_statement Text: if (errorCode == 0) {
    errorCode = setRequestedMode (currentMode) ;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (errorCode == 0)
|—————Node:( Text: (
|—————Node:binary_expression Text: errorCode == 0
|——————Node:identifier Text: errorCode
|——————Node:== Text: ==
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {
    errorCode = setRequestedMode (currentMode) ;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: errorCode = setRequestedMode (currentMode) ;
|——————Node:assignment_expression Text: errorCode = setRequestedMode (currentMode)
|———————Node:identifier Text: errorCode
|———————Node:= Text: =
|———————Node:call_expression Text: setRequestedMode (currentMode)
|————————Node:identifier Text: setRequestedMode
|————————Node:argument_list Text: (currentMode)
|—————————Node:( Text: (
|—————————Node:identifier Text: currentMode
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:return_statement Text: return errorCode ;
|————Node:return Text: return
|————Node:identifier Text: errorCode
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:function_definition Text: void ACAN2515::end (void) {
//--- Remove interrupt capability of mINT pin
  if (mINT != 255) {
    detachInterrupt (digitalPinToInterrupt (mINT)) ;
  }
//--- Request configuration mode
  const uint8_t configurationMode = (0b100 << 5) ;
  const uint16_t errorCode __attribute__((unused)) = setRequestedMode (configurationMode) ;
//--- Deallocate driver buffers
  mTransmitBuffer [0].free () ;
  mTransmitBuffer [1].free () ;
  mTransmitBuffer [2].free () ;
  mReceiveBuffer.free () ;
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: ACAN2515::end (void)
|———Node:qualified_identifier Text: ACAN2515::end
|————Node:namespace_identifier Text: ACAN2515
|————Node::: Text: ::
|————Node:identifier Text: end
|———Node:parameter_list Text: (void)
|————Node:( Text: (
|————Node:parameter_declaration Text: void
|—————Node:primitive_type Text: void
|————Node:) Text: )
|——Node:compound_statement Text: {
//--- Remove interrupt capability of mINT pin
  if (mINT != 255) {
    detachInterrupt (digitalPinToInterrupt (mINT)) ;
  }
//--- Request configuration mode
  const uint8_t configurationMode = (0b100 << 5) ;
  const uint16_t errorCode __attribute__((unused)) = setRequestedMode (configurationMode) ;
//--- Deallocate driver buffers
  mTransmitBuffer [0].free () ;
  mTransmitBuffer [1].free () ;
  mTransmitBuffer [2].free () ;
  mReceiveBuffer.free () ;
}
|———Node:{ Text: {
|———Node:comment
|———Node:if_statement Text: if (mINT != 255) {
    detachInterrupt (digitalPinToInterrupt (mINT)) ;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (mINT != 255)
|—————Node:( Text: (
|—————Node:binary_expression Text: mINT != 255
|——————Node:identifier Text: mINT
|——————Node:!= Text: !=
|——————Node:number_literal Text: 255
|—————Node:) Text: )
|————Node:compound_statement Text: {
    detachInterrupt (digitalPinToInterrupt (mINT)) ;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: detachInterrupt (digitalPinToInterrupt (mINT)) ;
|——————Node:call_expression Text: detachInterrupt (digitalPinToInterrupt (mINT))
|———————Node:identifier Text: detachInterrupt
|———————Node:argument_list Text: (digitalPinToInterrupt (mINT))
|————————Node:( Text: (
|————————Node:call_expression Text: digitalPinToInterrupt (mINT)
|—————————Node:identifier Text: digitalPinToInterrupt
|—————————Node:argument_list Text: (mINT)
|——————————Node:( Text: (
|——————————Node:identifier Text: mINT
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:declaration Text: const uint8_t configurationMode = (0b100 << 5) ;
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: configurationMode = (0b100 << 5)
|—————Node:identifier Text: configurationMode
|—————Node:= Text: =
|—————Node:parenthesized_expression Text: (0b100 << 5)
|——————Node:( Text: (
|——————Node:binary_expression Text: 0b100 << 5
|———————Node:number_literal Text: 0b100
|———————Node:<< Text: <<
|———————Node:number_literal Text: 5
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: const uint16_t errorCode
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: uint16_t
|————Node:identifier Text: errorCode
|————Node:; Text: 
|———Node:declaration Text: __attribute__((unused)) = setRequestedMode (configurationMode) ;
|————Node:attribute_specifier Text: __attribute__((unused))
|—————Node:__attribute__ Text: __attribute__
|—————Node:( Text: (
|—————Node:argument_list Text: (unused)
|——————Node:( Text: (
|——————Node:identifier Text: unused
|——————Node:) Text: )
|—————Node:) Text: )
|————Node:ERROR Text: =
|—————Node:= Text: =
|————Node:type_identifier Text: setRequestedMode
|————Node:parenthesized_declarator Text: (configurationMode)
|—————Node:( Text: (
|—————Node:identifier Text: configurationMode
|—————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: mTransmitBuffer [0].free () ;
|————Node:call_expression Text: mTransmitBuffer [0].free ()
|—————Node:field_expression Text: mTransmitBuffer [0].free
|——————Node:subscript_expression Text: mTransmitBuffer [0]
|———————Node:identifier Text: mTransmitBuffer
|———————Node:subscript_argument_list Text: [0]
|————————Node:[ Text: [
|————————Node:number_literal Text: 0
|————————Node:] Text: ]
|——————Node:. Text: .
|——————Node:field_identifier Text: free
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mTransmitBuffer [1].free () ;
|————Node:call_expression Text: mTransmitBuffer [1].free ()
|—————Node:field_expression Text: mTransmitBuffer [1].free
|——————Node:subscript_expression Text: mTransmitBuffer [1]
|———————Node:identifier Text: mTransmitBuffer
|———————Node:subscript_argument_list Text: [1]
|————————Node:[ Text: [
|————————Node:number_literal Text: 1
|————————Node:] Text: ]
|——————Node:. Text: .
|——————Node:field_identifier Text: free
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mTransmitBuffer [2].free () ;
|————Node:call_expression Text: mTransmitBuffer [2].free ()
|—————Node:field_expression Text: mTransmitBuffer [2].free
|——————Node:subscript_expression Text: mTransmitBuffer [2]
|———————Node:identifier Text: mTransmitBuffer
|———————Node:subscript_argument_list Text: [2]
|————————Node:[ Text: [
|————————Node:number_literal Text: 2
|————————Node:] Text: ]
|——————Node:. Text: .
|——————Node:field_identifier Text: free
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mReceiveBuffer.free () ;
|————Node:call_expression Text: mReceiveBuffer.free ()
|—————Node:field_expression Text: mReceiveBuffer.free
|——————Node:identifier Text: mReceiveBuffer
|——————Node:. Text: .
|——————Node:field_identifier Text: free
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:preproc_ifdef Text: #ifdef ARDUINO_ARCH_ESP32
  void ACAN2515::poll (void) {
    xSemaphoreGive (mISRSemaphore) ;
  }
#endif
|——Node:#ifdef Text: #ifdef
|——Node:identifier Text: ARDUINO_ARCH_ESP32
|——Node:function_definition Text: void ACAN2515::poll (void) {
    xSemaphoreGive (mISRSemaphore) ;
  }
|———Node:primitive_type Text: void
|———Node:function_declarator Text: ACAN2515::poll (void)
|————Node:qualified_identifier Text: ACAN2515::poll
|—————Node:namespace_identifier Text: ACAN2515
|—————Node::: Text: ::
|—————Node:identifier Text: poll
|————Node:parameter_list Text: (void)
|—————Node:( Text: (
|—————Node:parameter_declaration Text: void
|——————Node:primitive_type Text: void
|—————Node:) Text: )
|———Node:compound_statement Text: {
    xSemaphoreGive (mISRSemaphore) ;
  }
|————Node:{ Text: {
|————Node:expression_statement Text: xSemaphoreGive (mISRSemaphore) ;
|—————Node:call_expression Text: xSemaphoreGive (mISRSemaphore)
|——————Node:identifier Text: xSemaphoreGive
|——————Node:argument_list Text: (mISRSemaphore)
|———————Node:( Text: (
|———————Node:identifier Text: mISRSemaphore
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:} Text: }
|——Node:#endif Text: #endif
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:preproc_ifdef Text: #ifndef ARDUINO_ARCH_ESP32
  void ACAN2515::poll (void) {
    noInterrupts () ;
      while (isr_core ()) {}
    interrupts () ;
  }
#endif
|——Node:#ifndef Text: #ifndef
|——Node:identifier Text: ARDUINO_ARCH_ESP32
|——Node:function_definition Text: void ACAN2515::poll (void) {
    noInterrupts () ;
      while (isr_core ()) {}
    interrupts () ;
  }
|———Node:primitive_type Text: void
|———Node:function_declarator Text: ACAN2515::poll (void)
|————Node:qualified_identifier Text: ACAN2515::poll
|—————Node:namespace_identifier Text: ACAN2515
|—————Node::: Text: ::
|—————Node:identifier Text: poll
|————Node:parameter_list Text: (void)
|—————Node:( Text: (
|—————Node:parameter_declaration Text: void
|——————Node:primitive_type Text: void
|—————Node:) Text: )
|———Node:compound_statement Text: {
    noInterrupts () ;
      while (isr_core ()) {}
    interrupts () ;
  }
|————Node:{ Text: {
|————Node:expression_statement Text: noInterrupts () ;
|—————Node:call_expression Text: noInterrupts ()
|——————Node:identifier Text: noInterrupts
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:while_statement Text: while (isr_core ()) {}
|—————Node:while Text: while
|—————Node:condition_clause Text: (isr_core ())
|——————Node:( Text: (
|——————Node:call_expression Text: isr_core ()
|———————Node:identifier Text: isr_core
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:) Text: )
|—————Node:compound_statement Text: {}
|——————Node:{ Text: {
|——————Node:} Text: }
|————Node:expression_statement Text: interrupts () ;
|—————Node:call_expression Text: interrupts ()
|——————Node:identifier Text: interrupts
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:} Text: }
|——Node:#endif Text: #endif
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:preproc_ifdef Text: #ifdef ARDUINO_ARCH_ESP32
  void ACAN2515::isr (void) {
    BaseType_t xHigherPriorityTaskWoken = pdFALSE ;
    xSemaphoreGiveFromISR (mISRSemaphore, &xHigherPriorityTaskWoken) ;
    portYIELD_FROM_ISR () ;
  }
#endif
|——Node:#ifdef Text: #ifdef
|——Node:identifier Text: ARDUINO_ARCH_ESP32
|——Node:function_definition Text: void ACAN2515::isr (void) {
    BaseType_t xHigherPriorityTaskWoken = pdFALSE ;
    xSemaphoreGiveFromISR (mISRSemaphore, &xHigherPriorityTaskWoken) ;
    portYIELD_FROM_ISR () ;
  }
|———Node:primitive_type Text: void
|———Node:function_declarator Text: ACAN2515::isr (void)
|————Node:qualified_identifier Text: ACAN2515::isr
|—————Node:namespace_identifier Text: ACAN2515
|—————Node::: Text: ::
|—————Node:identifier Text: isr
|————Node:parameter_list Text: (void)
|—————Node:( Text: (
|—————Node:parameter_declaration Text: void
|——————Node:primitive_type Text: void
|—————Node:) Text: )
|———Node:compound_statement Text: {
    BaseType_t xHigherPriorityTaskWoken = pdFALSE ;
    xSemaphoreGiveFromISR (mISRSemaphore, &xHigherPriorityTaskWoken) ;
    portYIELD_FROM_ISR () ;
  }
|————Node:{ Text: {
|————Node:declaration Text: BaseType_t xHigherPriorityTaskWoken = pdFALSE ;
|—————Node:type_identifier Text: BaseType_t
|—————Node:init_declarator Text: xHigherPriorityTaskWoken = pdFALSE
|——————Node:identifier Text: xHigherPriorityTaskWoken
|——————Node:= Text: =
|——————Node:identifier Text: pdFALSE
|—————Node:; Text: ;
|————Node:expression_statement Text: xSemaphoreGiveFromISR (mISRSemaphore, &xHigherPriorityTaskWoken) ;
|—————Node:call_expression Text: xSemaphoreGiveFromISR (mISRSemaphore, &xHigherPriorityTaskWoken)
|——————Node:identifier Text: xSemaphoreGiveFromISR
|——————Node:argument_list Text: (mISRSemaphore, &xHigherPriorityTaskWoken)
|———————Node:( Text: (
|———————Node:identifier Text: mISRSemaphore
|———————Node:, Text: ,
|———————Node:pointer_expression Text: &xHigherPriorityTaskWoken
|————————Node:& Text: &
|————————Node:identifier Text: xHigherPriorityTaskWoken
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: portYIELD_FROM_ISR () ;
|—————Node:call_expression Text: portYIELD_FROM_ISR ()
|——————Node:identifier Text: portYIELD_FROM_ISR
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:} Text: }
|——Node:#endif Text: #endif
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:preproc_ifdef Text: #ifndef ARDUINO_ARCH_ESP32
  void ACAN2515::isr (void) {
    isr_core () ;
  }
#endif
|——Node:#ifndef Text: #ifndef
|——Node:identifier Text: ARDUINO_ARCH_ESP32
|——Node:function_definition Text: void ACAN2515::isr (void) {
    isr_core () ;
  }
|———Node:primitive_type Text: void
|———Node:function_declarator Text: ACAN2515::isr (void)
|————Node:qualified_identifier Text: ACAN2515::isr
|—————Node:namespace_identifier Text: ACAN2515
|—————Node::: Text: ::
|—————Node:identifier Text: isr
|————Node:parameter_list Text: (void)
|—————Node:( Text: (
|—————Node:parameter_declaration Text: void
|——————Node:primitive_type Text: void
|—————Node:) Text: )
|———Node:compound_statement Text: {
    isr_core () ;
  }
|————Node:{ Text: {
|————Node:expression_statement Text: isr_core () ;
|—————Node:call_expression Text: isr_core ()
|——————Node:identifier Text: isr_core
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:} Text: }
|——Node:#endif Text: #endif
|—Node:comment
|—Node:function_definition Text: bool ACAN2515::isr_core (void) {
  bool handled = false ;
  mSPI.beginTransaction (mSPISettings) ;
  uint8_t itStatus = read2515Register (CANSTAT_REGISTER) & 0x0E ;
  while (itStatus != 0) {
    handled = true ;
    switch (itStatus) {
    case 0 : // No interrupt
      break ;
    case 1 << 1 : // Error interrupt
      bitModify2515Register (CANINTF_REGISTER, 0x20, 0) ; // Ack interrupt
      break ;
    case 2 << 1 : // Wake-up interrupt
      bitModify2515Register (CANINTF_REGISTER, 0x40, 0) ; // Ack interrupt
      break ;
    case 3 << 1 : // TXB0 interrupt
      handleTXBInterrupt (0) ;
      break ;
    case 4 << 1 : // TXB1 interrupt
      handleTXBInterrupt (1) ;
      break ;
    case 5 << 1 : // TXB2 interrupt
      handleTXBInterrupt (2) ;
      break ;
    case 6 << 1 : // RXB0 interrupt
    case 7 << 1 : // RXB1 interrupt
      handleRXBInterrupt () ;
      break ;
    }
    itStatus = read2515Register (CANSTAT_REGISTER) & 0x0E ;
  }
  mSPI.endTransaction () ;
  return handled ;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: ACAN2515::isr_core (void)
|———Node:qualified_identifier Text: ACAN2515::isr_core
|————Node:namespace_identifier Text: ACAN2515
|————Node::: Text: ::
|————Node:identifier Text: isr_core
|———Node:parameter_list Text: (void)
|————Node:( Text: (
|————Node:parameter_declaration Text: void
|—————Node:primitive_type Text: void
|————Node:) Text: )
|——Node:compound_statement Text: {
  bool handled = false ;
  mSPI.beginTransaction (mSPISettings) ;
  uint8_t itStatus = read2515Register (CANSTAT_REGISTER) & 0x0E ;
  while (itStatus != 0) {
    handled = true ;
    switch (itStatus) {
    case 0 : // No interrupt
      break ;
    case 1 << 1 : // Error interrupt
      bitModify2515Register (CANINTF_REGISTER, 0x20, 0) ; // Ack interrupt
      break ;
    case 2 << 1 : // Wake-up interrupt
      bitModify2515Register (CANINTF_REGISTER, 0x40, 0) ; // Ack interrupt
      break ;
    case 3 << 1 : // TXB0 interrupt
      handleTXBInterrupt (0) ;
      break ;
    case 4 << 1 : // TXB1 interrupt
      handleTXBInterrupt (1) ;
      break ;
    case 5 << 1 : // TXB2 interrupt
      handleTXBInterrupt (2) ;
      break ;
    case 6 << 1 : // RXB0 interrupt
    case 7 << 1 : // RXB1 interrupt
      handleRXBInterrupt () ;
      break ;
    }
    itStatus = read2515Register (CANSTAT_REGISTER) & 0x0E ;
  }
  mSPI.endTransaction () ;
  return handled ;
}
|———Node:{ Text: {
|———Node:declaration Text: bool handled = false ;
|————Node:primitive_type Text: bool
|————Node:init_declarator Text: handled = false
|—————Node:identifier Text: handled
|—————Node:= Text: =
|—————Node:false Text: false
|————Node:; Text: ;
|———Node:expression_statement Text: mSPI.beginTransaction (mSPISettings) ;
|————Node:call_expression Text: mSPI.beginTransaction (mSPISettings)
|—————Node:field_expression Text: mSPI.beginTransaction
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: beginTransaction
|—————Node:argument_list Text: (mSPISettings)
|——————Node:( Text: (
|——————Node:identifier Text: mSPISettings
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: uint8_t itStatus = read2515Register (CANSTAT_REGISTER) & 0x0E ;
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: itStatus = read2515Register (CANSTAT_REGISTER) & 0x0E
|—————Node:identifier Text: itStatus
|—————Node:= Text: =
|—————Node:binary_expression Text: read2515Register (CANSTAT_REGISTER) & 0x0E
|——————Node:call_expression Text: read2515Register (CANSTAT_REGISTER)
|———————Node:identifier Text: read2515Register
|———————Node:argument_list Text: (CANSTAT_REGISTER)
|————————Node:( Text: (
|————————Node:identifier Text: CANSTAT_REGISTER
|————————Node:) Text: )
|——————Node:& Text: &
|——————Node:number_literal Text: 0x0E
|————Node:; Text: ;
|———Node:while_statement Text: while (itStatus != 0) {
    handled = true ;
    switch (itStatus) {
    case 0 : // No interrupt
      break ;
    case 1 << 1 : // Error interrupt
      bitModify2515Register (CANINTF_REGISTER, 0x20, 0) ; // Ack interrupt
      break ;
    case 2 << 1 : // Wake-up interrupt
      bitModify2515Register (CANINTF_REGISTER, 0x40, 0) ; // Ack interrupt
      break ;
    case 3 << 1 : // TXB0 interrupt
      handleTXBInterrupt (0) ;
      break ;
    case 4 << 1 : // TXB1 interrupt
      handleTXBInterrupt (1) ;
      break ;
    case 5 << 1 : // TXB2 interrupt
      handleTXBInterrupt (2) ;
      break ;
    case 6 << 1 : // RXB0 interrupt
    case 7 << 1 : // RXB1 interrupt
      handleRXBInterrupt () ;
      break ;
    }
    itStatus = read2515Register (CANSTAT_REGISTER) & 0x0E ;
  }
|————Node:while Text: while
|————Node:condition_clause Text: (itStatus != 0)
|—————Node:( Text: (
|—————Node:binary_expression Text: itStatus != 0
|——————Node:identifier Text: itStatus
|——————Node:!= Text: !=
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {
    handled = true ;
    switch (itStatus) {
    case 0 : // No interrupt
      break ;
    case 1 << 1 : // Error interrupt
      bitModify2515Register (CANINTF_REGISTER, 0x20, 0) ; // Ack interrupt
      break ;
    case 2 << 1 : // Wake-up interrupt
      bitModify2515Register (CANINTF_REGISTER, 0x40, 0) ; // Ack interrupt
      break ;
    case 3 << 1 : // TXB0 interrupt
      handleTXBInterrupt (0) ;
      break ;
    case 4 << 1 : // TXB1 interrupt
      handleTXBInterrupt (1) ;
      break ;
    case 5 << 1 : // TXB2 interrupt
      handleTXBInterrupt (2) ;
      break ;
    case 6 << 1 : // RXB0 interrupt
    case 7 << 1 : // RXB1 interrupt
      handleRXBInterrupt () ;
      break ;
    }
    itStatus = read2515Register (CANSTAT_REGISTER) & 0x0E ;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: handled = true ;
|——————Node:assignment_expression Text: handled = true
|———————Node:identifier Text: handled
|———————Node:= Text: =
|———————Node:true Text: true
|——————Node:; Text: ;
|—————Node:switch_statement Text: switch (itStatus) {
    case 0 : // No interrupt
      break ;
    case 1 << 1 : // Error interrupt
      bitModify2515Register (CANINTF_REGISTER, 0x20, 0) ; // Ack interrupt
      break ;
    case 2 << 1 : // Wake-up interrupt
      bitModify2515Register (CANINTF_REGISTER, 0x40, 0) ; // Ack interrupt
      break ;
    case 3 << 1 : // TXB0 interrupt
      handleTXBInterrupt (0) ;
      break ;
    case 4 << 1 : // TXB1 interrupt
      handleTXBInterrupt (1) ;
      break ;
    case 5 << 1 : // TXB2 interrupt
      handleTXBInterrupt (2) ;
      break ;
    case 6 << 1 : // RXB0 interrupt
    case 7 << 1 : // RXB1 interrupt
      handleRXBInterrupt () ;
      break ;
    }
|——————Node:switch Text: switch
|——————Node:condition_clause Text: (itStatus)
|———————Node:( Text: (
|———————Node:identifier Text: itStatus
|———————Node:) Text: )
|——————Node:compound_statement Text: {
    case 0 : // No interrupt
      break ;
    case 1 << 1 : // Error interrupt
      bitModify2515Register (CANINTF_REGISTER, 0x20, 0) ; // Ack interrupt
      break ;
    case 2 << 1 : // Wake-up interrupt
      bitModify2515Register (CANINTF_REGISTER, 0x40, 0) ; // Ack interrupt
      break ;
    case 3 << 1 : // TXB0 interrupt
      handleTXBInterrupt (0) ;
      break ;
    case 4 << 1 : // TXB1 interrupt
      handleTXBInterrupt (1) ;
      break ;
    case 5 << 1 : // TXB2 interrupt
      handleTXBInterrupt (2) ;
      break ;
    case 6 << 1 : // RXB0 interrupt
    case 7 << 1 : // RXB1 interrupt
      handleRXBInterrupt () ;
      break ;
    }
|———————Node:{ Text: {
|———————Node:case_statement Text: case 0 : // No interrupt
      break ;
|————————Node:case Text: case
|————————Node:number_literal Text: 0
|————————Node:: Text: :
|————————Node:comment
|————————Node:break_statement Text: break ;
|—————————Node:break Text: break
|—————————Node:; Text: ;
|———————Node:case_statement Text: case 1 << 1 : // Error interrupt
      bitModify2515Register (CANINTF_REGISTER, 0x20, 0) ; // Ack interrupt
      break ;
|————————Node:case Text: case
|————————Node:binary_expression Text: 1 << 1
|—————————Node:number_literal Text: 1
|—————————Node:<< Text: <<
|—————————Node:number_literal Text: 1
|————————Node:: Text: :
|————————Node:comment
|————————Node:expression_statement Text: bitModify2515Register (CANINTF_REGISTER, 0x20, 0) ;
|—————————Node:call_expression Text: bitModify2515Register (CANINTF_REGISTER, 0x20, 0)
|——————————Node:identifier Text: bitModify2515Register
|——————————Node:argument_list Text: (CANINTF_REGISTER, 0x20, 0)
|———————————Node:( Text: (
|———————————Node:identifier Text: CANINTF_REGISTER
|———————————Node:, Text: ,
|———————————Node:number_literal Text: 0x20
|———————————Node:, Text: ,
|———————————Node:number_literal Text: 0
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:comment
|————————Node:break_statement Text: break ;
|—————————Node:break Text: break
|—————————Node:; Text: ;
|———————Node:case_statement Text: case 2 << 1 : // Wake-up interrupt
      bitModify2515Register (CANINTF_REGISTER, 0x40, 0) ; // Ack interrupt
      break ;
|————————Node:case Text: case
|————————Node:binary_expression Text: 2 << 1
|—————————Node:number_literal Text: 2
|—————————Node:<< Text: <<
|—————————Node:number_literal Text: 1
|————————Node:: Text: :
|————————Node:comment
|————————Node:expression_statement Text: bitModify2515Register (CANINTF_REGISTER, 0x40, 0) ;
|—————————Node:call_expression Text: bitModify2515Register (CANINTF_REGISTER, 0x40, 0)
|——————————Node:identifier Text: bitModify2515Register
|——————————Node:argument_list Text: (CANINTF_REGISTER, 0x40, 0)
|———————————Node:( Text: (
|———————————Node:identifier Text: CANINTF_REGISTER
|———————————Node:, Text: ,
|———————————Node:number_literal Text: 0x40
|———————————Node:, Text: ,
|———————————Node:number_literal Text: 0
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:comment
|————————Node:break_statement Text: break ;
|—————————Node:break Text: break
|—————————Node:; Text: ;
|———————Node:case_statement Text: case 3 << 1 : // TXB0 interrupt
      handleTXBInterrupt (0) ;
      break ;
|————————Node:case Text: case
|————————Node:binary_expression Text: 3 << 1
|—————————Node:number_literal Text: 3
|—————————Node:<< Text: <<
|—————————Node:number_literal Text: 1
|————————Node:: Text: :
|————————Node:comment
|————————Node:expression_statement Text: handleTXBInterrupt (0) ;
|—————————Node:call_expression Text: handleTXBInterrupt (0)
|——————————Node:identifier Text: handleTXBInterrupt
|——————————Node:argument_list Text: (0)
|———————————Node:( Text: (
|———————————Node:number_literal Text: 0
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:break_statement Text: break ;
|—————————Node:break Text: break
|—————————Node:; Text: ;
|———————Node:case_statement Text: case 4 << 1 : // TXB1 interrupt
      handleTXBInterrupt (1) ;
      break ;
|————————Node:case Text: case
|————————Node:binary_expression Text: 4 << 1
|—————————Node:number_literal Text: 4
|—————————Node:<< Text: <<
|—————————Node:number_literal Text: 1
|————————Node:: Text: :
|————————Node:comment
|————————Node:expression_statement Text: handleTXBInterrupt (1) ;
|—————————Node:call_expression Text: handleTXBInterrupt (1)
|——————————Node:identifier Text: handleTXBInterrupt
|——————————Node:argument_list Text: (1)
|———————————Node:( Text: (
|———————————Node:number_literal Text: 1
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:break_statement Text: break ;
|—————————Node:break Text: break
|—————————Node:; Text: ;
|———————Node:case_statement Text: case 5 << 1 : // TXB2 interrupt
      handleTXBInterrupt (2) ;
      break ;
|————————Node:case Text: case
|————————Node:binary_expression Text: 5 << 1
|—————————Node:number_literal Text: 5
|—————————Node:<< Text: <<
|—————————Node:number_literal Text: 1
|————————Node:: Text: :
|————————Node:comment
|————————Node:expression_statement Text: handleTXBInterrupt (2) ;
|—————————Node:call_expression Text: handleTXBInterrupt (2)
|——————————Node:identifier Text: handleTXBInterrupt
|——————————Node:argument_list Text: (2)
|———————————Node:( Text: (
|———————————Node:number_literal Text: 2
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:break_statement Text: break ;
|—————————Node:break Text: break
|—————————Node:; Text: ;
|———————Node:case_statement Text: case 6 << 1 :
|————————Node:case Text: case
|————————Node:binary_expression Text: 6 << 1
|—————————Node:number_literal Text: 6
|—————————Node:<< Text: <<
|—————————Node:number_literal Text: 1
|————————Node:: Text: :
|———————Node:comment
|———————Node:case_statement Text: case 7 << 1 : // RXB1 interrupt
      handleRXBInterrupt () ;
      break ;
|————————Node:case Text: case
|————————Node:binary_expression Text: 7 << 1
|—————————Node:number_literal Text: 7
|—————————Node:<< Text: <<
|—————————Node:number_literal Text: 1
|————————Node:: Text: :
|————————Node:comment
|————————Node:expression_statement Text: handleRXBInterrupt () ;
|—————————Node:call_expression Text: handleRXBInterrupt ()
|——————————Node:identifier Text: handleRXBInterrupt
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:break_statement Text: break ;
|—————————Node:break Text: break
|—————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:expression_statement Text: itStatus = read2515Register (CANSTAT_REGISTER) & 0x0E ;
|——————Node:assignment_expression Text: itStatus = read2515Register (CANSTAT_REGISTER) & 0x0E
|———————Node:identifier Text: itStatus
|———————Node:= Text: =
|———————Node:binary_expression Text: read2515Register (CANSTAT_REGISTER) & 0x0E
|————————Node:call_expression Text: read2515Register (CANSTAT_REGISTER)
|—————————Node:identifier Text: read2515Register
|—————————Node:argument_list Text: (CANSTAT_REGISTER)
|——————————Node:( Text: (
|——————————Node:identifier Text: CANSTAT_REGISTER
|——————————Node:) Text: )
|————————Node:& Text: &
|————————Node:number_literal Text: 0x0E
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: mSPI.endTransaction () ;
|————Node:call_expression Text: mSPI.endTransaction ()
|—————Node:field_expression Text: mSPI.endTransaction
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: endTransaction
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return handled ;
|————Node:return Text: return
|————Node:identifier Text: handled
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:comment
|—Node:function_definition Text: void ACAN2515::handleRXBInterrupt (void) {
  const uint8_t rxStatus = read2515RxStatus () ; // Bit 6: message in RXB0, bit 7: message in RXB1
  const bool received = (rxStatus & 0xC0) != 0 ;
  if (received) { // Message in RXB0 and / or RXB1
    const bool accessRXB0 = (rxStatus & 0x40) != 0 ;
    CANMessage message ;
//     message.rtr = (rxStatus & 0x08) != 0 ; // Thanks to Arjan-Woltjer for having fixed this bug
//     message.ext = (rxStatus & 0x10) != 0 ; // Thanks to Arjan-Woltjer for having fixed this bug
  //--- Set idx field to matching receive filter
    message.idx = rxStatus & 0x07 ;
    if (message.idx > 5) {
      message.idx -= 6 ;
    }
  //---
    select () ;
    mSPI.transfer (accessRXB0 ? READ_FROM_RXB0SIDH_COMMAND : READ_FROM_RXB1SIDH_COMMAND) ;
  //--- SIDH
    message.id = mSPI.transfer (0) ;
    message.id <<= 3 ;
  //--- SIDL
    const uint32_t sidl = mSPI.transfer (0) ;
    message.id |= sidl >> 5 ;
    message.rtr = (sidl & 0x10) != 0 ;
    message.ext = (sidl & 0x08) != 0 ;
  //--- EID8
    const uint32_t eid8 = mSPI.transfer (0) ;
    if (message.ext) {
      message.id <<= 2 ;
      message.id |= (sidl & 0x03) ;
      message.id <<= 8 ;
      message.id |= eid8 ;
    }
  //--- EID0
    const uint32_t eid0 = mSPI.transfer (0) ;
    if (message.ext) {
      message.id <<= 8 ;
      message.id |= eid0 ;
    }
  //--- DLC
    const uint8_t dlc = mSPI.transfer (0) ;
    message.len = dlc & 0x0F ;
  //--- Read data
    for (int i=0 ; i<message.len ; i++) {
      message.data [i] = mSPI.transfer (0) ;
    }
  //---
    unselect () ;
  //--- Free receive buffer command
    bitModify2515Register (CANINTF_REGISTER, accessRXB0 ? 0x01 : 0x02, 0) ;
  //--- Enter received message in receive buffer (if not full)
    mReceiveBuffer.append (message) ;
  }
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: ACAN2515::handleRXBInterrupt (void)
|———Node:qualified_identifier Text: ACAN2515::handleRXBInterrupt
|————Node:namespace_identifier Text: ACAN2515
|————Node::: Text: ::
|————Node:identifier Text: handleRXBInterrupt
|———Node:parameter_list Text: (void)
|————Node:( Text: (
|————Node:parameter_declaration Text: void
|—————Node:primitive_type Text: void
|————Node:) Text: )
|——Node:compound_statement Text: {
  const uint8_t rxStatus = read2515RxStatus () ; // Bit 6: message in RXB0, bit 7: message in RXB1
  const bool received = (rxStatus & 0xC0) != 0 ;
  if (received) { // Message in RXB0 and / or RXB1
    const bool accessRXB0 = (rxStatus & 0x40) != 0 ;
    CANMessage message ;
//     message.rtr = (rxStatus & 0x08) != 0 ; // Thanks to Arjan-Woltjer for having fixed this bug
//     message.ext = (rxStatus & 0x10) != 0 ; // Thanks to Arjan-Woltjer for having fixed this bug
  //--- Set idx field to matching receive filter
    message.idx = rxStatus & 0x07 ;
    if (message.idx > 5) {
      message.idx -= 6 ;
    }
  //---
    select () ;
    mSPI.transfer (accessRXB0 ? READ_FROM_RXB0SIDH_COMMAND : READ_FROM_RXB1SIDH_COMMAND) ;
  //--- SIDH
    message.id = mSPI.transfer (0) ;
    message.id <<= 3 ;
  //--- SIDL
    const uint32_t sidl = mSPI.transfer (0) ;
    message.id |= sidl >> 5 ;
    message.rtr = (sidl & 0x10) != 0 ;
    message.ext = (sidl & 0x08) != 0 ;
  //--- EID8
    const uint32_t eid8 = mSPI.transfer (0) ;
    if (message.ext) {
      message.id <<= 2 ;
      message.id |= (sidl & 0x03) ;
      message.id <<= 8 ;
      message.id |= eid8 ;
    }
  //--- EID0
    const uint32_t eid0 = mSPI.transfer (0) ;
    if (message.ext) {
      message.id <<= 8 ;
      message.id |= eid0 ;
    }
  //--- DLC
    const uint8_t dlc = mSPI.transfer (0) ;
    message.len = dlc & 0x0F ;
  //--- Read data
    for (int i=0 ; i<message.len ; i++) {
      message.data [i] = mSPI.transfer (0) ;
    }
  //---
    unselect () ;
  //--- Free receive buffer command
    bitModify2515Register (CANINTF_REGISTER, accessRXB0 ? 0x01 : 0x02, 0) ;
  //--- Enter received message in receive buffer (if not full)
    mReceiveBuffer.append (message) ;
  }
}
|———Node:{ Text: {
|———Node:declaration Text: const uint8_t rxStatus = read2515RxStatus () ;
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: rxStatus = read2515RxStatus ()
|—————Node:identifier Text: rxStatus
|—————Node:= Text: =
|—————Node:call_expression Text: read2515RxStatus ()
|——————Node:identifier Text: read2515RxStatus
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:declaration Text: const bool received = (rxStatus & 0xC0) != 0 ;
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: bool
|————Node:init_declarator Text: received = (rxStatus & 0xC0) != 0
|—————Node:identifier Text: received
|—————Node:= Text: =
|—————Node:binary_expression Text: (rxStatus & 0xC0) != 0
|——————Node:parenthesized_expression Text: (rxStatus & 0xC0)
|———————Node:( Text: (
|———————Node:binary_expression Text: rxStatus & 0xC0
|————————Node:identifier Text: rxStatus
|————————Node:& Text: &
|————————Node:number_literal Text: 0xC0
|———————Node:) Text: )
|——————Node:!= Text: !=
|——————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:if_statement Text: if (received) { // Message in RXB0 and / or RXB1
    const bool accessRXB0 = (rxStatus & 0x40) != 0 ;
    CANMessage message ;
//     message.rtr = (rxStatus & 0x08) != 0 ; // Thanks to Arjan-Woltjer for having fixed this bug
//     message.ext = (rxStatus & 0x10) != 0 ; // Thanks to Arjan-Woltjer for having fixed this bug
  //--- Set idx field to matching receive filter
    message.idx = rxStatus & 0x07 ;
    if (message.idx > 5) {
      message.idx -= 6 ;
    }
  //---
    select () ;
    mSPI.transfer (accessRXB0 ? READ_FROM_RXB0SIDH_COMMAND : READ_FROM_RXB1SIDH_COMMAND) ;
  //--- SIDH
    message.id = mSPI.transfer (0) ;
    message.id <<= 3 ;
  //--- SIDL
    const uint32_t sidl = mSPI.transfer (0) ;
    message.id |= sidl >> 5 ;
    message.rtr = (sidl & 0x10) != 0 ;
    message.ext = (sidl & 0x08) != 0 ;
  //--- EID8
    const uint32_t eid8 = mSPI.transfer (0) ;
    if (message.ext) {
      message.id <<= 2 ;
      message.id |= (sidl & 0x03) ;
      message.id <<= 8 ;
      message.id |= eid8 ;
    }
  //--- EID0
    const uint32_t eid0 = mSPI.transfer (0) ;
    if (message.ext) {
      message.id <<= 8 ;
      message.id |= eid0 ;
    }
  //--- DLC
    const uint8_t dlc = mSPI.transfer (0) ;
    message.len = dlc & 0x0F ;
  //--- Read data
    for (int i=0 ; i<message.len ; i++) {
      message.data [i] = mSPI.transfer (0) ;
    }
  //---
    unselect () ;
  //--- Free receive buffer command
    bitModify2515Register (CANINTF_REGISTER, accessRXB0 ? 0x01 : 0x02, 0) ;
  //--- Enter received message in receive buffer (if not full)
    mReceiveBuffer.append (message) ;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (received)
|—————Node:( Text: (
|—————Node:identifier Text: received
|—————Node:) Text: )
|————Node:compound_statement Text: { // Message in RXB0 and / or RXB1
    const bool accessRXB0 = (rxStatus & 0x40) != 0 ;
    CANMessage message ;
//     message.rtr = (rxStatus & 0x08) != 0 ; // Thanks to Arjan-Woltjer for having fixed this bug
//     message.ext = (rxStatus & 0x10) != 0 ; // Thanks to Arjan-Woltjer for having fixed this bug
  //--- Set idx field to matching receive filter
    message.idx = rxStatus & 0x07 ;
    if (message.idx > 5) {
      message.idx -= 6 ;
    }
  //---
    select () ;
    mSPI.transfer (accessRXB0 ? READ_FROM_RXB0SIDH_COMMAND : READ_FROM_RXB1SIDH_COMMAND) ;
  //--- SIDH
    message.id = mSPI.transfer (0) ;
    message.id <<= 3 ;
  //--- SIDL
    const uint32_t sidl = mSPI.transfer (0) ;
    message.id |= sidl >> 5 ;
    message.rtr = (sidl & 0x10) != 0 ;
    message.ext = (sidl & 0x08) != 0 ;
  //--- EID8
    const uint32_t eid8 = mSPI.transfer (0) ;
    if (message.ext) {
      message.id <<= 2 ;
      message.id |= (sidl & 0x03) ;
      message.id <<= 8 ;
      message.id |= eid8 ;
    }
  //--- EID0
    const uint32_t eid0 = mSPI.transfer (0) ;
    if (message.ext) {
      message.id <<= 8 ;
      message.id |= eid0 ;
    }
  //--- DLC
    const uint8_t dlc = mSPI.transfer (0) ;
    message.len = dlc & 0x0F ;
  //--- Read data
    for (int i=0 ; i<message.len ; i++) {
      message.data [i] = mSPI.transfer (0) ;
    }
  //---
    unselect () ;
  //--- Free receive buffer command
    bitModify2515Register (CANINTF_REGISTER, accessRXB0 ? 0x01 : 0x02, 0) ;
  //--- Enter received message in receive buffer (if not full)
    mReceiveBuffer.append (message) ;
  }
|—————Node:{ Text: {
|—————Node:comment
|—————Node:declaration Text: const bool accessRXB0 = (rxStatus & 0x40) != 0 ;
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:primitive_type Text: bool
|——————Node:init_declarator Text: accessRXB0 = (rxStatus & 0x40) != 0
|———————Node:identifier Text: accessRXB0
|———————Node:= Text: =
|———————Node:binary_expression Text: (rxStatus & 0x40) != 0
|————————Node:parenthesized_expression Text: (rxStatus & 0x40)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: rxStatus & 0x40
|——————————Node:identifier Text: rxStatus
|——————————Node:& Text: &
|——————————Node:number_literal Text: 0x40
|—————————Node:) Text: )
|————————Node:!= Text: !=
|————————Node:number_literal Text: 0
|——————Node:; Text: ;
|—————Node:declaration Text: CANMessage message ;
|——————Node:type_identifier Text: CANMessage
|——————Node:identifier Text: message
|——————Node:; Text: ;
|—————Node:comment
|—————Node:comment
|—————Node:comment
|—————Node:expression_statement Text: message.idx = rxStatus & 0x07 ;
|——————Node:assignment_expression Text: message.idx = rxStatus & 0x07
|———————Node:field_expression Text: message.idx
|————————Node:identifier Text: message
|————————Node:. Text: .
|————————Node:field_identifier Text: idx
|———————Node:= Text: =
|———————Node:binary_expression Text: rxStatus & 0x07
|————————Node:identifier Text: rxStatus
|————————Node:& Text: &
|————————Node:number_literal Text: 0x07
|——————Node:; Text: ;
|—————Node:if_statement Text: if (message.idx > 5) {
      message.idx -= 6 ;
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: (message.idx > 5)
|———————Node:( Text: (
|———————Node:binary_expression Text: message.idx > 5
|————————Node:field_expression Text: message.idx
|—————————Node:identifier Text: message
|—————————Node:. Text: .
|—————————Node:field_identifier Text: idx
|————————Node:> Text: >
|————————Node:number_literal Text: 5
|———————Node:) Text: )
|——————Node:compound_statement Text: {
      message.idx -= 6 ;
    }
|———————Node:{ Text: {
|———————Node:expression_statement Text: message.idx -= 6 ;
|————————Node:assignment_expression Text: message.idx -= 6
|—————————Node:field_expression Text: message.idx
|——————————Node:identifier Text: message
|——————————Node:. Text: .
|——————————Node:field_identifier Text: idx
|—————————Node:-= Text: -=
|—————————Node:number_literal Text: 6
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:comment
|—————Node:expression_statement Text: select () ;
|——————Node:call_expression Text: select ()
|———————Node:identifier Text: select
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: mSPI.transfer (accessRXB0 ? READ_FROM_RXB0SIDH_COMMAND : READ_FROM_RXB1SIDH_COMMAND) ;
|——————Node:call_expression Text: mSPI.transfer (accessRXB0 ? READ_FROM_RXB0SIDH_COMMAND : READ_FROM_RXB1SIDH_COMMAND)
|———————Node:field_expression Text: mSPI.transfer
|————————Node:identifier Text: mSPI
|————————Node:. Text: .
|————————Node:field_identifier Text: transfer
|———————Node:argument_list Text: (accessRXB0 ? READ_FROM_RXB0SIDH_COMMAND : READ_FROM_RXB1SIDH_COMMAND)
|————————Node:( Text: (
|————————Node:conditional_expression Text: accessRXB0 ? READ_FROM_RXB0SIDH_COMMAND : READ_FROM_RXB1SIDH_COMMAND
|—————————Node:identifier Text: accessRXB0
|—————————Node:? Text: ?
|—————————Node:identifier Text: READ_FROM_RXB0SIDH_COMMAND
|—————————Node:: Text: :
|—————————Node:identifier Text: READ_FROM_RXB1SIDH_COMMAND
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment
|—————Node:expression_statement Text: message.id = mSPI.transfer (0) ;
|——————Node:assignment_expression Text: message.id = mSPI.transfer (0)
|———————Node:field_expression Text: message.id
|————————Node:identifier Text: message
|————————Node:. Text: .
|————————Node:field_identifier Text: id
|———————Node:= Text: =
|———————Node:call_expression Text: mSPI.transfer (0)
|————————Node:field_expression Text: mSPI.transfer
|—————————Node:identifier Text: mSPI
|—————————Node:. Text: .
|—————————Node:field_identifier Text: transfer
|————————Node:argument_list Text: (0)
|—————————Node:( Text: (
|—————————Node:number_literal Text: 0
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: message.id <<= 3 ;
|——————Node:assignment_expression Text: message.id <<= 3
|———————Node:field_expression Text: message.id
|————————Node:identifier Text: message
|————————Node:. Text: .
|————————Node:field_identifier Text: id
|———————Node:<<= Text: <<=
|———————Node:number_literal Text: 3
|——————Node:; Text: ;
|—————Node:comment
|—————Node:declaration Text: const uint32_t sidl = mSPI.transfer (0) ;
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:primitive_type Text: uint32_t
|——————Node:init_declarator Text: sidl = mSPI.transfer (0)
|———————Node:identifier Text: sidl
|———————Node:= Text: =
|———————Node:call_expression Text: mSPI.transfer (0)
|————————Node:field_expression Text: mSPI.transfer
|—————————Node:identifier Text: mSPI
|—————————Node:. Text: .
|—————————Node:field_identifier Text: transfer
|————————Node:argument_list Text: (0)
|—————————Node:( Text: (
|—————————Node:number_literal Text: 0
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: message.id |= sidl >> 5 ;
|——————Node:assignment_expression Text: message.id |= sidl >> 5
|———————Node:field_expression Text: message.id
|————————Node:identifier Text: message
|————————Node:. Text: .
|————————Node:field_identifier Text: id
|———————Node:|= Text: |=
|———————Node:binary_expression Text: sidl >> 5
|————————Node:identifier Text: sidl
|————————Node:>> Text: >>
|————————Node:number_literal Text: 5
|——————Node:; Text: ;
|—————Node:expression_statement Text: message.rtr = (sidl & 0x10) != 0 ;
|——————Node:assignment_expression Text: message.rtr = (sidl & 0x10) != 0
|———————Node:field_expression Text: message.rtr
|————————Node:identifier Text: message
|————————Node:. Text: .
|————————Node:field_identifier Text: rtr
|———————Node:= Text: =
|———————Node:binary_expression Text: (sidl & 0x10) != 0
|————————Node:parenthesized_expression Text: (sidl & 0x10)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: sidl & 0x10
|——————————Node:identifier Text: sidl
|——————————Node:& Text: &
|——————————Node:number_literal Text: 0x10
|—————————Node:) Text: )
|————————Node:!= Text: !=
|————————Node:number_literal Text: 0
|——————Node:; Text: ;
|—————Node:expression_statement Text: message.ext = (sidl & 0x08) != 0 ;
|——————Node:assignment_expression Text: message.ext = (sidl & 0x08) != 0
|———————Node:field_expression Text: message.ext
|————————Node:identifier Text: message
|————————Node:. Text: .
|————————Node:field_identifier Text: ext
|———————Node:= Text: =
|———————Node:binary_expression Text: (sidl & 0x08) != 0
|————————Node:parenthesized_expression Text: (sidl & 0x08)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: sidl & 0x08
|——————————Node:identifier Text: sidl
|——————————Node:& Text: &
|——————————Node:number_literal Text: 0x08
|—————————Node:) Text: )
|————————Node:!= Text: !=
|————————Node:number_literal Text: 0
|——————Node:; Text: ;
|—————Node:comment
|—————Node:declaration Text: const uint32_t eid8 = mSPI.transfer (0) ;
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:primitive_type Text: uint32_t
|——————Node:init_declarator Text: eid8 = mSPI.transfer (0)
|———————Node:identifier Text: eid8
|———————Node:= Text: =
|———————Node:call_expression Text: mSPI.transfer (0)
|————————Node:field_expression Text: mSPI.transfer
|—————————Node:identifier Text: mSPI
|—————————Node:. Text: .
|—————————Node:field_identifier Text: transfer
|————————Node:argument_list Text: (0)
|—————————Node:( Text: (
|—————————Node:number_literal Text: 0
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (message.ext) {
      message.id <<= 2 ;
      message.id |= (sidl & 0x03) ;
      message.id <<= 8 ;
      message.id |= eid8 ;
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: (message.ext)
|———————Node:( Text: (
|———————Node:field_expression Text: message.ext
|————————Node:identifier Text: message
|————————Node:. Text: .
|————————Node:field_identifier Text: ext
|———————Node:) Text: )
|——————Node:compound_statement Text: {
      message.id <<= 2 ;
      message.id |= (sidl & 0x03) ;
      message.id <<= 8 ;
      message.id |= eid8 ;
    }
|———————Node:{ Text: {
|———————Node:expression_statement Text: message.id <<= 2 ;
|————————Node:assignment_expression Text: message.id <<= 2
|—————————Node:field_expression Text: message.id
|——————————Node:identifier Text: message
|——————————Node:. Text: .
|——————————Node:field_identifier Text: id
|—————————Node:<<= Text: <<=
|—————————Node:number_literal Text: 2
|————————Node:; Text: ;
|———————Node:expression_statement Text: message.id |= (sidl & 0x03) ;
|————————Node:assignment_expression Text: message.id |= (sidl & 0x03)
|—————————Node:field_expression Text: message.id
|——————————Node:identifier Text: message
|——————————Node:. Text: .
|——————————Node:field_identifier Text: id
|—————————Node:|= Text: |=
|—————————Node:parenthesized_expression Text: (sidl & 0x03)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: sidl & 0x03
|———————————Node:identifier Text: sidl
|———————————Node:& Text: &
|———————————Node:number_literal Text: 0x03
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: message.id <<= 8 ;
|————————Node:assignment_expression Text: message.id <<= 8
|—————————Node:field_expression Text: message.id
|——————————Node:identifier Text: message
|——————————Node:. Text: .
|——————————Node:field_identifier Text: id
|—————————Node:<<= Text: <<=
|—————————Node:number_literal Text: 8
|————————Node:; Text: ;
|———————Node:expression_statement Text: message.id |= eid8 ;
|————————Node:assignment_expression Text: message.id |= eid8
|—————————Node:field_expression Text: message.id
|——————————Node:identifier Text: message
|——————————Node:. Text: .
|——————————Node:field_identifier Text: id
|—————————Node:|= Text: |=
|—————————Node:identifier Text: eid8
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:comment
|—————Node:declaration Text: const uint32_t eid0 = mSPI.transfer (0) ;
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:primitive_type Text: uint32_t
|——————Node:init_declarator Text: eid0 = mSPI.transfer (0)
|———————Node:identifier Text: eid0
|———————Node:= Text: =
|———————Node:call_expression Text: mSPI.transfer (0)
|————————Node:field_expression Text: mSPI.transfer
|—————————Node:identifier Text: mSPI
|—————————Node:. Text: .
|—————————Node:field_identifier Text: transfer
|————————Node:argument_list Text: (0)
|—————————Node:( Text: (
|—————————Node:number_literal Text: 0
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (message.ext) {
      message.id <<= 8 ;
      message.id |= eid0 ;
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: (message.ext)
|———————Node:( Text: (
|———————Node:field_expression Text: message.ext
|————————Node:identifier Text: message
|————————Node:. Text: .
|————————Node:field_identifier Text: ext
|———————Node:) Text: )
|——————Node:compound_statement Text: {
      message.id <<= 8 ;
      message.id |= eid0 ;
    }
|———————Node:{ Text: {
|———————Node:expression_statement Text: message.id <<= 8 ;
|————————Node:assignment_expression Text: message.id <<= 8
|—————————Node:field_expression Text: message.id
|——————————Node:identifier Text: message
|——————————Node:. Text: .
|——————————Node:field_identifier Text: id
|—————————Node:<<= Text: <<=
|—————————Node:number_literal Text: 8
|————————Node:; Text: ;
|———————Node:expression_statement Text: message.id |= eid0 ;
|————————Node:assignment_expression Text: message.id |= eid0
|—————————Node:field_expression Text: message.id
|——————————Node:identifier Text: message
|——————————Node:. Text: .
|——————————Node:field_identifier Text: id
|—————————Node:|= Text: |=
|—————————Node:identifier Text: eid0
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:comment
|—————Node:declaration Text: const uint8_t dlc = mSPI.transfer (0) ;
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:primitive_type Text: uint8_t
|——————Node:init_declarator Text: dlc = mSPI.transfer (0)
|———————Node:identifier Text: dlc
|———————Node:= Text: =
|———————Node:call_expression Text: mSPI.transfer (0)
|————————Node:field_expression Text: mSPI.transfer
|—————————Node:identifier Text: mSPI
|—————————Node:. Text: .
|—————————Node:field_identifier Text: transfer
|————————Node:argument_list Text: (0)
|—————————Node:( Text: (
|—————————Node:number_literal Text: 0
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: message.len = dlc & 0x0F ;
|——————Node:assignment_expression Text: message.len = dlc & 0x0F
|———————Node:field_expression Text: message.len
|————————Node:identifier Text: message
|————————Node:. Text: .
|————————Node:field_identifier Text: len
|———————Node:= Text: =
|———————Node:binary_expression Text: dlc & 0x0F
|————————Node:identifier Text: dlc
|————————Node:& Text: &
|————————Node:number_literal Text: 0x0F
|——————Node:; Text: ;
|—————Node:comment
|—————Node:for_statement Text: for (int i=0 ; i<message.len ; i++) {
      message.data [i] = mSPI.transfer (0) ;
    }
|——————Node:for Text: for
|——————Node:( Text: (
|——————Node:declaration Text: int i=0 ;
|———————Node:primitive_type Text: int
|———————Node:init_declarator Text: i=0
|————————Node:identifier Text: i
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:binary_expression Text: i<message.len
|———————Node:identifier Text: i
|———————Node:< Text: <
|———————Node:field_expression Text: message.len
|————————Node:identifier Text: message
|————————Node:. Text: .
|————————Node:field_identifier Text: len
|——————Node:; Text: ;
|——————Node:update_expression Text: i++
|———————Node:identifier Text: i
|———————Node:++ Text: ++
|——————Node:) Text: )
|——————Node:compound_statement Text: {
      message.data [i] = mSPI.transfer (0) ;
    }
|———————Node:{ Text: {
|———————Node:expression_statement Text: message.data [i] = mSPI.transfer (0) ;
|————————Node:assignment_expression Text: message.data [i] = mSPI.transfer (0)
|—————————Node:subscript_expression Text: message.data [i]
|——————————Node:field_expression Text: message.data
|———————————Node:identifier Text: message
|———————————Node:. Text: .
|———————————Node:field_identifier Text: data
|——————————Node:subscript_argument_list Text: [i]
|———————————Node:[ Text: [
|———————————Node:identifier Text: i
|———————————Node:] Text: ]
|—————————Node:= Text: =
|—————————Node:call_expression Text: mSPI.transfer (0)
|——————————Node:field_expression Text: mSPI.transfer
|———————————Node:identifier Text: mSPI
|———————————Node:. Text: .
|———————————Node:field_identifier Text: transfer
|——————————Node:argument_list Text: (0)
|———————————Node:( Text: (
|———————————Node:number_literal Text: 0
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:comment
|—————Node:expression_statement Text: unselect () ;
|——————Node:call_expression Text: unselect ()
|———————Node:identifier Text: unselect
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment
|—————Node:expression_statement Text: bitModify2515Register (CANINTF_REGISTER, accessRXB0 ? 0x01 : 0x02, 0) ;
|——————Node:call_expression Text: bitModify2515Register (CANINTF_REGISTER, accessRXB0 ? 0x01 : 0x02, 0)
|———————Node:identifier Text: bitModify2515Register
|———————Node:argument_list Text: (CANINTF_REGISTER, accessRXB0 ? 0x01 : 0x02, 0)
|————————Node:( Text: (
|————————Node:identifier Text: CANINTF_REGISTER
|————————Node:, Text: ,
|————————Node:conditional_expression Text: accessRXB0 ? 0x01 : 0x02
|—————————Node:identifier Text: accessRXB0
|—————————Node:? Text: ?
|—————————Node:number_literal Text: 0x01
|—————————Node:: Text: :
|—————————Node:number_literal Text: 0x02
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment
|—————Node:expression_statement Text: mReceiveBuffer.append (message) ;
|——————Node:call_expression Text: mReceiveBuffer.append (message)
|———————Node:field_expression Text: mReceiveBuffer.append
|————————Node:identifier Text: mReceiveBuffer
|————————Node:. Text: .
|————————Node:field_identifier Text: append
|———————Node:argument_list Text: (message)
|————————Node:( Text: (
|————————Node:identifier Text: message
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:} Text: }
|—Node:comment
|—Node:comment
|—Node:function_definition Text: void ACAN2515::handleTXBInterrupt (const uint8_t inTXB) { // inTXB value is 0, 1 or 2
//--- Acknowledge interrupt
  bitModify2515Register (CANINTF_REGISTER, 0x04 << inTXB, 0) ;
//--- Send an other message ?
  CANMessage message ;
  const bool ok = mTransmitBuffer [inTXB].remove (message) ;
  if (ok) {
    internalSendMessage (message, inTXB) ;
  }else{
    mTXBIsFree [inTXB] = true ;
  }
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: ACAN2515::handleTXBInterrupt (const uint8_t inTXB)
|———Node:qualified_identifier Text: ACAN2515::handleTXBInterrupt
|————Node:namespace_identifier Text: ACAN2515
|————Node::: Text: ::
|————Node:identifier Text: handleTXBInterrupt
|———Node:parameter_list Text: (const uint8_t inTXB)
|————Node:( Text: (
|————Node:parameter_declaration Text: const uint8_t inTXB
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: inTXB
|————Node:) Text: )
|——Node:compound_statement Text: { // inTXB value is 0, 1 or 2
//--- Acknowledge interrupt
  bitModify2515Register (CANINTF_REGISTER, 0x04 << inTXB, 0) ;
//--- Send an other message ?
  CANMessage message ;
  const bool ok = mTransmitBuffer [inTXB].remove (message) ;
  if (ok) {
    internalSendMessage (message, inTXB) ;
  }else{
    mTXBIsFree [inTXB] = true ;
  }
}
|———Node:{ Text: {
|———Node:comment
|———Node:comment
|———Node:expression_statement Text: bitModify2515Register (CANINTF_REGISTER, 0x04 << inTXB, 0) ;
|————Node:call_expression Text: bitModify2515Register (CANINTF_REGISTER, 0x04 << inTXB, 0)
|—————Node:identifier Text: bitModify2515Register
|—————Node:argument_list Text: (CANINTF_REGISTER, 0x04 << inTXB, 0)
|——————Node:( Text: (
|——————Node:identifier Text: CANINTF_REGISTER
|——————Node:, Text: ,
|——————Node:binary_expression Text: 0x04 << inTXB
|———————Node:number_literal Text: 0x04
|———————Node:<< Text: <<
|———————Node:identifier Text: inTXB
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:declaration Text: CANMessage message ;
|————Node:type_identifier Text: CANMessage
|————Node:identifier Text: message
|————Node:; Text: ;
|———Node:declaration Text: const bool ok = mTransmitBuffer [inTXB].remove (message) ;
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: bool
|————Node:init_declarator Text: ok = mTransmitBuffer [inTXB].remove (message)
|—————Node:identifier Text: ok
|—————Node:= Text: =
|—————Node:call_expression Text: mTransmitBuffer [inTXB].remove (message)
|——————Node:field_expression Text: mTransmitBuffer [inTXB].remove
|———————Node:subscript_expression Text: mTransmitBuffer [inTXB]
|————————Node:identifier Text: mTransmitBuffer
|————————Node:subscript_argument_list Text: [inTXB]
|—————————Node:[ Text: [
|—————————Node:identifier Text: inTXB
|—————————Node:] Text: ]
|———————Node:. Text: .
|———————Node:field_identifier Text: remove
|——————Node:argument_list Text: (message)
|———————Node:( Text: (
|———————Node:identifier Text: message
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (ok) {
    internalSendMessage (message, inTXB) ;
  }else{
    mTXBIsFree [inTXB] = true ;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (ok)
|—————Node:( Text: (
|—————Node:identifier Text: ok
|—————Node:) Text: )
|————Node:compound_statement Text: {
    internalSendMessage (message, inTXB) ;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: internalSendMessage (message, inTXB) ;
|——————Node:call_expression Text: internalSendMessage (message, inTXB)
|———————Node:identifier Text: internalSendMessage
|———————Node:argument_list Text: (message, inTXB)
|————————Node:( Text: (
|————————Node:identifier Text: message
|————————Node:, Text: ,
|————————Node:identifier Text: inTXB
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else{
    mTXBIsFree [inTXB] = true ;
  }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
    mTXBIsFree [inTXB] = true ;
  }
|——————Node:{ Text: {
|——————Node:expression_statement Text: mTXBIsFree [inTXB] = true ;
|———————Node:assignment_expression Text: mTXBIsFree [inTXB] = true
|————————Node:subscript_expression Text: mTXBIsFree [inTXB]
|—————————Node:identifier Text: mTXBIsFree
|—————————Node:subscript_argument_list Text: [inTXB]
|——————————Node:[ Text: [
|——————————Node:identifier Text: inTXB
|——————————Node:] Text: ]
|————————Node:= Text: =
|————————Node:true Text: true
|———————Node:; Text: ;
|——————Node:} Text: }
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: void ACAN2515::internalSendMessage (const CANMessage & inFrame, const uint8_t inTXB) { // inTXB is 0, 1 or 2
//--- Send command
//      send via TXB0: 0x81
//      send via TXB1: 0x82
//      send via TXB2: 0x84
  const uint8_t sendCommand = REQUEST_TO_SEND_COMMAND | (1 << inTXB) ;
//--- Load TX buffer command
//      Load TXB0, start at TXB0SIDH: 0x40
//      Load TXB1, start at TXB1SIDH: 0x42
//      Load TXB2, start at TXB2SIDH: 0x44
  const uint8_t loadTxBufferCommand = LOAD_TX_BUFFER_COMMAND | (inTXB << 1) ;
//--- Send message
  select () ;
  mSPI.transfer (loadTxBufferCommand) ;
  if (inFrame.ext) { // Extended frame
    uint32_t v = inFrame.id >> 21 ;
    mSPI.transfer ((uint8_t) v) ; // ID28 ... ID21 --> SIDH
    v  = (inFrame.id >> 13) & 0xE0 ; // ID20, ID19, ID18 in bits 7, 6, 5
    v |= (inFrame.id >> 16) & 0x03 ; // ID17, ID16 in bits 1, 0
    v |= 0x08 ; // Extended bit
    mSPI.transfer ((uint8_t) v) ; // ID20, ID19, ID18, -, 1, -, ID17, ID16 --> SIDL
    v  = (inFrame.id >> 8) & 0xFF ; // ID15, ..., ID8
    mSPI.transfer ((uint8_t) v) ; // ID15, ID14, ID13, ID12, ID11, ID10, ID9, ID8 --> EID8
    v  = inFrame.id & 0xFF ; // ID7, ..., ID0
    mSPI.transfer ((uint8_t) v) ; // ID7, ID6, ID5, ID4, ID3, ID2, ID1, ID0 --> EID0
  }else{ // Standard frame
    uint32_t v = inFrame.id >> 3 ;
    mSPI.transfer ((uint8_t) v) ; // ID10 ... ID3 --> SIDH
    v  = (inFrame.id << 5) & 0xE0 ; // ID2, ID1, ID0 in bits 7, 6, 5
    mSPI.transfer ((uint8_t) v) ; // ID2, ID1, ID0, -, 0, -, 0, 0 --> SIDL
    mSPI.transfer (0x00) ; // any value --> EID8
    mSPI.transfer (0x00) ; // any value --> EID0
  }
//--- DLC
  uint8_t v = inFrame.len ;
  if (v > 8) {
    v = 8 ;
  }
  if (inFrame.rtr) {
    v |= 0x40 ;
  }
  mSPI.transfer (v) ;
//--- Send data
  if (!inFrame.rtr) {
    for (uint8_t i=0 ; i<inFrame.len ; i++) {
      mSPI.transfer (inFrame.data [i]) ;
    }
  }
  unselect () ;
//--- Write send command
  select () ;
    mSPI.transfer (sendCommand) ;
  unselect () ;
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: ACAN2515::internalSendMessage (const CANMessage & inFrame, const uint8_t inTXB)
|———Node:qualified_identifier Text: ACAN2515::internalSendMessage
|————Node:namespace_identifier Text: ACAN2515
|————Node::: Text: ::
|————Node:identifier Text: internalSendMessage
|———Node:parameter_list Text: (const CANMessage & inFrame, const uint8_t inTXB)
|————Node:( Text: (
|————Node:parameter_declaration Text: const CANMessage & inFrame
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: CANMessage
|—————Node:reference_declarator Text: & inFrame
|——————Node:& Text: &
|——————Node:identifier Text: inFrame
|————Node:, Text: ,
|————Node:parameter_declaration Text: const uint8_t inTXB
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: inTXB
|————Node:) Text: )
|——Node:compound_statement Text: { // inTXB is 0, 1 or 2
//--- Send command
//      send via TXB0: 0x81
//      send via TXB1: 0x82
//      send via TXB2: 0x84
  const uint8_t sendCommand = REQUEST_TO_SEND_COMMAND | (1 << inTXB) ;
//--- Load TX buffer command
//      Load TXB0, start at TXB0SIDH: 0x40
//      Load TXB1, start at TXB1SIDH: 0x42
//      Load TXB2, start at TXB2SIDH: 0x44
  const uint8_t loadTxBufferCommand = LOAD_TX_BUFFER_COMMAND | (inTXB << 1) ;
//--- Send message
  select () ;
  mSPI.transfer (loadTxBufferCommand) ;
  if (inFrame.ext) { // Extended frame
    uint32_t v = inFrame.id >> 21 ;
    mSPI.transfer ((uint8_t) v) ; // ID28 ... ID21 --> SIDH
    v  = (inFrame.id >> 13) & 0xE0 ; // ID20, ID19, ID18 in bits 7, 6, 5
    v |= (inFrame.id >> 16) & 0x03 ; // ID17, ID16 in bits 1, 0
    v |= 0x08 ; // Extended bit
    mSPI.transfer ((uint8_t) v) ; // ID20, ID19, ID18, -, 1, -, ID17, ID16 --> SIDL
    v  = (inFrame.id >> 8) & 0xFF ; // ID15, ..., ID8
    mSPI.transfer ((uint8_t) v) ; // ID15, ID14, ID13, ID12, ID11, ID10, ID9, ID8 --> EID8
    v  = inFrame.id & 0xFF ; // ID7, ..., ID0
    mSPI.transfer ((uint8_t) v) ; // ID7, ID6, ID5, ID4, ID3, ID2, ID1, ID0 --> EID0
  }else{ // Standard frame
    uint32_t v = inFrame.id >> 3 ;
    mSPI.transfer ((uint8_t) v) ; // ID10 ... ID3 --> SIDH
    v  = (inFrame.id << 5) & 0xE0 ; // ID2, ID1, ID0 in bits 7, 6, 5
    mSPI.transfer ((uint8_t) v) ; // ID2, ID1, ID0, -, 0, -, 0, 0 --> SIDL
    mSPI.transfer (0x00) ; // any value --> EID8
    mSPI.transfer (0x00) ; // any value --> EID0
  }
//--- DLC
  uint8_t v = inFrame.len ;
  if (v > 8) {
    v = 8 ;
  }
  if (inFrame.rtr) {
    v |= 0x40 ;
  }
  mSPI.transfer (v) ;
//--- Send data
  if (!inFrame.rtr) {
    for (uint8_t i=0 ; i<inFrame.len ; i++) {
      mSPI.transfer (inFrame.data [i]) ;
    }
  }
  unselect () ;
//--- Write send command
  select () ;
    mSPI.transfer (sendCommand) ;
  unselect () ;
}
|———Node:{ Text: {
|———Node:comment
|———Node:comment
|———Node:comment
|———Node:comment
|———Node:comment
|———Node:declaration Text: const uint8_t sendCommand = REQUEST_TO_SEND_COMMAND | (1 << inTXB) ;
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: sendCommand = REQUEST_TO_SEND_COMMAND | (1 << inTXB)
|—————Node:identifier Text: sendCommand
|—————Node:= Text: =
|—————Node:binary_expression Text: REQUEST_TO_SEND_COMMAND | (1 << inTXB)
|——————Node:identifier Text: REQUEST_TO_SEND_COMMAND
|——————Node:| Text: |
|——————Node:parenthesized_expression Text: (1 << inTXB)
|———————Node:( Text: (
|———————Node:binary_expression Text: 1 << inTXB
|————————Node:number_literal Text: 1
|————————Node:<< Text: <<
|————————Node:identifier Text: inTXB
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:comment
|———Node:comment
|———Node:comment
|———Node:declaration Text: const uint8_t loadTxBufferCommand = LOAD_TX_BUFFER_COMMAND | (inTXB << 1) ;
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: loadTxBufferCommand = LOAD_TX_BUFFER_COMMAND | (inTXB << 1)
|—————Node:identifier Text: loadTxBufferCommand
|—————Node:= Text: =
|—————Node:binary_expression Text: LOAD_TX_BUFFER_COMMAND | (inTXB << 1)
|——————Node:identifier Text: LOAD_TX_BUFFER_COMMAND
|——————Node:| Text: |
|——————Node:parenthesized_expression Text: (inTXB << 1)
|———————Node:( Text: (
|———————Node:binary_expression Text: inTXB << 1
|————————Node:identifier Text: inTXB
|————————Node:<< Text: <<
|————————Node:number_literal Text: 1
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: select () ;
|————Node:call_expression Text: select ()
|—————Node:identifier Text: select
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mSPI.transfer (loadTxBufferCommand) ;
|————Node:call_expression Text: mSPI.transfer (loadTxBufferCommand)
|—————Node:field_expression Text: mSPI.transfer
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: transfer
|—————Node:argument_list Text: (loadTxBufferCommand)
|——————Node:( Text: (
|——————Node:identifier Text: loadTxBufferCommand
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (inFrame.ext) { // Extended frame
    uint32_t v = inFrame.id >> 21 ;
    mSPI.transfer ((uint8_t) v) ; // ID28 ... ID21 --> SIDH
    v  = (inFrame.id >> 13) & 0xE0 ; // ID20, ID19, ID18 in bits 7, 6, 5
    v |= (inFrame.id >> 16) & 0x03 ; // ID17, ID16 in bits 1, 0
    v |= 0x08 ; // Extended bit
    mSPI.transfer ((uint8_t) v) ; // ID20, ID19, ID18, -, 1, -, ID17, ID16 --> SIDL
    v  = (inFrame.id >> 8) & 0xFF ; // ID15, ..., ID8
    mSPI.transfer ((uint8_t) v) ; // ID15, ID14, ID13, ID12, ID11, ID10, ID9, ID8 --> EID8
    v  = inFrame.id & 0xFF ; // ID7, ..., ID0
    mSPI.transfer ((uint8_t) v) ; // ID7, ID6, ID5, ID4, ID3, ID2, ID1, ID0 --> EID0
  }else{ // Standard frame
    uint32_t v = inFrame.id >> 3 ;
    mSPI.transfer ((uint8_t) v) ; // ID10 ... ID3 --> SIDH
    v  = (inFrame.id << 5) & 0xE0 ; // ID2, ID1, ID0 in bits 7, 6, 5
    mSPI.transfer ((uint8_t) v) ; // ID2, ID1, ID0, -, 0, -, 0, 0 --> SIDL
    mSPI.transfer (0x00) ; // any value --> EID8
    mSPI.transfer (0x00) ; // any value --> EID0
  }
|————Node:if Text: if
|————Node:condition_clause Text: (inFrame.ext)
|—————Node:( Text: (
|—————Node:field_expression Text: inFrame.ext
|——————Node:identifier Text: inFrame
|——————Node:. Text: .
|——————Node:field_identifier Text: ext
|—————Node:) Text: )
|————Node:compound_statement Text: { // Extended frame
    uint32_t v = inFrame.id >> 21 ;
    mSPI.transfer ((uint8_t) v) ; // ID28 ... ID21 --> SIDH
    v  = (inFrame.id >> 13) & 0xE0 ; // ID20, ID19, ID18 in bits 7, 6, 5
    v |= (inFrame.id >> 16) & 0x03 ; // ID17, ID16 in bits 1, 0
    v |= 0x08 ; // Extended bit
    mSPI.transfer ((uint8_t) v) ; // ID20, ID19, ID18, -, 1, -, ID17, ID16 --> SIDL
    v  = (inFrame.id >> 8) & 0xFF ; // ID15, ..., ID8
    mSPI.transfer ((uint8_t) v) ; // ID15, ID14, ID13, ID12, ID11, ID10, ID9, ID8 --> EID8
    v  = inFrame.id & 0xFF ; // ID7, ..., ID0
    mSPI.transfer ((uint8_t) v) ; // ID7, ID6, ID5, ID4, ID3, ID2, ID1, ID0 --> EID0
  }
|—————Node:{ Text: {
|—————Node:comment
|—————Node:declaration Text: uint32_t v = inFrame.id >> 21 ;
|——————Node:primitive_type Text: uint32_t
|——————Node:init_declarator Text: v = inFrame.id >> 21
|———————Node:identifier Text: v
|———————Node:= Text: =
|———————Node:binary_expression Text: inFrame.id >> 21
|————————Node:field_expression Text: inFrame.id
|—————————Node:identifier Text: inFrame
|—————————Node:. Text: .
|—————————Node:field_identifier Text: id
|————————Node:>> Text: >>
|————————Node:number_literal Text: 21
|——————Node:; Text: ;
|—————Node:expression_statement Text: mSPI.transfer ((uint8_t) v) ;
|——————Node:call_expression Text: mSPI.transfer ((uint8_t) v)
|———————Node:field_expression Text: mSPI.transfer
|————————Node:identifier Text: mSPI
|————————Node:. Text: .
|————————Node:field_identifier Text: transfer
|———————Node:argument_list Text: ((uint8_t) v)
|————————Node:( Text: (
|————————Node:cast_expression Text: (uint8_t) v
|—————————Node:( Text: (
|—————————Node:type_descriptor Text: uint8_t
|——————————Node:primitive_type Text: uint8_t
|—————————Node:) Text: )
|—————————Node:identifier Text: v
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment
|—————Node:expression_statement Text: v  = (inFrame.id >> 13) & 0xE0 ;
|——————Node:assignment_expression Text: v  = (inFrame.id >> 13) & 0xE0
|———————Node:identifier Text: v
|———————Node:= Text: =
|———————Node:binary_expression Text: (inFrame.id >> 13) & 0xE0
|————————Node:parenthesized_expression Text: (inFrame.id >> 13)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: inFrame.id >> 13
|——————————Node:field_expression Text: inFrame.id
|———————————Node:identifier Text: inFrame
|———————————Node:. Text: .
|———————————Node:field_identifier Text: id
|——————————Node:>> Text: >>
|——————————Node:number_literal Text: 13
|—————————Node:) Text: )
|————————Node:& Text: &
|————————Node:number_literal Text: 0xE0
|——————Node:; Text: ;
|—————Node:comment
|—————Node:expression_statement Text: v |= (inFrame.id >> 16) & 0x03 ;
|——————Node:assignment_expression Text: v |= (inFrame.id >> 16) & 0x03
|———————Node:identifier Text: v
|———————Node:|= Text: |=
|———————Node:binary_expression Text: (inFrame.id >> 16) & 0x03
|————————Node:parenthesized_expression Text: (inFrame.id >> 16)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: inFrame.id >> 16
|——————————Node:field_expression Text: inFrame.id
|———————————Node:identifier Text: inFrame
|———————————Node:. Text: .
|———————————Node:field_identifier Text: id
|——————————Node:>> Text: >>
|——————————Node:number_literal Text: 16
|—————————Node:) Text: )
|————————Node:& Text: &
|————————Node:number_literal Text: 0x03
|——————Node:; Text: ;
|—————Node:comment
|—————Node:expression_statement Text: v |= 0x08 ;
|——————Node:assignment_expression Text: v |= 0x08
|———————Node:identifier Text: v
|———————Node:|= Text: |=
|———————Node:number_literal Text: 0x08
|——————Node:; Text: ;
|—————Node:comment
|—————Node:expression_statement Text: mSPI.transfer ((uint8_t) v) ;
|——————Node:call_expression Text: mSPI.transfer ((uint8_t) v)
|———————Node:field_expression Text: mSPI.transfer
|————————Node:identifier Text: mSPI
|————————Node:. Text: .
|————————Node:field_identifier Text: transfer
|———————Node:argument_list Text: ((uint8_t) v)
|————————Node:( Text: (
|————————Node:cast_expression Text: (uint8_t) v
|—————————Node:( Text: (
|—————————Node:type_descriptor Text: uint8_t
|——————————Node:primitive_type Text: uint8_t
|—————————Node:) Text: )
|—————————Node:identifier Text: v
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment
|—————Node:expression_statement Text: v  = (inFrame.id >> 8) & 0xFF ;
|——————Node:assignment_expression Text: v  = (inFrame.id >> 8) & 0xFF
|———————Node:identifier Text: v
|———————Node:= Text: =
|———————Node:binary_expression Text: (inFrame.id >> 8) & 0xFF
|————————Node:parenthesized_expression Text: (inFrame.id >> 8)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: inFrame.id >> 8
|——————————Node:field_expression Text: inFrame.id
|———————————Node:identifier Text: inFrame
|———————————Node:. Text: .
|———————————Node:field_identifier Text: id
|——————————Node:>> Text: >>
|——————————Node:number_literal Text: 8
|—————————Node:) Text: )
|————————Node:& Text: &
|————————Node:number_literal Text: 0xFF
|——————Node:; Text: ;
|—————Node:comment
|—————Node:expression_statement Text: mSPI.transfer ((uint8_t) v) ;
|——————Node:call_expression Text: mSPI.transfer ((uint8_t) v)
|———————Node:field_expression Text: mSPI.transfer
|————————Node:identifier Text: mSPI
|————————Node:. Text: .
|————————Node:field_identifier Text: transfer
|———————Node:argument_list Text: ((uint8_t) v)
|————————Node:( Text: (
|————————Node:cast_expression Text: (uint8_t) v
|—————————Node:( Text: (
|—————————Node:type_descriptor Text: uint8_t
|——————————Node:primitive_type Text: uint8_t
|—————————Node:) Text: )
|—————————Node:identifier Text: v
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment
|—————Node:expression_statement Text: v  = inFrame.id & 0xFF ;
|——————Node:assignment_expression Text: v  = inFrame.id & 0xFF
|———————Node:identifier Text: v
|———————Node:= Text: =
|———————Node:binary_expression Text: inFrame.id & 0xFF
|————————Node:field_expression Text: inFrame.id
|—————————Node:identifier Text: inFrame
|—————————Node:. Text: .
|—————————Node:field_identifier Text: id
|————————Node:& Text: &
|————————Node:number_literal Text: 0xFF
|——————Node:; Text: ;
|—————Node:comment
|—————Node:expression_statement Text: mSPI.transfer ((uint8_t) v) ;
|——————Node:call_expression Text: mSPI.transfer ((uint8_t) v)
|———————Node:field_expression Text: mSPI.transfer
|————————Node:identifier Text: mSPI
|————————Node:. Text: .
|————————Node:field_identifier Text: transfer
|———————Node:argument_list Text: ((uint8_t) v)
|————————Node:( Text: (
|————————Node:cast_expression Text: (uint8_t) v
|—————————Node:( Text: (
|—————————Node:type_descriptor Text: uint8_t
|——————————Node:primitive_type Text: uint8_t
|—————————Node:) Text: )
|—————————Node:identifier Text: v
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment
|—————Node:} Text: }
|————Node:else_clause Text: else{ // Standard frame
    uint32_t v = inFrame.id >> 3 ;
    mSPI.transfer ((uint8_t) v) ; // ID10 ... ID3 --> SIDH
    v  = (inFrame.id << 5) & 0xE0 ; // ID2, ID1, ID0 in bits 7, 6, 5
    mSPI.transfer ((uint8_t) v) ; // ID2, ID1, ID0, -, 0, -, 0, 0 --> SIDL
    mSPI.transfer (0x00) ; // any value --> EID8
    mSPI.transfer (0x00) ; // any value --> EID0
  }
|—————Node:else Text: else
|—————Node:compound_statement Text: { // Standard frame
    uint32_t v = inFrame.id >> 3 ;
    mSPI.transfer ((uint8_t) v) ; // ID10 ... ID3 --> SIDH
    v  = (inFrame.id << 5) & 0xE0 ; // ID2, ID1, ID0 in bits 7, 6, 5
    mSPI.transfer ((uint8_t) v) ; // ID2, ID1, ID0, -, 0, -, 0, 0 --> SIDL
    mSPI.transfer (0x00) ; // any value --> EID8
    mSPI.transfer (0x00) ; // any value --> EID0
  }
|——————Node:{ Text: {
|——————Node:comment
|——————Node:declaration Text: uint32_t v = inFrame.id >> 3 ;
|———————Node:primitive_type Text: uint32_t
|———————Node:init_declarator Text: v = inFrame.id >> 3
|————————Node:identifier Text: v
|————————Node:= Text: =
|————————Node:binary_expression Text: inFrame.id >> 3
|—————————Node:field_expression Text: inFrame.id
|——————————Node:identifier Text: inFrame
|——————————Node:. Text: .
|——————————Node:field_identifier Text: id
|—————————Node:>> Text: >>
|—————————Node:number_literal Text: 3
|———————Node:; Text: ;
|——————Node:expression_statement Text: mSPI.transfer ((uint8_t) v) ;
|———————Node:call_expression Text: mSPI.transfer ((uint8_t) v)
|————————Node:field_expression Text: mSPI.transfer
|—————————Node:identifier Text: mSPI
|—————————Node:. Text: .
|—————————Node:field_identifier Text: transfer
|————————Node:argument_list Text: ((uint8_t) v)
|—————————Node:( Text: (
|—————————Node:cast_expression Text: (uint8_t) v
|——————————Node:( Text: (
|——————————Node:type_descriptor Text: uint8_t
|———————————Node:primitive_type Text: uint8_t
|——————————Node:) Text: )
|——————————Node:identifier Text: v
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: v  = (inFrame.id << 5) & 0xE0 ;
|———————Node:assignment_expression Text: v  = (inFrame.id << 5) & 0xE0
|————————Node:identifier Text: v
|————————Node:= Text: =
|————————Node:binary_expression Text: (inFrame.id << 5) & 0xE0
|—————————Node:parenthesized_expression Text: (inFrame.id << 5)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: inFrame.id << 5
|———————————Node:field_expression Text: inFrame.id
|————————————Node:identifier Text: inFrame
|————————————Node:. Text: .
|————————————Node:field_identifier Text: id
|———————————Node:<< Text: <<
|———————————Node:number_literal Text: 5
|——————————Node:) Text: )
|—————————Node:& Text: &
|—————————Node:number_literal Text: 0xE0
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: mSPI.transfer ((uint8_t) v) ;
|———————Node:call_expression Text: mSPI.transfer ((uint8_t) v)
|————————Node:field_expression Text: mSPI.transfer
|—————————Node:identifier Text: mSPI
|—————————Node:. Text: .
|—————————Node:field_identifier Text: transfer
|————————Node:argument_list Text: ((uint8_t) v)
|—————————Node:( Text: (
|—————————Node:cast_expression Text: (uint8_t) v
|——————————Node:( Text: (
|——————————Node:type_descriptor Text: uint8_t
|———————————Node:primitive_type Text: uint8_t
|——————————Node:) Text: )
|——————————Node:identifier Text: v
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: mSPI.transfer (0x00) ;
|———————Node:call_expression Text: mSPI.transfer (0x00)
|————————Node:field_expression Text: mSPI.transfer
|—————————Node:identifier Text: mSPI
|—————————Node:. Text: .
|—————————Node:field_identifier Text: transfer
|————————Node:argument_list Text: (0x00)
|—————————Node:( Text: (
|—————————Node:number_literal Text: 0x00
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: mSPI.transfer (0x00) ;
|———————Node:call_expression Text: mSPI.transfer (0x00)
|————————Node:field_expression Text: mSPI.transfer
|—————————Node:identifier Text: mSPI
|—————————Node:. Text: .
|—————————Node:field_identifier Text: transfer
|————————Node:argument_list Text: (0x00)
|—————————Node:( Text: (
|—————————Node:number_literal Text: 0x00
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:comment
|——————Node:} Text: }
|———Node:comment
|———Node:declaration Text: uint8_t v = inFrame.len ;
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: v = inFrame.len
|—————Node:identifier Text: v
|—————Node:= Text: =
|—————Node:field_expression Text: inFrame.len
|——————Node:identifier Text: inFrame
|——————Node:. Text: .
|——————Node:field_identifier Text: len
|————Node:; Text: ;
|———Node:if_statement Text: if (v > 8) {
    v = 8 ;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (v > 8)
|—————Node:( Text: (
|—————Node:binary_expression Text: v > 8
|——————Node:identifier Text: v
|——————Node:> Text: >
|——————Node:number_literal Text: 8
|—————Node:) Text: )
|————Node:compound_statement Text: {
    v = 8 ;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: v = 8 ;
|——————Node:assignment_expression Text: v = 8
|———————Node:identifier Text: v
|———————Node:= Text: =
|———————Node:number_literal Text: 8
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:if_statement Text: if (inFrame.rtr) {
    v |= 0x40 ;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (inFrame.rtr)
|—————Node:( Text: (
|—————Node:field_expression Text: inFrame.rtr
|——————Node:identifier Text: inFrame
|——————Node:. Text: .
|——————Node:field_identifier Text: rtr
|—————Node:) Text: )
|————Node:compound_statement Text: {
    v |= 0x40 ;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: v |= 0x40 ;
|——————Node:assignment_expression Text: v |= 0x40
|———————Node:identifier Text: v
|———————Node:|= Text: |=
|———————Node:number_literal Text: 0x40
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: mSPI.transfer (v) ;
|————Node:call_expression Text: mSPI.transfer (v)
|—————Node:field_expression Text: mSPI.transfer
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: transfer
|—————Node:argument_list Text: (v)
|——————Node:( Text: (
|——————Node:identifier Text: v
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:if_statement Text: if (!inFrame.rtr) {
    for (uint8_t i=0 ; i<inFrame.len ; i++) {
      mSPI.transfer (inFrame.data [i]) ;
    }
  }
|————Node:if Text: if
|————Node:condition_clause Text: (!inFrame.rtr)
|—————Node:( Text: (
|—————Node:unary_expression Text: !inFrame.rtr
|——————Node:! Text: !
|——————Node:field_expression Text: inFrame.rtr
|———————Node:identifier Text: inFrame
|———————Node:. Text: .
|———————Node:field_identifier Text: rtr
|—————Node:) Text: )
|————Node:compound_statement Text: {
    for (uint8_t i=0 ; i<inFrame.len ; i++) {
      mSPI.transfer (inFrame.data [i]) ;
    }
  }
|—————Node:{ Text: {
|—————Node:for_statement Text: for (uint8_t i=0 ; i<inFrame.len ; i++) {
      mSPI.transfer (inFrame.data [i]) ;
    }
|——————Node:for Text: for
|——————Node:( Text: (
|——————Node:declaration Text: uint8_t i=0 ;
|———————Node:primitive_type Text: uint8_t
|———————Node:init_declarator Text: i=0
|————————Node:identifier Text: i
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:binary_expression Text: i<inFrame.len
|———————Node:identifier Text: i
|———————Node:< Text: <
|———————Node:field_expression Text: inFrame.len
|————————Node:identifier Text: inFrame
|————————Node:. Text: .
|————————Node:field_identifier Text: len
|——————Node:; Text: ;
|——————Node:update_expression Text: i++
|———————Node:identifier Text: i
|———————Node:++ Text: ++
|——————Node:) Text: )
|——————Node:compound_statement Text: {
      mSPI.transfer (inFrame.data [i]) ;
    }
|———————Node:{ Text: {
|———————Node:expression_statement Text: mSPI.transfer (inFrame.data [i]) ;
|————————Node:call_expression Text: mSPI.transfer (inFrame.data [i])
|—————————Node:field_expression Text: mSPI.transfer
|——————————Node:identifier Text: mSPI
|——————————Node:. Text: .
|——————————Node:field_identifier Text: transfer
|—————————Node:argument_list Text: (inFrame.data [i])
|——————————Node:( Text: (
|——————————Node:subscript_expression Text: inFrame.data [i]
|———————————Node:field_expression Text: inFrame.data
|————————————Node:identifier Text: inFrame
|————————————Node:. Text: .
|————————————Node:field_identifier Text: data
|———————————Node:subscript_argument_list Text: [i]
|————————————Node:[ Text: [
|————————————Node:identifier Text: i
|————————————Node:] Text: ]
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:expression_statement Text: unselect () ;
|————Node:call_expression Text: unselect ()
|—————Node:identifier Text: unselect
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: select () ;
|————Node:call_expression Text: select ()
|—————Node:identifier Text: select
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mSPI.transfer (sendCommand) ;
|————Node:call_expression Text: mSPI.transfer (sendCommand)
|—————Node:field_expression Text: mSPI.transfer
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: transfer
|—————Node:argument_list Text: (sendCommand)
|——————Node:( Text: (
|——————Node:identifier Text: sendCommand
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: unselect () ;
|————Node:call_expression Text: unselect ()
|—————Node:identifier Text: unselect
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:function_definition Text: void ACAN2515::write2515Register (const uint8_t inRegister, const uint8_t inValue) {
  select () ;
    mSPI.transfer (WRITE_COMMAND) ;
    mSPI.transfer (inRegister) ;
    mSPI.transfer (inValue) ;
  unselect () ;
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: ACAN2515::write2515Register (const uint8_t inRegister, const uint8_t inValue)
|———Node:qualified_identifier Text: ACAN2515::write2515Register
|————Node:namespace_identifier Text: ACAN2515
|————Node::: Text: ::
|————Node:identifier Text: write2515Register
|———Node:parameter_list Text: (const uint8_t inRegister, const uint8_t inValue)
|————Node:( Text: (
|————Node:parameter_declaration Text: const uint8_t inRegister
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: inRegister
|————Node:, Text: ,
|————Node:parameter_declaration Text: const uint8_t inValue
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: inValue
|————Node:) Text: )
|——Node:compound_statement Text: {
  select () ;
    mSPI.transfer (WRITE_COMMAND) ;
    mSPI.transfer (inRegister) ;
    mSPI.transfer (inValue) ;
  unselect () ;
}
|———Node:{ Text: {
|———Node:expression_statement Text: select () ;
|————Node:call_expression Text: select ()
|—————Node:identifier Text: select
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mSPI.transfer (WRITE_COMMAND) ;
|————Node:call_expression Text: mSPI.transfer (WRITE_COMMAND)
|—————Node:field_expression Text: mSPI.transfer
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: transfer
|—————Node:argument_list Text: (WRITE_COMMAND)
|——————Node:( Text: (
|——————Node:identifier Text: WRITE_COMMAND
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mSPI.transfer (inRegister) ;
|————Node:call_expression Text: mSPI.transfer (inRegister)
|—————Node:field_expression Text: mSPI.transfer
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: transfer
|—————Node:argument_list Text: (inRegister)
|——————Node:( Text: (
|——————Node:identifier Text: inRegister
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mSPI.transfer (inValue) ;
|————Node:call_expression Text: mSPI.transfer (inValue)
|—————Node:field_expression Text: mSPI.transfer
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: transfer
|—————Node:argument_list Text: (inValue)
|——————Node:( Text: (
|——————Node:identifier Text: inValue
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: unselect () ;
|————Node:call_expression Text: unselect ()
|—————Node:identifier Text: unselect
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: uint8_t ACAN2515::read2515Register (const uint8_t inRegister) {
  select () ;
    mSPI.transfer (READ_COMMAND) ;
    mSPI.transfer (inRegister) ;
    const uint8_t readValue = mSPI.transfer (0) ;
  unselect () ;
  return readValue ;
}
|——Node:primitive_type Text: uint8_t
|——Node:function_declarator Text: ACAN2515::read2515Register (const uint8_t inRegister)
|———Node:qualified_identifier Text: ACAN2515::read2515Register
|————Node:namespace_identifier Text: ACAN2515
|————Node::: Text: ::
|————Node:identifier Text: read2515Register
|———Node:parameter_list Text: (const uint8_t inRegister)
|————Node:( Text: (
|————Node:parameter_declaration Text: const uint8_t inRegister
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: inRegister
|————Node:) Text: )
|——Node:compound_statement Text: {
  select () ;
    mSPI.transfer (READ_COMMAND) ;
    mSPI.transfer (inRegister) ;
    const uint8_t readValue = mSPI.transfer (0) ;
  unselect () ;
  return readValue ;
}
|———Node:{ Text: {
|———Node:expression_statement Text: select () ;
|————Node:call_expression Text: select ()
|—————Node:identifier Text: select
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mSPI.transfer (READ_COMMAND) ;
|————Node:call_expression Text: mSPI.transfer (READ_COMMAND)
|—————Node:field_expression Text: mSPI.transfer
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: transfer
|—————Node:argument_list Text: (READ_COMMAND)
|——————Node:( Text: (
|——————Node:identifier Text: READ_COMMAND
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mSPI.transfer (inRegister) ;
|————Node:call_expression Text: mSPI.transfer (inRegister)
|—————Node:field_expression Text: mSPI.transfer
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: transfer
|—————Node:argument_list Text: (inRegister)
|——————Node:( Text: (
|——————Node:identifier Text: inRegister
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: const uint8_t readValue = mSPI.transfer (0) ;
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: readValue = mSPI.transfer (0)
|—————Node:identifier Text: readValue
|—————Node:= Text: =
|—————Node:call_expression Text: mSPI.transfer (0)
|——————Node:field_expression Text: mSPI.transfer
|———————Node:identifier Text: mSPI
|———————Node:. Text: .
|———————Node:field_identifier Text: transfer
|——————Node:argument_list Text: (0)
|———————Node:( Text: (
|———————Node:number_literal Text: 0
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: unselect () ;
|————Node:call_expression Text: unselect ()
|—————Node:identifier Text: unselect
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return readValue ;
|————Node:return Text: return
|————Node:identifier Text: readValue
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: uint8_t ACAN2515::read2515Status (void) {
  select () ;
    mSPI.transfer (READ_STATUS_COMMAND) ;
    const uint8_t readValue = mSPI.transfer (0) ;
  unselect () ;
  return readValue ;
}
|——Node:primitive_type Text: uint8_t
|——Node:function_declarator Text: ACAN2515::read2515Status (void)
|———Node:qualified_identifier Text: ACAN2515::read2515Status
|————Node:namespace_identifier Text: ACAN2515
|————Node::: Text: ::
|————Node:identifier Text: read2515Status
|———Node:parameter_list Text: (void)
|————Node:( Text: (
|————Node:parameter_declaration Text: void
|—————Node:primitive_type Text: void
|————Node:) Text: )
|——Node:compound_statement Text: {
  select () ;
    mSPI.transfer (READ_STATUS_COMMAND) ;
    const uint8_t readValue = mSPI.transfer (0) ;
  unselect () ;
  return readValue ;
}
|———Node:{ Text: {
|———Node:expression_statement Text: select () ;
|————Node:call_expression Text: select ()
|—————Node:identifier Text: select
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mSPI.transfer (READ_STATUS_COMMAND) ;
|————Node:call_expression Text: mSPI.transfer (READ_STATUS_COMMAND)
|—————Node:field_expression Text: mSPI.transfer
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: transfer
|—————Node:argument_list Text: (READ_STATUS_COMMAND)
|——————Node:( Text: (
|——————Node:identifier Text: READ_STATUS_COMMAND
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: const uint8_t readValue = mSPI.transfer (0) ;
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: readValue = mSPI.transfer (0)
|—————Node:identifier Text: readValue
|—————Node:= Text: =
|—————Node:call_expression Text: mSPI.transfer (0)
|——————Node:field_expression Text: mSPI.transfer
|———————Node:identifier Text: mSPI
|———————Node:. Text: .
|———————Node:field_identifier Text: transfer
|——————Node:argument_list Text: (0)
|———————Node:( Text: (
|———————Node:number_literal Text: 0
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: unselect () ;
|————Node:call_expression Text: unselect ()
|—————Node:identifier Text: unselect
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return readValue ;
|————Node:return Text: return
|————Node:identifier Text: readValue
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: uint8_t ACAN2515::read2515RxStatus (void) {
  select () ;
    mSPI.transfer (RX_STATUS_COMMAND) ;
    const uint8_t readValue = mSPI.transfer (0) ;
  unselect () ;
  return readValue ;
}
|——Node:primitive_type Text: uint8_t
|——Node:function_declarator Text: ACAN2515::read2515RxStatus (void)
|———Node:qualified_identifier Text: ACAN2515::read2515RxStatus
|————Node:namespace_identifier Text: ACAN2515
|————Node::: Text: ::
|————Node:identifier Text: read2515RxStatus
|———Node:parameter_list Text: (void)
|————Node:( Text: (
|————Node:parameter_declaration Text: void
|—————Node:primitive_type Text: void
|————Node:) Text: )
|——Node:compound_statement Text: {
  select () ;
    mSPI.transfer (RX_STATUS_COMMAND) ;
    const uint8_t readValue = mSPI.transfer (0) ;
  unselect () ;
  return readValue ;
}
|———Node:{ Text: {
|———Node:expression_statement Text: select () ;
|————Node:call_expression Text: select ()
|—————Node:identifier Text: select
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mSPI.transfer (RX_STATUS_COMMAND) ;
|————Node:call_expression Text: mSPI.transfer (RX_STATUS_COMMAND)
|—————Node:field_expression Text: mSPI.transfer
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: transfer
|—————Node:argument_list Text: (RX_STATUS_COMMAND)
|——————Node:( Text: (
|——————Node:identifier Text: RX_STATUS_COMMAND
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: const uint8_t readValue = mSPI.transfer (0) ;
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: readValue = mSPI.transfer (0)
|—————Node:identifier Text: readValue
|—————Node:= Text: =
|—————Node:call_expression Text: mSPI.transfer (0)
|——————Node:field_expression Text: mSPI.transfer
|———————Node:identifier Text: mSPI
|———————Node:. Text: .
|———————Node:field_identifier Text: transfer
|——————Node:argument_list Text: (0)
|———————Node:( Text: (
|———————Node:number_literal Text: 0
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: unselect () ;
|————Node:call_expression Text: unselect ()
|—————Node:identifier Text: unselect
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return readValue ;
|————Node:return Text: return
|————Node:identifier Text: readValue
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: void ACAN2515::bitModify2515Register (const uint8_t inRegister,
                                      const uint8_t inMask,
                                      const uint8_t inData) {
  select () ;
    mSPI.transfer (BIT_MODIFY_COMMAND) ;
    mSPI.transfer (inRegister) ;
    mSPI.transfer (inMask) ;
    mSPI.transfer (inData) ;
  unselect () ;
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: ACAN2515::bitModify2515Register (const uint8_t inRegister,
                                      const uint8_t inMask,
                                      const uint8_t inData)
|———Node:qualified_identifier Text: ACAN2515::bitModify2515Register
|————Node:namespace_identifier Text: ACAN2515
|————Node::: Text: ::
|————Node:identifier Text: bitModify2515Register
|———Node:parameter_list Text: (const uint8_t inRegister,
                                      const uint8_t inMask,
                                      const uint8_t inData)
|————Node:( Text: (
|————Node:parameter_declaration Text: const uint8_t inRegister
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: inRegister
|————Node:, Text: ,
|————Node:parameter_declaration Text: const uint8_t inMask
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: inMask
|————Node:, Text: ,
|————Node:parameter_declaration Text: const uint8_t inData
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: inData
|————Node:) Text: )
|——Node:compound_statement Text: {
  select () ;
    mSPI.transfer (BIT_MODIFY_COMMAND) ;
    mSPI.transfer (inRegister) ;
    mSPI.transfer (inMask) ;
    mSPI.transfer (inData) ;
  unselect () ;
}
|———Node:{ Text: {
|———Node:expression_statement Text: select () ;
|————Node:call_expression Text: select ()
|—————Node:identifier Text: select
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mSPI.transfer (BIT_MODIFY_COMMAND) ;
|————Node:call_expression Text: mSPI.transfer (BIT_MODIFY_COMMAND)
|—————Node:field_expression Text: mSPI.transfer
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: transfer
|—————Node:argument_list Text: (BIT_MODIFY_COMMAND)
|——————Node:( Text: (
|——————Node:identifier Text: BIT_MODIFY_COMMAND
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mSPI.transfer (inRegister) ;
|————Node:call_expression Text: mSPI.transfer (inRegister)
|—————Node:field_expression Text: mSPI.transfer
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: transfer
|—————Node:argument_list Text: (inRegister)
|——————Node:( Text: (
|——————Node:identifier Text: inRegister
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mSPI.transfer (inMask) ;
|————Node:call_expression Text: mSPI.transfer (inMask)
|—————Node:field_expression Text: mSPI.transfer
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: transfer
|—————Node:argument_list Text: (inMask)
|——————Node:( Text: (
|——————Node:identifier Text: inMask
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mSPI.transfer (inData) ;
|————Node:call_expression Text: mSPI.transfer (inData)
|—————Node:field_expression Text: mSPI.transfer
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: transfer
|—————Node:argument_list Text: (inData)
|——————Node:( Text: (
|——————Node:identifier Text: inData
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: unselect () ;
|————Node:call_expression Text: unselect ()
|—————Node:identifier Text: unselect
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: void ACAN2515::setupMaskRegister (const ACAN2515Mask inMask, const uint8_t inRegister) {
  select () ;
    mSPI.transfer (WRITE_COMMAND) ;
    mSPI.transfer (inRegister) ;
    mSPI.transfer (inMask.mSIDH) ;
    mSPI.transfer (inMask.mSIDL) ;
    mSPI.transfer (inMask.mEID8) ;
    mSPI.transfer (inMask.mEID0) ;
  unselect () ;
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: ACAN2515::setupMaskRegister (const ACAN2515Mask inMask, const uint8_t inRegister)
|———Node:qualified_identifier Text: ACAN2515::setupMaskRegister
|————Node:namespace_identifier Text: ACAN2515
|————Node::: Text: ::
|————Node:identifier Text: setupMaskRegister
|———Node:parameter_list Text: (const ACAN2515Mask inMask, const uint8_t inRegister)
|————Node:( Text: (
|————Node:parameter_declaration Text: const ACAN2515Mask inMask
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: ACAN2515Mask
|—————Node:identifier Text: inMask
|————Node:, Text: ,
|————Node:parameter_declaration Text: const uint8_t inRegister
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: inRegister
|————Node:) Text: )
|——Node:compound_statement Text: {
  select () ;
    mSPI.transfer (WRITE_COMMAND) ;
    mSPI.transfer (inRegister) ;
    mSPI.transfer (inMask.mSIDH) ;
    mSPI.transfer (inMask.mSIDL) ;
    mSPI.transfer (inMask.mEID8) ;
    mSPI.transfer (inMask.mEID0) ;
  unselect () ;
}
|———Node:{ Text: {
|———Node:expression_statement Text: select () ;
|————Node:call_expression Text: select ()
|—————Node:identifier Text: select
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mSPI.transfer (WRITE_COMMAND) ;
|————Node:call_expression Text: mSPI.transfer (WRITE_COMMAND)
|—————Node:field_expression Text: mSPI.transfer
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: transfer
|—————Node:argument_list Text: (WRITE_COMMAND)
|——————Node:( Text: (
|——————Node:identifier Text: WRITE_COMMAND
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mSPI.transfer (inRegister) ;
|————Node:call_expression Text: mSPI.transfer (inRegister)
|—————Node:field_expression Text: mSPI.transfer
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: transfer
|—————Node:argument_list Text: (inRegister)
|——————Node:( Text: (
|——————Node:identifier Text: inRegister
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mSPI.transfer (inMask.mSIDH) ;
|————Node:call_expression Text: mSPI.transfer (inMask.mSIDH)
|—————Node:field_expression Text: mSPI.transfer
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: transfer
|—————Node:argument_list Text: (inMask.mSIDH)
|——————Node:( Text: (
|——————Node:field_expression Text: inMask.mSIDH
|———————Node:identifier Text: inMask
|———————Node:. Text: .
|———————Node:field_identifier Text: mSIDH
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mSPI.transfer (inMask.mSIDL) ;
|————Node:call_expression Text: mSPI.transfer (inMask.mSIDL)
|—————Node:field_expression Text: mSPI.transfer
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: transfer
|—————Node:argument_list Text: (inMask.mSIDL)
|——————Node:( Text: (
|——————Node:field_expression Text: inMask.mSIDL
|———————Node:identifier Text: inMask
|———————Node:. Text: .
|———————Node:field_identifier Text: mSIDL
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mSPI.transfer (inMask.mEID8) ;
|————Node:call_expression Text: mSPI.transfer (inMask.mEID8)
|—————Node:field_expression Text: mSPI.transfer
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: transfer
|—————Node:argument_list Text: (inMask.mEID8)
|——————Node:( Text: (
|——————Node:field_expression Text: inMask.mEID8
|———————Node:identifier Text: inMask
|———————Node:. Text: .
|———————Node:field_identifier Text: mEID8
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mSPI.transfer (inMask.mEID0) ;
|————Node:call_expression Text: mSPI.transfer (inMask.mEID0)
|—————Node:field_expression Text: mSPI.transfer
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: transfer
|—————Node:argument_list Text: (inMask.mEID0)
|——————Node:( Text: (
|——————Node:field_expression Text: inMask.mEID0
|———————Node:identifier Text: inMask
|———————Node:. Text: .
|———————Node:field_identifier Text: mEID0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: unselect () ;
|————Node:call_expression Text: unselect ()
|—————Node:identifier Text: unselect
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:function_definition Text: uint8_t ACAN2515::transmitErrorCounter (void) {
  mSPI.beginTransaction (mSPISettings) ;
    const uint8_t result = read2515Register (TEC_REGISTER) ;
  mSPI.endTransaction () ;
  return result ;
}
|——Node:primitive_type Text: uint8_t
|——Node:function_declarator Text: ACAN2515::transmitErrorCounter (void)
|———Node:qualified_identifier Text: ACAN2515::transmitErrorCounter
|————Node:namespace_identifier Text: ACAN2515
|————Node::: Text: ::
|————Node:identifier Text: transmitErrorCounter
|———Node:parameter_list Text: (void)
|————Node:( Text: (
|————Node:parameter_declaration Text: void
|—————Node:primitive_type Text: void
|————Node:) Text: )
|——Node:compound_statement Text: {
  mSPI.beginTransaction (mSPISettings) ;
    const uint8_t result = read2515Register (TEC_REGISTER) ;
  mSPI.endTransaction () ;
  return result ;
}
|———Node:{ Text: {
|———Node:expression_statement Text: mSPI.beginTransaction (mSPISettings) ;
|————Node:call_expression Text: mSPI.beginTransaction (mSPISettings)
|—————Node:field_expression Text: mSPI.beginTransaction
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: beginTransaction
|—————Node:argument_list Text: (mSPISettings)
|——————Node:( Text: (
|——————Node:identifier Text: mSPISettings
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: const uint8_t result = read2515Register (TEC_REGISTER) ;
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: result = read2515Register (TEC_REGISTER)
|—————Node:identifier Text: result
|—————Node:= Text: =
|—————Node:call_expression Text: read2515Register (TEC_REGISTER)
|——————Node:identifier Text: read2515Register
|——————Node:argument_list Text: (TEC_REGISTER)
|———————Node:( Text: (
|———————Node:identifier Text: TEC_REGISTER
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mSPI.endTransaction () ;
|————Node:call_expression Text: mSPI.endTransaction ()
|—————Node:field_expression Text: mSPI.endTransaction
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: endTransaction
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return result ;
|————Node:return Text: return
|————Node:identifier Text: result
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: uint8_t ACAN2515::receiveErrorCounter (void) {
  mSPI.beginTransaction (mSPISettings) ;
    const uint8_t result = read2515Register (REC_REGISTER) ;
  mSPI.endTransaction () ;
  return result ;
}
|——Node:primitive_type Text: uint8_t
|——Node:function_declarator Text: ACAN2515::receiveErrorCounter (void)
|———Node:qualified_identifier Text: ACAN2515::receiveErrorCounter
|————Node:namespace_identifier Text: ACAN2515
|————Node::: Text: ::
|————Node:identifier Text: receiveErrorCounter
|———Node:parameter_list Text: (void)
|————Node:( Text: (
|————Node:parameter_declaration Text: void
|—————Node:primitive_type Text: void
|————Node:) Text: )
|——Node:compound_statement Text: {
  mSPI.beginTransaction (mSPISettings) ;
    const uint8_t result = read2515Register (REC_REGISTER) ;
  mSPI.endTransaction () ;
  return result ;
}
|———Node:{ Text: {
|———Node:expression_statement Text: mSPI.beginTransaction (mSPISettings) ;
|————Node:call_expression Text: mSPI.beginTransaction (mSPISettings)
|—————Node:field_expression Text: mSPI.beginTransaction
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: beginTransaction
|—————Node:argument_list Text: (mSPISettings)
|——————Node:( Text: (
|——————Node:identifier Text: mSPISettings
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: const uint8_t result = read2515Register (REC_REGISTER) ;
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: result = read2515Register (REC_REGISTER)
|—————Node:identifier Text: result
|—————Node:= Text: =
|—————Node:call_expression Text: read2515Register (REC_REGISTER)
|——————Node:identifier Text: read2515Register
|——————Node:argument_list Text: (REC_REGISTER)
|———————Node:( Text: (
|———————Node:identifier Text: REC_REGISTER
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mSPI.endTransaction () ;
|————Node:call_expression Text: mSPI.endTransaction ()
|—————Node:field_expression Text: mSPI.endTransaction
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: endTransaction
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return result ;
|————Node:return Text: return
|————Node:identifier Text: result
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: uint8_t ACAN2515::errorFlagRegister (void) {
  mSPI.beginTransaction (mSPISettings) ;
    const uint8_t result = read2515Register (EFLG_REGISTER) ;
  mSPI.endTransaction () ;
  return result ;
}
|——Node:primitive_type Text: uint8_t
|——Node:function_declarator Text: ACAN2515::errorFlagRegister (void)
|———Node:qualified_identifier Text: ACAN2515::errorFlagRegister
|————Node:namespace_identifier Text: ACAN2515
|————Node::: Text: ::
|————Node:identifier Text: errorFlagRegister
|———Node:parameter_list Text: (void)
|————Node:( Text: (
|————Node:parameter_declaration Text: void
|—————Node:primitive_type Text: void
|————Node:) Text: )
|——Node:compound_statement Text: {
  mSPI.beginTransaction (mSPISettings) ;
    const uint8_t result = read2515Register (EFLG_REGISTER) ;
  mSPI.endTransaction () ;
  return result ;
}
|———Node:{ Text: {
|———Node:expression_statement Text: mSPI.beginTransaction (mSPISettings) ;
|————Node:call_expression Text: mSPI.beginTransaction (mSPISettings)
|—————Node:field_expression Text: mSPI.beginTransaction
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: beginTransaction
|—————Node:argument_list Text: (mSPISettings)
|——————Node:( Text: (
|——————Node:identifier Text: mSPISettings
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: const uint8_t result = read2515Register (EFLG_REGISTER) ;
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: result = read2515Register (EFLG_REGISTER)
|—————Node:identifier Text: result
|—————Node:= Text: =
|—————Node:call_expression Text: read2515Register (EFLG_REGISTER)
|——————Node:identifier Text: read2515Register
|——————Node:argument_list Text: (EFLG_REGISTER)
|———————Node:( Text: (
|———————Node:identifier Text: EFLG_REGISTER
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mSPI.endTransaction () ;
|————Node:call_expression Text: mSPI.endTransaction ()
|—————Node:field_expression Text: mSPI.endTransaction
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: endTransaction
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return result ;
|————Node:return Text: return
|————Node:identifier Text: result
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:function_definition Text: bool ACAN2515::tryToSend (const CANMessage & inMessage) {
//--- Fix send buffer index
  uint8_t idx = inMessage.idx ;
  if (idx > 2) {
    idx = 0 ;
  }
//--- Bug fix in 2.0.6 (thanks to Fergus Duncan): interrupts were only disabled for Teensy boards
  #ifndef ARDUINO_ARCH_ESP32
    noInterrupts () ;
  #endif
   //---
    mSPI.beginTransaction (mSPISettings) ;
      bool ok = mTXBIsFree [idx] ;
      if (ok) { // Transmit buffer and TXB are both free: transmit immediatly
        mTXBIsFree [idx] = false ;
        internalSendMessage (inMessage, idx) ;
      }else{ // Enter in transmit buffer, if not full
        ok = mTransmitBuffer [idx].append (inMessage) ;
      }
    mSPI.endTransaction () ;
  #ifndef ARDUINO_ARCH_ESP32
    interrupts () ;
  #endif
  return ok ;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: ACAN2515::tryToSend (const CANMessage & inMessage)
|———Node:qualified_identifier Text: ACAN2515::tryToSend
|————Node:namespace_identifier Text: ACAN2515
|————Node::: Text: ::
|————Node:identifier Text: tryToSend
|———Node:parameter_list Text: (const CANMessage & inMessage)
|————Node:( Text: (
|————Node:parameter_declaration Text: const CANMessage & inMessage
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: CANMessage
|—————Node:reference_declarator Text: & inMessage
|——————Node:& Text: &
|——————Node:identifier Text: inMessage
|————Node:) Text: )
|——Node:compound_statement Text: {
//--- Fix send buffer index
  uint8_t idx = inMessage.idx ;
  if (idx > 2) {
    idx = 0 ;
  }
//--- Bug fix in 2.0.6 (thanks to Fergus Duncan): interrupts were only disabled for Teensy boards
  #ifndef ARDUINO_ARCH_ESP32
    noInterrupts () ;
  #endif
   //---
    mSPI.beginTransaction (mSPISettings) ;
      bool ok = mTXBIsFree [idx] ;
      if (ok) { // Transmit buffer and TXB are both free: transmit immediatly
        mTXBIsFree [idx] = false ;
        internalSendMessage (inMessage, idx) ;
      }else{ // Enter in transmit buffer, if not full
        ok = mTransmitBuffer [idx].append (inMessage) ;
      }
    mSPI.endTransaction () ;
  #ifndef ARDUINO_ARCH_ESP32
    interrupts () ;
  #endif
  return ok ;
}
|———Node:{ Text: {
|———Node:comment
|———Node:declaration Text: uint8_t idx = inMessage.idx ;
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: idx = inMessage.idx
|—————Node:identifier Text: idx
|—————Node:= Text: =
|—————Node:field_expression Text: inMessage.idx
|——————Node:identifier Text: inMessage
|——————Node:. Text: .
|——————Node:field_identifier Text: idx
|————Node:; Text: ;
|———Node:if_statement Text: if (idx > 2) {
    idx = 0 ;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (idx > 2)
|—————Node:( Text: (
|—————Node:binary_expression Text: idx > 2
|——————Node:identifier Text: idx
|——————Node:> Text: >
|——————Node:number_literal Text: 2
|—————Node:) Text: )
|————Node:compound_statement Text: {
    idx = 0 ;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: idx = 0 ;
|——————Node:assignment_expression Text: idx = 0
|———————Node:identifier Text: idx
|———————Node:= Text: =
|———————Node:number_literal Text: 0
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:preproc_ifdef Text: #ifndef ARDUINO_ARCH_ESP32
    noInterrupts () ;
  #endif
|————Node:#ifndef Text: #ifndef
|————Node:identifier Text: ARDUINO_ARCH_ESP32
|————Node:expression_statement Text: noInterrupts () ;
|—————Node:call_expression Text: noInterrupts ()
|——————Node:identifier Text: noInterrupts
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:comment
|———Node:expression_statement Text: mSPI.beginTransaction (mSPISettings) ;
|————Node:call_expression Text: mSPI.beginTransaction (mSPISettings)
|—————Node:field_expression Text: mSPI.beginTransaction
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: beginTransaction
|—————Node:argument_list Text: (mSPISettings)
|——————Node:( Text: (
|——————Node:identifier Text: mSPISettings
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: bool ok = mTXBIsFree [idx] ;
|————Node:primitive_type Text: bool
|————Node:init_declarator Text: ok = mTXBIsFree [idx]
|—————Node:identifier Text: ok
|—————Node:= Text: =
|—————Node:subscript_expression Text: mTXBIsFree [idx]
|——————Node:identifier Text: mTXBIsFree
|——————Node:subscript_argument_list Text: [idx]
|———————Node:[ Text: [
|———————Node:identifier Text: idx
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:if_statement Text: if (ok) { // Transmit buffer and TXB are both free: transmit immediatly
        mTXBIsFree [idx] = false ;
        internalSendMessage (inMessage, idx) ;
      }else{ // Enter in transmit buffer, if not full
        ok = mTransmitBuffer [idx].append (inMessage) ;
      }
|————Node:if Text: if
|————Node:condition_clause Text: (ok)
|—————Node:( Text: (
|—————Node:identifier Text: ok
|—————Node:) Text: )
|————Node:compound_statement Text: { // Transmit buffer and TXB are both free: transmit immediatly
        mTXBIsFree [idx] = false ;
        internalSendMessage (inMessage, idx) ;
      }
|—————Node:{ Text: {
|—————Node:comment
|—————Node:expression_statement Text: mTXBIsFree [idx] = false ;
|——————Node:assignment_expression Text: mTXBIsFree [idx] = false
|———————Node:subscript_expression Text: mTXBIsFree [idx]
|————————Node:identifier Text: mTXBIsFree
|————————Node:subscript_argument_list Text: [idx]
|—————————Node:[ Text: [
|—————————Node:identifier Text: idx
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:false Text: false
|——————Node:; Text: ;
|—————Node:expression_statement Text: internalSendMessage (inMessage, idx) ;
|——————Node:call_expression Text: internalSendMessage (inMessage, idx)
|———————Node:identifier Text: internalSendMessage
|———————Node:argument_list Text: (inMessage, idx)
|————————Node:( Text: (
|————————Node:identifier Text: inMessage
|————————Node:, Text: ,
|————————Node:identifier Text: idx
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else{ // Enter in transmit buffer, if not full
        ok = mTransmitBuffer [idx].append (inMessage) ;
      }
|—————Node:else Text: else
|—————Node:compound_statement Text: { // Enter in transmit buffer, if not full
        ok = mTransmitBuffer [idx].append (inMessage) ;
      }
|——————Node:{ Text: {
|——————Node:comment
|——————Node:expression_statement Text: ok = mTransmitBuffer [idx].append (inMessage) ;
|———————Node:assignment_expression Text: ok = mTransmitBuffer [idx].append (inMessage)
|————————Node:identifier Text: ok
|————————Node:= Text: =
|————————Node:call_expression Text: mTransmitBuffer [idx].append (inMessage)
|—————————Node:field_expression Text: mTransmitBuffer [idx].append
|——————————Node:subscript_expression Text: mTransmitBuffer [idx]
|———————————Node:identifier Text: mTransmitBuffer
|———————————Node:subscript_argument_list Text: [idx]
|————————————Node:[ Text: [
|————————————Node:identifier Text: idx
|————————————Node:] Text: ]
|——————————Node:. Text: .
|——————————Node:field_identifier Text: append
|—————————Node:argument_list Text: (inMessage)
|——————————Node:( Text: (
|——————————Node:identifier Text: inMessage
|——————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:} Text: }
|———Node:expression_statement Text: mSPI.endTransaction () ;
|————Node:call_expression Text: mSPI.endTransaction ()
|—————Node:field_expression Text: mSPI.endTransaction
|——————Node:identifier Text: mSPI
|——————Node:. Text: .
|——————Node:field_identifier Text: endTransaction
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifndef ARDUINO_ARCH_ESP32
    interrupts () ;
  #endif
|————Node:#ifndef Text: #ifndef
|————Node:identifier Text: ARDUINO_ARCH_ESP32
|————Node:expression_statement Text: interrupts () ;
|—————Node:call_expression Text: interrupts ()
|——————Node:identifier Text: interrupts
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:return_statement Text: return ok ;
|————Node:return Text: return
|————Node:identifier Text: ok
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
