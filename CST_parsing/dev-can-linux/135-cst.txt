dev-can-linux-tools\cansend\src\cansend.c

|Node:translation_unit
|—Node:comment
|—Node:preproc_include Text: #include <prints.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <prints.h>
|—Node:preproc_include Text: #include <dev-can-linux/commands.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <dev-can-linux/commands.h>
|—Node:function_definition Text: void help (char* program_name) {
    print_notice();

    printf("\n");
    printf("\e[1mSYNOPSIS\e[m\n");
    printf("    \e[1m%s\e[m [options]\n", program_name);
    printf("\n");
    printf("\e[1mDESCRIPTION\e[m\n");
    printf("    \e[1mDEV-CAN-LINUX\e[m is a QNX CAN-bus driver project that aims at porting drivers\n");
    printf("    from the open-source Linux Kernel project to QNX RTOS.\n");
    printf("\n");
    printf("    \e[1mCANSEND\e[m is an accompanying tool used to send raw CAN messages.\n");
    printf("\n");
    printf("\e[1mOPTIONS\e[m\n");
    printf("    \e[1m-u subopts\e[m - Specify the device TX file descriptors.\n");
    printf("\n");
    printf("                 Suboptions (\e[1msubopts\e[m):\n");
    printf("\n");
    printf("                 \e[1m#\e[m      - Specify ID number of the device to configure;\n");
    printf("                          e.g. /dev/can0/ is -u0\n");
    printf("                 \e[1mtx#\e[m    - ID of TX file descriptors to connect to\n");
    printf("\n");
    printf("                 Example:\n");
    printf("                     cansend -u0,tx0 ...\n");
    printf("\n");
    printf("    \e[1m-m subopts\e[m - Specify message details.\n");
    printf("\n");
    printf("                 Suboptions (\e[1msubopts\e[m):\n");
    printf("\n");
    printf("                 \e[1m#\e[m      - MID of message in hexadecimal\n");
    printf("                 \e[1m#\e[m      - Standard (0) or Extended (1) MID\n");
    printf("                 \e[1m#\e[m      - Message data in hexadecimal\n");
    printf("\n");
    printf("                 Example:\n");
    printf("                     cansend -m0x1234,1,0xABCD ...\n");
    printf("\n");
    printf("    \e[1m-w\e[m         - Print warranty message and exit.\n");
    printf("    \e[1m-c\e[m         - Print license details and exit.\n");
    printf("    \e[1m-?/h\e[m       - Print help menu and exit.\n");
    printf("\n");
    printf("\e[1mEXAMPLES\e[m\n");
    printf("    Send a standard MID message:\n");
    printf("\n");
    printf("        \e[1mcansend -u0,tx0 -m0x1234,0,0xABCD\e[m\n");
    printf("\n");
    printf("    Send a extended MID message:\n");
    printf("\n");
    printf("        \e[1mcansend -u0,tx0 -m0x1234,1,0xABCD\e[m\n");
    printf("\n");
    printf("\e[1mBUGS\e[m\n");
    printf("    If you find a bug, please report it.\n");
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: help (char* program_name)
|———Node:identifier Text: help
|———Node:parameter_list Text: (char* program_name)
|————Node:( Text: (
|————Node:parameter_declaration Text: char* program_name
|—————Node:primitive_type Text: char
|—————Node:pointer_declarator Text: * program_name
|——————Node:* Text: *
|——————Node:identifier Text: program_name
|————Node:) Text: )
|——Node:compound_statement Text: {
    print_notice();

    printf("\n");
    printf("\e[1mSYNOPSIS\e[m\n");
    printf("    \e[1m%s\e[m [options]\n", program_name);
    printf("\n");
    printf("\e[1mDESCRIPTION\e[m\n");
    printf("    \e[1mDEV-CAN-LINUX\e[m is a QNX CAN-bus driver project that aims at porting drivers\n");
    printf("    from the open-source Linux Kernel project to QNX RTOS.\n");
    printf("\n");
    printf("    \e[1mCANSEND\e[m is an accompanying tool used to send raw CAN messages.\n");
    printf("\n");
    printf("\e[1mOPTIONS\e[m\n");
    printf("    \e[1m-u subopts\e[m - Specify the device TX file descriptors.\n");
    printf("\n");
    printf("                 Suboptions (\e[1msubopts\e[m):\n");
    printf("\n");
    printf("                 \e[1m#\e[m      - Specify ID number of the device to configure;\n");
    printf("                          e.g. /dev/can0/ is -u0\n");
    printf("                 \e[1mtx#\e[m    - ID of TX file descriptors to connect to\n");
    printf("\n");
    printf("                 Example:\n");
    printf("                     cansend -u0,tx0 ...\n");
    printf("\n");
    printf("    \e[1m-m subopts\e[m - Specify message details.\n");
    printf("\n");
    printf("                 Suboptions (\e[1msubopts\e[m):\n");
    printf("\n");
    printf("                 \e[1m#\e[m      - MID of message in hexadecimal\n");
    printf("                 \e[1m#\e[m      - Standard (0) or Extended (1) MID\n");
    printf("                 \e[1m#\e[m      - Message data in hexadecimal\n");
    printf("\n");
    printf("                 Example:\n");
    printf("                     cansend -m0x1234,1,0xABCD ...\n");
    printf("\n");
    printf("    \e[1m-w\e[m         - Print warranty message and exit.\n");
    printf("    \e[1m-c\e[m         - Print license details and exit.\n");
    printf("    \e[1m-?/h\e[m       - Print help menu and exit.\n");
    printf("\n");
    printf("\e[1mEXAMPLES\e[m\n");
    printf("    Send a standard MID message:\n");
    printf("\n");
    printf("        \e[1mcansend -u0,tx0 -m0x1234,0,0xABCD\e[m\n");
    printf("\n");
    printf("    Send a extended MID message:\n");
    printf("\n");
    printf("        \e[1mcansend -u0,tx0 -m0x1234,1,0xABCD\e[m\n");
    printf("\n");
    printf("\e[1mBUGS\e[m\n");
    printf("    If you find a bug, please report it.\n");
}
|———Node:{ Text: {
|———Node:expression_statement Text: print_notice();
|————Node:call_expression Text: print_notice()
|—————Node:identifier Text: print_notice
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\n");
|————Node:call_expression Text: printf("\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\e[1mSYNOPSIS\e[m\n");
|————Node:call_expression Text: printf("\e[1mSYNOPSIS\e[m\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\e[1mSYNOPSIS\e[m\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\e[1mSYNOPSIS\e[m\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1mSYNOPSIS
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("    \e[1m%s\e[m [options]\n", program_name);
|————Node:call_expression Text: printf("    \e[1m%s\e[m [options]\n", program_name)
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("    \e[1m%s\e[m [options]\n", program_name)
|——————Node:( Text: (
|——————Node:string_literal Text: "    \e[1m%s\e[m [options]\n"
|———————Node:" Text: "
|———————Node:string_content Text:     
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1m%s
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m [options]
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:, Text: ,
|——————Node:identifier Text: program_name
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\n");
|————Node:call_expression Text: printf("\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\e[1mDESCRIPTION\e[m\n");
|————Node:call_expression Text: printf("\e[1mDESCRIPTION\e[m\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\e[1mDESCRIPTION\e[m\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\e[1mDESCRIPTION\e[m\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1mDESCRIPTION
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("    \e[1mDEV-CAN-LINUX\e[m is a QNX CAN-bus driver project that aims at porting drivers\n");
|————Node:call_expression Text: printf("    \e[1mDEV-CAN-LINUX\e[m is a QNX CAN-bus driver project that aims at porting drivers\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("    \e[1mDEV-CAN-LINUX\e[m is a QNX CAN-bus driver project that aims at porting drivers\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "    \e[1mDEV-CAN-LINUX\e[m is a QNX CAN-bus driver project that aims at porting drivers\n"
|———————Node:" Text: "
|———————Node:string_content Text:     
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1mDEV-CAN-LINUX
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m is a QNX CAN-bus driver project that aims at porting drivers
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("    from the open-source Linux Kernel project to QNX RTOS.\n");
|————Node:call_expression Text: printf("    from the open-source Linux Kernel project to QNX RTOS.\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("    from the open-source Linux Kernel project to QNX RTOS.\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "    from the open-source Linux Kernel project to QNX RTOS.\n"
|———————Node:" Text: "
|———————Node:string_content Text:     from the open-source Linux Kernel project to QNX RTOS.
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\n");
|————Node:call_expression Text: printf("\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("    \e[1mCANSEND\e[m is an accompanying tool used to send raw CAN messages.\n");
|————Node:call_expression Text: printf("    \e[1mCANSEND\e[m is an accompanying tool used to send raw CAN messages.\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("    \e[1mCANSEND\e[m is an accompanying tool used to send raw CAN messages.\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "    \e[1mCANSEND\e[m is an accompanying tool used to send raw CAN messages.\n"
|———————Node:" Text: "
|———————Node:string_content Text:     
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1mCANSEND
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m is an accompanying tool used to send raw CAN messages.
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\n");
|————Node:call_expression Text: printf("\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\e[1mOPTIONS\e[m\n");
|————Node:call_expression Text: printf("\e[1mOPTIONS\e[m\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\e[1mOPTIONS\e[m\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\e[1mOPTIONS\e[m\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1mOPTIONS
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("    \e[1m-u subopts\e[m - Specify the device TX file descriptors.\n");
|————Node:call_expression Text: printf("    \e[1m-u subopts\e[m - Specify the device TX file descriptors.\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("    \e[1m-u subopts\e[m - Specify the device TX file descriptors.\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "    \e[1m-u subopts\e[m - Specify the device TX file descriptors.\n"
|———————Node:" Text: "
|———————Node:string_content Text:     
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1m-u subopts
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m - Specify the device TX file descriptors.
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\n");
|————Node:call_expression Text: printf("\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("                 Suboptions (\e[1msubopts\e[m):\n");
|————Node:call_expression Text: printf("                 Suboptions (\e[1msubopts\e[m):\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("                 Suboptions (\e[1msubopts\e[m):\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "                 Suboptions (\e[1msubopts\e[m):\n"
|———————Node:" Text: "
|———————Node:string_content Text:                  Suboptions (
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1msubopts
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m):
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\n");
|————Node:call_expression Text: printf("\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("                 \e[1m#\e[m      - Specify ID number of the device to configure;\n");
|————Node:call_expression Text: printf("                 \e[1m#\e[m      - Specify ID number of the device to configure;\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("                 \e[1m#\e[m      - Specify ID number of the device to configure;\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "                 \e[1m#\e[m      - Specify ID number of the device to configure;\n"
|———————Node:" Text: "
|———————Node:string_content Text:                  
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1m#
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m      - Specify ID number of the device to configure;
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("                          e.g. /dev/can0/ is -u0\n");
|————Node:call_expression Text: printf("                          e.g. /dev/can0/ is -u0\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("                          e.g. /dev/can0/ is -u0\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "                          e.g. /dev/can0/ is -u0\n"
|———————Node:" Text: "
|———————Node:string_content Text:                           e.g. /dev/can0/ is -u0
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("                 \e[1mtx#\e[m    - ID of TX file descriptors to connect to\n");
|————Node:call_expression Text: printf("                 \e[1mtx#\e[m    - ID of TX file descriptors to connect to\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("                 \e[1mtx#\e[m    - ID of TX file descriptors to connect to\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "                 \e[1mtx#\e[m    - ID of TX file descriptors to connect to\n"
|———————Node:" Text: "
|———————Node:string_content Text:                  
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1mtx#
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m    - ID of TX file descriptors to connect to
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\n");
|————Node:call_expression Text: printf("\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("                 Example:\n");
|————Node:call_expression Text: printf("                 Example:\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("                 Example:\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "                 Example:\n"
|———————Node:" Text: "
|———————Node:string_content Text:                  Example:
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("                     cansend -u0,tx0 ...\n");
|————Node:call_expression Text: printf("                     cansend -u0,tx0 ...\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("                     cansend -u0,tx0 ...\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "                     cansend -u0,tx0 ...\n"
|———————Node:" Text: "
|———————Node:string_content Text:                      cansend -u0,tx0 ...
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\n");
|————Node:call_expression Text: printf("\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("    \e[1m-m subopts\e[m - Specify message details.\n");
|————Node:call_expression Text: printf("    \e[1m-m subopts\e[m - Specify message details.\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("    \e[1m-m subopts\e[m - Specify message details.\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "    \e[1m-m subopts\e[m - Specify message details.\n"
|———————Node:" Text: "
|———————Node:string_content Text:     
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1m-m subopts
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m - Specify message details.
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\n");
|————Node:call_expression Text: printf("\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("                 Suboptions (\e[1msubopts\e[m):\n");
|————Node:call_expression Text: printf("                 Suboptions (\e[1msubopts\e[m):\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("                 Suboptions (\e[1msubopts\e[m):\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "                 Suboptions (\e[1msubopts\e[m):\n"
|———————Node:" Text: "
|———————Node:string_content Text:                  Suboptions (
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1msubopts
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m):
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\n");
|————Node:call_expression Text: printf("\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("                 \e[1m#\e[m      - MID of message in hexadecimal\n");
|————Node:call_expression Text: printf("                 \e[1m#\e[m      - MID of message in hexadecimal\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("                 \e[1m#\e[m      - MID of message in hexadecimal\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "                 \e[1m#\e[m      - MID of message in hexadecimal\n"
|———————Node:" Text: "
|———————Node:string_content Text:                  
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1m#
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m      - MID of message in hexadecimal
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("                 \e[1m#\e[m      - Standard (0) or Extended (1) MID\n");
|————Node:call_expression Text: printf("                 \e[1m#\e[m      - Standard (0) or Extended (1) MID\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("                 \e[1m#\e[m      - Standard (0) or Extended (1) MID\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "                 \e[1m#\e[m      - Standard (0) or Extended (1) MID\n"
|———————Node:" Text: "
|———————Node:string_content Text:                  
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1m#
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m      - Standard (0) or Extended (1) MID
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("                 \e[1m#\e[m      - Message data in hexadecimal\n");
|————Node:call_expression Text: printf("                 \e[1m#\e[m      - Message data in hexadecimal\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("                 \e[1m#\e[m      - Message data in hexadecimal\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "                 \e[1m#\e[m      - Message data in hexadecimal\n"
|———————Node:" Text: "
|———————Node:string_content Text:                  
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1m#
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m      - Message data in hexadecimal
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\n");
|————Node:call_expression Text: printf("\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("                 Example:\n");
|————Node:call_expression Text: printf("                 Example:\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("                 Example:\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "                 Example:\n"
|———————Node:" Text: "
|———————Node:string_content Text:                  Example:
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("                     cansend -m0x1234,1,0xABCD ...\n");
|————Node:call_expression Text: printf("                     cansend -m0x1234,1,0xABCD ...\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("                     cansend -m0x1234,1,0xABCD ...\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "                     cansend -m0x1234,1,0xABCD ...\n"
|———————Node:" Text: "
|———————Node:string_content Text:                      cansend -m0x1234,1,0xABCD ...
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\n");
|————Node:call_expression Text: printf("\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("    \e[1m-w\e[m         - Print warranty message and exit.\n");
|————Node:call_expression Text: printf("    \e[1m-w\e[m         - Print warranty message and exit.\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("    \e[1m-w\e[m         - Print warranty message and exit.\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "    \e[1m-w\e[m         - Print warranty message and exit.\n"
|———————Node:" Text: "
|———————Node:string_content Text:     
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1m-w
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m         - Print warranty message and exit.
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("    \e[1m-c\e[m         - Print license details and exit.\n");
|————Node:call_expression Text: printf("    \e[1m-c\e[m         - Print license details and exit.\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("    \e[1m-c\e[m         - Print license details and exit.\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "    \e[1m-c\e[m         - Print license details and exit.\n"
|———————Node:" Text: "
|———————Node:string_content Text:     
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1m-c
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m         - Print license details and exit.
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("    \e[1m-?/h\e[m       - Print help menu and exit.\n");
|————Node:call_expression Text: printf("    \e[1m-?/h\e[m       - Print help menu and exit.\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("    \e[1m-?/h\e[m       - Print help menu and exit.\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "    \e[1m-?/h\e[m       - Print help menu and exit.\n"
|———————Node:" Text: "
|———————Node:string_content Text:     
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1m-?/h
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m       - Print help menu and exit.
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\n");
|————Node:call_expression Text: printf("\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\e[1mEXAMPLES\e[m\n");
|————Node:call_expression Text: printf("\e[1mEXAMPLES\e[m\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\e[1mEXAMPLES\e[m\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\e[1mEXAMPLES\e[m\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1mEXAMPLES
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("    Send a standard MID message:\n");
|————Node:call_expression Text: printf("    Send a standard MID message:\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("    Send a standard MID message:\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "    Send a standard MID message:\n"
|———————Node:" Text: "
|———————Node:string_content Text:     Send a standard MID message:
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\n");
|————Node:call_expression Text: printf("\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("        \e[1mcansend -u0,tx0 -m0x1234,0,0xABCD\e[m\n");
|————Node:call_expression Text: printf("        \e[1mcansend -u0,tx0 -m0x1234,0,0xABCD\e[m\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("        \e[1mcansend -u0,tx0 -m0x1234,0,0xABCD\e[m\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "        \e[1mcansend -u0,tx0 -m0x1234,0,0xABCD\e[m\n"
|———————Node:" Text: "
|———————Node:string_content Text:         
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1mcansend -u0,tx0 -m0x1234,0,0xABCD
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\n");
|————Node:call_expression Text: printf("\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("    Send a extended MID message:\n");
|————Node:call_expression Text: printf("    Send a extended MID message:\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("    Send a extended MID message:\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "    Send a extended MID message:\n"
|———————Node:" Text: "
|———————Node:string_content Text:     Send a extended MID message:
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\n");
|————Node:call_expression Text: printf("\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("        \e[1mcansend -u0,tx0 -m0x1234,1,0xABCD\e[m\n");
|————Node:call_expression Text: printf("        \e[1mcansend -u0,tx0 -m0x1234,1,0xABCD\e[m\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("        \e[1mcansend -u0,tx0 -m0x1234,1,0xABCD\e[m\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "        \e[1mcansend -u0,tx0 -m0x1234,1,0xABCD\e[m\n"
|———————Node:" Text: "
|———————Node:string_content Text:         
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1mcansend -u0,tx0 -m0x1234,1,0xABCD
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\n");
|————Node:call_expression Text: printf("\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\e[1mBUGS\e[m\n");
|————Node:call_expression Text: printf("\e[1mBUGS\e[m\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\e[1mBUGS\e[m\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\e[1mBUGS\e[m\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1mBUGS
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("    If you find a bug, please report it.\n");
|————Node:call_expression Text: printf("    If you find a bug, please report it.\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("    If you find a bug, please report it.\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "    If you find a bug, please report it.\n"
|———————Node:" Text: "
|———————Node:string_content Text:     If you find a bug, please report it.
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int main (int argc, char* argv[]) {
    int opt;
    char* buffer;

    int optu_unit;
    char optu_mailbox_str[32];
    int optu_mailbox_is_tx = 0;
    int optu_mailbox = 0;

    int optm_mid = 0;
    int optm_mid_type = 0;
    char optm_data_str[32];

    while ((opt = getopt(argc, argv, "u:m:wc?h")) != -1) {
        switch (opt) {
        case 'u':
            buffer = optu_mailbox_str;
            sscanf(optarg, "%d,%s", &optu_unit, buffer);
            buffer[2] = 0;

            if (strncmp(buffer, "tx", 2) == 0) {
                optu_mailbox_is_tx = 1;
            }
            else if (strncmp(buffer, "rx", 2) == 0) {
                optu_mailbox_is_tx = 0;
            }
            else {
                exit(EXIT_FAILURE);
            }

            sscanf(optu_mailbox_str+2, "%d", &optu_mailbox);
            break;

        case 'm':
            buffer = optm_data_str;
            sscanf(optarg, "0x%x,%d,0x%s", &optm_mid, &optm_mid_type, buffer);

            break;

        case 'w':
            print_warranty();
            return EXIT_SUCCESS;

        case 'c':
            print_license();
            return EXIT_SUCCESS;

        case '?':
        case 'h':
            help(argv[0]);
            return EXIT_SUCCESS;

        default:
            printf("invalid option %c\n", opt);
            break;
        }
    }

    int     fd;
    struct  can_msg canmsg;

    int n = strnlen(optm_data_str, 32);
    n = n/2 + n%2;

    int i;
    for (i = 0; i < n; ++i) {
        unsigned int k;

        sscanf(optm_data_str + 2*i, "%2x", &k);

        canmsg.dat[i] = k;
    }

    for (i = n; i < 8; ++i) {
        canmsg.dat[i] = 0;
    }

    canmsg.mid = optm_mid;
    canmsg.ext.timestamp = 0;
    canmsg.ext.is_extended_mid = optm_mid_type;
    canmsg.len = n;

    /**
     * Message IDs or MIDs are slightly different on QNX compared to Linux. The
     * form of the ID depends on whether or not the driver is using extended
     * MIDs:
     *
     *      - In standard 11-bit MIDs, bits 18–28 define the MID.
     *      - In extended 29-bit MIDs, bits 0–28 define the MID.
     */

    if (!canmsg.ext.is_extended_mid) {
        canmsg.mid <<= 18;
    }

    char OPEN_FILE[16];

    snprintf( OPEN_FILE, 16, "/dev/can%d/%s%d",
            optu_unit,
            (optu_mailbox_is_tx ? "tx" : "rx"), optu_mailbox );

    if ((fd = open(OPEN_FILE, O_RDWR)) == -1) {
        printf("cansend error: %s\n", strerror(errno));

        exit(EXIT_FAILURE);
    }

    write_frame_raw(fd, &canmsg);

    close(fd);
    return EXIT_SUCCESS;
}
|——Node:primitive_type Text: int
|——Node:function_declarator Text: main (int argc, char* argv[])
|———Node:identifier Text: main
|———Node:parameter_list Text: (int argc, char* argv[])
|————Node:( Text: (
|————Node:parameter_declaration Text: int argc
|—————Node:primitive_type Text: int
|—————Node:identifier Text: argc
|————Node:, Text: ,
|————Node:parameter_declaration Text: char* argv[]
|—————Node:primitive_type Text: char
|—————Node:pointer_declarator Text: * argv[]
|——————Node:* Text: *
|——————Node:array_declarator Text: argv[]
|———————Node:identifier Text: argv
|———————Node:[ Text: [
|———————Node:] Text: ]
|————Node:) Text: )
|——Node:compound_statement Text: {
    int opt;
    char* buffer;

    int optu_unit;
    char optu_mailbox_str[32];
    int optu_mailbox_is_tx = 0;
    int optu_mailbox = 0;

    int optm_mid = 0;
    int optm_mid_type = 0;
    char optm_data_str[32];

    while ((opt = getopt(argc, argv, "u:m:wc?h")) != -1) {
        switch (opt) {
        case 'u':
            buffer = optu_mailbox_str;
            sscanf(optarg, "%d,%s", &optu_unit, buffer);
            buffer[2] = 0;

            if (strncmp(buffer, "tx", 2) == 0) {
                optu_mailbox_is_tx = 1;
            }
            else if (strncmp(buffer, "rx", 2) == 0) {
                optu_mailbox_is_tx = 0;
            }
            else {
                exit(EXIT_FAILURE);
            }

            sscanf(optu_mailbox_str+2, "%d", &optu_mailbox);
            break;

        case 'm':
            buffer = optm_data_str;
            sscanf(optarg, "0x%x,%d,0x%s", &optm_mid, &optm_mid_type, buffer);

            break;

        case 'w':
            print_warranty();
            return EXIT_SUCCESS;

        case 'c':
            print_license();
            return EXIT_SUCCESS;

        case '?':
        case 'h':
            help(argv[0]);
            return EXIT_SUCCESS;

        default:
            printf("invalid option %c\n", opt);
            break;
        }
    }

    int     fd;
    struct  can_msg canmsg;

    int n = strnlen(optm_data_str, 32);
    n = n/2 + n%2;

    int i;
    for (i = 0; i < n; ++i) {
        unsigned int k;

        sscanf(optm_data_str + 2*i, "%2x", &k);

        canmsg.dat[i] = k;
    }

    for (i = n; i < 8; ++i) {
        canmsg.dat[i] = 0;
    }

    canmsg.mid = optm_mid;
    canmsg.ext.timestamp = 0;
    canmsg.ext.is_extended_mid = optm_mid_type;
    canmsg.len = n;

    /**
     * Message IDs or MIDs are slightly different on QNX compared to Linux. The
     * form of the ID depends on whether or not the driver is using extended
     * MIDs:
     *
     *      - In standard 11-bit MIDs, bits 18–28 define the MID.
     *      - In extended 29-bit MIDs, bits 0–28 define the MID.
     */

    if (!canmsg.ext.is_extended_mid) {
        canmsg.mid <<= 18;
    }

    char OPEN_FILE[16];

    snprintf( OPEN_FILE, 16, "/dev/can%d/%s%d",
            optu_unit,
            (optu_mailbox_is_tx ? "tx" : "rx"), optu_mailbox );

    if ((fd = open(OPEN_FILE, O_RDWR)) == -1) {
        printf("cansend error: %s\n", strerror(errno));

        exit(EXIT_FAILURE);
    }

    write_frame_raw(fd, &canmsg);

    close(fd);
    return EXIT_SUCCESS;
}
|———Node:{ Text: {
|———Node:declaration Text: int opt;
|————Node:primitive_type Text: int
|————Node:identifier Text: opt
|————Node:; Text: ;
|———Node:declaration Text: char* buffer;
|————Node:primitive_type Text: char
|————Node:pointer_declarator Text: * buffer
|—————Node:* Text: *
|—————Node:identifier Text: buffer
|————Node:; Text: ;
|———Node:declaration Text: int optu_unit;
|————Node:primitive_type Text: int
|————Node:identifier Text: optu_unit
|————Node:; Text: ;
|———Node:declaration Text: char optu_mailbox_str[32];
|————Node:primitive_type Text: char
|————Node:array_declarator Text: optu_mailbox_str[32]
|—————Node:identifier Text: optu_mailbox_str
|—————Node:[ Text: [
|—————Node:number_literal Text: 32
|—————Node:] Text: ]
|————Node:; Text: ;
|———Node:declaration Text: int optu_mailbox_is_tx = 0;
|————Node:primitive_type Text: int
|————Node:init_declarator Text: optu_mailbox_is_tx = 0
|—————Node:identifier Text: optu_mailbox_is_tx
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: int optu_mailbox = 0;
|————Node:primitive_type Text: int
|————Node:init_declarator Text: optu_mailbox = 0
|—————Node:identifier Text: optu_mailbox
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: int optm_mid = 0;
|————Node:primitive_type Text: int
|————Node:init_declarator Text: optm_mid = 0
|—————Node:identifier Text: optm_mid
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: int optm_mid_type = 0;
|————Node:primitive_type Text: int
|————Node:init_declarator Text: optm_mid_type = 0
|—————Node:identifier Text: optm_mid_type
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: char optm_data_str[32];
|————Node:primitive_type Text: char
|————Node:array_declarator Text: optm_data_str[32]
|—————Node:identifier Text: optm_data_str
|—————Node:[ Text: [
|—————Node:number_literal Text: 32
|—————Node:] Text: ]
|————Node:; Text: ;
|———Node:while_statement Text: while ((opt = getopt(argc, argv, "u:m:wc?h")) != -1) {
        switch (opt) {
        case 'u':
            buffer = optu_mailbox_str;
            sscanf(optarg, "%d,%s", &optu_unit, buffer);
            buffer[2] = 0;

            if (strncmp(buffer, "tx", 2) == 0) {
                optu_mailbox_is_tx = 1;
            }
            else if (strncmp(buffer, "rx", 2) == 0) {
                optu_mailbox_is_tx = 0;
            }
            else {
                exit(EXIT_FAILURE);
            }

            sscanf(optu_mailbox_str+2, "%d", &optu_mailbox);
            break;

        case 'm':
            buffer = optm_data_str;
            sscanf(optarg, "0x%x,%d,0x%s", &optm_mid, &optm_mid_type, buffer);

            break;

        case 'w':
            print_warranty();
            return EXIT_SUCCESS;

        case 'c':
            print_license();
            return EXIT_SUCCESS;

        case '?':
        case 'h':
            help(argv[0]);
            return EXIT_SUCCESS;

        default:
            printf("invalid option %c\n", opt);
            break;
        }
    }
|————Node:while Text: while
|————Node:parenthesized_expression Text: ((opt = getopt(argc, argv, "u:m:wc?h")) != -1)
|—————Node:( Text: (
|—————Node:binary_expression Text: (opt = getopt(argc, argv, "u:m:wc?h")) != -1
|——————Node:parenthesized_expression Text: (opt = getopt(argc, argv, "u:m:wc?h"))
|———————Node:( Text: (
|———————Node:assignment_expression Text: opt = getopt(argc, argv, "u:m:wc?h")
|————————Node:identifier Text: opt
|————————Node:= Text: =
|————————Node:call_expression Text: getopt(argc, argv, "u:m:wc?h")
|—————————Node:identifier Text: getopt
|—————————Node:argument_list Text: (argc, argv, "u:m:wc?h")
|——————————Node:( Text: (
|——————————Node:identifier Text: argc
|——————————Node:, Text: ,
|——————————Node:identifier Text: argv
|——————————Node:, Text: ,
|——————————Node:string_literal Text: "u:m:wc?h"
|———————————Node:" Text: "
|———————————Node:string_content Text: u:m:wc?h
|———————————Node:" Text: "
|——————————Node:) Text: )
|———————Node:) Text: )
|——————Node:!= Text: !=
|——————Node:number_literal Text: -1
|—————Node:) Text: )
|————Node:compound_statement Text: {
        switch (opt) {
        case 'u':
            buffer = optu_mailbox_str;
            sscanf(optarg, "%d,%s", &optu_unit, buffer);
            buffer[2] = 0;

            if (strncmp(buffer, "tx", 2) == 0) {
                optu_mailbox_is_tx = 1;
            }
            else if (strncmp(buffer, "rx", 2) == 0) {
                optu_mailbox_is_tx = 0;
            }
            else {
                exit(EXIT_FAILURE);
            }

            sscanf(optu_mailbox_str+2, "%d", &optu_mailbox);
            break;

        case 'm':
            buffer = optm_data_str;
            sscanf(optarg, "0x%x,%d,0x%s", &optm_mid, &optm_mid_type, buffer);

            break;

        case 'w':
            print_warranty();
            return EXIT_SUCCESS;

        case 'c':
            print_license();
            return EXIT_SUCCESS;

        case '?':
        case 'h':
            help(argv[0]);
            return EXIT_SUCCESS;

        default:
            printf("invalid option %c\n", opt);
            break;
        }
    }
|—————Node:{ Text: {
|—————Node:switch_statement Text: switch (opt) {
        case 'u':
            buffer = optu_mailbox_str;
            sscanf(optarg, "%d,%s", &optu_unit, buffer);
            buffer[2] = 0;

            if (strncmp(buffer, "tx", 2) == 0) {
                optu_mailbox_is_tx = 1;
            }
            else if (strncmp(buffer, "rx", 2) == 0) {
                optu_mailbox_is_tx = 0;
            }
            else {
                exit(EXIT_FAILURE);
            }

            sscanf(optu_mailbox_str+2, "%d", &optu_mailbox);
            break;

        case 'm':
            buffer = optm_data_str;
            sscanf(optarg, "0x%x,%d,0x%s", &optm_mid, &optm_mid_type, buffer);

            break;

        case 'w':
            print_warranty();
            return EXIT_SUCCESS;

        case 'c':
            print_license();
            return EXIT_SUCCESS;

        case '?':
        case 'h':
            help(argv[0]);
            return EXIT_SUCCESS;

        default:
            printf("invalid option %c\n", opt);
            break;
        }
|——————Node:switch Text: switch
|——————Node:parenthesized_expression Text: (opt)
|———————Node:( Text: (
|———————Node:identifier Text: opt
|———————Node:) Text: )
|——————Node:compound_statement Text: {
        case 'u':
            buffer = optu_mailbox_str;
            sscanf(optarg, "%d,%s", &optu_unit, buffer);
            buffer[2] = 0;

            if (strncmp(buffer, "tx", 2) == 0) {
                optu_mailbox_is_tx = 1;
            }
            else if (strncmp(buffer, "rx", 2) == 0) {
                optu_mailbox_is_tx = 0;
            }
            else {
                exit(EXIT_FAILURE);
            }

            sscanf(optu_mailbox_str+2, "%d", &optu_mailbox);
            break;

        case 'm':
            buffer = optm_data_str;
            sscanf(optarg, "0x%x,%d,0x%s", &optm_mid, &optm_mid_type, buffer);

            break;

        case 'w':
            print_warranty();
            return EXIT_SUCCESS;

        case 'c':
            print_license();
            return EXIT_SUCCESS;

        case '?':
        case 'h':
            help(argv[0]);
            return EXIT_SUCCESS;

        default:
            printf("invalid option %c\n", opt);
            break;
        }
|———————Node:{ Text: {
|———————Node:case_statement Text: case 'u':
            buffer = optu_mailbox_str;
            sscanf(optarg, "%d,%s", &optu_unit, buffer);
            buffer[2] = 0;

            if (strncmp(buffer, "tx", 2) == 0) {
                optu_mailbox_is_tx = 1;
            }
            else if (strncmp(buffer, "rx", 2) == 0) {
                optu_mailbox_is_tx = 0;
            }
            else {
                exit(EXIT_FAILURE);
            }

            sscanf(optu_mailbox_str+2, "%d", &optu_mailbox);
            break;
|————————Node:case Text: case
|————————Node:char_literal Text: 'u'
|—————————Node:' Text: '
|—————————Node:character Text: u
|—————————Node:' Text: '
|————————Node:: Text: :
|————————Node:expression_statement Text: buffer = optu_mailbox_str;
|—————————Node:assignment_expression Text: buffer = optu_mailbox_str
|——————————Node:identifier Text: buffer
|——————————Node:= Text: =
|——————————Node:identifier Text: optu_mailbox_str
|—————————Node:; Text: ;
|————————Node:expression_statement Text: sscanf(optarg, "%d,%s", &optu_unit, buffer);
|—————————Node:call_expression Text: sscanf(optarg, "%d,%s", &optu_unit, buffer)
|——————————Node:identifier Text: sscanf
|——————————Node:argument_list Text: (optarg, "%d,%s", &optu_unit, buffer)
|———————————Node:( Text: (
|———————————Node:identifier Text: optarg
|———————————Node:, Text: ,
|———————————Node:string_literal Text: "%d,%s"
|————————————Node:" Text: "
|————————————Node:string_content Text: %d,%s
|————————————Node:" Text: "
|———————————Node:, Text: ,
|———————————Node:pointer_expression Text: &optu_unit
|————————————Node:& Text: &
|————————————Node:identifier Text: optu_unit
|———————————Node:, Text: ,
|———————————Node:identifier Text: buffer
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: buffer[2] = 0;
|—————————Node:assignment_expression Text: buffer[2] = 0
|——————————Node:subscript_expression Text: buffer[2]
|———————————Node:identifier Text: buffer
|———————————Node:[ Text: [
|———————————Node:number_literal Text: 2
|———————————Node:] Text: ]
|——————————Node:= Text: =
|——————————Node:number_literal Text: 0
|—————————Node:; Text: ;
|————————Node:if_statement Text: if (strncmp(buffer, "tx", 2) == 0) {
                optu_mailbox_is_tx = 1;
            }
            else if (strncmp(buffer, "rx", 2) == 0) {
                optu_mailbox_is_tx = 0;
            }
            else {
                exit(EXIT_FAILURE);
            }
|—————————Node:if Text: if
|—————————Node:parenthesized_expression Text: (strncmp(buffer, "tx", 2) == 0)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: strncmp(buffer, "tx", 2) == 0
|———————————Node:call_expression Text: strncmp(buffer, "tx", 2)
|————————————Node:identifier Text: strncmp
|————————————Node:argument_list Text: (buffer, "tx", 2)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: buffer
|—————————————Node:, Text: ,
|—————————————Node:string_literal Text: "tx"
|——————————————Node:" Text: "
|——————————————Node:string_content Text: tx
|——————————————Node:" Text: "
|—————————————Node:, Text: ,
|—————————————Node:number_literal Text: 2
|—————————————Node:) Text: )
|———————————Node:== Text: ==
|———————————Node:number_literal Text: 0
|——————————Node:) Text: )
|—————————Node:compound_statement Text: {
                optu_mailbox_is_tx = 1;
            }
|——————————Node:{ Text: {
|——————————Node:expression_statement Text: optu_mailbox_is_tx = 1;
|———————————Node:assignment_expression Text: optu_mailbox_is_tx = 1
|————————————Node:identifier Text: optu_mailbox_is_tx
|————————————Node:= Text: =
|————————————Node:number_literal Text: 1
|———————————Node:; Text: ;
|——————————Node:} Text: }
|—————————Node:else_clause Text: else if (strncmp(buffer, "rx", 2) == 0) {
                optu_mailbox_is_tx = 0;
            }
            else {
                exit(EXIT_FAILURE);
            }
|——————————Node:else Text: else
|——————————Node:if_statement Text: if (strncmp(buffer, "rx", 2) == 0) {
                optu_mailbox_is_tx = 0;
            }
            else {
                exit(EXIT_FAILURE);
            }
|———————————Node:if Text: if
|———————————Node:parenthesized_expression Text: (strncmp(buffer, "rx", 2) == 0)
|————————————Node:( Text: (
|————————————Node:binary_expression Text: strncmp(buffer, "rx", 2) == 0
|—————————————Node:call_expression Text: strncmp(buffer, "rx", 2)
|——————————————Node:identifier Text: strncmp
|——————————————Node:argument_list Text: (buffer, "rx", 2)
|———————————————Node:( Text: (
|———————————————Node:identifier Text: buffer
|———————————————Node:, Text: ,
|———————————————Node:string_literal Text: "rx"
|————————————————Node:" Text: "
|————————————————Node:string_content Text: rx
|————————————————Node:" Text: "
|———————————————Node:, Text: ,
|———————————————Node:number_literal Text: 2
|———————————————Node:) Text: )
|—————————————Node:== Text: ==
|—————————————Node:number_literal Text: 0
|————————————Node:) Text: )
|———————————Node:compound_statement Text: {
                optu_mailbox_is_tx = 0;
            }
|————————————Node:{ Text: {
|————————————Node:expression_statement Text: optu_mailbox_is_tx = 0;
|—————————————Node:assignment_expression Text: optu_mailbox_is_tx = 0
|——————————————Node:identifier Text: optu_mailbox_is_tx
|——————————————Node:= Text: =
|——————————————Node:number_literal Text: 0
|—————————————Node:; Text: ;
|————————————Node:} Text: }
|———————————Node:else_clause Text: else {
                exit(EXIT_FAILURE);
            }
|————————————Node:else Text: else
|————————————Node:compound_statement Text: {
                exit(EXIT_FAILURE);
            }
|—————————————Node:{ Text: {
|—————————————Node:expression_statement Text: exit(EXIT_FAILURE);
|——————————————Node:call_expression Text: exit(EXIT_FAILURE)
|———————————————Node:identifier Text: exit
|———————————————Node:argument_list Text: (EXIT_FAILURE)
|————————————————Node:( Text: (
|————————————————Node:identifier Text: EXIT_FAILURE
|————————————————Node:) Text: )
|——————————————Node:; Text: ;
|—————————————Node:} Text: }
|————————Node:expression_statement Text: sscanf(optu_mailbox_str+2, "%d", &optu_mailbox);
|—————————Node:call_expression Text: sscanf(optu_mailbox_str+2, "%d", &optu_mailbox)
|——————————Node:identifier Text: sscanf
|——————————Node:argument_list Text: (optu_mailbox_str+2, "%d", &optu_mailbox)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: optu_mailbox_str+2
|————————————Node:identifier Text: optu_mailbox_str
|————————————Node:+ Text: +
|————————————Node:number_literal Text: 2
|———————————Node:, Text: ,
|———————————Node:string_literal Text: "%d"
|————————————Node:" Text: "
|————————————Node:string_content Text: %d
|————————————Node:" Text: "
|———————————Node:, Text: ,
|———————————Node:pointer_expression Text: &optu_mailbox
|————————————Node:& Text: &
|————————————Node:identifier Text: optu_mailbox
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:break_statement Text: break;
|—————————Node:break Text: break
|—————————Node:; Text: ;
|———————Node:case_statement Text: case 'm':
            buffer = optm_data_str;
            sscanf(optarg, "0x%x,%d,0x%s", &optm_mid, &optm_mid_type, buffer);

            break;
|————————Node:case Text: case
|————————Node:char_literal Text: 'm'
|—————————Node:' Text: '
|—————————Node:character Text: m
|—————————Node:' Text: '
|————————Node:: Text: :
|————————Node:expression_statement Text: buffer = optm_data_str;
|—————————Node:assignment_expression Text: buffer = optm_data_str
|——————————Node:identifier Text: buffer
|——————————Node:= Text: =
|——————————Node:identifier Text: optm_data_str
|—————————Node:; Text: ;
|————————Node:expression_statement Text: sscanf(optarg, "0x%x,%d,0x%s", &optm_mid, &optm_mid_type, buffer);
|—————————Node:call_expression Text: sscanf(optarg, "0x%x,%d,0x%s", &optm_mid, &optm_mid_type, buffer)
|——————————Node:identifier Text: sscanf
|——————————Node:argument_list Text: (optarg, "0x%x,%d,0x%s", &optm_mid, &optm_mid_type, buffer)
|———————————Node:( Text: (
|———————————Node:identifier Text: optarg
|———————————Node:, Text: ,
|———————————Node:string_literal Text: "0x%x,%d,0x%s"
|————————————Node:" Text: "
|————————————Node:string_content Text: 0x%x,%d,0x%s
|————————————Node:" Text: "
|———————————Node:, Text: ,
|———————————Node:pointer_expression Text: &optm_mid
|————————————Node:& Text: &
|————————————Node:identifier Text: optm_mid
|———————————Node:, Text: ,
|———————————Node:pointer_expression Text: &optm_mid_type
|————————————Node:& Text: &
|————————————Node:identifier Text: optm_mid_type
|———————————Node:, Text: ,
|———————————Node:identifier Text: buffer
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:break_statement Text: break;
|—————————Node:break Text: break
|—————————Node:; Text: ;
|———————Node:case_statement Text: case 'w':
            print_warranty();
            return EXIT_SUCCESS;
|————————Node:case Text: case
|————————Node:char_literal Text: 'w'
|—————————Node:' Text: '
|—————————Node:character Text: w
|—————————Node:' Text: '
|————————Node:: Text: :
|————————Node:expression_statement Text: print_warranty();
|—————————Node:call_expression Text: print_warranty()
|——————————Node:identifier Text: print_warranty
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:return_statement Text: return EXIT_SUCCESS;
|—————————Node:return Text: return
|—————————Node:identifier Text: EXIT_SUCCESS
|—————————Node:; Text: ;
|———————Node:case_statement Text: case 'c':
            print_license();
            return EXIT_SUCCESS;
|————————Node:case Text: case
|————————Node:char_literal Text: 'c'
|—————————Node:' Text: '
|—————————Node:character Text: c
|—————————Node:' Text: '
|————————Node:: Text: :
|————————Node:expression_statement Text: print_license();
|—————————Node:call_expression Text: print_license()
|——————————Node:identifier Text: print_license
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:return_statement Text: return EXIT_SUCCESS;
|—————————Node:return Text: return
|—————————Node:identifier Text: EXIT_SUCCESS
|—————————Node:; Text: ;
|———————Node:case_statement Text: case '?':
|————————Node:case Text: case
|————————Node:char_literal Text: '?'
|—————————Node:' Text: '
|—————————Node:character Text: ?
|—————————Node:' Text: '
|————————Node:: Text: :
|———————Node:case_statement Text: case 'h':
            help(argv[0]);
            return EXIT_SUCCESS;
|————————Node:case Text: case
|————————Node:char_literal Text: 'h'
|—————————Node:' Text: '
|—————————Node:character Text: h
|—————————Node:' Text: '
|————————Node:: Text: :
|————————Node:expression_statement Text: help(argv[0]);
|—————————Node:call_expression Text: help(argv[0])
|——————————Node:identifier Text: help
|——————————Node:argument_list Text: (argv[0])
|———————————Node:( Text: (
|———————————Node:subscript_expression Text: argv[0]
|————————————Node:identifier Text: argv
|————————————Node:[ Text: [
|————————————Node:number_literal Text: 0
|————————————Node:] Text: ]
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:return_statement Text: return EXIT_SUCCESS;
|—————————Node:return Text: return
|—————————Node:identifier Text: EXIT_SUCCESS
|—————————Node:; Text: ;
|———————Node:case_statement Text: default:
            printf("invalid option %c\n", opt);
            break;
|————————Node:default Text: default
|————————Node:: Text: :
|————————Node:expression_statement Text: printf("invalid option %c\n", opt);
|—————————Node:call_expression Text: printf("invalid option %c\n", opt)
|——————————Node:identifier Text: printf
|——————————Node:argument_list Text: ("invalid option %c\n", opt)
|———————————Node:( Text: (
|———————————Node:string_literal Text: "invalid option %c\n"
|————————————Node:" Text: "
|————————————Node:string_content Text: invalid option %c
|————————————Node:escape_sequence Text: \n
|————————————Node:" Text: "
|———————————Node:, Text: ,
|———————————Node:identifier Text: opt
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:break_statement Text: break;
|—————————Node:break Text: break
|—————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:declaration Text: int     fd;
|————Node:primitive_type Text: int
|————Node:identifier Text: fd
|————Node:; Text: ;
|———Node:declaration Text: struct  can_msg canmsg;
|————Node:struct_specifier Text: struct  can_msg
|—————Node:struct Text: struct
|—————Node:type_identifier Text: can_msg
|————Node:identifier Text: canmsg
|————Node:; Text: ;
|———Node:declaration Text: int n = strnlen(optm_data_str, 32);
|————Node:primitive_type Text: int
|————Node:init_declarator Text: n = strnlen(optm_data_str, 32)
|—————Node:identifier Text: n
|—————Node:= Text: =
|—————Node:call_expression Text: strnlen(optm_data_str, 32)
|——————Node:identifier Text: strnlen
|——————Node:argument_list Text: (optm_data_str, 32)
|———————Node:( Text: (
|———————Node:identifier Text: optm_data_str
|———————Node:, Text: ,
|———————Node:number_literal Text: 32
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: n = n/2 + n%2;
|————Node:assignment_expression Text: n = n/2 + n%2
|—————Node:identifier Text: n
|—————Node:= Text: =
|—————Node:binary_expression Text: n/2 + n%2
|——————Node:binary_expression Text: n/2
|———————Node:identifier Text: n
|———————Node:/ Text: /
|———————Node:number_literal Text: 2
|——————Node:+ Text: +
|——————Node:binary_expression Text: n%2
|———————Node:identifier Text: n
|———————Node:% Text: %
|———————Node:number_literal Text: 2
|————Node:; Text: ;
|———Node:declaration Text: int i;
|————Node:primitive_type Text: int
|————Node:identifier Text: i
|————Node:; Text: ;
|———Node:for_statement Text: for (i = 0; i < n; ++i) {
        unsigned int k;

        sscanf(optm_data_str + 2*i, "%2x", &k);

        canmsg.dat[i] = k;
    }
|————Node:for Text: for
|————Node:( Text: (
|————Node:assignment_expression Text: i = 0
|—————Node:identifier Text: i
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|————Node:binary_expression Text: i < n
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:identifier Text: n
|————Node:; Text: ;
|————Node:update_expression Text: ++i
|—————Node:++ Text: ++
|—————Node:identifier Text: i
|————Node:) Text: )
|————Node:compound_statement Text: {
        unsigned int k;

        sscanf(optm_data_str + 2*i, "%2x", &k);

        canmsg.dat[i] = k;
    }
|—————Node:{ Text: {
|—————Node:declaration Text: unsigned int k;
|——————Node:sized_type_specifier Text: unsigned int
|———————Node:unsigned Text: unsigned
|———————Node:primitive_type Text: int
|——————Node:identifier Text: k
|——————Node:; Text: ;
|—————Node:expression_statement Text: sscanf(optm_data_str + 2*i, "%2x", &k);
|——————Node:call_expression Text: sscanf(optm_data_str + 2*i, "%2x", &k)
|———————Node:identifier Text: sscanf
|———————Node:argument_list Text: (optm_data_str + 2*i, "%2x", &k)
|————————Node:( Text: (
|————————Node:binary_expression Text: optm_data_str + 2*i
|—————————Node:identifier Text: optm_data_str
|—————————Node:+ Text: +
|—————————Node:binary_expression Text: 2*i
|——————————Node:number_literal Text: 2
|——————————Node:* Text: *
|——————————Node:identifier Text: i
|————————Node:, Text: ,
|————————Node:string_literal Text: "%2x"
|—————————Node:" Text: "
|—————————Node:string_content Text: %2x
|—————————Node:" Text: "
|————————Node:, Text: ,
|————————Node:pointer_expression Text: &k
|—————————Node:& Text: &
|—————————Node:identifier Text: k
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: canmsg.dat[i] = k;
|——————Node:assignment_expression Text: canmsg.dat[i] = k
|———————Node:subscript_expression Text: canmsg.dat[i]
|————————Node:field_expression Text: canmsg.dat
|—————————Node:identifier Text: canmsg
|—————————Node:. Text: .
|—————————Node:field_identifier Text: dat
|————————Node:[ Text: [
|————————Node:identifier Text: i
|————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:identifier Text: k
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:for_statement Text: for (i = n; i < 8; ++i) {
        canmsg.dat[i] = 0;
    }
|————Node:for Text: for
|————Node:( Text: (
|————Node:assignment_expression Text: i = n
|—————Node:identifier Text: i
|—————Node:= Text: =
|—————Node:identifier Text: n
|————Node:; Text: ;
|————Node:binary_expression Text: i < 8
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:number_literal Text: 8
|————Node:; Text: ;
|————Node:update_expression Text: ++i
|—————Node:++ Text: ++
|—————Node:identifier Text: i
|————Node:) Text: )
|————Node:compound_statement Text: {
        canmsg.dat[i] = 0;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: canmsg.dat[i] = 0;
|——————Node:assignment_expression Text: canmsg.dat[i] = 0
|———————Node:subscript_expression Text: canmsg.dat[i]
|————————Node:field_expression Text: canmsg.dat
|—————————Node:identifier Text: canmsg
|—————————Node:. Text: .
|—————————Node:field_identifier Text: dat
|————————Node:[ Text: [
|————————Node:identifier Text: i
|————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:number_literal Text: 0
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: canmsg.mid = optm_mid;
|————Node:assignment_expression Text: canmsg.mid = optm_mid
|—————Node:field_expression Text: canmsg.mid
|——————Node:identifier Text: canmsg
|——————Node:. Text: .
|——————Node:field_identifier Text: mid
|—————Node:= Text: =
|—————Node:identifier Text: optm_mid
|————Node:; Text: ;
|———Node:expression_statement Text: canmsg.ext.timestamp = 0;
|————Node:assignment_expression Text: canmsg.ext.timestamp = 0
|—————Node:field_expression Text: canmsg.ext.timestamp
|——————Node:field_expression Text: canmsg.ext
|———————Node:identifier Text: canmsg
|———————Node:. Text: .
|———————Node:field_identifier Text: ext
|——————Node:. Text: .
|——————Node:field_identifier Text: timestamp
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: canmsg.ext.is_extended_mid = optm_mid_type;
|————Node:assignment_expression Text: canmsg.ext.is_extended_mid = optm_mid_type
|—————Node:field_expression Text: canmsg.ext.is_extended_mid
|——————Node:field_expression Text: canmsg.ext
|———————Node:identifier Text: canmsg
|———————Node:. Text: .
|———————Node:field_identifier Text: ext
|——————Node:. Text: .
|——————Node:field_identifier Text: is_extended_mid
|—————Node:= Text: =
|—————Node:identifier Text: optm_mid_type
|————Node:; Text: ;
|———Node:expression_statement Text: canmsg.len = n;
|————Node:assignment_expression Text: canmsg.len = n
|—————Node:field_expression Text: canmsg.len
|——————Node:identifier Text: canmsg
|——————Node:. Text: .
|——————Node:field_identifier Text: len
|—————Node:= Text: =
|—————Node:identifier Text: n
|————Node:; Text: ;
|———Node:comment
|———Node:if_statement Text: if (!canmsg.ext.is_extended_mid) {
        canmsg.mid <<= 18;
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: (!canmsg.ext.is_extended_mid)
|—————Node:( Text: (
|—————Node:unary_expression Text: !canmsg.ext.is_extended_mid
|——————Node:! Text: !
|——————Node:field_expression Text: canmsg.ext.is_extended_mid
|———————Node:field_expression Text: canmsg.ext
|————————Node:identifier Text: canmsg
|————————Node:. Text: .
|————————Node:field_identifier Text: ext
|———————Node:. Text: .
|———————Node:field_identifier Text: is_extended_mid
|—————Node:) Text: )
|————Node:compound_statement Text: {
        canmsg.mid <<= 18;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: canmsg.mid <<= 18;
|——————Node:assignment_expression Text: canmsg.mid <<= 18
|———————Node:field_expression Text: canmsg.mid
|————————Node:identifier Text: canmsg
|————————Node:. Text: .
|————————Node:field_identifier Text: mid
|———————Node:<<= Text: <<=
|———————Node:number_literal Text: 18
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:declaration Text: char OPEN_FILE[16];
|————Node:primitive_type Text: char
|————Node:array_declarator Text: OPEN_FILE[16]
|—————Node:identifier Text: OPEN_FILE
|—————Node:[ Text: [
|—————Node:number_literal Text: 16
|—————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: snprintf( OPEN_FILE, 16, "/dev/can%d/%s%d",
            optu_unit,
            (optu_mailbox_is_tx ? "tx" : "rx"), optu_mailbox );
|————Node:call_expression Text: snprintf( OPEN_FILE, 16, "/dev/can%d/%s%d",
            optu_unit,
            (optu_mailbox_is_tx ? "tx" : "rx"), optu_mailbox )
|—————Node:identifier Text: snprintf
|—————Node:argument_list Text: ( OPEN_FILE, 16, "/dev/can%d/%s%d",
            optu_unit,
            (optu_mailbox_is_tx ? "tx" : "rx"), optu_mailbox )
|——————Node:( Text: (
|——————Node:identifier Text: OPEN_FILE
|——————Node:, Text: ,
|——————Node:number_literal Text: 16
|——————Node:, Text: ,
|——————Node:string_literal Text: "/dev/can%d/%s%d"
|———————Node:" Text: "
|———————Node:string_content Text: /dev/can%d/%s%d
|———————Node:" Text: "
|——————Node:, Text: ,
|——————Node:identifier Text: optu_unit
|——————Node:, Text: ,
|——————Node:parenthesized_expression Text: (optu_mailbox_is_tx ? "tx" : "rx")
|———————Node:( Text: (
|———————Node:conditional_expression Text: optu_mailbox_is_tx ? "tx" : "rx"
|————————Node:identifier Text: optu_mailbox_is_tx
|————————Node:? Text: ?
|————————Node:string_literal Text: "tx"
|—————————Node:" Text: "
|—————————Node:string_content Text: tx
|—————————Node:" Text: "
|————————Node:: Text: :
|————————Node:string_literal Text: "rx"
|—————————Node:" Text: "
|—————————Node:string_content Text: rx
|—————————Node:" Text: "
|———————Node:) Text: )
|——————Node:, Text: ,
|——————Node:identifier Text: optu_mailbox
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if ((fd = open(OPEN_FILE, O_RDWR)) == -1) {
        printf("cansend error: %s\n", strerror(errno));

        exit(EXIT_FAILURE);
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: ((fd = open(OPEN_FILE, O_RDWR)) == -1)
|—————Node:( Text: (
|—————Node:binary_expression Text: (fd = open(OPEN_FILE, O_RDWR)) == -1
|——————Node:parenthesized_expression Text: (fd = open(OPEN_FILE, O_RDWR))
|———————Node:( Text: (
|———————Node:assignment_expression Text: fd = open(OPEN_FILE, O_RDWR)
|————————Node:identifier Text: fd
|————————Node:= Text: =
|————————Node:call_expression Text: open(OPEN_FILE, O_RDWR)
|—————————Node:identifier Text: open
|—————————Node:argument_list Text: (OPEN_FILE, O_RDWR)
|——————————Node:( Text: (
|——————————Node:identifier Text: OPEN_FILE
|——————————Node:, Text: ,
|——————————Node:identifier Text: O_RDWR
|——————————Node:) Text: )
|———————Node:) Text: )
|——————Node:== Text: ==
|——————Node:number_literal Text: -1
|—————Node:) Text: )
|————Node:compound_statement Text: {
        printf("cansend error: %s\n", strerror(errno));

        exit(EXIT_FAILURE);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: printf("cansend error: %s\n", strerror(errno));
|——————Node:call_expression Text: printf("cansend error: %s\n", strerror(errno))
|———————Node:identifier Text: printf
|———————Node:argument_list Text: ("cansend error: %s\n", strerror(errno))
|————————Node:( Text: (
|————————Node:string_literal Text: "cansend error: %s\n"
|—————————Node:" Text: "
|—————————Node:string_content Text: cansend error: %s
|—————————Node:escape_sequence Text: \n
|—————————Node:" Text: "
|————————Node:, Text: ,
|————————Node:call_expression Text: strerror(errno)
|—————————Node:identifier Text: strerror
|—————————Node:argument_list Text: (errno)
|——————————Node:( Text: (
|——————————Node:identifier Text: errno
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: exit(EXIT_FAILURE);
|——————Node:call_expression Text: exit(EXIT_FAILURE)
|———————Node:identifier Text: exit
|———————Node:argument_list Text: (EXIT_FAILURE)
|————————Node:( Text: (
|————————Node:identifier Text: EXIT_FAILURE
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: write_frame_raw(fd, &canmsg);
|————Node:call_expression Text: write_frame_raw(fd, &canmsg)
|—————Node:identifier Text: write_frame_raw
|—————Node:argument_list Text: (fd, &canmsg)
|——————Node:( Text: (
|——————Node:identifier Text: fd
|——————Node:, Text: ,
|——————Node:pointer_expression Text: &canmsg
|———————Node:& Text: &
|———————Node:identifier Text: canmsg
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: close(fd);
|————Node:call_expression Text: close(fd)
|—————Node:identifier Text: close
|—————Node:argument_list Text: (fd)
|——————Node:( Text: (
|——————Node:identifier Text: fd
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return EXIT_SUCCESS;
|————Node:return Text: return
|————Node:identifier Text: EXIT_SUCCESS
|————Node:; Text: ;
|———Node:} Text: }
