dev-can-linux-tests\driver\io\driver-io-tests.cpp

|Node:translation_unit
|—Node:comment
|—Node:preproc_include Text: #include <pthread.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <pthread.h>
|—Node:preproc_include Text: #include <gtest/gtest.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <gtest/gtest.h>
|—Node:preproc_include Text: #include <tests/driver/common/test_devices.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <tests/driver/common/test_devices.h>
|—Node:linkage_specification Text: extern "C" {
    #include <timer.h>
    #include <dev-can-linux/commands.h>
}
|——Node:extern Text: extern
|——Node:string_literal Text: "C"
|———Node:" Text: "
|———Node:string_content Text: C
|———Node:" Text: "
|——Node:declaration_list Text: {
    #include <timer.h>
    #include <dev-can-linux/commands.h>
}
|———Node:{ Text: {
|———Node:preproc_include Text: #include <timer.h>

|————Node:#include Text: #include
|————Node:system_lib_string Text: <timer.h>
|———Node:preproc_include Text: #include <dev-can-linux/commands.h>

|————Node:#include Text: #include
|————Node:system_lib_string Text: <dev-can-linux/commands.h>
|———Node:} Text: }
|—Node:declaration Text: static bool receive_loop0_started = false, receive_loop1_started = false,
            receive_loop2_started = false;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:primitive_type Text: bool
|——Node:init_declarator Text: receive_loop0_started = false
|———Node:identifier Text: receive_loop0_started
|———Node:= Text: =
|———Node:false Text: false
|——Node:, Text: ,
|——Node:init_declarator Text: receive_loop1_started = false
|———Node:identifier Text: receive_loop1_started
|———Node:= Text: =
|———Node:false Text: false
|——Node:, Text: ,
|——Node:init_declarator Text: receive_loop2_started = false
|———Node:identifier Text: receive_loop2_started
|———Node:= Text: =
|———Node:false Text: false
|——Node:; Text: ;
|—Node:declaration Text: static volatile size_t record0_size = 0;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: volatile
|———Node:volatile Text: volatile
|——Node:primitive_type Text: size_t
|——Node:init_declarator Text: record0_size = 0
|———Node:identifier Text: record0_size
|———Node:= Text: =
|———Node:number_literal Text: 0
|——Node:; Text: ;
|—Node:declaration Text: static volatile size_t record1_size = 0;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: volatile
|———Node:volatile Text: volatile
|——Node:primitive_type Text: size_t
|——Node:init_declarator Text: record1_size = 0
|———Node:identifier Text: record1_size
|———Node:= Text: =
|———Node:number_literal Text: 0
|——Node:; Text: ;
|—Node:declaration Text: static volatile size_t record2_size = 0;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: volatile
|———Node:volatile Text: volatile
|——Node:primitive_type Text: size_t
|——Node:init_declarator Text: record2_size = 0
|———Node:identifier Text: record2_size
|———Node:= Text: =
|———Node:number_literal Text: 0
|——Node:; Text: ;
|—Node:function_definition Text: void* receive_loop0 (void* arg) {
    char* msg = (char*)arg;
    uint32_t mid = 0xABC;

    int fd = open(get_device0_rx0().c_str(), O_RDWR);

    set_mfilter(fd, mid);

    receive_loop0_started = true;

    if (read(fd, (void*)msg, 12) != -1) {
        record0_size++;

        set_mfilter(fd, 0xFFFFFFFF);
        close(fd);
        pthread_exit(msg);
    }

    set_mfilter(fd, 0xFFFFFFFF);
    close(fd);
    pthread_exit(NULL);
}
|——Node:primitive_type Text: void
|——Node:pointer_declarator Text: * receive_loop0 (void* arg)
|———Node:* Text: *
|———Node:function_declarator Text: receive_loop0 (void* arg)
|————Node:identifier Text: receive_loop0
|————Node:parameter_list Text: (void* arg)
|—————Node:( Text: (
|—————Node:parameter_declaration Text: void* arg
|——————Node:primitive_type Text: void
|——————Node:pointer_declarator Text: * arg
|———————Node:* Text: *
|———————Node:identifier Text: arg
|—————Node:) Text: )
|——Node:compound_statement Text: {
    char* msg = (char*)arg;
    uint32_t mid = 0xABC;

    int fd = open(get_device0_rx0().c_str(), O_RDWR);

    set_mfilter(fd, mid);

    receive_loop0_started = true;

    if (read(fd, (void*)msg, 12) != -1) {
        record0_size++;

        set_mfilter(fd, 0xFFFFFFFF);
        close(fd);
        pthread_exit(msg);
    }

    set_mfilter(fd, 0xFFFFFFFF);
    close(fd);
    pthread_exit(NULL);
}
|———Node:{ Text: {
|———Node:declaration Text: char* msg = (char*)arg;
|————Node:primitive_type Text: char
|————Node:init_declarator Text: * msg = (char*)arg
|—————Node:pointer_declarator Text: * msg
|——————Node:* Text: *
|——————Node:identifier Text: msg
|—————Node:= Text: =
|—————Node:cast_expression Text: (char*)arg
|——————Node:( Text: (
|——————Node:type_descriptor Text: char*
|———————Node:primitive_type Text: char
|———————Node:abstract_pointer_declarator Text: *
|————————Node:* Text: *
|——————Node:) Text: )
|——————Node:identifier Text: arg
|————Node:; Text: ;
|———Node:declaration Text: uint32_t mid = 0xABC;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: mid = 0xABC
|—————Node:identifier Text: mid
|—————Node:= Text: =
|—————Node:number_literal Text: 0xABC
|————Node:; Text: ;
|———Node:declaration Text: int fd = open(get_device0_rx0().c_str(), O_RDWR);
|————Node:primitive_type Text: int
|————Node:init_declarator Text: fd = open(get_device0_rx0().c_str(), O_RDWR)
|—————Node:identifier Text: fd
|—————Node:= Text: =
|—————Node:call_expression Text: open(get_device0_rx0().c_str(), O_RDWR)
|——————Node:identifier Text: open
|——————Node:argument_list Text: (get_device0_rx0().c_str(), O_RDWR)
|———————Node:( Text: (
|———————Node:call_expression Text: get_device0_rx0().c_str()
|————————Node:field_expression Text: get_device0_rx0().c_str
|—————————Node:call_expression Text: get_device0_rx0()
|——————————Node:identifier Text: get_device0_rx0
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:. Text: .
|—————————Node:field_identifier Text: c_str
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:, Text: ,
|———————Node:identifier Text: O_RDWR
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: set_mfilter(fd, mid);
|————Node:call_expression Text: set_mfilter(fd, mid)
|—————Node:identifier Text: set_mfilter
|—————Node:argument_list Text: (fd, mid)
|——————Node:( Text: (
|——————Node:identifier Text: fd
|——————Node:, Text: ,
|——————Node:identifier Text: mid
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: receive_loop0_started = true;
|————Node:assignment_expression Text: receive_loop0_started = true
|—————Node:identifier Text: receive_loop0_started
|—————Node:= Text: =
|—————Node:true Text: true
|————Node:; Text: ;
|———Node:if_statement Text: if (read(fd, (void*)msg, 12) != -1) {
        record0_size++;

        set_mfilter(fd, 0xFFFFFFFF);
        close(fd);
        pthread_exit(msg);
    }
|————Node:if Text: if
|————Node:condition_clause Text: (read(fd, (void*)msg, 12) != -1)
|—————Node:( Text: (
|—————Node:binary_expression Text: read(fd, (void*)msg, 12) != -1
|——————Node:call_expression Text: read(fd, (void*)msg, 12)
|———————Node:identifier Text: read
|———————Node:argument_list Text: (fd, (void*)msg, 12)
|————————Node:( Text: (
|————————Node:identifier Text: fd
|————————Node:, Text: ,
|————————Node:cast_expression Text: (void*)msg
|—————————Node:( Text: (
|—————————Node:type_descriptor Text: void*
|——————————Node:primitive_type Text: void
|——————————Node:abstract_pointer_declarator Text: *
|———————————Node:* Text: *
|—————————Node:) Text: )
|—————————Node:identifier Text: msg
|————————Node:, Text: ,
|————————Node:number_literal Text: 12
|————————Node:) Text: )
|——————Node:!= Text: !=
|——————Node:number_literal Text: -1
|—————Node:) Text: )
|————Node:compound_statement Text: {
        record0_size++;

        set_mfilter(fd, 0xFFFFFFFF);
        close(fd);
        pthread_exit(msg);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: record0_size++;
|——————Node:update_expression Text: record0_size++
|———————Node:identifier Text: record0_size
|———————Node:++ Text: ++
|——————Node:; Text: ;
|—————Node:expression_statement Text: set_mfilter(fd, 0xFFFFFFFF);
|——————Node:call_expression Text: set_mfilter(fd, 0xFFFFFFFF)
|———————Node:identifier Text: set_mfilter
|———————Node:argument_list Text: (fd, 0xFFFFFFFF)
|————————Node:( Text: (
|————————Node:identifier Text: fd
|————————Node:, Text: ,
|————————Node:number_literal Text: 0xFFFFFFFF
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: close(fd);
|——————Node:call_expression Text: close(fd)
|———————Node:identifier Text: close
|———————Node:argument_list Text: (fd)
|————————Node:( Text: (
|————————Node:identifier Text: fd
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: pthread_exit(msg);
|——————Node:call_expression Text: pthread_exit(msg)
|———————Node:identifier Text: pthread_exit
|———————Node:argument_list Text: (msg)
|————————Node:( Text: (
|————————Node:identifier Text: msg
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: set_mfilter(fd, 0xFFFFFFFF);
|————Node:call_expression Text: set_mfilter(fd, 0xFFFFFFFF)
|—————Node:identifier Text: set_mfilter
|—————Node:argument_list Text: (fd, 0xFFFFFFFF)
|——————Node:( Text: (
|——————Node:identifier Text: fd
|——————Node:, Text: ,
|——————Node:number_literal Text: 0xFFFFFFFF
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: close(fd);
|————Node:call_expression Text: close(fd)
|—————Node:identifier Text: close
|—————Node:argument_list Text: (fd)
|——————Node:( Text: (
|——————Node:identifier Text: fd
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: pthread_exit(NULL);
|————Node:call_expression Text: pthread_exit(NULL)
|—————Node:identifier Text: pthread_exit
|—————Node:argument_list Text: (NULL)
|——————Node:( Text: (
|——————Node:null Text: NULL
|———————Node:NULL Text: NULL
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void* receive_loop1 (void* arg) {
    char* msg = (char*)arg;
    uint32_t mid = 0xABC;

    int fd = open(get_device1_rx0().c_str(), O_RDWR);

    set_mfilter(fd, mid);

    receive_loop1_started = true;

    if (read(fd, (void*)msg, 12) != -1) {
        record1_size++;

        set_mfilter(fd, 0xFFFFFFFF);
        close(fd);
        pthread_exit(msg);
    }

    set_mfilter(fd, 0xFFFFFFFF);
    close(fd);
    pthread_exit(NULL);
}
|——Node:primitive_type Text: void
|——Node:pointer_declarator Text: * receive_loop1 (void* arg)
|———Node:* Text: *
|———Node:function_declarator Text: receive_loop1 (void* arg)
|————Node:identifier Text: receive_loop1
|————Node:parameter_list Text: (void* arg)
|—————Node:( Text: (
|—————Node:parameter_declaration Text: void* arg
|——————Node:primitive_type Text: void
|——————Node:pointer_declarator Text: * arg
|———————Node:* Text: *
|———————Node:identifier Text: arg
|—————Node:) Text: )
|——Node:compound_statement Text: {
    char* msg = (char*)arg;
    uint32_t mid = 0xABC;

    int fd = open(get_device1_rx0().c_str(), O_RDWR);

    set_mfilter(fd, mid);

    receive_loop1_started = true;

    if (read(fd, (void*)msg, 12) != -1) {
        record1_size++;

        set_mfilter(fd, 0xFFFFFFFF);
        close(fd);
        pthread_exit(msg);
    }

    set_mfilter(fd, 0xFFFFFFFF);
    close(fd);
    pthread_exit(NULL);
}
|———Node:{ Text: {
|———Node:declaration Text: char* msg = (char*)arg;
|————Node:primitive_type Text: char
|————Node:init_declarator Text: * msg = (char*)arg
|—————Node:pointer_declarator Text: * msg
|——————Node:* Text: *
|——————Node:identifier Text: msg
|—————Node:= Text: =
|—————Node:cast_expression Text: (char*)arg
|——————Node:( Text: (
|——————Node:type_descriptor Text: char*
|———————Node:primitive_type Text: char
|———————Node:abstract_pointer_declarator Text: *
|————————Node:* Text: *
|——————Node:) Text: )
|——————Node:identifier Text: arg
|————Node:; Text: ;
|———Node:declaration Text: uint32_t mid = 0xABC;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: mid = 0xABC
|—————Node:identifier Text: mid
|—————Node:= Text: =
|—————Node:number_literal Text: 0xABC
|————Node:; Text: ;
|———Node:declaration Text: int fd = open(get_device1_rx0().c_str(), O_RDWR);
|————Node:primitive_type Text: int
|————Node:init_declarator Text: fd = open(get_device1_rx0().c_str(), O_RDWR)
|—————Node:identifier Text: fd
|—————Node:= Text: =
|—————Node:call_expression Text: open(get_device1_rx0().c_str(), O_RDWR)
|——————Node:identifier Text: open
|——————Node:argument_list Text: (get_device1_rx0().c_str(), O_RDWR)
|———————Node:( Text: (
|———————Node:call_expression Text: get_device1_rx0().c_str()
|————————Node:field_expression Text: get_device1_rx0().c_str
|—————————Node:call_expression Text: get_device1_rx0()
|——————————Node:identifier Text: get_device1_rx0
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:. Text: .
|—————————Node:field_identifier Text: c_str
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:, Text: ,
|———————Node:identifier Text: O_RDWR
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: set_mfilter(fd, mid);
|————Node:call_expression Text: set_mfilter(fd, mid)
|—————Node:identifier Text: set_mfilter
|—————Node:argument_list Text: (fd, mid)
|——————Node:( Text: (
|——————Node:identifier Text: fd
|——————Node:, Text: ,
|——————Node:identifier Text: mid
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: receive_loop1_started = true;
|————Node:assignment_expression Text: receive_loop1_started = true
|—————Node:identifier Text: receive_loop1_started
|—————Node:= Text: =
|—————Node:true Text: true
|————Node:; Text: ;
|———Node:if_statement Text: if (read(fd, (void*)msg, 12) != -1) {
        record1_size++;

        set_mfilter(fd, 0xFFFFFFFF);
        close(fd);
        pthread_exit(msg);
    }
|————Node:if Text: if
|————Node:condition_clause Text: (read(fd, (void*)msg, 12) != -1)
|—————Node:( Text: (
|—————Node:binary_expression Text: read(fd, (void*)msg, 12) != -1
|——————Node:call_expression Text: read(fd, (void*)msg, 12)
|———————Node:identifier Text: read
|———————Node:argument_list Text: (fd, (void*)msg, 12)
|————————Node:( Text: (
|————————Node:identifier Text: fd
|————————Node:, Text: ,
|————————Node:cast_expression Text: (void*)msg
|—————————Node:( Text: (
|—————————Node:type_descriptor Text: void*
|——————————Node:primitive_type Text: void
|——————————Node:abstract_pointer_declarator Text: *
|———————————Node:* Text: *
|—————————Node:) Text: )
|—————————Node:identifier Text: msg
|————————Node:, Text: ,
|————————Node:number_literal Text: 12
|————————Node:) Text: )
|——————Node:!= Text: !=
|——————Node:number_literal Text: -1
|—————Node:) Text: )
|————Node:compound_statement Text: {
        record1_size++;

        set_mfilter(fd, 0xFFFFFFFF);
        close(fd);
        pthread_exit(msg);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: record1_size++;
|——————Node:update_expression Text: record1_size++
|———————Node:identifier Text: record1_size
|———————Node:++ Text: ++
|——————Node:; Text: ;
|—————Node:expression_statement Text: set_mfilter(fd, 0xFFFFFFFF);
|——————Node:call_expression Text: set_mfilter(fd, 0xFFFFFFFF)
|———————Node:identifier Text: set_mfilter
|———————Node:argument_list Text: (fd, 0xFFFFFFFF)
|————————Node:( Text: (
|————————Node:identifier Text: fd
|————————Node:, Text: ,
|————————Node:number_literal Text: 0xFFFFFFFF
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: close(fd);
|——————Node:call_expression Text: close(fd)
|———————Node:identifier Text: close
|———————Node:argument_list Text: (fd)
|————————Node:( Text: (
|————————Node:identifier Text: fd
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: pthread_exit(msg);
|——————Node:call_expression Text: pthread_exit(msg)
|———————Node:identifier Text: pthread_exit
|———————Node:argument_list Text: (msg)
|————————Node:( Text: (
|————————Node:identifier Text: msg
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: set_mfilter(fd, 0xFFFFFFFF);
|————Node:call_expression Text: set_mfilter(fd, 0xFFFFFFFF)
|—————Node:identifier Text: set_mfilter
|—————Node:argument_list Text: (fd, 0xFFFFFFFF)
|——————Node:( Text: (
|——————Node:identifier Text: fd
|——————Node:, Text: ,
|——————Node:number_literal Text: 0xFFFFFFFF
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: close(fd);
|————Node:call_expression Text: close(fd)
|—————Node:identifier Text: close
|—————Node:argument_list Text: (fd)
|——————Node:( Text: (
|——————Node:identifier Text: fd
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: pthread_exit(NULL);
|————Node:call_expression Text: pthread_exit(NULL)
|—————Node:identifier Text: pthread_exit
|—————Node:argument_list Text: (NULL)
|——————Node:( Text: (
|——————Node:null Text: NULL
|———————Node:NULL Text: NULL
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void* receive_loop2 (void* arg) {
    char* msg = (char*)arg;
    uint32_t mid = 0xABC;

    int fd = open(get_device0_rx0().c_str(), O_RDWR);

    set_mfilter(fd, mid);

    receive_loop2_started = true;

    if (read(fd, (void*)msg, 12) != -1) {
        record2_size++;

        set_mfilter(fd, 0xFFFFFFFF);
        close(fd);
        pthread_exit(msg);
    }

    set_mfilter(fd, 0xFFFFFFFF);
    close(fd);
    pthread_exit(NULL);
}
|——Node:primitive_type Text: void
|——Node:pointer_declarator Text: * receive_loop2 (void* arg)
|———Node:* Text: *
|———Node:function_declarator Text: receive_loop2 (void* arg)
|————Node:identifier Text: receive_loop2
|————Node:parameter_list Text: (void* arg)
|—————Node:( Text: (
|—————Node:parameter_declaration Text: void* arg
|——————Node:primitive_type Text: void
|——————Node:pointer_declarator Text: * arg
|———————Node:* Text: *
|———————Node:identifier Text: arg
|—————Node:) Text: )
|——Node:compound_statement Text: {
    char* msg = (char*)arg;
    uint32_t mid = 0xABC;

    int fd = open(get_device0_rx0().c_str(), O_RDWR);

    set_mfilter(fd, mid);

    receive_loop2_started = true;

    if (read(fd, (void*)msg, 12) != -1) {
        record2_size++;

        set_mfilter(fd, 0xFFFFFFFF);
        close(fd);
        pthread_exit(msg);
    }

    set_mfilter(fd, 0xFFFFFFFF);
    close(fd);
    pthread_exit(NULL);
}
|———Node:{ Text: {
|———Node:declaration Text: char* msg = (char*)arg;
|————Node:primitive_type Text: char
|————Node:init_declarator Text: * msg = (char*)arg
|—————Node:pointer_declarator Text: * msg
|——————Node:* Text: *
|——————Node:identifier Text: msg
|—————Node:= Text: =
|—————Node:cast_expression Text: (char*)arg
|——————Node:( Text: (
|——————Node:type_descriptor Text: char*
|———————Node:primitive_type Text: char
|———————Node:abstract_pointer_declarator Text: *
|————————Node:* Text: *
|——————Node:) Text: )
|——————Node:identifier Text: arg
|————Node:; Text: ;
|———Node:declaration Text: uint32_t mid = 0xABC;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: mid = 0xABC
|—————Node:identifier Text: mid
|—————Node:= Text: =
|—————Node:number_literal Text: 0xABC
|————Node:; Text: ;
|———Node:declaration Text: int fd = open(get_device0_rx0().c_str(), O_RDWR);
|————Node:primitive_type Text: int
|————Node:init_declarator Text: fd = open(get_device0_rx0().c_str(), O_RDWR)
|—————Node:identifier Text: fd
|—————Node:= Text: =
|—————Node:call_expression Text: open(get_device0_rx0().c_str(), O_RDWR)
|——————Node:identifier Text: open
|——————Node:argument_list Text: (get_device0_rx0().c_str(), O_RDWR)
|———————Node:( Text: (
|———————Node:call_expression Text: get_device0_rx0().c_str()
|————————Node:field_expression Text: get_device0_rx0().c_str
|—————————Node:call_expression Text: get_device0_rx0()
|——————————Node:identifier Text: get_device0_rx0
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:. Text: .
|—————————Node:field_identifier Text: c_str
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:, Text: ,
|———————Node:identifier Text: O_RDWR
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: set_mfilter(fd, mid);
|————Node:call_expression Text: set_mfilter(fd, mid)
|—————Node:identifier Text: set_mfilter
|—————Node:argument_list Text: (fd, mid)
|——————Node:( Text: (
|——————Node:identifier Text: fd
|——————Node:, Text: ,
|——————Node:identifier Text: mid
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: receive_loop2_started = true;
|————Node:assignment_expression Text: receive_loop2_started = true
|—————Node:identifier Text: receive_loop2_started
|—————Node:= Text: =
|—————Node:true Text: true
|————Node:; Text: ;
|———Node:if_statement Text: if (read(fd, (void*)msg, 12) != -1) {
        record2_size++;

        set_mfilter(fd, 0xFFFFFFFF);
        close(fd);
        pthread_exit(msg);
    }
|————Node:if Text: if
|————Node:condition_clause Text: (read(fd, (void*)msg, 12) != -1)
|—————Node:( Text: (
|—————Node:binary_expression Text: read(fd, (void*)msg, 12) != -1
|——————Node:call_expression Text: read(fd, (void*)msg, 12)
|———————Node:identifier Text: read
|———————Node:argument_list Text: (fd, (void*)msg, 12)
|————————Node:( Text: (
|————————Node:identifier Text: fd
|————————Node:, Text: ,
|————————Node:cast_expression Text: (void*)msg
|—————————Node:( Text: (
|—————————Node:type_descriptor Text: void*
|——————————Node:primitive_type Text: void
|——————————Node:abstract_pointer_declarator Text: *
|———————————Node:* Text: *
|—————————Node:) Text: )
|—————————Node:identifier Text: msg
|————————Node:, Text: ,
|————————Node:number_literal Text: 12
|————————Node:) Text: )
|——————Node:!= Text: !=
|——————Node:number_literal Text: -1
|—————Node:) Text: )
|————Node:compound_statement Text: {
        record2_size++;

        set_mfilter(fd, 0xFFFFFFFF);
        close(fd);
        pthread_exit(msg);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: record2_size++;
|——————Node:update_expression Text: record2_size++
|———————Node:identifier Text: record2_size
|———————Node:++ Text: ++
|——————Node:; Text: ;
|—————Node:expression_statement Text: set_mfilter(fd, 0xFFFFFFFF);
|——————Node:call_expression Text: set_mfilter(fd, 0xFFFFFFFF)
|———————Node:identifier Text: set_mfilter
|———————Node:argument_list Text: (fd, 0xFFFFFFFF)
|————————Node:( Text: (
|————————Node:identifier Text: fd
|————————Node:, Text: ,
|————————Node:number_literal Text: 0xFFFFFFFF
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: close(fd);
|——————Node:call_expression Text: close(fd)
|———————Node:identifier Text: close
|———————Node:argument_list Text: (fd)
|————————Node:( Text: (
|————————Node:identifier Text: fd
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: pthread_exit(msg);
|——————Node:call_expression Text: pthread_exit(msg)
|———————Node:identifier Text: pthread_exit
|———————Node:argument_list Text: (msg)
|————————Node:( Text: (
|————————Node:identifier Text: msg
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: set_mfilter(fd, 0xFFFFFFFF);
|————Node:call_expression Text: set_mfilter(fd, 0xFFFFFFFF)
|—————Node:identifier Text: set_mfilter
|—————Node:argument_list Text: (fd, 0xFFFFFFFF)
|——————Node:( Text: (
|——————Node:identifier Text: fd
|——————Node:, Text: ,
|——————Node:number_literal Text: 0xFFFFFFFF
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: close(fd);
|————Node:call_expression Text: close(fd)
|—————Node:identifier Text: close
|—————Node:argument_list Text: (fd)
|——————Node:( Text: (
|——————Node:identifier Text: fd
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: pthread_exit(NULL);
|————Node:call_expression Text: pthread_exit(NULL)
|—————Node:identifier Text: pthread_exit
|—————Node:argument_list Text: (NULL)
|——————Node:( Text: (
|——————Node:null Text: NULL
|———————Node:NULL Text: NULL
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: TEST( IO, SingleSendReceive ) {
    int fd0 = open(get_device0_tx0().c_str(), O_RDWR);

    EXPECT_NE(fd0, -1);

    int fd1 = -1;

    if (get_device1_tx0() != std::string("")) {
        fd1 = open(get_device1_tx0().c_str(), O_RDWR);

        EXPECT_NE(fd1, -1);
    }

    char msg[] = "test message";
    char wrong_msg[] = "wrong message";

    uint32_t mid = 0xABC;
    uint32_t wrong_mid = 0xAB1;

    char msg0[16], msg1[16];

    receive_loop0_started = receive_loop1_started = false;

    pthread_t thread0;
    pthread_create(&thread0, NULL, &receive_loop0, msg0);

    pthread_t thread1;

    if (fd1 != -1) {
        pthread_create(&thread1, NULL, &receive_loop1, msg1);
    }

    while (!receive_loop0_started) {
        usleep(1000);
    }

    if (fd1 != -1) {
        while (!receive_loop1_started) {
            usleep(1000);
        }
    }

    struct can_devctl_stats stats0, stats1;

    int get_stats_ret = get_stats(fd0, &stats0);

    EXPECT_EQ(get_stats_ret, EOK);

    uint32_t initial_tx_frames0 = stats0.transmitted_frames;
    uint32_t initial_rx_frames0 = stats0.received_frames;
    uint32_t initial_missing_ack0 = stats0.missing_ack;
    uint32_t initial_total_frame_errors0 = stats0.total_frame_errors;
    uint32_t initial_hw_receive_overflows0 = stats0.hw_receive_overflows;
    uint32_t initial_rx_interrupts0 = stats0.rx_interrupts;
    uint32_t initial_tx_interrupts0 = stats0.tx_interrupts;
    uint32_t initial_total_interrupts0 = stats0.total_interrupts;

    uint32_t initial_tx_frames1 = 0;
    uint32_t initial_rx_frames1 = 0;
    uint32_t initial_missing_ack1 = 0;
    uint32_t initial_total_frame_errors1 = 0;
    uint32_t initial_hw_receive_overflows1 = 0;
    uint32_t initial_rx_interrupts1 = 0;
    uint32_t initial_tx_interrupts1 = 0;
    uint32_t initial_total_interrupts1 = 0;

    if (fd1 != -1) {
        get_stats_ret = get_stats(fd1, &stats1);

        EXPECT_EQ(get_stats_ret, EOK);

        initial_tx_frames1 = stats1.transmitted_frames;
        initial_rx_frames1 = stats1.received_frames;
        initial_missing_ack1 = stats1.missing_ack;
        initial_total_frame_errors1 = stats1.total_frame_errors;
        initial_hw_receive_overflows1 = stats1.hw_receive_overflows;
        initial_rx_interrupts1 = stats1.rx_interrupts;
        initial_tx_interrupts1 = stats1.tx_interrupts;
        initial_total_interrupts1 = stats1.total_interrupts;
    }

    int set_mid_ret = set_mid(fd0, wrong_mid);

    EXPECT_EQ(set_mid_ret, EOK);

    int n = write(fd0, wrong_msg, 12);

    set_mid_ret = set_mid(fd0, mid);

    EXPECT_EQ(set_mid_ret, EOK);

    n = write(fd0, msg, 12);

    EXPECT_EQ(n, 12);

    void* exit_ptr0;
    pthread_join(thread0, &exit_ptr0);

    EXPECT_EQ(exit_ptr0, msg0);

    msg0[n] = '\0';

    EXPECT_EQ(std::string(msg0), std::string("test message"));

    usleep(3000);

    if (fd1 != -1) {
        set_mid_ret = set_mid(fd1, wrong_mid);

        EXPECT_EQ(set_mid_ret, EOK);

        n = write(fd1, wrong_msg, 12);

        set_mid_ret = set_mid(fd1, mid);

        EXPECT_EQ(set_mid_ret, EOK);

        n = write(fd1, msg, 12);

        EXPECT_EQ(n, 12);

        void* exit_ptr1;
        pthread_join(thread1, &exit_ptr1);

        EXPECT_EQ(exit_ptr1, msg1);

        msg1[n] = '\0';

        EXPECT_EQ(std::string(msg1), std::string("test message"));
    }

    get_stats_ret = get_stats(fd0, &stats0);

    EXPECT_EQ(get_stats_ret, EOK);

    if (fd1 != -1) {
        get_stats_ret = get_stats(fd1, &stats1);

        EXPECT_EQ(get_stats_ret, EOK);
    }

    EXPECT_EQ(stats0.transmitted_frames - initial_tx_frames0, 4);
    EXPECT_EQ(stats0.received_frames - initial_rx_frames0, 0);
    EXPECT_EQ(stats0.missing_ack - initial_missing_ack0, 0);
    EXPECT_EQ(stats0.total_frame_errors - initial_total_frame_errors0, 0);
    EXPECT_EQ(stats0.hw_receive_overflows - initial_hw_receive_overflows0, 0);
    EXPECT_EQ(stats0.rx_interrupts - initial_rx_interrupts0, 0);
    EXPECT_EQ(stats0.tx_interrupts - initial_tx_interrupts0, 0);
    EXPECT_EQ(stats0.total_interrupts - initial_total_interrupts0, 0);

    EXPECT_EQ(stats0.stuff_errors, 0);
    EXPECT_EQ(stats0.form_errors, 0);
    EXPECT_EQ(stats0.dom_bit_recess_errors, 0);
    EXPECT_EQ(stats0.recess_bit_dom_errors, 0);
    EXPECT_EQ(stats0.parity_errors, 0);
    EXPECT_EQ(stats0.crc_errors, 0);
    EXPECT_EQ(stats0.sw_receive_q_full, 0);
    EXPECT_EQ(stats0.error_warning_state_count, 0);
    EXPECT_EQ(stats0.error_passive_state_count, 0);
    EXPECT_EQ(stats0.bus_off_state_count, 0);
    EXPECT_EQ(stats0.bus_idle_count, 0);
    EXPECT_EQ(stats0.power_down_count, 0);
    EXPECT_EQ(stats0.wake_up_count, 0);

    close(fd0);

    if (fd1 != -1) {
        EXPECT_EQ(stats1.transmitted_frames - initial_tx_frames1, 4);
        EXPECT_EQ(stats1.received_frames - initial_rx_frames1, 0);
        EXPECT_EQ(stats1.missing_ack - initial_missing_ack1, 0);
        EXPECT_EQ(stats1.total_frame_errors - initial_total_frame_errors1, 0);
        EXPECT_EQ(stats1.hw_receive_overflows - initial_hw_receive_overflows1, 0);
        EXPECT_EQ(stats1.rx_interrupts - initial_rx_interrupts1, 0);
        EXPECT_EQ(stats1.tx_interrupts - initial_tx_interrupts1, 0);
        EXPECT_EQ(stats1.total_interrupts - initial_total_interrupts1, 0);

        EXPECT_EQ(stats1.stuff_errors, 0);
        EXPECT_EQ(stats1.form_errors, 0);
        EXPECT_EQ(stats1.dom_bit_recess_errors, 0);
        EXPECT_EQ(stats1.recess_bit_dom_errors, 0);
        EXPECT_EQ(stats1.parity_errors, 0);
        EXPECT_EQ(stats1.crc_errors, 0);
        EXPECT_EQ(stats1.sw_receive_q_full, 0);
        EXPECT_EQ(stats1.error_warning_state_count, 0);
        EXPECT_EQ(stats1.error_passive_state_count, 0);
        EXPECT_EQ(stats1.bus_off_state_count, 0);
        EXPECT_EQ(stats1.bus_idle_count, 0);
        EXPECT_EQ(stats1.power_down_count, 0);
        EXPECT_EQ(stats1.wake_up_count, 0);

        close(fd1);
    }
}
|——Node:function_declarator Text: TEST( IO, SingleSendReceive )
|———Node:identifier Text: TEST
|———Node:parameter_list Text: ( IO, SingleSendReceive )
|————Node:( Text: (
|————Node:parameter_declaration Text: IO
|—————Node:type_identifier Text: IO
|————Node:, Text: ,
|————Node:parameter_declaration Text: SingleSendReceive
|—————Node:type_identifier Text: SingleSendReceive
|————Node:) Text: )
|——Node:compound_statement Text: {
    int fd0 = open(get_device0_tx0().c_str(), O_RDWR);

    EXPECT_NE(fd0, -1);

    int fd1 = -1;

    if (get_device1_tx0() != std::string("")) {
        fd1 = open(get_device1_tx0().c_str(), O_RDWR);

        EXPECT_NE(fd1, -1);
    }

    char msg[] = "test message";
    char wrong_msg[] = "wrong message";

    uint32_t mid = 0xABC;
    uint32_t wrong_mid = 0xAB1;

    char msg0[16], msg1[16];

    receive_loop0_started = receive_loop1_started = false;

    pthread_t thread0;
    pthread_create(&thread0, NULL, &receive_loop0, msg0);

    pthread_t thread1;

    if (fd1 != -1) {
        pthread_create(&thread1, NULL, &receive_loop1, msg1);
    }

    while (!receive_loop0_started) {
        usleep(1000);
    }

    if (fd1 != -1) {
        while (!receive_loop1_started) {
            usleep(1000);
        }
    }

    struct can_devctl_stats stats0, stats1;

    int get_stats_ret = get_stats(fd0, &stats0);

    EXPECT_EQ(get_stats_ret, EOK);

    uint32_t initial_tx_frames0 = stats0.transmitted_frames;
    uint32_t initial_rx_frames0 = stats0.received_frames;
    uint32_t initial_missing_ack0 = stats0.missing_ack;
    uint32_t initial_total_frame_errors0 = stats0.total_frame_errors;
    uint32_t initial_hw_receive_overflows0 = stats0.hw_receive_overflows;
    uint32_t initial_rx_interrupts0 = stats0.rx_interrupts;
    uint32_t initial_tx_interrupts0 = stats0.tx_interrupts;
    uint32_t initial_total_interrupts0 = stats0.total_interrupts;

    uint32_t initial_tx_frames1 = 0;
    uint32_t initial_rx_frames1 = 0;
    uint32_t initial_missing_ack1 = 0;
    uint32_t initial_total_frame_errors1 = 0;
    uint32_t initial_hw_receive_overflows1 = 0;
    uint32_t initial_rx_interrupts1 = 0;
    uint32_t initial_tx_interrupts1 = 0;
    uint32_t initial_total_interrupts1 = 0;

    if (fd1 != -1) {
        get_stats_ret = get_stats(fd1, &stats1);

        EXPECT_EQ(get_stats_ret, EOK);

        initial_tx_frames1 = stats1.transmitted_frames;
        initial_rx_frames1 = stats1.received_frames;
        initial_missing_ack1 = stats1.missing_ack;
        initial_total_frame_errors1 = stats1.total_frame_errors;
        initial_hw_receive_overflows1 = stats1.hw_receive_overflows;
        initial_rx_interrupts1 = stats1.rx_interrupts;
        initial_tx_interrupts1 = stats1.tx_interrupts;
        initial_total_interrupts1 = stats1.total_interrupts;
    }

    int set_mid_ret = set_mid(fd0, wrong_mid);

    EXPECT_EQ(set_mid_ret, EOK);

    int n = write(fd0, wrong_msg, 12);

    set_mid_ret = set_mid(fd0, mid);

    EXPECT_EQ(set_mid_ret, EOK);

    n = write(fd0, msg, 12);

    EXPECT_EQ(n, 12);

    void* exit_ptr0;
    pthread_join(thread0, &exit_ptr0);

    EXPECT_EQ(exit_ptr0, msg0);

    msg0[n] = '\0';

    EXPECT_EQ(std::string(msg0), std::string("test message"));

    usleep(3000);

    if (fd1 != -1) {
        set_mid_ret = set_mid(fd1, wrong_mid);

        EXPECT_EQ(set_mid_ret, EOK);

        n = write(fd1, wrong_msg, 12);

        set_mid_ret = set_mid(fd1, mid);

        EXPECT_EQ(set_mid_ret, EOK);

        n = write(fd1, msg, 12);

        EXPECT_EQ(n, 12);

        void* exit_ptr1;
        pthread_join(thread1, &exit_ptr1);

        EXPECT_EQ(exit_ptr1, msg1);

        msg1[n] = '\0';

        EXPECT_EQ(std::string(msg1), std::string("test message"));
    }

    get_stats_ret = get_stats(fd0, &stats0);

    EXPECT_EQ(get_stats_ret, EOK);

    if (fd1 != -1) {
        get_stats_ret = get_stats(fd1, &stats1);

        EXPECT_EQ(get_stats_ret, EOK);
    }

    EXPECT_EQ(stats0.transmitted_frames - initial_tx_frames0, 4);
    EXPECT_EQ(stats0.received_frames - initial_rx_frames0, 0);
    EXPECT_EQ(stats0.missing_ack - initial_missing_ack0, 0);
    EXPECT_EQ(stats0.total_frame_errors - initial_total_frame_errors0, 0);
    EXPECT_EQ(stats0.hw_receive_overflows - initial_hw_receive_overflows0, 0);
    EXPECT_EQ(stats0.rx_interrupts - initial_rx_interrupts0, 0);
    EXPECT_EQ(stats0.tx_interrupts - initial_tx_interrupts0, 0);
    EXPECT_EQ(stats0.total_interrupts - initial_total_interrupts0, 0);

    EXPECT_EQ(stats0.stuff_errors, 0);
    EXPECT_EQ(stats0.form_errors, 0);
    EXPECT_EQ(stats0.dom_bit_recess_errors, 0);
    EXPECT_EQ(stats0.recess_bit_dom_errors, 0);
    EXPECT_EQ(stats0.parity_errors, 0);
    EXPECT_EQ(stats0.crc_errors, 0);
    EXPECT_EQ(stats0.sw_receive_q_full, 0);
    EXPECT_EQ(stats0.error_warning_state_count, 0);
    EXPECT_EQ(stats0.error_passive_state_count, 0);
    EXPECT_EQ(stats0.bus_off_state_count, 0);
    EXPECT_EQ(stats0.bus_idle_count, 0);
    EXPECT_EQ(stats0.power_down_count, 0);
    EXPECT_EQ(stats0.wake_up_count, 0);

    close(fd0);

    if (fd1 != -1) {
        EXPECT_EQ(stats1.transmitted_frames - initial_tx_frames1, 4);
        EXPECT_EQ(stats1.received_frames - initial_rx_frames1, 0);
        EXPECT_EQ(stats1.missing_ack - initial_missing_ack1, 0);
        EXPECT_EQ(stats1.total_frame_errors - initial_total_frame_errors1, 0);
        EXPECT_EQ(stats1.hw_receive_overflows - initial_hw_receive_overflows1, 0);
        EXPECT_EQ(stats1.rx_interrupts - initial_rx_interrupts1, 0);
        EXPECT_EQ(stats1.tx_interrupts - initial_tx_interrupts1, 0);
        EXPECT_EQ(stats1.total_interrupts - initial_total_interrupts1, 0);

        EXPECT_EQ(stats1.stuff_errors, 0);
        EXPECT_EQ(stats1.form_errors, 0);
        EXPECT_EQ(stats1.dom_bit_recess_errors, 0);
        EXPECT_EQ(stats1.recess_bit_dom_errors, 0);
        EXPECT_EQ(stats1.parity_errors, 0);
        EXPECT_EQ(stats1.crc_errors, 0);
        EXPECT_EQ(stats1.sw_receive_q_full, 0);
        EXPECT_EQ(stats1.error_warning_state_count, 0);
        EXPECT_EQ(stats1.error_passive_state_count, 0);
        EXPECT_EQ(stats1.bus_off_state_count, 0);
        EXPECT_EQ(stats1.bus_idle_count, 0);
        EXPECT_EQ(stats1.power_down_count, 0);
        EXPECT_EQ(stats1.wake_up_count, 0);

        close(fd1);
    }
}
|———Node:{ Text: {
|———Node:declaration Text: int fd0 = open(get_device0_tx0().c_str(), O_RDWR);
|————Node:primitive_type Text: int
|————Node:init_declarator Text: fd0 = open(get_device0_tx0().c_str(), O_RDWR)
|—————Node:identifier Text: fd0
|—————Node:= Text: =
|—————Node:call_expression Text: open(get_device0_tx0().c_str(), O_RDWR)
|——————Node:identifier Text: open
|——————Node:argument_list Text: (get_device0_tx0().c_str(), O_RDWR)
|———————Node:( Text: (
|———————Node:call_expression Text: get_device0_tx0().c_str()
|————————Node:field_expression Text: get_device0_tx0().c_str
|—————————Node:call_expression Text: get_device0_tx0()
|——————————Node:identifier Text: get_device0_tx0
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:. Text: .
|—————————Node:field_identifier Text: c_str
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:, Text: ,
|———————Node:identifier Text: O_RDWR
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_NE(fd0, -1);
|————Node:call_expression Text: EXPECT_NE(fd0, -1)
|—————Node:identifier Text: EXPECT_NE
|—————Node:argument_list Text: (fd0, -1)
|——————Node:( Text: (
|——————Node:identifier Text: fd0
|——————Node:, Text: ,
|——————Node:number_literal Text: -1
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: int fd1 = -1;
|————Node:primitive_type Text: int
|————Node:init_declarator Text: fd1 = -1
|—————Node:identifier Text: fd1
|—————Node:= Text: =
|—————Node:number_literal Text: -1
|————Node:; Text: ;
|———Node:if_statement Text: if (get_device1_tx0() != std::string("")) {
        fd1 = open(get_device1_tx0().c_str(), O_RDWR);

        EXPECT_NE(fd1, -1);
    }
|————Node:if Text: if
|————Node:condition_clause Text: (get_device1_tx0() != std::string(""))
|—————Node:( Text: (
|—————Node:binary_expression Text: get_device1_tx0() != std::string("")
|——————Node:call_expression Text: get_device1_tx0()
|———————Node:identifier Text: get_device1_tx0
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:!= Text: !=
|——————Node:call_expression Text: std::string("")
|———————Node:qualified_identifier Text: std::string
|————————Node:namespace_identifier Text: std
|————————Node::: Text: ::
|————————Node:identifier Text: string
|———————Node:argument_list Text: ("")
|————————Node:( Text: (
|————————Node:string_literal Text: ""
|—————————Node:" Text: "
|—————————Node:" Text: "
|————————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        fd1 = open(get_device1_tx0().c_str(), O_RDWR);

        EXPECT_NE(fd1, -1);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: fd1 = open(get_device1_tx0().c_str(), O_RDWR);
|——————Node:assignment_expression Text: fd1 = open(get_device1_tx0().c_str(), O_RDWR)
|———————Node:identifier Text: fd1
|———————Node:= Text: =
|———————Node:call_expression Text: open(get_device1_tx0().c_str(), O_RDWR)
|————————Node:identifier Text: open
|————————Node:argument_list Text: (get_device1_tx0().c_str(), O_RDWR)
|—————————Node:( Text: (
|—————————Node:call_expression Text: get_device1_tx0().c_str()
|——————————Node:field_expression Text: get_device1_tx0().c_str
|———————————Node:call_expression Text: get_device1_tx0()
|————————————Node:identifier Text: get_device1_tx0
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:. Text: .
|———————————Node:field_identifier Text: c_str
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:identifier Text: O_RDWR
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_NE(fd1, -1);
|——————Node:call_expression Text: EXPECT_NE(fd1, -1)
|———————Node:identifier Text: EXPECT_NE
|———————Node:argument_list Text: (fd1, -1)
|————————Node:( Text: (
|————————Node:identifier Text: fd1
|————————Node:, Text: ,
|————————Node:number_literal Text: -1
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:declaration Text: char msg[] = "test message";
|————Node:primitive_type Text: char
|————Node:init_declarator Text: msg[] = "test message"
|—————Node:array_declarator Text: msg[]
|——————Node:identifier Text: msg
|——————Node:[ Text: [
|——————Node:] Text: ]
|—————Node:= Text: =
|—————Node:string_literal Text: "test message"
|——————Node:" Text: "
|——————Node:string_content Text: test message
|——————Node:" Text: "
|————Node:; Text: ;
|———Node:declaration Text: char wrong_msg[] = "wrong message";
|————Node:primitive_type Text: char
|————Node:init_declarator Text: wrong_msg[] = "wrong message"
|—————Node:array_declarator Text: wrong_msg[]
|——————Node:identifier Text: wrong_msg
|——————Node:[ Text: [
|——————Node:] Text: ]
|—————Node:= Text: =
|—————Node:string_literal Text: "wrong message"
|——————Node:" Text: "
|——————Node:string_content Text: wrong message
|——————Node:" Text: "
|————Node:; Text: ;
|———Node:declaration Text: uint32_t mid = 0xABC;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: mid = 0xABC
|—————Node:identifier Text: mid
|—————Node:= Text: =
|—————Node:number_literal Text: 0xABC
|————Node:; Text: ;
|———Node:declaration Text: uint32_t wrong_mid = 0xAB1;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: wrong_mid = 0xAB1
|—————Node:identifier Text: wrong_mid
|—————Node:= Text: =
|—————Node:number_literal Text: 0xAB1
|————Node:; Text: ;
|———Node:declaration Text: char msg0[16], msg1[16];
|————Node:primitive_type Text: char
|————Node:array_declarator Text: msg0[16]
|—————Node:identifier Text: msg0
|—————Node:[ Text: [
|—————Node:number_literal Text: 16
|—————Node:] Text: ]
|————Node:, Text: ,
|————Node:array_declarator Text: msg1[16]
|—————Node:identifier Text: msg1
|—————Node:[ Text: [
|—————Node:number_literal Text: 16
|—————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: receive_loop0_started = receive_loop1_started = false;
|————Node:assignment_expression Text: receive_loop0_started = receive_loop1_started = false
|—————Node:identifier Text: receive_loop0_started
|—————Node:= Text: =
|—————Node:assignment_expression Text: receive_loop1_started = false
|——————Node:identifier Text: receive_loop1_started
|——————Node:= Text: =
|——————Node:false Text: false
|————Node:; Text: ;
|———Node:declaration Text: pthread_t thread0;
|————Node:type_identifier Text: pthread_t
|————Node:identifier Text: thread0
|————Node:; Text: ;
|———Node:expression_statement Text: pthread_create(&thread0, NULL, &receive_loop0, msg0);
|————Node:call_expression Text: pthread_create(&thread0, NULL, &receive_loop0, msg0)
|—————Node:identifier Text: pthread_create
|—————Node:argument_list Text: (&thread0, NULL, &receive_loop0, msg0)
|——————Node:( Text: (
|——————Node:pointer_expression Text: &thread0
|———————Node:& Text: &
|———————Node:identifier Text: thread0
|——————Node:, Text: ,
|——————Node:null Text: NULL
|———————Node:NULL Text: NULL
|——————Node:, Text: ,
|——————Node:pointer_expression Text: &receive_loop0
|———————Node:& Text: &
|———————Node:identifier Text: receive_loop0
|——————Node:, Text: ,
|——————Node:identifier Text: msg0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: pthread_t thread1;
|————Node:type_identifier Text: pthread_t
|————Node:identifier Text: thread1
|————Node:; Text: ;
|———Node:if_statement Text: if (fd1 != -1) {
        pthread_create(&thread1, NULL, &receive_loop1, msg1);
    }
|————Node:if Text: if
|————Node:condition_clause Text: (fd1 != -1)
|—————Node:( Text: (
|—————Node:binary_expression Text: fd1 != -1
|——————Node:identifier Text: fd1
|——————Node:!= Text: !=
|——————Node:number_literal Text: -1
|—————Node:) Text: )
|————Node:compound_statement Text: {
        pthread_create(&thread1, NULL, &receive_loop1, msg1);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: pthread_create(&thread1, NULL, &receive_loop1, msg1);
|——————Node:call_expression Text: pthread_create(&thread1, NULL, &receive_loop1, msg1)
|———————Node:identifier Text: pthread_create
|———————Node:argument_list Text: (&thread1, NULL, &receive_loop1, msg1)
|————————Node:( Text: (
|————————Node:pointer_expression Text: &thread1
|—————————Node:& Text: &
|—————————Node:identifier Text: thread1
|————————Node:, Text: ,
|————————Node:null Text: NULL
|—————————Node:NULL Text: NULL
|————————Node:, Text: ,
|————————Node:pointer_expression Text: &receive_loop1
|—————————Node:& Text: &
|—————————Node:identifier Text: receive_loop1
|————————Node:, Text: ,
|————————Node:identifier Text: msg1
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:while_statement Text: while (!receive_loop0_started) {
        usleep(1000);
    }
|————Node:while Text: while
|————Node:condition_clause Text: (!receive_loop0_started)
|—————Node:( Text: (
|—————Node:unary_expression Text: !receive_loop0_started
|——————Node:! Text: !
|——————Node:identifier Text: receive_loop0_started
|—————Node:) Text: )
|————Node:compound_statement Text: {
        usleep(1000);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: usleep(1000);
|——————Node:call_expression Text: usleep(1000)
|———————Node:identifier Text: usleep
|———————Node:argument_list Text: (1000)
|————————Node:( Text: (
|————————Node:number_literal Text: 1000
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:if_statement Text: if (fd1 != -1) {
        while (!receive_loop1_started) {
            usleep(1000);
        }
    }
|————Node:if Text: if
|————Node:condition_clause Text: (fd1 != -1)
|—————Node:( Text: (
|—————Node:binary_expression Text: fd1 != -1
|——————Node:identifier Text: fd1
|——————Node:!= Text: !=
|——————Node:number_literal Text: -1
|—————Node:) Text: )
|————Node:compound_statement Text: {
        while (!receive_loop1_started) {
            usleep(1000);
        }
    }
|—————Node:{ Text: {
|—————Node:while_statement Text: while (!receive_loop1_started) {
            usleep(1000);
        }
|——————Node:while Text: while
|——————Node:condition_clause Text: (!receive_loop1_started)
|———————Node:( Text: (
|———————Node:unary_expression Text: !receive_loop1_started
|————————Node:! Text: !
|————————Node:identifier Text: receive_loop1_started
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            usleep(1000);
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: usleep(1000);
|————————Node:call_expression Text: usleep(1000)
|—————————Node:identifier Text: usleep
|—————————Node:argument_list Text: (1000)
|——————————Node:( Text: (
|——————————Node:number_literal Text: 1000
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:declaration Text: struct can_devctl_stats stats0, stats1;
|————Node:struct_specifier Text: struct can_devctl_stats
|—————Node:struct Text: struct
|—————Node:type_identifier Text: can_devctl_stats
|————Node:identifier Text: stats0
|————Node:, Text: ,
|————Node:identifier Text: stats1
|————Node:; Text: ;
|———Node:declaration Text: int get_stats_ret = get_stats(fd0, &stats0);
|————Node:primitive_type Text: int
|————Node:init_declarator Text: get_stats_ret = get_stats(fd0, &stats0)
|—————Node:identifier Text: get_stats_ret
|—————Node:= Text: =
|—————Node:call_expression Text: get_stats(fd0, &stats0)
|——————Node:identifier Text: get_stats
|——————Node:argument_list Text: (fd0, &stats0)
|———————Node:( Text: (
|———————Node:identifier Text: fd0
|———————Node:, Text: ,
|———————Node:pointer_expression Text: &stats0
|————————Node:& Text: &
|————————Node:identifier Text: stats0
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(get_stats_ret, EOK);
|————Node:call_expression Text: EXPECT_EQ(get_stats_ret, EOK)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (get_stats_ret, EOK)
|——————Node:( Text: (
|——————Node:identifier Text: get_stats_ret
|——————Node:, Text: ,
|——————Node:identifier Text: EOK
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_tx_frames0 = stats0.transmitted_frames;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_tx_frames0 = stats0.transmitted_frames
|—————Node:identifier Text: initial_tx_frames0
|—————Node:= Text: =
|—————Node:field_expression Text: stats0.transmitted_frames
|——————Node:identifier Text: stats0
|——————Node:. Text: .
|——————Node:field_identifier Text: transmitted_frames
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_rx_frames0 = stats0.received_frames;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_rx_frames0 = stats0.received_frames
|—————Node:identifier Text: initial_rx_frames0
|—————Node:= Text: =
|—————Node:field_expression Text: stats0.received_frames
|——————Node:identifier Text: stats0
|——————Node:. Text: .
|——————Node:field_identifier Text: received_frames
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_missing_ack0 = stats0.missing_ack;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_missing_ack0 = stats0.missing_ack
|—————Node:identifier Text: initial_missing_ack0
|—————Node:= Text: =
|—————Node:field_expression Text: stats0.missing_ack
|——————Node:identifier Text: stats0
|——————Node:. Text: .
|——————Node:field_identifier Text: missing_ack
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_total_frame_errors0 = stats0.total_frame_errors;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_total_frame_errors0 = stats0.total_frame_errors
|—————Node:identifier Text: initial_total_frame_errors0
|—————Node:= Text: =
|—————Node:field_expression Text: stats0.total_frame_errors
|——————Node:identifier Text: stats0
|——————Node:. Text: .
|——————Node:field_identifier Text: total_frame_errors
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_hw_receive_overflows0 = stats0.hw_receive_overflows;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_hw_receive_overflows0 = stats0.hw_receive_overflows
|—————Node:identifier Text: initial_hw_receive_overflows0
|—————Node:= Text: =
|—————Node:field_expression Text: stats0.hw_receive_overflows
|——————Node:identifier Text: stats0
|——————Node:. Text: .
|——————Node:field_identifier Text: hw_receive_overflows
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_rx_interrupts0 = stats0.rx_interrupts;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_rx_interrupts0 = stats0.rx_interrupts
|—————Node:identifier Text: initial_rx_interrupts0
|—————Node:= Text: =
|—————Node:field_expression Text: stats0.rx_interrupts
|——————Node:identifier Text: stats0
|——————Node:. Text: .
|——————Node:field_identifier Text: rx_interrupts
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_tx_interrupts0 = stats0.tx_interrupts;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_tx_interrupts0 = stats0.tx_interrupts
|—————Node:identifier Text: initial_tx_interrupts0
|—————Node:= Text: =
|—————Node:field_expression Text: stats0.tx_interrupts
|——————Node:identifier Text: stats0
|——————Node:. Text: .
|——————Node:field_identifier Text: tx_interrupts
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_total_interrupts0 = stats0.total_interrupts;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_total_interrupts0 = stats0.total_interrupts
|—————Node:identifier Text: initial_total_interrupts0
|—————Node:= Text: =
|—————Node:field_expression Text: stats0.total_interrupts
|——————Node:identifier Text: stats0
|——————Node:. Text: .
|——————Node:field_identifier Text: total_interrupts
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_tx_frames1 = 0;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_tx_frames1 = 0
|—————Node:identifier Text: initial_tx_frames1
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_rx_frames1 = 0;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_rx_frames1 = 0
|—————Node:identifier Text: initial_rx_frames1
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_missing_ack1 = 0;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_missing_ack1 = 0
|—————Node:identifier Text: initial_missing_ack1
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_total_frame_errors1 = 0;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_total_frame_errors1 = 0
|—————Node:identifier Text: initial_total_frame_errors1
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_hw_receive_overflows1 = 0;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_hw_receive_overflows1 = 0
|—————Node:identifier Text: initial_hw_receive_overflows1
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_rx_interrupts1 = 0;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_rx_interrupts1 = 0
|—————Node:identifier Text: initial_rx_interrupts1
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_tx_interrupts1 = 0;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_tx_interrupts1 = 0
|—————Node:identifier Text: initial_tx_interrupts1
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_total_interrupts1 = 0;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_total_interrupts1 = 0
|—————Node:identifier Text: initial_total_interrupts1
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:if_statement Text: if (fd1 != -1) {
        get_stats_ret = get_stats(fd1, &stats1);

        EXPECT_EQ(get_stats_ret, EOK);

        initial_tx_frames1 = stats1.transmitted_frames;
        initial_rx_frames1 = stats1.received_frames;
        initial_missing_ack1 = stats1.missing_ack;
        initial_total_frame_errors1 = stats1.total_frame_errors;
        initial_hw_receive_overflows1 = stats1.hw_receive_overflows;
        initial_rx_interrupts1 = stats1.rx_interrupts;
        initial_tx_interrupts1 = stats1.tx_interrupts;
        initial_total_interrupts1 = stats1.total_interrupts;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (fd1 != -1)
|—————Node:( Text: (
|—————Node:binary_expression Text: fd1 != -1
|——————Node:identifier Text: fd1
|——————Node:!= Text: !=
|——————Node:number_literal Text: -1
|—————Node:) Text: )
|————Node:compound_statement Text: {
        get_stats_ret = get_stats(fd1, &stats1);

        EXPECT_EQ(get_stats_ret, EOK);

        initial_tx_frames1 = stats1.transmitted_frames;
        initial_rx_frames1 = stats1.received_frames;
        initial_missing_ack1 = stats1.missing_ack;
        initial_total_frame_errors1 = stats1.total_frame_errors;
        initial_hw_receive_overflows1 = stats1.hw_receive_overflows;
        initial_rx_interrupts1 = stats1.rx_interrupts;
        initial_tx_interrupts1 = stats1.tx_interrupts;
        initial_total_interrupts1 = stats1.total_interrupts;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: get_stats_ret = get_stats(fd1, &stats1);
|——————Node:assignment_expression Text: get_stats_ret = get_stats(fd1, &stats1)
|———————Node:identifier Text: get_stats_ret
|———————Node:= Text: =
|———————Node:call_expression Text: get_stats(fd1, &stats1)
|————————Node:identifier Text: get_stats
|————————Node:argument_list Text: (fd1, &stats1)
|—————————Node:( Text: (
|—————————Node:identifier Text: fd1
|—————————Node:, Text: ,
|—————————Node:pointer_expression Text: &stats1
|——————————Node:& Text: &
|——————————Node:identifier Text: stats1
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(get_stats_ret, EOK);
|——————Node:call_expression Text: EXPECT_EQ(get_stats_ret, EOK)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (get_stats_ret, EOK)
|————————Node:( Text: (
|————————Node:identifier Text: get_stats_ret
|————————Node:, Text: ,
|————————Node:identifier Text: EOK
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: initial_tx_frames1 = stats1.transmitted_frames;
|——————Node:assignment_expression Text: initial_tx_frames1 = stats1.transmitted_frames
|———————Node:identifier Text: initial_tx_frames1
|———————Node:= Text: =
|———————Node:field_expression Text: stats1.transmitted_frames
|————————Node:identifier Text: stats1
|————————Node:. Text: .
|————————Node:field_identifier Text: transmitted_frames
|——————Node:; Text: ;
|—————Node:expression_statement Text: initial_rx_frames1 = stats1.received_frames;
|——————Node:assignment_expression Text: initial_rx_frames1 = stats1.received_frames
|———————Node:identifier Text: initial_rx_frames1
|———————Node:= Text: =
|———————Node:field_expression Text: stats1.received_frames
|————————Node:identifier Text: stats1
|————————Node:. Text: .
|————————Node:field_identifier Text: received_frames
|——————Node:; Text: ;
|—————Node:expression_statement Text: initial_missing_ack1 = stats1.missing_ack;
|——————Node:assignment_expression Text: initial_missing_ack1 = stats1.missing_ack
|———————Node:identifier Text: initial_missing_ack1
|———————Node:= Text: =
|———————Node:field_expression Text: stats1.missing_ack
|————————Node:identifier Text: stats1
|————————Node:. Text: .
|————————Node:field_identifier Text: missing_ack
|——————Node:; Text: ;
|—————Node:expression_statement Text: initial_total_frame_errors1 = stats1.total_frame_errors;
|——————Node:assignment_expression Text: initial_total_frame_errors1 = stats1.total_frame_errors
|———————Node:identifier Text: initial_total_frame_errors1
|———————Node:= Text: =
|———————Node:field_expression Text: stats1.total_frame_errors
|————————Node:identifier Text: stats1
|————————Node:. Text: .
|————————Node:field_identifier Text: total_frame_errors
|——————Node:; Text: ;
|—————Node:expression_statement Text: initial_hw_receive_overflows1 = stats1.hw_receive_overflows;
|——————Node:assignment_expression Text: initial_hw_receive_overflows1 = stats1.hw_receive_overflows
|———————Node:identifier Text: initial_hw_receive_overflows1
|———————Node:= Text: =
|———————Node:field_expression Text: stats1.hw_receive_overflows
|————————Node:identifier Text: stats1
|————————Node:. Text: .
|————————Node:field_identifier Text: hw_receive_overflows
|——————Node:; Text: ;
|—————Node:expression_statement Text: initial_rx_interrupts1 = stats1.rx_interrupts;
|——————Node:assignment_expression Text: initial_rx_interrupts1 = stats1.rx_interrupts
|———————Node:identifier Text: initial_rx_interrupts1
|———————Node:= Text: =
|———————Node:field_expression Text: stats1.rx_interrupts
|————————Node:identifier Text: stats1
|————————Node:. Text: .
|————————Node:field_identifier Text: rx_interrupts
|——————Node:; Text: ;
|—————Node:expression_statement Text: initial_tx_interrupts1 = stats1.tx_interrupts;
|——————Node:assignment_expression Text: initial_tx_interrupts1 = stats1.tx_interrupts
|———————Node:identifier Text: initial_tx_interrupts1
|———————Node:= Text: =
|———————Node:field_expression Text: stats1.tx_interrupts
|————————Node:identifier Text: stats1
|————————Node:. Text: .
|————————Node:field_identifier Text: tx_interrupts
|——————Node:; Text: ;
|—————Node:expression_statement Text: initial_total_interrupts1 = stats1.total_interrupts;
|——————Node:assignment_expression Text: initial_total_interrupts1 = stats1.total_interrupts
|———————Node:identifier Text: initial_total_interrupts1
|———————Node:= Text: =
|———————Node:field_expression Text: stats1.total_interrupts
|————————Node:identifier Text: stats1
|————————Node:. Text: .
|————————Node:field_identifier Text: total_interrupts
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:declaration Text: int set_mid_ret = set_mid(fd0, wrong_mid);
|————Node:primitive_type Text: int
|————Node:init_declarator Text: set_mid_ret = set_mid(fd0, wrong_mid)
|—————Node:identifier Text: set_mid_ret
|—————Node:= Text: =
|—————Node:call_expression Text: set_mid(fd0, wrong_mid)
|——————Node:identifier Text: set_mid
|——————Node:argument_list Text: (fd0, wrong_mid)
|———————Node:( Text: (
|———————Node:identifier Text: fd0
|———————Node:, Text: ,
|———————Node:identifier Text: wrong_mid
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(set_mid_ret, EOK);
|————Node:call_expression Text: EXPECT_EQ(set_mid_ret, EOK)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (set_mid_ret, EOK)
|——————Node:( Text: (
|——————Node:identifier Text: set_mid_ret
|——————Node:, Text: ,
|——————Node:identifier Text: EOK
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: int n = write(fd0, wrong_msg, 12);
|————Node:primitive_type Text: int
|————Node:init_declarator Text: n = write(fd0, wrong_msg, 12)
|—————Node:identifier Text: n
|—————Node:= Text: =
|—————Node:call_expression Text: write(fd0, wrong_msg, 12)
|——————Node:identifier Text: write
|——————Node:argument_list Text: (fd0, wrong_msg, 12)
|———————Node:( Text: (
|———————Node:identifier Text: fd0
|———————Node:, Text: ,
|———————Node:identifier Text: wrong_msg
|———————Node:, Text: ,
|———————Node:number_literal Text: 12
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: set_mid_ret = set_mid(fd0, mid);
|————Node:assignment_expression Text: set_mid_ret = set_mid(fd0, mid)
|—————Node:identifier Text: set_mid_ret
|—————Node:= Text: =
|—————Node:call_expression Text: set_mid(fd0, mid)
|——————Node:identifier Text: set_mid
|——————Node:argument_list Text: (fd0, mid)
|———————Node:( Text: (
|———————Node:identifier Text: fd0
|———————Node:, Text: ,
|———————Node:identifier Text: mid
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(set_mid_ret, EOK);
|————Node:call_expression Text: EXPECT_EQ(set_mid_ret, EOK)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (set_mid_ret, EOK)
|——————Node:( Text: (
|——————Node:identifier Text: set_mid_ret
|——————Node:, Text: ,
|——————Node:identifier Text: EOK
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: n = write(fd0, msg, 12);
|————Node:assignment_expression Text: n = write(fd0, msg, 12)
|—————Node:identifier Text: n
|—————Node:= Text: =
|—————Node:call_expression Text: write(fd0, msg, 12)
|——————Node:identifier Text: write
|——————Node:argument_list Text: (fd0, msg, 12)
|———————Node:( Text: (
|———————Node:identifier Text: fd0
|———————Node:, Text: ,
|———————Node:identifier Text: msg
|———————Node:, Text: ,
|———————Node:number_literal Text: 12
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(n, 12);
|————Node:call_expression Text: EXPECT_EQ(n, 12)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (n, 12)
|——————Node:( Text: (
|——————Node:identifier Text: n
|——————Node:, Text: ,
|——————Node:number_literal Text: 12
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: void* exit_ptr0;
|————Node:primitive_type Text: void
|————Node:pointer_declarator Text: * exit_ptr0
|—————Node:* Text: *
|—————Node:identifier Text: exit_ptr0
|————Node:; Text: ;
|———Node:expression_statement Text: pthread_join(thread0, &exit_ptr0);
|————Node:call_expression Text: pthread_join(thread0, &exit_ptr0)
|—————Node:identifier Text: pthread_join
|—————Node:argument_list Text: (thread0, &exit_ptr0)
|——————Node:( Text: (
|——————Node:identifier Text: thread0
|——————Node:, Text: ,
|——————Node:pointer_expression Text: &exit_ptr0
|———————Node:& Text: &
|———————Node:identifier Text: exit_ptr0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(exit_ptr0, msg0);
|————Node:call_expression Text: EXPECT_EQ(exit_ptr0, msg0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (exit_ptr0, msg0)
|——————Node:( Text: (
|——————Node:identifier Text: exit_ptr0
|——————Node:, Text: ,
|——————Node:identifier Text: msg0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: msg0[n] = '\0';
|————Node:assignment_expression Text: msg0[n] = '\0'
|—————Node:subscript_expression Text: msg0[n]
|——————Node:identifier Text: msg0
|——————Node:subscript_argument_list Text: [n]
|———————Node:[ Text: [
|———————Node:identifier Text: n
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:char_literal Text: '\0'
|——————Node:' Text: '
|——————Node:escape_sequence Text: \0
|——————Node:' Text: '
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(std::string(msg0), std::string("test message"));
|————Node:call_expression Text: EXPECT_EQ(std::string(msg0), std::string("test message"))
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (std::string(msg0), std::string("test message"))
|——————Node:( Text: (
|——————Node:call_expression Text: std::string(msg0)
|———————Node:qualified_identifier Text: std::string
|————————Node:namespace_identifier Text: std
|————————Node::: Text: ::
|————————Node:identifier Text: string
|———————Node:argument_list Text: (msg0)
|————————Node:( Text: (
|————————Node:identifier Text: msg0
|————————Node:) Text: )
|——————Node:, Text: ,
|——————Node:call_expression Text: std::string("test message")
|———————Node:qualified_identifier Text: std::string
|————————Node:namespace_identifier Text: std
|————————Node::: Text: ::
|————————Node:identifier Text: string
|———————Node:argument_list Text: ("test message")
|————————Node:( Text: (
|————————Node:string_literal Text: "test message"
|—————————Node:" Text: "
|—————————Node:string_content Text: test message
|—————————Node:" Text: "
|————————Node:) Text: )
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: usleep(3000);
|————Node:call_expression Text: usleep(3000)
|—————Node:identifier Text: usleep
|—————Node:argument_list Text: (3000)
|——————Node:( Text: (
|——————Node:number_literal Text: 3000
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (fd1 != -1) {
        set_mid_ret = set_mid(fd1, wrong_mid);

        EXPECT_EQ(set_mid_ret, EOK);

        n = write(fd1, wrong_msg, 12);

        set_mid_ret = set_mid(fd1, mid);

        EXPECT_EQ(set_mid_ret, EOK);

        n = write(fd1, msg, 12);

        EXPECT_EQ(n, 12);

        void* exit_ptr1;
        pthread_join(thread1, &exit_ptr1);

        EXPECT_EQ(exit_ptr1, msg1);

        msg1[n] = '\0';

        EXPECT_EQ(std::string(msg1), std::string("test message"));
    }
|————Node:if Text: if
|————Node:condition_clause Text: (fd1 != -1)
|—————Node:( Text: (
|—————Node:binary_expression Text: fd1 != -1
|——————Node:identifier Text: fd1
|——————Node:!= Text: !=
|——————Node:number_literal Text: -1
|—————Node:) Text: )
|————Node:compound_statement Text: {
        set_mid_ret = set_mid(fd1, wrong_mid);

        EXPECT_EQ(set_mid_ret, EOK);

        n = write(fd1, wrong_msg, 12);

        set_mid_ret = set_mid(fd1, mid);

        EXPECT_EQ(set_mid_ret, EOK);

        n = write(fd1, msg, 12);

        EXPECT_EQ(n, 12);

        void* exit_ptr1;
        pthread_join(thread1, &exit_ptr1);

        EXPECT_EQ(exit_ptr1, msg1);

        msg1[n] = '\0';

        EXPECT_EQ(std::string(msg1), std::string("test message"));
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: set_mid_ret = set_mid(fd1, wrong_mid);
|——————Node:assignment_expression Text: set_mid_ret = set_mid(fd1, wrong_mid)
|———————Node:identifier Text: set_mid_ret
|———————Node:= Text: =
|———————Node:call_expression Text: set_mid(fd1, wrong_mid)
|————————Node:identifier Text: set_mid
|————————Node:argument_list Text: (fd1, wrong_mid)
|—————————Node:( Text: (
|—————————Node:identifier Text: fd1
|—————————Node:, Text: ,
|—————————Node:identifier Text: wrong_mid
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(set_mid_ret, EOK);
|——————Node:call_expression Text: EXPECT_EQ(set_mid_ret, EOK)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (set_mid_ret, EOK)
|————————Node:( Text: (
|————————Node:identifier Text: set_mid_ret
|————————Node:, Text: ,
|————————Node:identifier Text: EOK
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: n = write(fd1, wrong_msg, 12);
|——————Node:assignment_expression Text: n = write(fd1, wrong_msg, 12)
|———————Node:identifier Text: n
|———————Node:= Text: =
|———————Node:call_expression Text: write(fd1, wrong_msg, 12)
|————————Node:identifier Text: write
|————————Node:argument_list Text: (fd1, wrong_msg, 12)
|—————————Node:( Text: (
|—————————Node:identifier Text: fd1
|—————————Node:, Text: ,
|—————————Node:identifier Text: wrong_msg
|—————————Node:, Text: ,
|—————————Node:number_literal Text: 12
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: set_mid_ret = set_mid(fd1, mid);
|——————Node:assignment_expression Text: set_mid_ret = set_mid(fd1, mid)
|———————Node:identifier Text: set_mid_ret
|———————Node:= Text: =
|———————Node:call_expression Text: set_mid(fd1, mid)
|————————Node:identifier Text: set_mid
|————————Node:argument_list Text: (fd1, mid)
|—————————Node:( Text: (
|—————————Node:identifier Text: fd1
|—————————Node:, Text: ,
|—————————Node:identifier Text: mid
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(set_mid_ret, EOK);
|——————Node:call_expression Text: EXPECT_EQ(set_mid_ret, EOK)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (set_mid_ret, EOK)
|————————Node:( Text: (
|————————Node:identifier Text: set_mid_ret
|————————Node:, Text: ,
|————————Node:identifier Text: EOK
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: n = write(fd1, msg, 12);
|——————Node:assignment_expression Text: n = write(fd1, msg, 12)
|———————Node:identifier Text: n
|———————Node:= Text: =
|———————Node:call_expression Text: write(fd1, msg, 12)
|————————Node:identifier Text: write
|————————Node:argument_list Text: (fd1, msg, 12)
|—————————Node:( Text: (
|—————————Node:identifier Text: fd1
|—————————Node:, Text: ,
|—————————Node:identifier Text: msg
|—————————Node:, Text: ,
|—————————Node:number_literal Text: 12
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(n, 12);
|——————Node:call_expression Text: EXPECT_EQ(n, 12)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (n, 12)
|————————Node:( Text: (
|————————Node:identifier Text: n
|————————Node:, Text: ,
|————————Node:number_literal Text: 12
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:declaration Text: void* exit_ptr1;
|——————Node:primitive_type Text: void
|——————Node:pointer_declarator Text: * exit_ptr1
|———————Node:* Text: *
|———————Node:identifier Text: exit_ptr1
|——————Node:; Text: ;
|—————Node:expression_statement Text: pthread_join(thread1, &exit_ptr1);
|——————Node:call_expression Text: pthread_join(thread1, &exit_ptr1)
|———————Node:identifier Text: pthread_join
|———————Node:argument_list Text: (thread1, &exit_ptr1)
|————————Node:( Text: (
|————————Node:identifier Text: thread1
|————————Node:, Text: ,
|————————Node:pointer_expression Text: &exit_ptr1
|—————————Node:& Text: &
|—————————Node:identifier Text: exit_ptr1
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(exit_ptr1, msg1);
|——————Node:call_expression Text: EXPECT_EQ(exit_ptr1, msg1)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (exit_ptr1, msg1)
|————————Node:( Text: (
|————————Node:identifier Text: exit_ptr1
|————————Node:, Text: ,
|————————Node:identifier Text: msg1
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: msg1[n] = '\0';
|——————Node:assignment_expression Text: msg1[n] = '\0'
|———————Node:subscript_expression Text: msg1[n]
|————————Node:identifier Text: msg1
|————————Node:subscript_argument_list Text: [n]
|—————————Node:[ Text: [
|—————————Node:identifier Text: n
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:char_literal Text: '\0'
|————————Node:' Text: '
|————————Node:escape_sequence Text: \0
|————————Node:' Text: '
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(std::string(msg1), std::string("test message"));
|——————Node:call_expression Text: EXPECT_EQ(std::string(msg1), std::string("test message"))
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (std::string(msg1), std::string("test message"))
|————————Node:( Text: (
|————————Node:call_expression Text: std::string(msg1)
|—————————Node:qualified_identifier Text: std::string
|——————————Node:namespace_identifier Text: std
|——————————Node::: Text: ::
|——————————Node:identifier Text: string
|—————————Node:argument_list Text: (msg1)
|——————————Node:( Text: (
|——————————Node:identifier Text: msg1
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:call_expression Text: std::string("test message")
|—————————Node:qualified_identifier Text: std::string
|——————————Node:namespace_identifier Text: std
|——————————Node::: Text: ::
|——————————Node:identifier Text: string
|—————————Node:argument_list Text: ("test message")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "test message"
|———————————Node:" Text: "
|———————————Node:string_content Text: test message
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: get_stats_ret = get_stats(fd0, &stats0);
|————Node:assignment_expression Text: get_stats_ret = get_stats(fd0, &stats0)
|—————Node:identifier Text: get_stats_ret
|—————Node:= Text: =
|—————Node:call_expression Text: get_stats(fd0, &stats0)
|——————Node:identifier Text: get_stats
|——————Node:argument_list Text: (fd0, &stats0)
|———————Node:( Text: (
|———————Node:identifier Text: fd0
|———————Node:, Text: ,
|———————Node:pointer_expression Text: &stats0
|————————Node:& Text: &
|————————Node:identifier Text: stats0
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(get_stats_ret, EOK);
|————Node:call_expression Text: EXPECT_EQ(get_stats_ret, EOK)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (get_stats_ret, EOK)
|——————Node:( Text: (
|——————Node:identifier Text: get_stats_ret
|——————Node:, Text: ,
|——————Node:identifier Text: EOK
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (fd1 != -1) {
        get_stats_ret = get_stats(fd1, &stats1);

        EXPECT_EQ(get_stats_ret, EOK);
    }
|————Node:if Text: if
|————Node:condition_clause Text: (fd1 != -1)
|—————Node:( Text: (
|—————Node:binary_expression Text: fd1 != -1
|——————Node:identifier Text: fd1
|——————Node:!= Text: !=
|——————Node:number_literal Text: -1
|—————Node:) Text: )
|————Node:compound_statement Text: {
        get_stats_ret = get_stats(fd1, &stats1);

        EXPECT_EQ(get_stats_ret, EOK);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: get_stats_ret = get_stats(fd1, &stats1);
|——————Node:assignment_expression Text: get_stats_ret = get_stats(fd1, &stats1)
|———————Node:identifier Text: get_stats_ret
|———————Node:= Text: =
|———————Node:call_expression Text: get_stats(fd1, &stats1)
|————————Node:identifier Text: get_stats
|————————Node:argument_list Text: (fd1, &stats1)
|—————————Node:( Text: (
|—————————Node:identifier Text: fd1
|—————————Node:, Text: ,
|—————————Node:pointer_expression Text: &stats1
|——————————Node:& Text: &
|——————————Node:identifier Text: stats1
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(get_stats_ret, EOK);
|——————Node:call_expression Text: EXPECT_EQ(get_stats_ret, EOK)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (get_stats_ret, EOK)
|————————Node:( Text: (
|————————Node:identifier Text: get_stats_ret
|————————Node:, Text: ,
|————————Node:identifier Text: EOK
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: EXPECT_EQ(stats0.transmitted_frames - initial_tx_frames0, 4);
|————Node:call_expression Text: EXPECT_EQ(stats0.transmitted_frames - initial_tx_frames0, 4)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.transmitted_frames - initial_tx_frames0, 4)
|——————Node:( Text: (
|——————Node:binary_expression Text: stats0.transmitted_frames - initial_tx_frames0
|———————Node:field_expression Text: stats0.transmitted_frames
|————————Node:identifier Text: stats0
|————————Node:. Text: .
|————————Node:field_identifier Text: transmitted_frames
|———————Node:- Text: -
|———————Node:identifier Text: initial_tx_frames0
|——————Node:, Text: ,
|——————Node:number_literal Text: 4
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.received_frames - initial_rx_frames0, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.received_frames - initial_rx_frames0, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.received_frames - initial_rx_frames0, 0)
|——————Node:( Text: (
|——————Node:binary_expression Text: stats0.received_frames - initial_rx_frames0
|———————Node:field_expression Text: stats0.received_frames
|————————Node:identifier Text: stats0
|————————Node:. Text: .
|————————Node:field_identifier Text: received_frames
|———————Node:- Text: -
|———————Node:identifier Text: initial_rx_frames0
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.missing_ack - initial_missing_ack0, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.missing_ack - initial_missing_ack0, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.missing_ack - initial_missing_ack0, 0)
|——————Node:( Text: (
|——————Node:binary_expression Text: stats0.missing_ack - initial_missing_ack0
|———————Node:field_expression Text: stats0.missing_ack
|————————Node:identifier Text: stats0
|————————Node:. Text: .
|————————Node:field_identifier Text: missing_ack
|———————Node:- Text: -
|———————Node:identifier Text: initial_missing_ack0
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.total_frame_errors - initial_total_frame_errors0, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.total_frame_errors - initial_total_frame_errors0, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.total_frame_errors - initial_total_frame_errors0, 0)
|——————Node:( Text: (
|——————Node:binary_expression Text: stats0.total_frame_errors - initial_total_frame_errors0
|———————Node:field_expression Text: stats0.total_frame_errors
|————————Node:identifier Text: stats0
|————————Node:. Text: .
|————————Node:field_identifier Text: total_frame_errors
|———————Node:- Text: -
|———————Node:identifier Text: initial_total_frame_errors0
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.hw_receive_overflows - initial_hw_receive_overflows0, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.hw_receive_overflows - initial_hw_receive_overflows0, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.hw_receive_overflows - initial_hw_receive_overflows0, 0)
|——————Node:( Text: (
|——————Node:binary_expression Text: stats0.hw_receive_overflows - initial_hw_receive_overflows0
|———————Node:field_expression Text: stats0.hw_receive_overflows
|————————Node:identifier Text: stats0
|————————Node:. Text: .
|————————Node:field_identifier Text: hw_receive_overflows
|———————Node:- Text: -
|———————Node:identifier Text: initial_hw_receive_overflows0
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.rx_interrupts - initial_rx_interrupts0, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.rx_interrupts - initial_rx_interrupts0, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.rx_interrupts - initial_rx_interrupts0, 0)
|——————Node:( Text: (
|——————Node:binary_expression Text: stats0.rx_interrupts - initial_rx_interrupts0
|———————Node:field_expression Text: stats0.rx_interrupts
|————————Node:identifier Text: stats0
|————————Node:. Text: .
|————————Node:field_identifier Text: rx_interrupts
|———————Node:- Text: -
|———————Node:identifier Text: initial_rx_interrupts0
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.tx_interrupts - initial_tx_interrupts0, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.tx_interrupts - initial_tx_interrupts0, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.tx_interrupts - initial_tx_interrupts0, 0)
|——————Node:( Text: (
|——————Node:binary_expression Text: stats0.tx_interrupts - initial_tx_interrupts0
|———————Node:field_expression Text: stats0.tx_interrupts
|————————Node:identifier Text: stats0
|————————Node:. Text: .
|————————Node:field_identifier Text: tx_interrupts
|———————Node:- Text: -
|———————Node:identifier Text: initial_tx_interrupts0
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.total_interrupts - initial_total_interrupts0, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.total_interrupts - initial_total_interrupts0, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.total_interrupts - initial_total_interrupts0, 0)
|——————Node:( Text: (
|——————Node:binary_expression Text: stats0.total_interrupts - initial_total_interrupts0
|———————Node:field_expression Text: stats0.total_interrupts
|————————Node:identifier Text: stats0
|————————Node:. Text: .
|————————Node:field_identifier Text: total_interrupts
|———————Node:- Text: -
|———————Node:identifier Text: initial_total_interrupts0
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.stuff_errors, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.stuff_errors, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.stuff_errors, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats0.stuff_errors
|———————Node:identifier Text: stats0
|———————Node:. Text: .
|———————Node:field_identifier Text: stuff_errors
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.form_errors, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.form_errors, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.form_errors, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats0.form_errors
|———————Node:identifier Text: stats0
|———————Node:. Text: .
|———————Node:field_identifier Text: form_errors
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.dom_bit_recess_errors, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.dom_bit_recess_errors, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.dom_bit_recess_errors, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats0.dom_bit_recess_errors
|———————Node:identifier Text: stats0
|———————Node:. Text: .
|———————Node:field_identifier Text: dom_bit_recess_errors
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.recess_bit_dom_errors, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.recess_bit_dom_errors, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.recess_bit_dom_errors, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats0.recess_bit_dom_errors
|———————Node:identifier Text: stats0
|———————Node:. Text: .
|———————Node:field_identifier Text: recess_bit_dom_errors
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.parity_errors, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.parity_errors, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.parity_errors, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats0.parity_errors
|———————Node:identifier Text: stats0
|———————Node:. Text: .
|———————Node:field_identifier Text: parity_errors
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.crc_errors, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.crc_errors, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.crc_errors, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats0.crc_errors
|———————Node:identifier Text: stats0
|———————Node:. Text: .
|———————Node:field_identifier Text: crc_errors
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.sw_receive_q_full, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.sw_receive_q_full, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.sw_receive_q_full, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats0.sw_receive_q_full
|———————Node:identifier Text: stats0
|———————Node:. Text: .
|———————Node:field_identifier Text: sw_receive_q_full
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.error_warning_state_count, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.error_warning_state_count, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.error_warning_state_count, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats0.error_warning_state_count
|———————Node:identifier Text: stats0
|———————Node:. Text: .
|———————Node:field_identifier Text: error_warning_state_count
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.error_passive_state_count, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.error_passive_state_count, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.error_passive_state_count, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats0.error_passive_state_count
|———————Node:identifier Text: stats0
|———————Node:. Text: .
|———————Node:field_identifier Text: error_passive_state_count
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.bus_off_state_count, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.bus_off_state_count, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.bus_off_state_count, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats0.bus_off_state_count
|———————Node:identifier Text: stats0
|———————Node:. Text: .
|———————Node:field_identifier Text: bus_off_state_count
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.bus_idle_count, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.bus_idle_count, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.bus_idle_count, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats0.bus_idle_count
|———————Node:identifier Text: stats0
|———————Node:. Text: .
|———————Node:field_identifier Text: bus_idle_count
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.power_down_count, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.power_down_count, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.power_down_count, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats0.power_down_count
|———————Node:identifier Text: stats0
|———————Node:. Text: .
|———————Node:field_identifier Text: power_down_count
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.wake_up_count, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.wake_up_count, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.wake_up_count, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats0.wake_up_count
|———————Node:identifier Text: stats0
|———————Node:. Text: .
|———————Node:field_identifier Text: wake_up_count
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: close(fd0);
|————Node:call_expression Text: close(fd0)
|—————Node:identifier Text: close
|—————Node:argument_list Text: (fd0)
|——————Node:( Text: (
|——————Node:identifier Text: fd0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (fd1 != -1) {
        EXPECT_EQ(stats1.transmitted_frames - initial_tx_frames1, 4);
        EXPECT_EQ(stats1.received_frames - initial_rx_frames1, 0);
        EXPECT_EQ(stats1.missing_ack - initial_missing_ack1, 0);
        EXPECT_EQ(stats1.total_frame_errors - initial_total_frame_errors1, 0);
        EXPECT_EQ(stats1.hw_receive_overflows - initial_hw_receive_overflows1, 0);
        EXPECT_EQ(stats1.rx_interrupts - initial_rx_interrupts1, 0);
        EXPECT_EQ(stats1.tx_interrupts - initial_tx_interrupts1, 0);
        EXPECT_EQ(stats1.total_interrupts - initial_total_interrupts1, 0);

        EXPECT_EQ(stats1.stuff_errors, 0);
        EXPECT_EQ(stats1.form_errors, 0);
        EXPECT_EQ(stats1.dom_bit_recess_errors, 0);
        EXPECT_EQ(stats1.recess_bit_dom_errors, 0);
        EXPECT_EQ(stats1.parity_errors, 0);
        EXPECT_EQ(stats1.crc_errors, 0);
        EXPECT_EQ(stats1.sw_receive_q_full, 0);
        EXPECT_EQ(stats1.error_warning_state_count, 0);
        EXPECT_EQ(stats1.error_passive_state_count, 0);
        EXPECT_EQ(stats1.bus_off_state_count, 0);
        EXPECT_EQ(stats1.bus_idle_count, 0);
        EXPECT_EQ(stats1.power_down_count, 0);
        EXPECT_EQ(stats1.wake_up_count, 0);

        close(fd1);
    }
|————Node:if Text: if
|————Node:condition_clause Text: (fd1 != -1)
|—————Node:( Text: (
|—————Node:binary_expression Text: fd1 != -1
|——————Node:identifier Text: fd1
|——————Node:!= Text: !=
|——————Node:number_literal Text: -1
|—————Node:) Text: )
|————Node:compound_statement Text: {
        EXPECT_EQ(stats1.transmitted_frames - initial_tx_frames1, 4);
        EXPECT_EQ(stats1.received_frames - initial_rx_frames1, 0);
        EXPECT_EQ(stats1.missing_ack - initial_missing_ack1, 0);
        EXPECT_EQ(stats1.total_frame_errors - initial_total_frame_errors1, 0);
        EXPECT_EQ(stats1.hw_receive_overflows - initial_hw_receive_overflows1, 0);
        EXPECT_EQ(stats1.rx_interrupts - initial_rx_interrupts1, 0);
        EXPECT_EQ(stats1.tx_interrupts - initial_tx_interrupts1, 0);
        EXPECT_EQ(stats1.total_interrupts - initial_total_interrupts1, 0);

        EXPECT_EQ(stats1.stuff_errors, 0);
        EXPECT_EQ(stats1.form_errors, 0);
        EXPECT_EQ(stats1.dom_bit_recess_errors, 0);
        EXPECT_EQ(stats1.recess_bit_dom_errors, 0);
        EXPECT_EQ(stats1.parity_errors, 0);
        EXPECT_EQ(stats1.crc_errors, 0);
        EXPECT_EQ(stats1.sw_receive_q_full, 0);
        EXPECT_EQ(stats1.error_warning_state_count, 0);
        EXPECT_EQ(stats1.error_passive_state_count, 0);
        EXPECT_EQ(stats1.bus_off_state_count, 0);
        EXPECT_EQ(stats1.bus_idle_count, 0);
        EXPECT_EQ(stats1.power_down_count, 0);
        EXPECT_EQ(stats1.wake_up_count, 0);

        close(fd1);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: EXPECT_EQ(stats1.transmitted_frames - initial_tx_frames1, 4);
|——————Node:call_expression Text: EXPECT_EQ(stats1.transmitted_frames - initial_tx_frames1, 4)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.transmitted_frames - initial_tx_frames1, 4)
|————————Node:( Text: (
|————————Node:binary_expression Text: stats1.transmitted_frames - initial_tx_frames1
|—————————Node:field_expression Text: stats1.transmitted_frames
|——————————Node:identifier Text: stats1
|——————————Node:. Text: .
|——————————Node:field_identifier Text: transmitted_frames
|—————————Node:- Text: -
|—————————Node:identifier Text: initial_tx_frames1
|————————Node:, Text: ,
|————————Node:number_literal Text: 4
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.received_frames - initial_rx_frames1, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.received_frames - initial_rx_frames1, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.received_frames - initial_rx_frames1, 0)
|————————Node:( Text: (
|————————Node:binary_expression Text: stats1.received_frames - initial_rx_frames1
|—————————Node:field_expression Text: stats1.received_frames
|——————————Node:identifier Text: stats1
|——————————Node:. Text: .
|——————————Node:field_identifier Text: received_frames
|—————————Node:- Text: -
|—————————Node:identifier Text: initial_rx_frames1
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.missing_ack - initial_missing_ack1, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.missing_ack - initial_missing_ack1, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.missing_ack - initial_missing_ack1, 0)
|————————Node:( Text: (
|————————Node:binary_expression Text: stats1.missing_ack - initial_missing_ack1
|—————————Node:field_expression Text: stats1.missing_ack
|——————————Node:identifier Text: stats1
|——————————Node:. Text: .
|——————————Node:field_identifier Text: missing_ack
|—————————Node:- Text: -
|—————————Node:identifier Text: initial_missing_ack1
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.total_frame_errors - initial_total_frame_errors1, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.total_frame_errors - initial_total_frame_errors1, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.total_frame_errors - initial_total_frame_errors1, 0)
|————————Node:( Text: (
|————————Node:binary_expression Text: stats1.total_frame_errors - initial_total_frame_errors1
|—————————Node:field_expression Text: stats1.total_frame_errors
|——————————Node:identifier Text: stats1
|——————————Node:. Text: .
|——————————Node:field_identifier Text: total_frame_errors
|—————————Node:- Text: -
|—————————Node:identifier Text: initial_total_frame_errors1
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.hw_receive_overflows - initial_hw_receive_overflows1, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.hw_receive_overflows - initial_hw_receive_overflows1, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.hw_receive_overflows - initial_hw_receive_overflows1, 0)
|————————Node:( Text: (
|————————Node:binary_expression Text: stats1.hw_receive_overflows - initial_hw_receive_overflows1
|—————————Node:field_expression Text: stats1.hw_receive_overflows
|——————————Node:identifier Text: stats1
|——————————Node:. Text: .
|——————————Node:field_identifier Text: hw_receive_overflows
|—————————Node:- Text: -
|—————————Node:identifier Text: initial_hw_receive_overflows1
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.rx_interrupts - initial_rx_interrupts1, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.rx_interrupts - initial_rx_interrupts1, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.rx_interrupts - initial_rx_interrupts1, 0)
|————————Node:( Text: (
|————————Node:binary_expression Text: stats1.rx_interrupts - initial_rx_interrupts1
|—————————Node:field_expression Text: stats1.rx_interrupts
|——————————Node:identifier Text: stats1
|——————————Node:. Text: .
|——————————Node:field_identifier Text: rx_interrupts
|—————————Node:- Text: -
|—————————Node:identifier Text: initial_rx_interrupts1
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.tx_interrupts - initial_tx_interrupts1, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.tx_interrupts - initial_tx_interrupts1, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.tx_interrupts - initial_tx_interrupts1, 0)
|————————Node:( Text: (
|————————Node:binary_expression Text: stats1.tx_interrupts - initial_tx_interrupts1
|—————————Node:field_expression Text: stats1.tx_interrupts
|——————————Node:identifier Text: stats1
|——————————Node:. Text: .
|——————————Node:field_identifier Text: tx_interrupts
|—————————Node:- Text: -
|—————————Node:identifier Text: initial_tx_interrupts1
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.total_interrupts - initial_total_interrupts1, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.total_interrupts - initial_total_interrupts1, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.total_interrupts - initial_total_interrupts1, 0)
|————————Node:( Text: (
|————————Node:binary_expression Text: stats1.total_interrupts - initial_total_interrupts1
|—————————Node:field_expression Text: stats1.total_interrupts
|——————————Node:identifier Text: stats1
|——————————Node:. Text: .
|——————————Node:field_identifier Text: total_interrupts
|—————————Node:- Text: -
|—————————Node:identifier Text: initial_total_interrupts1
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.stuff_errors, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.stuff_errors, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.stuff_errors, 0)
|————————Node:( Text: (
|————————Node:field_expression Text: stats1.stuff_errors
|—————————Node:identifier Text: stats1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: stuff_errors
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.form_errors, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.form_errors, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.form_errors, 0)
|————————Node:( Text: (
|————————Node:field_expression Text: stats1.form_errors
|—————————Node:identifier Text: stats1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: form_errors
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.dom_bit_recess_errors, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.dom_bit_recess_errors, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.dom_bit_recess_errors, 0)
|————————Node:( Text: (
|————————Node:field_expression Text: stats1.dom_bit_recess_errors
|—————————Node:identifier Text: stats1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: dom_bit_recess_errors
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.recess_bit_dom_errors, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.recess_bit_dom_errors, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.recess_bit_dom_errors, 0)
|————————Node:( Text: (
|————————Node:field_expression Text: stats1.recess_bit_dom_errors
|—————————Node:identifier Text: stats1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: recess_bit_dom_errors
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.parity_errors, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.parity_errors, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.parity_errors, 0)
|————————Node:( Text: (
|————————Node:field_expression Text: stats1.parity_errors
|—————————Node:identifier Text: stats1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: parity_errors
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.crc_errors, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.crc_errors, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.crc_errors, 0)
|————————Node:( Text: (
|————————Node:field_expression Text: stats1.crc_errors
|—————————Node:identifier Text: stats1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: crc_errors
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.sw_receive_q_full, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.sw_receive_q_full, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.sw_receive_q_full, 0)
|————————Node:( Text: (
|————————Node:field_expression Text: stats1.sw_receive_q_full
|—————————Node:identifier Text: stats1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: sw_receive_q_full
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.error_warning_state_count, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.error_warning_state_count, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.error_warning_state_count, 0)
|————————Node:( Text: (
|————————Node:field_expression Text: stats1.error_warning_state_count
|—————————Node:identifier Text: stats1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: error_warning_state_count
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.error_passive_state_count, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.error_passive_state_count, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.error_passive_state_count, 0)
|————————Node:( Text: (
|————————Node:field_expression Text: stats1.error_passive_state_count
|—————————Node:identifier Text: stats1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: error_passive_state_count
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.bus_off_state_count, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.bus_off_state_count, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.bus_off_state_count, 0)
|————————Node:( Text: (
|————————Node:field_expression Text: stats1.bus_off_state_count
|—————————Node:identifier Text: stats1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: bus_off_state_count
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.bus_idle_count, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.bus_idle_count, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.bus_idle_count, 0)
|————————Node:( Text: (
|————————Node:field_expression Text: stats1.bus_idle_count
|—————————Node:identifier Text: stats1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: bus_idle_count
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.power_down_count, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.power_down_count, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.power_down_count, 0)
|————————Node:( Text: (
|————————Node:field_expression Text: stats1.power_down_count
|—————————Node:identifier Text: stats1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: power_down_count
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.wake_up_count, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.wake_up_count, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.wake_up_count, 0)
|————————Node:( Text: (
|————————Node:field_expression Text: stats1.wake_up_count
|—————————Node:identifier Text: stats1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: wake_up_count
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: close(fd1);
|——————Node:call_expression Text: close(fd1)
|———————Node:identifier Text: close
|———————Node:argument_list Text: (fd1)
|————————Node:( Text: (
|————————Node:identifier Text: fd1
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:} Text: }
|—Node:function_definition Text: TEST( IO, SingleSendMultiReceive ) {
    int fd = open(get_device0_tx0().c_str(), O_RDWR);

    EXPECT_NE(fd, -1);

    char msg[] = "test message";
    char wrong_msg[] = "wrong message";

    uint32_t mid = 0xABC;
    uint32_t wrong_mid = 0xAB1;

    char msg0[16], msg1[16];

    receive_loop0_started = false;

    pthread_t thread0;
    pthread_create(&thread0, NULL, &receive_loop0, msg0);

    pthread_t thread1;
    pthread_create(&thread1, NULL, &receive_loop2, msg1);

    while (!receive_loop0_started || !receive_loop2_started) {
        usleep(1000);
    }

    struct can_devctl_stats stats;

    int get_stats_ret = get_stats(fd, &stats);

    EXPECT_EQ(get_stats_ret, EOK);

    uint32_t initial_tx_frames = stats.transmitted_frames;
    uint32_t initial_rx_frames = stats.received_frames;
    uint32_t initial_missing_ack = stats.missing_ack;
    uint32_t initial_total_frame_errors = stats.total_frame_errors;
    uint32_t initial_hw_receive_overflows = stats.hw_receive_overflows;
    uint32_t initial_rx_interrupts = stats.rx_interrupts;
    uint32_t initial_tx_interrupts = stats.tx_interrupts;
    uint32_t initial_total_interrupts = stats.total_interrupts;

    int set_mid_ret = set_mid(fd, wrong_mid);

    EXPECT_EQ(set_mid_ret, EOK);

    int n = write(fd, wrong_msg, 12);

    set_mid_ret = set_mid(fd, mid);

    EXPECT_EQ(set_mid_ret, EOK);

    n = write(fd, msg, 12);

    EXPECT_EQ(n, 12);

    void *exit_ptr0, *exit_ptr1;
    pthread_join(thread0, &exit_ptr0);
    pthread_join(thread1, &exit_ptr1);

    EXPECT_EQ(exit_ptr0, msg0);

    msg0[n] = '\0';

    EXPECT_EQ(std::string(msg0), std::string("test message"));

    EXPECT_EQ(exit_ptr1, msg1);

    msg1[n] = '\0';

    EXPECT_EQ(std::string(msg1), std::string("test message"));

    get_stats_ret = get_stats(fd, &stats);

    EXPECT_EQ(get_stats_ret, EOK);

    EXPECT_EQ(stats.transmitted_frames - initial_tx_frames, 4);
    EXPECT_EQ(stats.received_frames - initial_rx_frames, 0);
    EXPECT_EQ(stats.missing_ack - initial_missing_ack, 0);
    EXPECT_EQ(stats.total_frame_errors - initial_total_frame_errors, 0);
    EXPECT_EQ(stats.hw_receive_overflows - initial_hw_receive_overflows, 0);
    EXPECT_EQ(stats.rx_interrupts - initial_rx_interrupts, 0);
    EXPECT_EQ(stats.tx_interrupts - initial_tx_interrupts, 0);
    EXPECT_EQ(stats.total_interrupts - initial_total_interrupts, 0);

    EXPECT_EQ(stats.stuff_errors, 0);
    EXPECT_EQ(stats.form_errors, 0);
    EXPECT_EQ(stats.dom_bit_recess_errors, 0);
    EXPECT_EQ(stats.recess_bit_dom_errors, 0);
    EXPECT_EQ(stats.parity_errors, 0);
    EXPECT_EQ(stats.crc_errors, 0);
    EXPECT_EQ(stats.sw_receive_q_full, 0);
    EXPECT_EQ(stats.error_warning_state_count, 0);
    EXPECT_EQ(stats.error_passive_state_count, 0);
    EXPECT_EQ(stats.bus_off_state_count, 0);
    EXPECT_EQ(stats.bus_idle_count, 0);
    EXPECT_EQ(stats.power_down_count, 0);
    EXPECT_EQ(stats.wake_up_count, 0);

    close(fd);
}
|——Node:function_declarator Text: TEST( IO, SingleSendMultiReceive )
|———Node:identifier Text: TEST
|———Node:parameter_list Text: ( IO, SingleSendMultiReceive )
|————Node:( Text: (
|————Node:parameter_declaration Text: IO
|—————Node:type_identifier Text: IO
|————Node:, Text: ,
|————Node:parameter_declaration Text: SingleSendMultiReceive
|—————Node:type_identifier Text: SingleSendMultiReceive
|————Node:) Text: )
|——Node:compound_statement Text: {
    int fd = open(get_device0_tx0().c_str(), O_RDWR);

    EXPECT_NE(fd, -1);

    char msg[] = "test message";
    char wrong_msg[] = "wrong message";

    uint32_t mid = 0xABC;
    uint32_t wrong_mid = 0xAB1;

    char msg0[16], msg1[16];

    receive_loop0_started = false;

    pthread_t thread0;
    pthread_create(&thread0, NULL, &receive_loop0, msg0);

    pthread_t thread1;
    pthread_create(&thread1, NULL, &receive_loop2, msg1);

    while (!receive_loop0_started || !receive_loop2_started) {
        usleep(1000);
    }

    struct can_devctl_stats stats;

    int get_stats_ret = get_stats(fd, &stats);

    EXPECT_EQ(get_stats_ret, EOK);

    uint32_t initial_tx_frames = stats.transmitted_frames;
    uint32_t initial_rx_frames = stats.received_frames;
    uint32_t initial_missing_ack = stats.missing_ack;
    uint32_t initial_total_frame_errors = stats.total_frame_errors;
    uint32_t initial_hw_receive_overflows = stats.hw_receive_overflows;
    uint32_t initial_rx_interrupts = stats.rx_interrupts;
    uint32_t initial_tx_interrupts = stats.tx_interrupts;
    uint32_t initial_total_interrupts = stats.total_interrupts;

    int set_mid_ret = set_mid(fd, wrong_mid);

    EXPECT_EQ(set_mid_ret, EOK);

    int n = write(fd, wrong_msg, 12);

    set_mid_ret = set_mid(fd, mid);

    EXPECT_EQ(set_mid_ret, EOK);

    n = write(fd, msg, 12);

    EXPECT_EQ(n, 12);

    void *exit_ptr0, *exit_ptr1;
    pthread_join(thread0, &exit_ptr0);
    pthread_join(thread1, &exit_ptr1);

    EXPECT_EQ(exit_ptr0, msg0);

    msg0[n] = '\0';

    EXPECT_EQ(std::string(msg0), std::string("test message"));

    EXPECT_EQ(exit_ptr1, msg1);

    msg1[n] = '\0';

    EXPECT_EQ(std::string(msg1), std::string("test message"));

    get_stats_ret = get_stats(fd, &stats);

    EXPECT_EQ(get_stats_ret, EOK);

    EXPECT_EQ(stats.transmitted_frames - initial_tx_frames, 4);
    EXPECT_EQ(stats.received_frames - initial_rx_frames, 0);
    EXPECT_EQ(stats.missing_ack - initial_missing_ack, 0);
    EXPECT_EQ(stats.total_frame_errors - initial_total_frame_errors, 0);
    EXPECT_EQ(stats.hw_receive_overflows - initial_hw_receive_overflows, 0);
    EXPECT_EQ(stats.rx_interrupts - initial_rx_interrupts, 0);
    EXPECT_EQ(stats.tx_interrupts - initial_tx_interrupts, 0);
    EXPECT_EQ(stats.total_interrupts - initial_total_interrupts, 0);

    EXPECT_EQ(stats.stuff_errors, 0);
    EXPECT_EQ(stats.form_errors, 0);
    EXPECT_EQ(stats.dom_bit_recess_errors, 0);
    EXPECT_EQ(stats.recess_bit_dom_errors, 0);
    EXPECT_EQ(stats.parity_errors, 0);
    EXPECT_EQ(stats.crc_errors, 0);
    EXPECT_EQ(stats.sw_receive_q_full, 0);
    EXPECT_EQ(stats.error_warning_state_count, 0);
    EXPECT_EQ(stats.error_passive_state_count, 0);
    EXPECT_EQ(stats.bus_off_state_count, 0);
    EXPECT_EQ(stats.bus_idle_count, 0);
    EXPECT_EQ(stats.power_down_count, 0);
    EXPECT_EQ(stats.wake_up_count, 0);

    close(fd);
}
|———Node:{ Text: {
|———Node:declaration Text: int fd = open(get_device0_tx0().c_str(), O_RDWR);
|————Node:primitive_type Text: int
|————Node:init_declarator Text: fd = open(get_device0_tx0().c_str(), O_RDWR)
|—————Node:identifier Text: fd
|—————Node:= Text: =
|—————Node:call_expression Text: open(get_device0_tx0().c_str(), O_RDWR)
|——————Node:identifier Text: open
|——————Node:argument_list Text: (get_device0_tx0().c_str(), O_RDWR)
|———————Node:( Text: (
|———————Node:call_expression Text: get_device0_tx0().c_str()
|————————Node:field_expression Text: get_device0_tx0().c_str
|—————————Node:call_expression Text: get_device0_tx0()
|——————————Node:identifier Text: get_device0_tx0
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:. Text: .
|—————————Node:field_identifier Text: c_str
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:, Text: ,
|———————Node:identifier Text: O_RDWR
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_NE(fd, -1);
|————Node:call_expression Text: EXPECT_NE(fd, -1)
|—————Node:identifier Text: EXPECT_NE
|—————Node:argument_list Text: (fd, -1)
|——————Node:( Text: (
|——————Node:identifier Text: fd
|——————Node:, Text: ,
|——————Node:number_literal Text: -1
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: char msg[] = "test message";
|————Node:primitive_type Text: char
|————Node:init_declarator Text: msg[] = "test message"
|—————Node:array_declarator Text: msg[]
|——————Node:identifier Text: msg
|——————Node:[ Text: [
|——————Node:] Text: ]
|—————Node:= Text: =
|—————Node:string_literal Text: "test message"
|——————Node:" Text: "
|——————Node:string_content Text: test message
|——————Node:" Text: "
|————Node:; Text: ;
|———Node:declaration Text: char wrong_msg[] = "wrong message";
|————Node:primitive_type Text: char
|————Node:init_declarator Text: wrong_msg[] = "wrong message"
|—————Node:array_declarator Text: wrong_msg[]
|——————Node:identifier Text: wrong_msg
|——————Node:[ Text: [
|——————Node:] Text: ]
|—————Node:= Text: =
|—————Node:string_literal Text: "wrong message"
|——————Node:" Text: "
|——————Node:string_content Text: wrong message
|——————Node:" Text: "
|————Node:; Text: ;
|———Node:declaration Text: uint32_t mid = 0xABC;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: mid = 0xABC
|—————Node:identifier Text: mid
|—————Node:= Text: =
|—————Node:number_literal Text: 0xABC
|————Node:; Text: ;
|———Node:declaration Text: uint32_t wrong_mid = 0xAB1;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: wrong_mid = 0xAB1
|—————Node:identifier Text: wrong_mid
|—————Node:= Text: =
|—————Node:number_literal Text: 0xAB1
|————Node:; Text: ;
|———Node:declaration Text: char msg0[16], msg1[16];
|————Node:primitive_type Text: char
|————Node:array_declarator Text: msg0[16]
|—————Node:identifier Text: msg0
|—————Node:[ Text: [
|—————Node:number_literal Text: 16
|—————Node:] Text: ]
|————Node:, Text: ,
|————Node:array_declarator Text: msg1[16]
|—————Node:identifier Text: msg1
|—————Node:[ Text: [
|—————Node:number_literal Text: 16
|—————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: receive_loop0_started = false;
|————Node:assignment_expression Text: receive_loop0_started = false
|—————Node:identifier Text: receive_loop0_started
|—————Node:= Text: =
|—————Node:false Text: false
|————Node:; Text: ;
|———Node:declaration Text: pthread_t thread0;
|————Node:type_identifier Text: pthread_t
|————Node:identifier Text: thread0
|————Node:; Text: ;
|———Node:expression_statement Text: pthread_create(&thread0, NULL, &receive_loop0, msg0);
|————Node:call_expression Text: pthread_create(&thread0, NULL, &receive_loop0, msg0)
|—————Node:identifier Text: pthread_create
|—————Node:argument_list Text: (&thread0, NULL, &receive_loop0, msg0)
|——————Node:( Text: (
|——————Node:pointer_expression Text: &thread0
|———————Node:& Text: &
|———————Node:identifier Text: thread0
|——————Node:, Text: ,
|——————Node:null Text: NULL
|———————Node:NULL Text: NULL
|——————Node:, Text: ,
|——————Node:pointer_expression Text: &receive_loop0
|———————Node:& Text: &
|———————Node:identifier Text: receive_loop0
|——————Node:, Text: ,
|——————Node:identifier Text: msg0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: pthread_t thread1;
|————Node:type_identifier Text: pthread_t
|————Node:identifier Text: thread1
|————Node:; Text: ;
|———Node:expression_statement Text: pthread_create(&thread1, NULL, &receive_loop2, msg1);
|————Node:call_expression Text: pthread_create(&thread1, NULL, &receive_loop2, msg1)
|—————Node:identifier Text: pthread_create
|—————Node:argument_list Text: (&thread1, NULL, &receive_loop2, msg1)
|——————Node:( Text: (
|——————Node:pointer_expression Text: &thread1
|———————Node:& Text: &
|———————Node:identifier Text: thread1
|——————Node:, Text: ,
|——————Node:null Text: NULL
|———————Node:NULL Text: NULL
|——————Node:, Text: ,
|——————Node:pointer_expression Text: &receive_loop2
|———————Node:& Text: &
|———————Node:identifier Text: receive_loop2
|——————Node:, Text: ,
|——————Node:identifier Text: msg1
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:while_statement Text: while (!receive_loop0_started || !receive_loop2_started) {
        usleep(1000);
    }
|————Node:while Text: while
|————Node:condition_clause Text: (!receive_loop0_started || !receive_loop2_started)
|—————Node:( Text: (
|—————Node:binary_expression Text: !receive_loop0_started || !receive_loop2_started
|——————Node:unary_expression Text: !receive_loop0_started
|———————Node:! Text: !
|———————Node:identifier Text: receive_loop0_started
|——————Node:|| Text: ||
|——————Node:unary_expression Text: !receive_loop2_started
|———————Node:! Text: !
|———————Node:identifier Text: receive_loop2_started
|—————Node:) Text: )
|————Node:compound_statement Text: {
        usleep(1000);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: usleep(1000);
|——————Node:call_expression Text: usleep(1000)
|———————Node:identifier Text: usleep
|———————Node:argument_list Text: (1000)
|————————Node:( Text: (
|————————Node:number_literal Text: 1000
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:declaration Text: struct can_devctl_stats stats;
|————Node:struct_specifier Text: struct can_devctl_stats
|—————Node:struct Text: struct
|—————Node:type_identifier Text: can_devctl_stats
|————Node:identifier Text: stats
|————Node:; Text: ;
|———Node:declaration Text: int get_stats_ret = get_stats(fd, &stats);
|————Node:primitive_type Text: int
|————Node:init_declarator Text: get_stats_ret = get_stats(fd, &stats)
|—————Node:identifier Text: get_stats_ret
|—————Node:= Text: =
|—————Node:call_expression Text: get_stats(fd, &stats)
|——————Node:identifier Text: get_stats
|——————Node:argument_list Text: (fd, &stats)
|———————Node:( Text: (
|———————Node:identifier Text: fd
|———————Node:, Text: ,
|———————Node:pointer_expression Text: &stats
|————————Node:& Text: &
|————————Node:identifier Text: stats
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(get_stats_ret, EOK);
|————Node:call_expression Text: EXPECT_EQ(get_stats_ret, EOK)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (get_stats_ret, EOK)
|——————Node:( Text: (
|——————Node:identifier Text: get_stats_ret
|——————Node:, Text: ,
|——————Node:identifier Text: EOK
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_tx_frames = stats.transmitted_frames;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_tx_frames = stats.transmitted_frames
|—————Node:identifier Text: initial_tx_frames
|—————Node:= Text: =
|—————Node:field_expression Text: stats.transmitted_frames
|——————Node:identifier Text: stats
|——————Node:. Text: .
|——————Node:field_identifier Text: transmitted_frames
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_rx_frames = stats.received_frames;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_rx_frames = stats.received_frames
|—————Node:identifier Text: initial_rx_frames
|—————Node:= Text: =
|—————Node:field_expression Text: stats.received_frames
|——————Node:identifier Text: stats
|——————Node:. Text: .
|——————Node:field_identifier Text: received_frames
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_missing_ack = stats.missing_ack;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_missing_ack = stats.missing_ack
|—————Node:identifier Text: initial_missing_ack
|—————Node:= Text: =
|—————Node:field_expression Text: stats.missing_ack
|——————Node:identifier Text: stats
|——————Node:. Text: .
|——————Node:field_identifier Text: missing_ack
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_total_frame_errors = stats.total_frame_errors;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_total_frame_errors = stats.total_frame_errors
|—————Node:identifier Text: initial_total_frame_errors
|—————Node:= Text: =
|—————Node:field_expression Text: stats.total_frame_errors
|——————Node:identifier Text: stats
|——————Node:. Text: .
|——————Node:field_identifier Text: total_frame_errors
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_hw_receive_overflows = stats.hw_receive_overflows;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_hw_receive_overflows = stats.hw_receive_overflows
|—————Node:identifier Text: initial_hw_receive_overflows
|—————Node:= Text: =
|—————Node:field_expression Text: stats.hw_receive_overflows
|——————Node:identifier Text: stats
|——————Node:. Text: .
|——————Node:field_identifier Text: hw_receive_overflows
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_rx_interrupts = stats.rx_interrupts;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_rx_interrupts = stats.rx_interrupts
|—————Node:identifier Text: initial_rx_interrupts
|—————Node:= Text: =
|—————Node:field_expression Text: stats.rx_interrupts
|——————Node:identifier Text: stats
|——————Node:. Text: .
|——————Node:field_identifier Text: rx_interrupts
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_tx_interrupts = stats.tx_interrupts;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_tx_interrupts = stats.tx_interrupts
|—————Node:identifier Text: initial_tx_interrupts
|—————Node:= Text: =
|—————Node:field_expression Text: stats.tx_interrupts
|——————Node:identifier Text: stats
|——————Node:. Text: .
|——————Node:field_identifier Text: tx_interrupts
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_total_interrupts = stats.total_interrupts;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_total_interrupts = stats.total_interrupts
|—————Node:identifier Text: initial_total_interrupts
|—————Node:= Text: =
|—————Node:field_expression Text: stats.total_interrupts
|——————Node:identifier Text: stats
|——————Node:. Text: .
|——————Node:field_identifier Text: total_interrupts
|————Node:; Text: ;
|———Node:declaration Text: int set_mid_ret = set_mid(fd, wrong_mid);
|————Node:primitive_type Text: int
|————Node:init_declarator Text: set_mid_ret = set_mid(fd, wrong_mid)
|—————Node:identifier Text: set_mid_ret
|—————Node:= Text: =
|—————Node:call_expression Text: set_mid(fd, wrong_mid)
|——————Node:identifier Text: set_mid
|——————Node:argument_list Text: (fd, wrong_mid)
|———————Node:( Text: (
|———————Node:identifier Text: fd
|———————Node:, Text: ,
|———————Node:identifier Text: wrong_mid
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(set_mid_ret, EOK);
|————Node:call_expression Text: EXPECT_EQ(set_mid_ret, EOK)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (set_mid_ret, EOK)
|——————Node:( Text: (
|——————Node:identifier Text: set_mid_ret
|——————Node:, Text: ,
|——————Node:identifier Text: EOK
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: int n = write(fd, wrong_msg, 12);
|————Node:primitive_type Text: int
|————Node:init_declarator Text: n = write(fd, wrong_msg, 12)
|—————Node:identifier Text: n
|—————Node:= Text: =
|—————Node:call_expression Text: write(fd, wrong_msg, 12)
|——————Node:identifier Text: write
|——————Node:argument_list Text: (fd, wrong_msg, 12)
|———————Node:( Text: (
|———————Node:identifier Text: fd
|———————Node:, Text: ,
|———————Node:identifier Text: wrong_msg
|———————Node:, Text: ,
|———————Node:number_literal Text: 12
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: set_mid_ret = set_mid(fd, mid);
|————Node:assignment_expression Text: set_mid_ret = set_mid(fd, mid)
|—————Node:identifier Text: set_mid_ret
|—————Node:= Text: =
|—————Node:call_expression Text: set_mid(fd, mid)
|——————Node:identifier Text: set_mid
|——————Node:argument_list Text: (fd, mid)
|———————Node:( Text: (
|———————Node:identifier Text: fd
|———————Node:, Text: ,
|———————Node:identifier Text: mid
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(set_mid_ret, EOK);
|————Node:call_expression Text: EXPECT_EQ(set_mid_ret, EOK)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (set_mid_ret, EOK)
|——————Node:( Text: (
|——————Node:identifier Text: set_mid_ret
|——————Node:, Text: ,
|——————Node:identifier Text: EOK
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: n = write(fd, msg, 12);
|————Node:assignment_expression Text: n = write(fd, msg, 12)
|—————Node:identifier Text: n
|—————Node:= Text: =
|—————Node:call_expression Text: write(fd, msg, 12)
|——————Node:identifier Text: write
|——————Node:argument_list Text: (fd, msg, 12)
|———————Node:( Text: (
|———————Node:identifier Text: fd
|———————Node:, Text: ,
|———————Node:identifier Text: msg
|———————Node:, Text: ,
|———————Node:number_literal Text: 12
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(n, 12);
|————Node:call_expression Text: EXPECT_EQ(n, 12)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (n, 12)
|——————Node:( Text: (
|——————Node:identifier Text: n
|——————Node:, Text: ,
|——————Node:number_literal Text: 12
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: void *exit_ptr0, *exit_ptr1;
|————Node:primitive_type Text: void
|————Node:pointer_declarator Text: *exit_ptr0
|—————Node:* Text: *
|—————Node:identifier Text: exit_ptr0
|————Node:, Text: ,
|————Node:pointer_declarator Text: *exit_ptr1
|—————Node:* Text: *
|—————Node:identifier Text: exit_ptr1
|————Node:; Text: ;
|———Node:expression_statement Text: pthread_join(thread0, &exit_ptr0);
|————Node:call_expression Text: pthread_join(thread0, &exit_ptr0)
|—————Node:identifier Text: pthread_join
|—————Node:argument_list Text: (thread0, &exit_ptr0)
|——————Node:( Text: (
|——————Node:identifier Text: thread0
|——————Node:, Text: ,
|——————Node:pointer_expression Text: &exit_ptr0
|———————Node:& Text: &
|———————Node:identifier Text: exit_ptr0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: pthread_join(thread1, &exit_ptr1);
|————Node:call_expression Text: pthread_join(thread1, &exit_ptr1)
|—————Node:identifier Text: pthread_join
|—————Node:argument_list Text: (thread1, &exit_ptr1)
|——————Node:( Text: (
|——————Node:identifier Text: thread1
|——————Node:, Text: ,
|——————Node:pointer_expression Text: &exit_ptr1
|———————Node:& Text: &
|———————Node:identifier Text: exit_ptr1
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(exit_ptr0, msg0);
|————Node:call_expression Text: EXPECT_EQ(exit_ptr0, msg0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (exit_ptr0, msg0)
|——————Node:( Text: (
|——————Node:identifier Text: exit_ptr0
|——————Node:, Text: ,
|——————Node:identifier Text: msg0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: msg0[n] = '\0';
|————Node:assignment_expression Text: msg0[n] = '\0'
|—————Node:subscript_expression Text: msg0[n]
|——————Node:identifier Text: msg0
|——————Node:subscript_argument_list Text: [n]
|———————Node:[ Text: [
|———————Node:identifier Text: n
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:char_literal Text: '\0'
|——————Node:' Text: '
|——————Node:escape_sequence Text: \0
|——————Node:' Text: '
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(std::string(msg0), std::string("test message"));
|————Node:call_expression Text: EXPECT_EQ(std::string(msg0), std::string("test message"))
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (std::string(msg0), std::string("test message"))
|——————Node:( Text: (
|——————Node:call_expression Text: std::string(msg0)
|———————Node:qualified_identifier Text: std::string
|————————Node:namespace_identifier Text: std
|————————Node::: Text: ::
|————————Node:identifier Text: string
|———————Node:argument_list Text: (msg0)
|————————Node:( Text: (
|————————Node:identifier Text: msg0
|————————Node:) Text: )
|——————Node:, Text: ,
|——————Node:call_expression Text: std::string("test message")
|———————Node:qualified_identifier Text: std::string
|————————Node:namespace_identifier Text: std
|————————Node::: Text: ::
|————————Node:identifier Text: string
|———————Node:argument_list Text: ("test message")
|————————Node:( Text: (
|————————Node:string_literal Text: "test message"
|—————————Node:" Text: "
|—————————Node:string_content Text: test message
|—————————Node:" Text: "
|————————Node:) Text: )
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(exit_ptr1, msg1);
|————Node:call_expression Text: EXPECT_EQ(exit_ptr1, msg1)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (exit_ptr1, msg1)
|——————Node:( Text: (
|——————Node:identifier Text: exit_ptr1
|——————Node:, Text: ,
|——————Node:identifier Text: msg1
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: msg1[n] = '\0';
|————Node:assignment_expression Text: msg1[n] = '\0'
|—————Node:subscript_expression Text: msg1[n]
|——————Node:identifier Text: msg1
|——————Node:subscript_argument_list Text: [n]
|———————Node:[ Text: [
|———————Node:identifier Text: n
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:char_literal Text: '\0'
|——————Node:' Text: '
|——————Node:escape_sequence Text: \0
|——————Node:' Text: '
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(std::string(msg1), std::string("test message"));
|————Node:call_expression Text: EXPECT_EQ(std::string(msg1), std::string("test message"))
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (std::string(msg1), std::string("test message"))
|——————Node:( Text: (
|——————Node:call_expression Text: std::string(msg1)
|———————Node:qualified_identifier Text: std::string
|————————Node:namespace_identifier Text: std
|————————Node::: Text: ::
|————————Node:identifier Text: string
|———————Node:argument_list Text: (msg1)
|————————Node:( Text: (
|————————Node:identifier Text: msg1
|————————Node:) Text: )
|——————Node:, Text: ,
|——————Node:call_expression Text: std::string("test message")
|———————Node:qualified_identifier Text: std::string
|————————Node:namespace_identifier Text: std
|————————Node::: Text: ::
|————————Node:identifier Text: string
|———————Node:argument_list Text: ("test message")
|————————Node:( Text: (
|————————Node:string_literal Text: "test message"
|—————————Node:" Text: "
|—————————Node:string_content Text: test message
|—————————Node:" Text: "
|————————Node:) Text: )
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: get_stats_ret = get_stats(fd, &stats);
|————Node:assignment_expression Text: get_stats_ret = get_stats(fd, &stats)
|—————Node:identifier Text: get_stats_ret
|—————Node:= Text: =
|—————Node:call_expression Text: get_stats(fd, &stats)
|——————Node:identifier Text: get_stats
|——————Node:argument_list Text: (fd, &stats)
|———————Node:( Text: (
|———————Node:identifier Text: fd
|———————Node:, Text: ,
|———————Node:pointer_expression Text: &stats
|————————Node:& Text: &
|————————Node:identifier Text: stats
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(get_stats_ret, EOK);
|————Node:call_expression Text: EXPECT_EQ(get_stats_ret, EOK)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (get_stats_ret, EOK)
|——————Node:( Text: (
|——————Node:identifier Text: get_stats_ret
|——————Node:, Text: ,
|——————Node:identifier Text: EOK
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats.transmitted_frames - initial_tx_frames, 4);
|————Node:call_expression Text: EXPECT_EQ(stats.transmitted_frames - initial_tx_frames, 4)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats.transmitted_frames - initial_tx_frames, 4)
|——————Node:( Text: (
|——————Node:binary_expression Text: stats.transmitted_frames - initial_tx_frames
|———————Node:field_expression Text: stats.transmitted_frames
|————————Node:identifier Text: stats
|————————Node:. Text: .
|————————Node:field_identifier Text: transmitted_frames
|———————Node:- Text: -
|———————Node:identifier Text: initial_tx_frames
|——————Node:, Text: ,
|——————Node:number_literal Text: 4
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats.received_frames - initial_rx_frames, 0);
|————Node:call_expression Text: EXPECT_EQ(stats.received_frames - initial_rx_frames, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats.received_frames - initial_rx_frames, 0)
|——————Node:( Text: (
|——————Node:binary_expression Text: stats.received_frames - initial_rx_frames
|———————Node:field_expression Text: stats.received_frames
|————————Node:identifier Text: stats
|————————Node:. Text: .
|————————Node:field_identifier Text: received_frames
|———————Node:- Text: -
|———————Node:identifier Text: initial_rx_frames
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats.missing_ack - initial_missing_ack, 0);
|————Node:call_expression Text: EXPECT_EQ(stats.missing_ack - initial_missing_ack, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats.missing_ack - initial_missing_ack, 0)
|——————Node:( Text: (
|——————Node:binary_expression Text: stats.missing_ack - initial_missing_ack
|———————Node:field_expression Text: stats.missing_ack
|————————Node:identifier Text: stats
|————————Node:. Text: .
|————————Node:field_identifier Text: missing_ack
|———————Node:- Text: -
|———————Node:identifier Text: initial_missing_ack
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats.total_frame_errors - initial_total_frame_errors, 0);
|————Node:call_expression Text: EXPECT_EQ(stats.total_frame_errors - initial_total_frame_errors, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats.total_frame_errors - initial_total_frame_errors, 0)
|——————Node:( Text: (
|——————Node:binary_expression Text: stats.total_frame_errors - initial_total_frame_errors
|———————Node:field_expression Text: stats.total_frame_errors
|————————Node:identifier Text: stats
|————————Node:. Text: .
|————————Node:field_identifier Text: total_frame_errors
|———————Node:- Text: -
|———————Node:identifier Text: initial_total_frame_errors
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats.hw_receive_overflows - initial_hw_receive_overflows, 0);
|————Node:call_expression Text: EXPECT_EQ(stats.hw_receive_overflows - initial_hw_receive_overflows, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats.hw_receive_overflows - initial_hw_receive_overflows, 0)
|——————Node:( Text: (
|——————Node:binary_expression Text: stats.hw_receive_overflows - initial_hw_receive_overflows
|———————Node:field_expression Text: stats.hw_receive_overflows
|————————Node:identifier Text: stats
|————————Node:. Text: .
|————————Node:field_identifier Text: hw_receive_overflows
|———————Node:- Text: -
|———————Node:identifier Text: initial_hw_receive_overflows
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats.rx_interrupts - initial_rx_interrupts, 0);
|————Node:call_expression Text: EXPECT_EQ(stats.rx_interrupts - initial_rx_interrupts, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats.rx_interrupts - initial_rx_interrupts, 0)
|——————Node:( Text: (
|——————Node:binary_expression Text: stats.rx_interrupts - initial_rx_interrupts
|———————Node:field_expression Text: stats.rx_interrupts
|————————Node:identifier Text: stats
|————————Node:. Text: .
|————————Node:field_identifier Text: rx_interrupts
|———————Node:- Text: -
|———————Node:identifier Text: initial_rx_interrupts
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats.tx_interrupts - initial_tx_interrupts, 0);
|————Node:call_expression Text: EXPECT_EQ(stats.tx_interrupts - initial_tx_interrupts, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats.tx_interrupts - initial_tx_interrupts, 0)
|——————Node:( Text: (
|——————Node:binary_expression Text: stats.tx_interrupts - initial_tx_interrupts
|———————Node:field_expression Text: stats.tx_interrupts
|————————Node:identifier Text: stats
|————————Node:. Text: .
|————————Node:field_identifier Text: tx_interrupts
|———————Node:- Text: -
|———————Node:identifier Text: initial_tx_interrupts
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats.total_interrupts - initial_total_interrupts, 0);
|————Node:call_expression Text: EXPECT_EQ(stats.total_interrupts - initial_total_interrupts, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats.total_interrupts - initial_total_interrupts, 0)
|——————Node:( Text: (
|——————Node:binary_expression Text: stats.total_interrupts - initial_total_interrupts
|———————Node:field_expression Text: stats.total_interrupts
|————————Node:identifier Text: stats
|————————Node:. Text: .
|————————Node:field_identifier Text: total_interrupts
|———————Node:- Text: -
|———————Node:identifier Text: initial_total_interrupts
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats.stuff_errors, 0);
|————Node:call_expression Text: EXPECT_EQ(stats.stuff_errors, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats.stuff_errors, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats.stuff_errors
|———————Node:identifier Text: stats
|———————Node:. Text: .
|———————Node:field_identifier Text: stuff_errors
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats.form_errors, 0);
|————Node:call_expression Text: EXPECT_EQ(stats.form_errors, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats.form_errors, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats.form_errors
|———————Node:identifier Text: stats
|———————Node:. Text: .
|———————Node:field_identifier Text: form_errors
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats.dom_bit_recess_errors, 0);
|————Node:call_expression Text: EXPECT_EQ(stats.dom_bit_recess_errors, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats.dom_bit_recess_errors, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats.dom_bit_recess_errors
|———————Node:identifier Text: stats
|———————Node:. Text: .
|———————Node:field_identifier Text: dom_bit_recess_errors
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats.recess_bit_dom_errors, 0);
|————Node:call_expression Text: EXPECT_EQ(stats.recess_bit_dom_errors, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats.recess_bit_dom_errors, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats.recess_bit_dom_errors
|———————Node:identifier Text: stats
|———————Node:. Text: .
|———————Node:field_identifier Text: recess_bit_dom_errors
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats.parity_errors, 0);
|————Node:call_expression Text: EXPECT_EQ(stats.parity_errors, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats.parity_errors, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats.parity_errors
|———————Node:identifier Text: stats
|———————Node:. Text: .
|———————Node:field_identifier Text: parity_errors
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats.crc_errors, 0);
|————Node:call_expression Text: EXPECT_EQ(stats.crc_errors, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats.crc_errors, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats.crc_errors
|———————Node:identifier Text: stats
|———————Node:. Text: .
|———————Node:field_identifier Text: crc_errors
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats.sw_receive_q_full, 0);
|————Node:call_expression Text: EXPECT_EQ(stats.sw_receive_q_full, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats.sw_receive_q_full, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats.sw_receive_q_full
|———————Node:identifier Text: stats
|———————Node:. Text: .
|———————Node:field_identifier Text: sw_receive_q_full
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats.error_warning_state_count, 0);
|————Node:call_expression Text: EXPECT_EQ(stats.error_warning_state_count, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats.error_warning_state_count, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats.error_warning_state_count
|———————Node:identifier Text: stats
|———————Node:. Text: .
|———————Node:field_identifier Text: error_warning_state_count
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats.error_passive_state_count, 0);
|————Node:call_expression Text: EXPECT_EQ(stats.error_passive_state_count, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats.error_passive_state_count, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats.error_passive_state_count
|———————Node:identifier Text: stats
|———————Node:. Text: .
|———————Node:field_identifier Text: error_passive_state_count
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats.bus_off_state_count, 0);
|————Node:call_expression Text: EXPECT_EQ(stats.bus_off_state_count, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats.bus_off_state_count, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats.bus_off_state_count
|———————Node:identifier Text: stats
|———————Node:. Text: .
|———————Node:field_identifier Text: bus_off_state_count
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats.bus_idle_count, 0);
|————Node:call_expression Text: EXPECT_EQ(stats.bus_idle_count, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats.bus_idle_count, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats.bus_idle_count
|———————Node:identifier Text: stats
|———————Node:. Text: .
|———————Node:field_identifier Text: bus_idle_count
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats.power_down_count, 0);
|————Node:call_expression Text: EXPECT_EQ(stats.power_down_count, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats.power_down_count, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats.power_down_count
|———————Node:identifier Text: stats
|———————Node:. Text: .
|———————Node:field_identifier Text: power_down_count
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats.wake_up_count, 0);
|————Node:call_expression Text: EXPECT_EQ(stats.wake_up_count, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats.wake_up_count, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats.wake_up_count
|———————Node:identifier Text: stats
|———————Node:. Text: .
|———————Node:field_identifier Text: wake_up_count
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: close(fd);
|————Node:call_expression Text: close(fd)
|—————Node:identifier Text: close
|—————Node:argument_list Text: (fd)
|——————Node:( Text: (
|——————Node:identifier Text: fd
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: TEST( IO, SingleSendReceiveAfterManyOpenClose ) {
    // First open and close the file descriptors many times
    const int many = 100000;

    for (int k = 0; k < many; ++k) {
        // Open both tx and rx channels of both devices
        int fd0rx = open(get_device0_rx0().c_str(), O_RDWR);
        int fd0tx = open(get_device0_tx0().c_str(), O_RDWR);

        EXPECT_NE(fd0rx, -1);
        EXPECT_NE(fd0tx, -1);

        int fd1tx = -1;
        int fd1rx = -1;

        if (get_device1_tx0() != std::string("")) {
            fd1rx = open(get_device1_rx0().c_str(), O_RDWR);
            fd1tx = open(get_device1_tx0().c_str(), O_RDWR);

            EXPECT_NE(fd1rx, -1);
            EXPECT_NE(fd1tx, -1);
        }

        // Close both tx and rx channels of both devices

        if (fd0rx != -1) {
            close(fd0rx);
        }

        if (fd0tx != -1) {
            close(fd0tx);
        }

        if (fd1rx != -1) {
            close(fd1rx);
        }

        if (fd1tx != -1) {
            close(fd1tx);
        }
    }

    int fd0 = open(get_device0_tx0().c_str(), O_RDWR);

    EXPECT_NE(fd0, -1);

    int fd1 = -1;

    if (get_device1_tx0() != std::string("")) {
        fd1 = open(get_device1_tx0().c_str(), O_RDWR);

        EXPECT_NE(fd1, -1);
    }

    char msg[] = "test message";
    char wrong_msg[] = "wrong message";

    uint32_t mid = 0xABC;
    uint32_t wrong_mid = 0xAB1;

    char msg0[16], msg1[16];

    receive_loop0_started = receive_loop1_started = false;

    pthread_t thread0;
    pthread_create(&thread0, NULL, &receive_loop0, msg0);

    pthread_t thread1;

    if (fd1 != -1) {
        pthread_create(&thread1, NULL, &receive_loop1, msg1);
    }

    while (!receive_loop0_started) {
        usleep(1000);
    }

    if (fd1 != -1) {
        while (!receive_loop1_started) {
            usleep(1000);
        }
    }

    struct can_devctl_stats stats0, stats1;

    int get_stats_ret = get_stats(fd0, &stats0);

    EXPECT_EQ(get_stats_ret, EOK);

    uint32_t initial_tx_frames0 = stats0.transmitted_frames;
    uint32_t initial_rx_frames0 = stats0.received_frames;
    uint32_t initial_missing_ack0 = stats0.missing_ack;
    uint32_t initial_total_frame_errors0 = stats0.total_frame_errors;
    uint32_t initial_hw_receive_overflows0 = stats0.hw_receive_overflows;
    uint32_t initial_rx_interrupts0 = stats0.rx_interrupts;
    uint32_t initial_tx_interrupts0 = stats0.tx_interrupts;
    uint32_t initial_total_interrupts0 = stats0.total_interrupts;

    uint32_t initial_tx_frames1 = 0;
    uint32_t initial_rx_frames1 = 0;
    uint32_t initial_missing_ack1 = 0;
    uint32_t initial_total_frame_errors1 = 0;
    uint32_t initial_hw_receive_overflows1 = 0;
    uint32_t initial_rx_interrupts1 = 0;
    uint32_t initial_tx_interrupts1 = 0;
    uint32_t initial_total_interrupts1 = 0;

    if (fd1 != -1) {
        get_stats_ret = get_stats(fd1, &stats1);

        EXPECT_EQ(get_stats_ret, EOK);

        initial_tx_frames1 = stats1.transmitted_frames;
        initial_rx_frames1 = stats1.received_frames;
        initial_missing_ack1 = stats1.missing_ack;
        initial_total_frame_errors1 = stats1.total_frame_errors;
        initial_hw_receive_overflows1 = stats1.hw_receive_overflows;
        initial_rx_interrupts1 = stats1.rx_interrupts;
        initial_tx_interrupts1 = stats1.tx_interrupts;
        initial_total_interrupts1 = stats1.total_interrupts;
    }

    int set_mid_ret = set_mid(fd0, wrong_mid);

    EXPECT_EQ(set_mid_ret, EOK);

    int n = write(fd0, wrong_msg, 12);

    set_mid_ret = set_mid(fd0, mid);

    EXPECT_EQ(set_mid_ret, EOK);

    n = write(fd0, msg, 12);

    EXPECT_EQ(n, 12);

    void* exit_ptr0;
    pthread_join(thread0, &exit_ptr0);

    EXPECT_EQ(exit_ptr0, msg0);

    msg0[n] = '\0';

    EXPECT_EQ(std::string(msg0), std::string("test message"));

    usleep(3000);

    if (fd1 != -1) {
        set_mid_ret = set_mid(fd1, wrong_mid);

        EXPECT_EQ(set_mid_ret, EOK);

        n = write(fd1, wrong_msg, 12);

        set_mid_ret = set_mid(fd1, mid);

        EXPECT_EQ(set_mid_ret, EOK);

        n = write(fd1, msg, 12);

        EXPECT_EQ(n, 12);

        void* exit_ptr1;
        pthread_join(thread1, &exit_ptr1);

        EXPECT_EQ(exit_ptr1, msg1);

        msg1[n] = '\0';

        EXPECT_EQ(std::string(msg1), std::string("test message"));
    }

    get_stats_ret = get_stats(fd0, &stats0);

    EXPECT_EQ(get_stats_ret, EOK);

    if (fd1 != -1) {
        get_stats_ret = get_stats(fd1, &stats1);

        EXPECT_EQ(get_stats_ret, EOK);
    }

    EXPECT_EQ(stats0.transmitted_frames - initial_tx_frames0, 4);
    EXPECT_EQ(stats0.received_frames - initial_rx_frames0, 0);
    EXPECT_EQ(stats0.missing_ack - initial_missing_ack0, 0);
    EXPECT_EQ(stats0.total_frame_errors - initial_total_frame_errors0, 0);
    EXPECT_EQ(stats0.hw_receive_overflows - initial_hw_receive_overflows0, 0);
    EXPECT_EQ(stats0.rx_interrupts - initial_rx_interrupts0, 0);
    EXPECT_EQ(stats0.tx_interrupts - initial_tx_interrupts0, 0);
    EXPECT_EQ(stats0.total_interrupts - initial_total_interrupts0, 0);

    EXPECT_EQ(stats0.stuff_errors, 0);
    EXPECT_EQ(stats0.form_errors, 0);
    EXPECT_EQ(stats0.dom_bit_recess_errors, 0);
    EXPECT_EQ(stats0.recess_bit_dom_errors, 0);
    EXPECT_EQ(stats0.parity_errors, 0);
    EXPECT_EQ(stats0.crc_errors, 0);
    EXPECT_EQ(stats0.sw_receive_q_full, 0);
    EXPECT_EQ(stats0.error_warning_state_count, 0);
    EXPECT_EQ(stats0.error_passive_state_count, 0);
    EXPECT_EQ(stats0.bus_off_state_count, 0);
    EXPECT_EQ(stats0.bus_idle_count, 0);
    EXPECT_EQ(stats0.power_down_count, 0);
    EXPECT_EQ(stats0.wake_up_count, 0);

    close(fd0);

    if (fd1 != -1) {
        EXPECT_EQ(stats1.transmitted_frames - initial_tx_frames1, 4);
        EXPECT_EQ(stats1.received_frames - initial_rx_frames1, 0);
        EXPECT_EQ(stats1.missing_ack - initial_missing_ack1, 0);
        EXPECT_EQ(stats1.total_frame_errors - initial_total_frame_errors1, 0);
        EXPECT_EQ(stats1.hw_receive_overflows - initial_hw_receive_overflows1, 0);
        EXPECT_EQ(stats1.rx_interrupts - initial_rx_interrupts1, 0);
        EXPECT_EQ(stats1.tx_interrupts - initial_tx_interrupts1, 0);
        EXPECT_EQ(stats1.total_interrupts - initial_total_interrupts1, 0);

        EXPECT_EQ(stats1.stuff_errors, 0);
        EXPECT_EQ(stats1.form_errors, 0);
        EXPECT_EQ(stats1.dom_bit_recess_errors, 0);
        EXPECT_EQ(stats1.recess_bit_dom_errors, 0);
        EXPECT_EQ(stats1.parity_errors, 0);
        EXPECT_EQ(stats1.crc_errors, 0);
        EXPECT_EQ(stats1.sw_receive_q_full, 0);
        EXPECT_EQ(stats1.error_warning_state_count, 0);
        EXPECT_EQ(stats1.error_passive_state_count, 0);
        EXPECT_EQ(stats1.bus_off_state_count, 0);
        EXPECT_EQ(stats1.bus_idle_count, 0);
        EXPECT_EQ(stats1.power_down_count, 0);
        EXPECT_EQ(stats1.wake_up_count, 0);

        close(fd1);
    }
}
|——Node:function_declarator Text: TEST( IO, SingleSendReceiveAfterManyOpenClose )
|———Node:identifier Text: TEST
|———Node:parameter_list Text: ( IO, SingleSendReceiveAfterManyOpenClose )
|————Node:( Text: (
|————Node:parameter_declaration Text: IO
|—————Node:type_identifier Text: IO
|————Node:, Text: ,
|————Node:parameter_declaration Text: SingleSendReceiveAfterManyOpenClose
|—————Node:type_identifier Text: SingleSendReceiveAfterManyOpenClose
|————Node:) Text: )
|——Node:compound_statement Text: {
    // First open and close the file descriptors many times
    const int many = 100000;

    for (int k = 0; k < many; ++k) {
        // Open both tx and rx channels of both devices
        int fd0rx = open(get_device0_rx0().c_str(), O_RDWR);
        int fd0tx = open(get_device0_tx0().c_str(), O_RDWR);

        EXPECT_NE(fd0rx, -1);
        EXPECT_NE(fd0tx, -1);

        int fd1tx = -1;
        int fd1rx = -1;

        if (get_device1_tx0() != std::string("")) {
            fd1rx = open(get_device1_rx0().c_str(), O_RDWR);
            fd1tx = open(get_device1_tx0().c_str(), O_RDWR);

            EXPECT_NE(fd1rx, -1);
            EXPECT_NE(fd1tx, -1);
        }

        // Close both tx and rx channels of both devices

        if (fd0rx != -1) {
            close(fd0rx);
        }

        if (fd0tx != -1) {
            close(fd0tx);
        }

        if (fd1rx != -1) {
            close(fd1rx);
        }

        if (fd1tx != -1) {
            close(fd1tx);
        }
    }

    int fd0 = open(get_device0_tx0().c_str(), O_RDWR);

    EXPECT_NE(fd0, -1);

    int fd1 = -1;

    if (get_device1_tx0() != std::string("")) {
        fd1 = open(get_device1_tx0().c_str(), O_RDWR);

        EXPECT_NE(fd1, -1);
    }

    char msg[] = "test message";
    char wrong_msg[] = "wrong message";

    uint32_t mid = 0xABC;
    uint32_t wrong_mid = 0xAB1;

    char msg0[16], msg1[16];

    receive_loop0_started = receive_loop1_started = false;

    pthread_t thread0;
    pthread_create(&thread0, NULL, &receive_loop0, msg0);

    pthread_t thread1;

    if (fd1 != -1) {
        pthread_create(&thread1, NULL, &receive_loop1, msg1);
    }

    while (!receive_loop0_started) {
        usleep(1000);
    }

    if (fd1 != -1) {
        while (!receive_loop1_started) {
            usleep(1000);
        }
    }

    struct can_devctl_stats stats0, stats1;

    int get_stats_ret = get_stats(fd0, &stats0);

    EXPECT_EQ(get_stats_ret, EOK);

    uint32_t initial_tx_frames0 = stats0.transmitted_frames;
    uint32_t initial_rx_frames0 = stats0.received_frames;
    uint32_t initial_missing_ack0 = stats0.missing_ack;
    uint32_t initial_total_frame_errors0 = stats0.total_frame_errors;
    uint32_t initial_hw_receive_overflows0 = stats0.hw_receive_overflows;
    uint32_t initial_rx_interrupts0 = stats0.rx_interrupts;
    uint32_t initial_tx_interrupts0 = stats0.tx_interrupts;
    uint32_t initial_total_interrupts0 = stats0.total_interrupts;

    uint32_t initial_tx_frames1 = 0;
    uint32_t initial_rx_frames1 = 0;
    uint32_t initial_missing_ack1 = 0;
    uint32_t initial_total_frame_errors1 = 0;
    uint32_t initial_hw_receive_overflows1 = 0;
    uint32_t initial_rx_interrupts1 = 0;
    uint32_t initial_tx_interrupts1 = 0;
    uint32_t initial_total_interrupts1 = 0;

    if (fd1 != -1) {
        get_stats_ret = get_stats(fd1, &stats1);

        EXPECT_EQ(get_stats_ret, EOK);

        initial_tx_frames1 = stats1.transmitted_frames;
        initial_rx_frames1 = stats1.received_frames;
        initial_missing_ack1 = stats1.missing_ack;
        initial_total_frame_errors1 = stats1.total_frame_errors;
        initial_hw_receive_overflows1 = stats1.hw_receive_overflows;
        initial_rx_interrupts1 = stats1.rx_interrupts;
        initial_tx_interrupts1 = stats1.tx_interrupts;
        initial_total_interrupts1 = stats1.total_interrupts;
    }

    int set_mid_ret = set_mid(fd0, wrong_mid);

    EXPECT_EQ(set_mid_ret, EOK);

    int n = write(fd0, wrong_msg, 12);

    set_mid_ret = set_mid(fd0, mid);

    EXPECT_EQ(set_mid_ret, EOK);

    n = write(fd0, msg, 12);

    EXPECT_EQ(n, 12);

    void* exit_ptr0;
    pthread_join(thread0, &exit_ptr0);

    EXPECT_EQ(exit_ptr0, msg0);

    msg0[n] = '\0';

    EXPECT_EQ(std::string(msg0), std::string("test message"));

    usleep(3000);

    if (fd1 != -1) {
        set_mid_ret = set_mid(fd1, wrong_mid);

        EXPECT_EQ(set_mid_ret, EOK);

        n = write(fd1, wrong_msg, 12);

        set_mid_ret = set_mid(fd1, mid);

        EXPECT_EQ(set_mid_ret, EOK);

        n = write(fd1, msg, 12);

        EXPECT_EQ(n, 12);

        void* exit_ptr1;
        pthread_join(thread1, &exit_ptr1);

        EXPECT_EQ(exit_ptr1, msg1);

        msg1[n] = '\0';

        EXPECT_EQ(std::string(msg1), std::string("test message"));
    }

    get_stats_ret = get_stats(fd0, &stats0);

    EXPECT_EQ(get_stats_ret, EOK);

    if (fd1 != -1) {
        get_stats_ret = get_stats(fd1, &stats1);

        EXPECT_EQ(get_stats_ret, EOK);
    }

    EXPECT_EQ(stats0.transmitted_frames - initial_tx_frames0, 4);
    EXPECT_EQ(stats0.received_frames - initial_rx_frames0, 0);
    EXPECT_EQ(stats0.missing_ack - initial_missing_ack0, 0);
    EXPECT_EQ(stats0.total_frame_errors - initial_total_frame_errors0, 0);
    EXPECT_EQ(stats0.hw_receive_overflows - initial_hw_receive_overflows0, 0);
    EXPECT_EQ(stats0.rx_interrupts - initial_rx_interrupts0, 0);
    EXPECT_EQ(stats0.tx_interrupts - initial_tx_interrupts0, 0);
    EXPECT_EQ(stats0.total_interrupts - initial_total_interrupts0, 0);

    EXPECT_EQ(stats0.stuff_errors, 0);
    EXPECT_EQ(stats0.form_errors, 0);
    EXPECT_EQ(stats0.dom_bit_recess_errors, 0);
    EXPECT_EQ(stats0.recess_bit_dom_errors, 0);
    EXPECT_EQ(stats0.parity_errors, 0);
    EXPECT_EQ(stats0.crc_errors, 0);
    EXPECT_EQ(stats0.sw_receive_q_full, 0);
    EXPECT_EQ(stats0.error_warning_state_count, 0);
    EXPECT_EQ(stats0.error_passive_state_count, 0);
    EXPECT_EQ(stats0.bus_off_state_count, 0);
    EXPECT_EQ(stats0.bus_idle_count, 0);
    EXPECT_EQ(stats0.power_down_count, 0);
    EXPECT_EQ(stats0.wake_up_count, 0);

    close(fd0);

    if (fd1 != -1) {
        EXPECT_EQ(stats1.transmitted_frames - initial_tx_frames1, 4);
        EXPECT_EQ(stats1.received_frames - initial_rx_frames1, 0);
        EXPECT_EQ(stats1.missing_ack - initial_missing_ack1, 0);
        EXPECT_EQ(stats1.total_frame_errors - initial_total_frame_errors1, 0);
        EXPECT_EQ(stats1.hw_receive_overflows - initial_hw_receive_overflows1, 0);
        EXPECT_EQ(stats1.rx_interrupts - initial_rx_interrupts1, 0);
        EXPECT_EQ(stats1.tx_interrupts - initial_tx_interrupts1, 0);
        EXPECT_EQ(stats1.total_interrupts - initial_total_interrupts1, 0);

        EXPECT_EQ(stats1.stuff_errors, 0);
        EXPECT_EQ(stats1.form_errors, 0);
        EXPECT_EQ(stats1.dom_bit_recess_errors, 0);
        EXPECT_EQ(stats1.recess_bit_dom_errors, 0);
        EXPECT_EQ(stats1.parity_errors, 0);
        EXPECT_EQ(stats1.crc_errors, 0);
        EXPECT_EQ(stats1.sw_receive_q_full, 0);
        EXPECT_EQ(stats1.error_warning_state_count, 0);
        EXPECT_EQ(stats1.error_passive_state_count, 0);
        EXPECT_EQ(stats1.bus_off_state_count, 0);
        EXPECT_EQ(stats1.bus_idle_count, 0);
        EXPECT_EQ(stats1.power_down_count, 0);
        EXPECT_EQ(stats1.wake_up_count, 0);

        close(fd1);
    }
}
|———Node:{ Text: {
|———Node:comment
|———Node:declaration Text: const int many = 100000;
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: int
|————Node:init_declarator Text: many = 100000
|—————Node:identifier Text: many
|—————Node:= Text: =
|—————Node:number_literal Text: 100000
|————Node:; Text: ;
|———Node:for_statement Text: for (int k = 0; k < many; ++k) {
        // Open both tx and rx channels of both devices
        int fd0rx = open(get_device0_rx0().c_str(), O_RDWR);
        int fd0tx = open(get_device0_tx0().c_str(), O_RDWR);

        EXPECT_NE(fd0rx, -1);
        EXPECT_NE(fd0tx, -1);

        int fd1tx = -1;
        int fd1rx = -1;

        if (get_device1_tx0() != std::string("")) {
            fd1rx = open(get_device1_rx0().c_str(), O_RDWR);
            fd1tx = open(get_device1_tx0().c_str(), O_RDWR);

            EXPECT_NE(fd1rx, -1);
            EXPECT_NE(fd1tx, -1);
        }

        // Close both tx and rx channels of both devices

        if (fd0rx != -1) {
            close(fd0rx);
        }

        if (fd0tx != -1) {
            close(fd0tx);
        }

        if (fd1rx != -1) {
            close(fd1rx);
        }

        if (fd1tx != -1) {
            close(fd1tx);
        }
    }
|————Node:for Text: for
|————Node:( Text: (
|————Node:declaration Text: int k = 0;
|—————Node:primitive_type Text: int
|—————Node:init_declarator Text: k = 0
|——————Node:identifier Text: k
|——————Node:= Text: =
|——————Node:number_literal Text: 0
|—————Node:; Text: ;
|————Node:binary_expression Text: k < many
|—————Node:identifier Text: k
|—————Node:< Text: <
|—————Node:identifier Text: many
|————Node:; Text: ;
|————Node:update_expression Text: ++k
|—————Node:++ Text: ++
|—————Node:identifier Text: k
|————Node:) Text: )
|————Node:compound_statement Text: {
        // Open both tx and rx channels of both devices
        int fd0rx = open(get_device0_rx0().c_str(), O_RDWR);
        int fd0tx = open(get_device0_tx0().c_str(), O_RDWR);

        EXPECT_NE(fd0rx, -1);
        EXPECT_NE(fd0tx, -1);

        int fd1tx = -1;
        int fd1rx = -1;

        if (get_device1_tx0() != std::string("")) {
            fd1rx = open(get_device1_rx0().c_str(), O_RDWR);
            fd1tx = open(get_device1_tx0().c_str(), O_RDWR);

            EXPECT_NE(fd1rx, -1);
            EXPECT_NE(fd1tx, -1);
        }

        // Close both tx and rx channels of both devices

        if (fd0rx != -1) {
            close(fd0rx);
        }

        if (fd0tx != -1) {
            close(fd0tx);
        }

        if (fd1rx != -1) {
            close(fd1rx);
        }

        if (fd1tx != -1) {
            close(fd1tx);
        }
    }
|—————Node:{ Text: {
|—————Node:comment
|—————Node:declaration Text: int fd0rx = open(get_device0_rx0().c_str(), O_RDWR);
|——————Node:primitive_type Text: int
|——————Node:init_declarator Text: fd0rx = open(get_device0_rx0().c_str(), O_RDWR)
|———————Node:identifier Text: fd0rx
|———————Node:= Text: =
|———————Node:call_expression Text: open(get_device0_rx0().c_str(), O_RDWR)
|————————Node:identifier Text: open
|————————Node:argument_list Text: (get_device0_rx0().c_str(), O_RDWR)
|—————————Node:( Text: (
|—————————Node:call_expression Text: get_device0_rx0().c_str()
|——————————Node:field_expression Text: get_device0_rx0().c_str
|———————————Node:call_expression Text: get_device0_rx0()
|————————————Node:identifier Text: get_device0_rx0
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:. Text: .
|———————————Node:field_identifier Text: c_str
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:identifier Text: O_RDWR
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:declaration Text: int fd0tx = open(get_device0_tx0().c_str(), O_RDWR);
|——————Node:primitive_type Text: int
|——————Node:init_declarator Text: fd0tx = open(get_device0_tx0().c_str(), O_RDWR)
|———————Node:identifier Text: fd0tx
|———————Node:= Text: =
|———————Node:call_expression Text: open(get_device0_tx0().c_str(), O_RDWR)
|————————Node:identifier Text: open
|————————Node:argument_list Text: (get_device0_tx0().c_str(), O_RDWR)
|—————————Node:( Text: (
|—————————Node:call_expression Text: get_device0_tx0().c_str()
|——————————Node:field_expression Text: get_device0_tx0().c_str
|———————————Node:call_expression Text: get_device0_tx0()
|————————————Node:identifier Text: get_device0_tx0
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:. Text: .
|———————————Node:field_identifier Text: c_str
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:identifier Text: O_RDWR
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_NE(fd0rx, -1);
|——————Node:call_expression Text: EXPECT_NE(fd0rx, -1)
|———————Node:identifier Text: EXPECT_NE
|———————Node:argument_list Text: (fd0rx, -1)
|————————Node:( Text: (
|————————Node:identifier Text: fd0rx
|————————Node:, Text: ,
|————————Node:number_literal Text: -1
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_NE(fd0tx, -1);
|——————Node:call_expression Text: EXPECT_NE(fd0tx, -1)
|———————Node:identifier Text: EXPECT_NE
|———————Node:argument_list Text: (fd0tx, -1)
|————————Node:( Text: (
|————————Node:identifier Text: fd0tx
|————————Node:, Text: ,
|————————Node:number_literal Text: -1
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:declaration Text: int fd1tx = -1;
|——————Node:primitive_type Text: int
|——————Node:init_declarator Text: fd1tx = -1
|———————Node:identifier Text: fd1tx
|———————Node:= Text: =
|———————Node:number_literal Text: -1
|——————Node:; Text: ;
|—————Node:declaration Text: int fd1rx = -1;
|——————Node:primitive_type Text: int
|——————Node:init_declarator Text: fd1rx = -1
|———————Node:identifier Text: fd1rx
|———————Node:= Text: =
|———————Node:number_literal Text: -1
|——————Node:; Text: ;
|—————Node:if_statement Text: if (get_device1_tx0() != std::string("")) {
            fd1rx = open(get_device1_rx0().c_str(), O_RDWR);
            fd1tx = open(get_device1_tx0().c_str(), O_RDWR);

            EXPECT_NE(fd1rx, -1);
            EXPECT_NE(fd1tx, -1);
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (get_device1_tx0() != std::string(""))
|———————Node:( Text: (
|———————Node:binary_expression Text: get_device1_tx0() != std::string("")
|————————Node:call_expression Text: get_device1_tx0()
|—————————Node:identifier Text: get_device1_tx0
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:!= Text: !=
|————————Node:call_expression Text: std::string("")
|—————————Node:qualified_identifier Text: std::string
|——————————Node:namespace_identifier Text: std
|——————————Node::: Text: ::
|——————————Node:identifier Text: string
|—————————Node:argument_list Text: ("")
|——————————Node:( Text: (
|——————————Node:string_literal Text: ""
|———————————Node:" Text: "
|———————————Node:" Text: "
|——————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            fd1rx = open(get_device1_rx0().c_str(), O_RDWR);
            fd1tx = open(get_device1_tx0().c_str(), O_RDWR);

            EXPECT_NE(fd1rx, -1);
            EXPECT_NE(fd1tx, -1);
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: fd1rx = open(get_device1_rx0().c_str(), O_RDWR);
|————————Node:assignment_expression Text: fd1rx = open(get_device1_rx0().c_str(), O_RDWR)
|—————————Node:identifier Text: fd1rx
|—————————Node:= Text: =
|—————————Node:call_expression Text: open(get_device1_rx0().c_str(), O_RDWR)
|——————————Node:identifier Text: open
|——————————Node:argument_list Text: (get_device1_rx0().c_str(), O_RDWR)
|———————————Node:( Text: (
|———————————Node:call_expression Text: get_device1_rx0().c_str()
|————————————Node:field_expression Text: get_device1_rx0().c_str
|—————————————Node:call_expression Text: get_device1_rx0()
|——————————————Node:identifier Text: get_device1_rx0
|——————————————Node:argument_list Text: ()
|———————————————Node:( Text: (
|———————————————Node:) Text: )
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: c_str
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:, Text: ,
|———————————Node:identifier Text: O_RDWR
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: fd1tx = open(get_device1_tx0().c_str(), O_RDWR);
|————————Node:assignment_expression Text: fd1tx = open(get_device1_tx0().c_str(), O_RDWR)
|—————————Node:identifier Text: fd1tx
|—————————Node:= Text: =
|—————————Node:call_expression Text: open(get_device1_tx0().c_str(), O_RDWR)
|——————————Node:identifier Text: open
|——————————Node:argument_list Text: (get_device1_tx0().c_str(), O_RDWR)
|———————————Node:( Text: (
|———————————Node:call_expression Text: get_device1_tx0().c_str()
|————————————Node:field_expression Text: get_device1_tx0().c_str
|—————————————Node:call_expression Text: get_device1_tx0()
|——————————————Node:identifier Text: get_device1_tx0
|——————————————Node:argument_list Text: ()
|———————————————Node:( Text: (
|———————————————Node:) Text: )
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: c_str
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:, Text: ,
|———————————Node:identifier Text: O_RDWR
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: EXPECT_NE(fd1rx, -1);
|————————Node:call_expression Text: EXPECT_NE(fd1rx, -1)
|—————————Node:identifier Text: EXPECT_NE
|—————————Node:argument_list Text: (fd1rx, -1)
|——————————Node:( Text: (
|——————————Node:identifier Text: fd1rx
|——————————Node:, Text: ,
|——————————Node:number_literal Text: -1
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: EXPECT_NE(fd1tx, -1);
|————————Node:call_expression Text: EXPECT_NE(fd1tx, -1)
|—————————Node:identifier Text: EXPECT_NE
|—————————Node:argument_list Text: (fd1tx, -1)
|——————————Node:( Text: (
|——————————Node:identifier Text: fd1tx
|——————————Node:, Text: ,
|——————————Node:number_literal Text: -1
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:comment
|—————Node:if_statement Text: if (fd0rx != -1) {
            close(fd0rx);
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (fd0rx != -1)
|———————Node:( Text: (
|———————Node:binary_expression Text: fd0rx != -1
|————————Node:identifier Text: fd0rx
|————————Node:!= Text: !=
|————————Node:number_literal Text: -1
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            close(fd0rx);
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: close(fd0rx);
|————————Node:call_expression Text: close(fd0rx)
|—————————Node:identifier Text: close
|—————————Node:argument_list Text: (fd0rx)
|——————————Node:( Text: (
|——————————Node:identifier Text: fd0rx
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:if_statement Text: if (fd0tx != -1) {
            close(fd0tx);
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (fd0tx != -1)
|———————Node:( Text: (
|———————Node:binary_expression Text: fd0tx != -1
|————————Node:identifier Text: fd0tx
|————————Node:!= Text: !=
|————————Node:number_literal Text: -1
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            close(fd0tx);
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: close(fd0tx);
|————————Node:call_expression Text: close(fd0tx)
|—————————Node:identifier Text: close
|—————————Node:argument_list Text: (fd0tx)
|——————————Node:( Text: (
|——————————Node:identifier Text: fd0tx
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:if_statement Text: if (fd1rx != -1) {
            close(fd1rx);
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (fd1rx != -1)
|———————Node:( Text: (
|———————Node:binary_expression Text: fd1rx != -1
|————————Node:identifier Text: fd1rx
|————————Node:!= Text: !=
|————————Node:number_literal Text: -1
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            close(fd1rx);
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: close(fd1rx);
|————————Node:call_expression Text: close(fd1rx)
|—————————Node:identifier Text: close
|—————————Node:argument_list Text: (fd1rx)
|——————————Node:( Text: (
|——————————Node:identifier Text: fd1rx
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:if_statement Text: if (fd1tx != -1) {
            close(fd1tx);
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (fd1tx != -1)
|———————Node:( Text: (
|———————Node:binary_expression Text: fd1tx != -1
|————————Node:identifier Text: fd1tx
|————————Node:!= Text: !=
|————————Node:number_literal Text: -1
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            close(fd1tx);
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: close(fd1tx);
|————————Node:call_expression Text: close(fd1tx)
|—————————Node:identifier Text: close
|—————————Node:argument_list Text: (fd1tx)
|——————————Node:( Text: (
|——————————Node:identifier Text: fd1tx
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:declaration Text: int fd0 = open(get_device0_tx0().c_str(), O_RDWR);
|————Node:primitive_type Text: int
|————Node:init_declarator Text: fd0 = open(get_device0_tx0().c_str(), O_RDWR)
|—————Node:identifier Text: fd0
|—————Node:= Text: =
|—————Node:call_expression Text: open(get_device0_tx0().c_str(), O_RDWR)
|——————Node:identifier Text: open
|——————Node:argument_list Text: (get_device0_tx0().c_str(), O_RDWR)
|———————Node:( Text: (
|———————Node:call_expression Text: get_device0_tx0().c_str()
|————————Node:field_expression Text: get_device0_tx0().c_str
|—————————Node:call_expression Text: get_device0_tx0()
|——————————Node:identifier Text: get_device0_tx0
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:. Text: .
|—————————Node:field_identifier Text: c_str
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:, Text: ,
|———————Node:identifier Text: O_RDWR
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_NE(fd0, -1);
|————Node:call_expression Text: EXPECT_NE(fd0, -1)
|—————Node:identifier Text: EXPECT_NE
|—————Node:argument_list Text: (fd0, -1)
|——————Node:( Text: (
|——————Node:identifier Text: fd0
|——————Node:, Text: ,
|——————Node:number_literal Text: -1
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: int fd1 = -1;
|————Node:primitive_type Text: int
|————Node:init_declarator Text: fd1 = -1
|—————Node:identifier Text: fd1
|—————Node:= Text: =
|—————Node:number_literal Text: -1
|————Node:; Text: ;
|———Node:if_statement Text: if (get_device1_tx0() != std::string("")) {
        fd1 = open(get_device1_tx0().c_str(), O_RDWR);

        EXPECT_NE(fd1, -1);
    }
|————Node:if Text: if
|————Node:condition_clause Text: (get_device1_tx0() != std::string(""))
|—————Node:( Text: (
|—————Node:binary_expression Text: get_device1_tx0() != std::string("")
|——————Node:call_expression Text: get_device1_tx0()
|———————Node:identifier Text: get_device1_tx0
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:!= Text: !=
|——————Node:call_expression Text: std::string("")
|———————Node:qualified_identifier Text: std::string
|————————Node:namespace_identifier Text: std
|————————Node::: Text: ::
|————————Node:identifier Text: string
|———————Node:argument_list Text: ("")
|————————Node:( Text: (
|————————Node:string_literal Text: ""
|—————————Node:" Text: "
|—————————Node:" Text: "
|————————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        fd1 = open(get_device1_tx0().c_str(), O_RDWR);

        EXPECT_NE(fd1, -1);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: fd1 = open(get_device1_tx0().c_str(), O_RDWR);
|——————Node:assignment_expression Text: fd1 = open(get_device1_tx0().c_str(), O_RDWR)
|———————Node:identifier Text: fd1
|———————Node:= Text: =
|———————Node:call_expression Text: open(get_device1_tx0().c_str(), O_RDWR)
|————————Node:identifier Text: open
|————————Node:argument_list Text: (get_device1_tx0().c_str(), O_RDWR)
|—————————Node:( Text: (
|—————————Node:call_expression Text: get_device1_tx0().c_str()
|——————————Node:field_expression Text: get_device1_tx0().c_str
|———————————Node:call_expression Text: get_device1_tx0()
|————————————Node:identifier Text: get_device1_tx0
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:. Text: .
|———————————Node:field_identifier Text: c_str
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:identifier Text: O_RDWR
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_NE(fd1, -1);
|——————Node:call_expression Text: EXPECT_NE(fd1, -1)
|———————Node:identifier Text: EXPECT_NE
|———————Node:argument_list Text: (fd1, -1)
|————————Node:( Text: (
|————————Node:identifier Text: fd1
|————————Node:, Text: ,
|————————Node:number_literal Text: -1
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:declaration Text: char msg[] = "test message";
|————Node:primitive_type Text: char
|————Node:init_declarator Text: msg[] = "test message"
|—————Node:array_declarator Text: msg[]
|——————Node:identifier Text: msg
|——————Node:[ Text: [
|——————Node:] Text: ]
|—————Node:= Text: =
|—————Node:string_literal Text: "test message"
|——————Node:" Text: "
|——————Node:string_content Text: test message
|——————Node:" Text: "
|————Node:; Text: ;
|———Node:declaration Text: char wrong_msg[] = "wrong message";
|————Node:primitive_type Text: char
|————Node:init_declarator Text: wrong_msg[] = "wrong message"
|—————Node:array_declarator Text: wrong_msg[]
|——————Node:identifier Text: wrong_msg
|——————Node:[ Text: [
|——————Node:] Text: ]
|—————Node:= Text: =
|—————Node:string_literal Text: "wrong message"
|——————Node:" Text: "
|——————Node:string_content Text: wrong message
|——————Node:" Text: "
|————Node:; Text: ;
|———Node:declaration Text: uint32_t mid = 0xABC;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: mid = 0xABC
|—————Node:identifier Text: mid
|—————Node:= Text: =
|—————Node:number_literal Text: 0xABC
|————Node:; Text: ;
|———Node:declaration Text: uint32_t wrong_mid = 0xAB1;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: wrong_mid = 0xAB1
|—————Node:identifier Text: wrong_mid
|—————Node:= Text: =
|—————Node:number_literal Text: 0xAB1
|————Node:; Text: ;
|———Node:declaration Text: char msg0[16], msg1[16];
|————Node:primitive_type Text: char
|————Node:array_declarator Text: msg0[16]
|—————Node:identifier Text: msg0
|—————Node:[ Text: [
|—————Node:number_literal Text: 16
|—————Node:] Text: ]
|————Node:, Text: ,
|————Node:array_declarator Text: msg1[16]
|—————Node:identifier Text: msg1
|—————Node:[ Text: [
|—————Node:number_literal Text: 16
|—————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: receive_loop0_started = receive_loop1_started = false;
|————Node:assignment_expression Text: receive_loop0_started = receive_loop1_started = false
|—————Node:identifier Text: receive_loop0_started
|—————Node:= Text: =
|—————Node:assignment_expression Text: receive_loop1_started = false
|——————Node:identifier Text: receive_loop1_started
|——————Node:= Text: =
|——————Node:false Text: false
|————Node:; Text: ;
|———Node:declaration Text: pthread_t thread0;
|————Node:type_identifier Text: pthread_t
|————Node:identifier Text: thread0
|————Node:; Text: ;
|———Node:expression_statement Text: pthread_create(&thread0, NULL, &receive_loop0, msg0);
|————Node:call_expression Text: pthread_create(&thread0, NULL, &receive_loop0, msg0)
|—————Node:identifier Text: pthread_create
|—————Node:argument_list Text: (&thread0, NULL, &receive_loop0, msg0)
|——————Node:( Text: (
|——————Node:pointer_expression Text: &thread0
|———————Node:& Text: &
|———————Node:identifier Text: thread0
|——————Node:, Text: ,
|——————Node:null Text: NULL
|———————Node:NULL Text: NULL
|——————Node:, Text: ,
|——————Node:pointer_expression Text: &receive_loop0
|———————Node:& Text: &
|———————Node:identifier Text: receive_loop0
|——————Node:, Text: ,
|——————Node:identifier Text: msg0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: pthread_t thread1;
|————Node:type_identifier Text: pthread_t
|————Node:identifier Text: thread1
|————Node:; Text: ;
|———Node:if_statement Text: if (fd1 != -1) {
        pthread_create(&thread1, NULL, &receive_loop1, msg1);
    }
|————Node:if Text: if
|————Node:condition_clause Text: (fd1 != -1)
|—————Node:( Text: (
|—————Node:binary_expression Text: fd1 != -1
|——————Node:identifier Text: fd1
|——————Node:!= Text: !=
|——————Node:number_literal Text: -1
|—————Node:) Text: )
|————Node:compound_statement Text: {
        pthread_create(&thread1, NULL, &receive_loop1, msg1);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: pthread_create(&thread1, NULL, &receive_loop1, msg1);
|——————Node:call_expression Text: pthread_create(&thread1, NULL, &receive_loop1, msg1)
|———————Node:identifier Text: pthread_create
|———————Node:argument_list Text: (&thread1, NULL, &receive_loop1, msg1)
|————————Node:( Text: (
|————————Node:pointer_expression Text: &thread1
|—————————Node:& Text: &
|—————————Node:identifier Text: thread1
|————————Node:, Text: ,
|————————Node:null Text: NULL
|—————————Node:NULL Text: NULL
|————————Node:, Text: ,
|————————Node:pointer_expression Text: &receive_loop1
|—————————Node:& Text: &
|—————————Node:identifier Text: receive_loop1
|————————Node:, Text: ,
|————————Node:identifier Text: msg1
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:while_statement Text: while (!receive_loop0_started) {
        usleep(1000);
    }
|————Node:while Text: while
|————Node:condition_clause Text: (!receive_loop0_started)
|—————Node:( Text: (
|—————Node:unary_expression Text: !receive_loop0_started
|——————Node:! Text: !
|——————Node:identifier Text: receive_loop0_started
|—————Node:) Text: )
|————Node:compound_statement Text: {
        usleep(1000);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: usleep(1000);
|——————Node:call_expression Text: usleep(1000)
|———————Node:identifier Text: usleep
|———————Node:argument_list Text: (1000)
|————————Node:( Text: (
|————————Node:number_literal Text: 1000
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:if_statement Text: if (fd1 != -1) {
        while (!receive_loop1_started) {
            usleep(1000);
        }
    }
|————Node:if Text: if
|————Node:condition_clause Text: (fd1 != -1)
|—————Node:( Text: (
|—————Node:binary_expression Text: fd1 != -1
|——————Node:identifier Text: fd1
|——————Node:!= Text: !=
|——————Node:number_literal Text: -1
|—————Node:) Text: )
|————Node:compound_statement Text: {
        while (!receive_loop1_started) {
            usleep(1000);
        }
    }
|—————Node:{ Text: {
|—————Node:while_statement Text: while (!receive_loop1_started) {
            usleep(1000);
        }
|——————Node:while Text: while
|——————Node:condition_clause Text: (!receive_loop1_started)
|———————Node:( Text: (
|———————Node:unary_expression Text: !receive_loop1_started
|————————Node:! Text: !
|————————Node:identifier Text: receive_loop1_started
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            usleep(1000);
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: usleep(1000);
|————————Node:call_expression Text: usleep(1000)
|—————————Node:identifier Text: usleep
|—————————Node:argument_list Text: (1000)
|——————————Node:( Text: (
|——————————Node:number_literal Text: 1000
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:declaration Text: struct can_devctl_stats stats0, stats1;
|————Node:struct_specifier Text: struct can_devctl_stats
|—————Node:struct Text: struct
|—————Node:type_identifier Text: can_devctl_stats
|————Node:identifier Text: stats0
|————Node:, Text: ,
|————Node:identifier Text: stats1
|————Node:; Text: ;
|———Node:declaration Text: int get_stats_ret = get_stats(fd0, &stats0);
|————Node:primitive_type Text: int
|————Node:init_declarator Text: get_stats_ret = get_stats(fd0, &stats0)
|—————Node:identifier Text: get_stats_ret
|—————Node:= Text: =
|—————Node:call_expression Text: get_stats(fd0, &stats0)
|——————Node:identifier Text: get_stats
|——————Node:argument_list Text: (fd0, &stats0)
|———————Node:( Text: (
|———————Node:identifier Text: fd0
|———————Node:, Text: ,
|———————Node:pointer_expression Text: &stats0
|————————Node:& Text: &
|————————Node:identifier Text: stats0
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(get_stats_ret, EOK);
|————Node:call_expression Text: EXPECT_EQ(get_stats_ret, EOK)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (get_stats_ret, EOK)
|——————Node:( Text: (
|——————Node:identifier Text: get_stats_ret
|——————Node:, Text: ,
|——————Node:identifier Text: EOK
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_tx_frames0 = stats0.transmitted_frames;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_tx_frames0 = stats0.transmitted_frames
|—————Node:identifier Text: initial_tx_frames0
|—————Node:= Text: =
|—————Node:field_expression Text: stats0.transmitted_frames
|——————Node:identifier Text: stats0
|——————Node:. Text: .
|——————Node:field_identifier Text: transmitted_frames
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_rx_frames0 = stats0.received_frames;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_rx_frames0 = stats0.received_frames
|—————Node:identifier Text: initial_rx_frames0
|—————Node:= Text: =
|—————Node:field_expression Text: stats0.received_frames
|——————Node:identifier Text: stats0
|——————Node:. Text: .
|——————Node:field_identifier Text: received_frames
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_missing_ack0 = stats0.missing_ack;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_missing_ack0 = stats0.missing_ack
|—————Node:identifier Text: initial_missing_ack0
|—————Node:= Text: =
|—————Node:field_expression Text: stats0.missing_ack
|——————Node:identifier Text: stats0
|——————Node:. Text: .
|——————Node:field_identifier Text: missing_ack
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_total_frame_errors0 = stats0.total_frame_errors;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_total_frame_errors0 = stats0.total_frame_errors
|—————Node:identifier Text: initial_total_frame_errors0
|—————Node:= Text: =
|—————Node:field_expression Text: stats0.total_frame_errors
|——————Node:identifier Text: stats0
|——————Node:. Text: .
|——————Node:field_identifier Text: total_frame_errors
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_hw_receive_overflows0 = stats0.hw_receive_overflows;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_hw_receive_overflows0 = stats0.hw_receive_overflows
|—————Node:identifier Text: initial_hw_receive_overflows0
|—————Node:= Text: =
|—————Node:field_expression Text: stats0.hw_receive_overflows
|——————Node:identifier Text: stats0
|——————Node:. Text: .
|——————Node:field_identifier Text: hw_receive_overflows
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_rx_interrupts0 = stats0.rx_interrupts;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_rx_interrupts0 = stats0.rx_interrupts
|—————Node:identifier Text: initial_rx_interrupts0
|—————Node:= Text: =
|—————Node:field_expression Text: stats0.rx_interrupts
|——————Node:identifier Text: stats0
|——————Node:. Text: .
|——————Node:field_identifier Text: rx_interrupts
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_tx_interrupts0 = stats0.tx_interrupts;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_tx_interrupts0 = stats0.tx_interrupts
|—————Node:identifier Text: initial_tx_interrupts0
|—————Node:= Text: =
|—————Node:field_expression Text: stats0.tx_interrupts
|——————Node:identifier Text: stats0
|——————Node:. Text: .
|——————Node:field_identifier Text: tx_interrupts
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_total_interrupts0 = stats0.total_interrupts;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_total_interrupts0 = stats0.total_interrupts
|—————Node:identifier Text: initial_total_interrupts0
|—————Node:= Text: =
|—————Node:field_expression Text: stats0.total_interrupts
|——————Node:identifier Text: stats0
|——————Node:. Text: .
|——————Node:field_identifier Text: total_interrupts
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_tx_frames1 = 0;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_tx_frames1 = 0
|—————Node:identifier Text: initial_tx_frames1
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_rx_frames1 = 0;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_rx_frames1 = 0
|—————Node:identifier Text: initial_rx_frames1
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_missing_ack1 = 0;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_missing_ack1 = 0
|—————Node:identifier Text: initial_missing_ack1
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_total_frame_errors1 = 0;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_total_frame_errors1 = 0
|—————Node:identifier Text: initial_total_frame_errors1
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_hw_receive_overflows1 = 0;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_hw_receive_overflows1 = 0
|—————Node:identifier Text: initial_hw_receive_overflows1
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_rx_interrupts1 = 0;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_rx_interrupts1 = 0
|—————Node:identifier Text: initial_rx_interrupts1
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_tx_interrupts1 = 0;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_tx_interrupts1 = 0
|—————Node:identifier Text: initial_tx_interrupts1
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint32_t initial_total_interrupts1 = 0;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: initial_total_interrupts1 = 0
|—————Node:identifier Text: initial_total_interrupts1
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:if_statement Text: if (fd1 != -1) {
        get_stats_ret = get_stats(fd1, &stats1);

        EXPECT_EQ(get_stats_ret, EOK);

        initial_tx_frames1 = stats1.transmitted_frames;
        initial_rx_frames1 = stats1.received_frames;
        initial_missing_ack1 = stats1.missing_ack;
        initial_total_frame_errors1 = stats1.total_frame_errors;
        initial_hw_receive_overflows1 = stats1.hw_receive_overflows;
        initial_rx_interrupts1 = stats1.rx_interrupts;
        initial_tx_interrupts1 = stats1.tx_interrupts;
        initial_total_interrupts1 = stats1.total_interrupts;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (fd1 != -1)
|—————Node:( Text: (
|—————Node:binary_expression Text: fd1 != -1
|——————Node:identifier Text: fd1
|——————Node:!= Text: !=
|——————Node:number_literal Text: -1
|—————Node:) Text: )
|————Node:compound_statement Text: {
        get_stats_ret = get_stats(fd1, &stats1);

        EXPECT_EQ(get_stats_ret, EOK);

        initial_tx_frames1 = stats1.transmitted_frames;
        initial_rx_frames1 = stats1.received_frames;
        initial_missing_ack1 = stats1.missing_ack;
        initial_total_frame_errors1 = stats1.total_frame_errors;
        initial_hw_receive_overflows1 = stats1.hw_receive_overflows;
        initial_rx_interrupts1 = stats1.rx_interrupts;
        initial_tx_interrupts1 = stats1.tx_interrupts;
        initial_total_interrupts1 = stats1.total_interrupts;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: get_stats_ret = get_stats(fd1, &stats1);
|——————Node:assignment_expression Text: get_stats_ret = get_stats(fd1, &stats1)
|———————Node:identifier Text: get_stats_ret
|———————Node:= Text: =
|———————Node:call_expression Text: get_stats(fd1, &stats1)
|————————Node:identifier Text: get_stats
|————————Node:argument_list Text: (fd1, &stats1)
|—————————Node:( Text: (
|—————————Node:identifier Text: fd1
|—————————Node:, Text: ,
|—————————Node:pointer_expression Text: &stats1
|——————————Node:& Text: &
|——————————Node:identifier Text: stats1
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(get_stats_ret, EOK);
|——————Node:call_expression Text: EXPECT_EQ(get_stats_ret, EOK)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (get_stats_ret, EOK)
|————————Node:( Text: (
|————————Node:identifier Text: get_stats_ret
|————————Node:, Text: ,
|————————Node:identifier Text: EOK
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: initial_tx_frames1 = stats1.transmitted_frames;
|——————Node:assignment_expression Text: initial_tx_frames1 = stats1.transmitted_frames
|———————Node:identifier Text: initial_tx_frames1
|———————Node:= Text: =
|———————Node:field_expression Text: stats1.transmitted_frames
|————————Node:identifier Text: stats1
|————————Node:. Text: .
|————————Node:field_identifier Text: transmitted_frames
|——————Node:; Text: ;
|—————Node:expression_statement Text: initial_rx_frames1 = stats1.received_frames;
|——————Node:assignment_expression Text: initial_rx_frames1 = stats1.received_frames
|———————Node:identifier Text: initial_rx_frames1
|———————Node:= Text: =
|———————Node:field_expression Text: stats1.received_frames
|————————Node:identifier Text: stats1
|————————Node:. Text: .
|————————Node:field_identifier Text: received_frames
|——————Node:; Text: ;
|—————Node:expression_statement Text: initial_missing_ack1 = stats1.missing_ack;
|——————Node:assignment_expression Text: initial_missing_ack1 = stats1.missing_ack
|———————Node:identifier Text: initial_missing_ack1
|———————Node:= Text: =
|———————Node:field_expression Text: stats1.missing_ack
|————————Node:identifier Text: stats1
|————————Node:. Text: .
|————————Node:field_identifier Text: missing_ack
|——————Node:; Text: ;
|—————Node:expression_statement Text: initial_total_frame_errors1 = stats1.total_frame_errors;
|——————Node:assignment_expression Text: initial_total_frame_errors1 = stats1.total_frame_errors
|———————Node:identifier Text: initial_total_frame_errors1
|———————Node:= Text: =
|———————Node:field_expression Text: stats1.total_frame_errors
|————————Node:identifier Text: stats1
|————————Node:. Text: .
|————————Node:field_identifier Text: total_frame_errors
|——————Node:; Text: ;
|—————Node:expression_statement Text: initial_hw_receive_overflows1 = stats1.hw_receive_overflows;
|——————Node:assignment_expression Text: initial_hw_receive_overflows1 = stats1.hw_receive_overflows
|———————Node:identifier Text: initial_hw_receive_overflows1
|———————Node:= Text: =
|———————Node:field_expression Text: stats1.hw_receive_overflows
|————————Node:identifier Text: stats1
|————————Node:. Text: .
|————————Node:field_identifier Text: hw_receive_overflows
|——————Node:; Text: ;
|—————Node:expression_statement Text: initial_rx_interrupts1 = stats1.rx_interrupts;
|——————Node:assignment_expression Text: initial_rx_interrupts1 = stats1.rx_interrupts
|———————Node:identifier Text: initial_rx_interrupts1
|———————Node:= Text: =
|———————Node:field_expression Text: stats1.rx_interrupts
|————————Node:identifier Text: stats1
|————————Node:. Text: .
|————————Node:field_identifier Text: rx_interrupts
|——————Node:; Text: ;
|—————Node:expression_statement Text: initial_tx_interrupts1 = stats1.tx_interrupts;
|——————Node:assignment_expression Text: initial_tx_interrupts1 = stats1.tx_interrupts
|———————Node:identifier Text: initial_tx_interrupts1
|———————Node:= Text: =
|———————Node:field_expression Text: stats1.tx_interrupts
|————————Node:identifier Text: stats1
|————————Node:. Text: .
|————————Node:field_identifier Text: tx_interrupts
|——————Node:; Text: ;
|—————Node:expression_statement Text: initial_total_interrupts1 = stats1.total_interrupts;
|——————Node:assignment_expression Text: initial_total_interrupts1 = stats1.total_interrupts
|———————Node:identifier Text: initial_total_interrupts1
|———————Node:= Text: =
|———————Node:field_expression Text: stats1.total_interrupts
|————————Node:identifier Text: stats1
|————————Node:. Text: .
|————————Node:field_identifier Text: total_interrupts
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:declaration Text: int set_mid_ret = set_mid(fd0, wrong_mid);
|————Node:primitive_type Text: int
|————Node:init_declarator Text: set_mid_ret = set_mid(fd0, wrong_mid)
|—————Node:identifier Text: set_mid_ret
|—————Node:= Text: =
|—————Node:call_expression Text: set_mid(fd0, wrong_mid)
|——————Node:identifier Text: set_mid
|——————Node:argument_list Text: (fd0, wrong_mid)
|———————Node:( Text: (
|———————Node:identifier Text: fd0
|———————Node:, Text: ,
|———————Node:identifier Text: wrong_mid
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(set_mid_ret, EOK);
|————Node:call_expression Text: EXPECT_EQ(set_mid_ret, EOK)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (set_mid_ret, EOK)
|——————Node:( Text: (
|——————Node:identifier Text: set_mid_ret
|——————Node:, Text: ,
|——————Node:identifier Text: EOK
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: int n = write(fd0, wrong_msg, 12);
|————Node:primitive_type Text: int
|————Node:init_declarator Text: n = write(fd0, wrong_msg, 12)
|—————Node:identifier Text: n
|—————Node:= Text: =
|—————Node:call_expression Text: write(fd0, wrong_msg, 12)
|——————Node:identifier Text: write
|——————Node:argument_list Text: (fd0, wrong_msg, 12)
|———————Node:( Text: (
|———————Node:identifier Text: fd0
|———————Node:, Text: ,
|———————Node:identifier Text: wrong_msg
|———————Node:, Text: ,
|———————Node:number_literal Text: 12
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: set_mid_ret = set_mid(fd0, mid);
|————Node:assignment_expression Text: set_mid_ret = set_mid(fd0, mid)
|—————Node:identifier Text: set_mid_ret
|—————Node:= Text: =
|—————Node:call_expression Text: set_mid(fd0, mid)
|——————Node:identifier Text: set_mid
|——————Node:argument_list Text: (fd0, mid)
|———————Node:( Text: (
|———————Node:identifier Text: fd0
|———————Node:, Text: ,
|———————Node:identifier Text: mid
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(set_mid_ret, EOK);
|————Node:call_expression Text: EXPECT_EQ(set_mid_ret, EOK)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (set_mid_ret, EOK)
|——————Node:( Text: (
|——————Node:identifier Text: set_mid_ret
|——————Node:, Text: ,
|——————Node:identifier Text: EOK
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: n = write(fd0, msg, 12);
|————Node:assignment_expression Text: n = write(fd0, msg, 12)
|—————Node:identifier Text: n
|—————Node:= Text: =
|—————Node:call_expression Text: write(fd0, msg, 12)
|——————Node:identifier Text: write
|——————Node:argument_list Text: (fd0, msg, 12)
|———————Node:( Text: (
|———————Node:identifier Text: fd0
|———————Node:, Text: ,
|———————Node:identifier Text: msg
|———————Node:, Text: ,
|———————Node:number_literal Text: 12
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(n, 12);
|————Node:call_expression Text: EXPECT_EQ(n, 12)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (n, 12)
|——————Node:( Text: (
|——————Node:identifier Text: n
|——————Node:, Text: ,
|——————Node:number_literal Text: 12
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: void* exit_ptr0;
|————Node:primitive_type Text: void
|————Node:pointer_declarator Text: * exit_ptr0
|—————Node:* Text: *
|—————Node:identifier Text: exit_ptr0
|————Node:; Text: ;
|———Node:expression_statement Text: pthread_join(thread0, &exit_ptr0);
|————Node:call_expression Text: pthread_join(thread0, &exit_ptr0)
|—————Node:identifier Text: pthread_join
|—————Node:argument_list Text: (thread0, &exit_ptr0)
|——————Node:( Text: (
|——————Node:identifier Text: thread0
|——————Node:, Text: ,
|——————Node:pointer_expression Text: &exit_ptr0
|———————Node:& Text: &
|———————Node:identifier Text: exit_ptr0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(exit_ptr0, msg0);
|————Node:call_expression Text: EXPECT_EQ(exit_ptr0, msg0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (exit_ptr0, msg0)
|——————Node:( Text: (
|——————Node:identifier Text: exit_ptr0
|——————Node:, Text: ,
|——————Node:identifier Text: msg0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: msg0[n] = '\0';
|————Node:assignment_expression Text: msg0[n] = '\0'
|—————Node:subscript_expression Text: msg0[n]
|——————Node:identifier Text: msg0
|——————Node:subscript_argument_list Text: [n]
|———————Node:[ Text: [
|———————Node:identifier Text: n
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:char_literal Text: '\0'
|——————Node:' Text: '
|——————Node:escape_sequence Text: \0
|——————Node:' Text: '
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(std::string(msg0), std::string("test message"));
|————Node:call_expression Text: EXPECT_EQ(std::string(msg0), std::string("test message"))
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (std::string(msg0), std::string("test message"))
|——————Node:( Text: (
|——————Node:call_expression Text: std::string(msg0)
|———————Node:qualified_identifier Text: std::string
|————————Node:namespace_identifier Text: std
|————————Node::: Text: ::
|————————Node:identifier Text: string
|———————Node:argument_list Text: (msg0)
|————————Node:( Text: (
|————————Node:identifier Text: msg0
|————————Node:) Text: )
|——————Node:, Text: ,
|——————Node:call_expression Text: std::string("test message")
|———————Node:qualified_identifier Text: std::string
|————————Node:namespace_identifier Text: std
|————————Node::: Text: ::
|————————Node:identifier Text: string
|———————Node:argument_list Text: ("test message")
|————————Node:( Text: (
|————————Node:string_literal Text: "test message"
|—————————Node:" Text: "
|—————————Node:string_content Text: test message
|—————————Node:" Text: "
|————————Node:) Text: )
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: usleep(3000);
|————Node:call_expression Text: usleep(3000)
|—————Node:identifier Text: usleep
|—————Node:argument_list Text: (3000)
|——————Node:( Text: (
|——————Node:number_literal Text: 3000
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (fd1 != -1) {
        set_mid_ret = set_mid(fd1, wrong_mid);

        EXPECT_EQ(set_mid_ret, EOK);

        n = write(fd1, wrong_msg, 12);

        set_mid_ret = set_mid(fd1, mid);

        EXPECT_EQ(set_mid_ret, EOK);

        n = write(fd1, msg, 12);

        EXPECT_EQ(n, 12);

        void* exit_ptr1;
        pthread_join(thread1, &exit_ptr1);

        EXPECT_EQ(exit_ptr1, msg1);

        msg1[n] = '\0';

        EXPECT_EQ(std::string(msg1), std::string("test message"));
    }
|————Node:if Text: if
|————Node:condition_clause Text: (fd1 != -1)
|—————Node:( Text: (
|—————Node:binary_expression Text: fd1 != -1
|——————Node:identifier Text: fd1
|——————Node:!= Text: !=
|——————Node:number_literal Text: -1
|—————Node:) Text: )
|————Node:compound_statement Text: {
        set_mid_ret = set_mid(fd1, wrong_mid);

        EXPECT_EQ(set_mid_ret, EOK);

        n = write(fd1, wrong_msg, 12);

        set_mid_ret = set_mid(fd1, mid);

        EXPECT_EQ(set_mid_ret, EOK);

        n = write(fd1, msg, 12);

        EXPECT_EQ(n, 12);

        void* exit_ptr1;
        pthread_join(thread1, &exit_ptr1);

        EXPECT_EQ(exit_ptr1, msg1);

        msg1[n] = '\0';

        EXPECT_EQ(std::string(msg1), std::string("test message"));
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: set_mid_ret = set_mid(fd1, wrong_mid);
|——————Node:assignment_expression Text: set_mid_ret = set_mid(fd1, wrong_mid)
|———————Node:identifier Text: set_mid_ret
|———————Node:= Text: =
|———————Node:call_expression Text: set_mid(fd1, wrong_mid)
|————————Node:identifier Text: set_mid
|————————Node:argument_list Text: (fd1, wrong_mid)
|—————————Node:( Text: (
|—————————Node:identifier Text: fd1
|—————————Node:, Text: ,
|—————————Node:identifier Text: wrong_mid
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(set_mid_ret, EOK);
|——————Node:call_expression Text: EXPECT_EQ(set_mid_ret, EOK)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (set_mid_ret, EOK)
|————————Node:( Text: (
|————————Node:identifier Text: set_mid_ret
|————————Node:, Text: ,
|————————Node:identifier Text: EOK
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: n = write(fd1, wrong_msg, 12);
|——————Node:assignment_expression Text: n = write(fd1, wrong_msg, 12)
|———————Node:identifier Text: n
|———————Node:= Text: =
|———————Node:call_expression Text: write(fd1, wrong_msg, 12)
|————————Node:identifier Text: write
|————————Node:argument_list Text: (fd1, wrong_msg, 12)
|—————————Node:( Text: (
|—————————Node:identifier Text: fd1
|—————————Node:, Text: ,
|—————————Node:identifier Text: wrong_msg
|—————————Node:, Text: ,
|—————————Node:number_literal Text: 12
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: set_mid_ret = set_mid(fd1, mid);
|——————Node:assignment_expression Text: set_mid_ret = set_mid(fd1, mid)
|———————Node:identifier Text: set_mid_ret
|———————Node:= Text: =
|———————Node:call_expression Text: set_mid(fd1, mid)
|————————Node:identifier Text: set_mid
|————————Node:argument_list Text: (fd1, mid)
|—————————Node:( Text: (
|—————————Node:identifier Text: fd1
|—————————Node:, Text: ,
|—————————Node:identifier Text: mid
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(set_mid_ret, EOK);
|——————Node:call_expression Text: EXPECT_EQ(set_mid_ret, EOK)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (set_mid_ret, EOK)
|————————Node:( Text: (
|————————Node:identifier Text: set_mid_ret
|————————Node:, Text: ,
|————————Node:identifier Text: EOK
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: n = write(fd1, msg, 12);
|——————Node:assignment_expression Text: n = write(fd1, msg, 12)
|———————Node:identifier Text: n
|———————Node:= Text: =
|———————Node:call_expression Text: write(fd1, msg, 12)
|————————Node:identifier Text: write
|————————Node:argument_list Text: (fd1, msg, 12)
|—————————Node:( Text: (
|—————————Node:identifier Text: fd1
|—————————Node:, Text: ,
|—————————Node:identifier Text: msg
|—————————Node:, Text: ,
|—————————Node:number_literal Text: 12
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(n, 12);
|——————Node:call_expression Text: EXPECT_EQ(n, 12)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (n, 12)
|————————Node:( Text: (
|————————Node:identifier Text: n
|————————Node:, Text: ,
|————————Node:number_literal Text: 12
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:declaration Text: void* exit_ptr1;
|——————Node:primitive_type Text: void
|——————Node:pointer_declarator Text: * exit_ptr1
|———————Node:* Text: *
|———————Node:identifier Text: exit_ptr1
|——————Node:; Text: ;
|—————Node:expression_statement Text: pthread_join(thread1, &exit_ptr1);
|——————Node:call_expression Text: pthread_join(thread1, &exit_ptr1)
|———————Node:identifier Text: pthread_join
|———————Node:argument_list Text: (thread1, &exit_ptr1)
|————————Node:( Text: (
|————————Node:identifier Text: thread1
|————————Node:, Text: ,
|————————Node:pointer_expression Text: &exit_ptr1
|—————————Node:& Text: &
|—————————Node:identifier Text: exit_ptr1
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(exit_ptr1, msg1);
|——————Node:call_expression Text: EXPECT_EQ(exit_ptr1, msg1)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (exit_ptr1, msg1)
|————————Node:( Text: (
|————————Node:identifier Text: exit_ptr1
|————————Node:, Text: ,
|————————Node:identifier Text: msg1
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: msg1[n] = '\0';
|——————Node:assignment_expression Text: msg1[n] = '\0'
|———————Node:subscript_expression Text: msg1[n]
|————————Node:identifier Text: msg1
|————————Node:subscript_argument_list Text: [n]
|—————————Node:[ Text: [
|—————————Node:identifier Text: n
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:char_literal Text: '\0'
|————————Node:' Text: '
|————————Node:escape_sequence Text: \0
|————————Node:' Text: '
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(std::string(msg1), std::string("test message"));
|——————Node:call_expression Text: EXPECT_EQ(std::string(msg1), std::string("test message"))
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (std::string(msg1), std::string("test message"))
|————————Node:( Text: (
|————————Node:call_expression Text: std::string(msg1)
|—————————Node:qualified_identifier Text: std::string
|——————————Node:namespace_identifier Text: std
|——————————Node::: Text: ::
|——————————Node:identifier Text: string
|—————————Node:argument_list Text: (msg1)
|——————————Node:( Text: (
|——————————Node:identifier Text: msg1
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:call_expression Text: std::string("test message")
|—————————Node:qualified_identifier Text: std::string
|——————————Node:namespace_identifier Text: std
|——————————Node::: Text: ::
|——————————Node:identifier Text: string
|—————————Node:argument_list Text: ("test message")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "test message"
|———————————Node:" Text: "
|———————————Node:string_content Text: test message
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: get_stats_ret = get_stats(fd0, &stats0);
|————Node:assignment_expression Text: get_stats_ret = get_stats(fd0, &stats0)
|—————Node:identifier Text: get_stats_ret
|—————Node:= Text: =
|—————Node:call_expression Text: get_stats(fd0, &stats0)
|——————Node:identifier Text: get_stats
|——————Node:argument_list Text: (fd0, &stats0)
|———————Node:( Text: (
|———————Node:identifier Text: fd0
|———————Node:, Text: ,
|———————Node:pointer_expression Text: &stats0
|————————Node:& Text: &
|————————Node:identifier Text: stats0
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(get_stats_ret, EOK);
|————Node:call_expression Text: EXPECT_EQ(get_stats_ret, EOK)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (get_stats_ret, EOK)
|——————Node:( Text: (
|——————Node:identifier Text: get_stats_ret
|——————Node:, Text: ,
|——————Node:identifier Text: EOK
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (fd1 != -1) {
        get_stats_ret = get_stats(fd1, &stats1);

        EXPECT_EQ(get_stats_ret, EOK);
    }
|————Node:if Text: if
|————Node:condition_clause Text: (fd1 != -1)
|—————Node:( Text: (
|—————Node:binary_expression Text: fd1 != -1
|——————Node:identifier Text: fd1
|——————Node:!= Text: !=
|——————Node:number_literal Text: -1
|—————Node:) Text: )
|————Node:compound_statement Text: {
        get_stats_ret = get_stats(fd1, &stats1);

        EXPECT_EQ(get_stats_ret, EOK);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: get_stats_ret = get_stats(fd1, &stats1);
|——————Node:assignment_expression Text: get_stats_ret = get_stats(fd1, &stats1)
|———————Node:identifier Text: get_stats_ret
|———————Node:= Text: =
|———————Node:call_expression Text: get_stats(fd1, &stats1)
|————————Node:identifier Text: get_stats
|————————Node:argument_list Text: (fd1, &stats1)
|—————————Node:( Text: (
|—————————Node:identifier Text: fd1
|—————————Node:, Text: ,
|—————————Node:pointer_expression Text: &stats1
|——————————Node:& Text: &
|——————————Node:identifier Text: stats1
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(get_stats_ret, EOK);
|——————Node:call_expression Text: EXPECT_EQ(get_stats_ret, EOK)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (get_stats_ret, EOK)
|————————Node:( Text: (
|————————Node:identifier Text: get_stats_ret
|————————Node:, Text: ,
|————————Node:identifier Text: EOK
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: EXPECT_EQ(stats0.transmitted_frames - initial_tx_frames0, 4);
|————Node:call_expression Text: EXPECT_EQ(stats0.transmitted_frames - initial_tx_frames0, 4)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.transmitted_frames - initial_tx_frames0, 4)
|——————Node:( Text: (
|——————Node:binary_expression Text: stats0.transmitted_frames - initial_tx_frames0
|———————Node:field_expression Text: stats0.transmitted_frames
|————————Node:identifier Text: stats0
|————————Node:. Text: .
|————————Node:field_identifier Text: transmitted_frames
|———————Node:- Text: -
|———————Node:identifier Text: initial_tx_frames0
|——————Node:, Text: ,
|——————Node:number_literal Text: 4
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.received_frames - initial_rx_frames0, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.received_frames - initial_rx_frames0, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.received_frames - initial_rx_frames0, 0)
|——————Node:( Text: (
|——————Node:binary_expression Text: stats0.received_frames - initial_rx_frames0
|———————Node:field_expression Text: stats0.received_frames
|————————Node:identifier Text: stats0
|————————Node:. Text: .
|————————Node:field_identifier Text: received_frames
|———————Node:- Text: -
|———————Node:identifier Text: initial_rx_frames0
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.missing_ack - initial_missing_ack0, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.missing_ack - initial_missing_ack0, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.missing_ack - initial_missing_ack0, 0)
|——————Node:( Text: (
|——————Node:binary_expression Text: stats0.missing_ack - initial_missing_ack0
|———————Node:field_expression Text: stats0.missing_ack
|————————Node:identifier Text: stats0
|————————Node:. Text: .
|————————Node:field_identifier Text: missing_ack
|———————Node:- Text: -
|———————Node:identifier Text: initial_missing_ack0
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.total_frame_errors - initial_total_frame_errors0, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.total_frame_errors - initial_total_frame_errors0, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.total_frame_errors - initial_total_frame_errors0, 0)
|——————Node:( Text: (
|——————Node:binary_expression Text: stats0.total_frame_errors - initial_total_frame_errors0
|———————Node:field_expression Text: stats0.total_frame_errors
|————————Node:identifier Text: stats0
|————————Node:. Text: .
|————————Node:field_identifier Text: total_frame_errors
|———————Node:- Text: -
|———————Node:identifier Text: initial_total_frame_errors0
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.hw_receive_overflows - initial_hw_receive_overflows0, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.hw_receive_overflows - initial_hw_receive_overflows0, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.hw_receive_overflows - initial_hw_receive_overflows0, 0)
|——————Node:( Text: (
|——————Node:binary_expression Text: stats0.hw_receive_overflows - initial_hw_receive_overflows0
|———————Node:field_expression Text: stats0.hw_receive_overflows
|————————Node:identifier Text: stats0
|————————Node:. Text: .
|————————Node:field_identifier Text: hw_receive_overflows
|———————Node:- Text: -
|———————Node:identifier Text: initial_hw_receive_overflows0
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.rx_interrupts - initial_rx_interrupts0, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.rx_interrupts - initial_rx_interrupts0, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.rx_interrupts - initial_rx_interrupts0, 0)
|——————Node:( Text: (
|——————Node:binary_expression Text: stats0.rx_interrupts - initial_rx_interrupts0
|———————Node:field_expression Text: stats0.rx_interrupts
|————————Node:identifier Text: stats0
|————————Node:. Text: .
|————————Node:field_identifier Text: rx_interrupts
|———————Node:- Text: -
|———————Node:identifier Text: initial_rx_interrupts0
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.tx_interrupts - initial_tx_interrupts0, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.tx_interrupts - initial_tx_interrupts0, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.tx_interrupts - initial_tx_interrupts0, 0)
|——————Node:( Text: (
|——————Node:binary_expression Text: stats0.tx_interrupts - initial_tx_interrupts0
|———————Node:field_expression Text: stats0.tx_interrupts
|————————Node:identifier Text: stats0
|————————Node:. Text: .
|————————Node:field_identifier Text: tx_interrupts
|———————Node:- Text: -
|———————Node:identifier Text: initial_tx_interrupts0
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.total_interrupts - initial_total_interrupts0, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.total_interrupts - initial_total_interrupts0, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.total_interrupts - initial_total_interrupts0, 0)
|——————Node:( Text: (
|——————Node:binary_expression Text: stats0.total_interrupts - initial_total_interrupts0
|———————Node:field_expression Text: stats0.total_interrupts
|————————Node:identifier Text: stats0
|————————Node:. Text: .
|————————Node:field_identifier Text: total_interrupts
|———————Node:- Text: -
|———————Node:identifier Text: initial_total_interrupts0
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.stuff_errors, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.stuff_errors, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.stuff_errors, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats0.stuff_errors
|———————Node:identifier Text: stats0
|———————Node:. Text: .
|———————Node:field_identifier Text: stuff_errors
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.form_errors, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.form_errors, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.form_errors, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats0.form_errors
|———————Node:identifier Text: stats0
|———————Node:. Text: .
|———————Node:field_identifier Text: form_errors
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.dom_bit_recess_errors, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.dom_bit_recess_errors, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.dom_bit_recess_errors, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats0.dom_bit_recess_errors
|———————Node:identifier Text: stats0
|———————Node:. Text: .
|———————Node:field_identifier Text: dom_bit_recess_errors
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.recess_bit_dom_errors, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.recess_bit_dom_errors, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.recess_bit_dom_errors, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats0.recess_bit_dom_errors
|———————Node:identifier Text: stats0
|———————Node:. Text: .
|———————Node:field_identifier Text: recess_bit_dom_errors
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.parity_errors, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.parity_errors, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.parity_errors, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats0.parity_errors
|———————Node:identifier Text: stats0
|———————Node:. Text: .
|———————Node:field_identifier Text: parity_errors
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.crc_errors, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.crc_errors, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.crc_errors, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats0.crc_errors
|———————Node:identifier Text: stats0
|———————Node:. Text: .
|———————Node:field_identifier Text: crc_errors
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.sw_receive_q_full, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.sw_receive_q_full, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.sw_receive_q_full, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats0.sw_receive_q_full
|———————Node:identifier Text: stats0
|———————Node:. Text: .
|———————Node:field_identifier Text: sw_receive_q_full
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.error_warning_state_count, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.error_warning_state_count, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.error_warning_state_count, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats0.error_warning_state_count
|———————Node:identifier Text: stats0
|———————Node:. Text: .
|———————Node:field_identifier Text: error_warning_state_count
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.error_passive_state_count, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.error_passive_state_count, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.error_passive_state_count, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats0.error_passive_state_count
|———————Node:identifier Text: stats0
|———————Node:. Text: .
|———————Node:field_identifier Text: error_passive_state_count
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.bus_off_state_count, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.bus_off_state_count, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.bus_off_state_count, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats0.bus_off_state_count
|———————Node:identifier Text: stats0
|———————Node:. Text: .
|———————Node:field_identifier Text: bus_off_state_count
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.bus_idle_count, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.bus_idle_count, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.bus_idle_count, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats0.bus_idle_count
|———————Node:identifier Text: stats0
|———————Node:. Text: .
|———————Node:field_identifier Text: bus_idle_count
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.power_down_count, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.power_down_count, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.power_down_count, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats0.power_down_count
|———————Node:identifier Text: stats0
|———————Node:. Text: .
|———————Node:field_identifier Text: power_down_count
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: EXPECT_EQ(stats0.wake_up_count, 0);
|————Node:call_expression Text: EXPECT_EQ(stats0.wake_up_count, 0)
|—————Node:identifier Text: EXPECT_EQ
|—————Node:argument_list Text: (stats0.wake_up_count, 0)
|——————Node:( Text: (
|——————Node:field_expression Text: stats0.wake_up_count
|———————Node:identifier Text: stats0
|———————Node:. Text: .
|———————Node:field_identifier Text: wake_up_count
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: close(fd0);
|————Node:call_expression Text: close(fd0)
|—————Node:identifier Text: close
|—————Node:argument_list Text: (fd0)
|——————Node:( Text: (
|——————Node:identifier Text: fd0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (fd1 != -1) {
        EXPECT_EQ(stats1.transmitted_frames - initial_tx_frames1, 4);
        EXPECT_EQ(stats1.received_frames - initial_rx_frames1, 0);
        EXPECT_EQ(stats1.missing_ack - initial_missing_ack1, 0);
        EXPECT_EQ(stats1.total_frame_errors - initial_total_frame_errors1, 0);
        EXPECT_EQ(stats1.hw_receive_overflows - initial_hw_receive_overflows1, 0);
        EXPECT_EQ(stats1.rx_interrupts - initial_rx_interrupts1, 0);
        EXPECT_EQ(stats1.tx_interrupts - initial_tx_interrupts1, 0);
        EXPECT_EQ(stats1.total_interrupts - initial_total_interrupts1, 0);

        EXPECT_EQ(stats1.stuff_errors, 0);
        EXPECT_EQ(stats1.form_errors, 0);
        EXPECT_EQ(stats1.dom_bit_recess_errors, 0);
        EXPECT_EQ(stats1.recess_bit_dom_errors, 0);
        EXPECT_EQ(stats1.parity_errors, 0);
        EXPECT_EQ(stats1.crc_errors, 0);
        EXPECT_EQ(stats1.sw_receive_q_full, 0);
        EXPECT_EQ(stats1.error_warning_state_count, 0);
        EXPECT_EQ(stats1.error_passive_state_count, 0);
        EXPECT_EQ(stats1.bus_off_state_count, 0);
        EXPECT_EQ(stats1.bus_idle_count, 0);
        EXPECT_EQ(stats1.power_down_count, 0);
        EXPECT_EQ(stats1.wake_up_count, 0);

        close(fd1);
    }
|————Node:if Text: if
|————Node:condition_clause Text: (fd1 != -1)
|—————Node:( Text: (
|—————Node:binary_expression Text: fd1 != -1
|——————Node:identifier Text: fd1
|——————Node:!= Text: !=
|——————Node:number_literal Text: -1
|—————Node:) Text: )
|————Node:compound_statement Text: {
        EXPECT_EQ(stats1.transmitted_frames - initial_tx_frames1, 4);
        EXPECT_EQ(stats1.received_frames - initial_rx_frames1, 0);
        EXPECT_EQ(stats1.missing_ack - initial_missing_ack1, 0);
        EXPECT_EQ(stats1.total_frame_errors - initial_total_frame_errors1, 0);
        EXPECT_EQ(stats1.hw_receive_overflows - initial_hw_receive_overflows1, 0);
        EXPECT_EQ(stats1.rx_interrupts - initial_rx_interrupts1, 0);
        EXPECT_EQ(stats1.tx_interrupts - initial_tx_interrupts1, 0);
        EXPECT_EQ(stats1.total_interrupts - initial_total_interrupts1, 0);

        EXPECT_EQ(stats1.stuff_errors, 0);
        EXPECT_EQ(stats1.form_errors, 0);
        EXPECT_EQ(stats1.dom_bit_recess_errors, 0);
        EXPECT_EQ(stats1.recess_bit_dom_errors, 0);
        EXPECT_EQ(stats1.parity_errors, 0);
        EXPECT_EQ(stats1.crc_errors, 0);
        EXPECT_EQ(stats1.sw_receive_q_full, 0);
        EXPECT_EQ(stats1.error_warning_state_count, 0);
        EXPECT_EQ(stats1.error_passive_state_count, 0);
        EXPECT_EQ(stats1.bus_off_state_count, 0);
        EXPECT_EQ(stats1.bus_idle_count, 0);
        EXPECT_EQ(stats1.power_down_count, 0);
        EXPECT_EQ(stats1.wake_up_count, 0);

        close(fd1);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: EXPECT_EQ(stats1.transmitted_frames - initial_tx_frames1, 4);
|——————Node:call_expression Text: EXPECT_EQ(stats1.transmitted_frames - initial_tx_frames1, 4)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.transmitted_frames - initial_tx_frames1, 4)
|————————Node:( Text: (
|————————Node:binary_expression Text: stats1.transmitted_frames - initial_tx_frames1
|—————————Node:field_expression Text: stats1.transmitted_frames
|——————————Node:identifier Text: stats1
|——————————Node:. Text: .
|——————————Node:field_identifier Text: transmitted_frames
|—————————Node:- Text: -
|—————————Node:identifier Text: initial_tx_frames1
|————————Node:, Text: ,
|————————Node:number_literal Text: 4
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.received_frames - initial_rx_frames1, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.received_frames - initial_rx_frames1, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.received_frames - initial_rx_frames1, 0)
|————————Node:( Text: (
|————————Node:binary_expression Text: stats1.received_frames - initial_rx_frames1
|—————————Node:field_expression Text: stats1.received_frames
|——————————Node:identifier Text: stats1
|——————————Node:. Text: .
|——————————Node:field_identifier Text: received_frames
|—————————Node:- Text: -
|—————————Node:identifier Text: initial_rx_frames1
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.missing_ack - initial_missing_ack1, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.missing_ack - initial_missing_ack1, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.missing_ack - initial_missing_ack1, 0)
|————————Node:( Text: (
|————————Node:binary_expression Text: stats1.missing_ack - initial_missing_ack1
|—————————Node:field_expression Text: stats1.missing_ack
|——————————Node:identifier Text: stats1
|——————————Node:. Text: .
|——————————Node:field_identifier Text: missing_ack
|—————————Node:- Text: -
|—————————Node:identifier Text: initial_missing_ack1
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.total_frame_errors - initial_total_frame_errors1, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.total_frame_errors - initial_total_frame_errors1, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.total_frame_errors - initial_total_frame_errors1, 0)
|————————Node:( Text: (
|————————Node:binary_expression Text: stats1.total_frame_errors - initial_total_frame_errors1
|—————————Node:field_expression Text: stats1.total_frame_errors
|——————————Node:identifier Text: stats1
|——————————Node:. Text: .
|——————————Node:field_identifier Text: total_frame_errors
|—————————Node:- Text: -
|—————————Node:identifier Text: initial_total_frame_errors1
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.hw_receive_overflows - initial_hw_receive_overflows1, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.hw_receive_overflows - initial_hw_receive_overflows1, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.hw_receive_overflows - initial_hw_receive_overflows1, 0)
|————————Node:( Text: (
|————————Node:binary_expression Text: stats1.hw_receive_overflows - initial_hw_receive_overflows1
|—————————Node:field_expression Text: stats1.hw_receive_overflows
|——————————Node:identifier Text: stats1
|——————————Node:. Text: .
|——————————Node:field_identifier Text: hw_receive_overflows
|—————————Node:- Text: -
|—————————Node:identifier Text: initial_hw_receive_overflows1
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.rx_interrupts - initial_rx_interrupts1, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.rx_interrupts - initial_rx_interrupts1, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.rx_interrupts - initial_rx_interrupts1, 0)
|————————Node:( Text: (
|————————Node:binary_expression Text: stats1.rx_interrupts - initial_rx_interrupts1
|—————————Node:field_expression Text: stats1.rx_interrupts
|——————————Node:identifier Text: stats1
|——————————Node:. Text: .
|——————————Node:field_identifier Text: rx_interrupts
|—————————Node:- Text: -
|—————————Node:identifier Text: initial_rx_interrupts1
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.tx_interrupts - initial_tx_interrupts1, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.tx_interrupts - initial_tx_interrupts1, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.tx_interrupts - initial_tx_interrupts1, 0)
|————————Node:( Text: (
|————————Node:binary_expression Text: stats1.tx_interrupts - initial_tx_interrupts1
|—————————Node:field_expression Text: stats1.tx_interrupts
|——————————Node:identifier Text: stats1
|——————————Node:. Text: .
|——————————Node:field_identifier Text: tx_interrupts
|—————————Node:- Text: -
|—————————Node:identifier Text: initial_tx_interrupts1
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.total_interrupts - initial_total_interrupts1, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.total_interrupts - initial_total_interrupts1, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.total_interrupts - initial_total_interrupts1, 0)
|————————Node:( Text: (
|————————Node:binary_expression Text: stats1.total_interrupts - initial_total_interrupts1
|—————————Node:field_expression Text: stats1.total_interrupts
|——————————Node:identifier Text: stats1
|——————————Node:. Text: .
|——————————Node:field_identifier Text: total_interrupts
|—————————Node:- Text: -
|—————————Node:identifier Text: initial_total_interrupts1
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.stuff_errors, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.stuff_errors, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.stuff_errors, 0)
|————————Node:( Text: (
|————————Node:field_expression Text: stats1.stuff_errors
|—————————Node:identifier Text: stats1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: stuff_errors
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.form_errors, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.form_errors, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.form_errors, 0)
|————————Node:( Text: (
|————————Node:field_expression Text: stats1.form_errors
|—————————Node:identifier Text: stats1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: form_errors
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.dom_bit_recess_errors, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.dom_bit_recess_errors, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.dom_bit_recess_errors, 0)
|————————Node:( Text: (
|————————Node:field_expression Text: stats1.dom_bit_recess_errors
|—————————Node:identifier Text: stats1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: dom_bit_recess_errors
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.recess_bit_dom_errors, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.recess_bit_dom_errors, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.recess_bit_dom_errors, 0)
|————————Node:( Text: (
|————————Node:field_expression Text: stats1.recess_bit_dom_errors
|—————————Node:identifier Text: stats1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: recess_bit_dom_errors
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.parity_errors, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.parity_errors, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.parity_errors, 0)
|————————Node:( Text: (
|————————Node:field_expression Text: stats1.parity_errors
|—————————Node:identifier Text: stats1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: parity_errors
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.crc_errors, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.crc_errors, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.crc_errors, 0)
|————————Node:( Text: (
|————————Node:field_expression Text: stats1.crc_errors
|—————————Node:identifier Text: stats1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: crc_errors
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.sw_receive_q_full, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.sw_receive_q_full, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.sw_receive_q_full, 0)
|————————Node:( Text: (
|————————Node:field_expression Text: stats1.sw_receive_q_full
|—————————Node:identifier Text: stats1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: sw_receive_q_full
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.error_warning_state_count, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.error_warning_state_count, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.error_warning_state_count, 0)
|————————Node:( Text: (
|————————Node:field_expression Text: stats1.error_warning_state_count
|—————————Node:identifier Text: stats1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: error_warning_state_count
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.error_passive_state_count, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.error_passive_state_count, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.error_passive_state_count, 0)
|————————Node:( Text: (
|————————Node:field_expression Text: stats1.error_passive_state_count
|—————————Node:identifier Text: stats1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: error_passive_state_count
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.bus_off_state_count, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.bus_off_state_count, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.bus_off_state_count, 0)
|————————Node:( Text: (
|————————Node:field_expression Text: stats1.bus_off_state_count
|—————————Node:identifier Text: stats1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: bus_off_state_count
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.bus_idle_count, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.bus_idle_count, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.bus_idle_count, 0)
|————————Node:( Text: (
|————————Node:field_expression Text: stats1.bus_idle_count
|—————————Node:identifier Text: stats1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: bus_idle_count
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.power_down_count, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.power_down_count, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.power_down_count, 0)
|————————Node:( Text: (
|————————Node:field_expression Text: stats1.power_down_count
|—————————Node:identifier Text: stats1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: power_down_count
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: EXPECT_EQ(stats1.wake_up_count, 0);
|——————Node:call_expression Text: EXPECT_EQ(stats1.wake_up_count, 0)
|———————Node:identifier Text: EXPECT_EQ
|———————Node:argument_list Text: (stats1.wake_up_count, 0)
|————————Node:( Text: (
|————————Node:field_expression Text: stats1.wake_up_count
|—————————Node:identifier Text: stats1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: wake_up_count
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: close(fd1);
|——————Node:call_expression Text: close(fd1)
|———————Node:identifier Text: close
|———————Node:argument_list Text: (fd1)
|————————Node:( Text: (
|————————Node:identifier Text: fd1
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:} Text: }
