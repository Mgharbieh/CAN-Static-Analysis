qtserialbus-src\plugins\canbus\socketcan\socketcanbackend.cpp

|Node:translation_unit
|—Node:comment Text: /****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the QtSerialBus module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL3$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 3 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPLv3 included in the
** packaging of this file. Please review the following information to
** ensure the GNU Lesser General Public License version 3 requirements
** will be met: https://www.gnu.org/licenses/lgpl.html.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 2.0 or later as published by the Free
** Software Foundation and appearing in the file LICENSE.GPL included in
** the packaging of this file. Please review the following information to
** ensure the GNU General Public License version 2.0 requirements will be
** met: http://www.gnu.org/licenses/gpl-2.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/
|—Node:preproc_include Text: #include "socketcanbackend.h"

|——Node:#include Text: #include
|——Node:string_literal Text: "socketcanbackend.h"
|———Node:" Text: "
|———Node:string_content Text: socketcanbackend.h
|———Node:" Text: "
|—Node:preproc_include Text: #include <QtSerialBus/qcanbusdevice.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <QtSerialBus/qcanbusdevice.h>
|—Node:preproc_include Text: #include <QtCore/qdebug.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <QtCore/qdebug.h>
|—Node:preproc_include Text: #include <QtCore/qdatastream.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <QtCore/qdatastream.h>
|—Node:preproc_include Text: #include <QtCore/qsocketnotifier.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <QtCore/qsocketnotifier.h>
|—Node:preproc_include Text: #include <linux/can/error.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <linux/can/error.h>
|—Node:preproc_include Text: #include <linux/can/raw.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <linux/can/raw.h>
|—Node:preproc_include Text: #include <unistd.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <unistd.h>
|—Node:preproc_include Text: #include <net/if.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <net/if.h>
|—Node:preproc_include Text: #include <sys/ioctl.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <sys/ioctl.h>
|—Node:preproc_include Text: #include <sys/time.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <sys/time.h>
|—Node:declaration Text: QT_BEGIN_NAMESPACE

SocketCanBackend::SocketCanBackend(const QString &name) :
    canSocket(-1),
    notifier(0),
    canSocketName(name)
{
    resetConfigurations();
}
|——Node:type_identifier Text: QT_BEGIN_NAMESPACE
|——Node:ERROR Text: SocketCanBackend::SocketCanBackend(const QString &name) :
|———Node:function_declarator Text: SocketCanBackend::SocketCanBackend(const QString &name)
|————Node:qualified_identifier Text: SocketCanBackend::SocketCanBackend
|—————Node:namespace_identifier Text: SocketCanBackend
|—————Node::: Text: ::
|—————Node:identifier Text: SocketCanBackend
|————Node:parameter_list Text: (const QString &name)
|—————Node:( Text: (
|—————Node:parameter_declaration Text: const QString &name
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:type_identifier Text: QString
|——————Node:reference_declarator Text: &name
|———————Node:& Text: &
|———————Node:identifier Text: name
|—————Node:) Text: )
|———Node:: Text: :
|——Node:init_declarator Text: canSocket(-1)
|———Node:identifier Text: canSocket
|———Node:argument_list Text: (-1)
|————Node:( Text: (
|————Node:number_literal Text: -1
|————Node:) Text: )
|——Node:, Text: ,
|——Node:init_declarator Text: notifier(0)
|———Node:identifier Text: notifier
|———Node:argument_list Text: (0)
|————Node:( Text: (
|————Node:number_literal Text: 0
|————Node:) Text: )
|——Node:, Text: ,
|——Node:init_declarator Text: canSocketName(name)
{
    resetConfigurations();
}
|———Node:function_declarator Text: canSocketName(name)
|————Node:identifier Text: canSocketName
|————Node:parameter_list Text: (name)
|—————Node:( Text: (
|—————Node:parameter_declaration Text: name
|——————Node:type_identifier Text: name
|—————Node:) Text: )
|———Node:initializer_list Text: {
    resetConfigurations();
}
|————Node:{ Text: {
|————Node:call_expression Text: resetConfigurations()
|—————Node:identifier Text: resetConfigurations
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:ERROR Text: ;
|—————Node:; Text: ;
|————Node:} Text: }
|——Node:; Text: 
|—Node:function_definition Text: SocketCanBackend::~SocketCanBackend()
{
    close();
}
|——Node:function_declarator Text: SocketCanBackend::~SocketCanBackend()
|———Node:qualified_identifier Text: SocketCanBackend::~SocketCanBackend
|————Node:namespace_identifier Text: SocketCanBackend
|————Node::: Text: ::
|————Node:destructor_name Text: ~SocketCanBackend
|—————Node:~ Text: ~
|—————Node:identifier Text: SocketCanBackend
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    close();
}
|———Node:{ Text: {
|———Node:expression_statement Text: close();
|————Node:call_expression Text: close()
|—————Node:identifier Text: close
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void SocketCanBackend::resetConfigurations()
{
    QCanBusDevice::setConfigurationParameter(
                QCanBusDevice::LoopbackKey, true);
    QCanBusDevice::setConfigurationParameter(
                QCanBusDevice::ReceiveOwnKey, false);
    QCanBusDevice::setConfigurationParameter(
                QCanBusDevice::ErrorFilterKey,
                QVariant::fromValue(QCanBusFrame::FrameErrors(QCanBusFrame::AnyError)));
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: SocketCanBackend::resetConfigurations()
|———Node:qualified_identifier Text: SocketCanBackend::resetConfigurations
|————Node:namespace_identifier Text: SocketCanBackend
|————Node::: Text: ::
|————Node:identifier Text: resetConfigurations
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    QCanBusDevice::setConfigurationParameter(
                QCanBusDevice::LoopbackKey, true);
    QCanBusDevice::setConfigurationParameter(
                QCanBusDevice::ReceiveOwnKey, false);
    QCanBusDevice::setConfigurationParameter(
                QCanBusDevice::ErrorFilterKey,
                QVariant::fromValue(QCanBusFrame::FrameErrors(QCanBusFrame::AnyError)));
}
|———Node:{ Text: {
|———Node:expression_statement Text: QCanBusDevice::setConfigurationParameter(
                QCanBusDevice::LoopbackKey, true);
|————Node:call_expression Text: QCanBusDevice::setConfigurationParameter(
                QCanBusDevice::LoopbackKey, true)
|—————Node:qualified_identifier Text: QCanBusDevice::setConfigurationParameter
|——————Node:namespace_identifier Text: QCanBusDevice
|——————Node::: Text: ::
|——————Node:identifier Text: setConfigurationParameter
|—————Node:argument_list Text: (
                QCanBusDevice::LoopbackKey, true)
|——————Node:( Text: (
|——————Node:qualified_identifier Text: QCanBusDevice::LoopbackKey
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: LoopbackKey
|——————Node:, Text: ,
|——————Node:true Text: true
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: QCanBusDevice::setConfigurationParameter(
                QCanBusDevice::ReceiveOwnKey, false);
|————Node:call_expression Text: QCanBusDevice::setConfigurationParameter(
                QCanBusDevice::ReceiveOwnKey, false)
|—————Node:qualified_identifier Text: QCanBusDevice::setConfigurationParameter
|——————Node:namespace_identifier Text: QCanBusDevice
|——————Node::: Text: ::
|——————Node:identifier Text: setConfigurationParameter
|—————Node:argument_list Text: (
                QCanBusDevice::ReceiveOwnKey, false)
|——————Node:( Text: (
|——————Node:qualified_identifier Text: QCanBusDevice::ReceiveOwnKey
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: ReceiveOwnKey
|——————Node:, Text: ,
|——————Node:false Text: false
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: QCanBusDevice::setConfigurationParameter(
                QCanBusDevice::ErrorFilterKey,
                QVariant::fromValue(QCanBusFrame::FrameErrors(QCanBusFrame::AnyError)));
|————Node:call_expression Text: QCanBusDevice::setConfigurationParameter(
                QCanBusDevice::ErrorFilterKey,
                QVariant::fromValue(QCanBusFrame::FrameErrors(QCanBusFrame::AnyError)))
|—————Node:qualified_identifier Text: QCanBusDevice::setConfigurationParameter
|——————Node:namespace_identifier Text: QCanBusDevice
|——————Node::: Text: ::
|——————Node:identifier Text: setConfigurationParameter
|—————Node:argument_list Text: (
                QCanBusDevice::ErrorFilterKey,
                QVariant::fromValue(QCanBusFrame::FrameErrors(QCanBusFrame::AnyError)))
|——————Node:( Text: (
|——————Node:qualified_identifier Text: QCanBusDevice::ErrorFilterKey
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: ErrorFilterKey
|——————Node:, Text: ,
|——————Node:call_expression Text: QVariant::fromValue(QCanBusFrame::FrameErrors(QCanBusFrame::AnyError))
|———————Node:qualified_identifier Text: QVariant::fromValue
|————————Node:namespace_identifier Text: QVariant
|————————Node::: Text: ::
|————————Node:identifier Text: fromValue
|———————Node:argument_list Text: (QCanBusFrame::FrameErrors(QCanBusFrame::AnyError))
|————————Node:( Text: (
|————————Node:call_expression Text: QCanBusFrame::FrameErrors(QCanBusFrame::AnyError)
|—————————Node:qualified_identifier Text: QCanBusFrame::FrameErrors
|——————————Node:namespace_identifier Text: QCanBusFrame
|——————————Node::: Text: ::
|——————————Node:identifier Text: FrameErrors
|—————————Node:argument_list Text: (QCanBusFrame::AnyError)
|——————————Node:( Text: (
|——————————Node:qualified_identifier Text: QCanBusFrame::AnyError
|———————————Node:namespace_identifier Text: QCanBusFrame
|———————————Node::: Text: ::
|———————————Node:identifier Text: AnyError
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: bool SocketCanBackend::open()
{
    if (canSocket == -1) {
        if (!connectSocket()) {
            close(); // sets UnconnectedState
            return false;
        }
    }

    setState(QCanBusDevice::ConnectedState);
    return true;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: SocketCanBackend::open()
|———Node:qualified_identifier Text: SocketCanBackend::open
|————Node:namespace_identifier Text: SocketCanBackend
|————Node::: Text: ::
|————Node:identifier Text: open
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    if (canSocket == -1) {
        if (!connectSocket()) {
            close(); // sets UnconnectedState
            return false;
        }
    }

    setState(QCanBusDevice::ConnectedState);
    return true;
}
|———Node:{ Text: {
|———Node:if_statement Text: if (canSocket == -1) {
        if (!connectSocket()) {
            close(); // sets UnconnectedState
            return false;
        }
    }
|————Node:if Text: if
|————Node:condition_clause Text: (canSocket == -1)
|—————Node:( Text: (
|—————Node:binary_expression Text: canSocket == -1
|——————Node:identifier Text: canSocket
|——————Node:== Text: ==
|——————Node:number_literal Text: -1
|—————Node:) Text: )
|————Node:compound_statement Text: {
        if (!connectSocket()) {
            close(); // sets UnconnectedState
            return false;
        }
    }
|—————Node:{ Text: {
|—————Node:if_statement Text: if (!connectSocket()) {
            close(); // sets UnconnectedState
            return false;
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (!connectSocket())
|———————Node:( Text: (
|———————Node:unary_expression Text: !connectSocket()
|————————Node:! Text: !
|————————Node:call_expression Text: connectSocket()
|—————————Node:identifier Text: connectSocket
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            close(); // sets UnconnectedState
            return false;
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: close();
|————————Node:call_expression Text: close()
|—————————Node:identifier Text: close
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:comment Text: // sets UnconnectedState
|———————Node:return_statement Text: return false;
|————————Node:return Text: return
|————————Node:false Text: false
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:expression_statement Text: setState(QCanBusDevice::ConnectedState);
|————Node:call_expression Text: setState(QCanBusDevice::ConnectedState)
|—————Node:identifier Text: setState
|—————Node:argument_list Text: (QCanBusDevice::ConnectedState)
|——————Node:( Text: (
|——————Node:qualified_identifier Text: QCanBusDevice::ConnectedState
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: ConnectedState
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return true;
|————Node:return Text: return
|————Node:true Text: true
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void SocketCanBackend::close()
{
    ::close(canSocket);
    canSocket = -1;

    setState(QCanBusDevice::UnconnectedState);
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: SocketCanBackend::close()
|———Node:qualified_identifier Text: SocketCanBackend::close
|————Node:namespace_identifier Text: SocketCanBackend
|————Node::: Text: ::
|————Node:identifier Text: close
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    ::close(canSocket);
    canSocket = -1;

    setState(QCanBusDevice::UnconnectedState);
}
|———Node:{ Text: {
|———Node:expression_statement Text: ::close(canSocket);
|————Node:call_expression Text: ::close(canSocket)
|—————Node:qualified_identifier Text: ::close
|——————Node::: Text: ::
|——————Node:identifier Text: close
|—————Node:argument_list Text: (canSocket)
|——————Node:( Text: (
|——————Node:identifier Text: canSocket
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: canSocket = -1;
|————Node:assignment_expression Text: canSocket = -1
|—————Node:identifier Text: canSocket
|—————Node:= Text: =
|—————Node:number_literal Text: -1
|————Node:; Text: ;
|———Node:expression_statement Text: setState(QCanBusDevice::UnconnectedState);
|————Node:call_expression Text: setState(QCanBusDevice::UnconnectedState)
|—————Node:identifier Text: setState
|—————Node:argument_list Text: (QCanBusDevice::UnconnectedState)
|——————Node:( Text: (
|——————Node:qualified_identifier Text: QCanBusDevice::UnconnectedState
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: UnconnectedState
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: bool SocketCanBackend::applyConfigurationParameter(int key, const QVariant &value)
{
    bool success = false;

    switch (key) {
    case QCanBusDevice::LoopbackKey:
    {
        const int loopback = value.toBool() ? 1 : 0;
        if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_LOOPBACK, &loopback, sizeof(loopback)) < 0) {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
            break;
        }
        success = true;
        break;
    }
    case QCanBusDevice::ReceiveOwnKey:
    {
        const int receiveOwnMessages = value.toBool() ? 1 : 0;
        if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_RECV_OWN_MSGS,
                       &receiveOwnMessages, sizeof(receiveOwnMessages)) < 0) {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
            break;
        }
        success = true;
        break;
    }
    case QCanBusDevice::ErrorFilterKey:
    {
        const int errorMask = value.value<QCanBusFrame::FrameErrors>();
        if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_ERR_FILTER,
                       &errorMask, sizeof(errorMask)) < 0) {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
            break;
        }
        success = true;
        break;
    }
    case QCanBusDevice::RawFilterKey:
    {
        const QList<QCanBusDevice::Filter> filterList
                = value.value<QList<QCanBusDevice::Filter> >();
        if (!value.isValid() || filterList.isEmpty()) {
            // permit every frame - no restrictions (filter reset)
            can_filter filters = {0, 0};
            socklen_t s = sizeof(can_filter);
            if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_FILTER,
                           &filters, s) != 0) {
                qWarning() << "Cannot unset socket filters";
                setError(qt_error_string(errno),
                         QCanBusDevice::CanBusError::ConfigurationError);
                break;
            }
            success = true;
            break;
        }

        can_filter filters[filterList.size()];
        for (int i = 0; i < filterList.size(); i++) {
            const QCanBusDevice::Filter f = filterList.at(i);
            can_filter filter;
            filter.can_id = f.frameId;
            filter.can_mask = f.frameIdMask;

            // frame type filter
            switch (f.type) {
            default:
                // any other type cannot be filtered upon
                setError(tr("Cannot set filter for frame type: %1").arg(f.type),
                         QCanBusDevice::CanBusError::ConfigurationError);
                return false;
            case QCanBusFrame::InvalidFrame:
                break;
            case QCanBusFrame::DataFrame:
                filter.can_mask |= CAN_RTR_FLAG;
                break;
            case QCanBusFrame::ErrorFrame:
                filter.can_mask |= CAN_ERR_FLAG;
                filter.can_id |= CAN_ERR_FLAG;
                break;
            case QCanBusFrame::RemoteRequestFrame:
                filter.can_mask |= CAN_RTR_FLAG;
                filter.can_id |= CAN_RTR_FLAG;
                break;
            }

            // frame format filter
            if ((f.format & QCanBusDevice::Filter::MatchBaseAndExtendedFormat)
                    == QCanBusDevice::Filter::MatchBaseAndExtendedFormat) {
                // nothing
            } else if (f.format & QCanBusDevice::Filter::MatchBaseFormat) {
                filter.can_mask |= CAN_EFF_FLAG;
            } else if (f.format & QCanBusDevice::Filter::MatchExtendedFormat) {
                filter.can_mask |= CAN_EFF_FLAG;
                filter.can_id |= CAN_EFF_FLAG;
            }

            filters[i] = filter;
        }
        if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_FILTER, filters, sizeof(filters)) < 0) {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
            break;
        }
        success = true;
        break;
    }
    default:
        setError(tr("SocketCanBackend: No such configuration as %1 in SocketCanBackend").arg(key),
                 QCanBusDevice::CanBusError::ConfigurationError);
        break;
    }

    //qDebug() << "applyConfiguration" << key << value << success;
    return success;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: SocketCanBackend::applyConfigurationParameter(int key, const QVariant &value)
|———Node:qualified_identifier Text: SocketCanBackend::applyConfigurationParameter
|————Node:namespace_identifier Text: SocketCanBackend
|————Node::: Text: ::
|————Node:identifier Text: applyConfigurationParameter
|———Node:parameter_list Text: (int key, const QVariant &value)
|————Node:( Text: (
|————Node:parameter_declaration Text: int key
|—————Node:primitive_type Text: int
|—————Node:identifier Text: key
|————Node:, Text: ,
|————Node:parameter_declaration Text: const QVariant &value
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: QVariant
|—————Node:reference_declarator Text: &value
|——————Node:& Text: &
|——————Node:identifier Text: value
|————Node:) Text: )
|——Node:compound_statement Text: {
    bool success = false;

    switch (key) {
    case QCanBusDevice::LoopbackKey:
    {
        const int loopback = value.toBool() ? 1 : 0;
        if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_LOOPBACK, &loopback, sizeof(loopback)) < 0) {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
            break;
        }
        success = true;
        break;
    }
    case QCanBusDevice::ReceiveOwnKey:
    {
        const int receiveOwnMessages = value.toBool() ? 1 : 0;
        if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_RECV_OWN_MSGS,
                       &receiveOwnMessages, sizeof(receiveOwnMessages)) < 0) {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
            break;
        }
        success = true;
        break;
    }
    case QCanBusDevice::ErrorFilterKey:
    {
        const int errorMask = value.value<QCanBusFrame::FrameErrors>();
        if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_ERR_FILTER,
                       &errorMask, sizeof(errorMask)) < 0) {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
            break;
        }
        success = true;
        break;
    }
    case QCanBusDevice::RawFilterKey:
    {
        const QList<QCanBusDevice::Filter> filterList
                = value.value<QList<QCanBusDevice::Filter> >();
        if (!value.isValid() || filterList.isEmpty()) {
            // permit every frame - no restrictions (filter reset)
            can_filter filters = {0, 0};
            socklen_t s = sizeof(can_filter);
            if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_FILTER,
                           &filters, s) != 0) {
                qWarning() << "Cannot unset socket filters";
                setError(qt_error_string(errno),
                         QCanBusDevice::CanBusError::ConfigurationError);
                break;
            }
            success = true;
            break;
        }

        can_filter filters[filterList.size()];
        for (int i = 0; i < filterList.size(); i++) {
            const QCanBusDevice::Filter f = filterList.at(i);
            can_filter filter;
            filter.can_id = f.frameId;
            filter.can_mask = f.frameIdMask;

            // frame type filter
            switch (f.type) {
            default:
                // any other type cannot be filtered upon
                setError(tr("Cannot set filter for frame type: %1").arg(f.type),
                         QCanBusDevice::CanBusError::ConfigurationError);
                return false;
            case QCanBusFrame::InvalidFrame:
                break;
            case QCanBusFrame::DataFrame:
                filter.can_mask |= CAN_RTR_FLAG;
                break;
            case QCanBusFrame::ErrorFrame:
                filter.can_mask |= CAN_ERR_FLAG;
                filter.can_id |= CAN_ERR_FLAG;
                break;
            case QCanBusFrame::RemoteRequestFrame:
                filter.can_mask |= CAN_RTR_FLAG;
                filter.can_id |= CAN_RTR_FLAG;
                break;
            }

            // frame format filter
            if ((f.format & QCanBusDevice::Filter::MatchBaseAndExtendedFormat)
                    == QCanBusDevice::Filter::MatchBaseAndExtendedFormat) {
                // nothing
            } else if (f.format & QCanBusDevice::Filter::MatchBaseFormat) {
                filter.can_mask |= CAN_EFF_FLAG;
            } else if (f.format & QCanBusDevice::Filter::MatchExtendedFormat) {
                filter.can_mask |= CAN_EFF_FLAG;
                filter.can_id |= CAN_EFF_FLAG;
            }

            filters[i] = filter;
        }
        if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_FILTER, filters, sizeof(filters)) < 0) {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
            break;
        }
        success = true;
        break;
    }
    default:
        setError(tr("SocketCanBackend: No such configuration as %1 in SocketCanBackend").arg(key),
                 QCanBusDevice::CanBusError::ConfigurationError);
        break;
    }

    //qDebug() << "applyConfiguration" << key << value << success;
    return success;
}
|———Node:{ Text: {
|———Node:declaration Text: bool success = false;
|————Node:primitive_type Text: bool
|————Node:init_declarator Text: success = false
|—————Node:identifier Text: success
|—————Node:= Text: =
|—————Node:false Text: false
|————Node:; Text: ;
|———Node:switch_statement Text: switch (key) {
    case QCanBusDevice::LoopbackKey:
    {
        const int loopback = value.toBool() ? 1 : 0;
        if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_LOOPBACK, &loopback, sizeof(loopback)) < 0) {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
            break;
        }
        success = true;
        break;
    }
    case QCanBusDevice::ReceiveOwnKey:
    {
        const int receiveOwnMessages = value.toBool() ? 1 : 0;
        if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_RECV_OWN_MSGS,
                       &receiveOwnMessages, sizeof(receiveOwnMessages)) < 0) {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
            break;
        }
        success = true;
        break;
    }
    case QCanBusDevice::ErrorFilterKey:
    {
        const int errorMask = value.value<QCanBusFrame::FrameErrors>();
        if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_ERR_FILTER,
                       &errorMask, sizeof(errorMask)) < 0) {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
            break;
        }
        success = true;
        break;
    }
    case QCanBusDevice::RawFilterKey:
    {
        const QList<QCanBusDevice::Filter> filterList
                = value.value<QList<QCanBusDevice::Filter> >();
        if (!value.isValid() || filterList.isEmpty()) {
            // permit every frame - no restrictions (filter reset)
            can_filter filters = {0, 0};
            socklen_t s = sizeof(can_filter);
            if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_FILTER,
                           &filters, s) != 0) {
                qWarning() << "Cannot unset socket filters";
                setError(qt_error_string(errno),
                         QCanBusDevice::CanBusError::ConfigurationError);
                break;
            }
            success = true;
            break;
        }

        can_filter filters[filterList.size()];
        for (int i = 0; i < filterList.size(); i++) {
            const QCanBusDevice::Filter f = filterList.at(i);
            can_filter filter;
            filter.can_id = f.frameId;
            filter.can_mask = f.frameIdMask;

            // frame type filter
            switch (f.type) {
            default:
                // any other type cannot be filtered upon
                setError(tr("Cannot set filter for frame type: %1").arg(f.type),
                         QCanBusDevice::CanBusError::ConfigurationError);
                return false;
            case QCanBusFrame::InvalidFrame:
                break;
            case QCanBusFrame::DataFrame:
                filter.can_mask |= CAN_RTR_FLAG;
                break;
            case QCanBusFrame::ErrorFrame:
                filter.can_mask |= CAN_ERR_FLAG;
                filter.can_id |= CAN_ERR_FLAG;
                break;
            case QCanBusFrame::RemoteRequestFrame:
                filter.can_mask |= CAN_RTR_FLAG;
                filter.can_id |= CAN_RTR_FLAG;
                break;
            }

            // frame format filter
            if ((f.format & QCanBusDevice::Filter::MatchBaseAndExtendedFormat)
                    == QCanBusDevice::Filter::MatchBaseAndExtendedFormat) {
                // nothing
            } else if (f.format & QCanBusDevice::Filter::MatchBaseFormat) {
                filter.can_mask |= CAN_EFF_FLAG;
            } else if (f.format & QCanBusDevice::Filter::MatchExtendedFormat) {
                filter.can_mask |= CAN_EFF_FLAG;
                filter.can_id |= CAN_EFF_FLAG;
            }

            filters[i] = filter;
        }
        if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_FILTER, filters, sizeof(filters)) < 0) {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
            break;
        }
        success = true;
        break;
    }
    default:
        setError(tr("SocketCanBackend: No such configuration as %1 in SocketCanBackend").arg(key),
                 QCanBusDevice::CanBusError::ConfigurationError);
        break;
    }
|————Node:switch Text: switch
|————Node:condition_clause Text: (key)
|—————Node:( Text: (
|—————Node:identifier Text: key
|—————Node:) Text: )
|————Node:compound_statement Text: {
    case QCanBusDevice::LoopbackKey:
    {
        const int loopback = value.toBool() ? 1 : 0;
        if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_LOOPBACK, &loopback, sizeof(loopback)) < 0) {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
            break;
        }
        success = true;
        break;
    }
    case QCanBusDevice::ReceiveOwnKey:
    {
        const int receiveOwnMessages = value.toBool() ? 1 : 0;
        if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_RECV_OWN_MSGS,
                       &receiveOwnMessages, sizeof(receiveOwnMessages)) < 0) {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
            break;
        }
        success = true;
        break;
    }
    case QCanBusDevice::ErrorFilterKey:
    {
        const int errorMask = value.value<QCanBusFrame::FrameErrors>();
        if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_ERR_FILTER,
                       &errorMask, sizeof(errorMask)) < 0) {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
            break;
        }
        success = true;
        break;
    }
    case QCanBusDevice::RawFilterKey:
    {
        const QList<QCanBusDevice::Filter> filterList
                = value.value<QList<QCanBusDevice::Filter> >();
        if (!value.isValid() || filterList.isEmpty()) {
            // permit every frame - no restrictions (filter reset)
            can_filter filters = {0, 0};
            socklen_t s = sizeof(can_filter);
            if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_FILTER,
                           &filters, s) != 0) {
                qWarning() << "Cannot unset socket filters";
                setError(qt_error_string(errno),
                         QCanBusDevice::CanBusError::ConfigurationError);
                break;
            }
            success = true;
            break;
        }

        can_filter filters[filterList.size()];
        for (int i = 0; i < filterList.size(); i++) {
            const QCanBusDevice::Filter f = filterList.at(i);
            can_filter filter;
            filter.can_id = f.frameId;
            filter.can_mask = f.frameIdMask;

            // frame type filter
            switch (f.type) {
            default:
                // any other type cannot be filtered upon
                setError(tr("Cannot set filter for frame type: %1").arg(f.type),
                         QCanBusDevice::CanBusError::ConfigurationError);
                return false;
            case QCanBusFrame::InvalidFrame:
                break;
            case QCanBusFrame::DataFrame:
                filter.can_mask |= CAN_RTR_FLAG;
                break;
            case QCanBusFrame::ErrorFrame:
                filter.can_mask |= CAN_ERR_FLAG;
                filter.can_id |= CAN_ERR_FLAG;
                break;
            case QCanBusFrame::RemoteRequestFrame:
                filter.can_mask |= CAN_RTR_FLAG;
                filter.can_id |= CAN_RTR_FLAG;
                break;
            }

            // frame format filter
            if ((f.format & QCanBusDevice::Filter::MatchBaseAndExtendedFormat)
                    == QCanBusDevice::Filter::MatchBaseAndExtendedFormat) {
                // nothing
            } else if (f.format & QCanBusDevice::Filter::MatchBaseFormat) {
                filter.can_mask |= CAN_EFF_FLAG;
            } else if (f.format & QCanBusDevice::Filter::MatchExtendedFormat) {
                filter.can_mask |= CAN_EFF_FLAG;
                filter.can_id |= CAN_EFF_FLAG;
            }

            filters[i] = filter;
        }
        if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_FILTER, filters, sizeof(filters)) < 0) {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
            break;
        }
        success = true;
        break;
    }
    default:
        setError(tr("SocketCanBackend: No such configuration as %1 in SocketCanBackend").arg(key),
                 QCanBusDevice::CanBusError::ConfigurationError);
        break;
    }
|—————Node:{ Text: {
|—————Node:case_statement Text: case QCanBusDevice::LoopbackKey:
    {
        const int loopback = value.toBool() ? 1 : 0;
        if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_LOOPBACK, &loopback, sizeof(loopback)) < 0) {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
            break;
        }
        success = true;
        break;
    }
|——————Node:case Text: case
|——————Node:qualified_identifier Text: QCanBusDevice::LoopbackKey
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: LoopbackKey
|——————Node:: Text: :
|——————Node:compound_statement Text: {
        const int loopback = value.toBool() ? 1 : 0;
        if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_LOOPBACK, &loopback, sizeof(loopback)) < 0) {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
            break;
        }
        success = true;
        break;
    }
|———————Node:{ Text: {
|———————Node:declaration Text: const int loopback = value.toBool() ? 1 : 0;
|————————Node:type_qualifier Text: const
|—————————Node:const Text: const
|————————Node:primitive_type Text: int
|————————Node:init_declarator Text: loopback = value.toBool() ? 1 : 0
|—————————Node:identifier Text: loopback
|—————————Node:= Text: =
|—————————Node:conditional_expression Text: value.toBool() ? 1 : 0
|——————————Node:call_expression Text: value.toBool()
|———————————Node:field_expression Text: value.toBool
|————————————Node:identifier Text: value
|————————————Node:. Text: .
|————————————Node:field_identifier Text: toBool
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:? Text: ?
|——————————Node:number_literal Text: 1
|——————————Node:: Text: :
|——————————Node:number_literal Text: 0
|————————Node:; Text: ;
|———————Node:if_statement Text: if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_LOOPBACK, &loopback, sizeof(loopback)) < 0) {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
            break;
        }
|————————Node:if Text: if
|————————Node:condition_clause Text: (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_LOOPBACK, &loopback, sizeof(loopback)) < 0)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_LOOPBACK, &loopback, sizeof(loopback)) < 0
|——————————Node:call_expression Text: setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_LOOPBACK, &loopback, sizeof(loopback))
|———————————Node:identifier Text: setsockopt
|———————————Node:argument_list Text: (canSocket, SOL_CAN_RAW, CAN_RAW_LOOPBACK, &loopback, sizeof(loopback))
|————————————Node:( Text: (
|————————————Node:identifier Text: canSocket
|————————————Node:, Text: ,
|————————————Node:identifier Text: SOL_CAN_RAW
|————————————Node:, Text: ,
|————————————Node:identifier Text: CAN_RAW_LOOPBACK
|————————————Node:, Text: ,
|————————————Node:pointer_expression Text: &loopback
|—————————————Node:& Text: &
|—————————————Node:identifier Text: loopback
|————————————Node:, Text: ,
|————————————Node:sizeof_expression Text: sizeof(loopback)
|—————————————Node:sizeof Text: sizeof
|—————————————Node:parenthesized_expression Text: (loopback)
|——————————————Node:( Text: (
|——————————————Node:identifier Text: loopback
|——————————————Node:) Text: )
|————————————Node:) Text: )
|——————————Node:< Text: <
|——————————Node:number_literal Text: 0
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
            break;
        }
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
|——————————Node:call_expression Text: setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError)
|———————————Node:identifier Text: setError
|———————————Node:argument_list Text: (qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError)
|————————————Node:( Text: (
|————————————Node:call_expression Text: qt_error_string(errno)
|—————————————Node:identifier Text: qt_error_string
|—————————————Node:argument_list Text: (errno)
|——————————————Node:( Text: (
|——————————————Node:identifier Text: errno
|——————————————Node:) Text: )
|————————————Node:, Text: ,
|————————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ConfigurationError
|—————————————Node:namespace_identifier Text: QCanBusDevice
|—————————————Node::: Text: ::
|—————————————Node:qualified_identifier Text: CanBusError::ConfigurationError
|——————————————Node:namespace_identifier Text: CanBusError
|——————————————Node::: Text: ::
|——————————————Node:identifier Text: ConfigurationError
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:break_statement Text: break;
|——————————Node:break Text: break
|——————————Node:; Text: ;
|—————————Node:} Text: }
|———————Node:expression_statement Text: success = true;
|————————Node:assignment_expression Text: success = true
|—————————Node:identifier Text: success
|—————————Node:= Text: =
|—————————Node:true Text: true
|————————Node:; Text: ;
|———————Node:break_statement Text: break;
|————————Node:break Text: break
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:case_statement Text: case QCanBusDevice::ReceiveOwnKey:
    {
        const int receiveOwnMessages = value.toBool() ? 1 : 0;
        if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_RECV_OWN_MSGS,
                       &receiveOwnMessages, sizeof(receiveOwnMessages)) < 0) {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
            break;
        }
        success = true;
        break;
    }
|——————Node:case Text: case
|——————Node:qualified_identifier Text: QCanBusDevice::ReceiveOwnKey
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: ReceiveOwnKey
|——————Node:: Text: :
|——————Node:compound_statement Text: {
        const int receiveOwnMessages = value.toBool() ? 1 : 0;
        if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_RECV_OWN_MSGS,
                       &receiveOwnMessages, sizeof(receiveOwnMessages)) < 0) {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
            break;
        }
        success = true;
        break;
    }
|———————Node:{ Text: {
|———————Node:declaration Text: const int receiveOwnMessages = value.toBool() ? 1 : 0;
|————————Node:type_qualifier Text: const
|—————————Node:const Text: const
|————————Node:primitive_type Text: int
|————————Node:init_declarator Text: receiveOwnMessages = value.toBool() ? 1 : 0
|—————————Node:identifier Text: receiveOwnMessages
|—————————Node:= Text: =
|—————————Node:conditional_expression Text: value.toBool() ? 1 : 0
|——————————Node:call_expression Text: value.toBool()
|———————————Node:field_expression Text: value.toBool
|————————————Node:identifier Text: value
|————————————Node:. Text: .
|————————————Node:field_identifier Text: toBool
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:? Text: ?
|——————————Node:number_literal Text: 1
|——————————Node:: Text: :
|——————————Node:number_literal Text: 0
|————————Node:; Text: ;
|———————Node:if_statement Text: if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_RECV_OWN_MSGS,
                       &receiveOwnMessages, sizeof(receiveOwnMessages)) < 0) {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
            break;
        }
|————————Node:if Text: if
|————————Node:condition_clause Text: (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_RECV_OWN_MSGS,
                       &receiveOwnMessages, sizeof(receiveOwnMessages)) < 0)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_RECV_OWN_MSGS,
                       &receiveOwnMessages, sizeof(receiveOwnMessages)) < 0
|——————————Node:call_expression Text: setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_RECV_OWN_MSGS,
                       &receiveOwnMessages, sizeof(receiveOwnMessages))
|———————————Node:identifier Text: setsockopt
|———————————Node:argument_list Text: (canSocket, SOL_CAN_RAW, CAN_RAW_RECV_OWN_MSGS,
                       &receiveOwnMessages, sizeof(receiveOwnMessages))
|————————————Node:( Text: (
|————————————Node:identifier Text: canSocket
|————————————Node:, Text: ,
|————————————Node:identifier Text: SOL_CAN_RAW
|————————————Node:, Text: ,
|————————————Node:identifier Text: CAN_RAW_RECV_OWN_MSGS
|————————————Node:, Text: ,
|————————————Node:pointer_expression Text: &receiveOwnMessages
|—————————————Node:& Text: &
|—————————————Node:identifier Text: receiveOwnMessages
|————————————Node:, Text: ,
|————————————Node:sizeof_expression Text: sizeof(receiveOwnMessages)
|—————————————Node:sizeof Text: sizeof
|—————————————Node:parenthesized_expression Text: (receiveOwnMessages)
|——————————————Node:( Text: (
|——————————————Node:identifier Text: receiveOwnMessages
|——————————————Node:) Text: )
|————————————Node:) Text: )
|——————————Node:< Text: <
|——————————Node:number_literal Text: 0
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
            break;
        }
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
|——————————Node:call_expression Text: setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError)
|———————————Node:identifier Text: setError
|———————————Node:argument_list Text: (qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError)
|————————————Node:( Text: (
|————————————Node:call_expression Text: qt_error_string(errno)
|—————————————Node:identifier Text: qt_error_string
|—————————————Node:argument_list Text: (errno)
|——————————————Node:( Text: (
|——————————————Node:identifier Text: errno
|——————————————Node:) Text: )
|————————————Node:, Text: ,
|————————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ConfigurationError
|—————————————Node:namespace_identifier Text: QCanBusDevice
|—————————————Node::: Text: ::
|—————————————Node:qualified_identifier Text: CanBusError::ConfigurationError
|——————————————Node:namespace_identifier Text: CanBusError
|——————————————Node::: Text: ::
|——————————————Node:identifier Text: ConfigurationError
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:break_statement Text: break;
|——————————Node:break Text: break
|——————————Node:; Text: ;
|—————————Node:} Text: }
|———————Node:expression_statement Text: success = true;
|————————Node:assignment_expression Text: success = true
|—————————Node:identifier Text: success
|—————————Node:= Text: =
|—————————Node:true Text: true
|————————Node:; Text: ;
|———————Node:break_statement Text: break;
|————————Node:break Text: break
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:case_statement Text: case QCanBusDevice::ErrorFilterKey:
    {
        const int errorMask = value.value<QCanBusFrame::FrameErrors>();
        if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_ERR_FILTER,
                       &errorMask, sizeof(errorMask)) < 0) {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
            break;
        }
        success = true;
        break;
    }
|——————Node:case Text: case
|——————Node:qualified_identifier Text: QCanBusDevice::ErrorFilterKey
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: ErrorFilterKey
|——————Node:: Text: :
|——————Node:compound_statement Text: {
        const int errorMask = value.value<QCanBusFrame::FrameErrors>();
        if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_ERR_FILTER,
                       &errorMask, sizeof(errorMask)) < 0) {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
            break;
        }
        success = true;
        break;
    }
|———————Node:{ Text: {
|———————Node:declaration Text: const int errorMask = value.value<QCanBusFrame::FrameErrors>();
|————————Node:type_qualifier Text: const
|—————————Node:const Text: const
|————————Node:primitive_type Text: int
|————————Node:init_declarator Text: errorMask = value.value<QCanBusFrame::FrameErrors>()
|—————————Node:identifier Text: errorMask
|—————————Node:= Text: =
|—————————Node:call_expression Text: value.value<QCanBusFrame::FrameErrors>()
|——————————Node:field_expression Text: value.value<QCanBusFrame::FrameErrors>
|———————————Node:identifier Text: value
|———————————Node:. Text: .
|———————————Node:template_method Text: value<QCanBusFrame::FrameErrors>
|————————————Node:field_identifier Text: value
|————————————Node:template_argument_list Text: <QCanBusFrame::FrameErrors>
|—————————————Node:< Text: <
|—————————————Node:type_descriptor Text: QCanBusFrame::FrameErrors
|——————————————Node:qualified_identifier Text: QCanBusFrame::FrameErrors
|———————————————Node:namespace_identifier Text: QCanBusFrame
|———————————————Node::: Text: ::
|———————————————Node:type_identifier Text: FrameErrors
|—————————————Node:> Text: >
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:if_statement Text: if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_ERR_FILTER,
                       &errorMask, sizeof(errorMask)) < 0) {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
            break;
        }
|————————Node:if Text: if
|————————Node:condition_clause Text: (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_ERR_FILTER,
                       &errorMask, sizeof(errorMask)) < 0)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_ERR_FILTER,
                       &errorMask, sizeof(errorMask)) < 0
|——————————Node:call_expression Text: setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_ERR_FILTER,
                       &errorMask, sizeof(errorMask))
|———————————Node:identifier Text: setsockopt
|———————————Node:argument_list Text: (canSocket, SOL_CAN_RAW, CAN_RAW_ERR_FILTER,
                       &errorMask, sizeof(errorMask))
|————————————Node:( Text: (
|————————————Node:identifier Text: canSocket
|————————————Node:, Text: ,
|————————————Node:identifier Text: SOL_CAN_RAW
|————————————Node:, Text: ,
|————————————Node:identifier Text: CAN_RAW_ERR_FILTER
|————————————Node:, Text: ,
|————————————Node:pointer_expression Text: &errorMask
|—————————————Node:& Text: &
|—————————————Node:identifier Text: errorMask
|————————————Node:, Text: ,
|————————————Node:sizeof_expression Text: sizeof(errorMask)
|—————————————Node:sizeof Text: sizeof
|—————————————Node:parenthesized_expression Text: (errorMask)
|——————————————Node:( Text: (
|——————————————Node:identifier Text: errorMask
|——————————————Node:) Text: )
|————————————Node:) Text: )
|——————————Node:< Text: <
|——————————Node:number_literal Text: 0
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
            break;
        }
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
|——————————Node:call_expression Text: setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError)
|———————————Node:identifier Text: setError
|———————————Node:argument_list Text: (qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError)
|————————————Node:( Text: (
|————————————Node:call_expression Text: qt_error_string(errno)
|—————————————Node:identifier Text: qt_error_string
|—————————————Node:argument_list Text: (errno)
|——————————————Node:( Text: (
|——————————————Node:identifier Text: errno
|——————————————Node:) Text: )
|————————————Node:, Text: ,
|————————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ConfigurationError
|—————————————Node:namespace_identifier Text: QCanBusDevice
|—————————————Node::: Text: ::
|—————————————Node:qualified_identifier Text: CanBusError::ConfigurationError
|——————————————Node:namespace_identifier Text: CanBusError
|——————————————Node::: Text: ::
|——————————————Node:identifier Text: ConfigurationError
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:break_statement Text: break;
|——————————Node:break Text: break
|——————————Node:; Text: ;
|—————————Node:} Text: }
|———————Node:expression_statement Text: success = true;
|————————Node:assignment_expression Text: success = true
|—————————Node:identifier Text: success
|—————————Node:= Text: =
|—————————Node:true Text: true
|————————Node:; Text: ;
|———————Node:break_statement Text: break;
|————————Node:break Text: break
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:case_statement Text: case QCanBusDevice::RawFilterKey:
    {
        const QList<QCanBusDevice::Filter> filterList
                = value.value<QList<QCanBusDevice::Filter> >();
        if (!value.isValid() || filterList.isEmpty()) {
            // permit every frame - no restrictions (filter reset)
            can_filter filters = {0, 0};
            socklen_t s = sizeof(can_filter);
            if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_FILTER,
                           &filters, s) != 0) {
                qWarning() << "Cannot unset socket filters";
                setError(qt_error_string(errno),
                         QCanBusDevice::CanBusError::ConfigurationError);
                break;
            }
            success = true;
            break;
        }

        can_filter filters[filterList.size()];
        for (int i = 0; i < filterList.size(); i++) {
            const QCanBusDevice::Filter f = filterList.at(i);
            can_filter filter;
            filter.can_id = f.frameId;
            filter.can_mask = f.frameIdMask;

            // frame type filter
            switch (f.type) {
            default:
                // any other type cannot be filtered upon
                setError(tr("Cannot set filter for frame type: %1").arg(f.type),
                         QCanBusDevice::CanBusError::ConfigurationError);
                return false;
            case QCanBusFrame::InvalidFrame:
                break;
            case QCanBusFrame::DataFrame:
                filter.can_mask |= CAN_RTR_FLAG;
                break;
            case QCanBusFrame::ErrorFrame:
                filter.can_mask |= CAN_ERR_FLAG;
                filter.can_id |= CAN_ERR_FLAG;
                break;
            case QCanBusFrame::RemoteRequestFrame:
                filter.can_mask |= CAN_RTR_FLAG;
                filter.can_id |= CAN_RTR_FLAG;
                break;
            }

            // frame format filter
            if ((f.format & QCanBusDevice::Filter::MatchBaseAndExtendedFormat)
                    == QCanBusDevice::Filter::MatchBaseAndExtendedFormat) {
                // nothing
            } else if (f.format & QCanBusDevice::Filter::MatchBaseFormat) {
                filter.can_mask |= CAN_EFF_FLAG;
            } else if (f.format & QCanBusDevice::Filter::MatchExtendedFormat) {
                filter.can_mask |= CAN_EFF_FLAG;
                filter.can_id |= CAN_EFF_FLAG;
            }

            filters[i] = filter;
        }
        if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_FILTER, filters, sizeof(filters)) < 0) {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
            break;
        }
        success = true;
        break;
    }
|——————Node:case Text: case
|——————Node:qualified_identifier Text: QCanBusDevice::RawFilterKey
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: RawFilterKey
|——————Node:: Text: :
|——————Node:compound_statement Text: {
        const QList<QCanBusDevice::Filter> filterList
                = value.value<QList<QCanBusDevice::Filter> >();
        if (!value.isValid() || filterList.isEmpty()) {
            // permit every frame - no restrictions (filter reset)
            can_filter filters = {0, 0};
            socklen_t s = sizeof(can_filter);
            if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_FILTER,
                           &filters, s) != 0) {
                qWarning() << "Cannot unset socket filters";
                setError(qt_error_string(errno),
                         QCanBusDevice::CanBusError::ConfigurationError);
                break;
            }
            success = true;
            break;
        }

        can_filter filters[filterList.size()];
        for (int i = 0; i < filterList.size(); i++) {
            const QCanBusDevice::Filter f = filterList.at(i);
            can_filter filter;
            filter.can_id = f.frameId;
            filter.can_mask = f.frameIdMask;

            // frame type filter
            switch (f.type) {
            default:
                // any other type cannot be filtered upon
                setError(tr("Cannot set filter for frame type: %1").arg(f.type),
                         QCanBusDevice::CanBusError::ConfigurationError);
                return false;
            case QCanBusFrame::InvalidFrame:
                break;
            case QCanBusFrame::DataFrame:
                filter.can_mask |= CAN_RTR_FLAG;
                break;
            case QCanBusFrame::ErrorFrame:
                filter.can_mask |= CAN_ERR_FLAG;
                filter.can_id |= CAN_ERR_FLAG;
                break;
            case QCanBusFrame::RemoteRequestFrame:
                filter.can_mask |= CAN_RTR_FLAG;
                filter.can_id |= CAN_RTR_FLAG;
                break;
            }

            // frame format filter
            if ((f.format & QCanBusDevice::Filter::MatchBaseAndExtendedFormat)
                    == QCanBusDevice::Filter::MatchBaseAndExtendedFormat) {
                // nothing
            } else if (f.format & QCanBusDevice::Filter::MatchBaseFormat) {
                filter.can_mask |= CAN_EFF_FLAG;
            } else if (f.format & QCanBusDevice::Filter::MatchExtendedFormat) {
                filter.can_mask |= CAN_EFF_FLAG;
                filter.can_id |= CAN_EFF_FLAG;
            }

            filters[i] = filter;
        }
        if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_FILTER, filters, sizeof(filters)) < 0) {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
            break;
        }
        success = true;
        break;
    }
|———————Node:{ Text: {
|———————Node:declaration Text: const QList<QCanBusDevice::Filter> filterList
                = value.value<QList<QCanBusDevice::Filter> >();
|————————Node:type_qualifier Text: const
|—————————Node:const Text: const
|————————Node:template_type Text: QList<QCanBusDevice::Filter>
|—————————Node:type_identifier Text: QList
|—————————Node:template_argument_list Text: <QCanBusDevice::Filter>
|——————————Node:< Text: <
|——————————Node:type_descriptor Text: QCanBusDevice::Filter
|———————————Node:qualified_identifier Text: QCanBusDevice::Filter
|————————————Node:namespace_identifier Text: QCanBusDevice
|————————————Node::: Text: ::
|————————————Node:type_identifier Text: Filter
|——————————Node:> Text: >
|————————Node:init_declarator Text: filterList
                = value.value<QList<QCanBusDevice::Filter> >()
|—————————Node:identifier Text: filterList
|—————————Node:= Text: =
|—————————Node:call_expression Text: value.value<QList<QCanBusDevice::Filter> >()
|——————————Node:field_expression Text: value.value<QList<QCanBusDevice::Filter> >
|———————————Node:identifier Text: value
|———————————Node:. Text: .
|———————————Node:template_method Text: value<QList<QCanBusDevice::Filter> >
|————————————Node:field_identifier Text: value
|————————————Node:template_argument_list Text: <QList<QCanBusDevice::Filter> >
|—————————————Node:< Text: <
|—————————————Node:type_descriptor Text: QList<QCanBusDevice::Filter>
|——————————————Node:template_type Text: QList<QCanBusDevice::Filter>
|———————————————Node:type_identifier Text: QList
|———————————————Node:template_argument_list Text: <QCanBusDevice::Filter>
|————————————————Node:< Text: <
|————————————————Node:type_descriptor Text: QCanBusDevice::Filter
|—————————————————Node:qualified_identifier Text: QCanBusDevice::Filter
|——————————————————Node:namespace_identifier Text: QCanBusDevice
|——————————————————Node::: Text: ::
|——————————————————Node:type_identifier Text: Filter
|————————————————Node:> Text: >
|—————————————Node:> Text: >
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:if_statement Text: if (!value.isValid() || filterList.isEmpty()) {
            // permit every frame - no restrictions (filter reset)
            can_filter filters = {0, 0};
            socklen_t s = sizeof(can_filter);
            if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_FILTER,
                           &filters, s) != 0) {
                qWarning() << "Cannot unset socket filters";
                setError(qt_error_string(errno),
                         QCanBusDevice::CanBusError::ConfigurationError);
                break;
            }
            success = true;
            break;
        }
|————————Node:if Text: if
|————————Node:condition_clause Text: (!value.isValid() || filterList.isEmpty())
|—————————Node:( Text: (
|—————————Node:binary_expression Text: !value.isValid() || filterList.isEmpty()
|——————————Node:unary_expression Text: !value.isValid()
|———————————Node:! Text: !
|———————————Node:call_expression Text: value.isValid()
|————————————Node:field_expression Text: value.isValid
|—————————————Node:identifier Text: value
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: isValid
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|——————————Node:|| Text: ||
|——————————Node:call_expression Text: filterList.isEmpty()
|———————————Node:field_expression Text: filterList.isEmpty
|————————————Node:identifier Text: filterList
|————————————Node:. Text: .
|————————————Node:field_identifier Text: isEmpty
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
            // permit every frame - no restrictions (filter reset)
            can_filter filters = {0, 0};
            socklen_t s = sizeof(can_filter);
            if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_FILTER,
                           &filters, s) != 0) {
                qWarning() << "Cannot unset socket filters";
                setError(qt_error_string(errno),
                         QCanBusDevice::CanBusError::ConfigurationError);
                break;
            }
            success = true;
            break;
        }
|—————————Node:{ Text: {
|—————————Node:comment Text: // permit every frame - no restrictions (filter reset)
|—————————Node:declaration Text: can_filter filters = {0, 0};
|——————————Node:type_identifier Text: can_filter
|——————————Node:init_declarator Text: filters = {0, 0}
|———————————Node:identifier Text: filters
|———————————Node:= Text: =
|———————————Node:initializer_list Text: {0, 0}
|————————————Node:{ Text: {
|————————————Node:number_literal Text: 0
|————————————Node:, Text: ,
|————————————Node:number_literal Text: 0
|————————————Node:} Text: }
|——————————Node:; Text: ;
|—————————Node:declaration Text: socklen_t s = sizeof(can_filter);
|——————————Node:type_identifier Text: socklen_t
|——————————Node:init_declarator Text: s = sizeof(can_filter)
|———————————Node:identifier Text: s
|———————————Node:= Text: =
|———————————Node:sizeof_expression Text: sizeof(can_filter)
|————————————Node:sizeof Text: sizeof
|————————————Node:parenthesized_expression Text: (can_filter)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: can_filter
|—————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:if_statement Text: if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_FILTER,
                           &filters, s) != 0) {
                qWarning() << "Cannot unset socket filters";
                setError(qt_error_string(errno),
                         QCanBusDevice::CanBusError::ConfigurationError);
                break;
            }
|——————————Node:if Text: if
|——————————Node:condition_clause Text: (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_FILTER,
                           &filters, s) != 0)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_FILTER,
                           &filters, s) != 0
|————————————Node:call_expression Text: setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_FILTER,
                           &filters, s)
|—————————————Node:identifier Text: setsockopt
|—————————————Node:argument_list Text: (canSocket, SOL_CAN_RAW, CAN_RAW_FILTER,
                           &filters, s)
|——————————————Node:( Text: (
|——————————————Node:identifier Text: canSocket
|——————————————Node:, Text: ,
|——————————————Node:identifier Text: SOL_CAN_RAW
|——————————————Node:, Text: ,
|——————————————Node:identifier Text: CAN_RAW_FILTER
|——————————————Node:, Text: ,
|——————————————Node:pointer_expression Text: &filters
|———————————————Node:& Text: &
|———————————————Node:identifier Text: filters
|——————————————Node:, Text: ,
|——————————————Node:identifier Text: s
|——————————————Node:) Text: )
|————————————Node:!= Text: !=
|————————————Node:number_literal Text: 0
|———————————Node:) Text: )
|——————————Node:compound_statement Text: {
                qWarning() << "Cannot unset socket filters";
                setError(qt_error_string(errno),
                         QCanBusDevice::CanBusError::ConfigurationError);
                break;
            }
|———————————Node:{ Text: {
|———————————Node:expression_statement Text: qWarning() << "Cannot unset socket filters";
|————————————Node:binary_expression Text: qWarning() << "Cannot unset socket filters"
|—————————————Node:call_expression Text: qWarning()
|——————————————Node:identifier Text: qWarning
|——————————————Node:argument_list Text: ()
|———————————————Node:( Text: (
|———————————————Node:) Text: )
|—————————————Node:<< Text: <<
|—————————————Node:string_literal Text: "Cannot unset socket filters"
|——————————————Node:" Text: "
|——————————————Node:string_content Text: Cannot unset socket filters
|——————————————Node:" Text: "
|————————————Node:; Text: ;
|———————————Node:expression_statement Text: setError(qt_error_string(errno),
                         QCanBusDevice::CanBusError::ConfigurationError);
|————————————Node:call_expression Text: setError(qt_error_string(errno),
                         QCanBusDevice::CanBusError::ConfigurationError)
|—————————————Node:identifier Text: setError
|—————————————Node:argument_list Text: (qt_error_string(errno),
                         QCanBusDevice::CanBusError::ConfigurationError)
|——————————————Node:( Text: (
|——————————————Node:call_expression Text: qt_error_string(errno)
|———————————————Node:identifier Text: qt_error_string
|———————————————Node:argument_list Text: (errno)
|————————————————Node:( Text: (
|————————————————Node:identifier Text: errno
|————————————————Node:) Text: )
|——————————————Node:, Text: ,
|——————————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ConfigurationError
|———————————————Node:namespace_identifier Text: QCanBusDevice
|———————————————Node::: Text: ::
|———————————————Node:qualified_identifier Text: CanBusError::ConfigurationError
|————————————————Node:namespace_identifier Text: CanBusError
|————————————————Node::: Text: ::
|————————————————Node:identifier Text: ConfigurationError
|——————————————Node:) Text: )
|————————————Node:; Text: ;
|———————————Node:break_statement Text: break;
|————————————Node:break Text: break
|————————————Node:; Text: ;
|———————————Node:} Text: }
|—————————Node:expression_statement Text: success = true;
|——————————Node:assignment_expression Text: success = true
|———————————Node:identifier Text: success
|———————————Node:= Text: =
|———————————Node:true Text: true
|——————————Node:; Text: ;
|—————————Node:break_statement Text: break;
|——————————Node:break Text: break
|——————————Node:; Text: ;
|—————————Node:} Text: }
|———————Node:declaration Text: can_filter filters[filterList.size()];
|————————Node:type_identifier Text: can_filter
|————————Node:array_declarator Text: filters[filterList.size()]
|—————————Node:identifier Text: filters
|—————————Node:[ Text: [
|—————————Node:call_expression Text: filterList.size()
|——————————Node:field_expression Text: filterList.size
|———————————Node:identifier Text: filterList
|———————————Node:. Text: .
|———————————Node:field_identifier Text: size
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:] Text: ]
|————————Node:; Text: ;
|———————Node:for_statement Text: for (int i = 0; i < filterList.size(); i++) {
            const QCanBusDevice::Filter f = filterList.at(i);
            can_filter filter;
            filter.can_id = f.frameId;
            filter.can_mask = f.frameIdMask;

            // frame type filter
            switch (f.type) {
            default:
                // any other type cannot be filtered upon
                setError(tr("Cannot set filter for frame type: %1").arg(f.type),
                         QCanBusDevice::CanBusError::ConfigurationError);
                return false;
            case QCanBusFrame::InvalidFrame:
                break;
            case QCanBusFrame::DataFrame:
                filter.can_mask |= CAN_RTR_FLAG;
                break;
            case QCanBusFrame::ErrorFrame:
                filter.can_mask |= CAN_ERR_FLAG;
                filter.can_id |= CAN_ERR_FLAG;
                break;
            case QCanBusFrame::RemoteRequestFrame:
                filter.can_mask |= CAN_RTR_FLAG;
                filter.can_id |= CAN_RTR_FLAG;
                break;
            }

            // frame format filter
            if ((f.format & QCanBusDevice::Filter::MatchBaseAndExtendedFormat)
                    == QCanBusDevice::Filter::MatchBaseAndExtendedFormat) {
                // nothing
            } else if (f.format & QCanBusDevice::Filter::MatchBaseFormat) {
                filter.can_mask |= CAN_EFF_FLAG;
            } else if (f.format & QCanBusDevice::Filter::MatchExtendedFormat) {
                filter.can_mask |= CAN_EFF_FLAG;
                filter.can_id |= CAN_EFF_FLAG;
            }

            filters[i] = filter;
        }
|————————Node:for Text: for
|————————Node:( Text: (
|————————Node:declaration Text: int i = 0;
|—————————Node:primitive_type Text: int
|—————————Node:init_declarator Text: i = 0
|——————————Node:identifier Text: i
|——————————Node:= Text: =
|——————————Node:number_literal Text: 0
|—————————Node:; Text: ;
|————————Node:binary_expression Text: i < filterList.size()
|—————————Node:identifier Text: i
|—————————Node:< Text: <
|—————————Node:call_expression Text: filterList.size()
|——————————Node:field_expression Text: filterList.size
|———————————Node:identifier Text: filterList
|———————————Node:. Text: .
|———————————Node:field_identifier Text: size
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|————————Node:; Text: ;
|————————Node:update_expression Text: i++
|—————————Node:identifier Text: i
|—————————Node:++ Text: ++
|————————Node:) Text: )
|————————Node:compound_statement Text: {
            const QCanBusDevice::Filter f = filterList.at(i);
            can_filter filter;
            filter.can_id = f.frameId;
            filter.can_mask = f.frameIdMask;

            // frame type filter
            switch (f.type) {
            default:
                // any other type cannot be filtered upon
                setError(tr("Cannot set filter for frame type: %1").arg(f.type),
                         QCanBusDevice::CanBusError::ConfigurationError);
                return false;
            case QCanBusFrame::InvalidFrame:
                break;
            case QCanBusFrame::DataFrame:
                filter.can_mask |= CAN_RTR_FLAG;
                break;
            case QCanBusFrame::ErrorFrame:
                filter.can_mask |= CAN_ERR_FLAG;
                filter.can_id |= CAN_ERR_FLAG;
                break;
            case QCanBusFrame::RemoteRequestFrame:
                filter.can_mask |= CAN_RTR_FLAG;
                filter.can_id |= CAN_RTR_FLAG;
                break;
            }

            // frame format filter
            if ((f.format & QCanBusDevice::Filter::MatchBaseAndExtendedFormat)
                    == QCanBusDevice::Filter::MatchBaseAndExtendedFormat) {
                // nothing
            } else if (f.format & QCanBusDevice::Filter::MatchBaseFormat) {
                filter.can_mask |= CAN_EFF_FLAG;
            } else if (f.format & QCanBusDevice::Filter::MatchExtendedFormat) {
                filter.can_mask |= CAN_EFF_FLAG;
                filter.can_id |= CAN_EFF_FLAG;
            }

            filters[i] = filter;
        }
|—————————Node:{ Text: {
|—————————Node:declaration Text: const QCanBusDevice::Filter f = filterList.at(i);
|——————————Node:type_qualifier Text: const
|———————————Node:const Text: const
|——————————Node:qualified_identifier Text: QCanBusDevice::Filter
|———————————Node:namespace_identifier Text: QCanBusDevice
|———————————Node::: Text: ::
|———————————Node:type_identifier Text: Filter
|——————————Node:init_declarator Text: f = filterList.at(i)
|———————————Node:identifier Text: f
|———————————Node:= Text: =
|———————————Node:call_expression Text: filterList.at(i)
|————————————Node:field_expression Text: filterList.at
|—————————————Node:identifier Text: filterList
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: at
|————————————Node:argument_list Text: (i)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: i
|—————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:declaration Text: can_filter filter;
|——————————Node:type_identifier Text: can_filter
|——————————Node:identifier Text: filter
|——————————Node:; Text: ;
|—————————Node:expression_statement Text: filter.can_id = f.frameId;
|——————————Node:assignment_expression Text: filter.can_id = f.frameId
|———————————Node:field_expression Text: filter.can_id
|————————————Node:identifier Text: filter
|————————————Node:. Text: .
|————————————Node:field_identifier Text: can_id
|———————————Node:= Text: =
|———————————Node:field_expression Text: f.frameId
|————————————Node:identifier Text: f
|————————————Node:. Text: .
|————————————Node:field_identifier Text: frameId
|——————————Node:; Text: ;
|—————————Node:expression_statement Text: filter.can_mask = f.frameIdMask;
|——————————Node:assignment_expression Text: filter.can_mask = f.frameIdMask
|———————————Node:field_expression Text: filter.can_mask
|————————————Node:identifier Text: filter
|————————————Node:. Text: .
|————————————Node:field_identifier Text: can_mask
|———————————Node:= Text: =
|———————————Node:field_expression Text: f.frameIdMask
|————————————Node:identifier Text: f
|————————————Node:. Text: .
|————————————Node:field_identifier Text: frameIdMask
|——————————Node:; Text: ;
|—————————Node:comment Text: // frame type filter
|—————————Node:switch_statement Text: switch (f.type) {
            default:
                // any other type cannot be filtered upon
                setError(tr("Cannot set filter for frame type: %1").arg(f.type),
                         QCanBusDevice::CanBusError::ConfigurationError);
                return false;
            case QCanBusFrame::InvalidFrame:
                break;
            case QCanBusFrame::DataFrame:
                filter.can_mask |= CAN_RTR_FLAG;
                break;
            case QCanBusFrame::ErrorFrame:
                filter.can_mask |= CAN_ERR_FLAG;
                filter.can_id |= CAN_ERR_FLAG;
                break;
            case QCanBusFrame::RemoteRequestFrame:
                filter.can_mask |= CAN_RTR_FLAG;
                filter.can_id |= CAN_RTR_FLAG;
                break;
            }
|——————————Node:switch Text: switch
|——————————Node:condition_clause Text: (f.type)
|———————————Node:( Text: (
|———————————Node:field_expression Text: f.type
|————————————Node:identifier Text: f
|————————————Node:. Text: .
|————————————Node:field_identifier Text: type
|———————————Node:) Text: )
|——————————Node:compound_statement Text: {
            default:
                // any other type cannot be filtered upon
                setError(tr("Cannot set filter for frame type: %1").arg(f.type),
                         QCanBusDevice::CanBusError::ConfigurationError);
                return false;
            case QCanBusFrame::InvalidFrame:
                break;
            case QCanBusFrame::DataFrame:
                filter.can_mask |= CAN_RTR_FLAG;
                break;
            case QCanBusFrame::ErrorFrame:
                filter.can_mask |= CAN_ERR_FLAG;
                filter.can_id |= CAN_ERR_FLAG;
                break;
            case QCanBusFrame::RemoteRequestFrame:
                filter.can_mask |= CAN_RTR_FLAG;
                filter.can_id |= CAN_RTR_FLAG;
                break;
            }
|———————————Node:{ Text: {
|———————————Node:case_statement Text: default:
                // any other type cannot be filtered upon
                setError(tr("Cannot set filter for frame type: %1").arg(f.type),
                         QCanBusDevice::CanBusError::ConfigurationError);
                return false;
|————————————Node:default Text: default
|————————————Node:: Text: :
|————————————Node:comment Text: // any other type cannot be filtered upon
|————————————Node:expression_statement Text: setError(tr("Cannot set filter for frame type: %1").arg(f.type),
                         QCanBusDevice::CanBusError::ConfigurationError);
|—————————————Node:call_expression Text: setError(tr("Cannot set filter for frame type: %1").arg(f.type),
                         QCanBusDevice::CanBusError::ConfigurationError)
|——————————————Node:identifier Text: setError
|——————————————Node:argument_list Text: (tr("Cannot set filter for frame type: %1").arg(f.type),
                         QCanBusDevice::CanBusError::ConfigurationError)
|———————————————Node:( Text: (
|———————————————Node:call_expression Text: tr("Cannot set filter for frame type: %1").arg(f.type)
|————————————————Node:field_expression Text: tr("Cannot set filter for frame type: %1").arg
|—————————————————Node:call_expression Text: tr("Cannot set filter for frame type: %1")
|——————————————————Node:identifier Text: tr
|——————————————————Node:argument_list Text: ("Cannot set filter for frame type: %1")
|———————————————————Node:( Text: (
|———————————————————Node:string_literal Text: "Cannot set filter for frame type: %1"
|————————————————————Node:" Text: "
|————————————————————Node:string_content Text: Cannot set filter for frame type: %1
|————————————————————Node:" Text: "
|———————————————————Node:) Text: )
|—————————————————Node:. Text: .
|—————————————————Node:field_identifier Text: arg
|————————————————Node:argument_list Text: (f.type)
|—————————————————Node:( Text: (
|—————————————————Node:field_expression Text: f.type
|——————————————————Node:identifier Text: f
|——————————————————Node:. Text: .
|——————————————————Node:field_identifier Text: type
|—————————————————Node:) Text: )
|———————————————Node:, Text: ,
|———————————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ConfigurationError
|————————————————Node:namespace_identifier Text: QCanBusDevice
|————————————————Node::: Text: ::
|————————————————Node:qualified_identifier Text: CanBusError::ConfigurationError
|—————————————————Node:namespace_identifier Text: CanBusError
|—————————————————Node::: Text: ::
|—————————————————Node:identifier Text: ConfigurationError
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:return_statement Text: return false;
|—————————————Node:return Text: return
|—————————————Node:false Text: false
|—————————————Node:; Text: ;
|———————————Node:case_statement Text: case QCanBusFrame::InvalidFrame:
                break;
|————————————Node:case Text: case
|————————————Node:qualified_identifier Text: QCanBusFrame::InvalidFrame
|—————————————Node:namespace_identifier Text: QCanBusFrame
|—————————————Node::: Text: ::
|—————————————Node:identifier Text: InvalidFrame
|————————————Node:: Text: :
|————————————Node:break_statement Text: break;
|—————————————Node:break Text: break
|—————————————Node:; Text: ;
|———————————Node:case_statement Text: case QCanBusFrame::DataFrame:
                filter.can_mask |= CAN_RTR_FLAG;
                break;
|————————————Node:case Text: case
|————————————Node:qualified_identifier Text: QCanBusFrame::DataFrame
|—————————————Node:namespace_identifier Text: QCanBusFrame
|—————————————Node::: Text: ::
|—————————————Node:identifier Text: DataFrame
|————————————Node:: Text: :
|————————————Node:expression_statement Text: filter.can_mask |= CAN_RTR_FLAG;
|—————————————Node:assignment_expression Text: filter.can_mask |= CAN_RTR_FLAG
|——————————————Node:field_expression Text: filter.can_mask
|———————————————Node:identifier Text: filter
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: can_mask
|——————————————Node:|= Text: |=
|——————————————Node:identifier Text: CAN_RTR_FLAG
|—————————————Node:; Text: ;
|————————————Node:break_statement Text: break;
|—————————————Node:break Text: break
|—————————————Node:; Text: ;
|———————————Node:case_statement Text: case QCanBusFrame::ErrorFrame:
                filter.can_mask |= CAN_ERR_FLAG;
                filter.can_id |= CAN_ERR_FLAG;
                break;
|————————————Node:case Text: case
|————————————Node:qualified_identifier Text: QCanBusFrame::ErrorFrame
|—————————————Node:namespace_identifier Text: QCanBusFrame
|—————————————Node::: Text: ::
|—————————————Node:identifier Text: ErrorFrame
|————————————Node:: Text: :
|————————————Node:expression_statement Text: filter.can_mask |= CAN_ERR_FLAG;
|—————————————Node:assignment_expression Text: filter.can_mask |= CAN_ERR_FLAG
|——————————————Node:field_expression Text: filter.can_mask
|———————————————Node:identifier Text: filter
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: can_mask
|——————————————Node:|= Text: |=
|——————————————Node:identifier Text: CAN_ERR_FLAG
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: filter.can_id |= CAN_ERR_FLAG;
|—————————————Node:assignment_expression Text: filter.can_id |= CAN_ERR_FLAG
|——————————————Node:field_expression Text: filter.can_id
|———————————————Node:identifier Text: filter
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: can_id
|——————————————Node:|= Text: |=
|——————————————Node:identifier Text: CAN_ERR_FLAG
|—————————————Node:; Text: ;
|————————————Node:break_statement Text: break;
|—————————————Node:break Text: break
|—————————————Node:; Text: ;
|———————————Node:case_statement Text: case QCanBusFrame::RemoteRequestFrame:
                filter.can_mask |= CAN_RTR_FLAG;
                filter.can_id |= CAN_RTR_FLAG;
                break;
|————————————Node:case Text: case
|————————————Node:qualified_identifier Text: QCanBusFrame::RemoteRequestFrame
|—————————————Node:namespace_identifier Text: QCanBusFrame
|—————————————Node::: Text: ::
|—————————————Node:identifier Text: RemoteRequestFrame
|————————————Node:: Text: :
|————————————Node:expression_statement Text: filter.can_mask |= CAN_RTR_FLAG;
|—————————————Node:assignment_expression Text: filter.can_mask |= CAN_RTR_FLAG
|——————————————Node:field_expression Text: filter.can_mask
|———————————————Node:identifier Text: filter
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: can_mask
|——————————————Node:|= Text: |=
|——————————————Node:identifier Text: CAN_RTR_FLAG
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: filter.can_id |= CAN_RTR_FLAG;
|—————————————Node:assignment_expression Text: filter.can_id |= CAN_RTR_FLAG
|——————————————Node:field_expression Text: filter.can_id
|———————————————Node:identifier Text: filter
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: can_id
|——————————————Node:|= Text: |=
|——————————————Node:identifier Text: CAN_RTR_FLAG
|—————————————Node:; Text: ;
|————————————Node:break_statement Text: break;
|—————————————Node:break Text: break
|—————————————Node:; Text: ;
|———————————Node:} Text: }
|—————————Node:comment Text: // frame format filter
|—————————Node:if_statement Text: if ((f.format & QCanBusDevice::Filter::MatchBaseAndExtendedFormat)
                    == QCanBusDevice::Filter::MatchBaseAndExtendedFormat) {
                // nothing
            } else if (f.format & QCanBusDevice::Filter::MatchBaseFormat) {
                filter.can_mask |= CAN_EFF_FLAG;
            } else if (f.format & QCanBusDevice::Filter::MatchExtendedFormat) {
                filter.can_mask |= CAN_EFF_FLAG;
                filter.can_id |= CAN_EFF_FLAG;
            }
|——————————Node:if Text: if
|——————————Node:condition_clause Text: ((f.format & QCanBusDevice::Filter::MatchBaseAndExtendedFormat)
                    == QCanBusDevice::Filter::MatchBaseAndExtendedFormat)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: (f.format & QCanBusDevice::Filter::MatchBaseAndExtendedFormat)
                    == QCanBusDevice::Filter::MatchBaseAndExtendedFormat
|————————————Node:parenthesized_expression Text: (f.format & QCanBusDevice::Filter::MatchBaseAndExtendedFormat)
|—————————————Node:( Text: (
|—————————————Node:binary_expression Text: f.format & QCanBusDevice::Filter::MatchBaseAndExtendedFormat
|——————————————Node:field_expression Text: f.format
|———————————————Node:identifier Text: f
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: format
|——————————————Node:& Text: &
|——————————————Node:qualified_identifier Text: QCanBusDevice::Filter::MatchBaseAndExtendedFormat
|———————————————Node:namespace_identifier Text: QCanBusDevice
|———————————————Node::: Text: ::
|———————————————Node:qualified_identifier Text: Filter::MatchBaseAndExtendedFormat
|————————————————Node:namespace_identifier Text: Filter
|————————————————Node::: Text: ::
|————————————————Node:identifier Text: MatchBaseAndExtendedFormat
|—————————————Node:) Text: )
|————————————Node:== Text: ==
|————————————Node:qualified_identifier Text: QCanBusDevice::Filter::MatchBaseAndExtendedFormat
|—————————————Node:namespace_identifier Text: QCanBusDevice
|—————————————Node::: Text: ::
|—————————————Node:qualified_identifier Text: Filter::MatchBaseAndExtendedFormat
|——————————————Node:namespace_identifier Text: Filter
|——————————————Node::: Text: ::
|——————————————Node:identifier Text: MatchBaseAndExtendedFormat
|———————————Node:) Text: )
|——————————Node:compound_statement Text: {
                // nothing
            }
|———————————Node:{ Text: {
|———————————Node:comment Text: // nothing
|———————————Node:} Text: }
|——————————Node:else_clause Text: else if (f.format & QCanBusDevice::Filter::MatchBaseFormat) {
                filter.can_mask |= CAN_EFF_FLAG;
            } else if (f.format & QCanBusDevice::Filter::MatchExtendedFormat) {
                filter.can_mask |= CAN_EFF_FLAG;
                filter.can_id |= CAN_EFF_FLAG;
            }
|———————————Node:else Text: else
|———————————Node:if_statement Text: if (f.format & QCanBusDevice::Filter::MatchBaseFormat) {
                filter.can_mask |= CAN_EFF_FLAG;
            } else if (f.format & QCanBusDevice::Filter::MatchExtendedFormat) {
                filter.can_mask |= CAN_EFF_FLAG;
                filter.can_id |= CAN_EFF_FLAG;
            }
|————————————Node:if Text: if
|————————————Node:condition_clause Text: (f.format & QCanBusDevice::Filter::MatchBaseFormat)
|—————————————Node:( Text: (
|—————————————Node:binary_expression Text: f.format & QCanBusDevice::Filter::MatchBaseFormat
|——————————————Node:field_expression Text: f.format
|———————————————Node:identifier Text: f
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: format
|——————————————Node:& Text: &
|——————————————Node:qualified_identifier Text: QCanBusDevice::Filter::MatchBaseFormat
|———————————————Node:namespace_identifier Text: QCanBusDevice
|———————————————Node::: Text: ::
|———————————————Node:qualified_identifier Text: Filter::MatchBaseFormat
|————————————————Node:namespace_identifier Text: Filter
|————————————————Node::: Text: ::
|————————————————Node:identifier Text: MatchBaseFormat
|—————————————Node:) Text: )
|————————————Node:compound_statement Text: {
                filter.can_mask |= CAN_EFF_FLAG;
            }
|—————————————Node:{ Text: {
|—————————————Node:expression_statement Text: filter.can_mask |= CAN_EFF_FLAG;
|——————————————Node:assignment_expression Text: filter.can_mask |= CAN_EFF_FLAG
|———————————————Node:field_expression Text: filter.can_mask
|————————————————Node:identifier Text: filter
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: can_mask
|———————————————Node:|= Text: |=
|———————————————Node:identifier Text: CAN_EFF_FLAG
|——————————————Node:; Text: ;
|—————————————Node:} Text: }
|————————————Node:else_clause Text: else if (f.format & QCanBusDevice::Filter::MatchExtendedFormat) {
                filter.can_mask |= CAN_EFF_FLAG;
                filter.can_id |= CAN_EFF_FLAG;
            }
|—————————————Node:else Text: else
|—————————————Node:if_statement Text: if (f.format & QCanBusDevice::Filter::MatchExtendedFormat) {
                filter.can_mask |= CAN_EFF_FLAG;
                filter.can_id |= CAN_EFF_FLAG;
            }
|——————————————Node:if Text: if
|——————————————Node:condition_clause Text: (f.format & QCanBusDevice::Filter::MatchExtendedFormat)
|———————————————Node:( Text: (
|———————————————Node:binary_expression Text: f.format & QCanBusDevice::Filter::MatchExtendedFormat
|————————————————Node:field_expression Text: f.format
|—————————————————Node:identifier Text: f
|—————————————————Node:. Text: .
|—————————————————Node:field_identifier Text: format
|————————————————Node:& Text: &
|————————————————Node:qualified_identifier Text: QCanBusDevice::Filter::MatchExtendedFormat
|—————————————————Node:namespace_identifier Text: QCanBusDevice
|—————————————————Node::: Text: ::
|—————————————————Node:qualified_identifier Text: Filter::MatchExtendedFormat
|——————————————————Node:namespace_identifier Text: Filter
|——————————————————Node::: Text: ::
|——————————————————Node:identifier Text: MatchExtendedFormat
|———————————————Node:) Text: )
|——————————————Node:compound_statement Text: {
                filter.can_mask |= CAN_EFF_FLAG;
                filter.can_id |= CAN_EFF_FLAG;
            }
|———————————————Node:{ Text: {
|———————————————Node:expression_statement Text: filter.can_mask |= CAN_EFF_FLAG;
|————————————————Node:assignment_expression Text: filter.can_mask |= CAN_EFF_FLAG
|—————————————————Node:field_expression Text: filter.can_mask
|——————————————————Node:identifier Text: filter
|——————————————————Node:. Text: .
|——————————————————Node:field_identifier Text: can_mask
|—————————————————Node:|= Text: |=
|—————————————————Node:identifier Text: CAN_EFF_FLAG
|————————————————Node:; Text: ;
|———————————————Node:expression_statement Text: filter.can_id |= CAN_EFF_FLAG;
|————————————————Node:assignment_expression Text: filter.can_id |= CAN_EFF_FLAG
|—————————————————Node:field_expression Text: filter.can_id
|——————————————————Node:identifier Text: filter
|——————————————————Node:. Text: .
|——————————————————Node:field_identifier Text: can_id
|—————————————————Node:|= Text: |=
|—————————————————Node:identifier Text: CAN_EFF_FLAG
|————————————————Node:; Text: ;
|———————————————Node:} Text: }
|—————————Node:expression_statement Text: filters[i] = filter;
|——————————Node:assignment_expression Text: filters[i] = filter
|———————————Node:subscript_expression Text: filters[i]
|————————————Node:identifier Text: filters
|————————————Node:subscript_argument_list Text: [i]
|—————————————Node:[ Text: [
|—————————————Node:identifier Text: i
|—————————————Node:] Text: ]
|———————————Node:= Text: =
|———————————Node:identifier Text: filter
|——————————Node:; Text: ;
|—————————Node:} Text: }
|———————Node:if_statement Text: if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_FILTER, filters, sizeof(filters)) < 0) {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
            break;
        }
|————————Node:if Text: if
|————————Node:condition_clause Text: (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_FILTER, filters, sizeof(filters)) < 0)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_FILTER, filters, sizeof(filters)) < 0
|——————————Node:call_expression Text: setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_FILTER, filters, sizeof(filters))
|———————————Node:identifier Text: setsockopt
|———————————Node:argument_list Text: (canSocket, SOL_CAN_RAW, CAN_RAW_FILTER, filters, sizeof(filters))
|————————————Node:( Text: (
|————————————Node:identifier Text: canSocket
|————————————Node:, Text: ,
|————————————Node:identifier Text: SOL_CAN_RAW
|————————————Node:, Text: ,
|————————————Node:identifier Text: CAN_RAW_FILTER
|————————————Node:, Text: ,
|————————————Node:identifier Text: filters
|————————————Node:, Text: ,
|————————————Node:sizeof_expression Text: sizeof(filters)
|—————————————Node:sizeof Text: sizeof
|—————————————Node:parenthesized_expression Text: (filters)
|——————————————Node:( Text: (
|——————————————Node:identifier Text: filters
|——————————————Node:) Text: )
|————————————Node:) Text: )
|——————————Node:< Text: <
|——————————Node:number_literal Text: 0
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
            break;
        }
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError);
|——————————Node:call_expression Text: setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError)
|———————————Node:identifier Text: setError
|———————————Node:argument_list Text: (qt_error_string(errno),
                     QCanBusDevice::CanBusError::ConfigurationError)
|————————————Node:( Text: (
|————————————Node:call_expression Text: qt_error_string(errno)
|—————————————Node:identifier Text: qt_error_string
|—————————————Node:argument_list Text: (errno)
|——————————————Node:( Text: (
|——————————————Node:identifier Text: errno
|——————————————Node:) Text: )
|————————————Node:, Text: ,
|————————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ConfigurationError
|—————————————Node:namespace_identifier Text: QCanBusDevice
|—————————————Node::: Text: ::
|—————————————Node:qualified_identifier Text: CanBusError::ConfigurationError
|——————————————Node:namespace_identifier Text: CanBusError
|——————————————Node::: Text: ::
|——————————————Node:identifier Text: ConfigurationError
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:break_statement Text: break;
|——————————Node:break Text: break
|——————————Node:; Text: ;
|—————————Node:} Text: }
|———————Node:expression_statement Text: success = true;
|————————Node:assignment_expression Text: success = true
|—————————Node:identifier Text: success
|—————————Node:= Text: =
|—————————Node:true Text: true
|————————Node:; Text: ;
|———————Node:break_statement Text: break;
|————————Node:break Text: break
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:case_statement Text: default:
        setError(tr("SocketCanBackend: No such configuration as %1 in SocketCanBackend").arg(key),
                 QCanBusDevice::CanBusError::ConfigurationError);
        break;
|——————Node:default Text: default
|——————Node:: Text: :
|——————Node:expression_statement Text: setError(tr("SocketCanBackend: No such configuration as %1 in SocketCanBackend").arg(key),
                 QCanBusDevice::CanBusError::ConfigurationError);
|———————Node:call_expression Text: setError(tr("SocketCanBackend: No such configuration as %1 in SocketCanBackend").arg(key),
                 QCanBusDevice::CanBusError::ConfigurationError)
|————————Node:identifier Text: setError
|————————Node:argument_list Text: (tr("SocketCanBackend: No such configuration as %1 in SocketCanBackend").arg(key),
                 QCanBusDevice::CanBusError::ConfigurationError)
|—————————Node:( Text: (
|—————————Node:call_expression Text: tr("SocketCanBackend: No such configuration as %1 in SocketCanBackend").arg(key)
|——————————Node:field_expression Text: tr("SocketCanBackend: No such configuration as %1 in SocketCanBackend").arg
|———————————Node:call_expression Text: tr("SocketCanBackend: No such configuration as %1 in SocketCanBackend")
|————————————Node:identifier Text: tr
|————————————Node:argument_list Text: ("SocketCanBackend: No such configuration as %1 in SocketCanBackend")
|—————————————Node:( Text: (
|—————————————Node:string_literal Text: "SocketCanBackend: No such configuration as %1 in SocketCanBackend"
|——————————————Node:" Text: "
|——————————————Node:string_content Text: SocketCanBackend: No such configuration as %1 in SocketCanBackend
|——————————————Node:" Text: "
|—————————————Node:) Text: )
|———————————Node:. Text: .
|———————————Node:field_identifier Text: arg
|——————————Node:argument_list Text: (key)
|———————————Node:( Text: (
|———————————Node:identifier Text: key
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ConfigurationError
|——————————Node:namespace_identifier Text: QCanBusDevice
|——————————Node::: Text: ::
|——————————Node:qualified_identifier Text: CanBusError::ConfigurationError
|———————————Node:namespace_identifier Text: CanBusError
|———————————Node::: Text: ::
|———————————Node:identifier Text: ConfigurationError
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment Text: //qDebug() << "applyConfiguration" << key << value << success;
|———Node:return_statement Text: return success;
|————Node:return Text: return
|————Node:identifier Text: success
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: bool SocketCanBackend::connectSocket()
{
    struct sockaddr_can address;
    struct ifreq interface;

    if ((canSocket = socket(PF_CAN, SOCK_RAW | SOCK_NONBLOCK, CAN_RAW)) < 0) {
        setError(qt_error_string(errno),
                 QCanBusDevice::CanBusError::ConnectionError);
        return false;
    }

    strcpy(interface.ifr_name, canSocketName.toLatin1().data());
    if (ioctl(canSocket, SIOCGIFINDEX, &interface) < 0) {
        setError(qt_error_string(errno),
                 QCanBusDevice::CanBusError::ConnectionError);
        return false;
    }

    address.can_family  = AF_CAN;
    address.can_ifindex = interface.ifr_ifindex;

    if (bind(canSocket, reinterpret_cast<struct sockaddr *>(&address), sizeof(address)) < 0) {
        setError(qt_error_string(errno),
                 QCanBusDevice::CanBusError::ConnectionError);
        return false;
    }

    const int fd_frames = 1;
    if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_FD_FRAMES, &fd_frames, sizeof(fd_frames)) < 0) {
        setError(qt_error_string(errno),
                 QCanBusDevice::CanBusError::ConnectionError);
        return false;
    }

    if (notifier)
        delete notifier;

    notifier = new QSocketNotifier(canSocket, QSocketNotifier::Read, this);
    connect(notifier.data(), &QSocketNotifier::activated,
            this, &SocketCanBackend::readSocket);

    //apply all stored configurations
    foreach (int key, configurationKeys()) {
        const QVariant param = configurationParameter(key);
        bool success = applyConfigurationParameter(key, param);
        if (!success) {
            qWarning() << "Cannot apply parameter:" << key
                       << "with value:" << param;
        }
    }

    return true;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: SocketCanBackend::connectSocket()
|———Node:qualified_identifier Text: SocketCanBackend::connectSocket
|————Node:namespace_identifier Text: SocketCanBackend
|————Node::: Text: ::
|————Node:identifier Text: connectSocket
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    struct sockaddr_can address;
    struct ifreq interface;

    if ((canSocket = socket(PF_CAN, SOCK_RAW | SOCK_NONBLOCK, CAN_RAW)) < 0) {
        setError(qt_error_string(errno),
                 QCanBusDevice::CanBusError::ConnectionError);
        return false;
    }

    strcpy(interface.ifr_name, canSocketName.toLatin1().data());
    if (ioctl(canSocket, SIOCGIFINDEX, &interface) < 0) {
        setError(qt_error_string(errno),
                 QCanBusDevice::CanBusError::ConnectionError);
        return false;
    }

    address.can_family  = AF_CAN;
    address.can_ifindex = interface.ifr_ifindex;

    if (bind(canSocket, reinterpret_cast<struct sockaddr *>(&address), sizeof(address)) < 0) {
        setError(qt_error_string(errno),
                 QCanBusDevice::CanBusError::ConnectionError);
        return false;
    }

    const int fd_frames = 1;
    if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_FD_FRAMES, &fd_frames, sizeof(fd_frames)) < 0) {
        setError(qt_error_string(errno),
                 QCanBusDevice::CanBusError::ConnectionError);
        return false;
    }

    if (notifier)
        delete notifier;

    notifier = new QSocketNotifier(canSocket, QSocketNotifier::Read, this);
    connect(notifier.data(), &QSocketNotifier::activated,
            this, &SocketCanBackend::readSocket);

    //apply all stored configurations
    foreach (int key, configurationKeys()) {
        const QVariant param = configurationParameter(key);
        bool success = applyConfigurationParameter(key, param);
        if (!success) {
            qWarning() << "Cannot apply parameter:" << key
                       << "with value:" << param;
        }
    }

    return true;
}
|———Node:{ Text: {
|———Node:declaration Text: struct sockaddr_can address;
|————Node:struct_specifier Text: struct sockaddr_can
|—————Node:struct Text: struct
|—————Node:type_identifier Text: sockaddr_can
|————Node:identifier Text: address
|————Node:; Text: ;
|———Node:declaration Text: struct ifreq interface;
|————Node:struct_specifier Text: struct ifreq
|—————Node:struct Text: struct
|—————Node:type_identifier Text: ifreq
|————Node:identifier Text: interface
|————Node:; Text: ;
|———Node:if_statement Text: if ((canSocket = socket(PF_CAN, SOCK_RAW | SOCK_NONBLOCK, CAN_RAW)) < 0) {
        setError(qt_error_string(errno),
                 QCanBusDevice::CanBusError::ConnectionError);
        return false;
    }
|————Node:if Text: if
|————Node:condition_clause Text: ((canSocket = socket(PF_CAN, SOCK_RAW | SOCK_NONBLOCK, CAN_RAW)) < 0)
|—————Node:( Text: (
|—————Node:binary_expression Text: (canSocket = socket(PF_CAN, SOCK_RAW | SOCK_NONBLOCK, CAN_RAW)) < 0
|——————Node:parenthesized_expression Text: (canSocket = socket(PF_CAN, SOCK_RAW | SOCK_NONBLOCK, CAN_RAW))
|———————Node:( Text: (
|———————Node:assignment_expression Text: canSocket = socket(PF_CAN, SOCK_RAW | SOCK_NONBLOCK, CAN_RAW)
|————————Node:identifier Text: canSocket
|————————Node:= Text: =
|————————Node:call_expression Text: socket(PF_CAN, SOCK_RAW | SOCK_NONBLOCK, CAN_RAW)
|—————————Node:identifier Text: socket
|—————————Node:argument_list Text: (PF_CAN, SOCK_RAW | SOCK_NONBLOCK, CAN_RAW)
|——————————Node:( Text: (
|——————————Node:identifier Text: PF_CAN
|——————————Node:, Text: ,
|——————————Node:binary_expression Text: SOCK_RAW | SOCK_NONBLOCK
|———————————Node:identifier Text: SOCK_RAW
|———————————Node:| Text: |
|———————————Node:identifier Text: SOCK_NONBLOCK
|——————————Node:, Text: ,
|——————————Node:identifier Text: CAN_RAW
|——————————Node:) Text: )
|———————Node:) Text: )
|——————Node:< Text: <
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {
        setError(qt_error_string(errno),
                 QCanBusDevice::CanBusError::ConnectionError);
        return false;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: setError(qt_error_string(errno),
                 QCanBusDevice::CanBusError::ConnectionError);
|——————Node:call_expression Text: setError(qt_error_string(errno),
                 QCanBusDevice::CanBusError::ConnectionError)
|———————Node:identifier Text: setError
|———————Node:argument_list Text: (qt_error_string(errno),
                 QCanBusDevice::CanBusError::ConnectionError)
|————————Node:( Text: (
|————————Node:call_expression Text: qt_error_string(errno)
|—————————Node:identifier Text: qt_error_string
|—————————Node:argument_list Text: (errno)
|——————————Node:( Text: (
|——————————Node:identifier Text: errno
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ConnectionError
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:qualified_identifier Text: CanBusError::ConnectionError
|——————————Node:namespace_identifier Text: CanBusError
|——————————Node::: Text: ::
|——————————Node:identifier Text: ConnectionError
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return false;
|——————Node:return Text: return
|——————Node:false Text: false
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: strcpy(interface.ifr_name, canSocketName.toLatin1().data());
|————Node:call_expression Text: strcpy(interface.ifr_name, canSocketName.toLatin1().data())
|—————Node:identifier Text: strcpy
|—————Node:argument_list Text: (interface.ifr_name, canSocketName.toLatin1().data())
|——————Node:( Text: (
|——————Node:field_expression Text: interface.ifr_name
|———————Node:identifier Text: interface
|———————Node:. Text: .
|———————Node:field_identifier Text: ifr_name
|——————Node:, Text: ,
|——————Node:call_expression Text: canSocketName.toLatin1().data()
|———————Node:field_expression Text: canSocketName.toLatin1().data
|————————Node:call_expression Text: canSocketName.toLatin1()
|—————————Node:field_expression Text: canSocketName.toLatin1
|——————————Node:identifier Text: canSocketName
|——————————Node:. Text: .
|——————————Node:field_identifier Text: toLatin1
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:. Text: .
|————————Node:field_identifier Text: data
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (ioctl(canSocket, SIOCGIFINDEX, &interface) < 0) {
        setError(qt_error_string(errno),
                 QCanBusDevice::CanBusError::ConnectionError);
        return false;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (ioctl(canSocket, SIOCGIFINDEX, &interface) < 0)
|—————Node:( Text: (
|—————Node:binary_expression Text: ioctl(canSocket, SIOCGIFINDEX, &interface) < 0
|——————Node:call_expression Text: ioctl(canSocket, SIOCGIFINDEX, &interface)
|———————Node:identifier Text: ioctl
|———————Node:argument_list Text: (canSocket, SIOCGIFINDEX, &interface)
|————————Node:( Text: (
|————————Node:identifier Text: canSocket
|————————Node:, Text: ,
|————————Node:identifier Text: SIOCGIFINDEX
|————————Node:, Text: ,
|————————Node:pointer_expression Text: &interface
|—————————Node:& Text: &
|—————————Node:identifier Text: interface
|————————Node:) Text: )
|——————Node:< Text: <
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {
        setError(qt_error_string(errno),
                 QCanBusDevice::CanBusError::ConnectionError);
        return false;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: setError(qt_error_string(errno),
                 QCanBusDevice::CanBusError::ConnectionError);
|——————Node:call_expression Text: setError(qt_error_string(errno),
                 QCanBusDevice::CanBusError::ConnectionError)
|———————Node:identifier Text: setError
|———————Node:argument_list Text: (qt_error_string(errno),
                 QCanBusDevice::CanBusError::ConnectionError)
|————————Node:( Text: (
|————————Node:call_expression Text: qt_error_string(errno)
|—————————Node:identifier Text: qt_error_string
|—————————Node:argument_list Text: (errno)
|——————————Node:( Text: (
|——————————Node:identifier Text: errno
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ConnectionError
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:qualified_identifier Text: CanBusError::ConnectionError
|——————————Node:namespace_identifier Text: CanBusError
|——————————Node::: Text: ::
|——————————Node:identifier Text: ConnectionError
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return false;
|——————Node:return Text: return
|——————Node:false Text: false
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: address.can_family  = AF_CAN;
|————Node:assignment_expression Text: address.can_family  = AF_CAN
|—————Node:field_expression Text: address.can_family
|——————Node:identifier Text: address
|——————Node:. Text: .
|——————Node:field_identifier Text: can_family
|—————Node:= Text: =
|—————Node:identifier Text: AF_CAN
|————Node:; Text: ;
|———Node:expression_statement Text: address.can_ifindex = interface.ifr_ifindex;
|————Node:assignment_expression Text: address.can_ifindex = interface.ifr_ifindex
|—————Node:field_expression Text: address.can_ifindex
|——————Node:identifier Text: address
|——————Node:. Text: .
|——————Node:field_identifier Text: can_ifindex
|—————Node:= Text: =
|—————Node:field_expression Text: interface.ifr_ifindex
|——————Node:identifier Text: interface
|——————Node:. Text: .
|——————Node:field_identifier Text: ifr_ifindex
|————Node:; Text: ;
|———Node:if_statement Text: if (bind(canSocket, reinterpret_cast<struct sockaddr *>(&address), sizeof(address)) < 0) {
        setError(qt_error_string(errno),
                 QCanBusDevice::CanBusError::ConnectionError);
        return false;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (bind(canSocket, reinterpret_cast<struct sockaddr *>(&address), sizeof(address)) < 0)
|—————Node:( Text: (
|—————Node:binary_expression Text: bind(canSocket, reinterpret_cast<struct sockaddr *>(&address), sizeof(address)) < 0
|——————Node:call_expression Text: bind(canSocket, reinterpret_cast<struct sockaddr *>(&address), sizeof(address))
|———————Node:identifier Text: bind
|———————Node:argument_list Text: (canSocket, reinterpret_cast<struct sockaddr *>(&address), sizeof(address))
|————————Node:( Text: (
|————————Node:identifier Text: canSocket
|————————Node:, Text: ,
|————————Node:call_expression Text: reinterpret_cast<struct sockaddr *>(&address)
|—————————Node:template_function Text: reinterpret_cast<struct sockaddr *>
|——————————Node:identifier Text: reinterpret_cast
|——————————Node:template_argument_list Text: <struct sockaddr *>
|———————————Node:< Text: <
|———————————Node:type_descriptor Text: struct sockaddr *
|————————————Node:struct_specifier Text: struct sockaddr
|—————————————Node:struct Text: struct
|—————————————Node:type_identifier Text: sockaddr
|————————————Node:abstract_pointer_declarator Text: *
|—————————————Node:* Text: *
|———————————Node:> Text: >
|—————————Node:argument_list Text: (&address)
|——————————Node:( Text: (
|——————————Node:pointer_expression Text: &address
|———————————Node:& Text: &
|———————————Node:identifier Text: address
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:sizeof_expression Text: sizeof(address)
|—————————Node:sizeof Text: sizeof
|—————————Node:parenthesized_expression Text: (address)
|——————————Node:( Text: (
|——————————Node:identifier Text: address
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:< Text: <
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {
        setError(qt_error_string(errno),
                 QCanBusDevice::CanBusError::ConnectionError);
        return false;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: setError(qt_error_string(errno),
                 QCanBusDevice::CanBusError::ConnectionError);
|——————Node:call_expression Text: setError(qt_error_string(errno),
                 QCanBusDevice::CanBusError::ConnectionError)
|———————Node:identifier Text: setError
|———————Node:argument_list Text: (qt_error_string(errno),
                 QCanBusDevice::CanBusError::ConnectionError)
|————————Node:( Text: (
|————————Node:call_expression Text: qt_error_string(errno)
|—————————Node:identifier Text: qt_error_string
|—————————Node:argument_list Text: (errno)
|——————————Node:( Text: (
|——————————Node:identifier Text: errno
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ConnectionError
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:qualified_identifier Text: CanBusError::ConnectionError
|——————————Node:namespace_identifier Text: CanBusError
|——————————Node::: Text: ::
|——————————Node:identifier Text: ConnectionError
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return false;
|——————Node:return Text: return
|——————Node:false Text: false
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:declaration Text: const int fd_frames = 1;
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: int
|————Node:init_declarator Text: fd_frames = 1
|—————Node:identifier Text: fd_frames
|—————Node:= Text: =
|—————Node:number_literal Text: 1
|————Node:; Text: ;
|———Node:if_statement Text: if (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_FD_FRAMES, &fd_frames, sizeof(fd_frames)) < 0) {
        setError(qt_error_string(errno),
                 QCanBusDevice::CanBusError::ConnectionError);
        return false;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_FD_FRAMES, &fd_frames, sizeof(fd_frames)) < 0)
|—————Node:( Text: (
|—————Node:binary_expression Text: setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_FD_FRAMES, &fd_frames, sizeof(fd_frames)) < 0
|——————Node:call_expression Text: setsockopt(canSocket, SOL_CAN_RAW, CAN_RAW_FD_FRAMES, &fd_frames, sizeof(fd_frames))
|———————Node:identifier Text: setsockopt
|———————Node:argument_list Text: (canSocket, SOL_CAN_RAW, CAN_RAW_FD_FRAMES, &fd_frames, sizeof(fd_frames))
|————————Node:( Text: (
|————————Node:identifier Text: canSocket
|————————Node:, Text: ,
|————————Node:identifier Text: SOL_CAN_RAW
|————————Node:, Text: ,
|————————Node:identifier Text: CAN_RAW_FD_FRAMES
|————————Node:, Text: ,
|————————Node:pointer_expression Text: &fd_frames
|—————————Node:& Text: &
|—————————Node:identifier Text: fd_frames
|————————Node:, Text: ,
|————————Node:sizeof_expression Text: sizeof(fd_frames)
|—————————Node:sizeof Text: sizeof
|—————————Node:parenthesized_expression Text: (fd_frames)
|——————————Node:( Text: (
|——————————Node:identifier Text: fd_frames
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:< Text: <
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {
        setError(qt_error_string(errno),
                 QCanBusDevice::CanBusError::ConnectionError);
        return false;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: setError(qt_error_string(errno),
                 QCanBusDevice::CanBusError::ConnectionError);
|——————Node:call_expression Text: setError(qt_error_string(errno),
                 QCanBusDevice::CanBusError::ConnectionError)
|———————Node:identifier Text: setError
|———————Node:argument_list Text: (qt_error_string(errno),
                 QCanBusDevice::CanBusError::ConnectionError)
|————————Node:( Text: (
|————————Node:call_expression Text: qt_error_string(errno)
|—————————Node:identifier Text: qt_error_string
|—————————Node:argument_list Text: (errno)
|——————————Node:( Text: (
|——————————Node:identifier Text: errno
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ConnectionError
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:qualified_identifier Text: CanBusError::ConnectionError
|——————————Node:namespace_identifier Text: CanBusError
|——————————Node::: Text: ::
|——————————Node:identifier Text: ConnectionError
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return false;
|——————Node:return Text: return
|——————Node:false Text: false
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:if_statement Text: if (notifier)
        delete notifier;
|————Node:if Text: if
|————Node:condition_clause Text: (notifier)
|—————Node:( Text: (
|—————Node:identifier Text: notifier
|—————Node:) Text: )
|————Node:expression_statement Text: delete notifier;
|—————Node:delete_expression Text: delete notifier
|——————Node:delete Text: delete
|——————Node:identifier Text: notifier
|—————Node:; Text: ;
|———Node:expression_statement Text: notifier = new QSocketNotifier(canSocket, QSocketNotifier::Read, this);
|————Node:assignment_expression Text: notifier = new QSocketNotifier(canSocket, QSocketNotifier::Read, this)
|—————Node:identifier Text: notifier
|—————Node:= Text: =
|—————Node:new_expression Text: new QSocketNotifier(canSocket, QSocketNotifier::Read, this)
|——————Node:new Text: new
|——————Node:type_identifier Text: QSocketNotifier
|——————Node:argument_list Text: (canSocket, QSocketNotifier::Read, this)
|———————Node:( Text: (
|———————Node:identifier Text: canSocket
|———————Node:, Text: ,
|———————Node:qualified_identifier Text: QSocketNotifier::Read
|————————Node:namespace_identifier Text: QSocketNotifier
|————————Node::: Text: ::
|————————Node:identifier Text: Read
|———————Node:, Text: ,
|———————Node:this Text: this
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: connect(notifier.data(), &QSocketNotifier::activated,
            this, &SocketCanBackend::readSocket);
|————Node:call_expression Text: connect(notifier.data(), &QSocketNotifier::activated,
            this, &SocketCanBackend::readSocket)
|—————Node:identifier Text: connect
|—————Node:argument_list Text: (notifier.data(), &QSocketNotifier::activated,
            this, &SocketCanBackend::readSocket)
|——————Node:( Text: (
|——————Node:call_expression Text: notifier.data()
|———————Node:field_expression Text: notifier.data
|————————Node:identifier Text: notifier
|————————Node:. Text: .
|————————Node:field_identifier Text: data
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:, Text: ,
|——————Node:pointer_expression Text: &QSocketNotifier::activated
|———————Node:& Text: &
|———————Node:qualified_identifier Text: QSocketNotifier::activated
|————————Node:namespace_identifier Text: QSocketNotifier
|————————Node::: Text: ::
|————————Node:identifier Text: activated
|——————Node:, Text: ,
|——————Node:this Text: this
|——————Node:, Text: ,
|——————Node:pointer_expression Text: &SocketCanBackend::readSocket
|———————Node:& Text: &
|———————Node:qualified_identifier Text: SocketCanBackend::readSocket
|————————Node:namespace_identifier Text: SocketCanBackend
|————————Node::: Text: ::
|————————Node:identifier Text: readSocket
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment Text: //apply all stored configurations
|———Node:function_definition Text: foreach (int key, configurationKeys()) {
        const QVariant param = configurationParameter(key);
        bool success = applyConfigurationParameter(key, param);
        if (!success) {
            qWarning() << "Cannot apply parameter:" << key
                       << "with value:" << param;
        }
    }
|————Node:function_declarator Text: foreach (int key, configurationKeys())
|—————Node:identifier Text: foreach
|—————Node:parameter_list Text: (int key, configurationKeys())
|——————Node:( Text: (
|——————Node:parameter_declaration Text: int key
|———————Node:primitive_type Text: int
|———————Node:identifier Text: key
|——————Node:, Text: ,
|——————Node:parameter_declaration Text: configurationKeys()
|———————Node:type_identifier Text: configurationKeys
|———————Node:abstract_function_declarator Text: ()
|————————Node:parameter_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|——————Node:) Text: )
|————Node:compound_statement Text: {
        const QVariant param = configurationParameter(key);
        bool success = applyConfigurationParameter(key, param);
        if (!success) {
            qWarning() << "Cannot apply parameter:" << key
                       << "with value:" << param;
        }
    }
|—————Node:{ Text: {
|—————Node:declaration Text: const QVariant param = configurationParameter(key);
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:type_identifier Text: QVariant
|——————Node:init_declarator Text: param = configurationParameter(key)
|———————Node:identifier Text: param
|———————Node:= Text: =
|———————Node:call_expression Text: configurationParameter(key)
|————————Node:identifier Text: configurationParameter
|————————Node:argument_list Text: (key)
|—————————Node:( Text: (
|—————————Node:identifier Text: key
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:declaration Text: bool success = applyConfigurationParameter(key, param);
|——————Node:primitive_type Text: bool
|——————Node:init_declarator Text: success = applyConfigurationParameter(key, param)
|———————Node:identifier Text: success
|———————Node:= Text: =
|———————Node:call_expression Text: applyConfigurationParameter(key, param)
|————————Node:identifier Text: applyConfigurationParameter
|————————Node:argument_list Text: (key, param)
|—————————Node:( Text: (
|—————————Node:identifier Text: key
|—————————Node:, Text: ,
|—————————Node:identifier Text: param
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (!success) {
            qWarning() << "Cannot apply parameter:" << key
                       << "with value:" << param;
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (!success)
|———————Node:( Text: (
|———————Node:unary_expression Text: !success
|————————Node:! Text: !
|————————Node:identifier Text: success
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            qWarning() << "Cannot apply parameter:" << key
                       << "with value:" << param;
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: qWarning() << "Cannot apply parameter:" << key
                       << "with value:" << param;
|————————Node:binary_expression Text: qWarning() << "Cannot apply parameter:" << key
                       << "with value:" << param
|—————————Node:binary_expression Text: qWarning() << "Cannot apply parameter:" << key
                       << "with value:"
|——————————Node:binary_expression Text: qWarning() << "Cannot apply parameter:" << key
|———————————Node:binary_expression Text: qWarning() << "Cannot apply parameter:"
|————————————Node:call_expression Text: qWarning()
|—————————————Node:identifier Text: qWarning
|—————————————Node:argument_list Text: ()
|——————————————Node:( Text: (
|——————————————Node:) Text: )
|————————————Node:<< Text: <<
|————————————Node:string_literal Text: "Cannot apply parameter:"
|—————————————Node:" Text: "
|—————————————Node:string_content Text: Cannot apply parameter:
|—————————————Node:" Text: "
|———————————Node:<< Text: <<
|———————————Node:identifier Text: key
|——————————Node:<< Text: <<
|——————————Node:string_literal Text: "with value:"
|———————————Node:" Text: "
|———————————Node:string_content Text: with value:
|———————————Node:" Text: "
|—————————Node:<< Text: <<
|—————————Node:identifier Text: param
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:return_statement Text: return true;
|————Node:return Text: return
|————Node:true Text: true
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void SocketCanBackend::setConfigurationParameter(int key, const QVariant &value)
{
    if (key == QCanBusDevice::RawFilterKey) {
        //verify valid/supported filters

        QList<QCanBusDevice::Filter> filters
                = value.value<QList<QCanBusDevice::Filter> >();
        foreach (QCanBusDevice::Filter f, filters) {
            switch (f.type) {
            case QCanBusFrame::UnknownFrame:

            default:
                setError(tr("Cannot set filter for frame type: %1").arg(f.type),
                         QCanBusDevice::CanBusError::ConfigurationError);
                return;
            case QCanBusFrame::InvalidFrame:
            case QCanBusFrame::DataFrame:
            case QCanBusFrame::ErrorFrame:
            case QCanBusFrame::RemoteRequestFrame:
                break;
            }

            if (f.frameId > 0x1FFFFFFFU) {
                setError(tr("FrameId %1 larger than 29 bit.").arg(f.frameId),
                         QCanBusDevice::CanBusError::ConfigurationError);
                return;
            }
        }
    }
    // connected & params not applyable/invalid
    if (canSocket != -1 && !applyConfigurationParameter(key, value))
        return;

    QCanBusDevice::setConfigurationParameter(key, value);
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: SocketCanBackend::setConfigurationParameter(int key, const QVariant &value)
|———Node:qualified_identifier Text: SocketCanBackend::setConfigurationParameter
|————Node:namespace_identifier Text: SocketCanBackend
|————Node::: Text: ::
|————Node:identifier Text: setConfigurationParameter
|———Node:parameter_list Text: (int key, const QVariant &value)
|————Node:( Text: (
|————Node:parameter_declaration Text: int key
|—————Node:primitive_type Text: int
|—————Node:identifier Text: key
|————Node:, Text: ,
|————Node:parameter_declaration Text: const QVariant &value
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: QVariant
|—————Node:reference_declarator Text: &value
|——————Node:& Text: &
|——————Node:identifier Text: value
|————Node:) Text: )
|——Node:compound_statement Text: {
    if (key == QCanBusDevice::RawFilterKey) {
        //verify valid/supported filters

        QList<QCanBusDevice::Filter> filters
                = value.value<QList<QCanBusDevice::Filter> >();
        foreach (QCanBusDevice::Filter f, filters) {
            switch (f.type) {
            case QCanBusFrame::UnknownFrame:

            default:
                setError(tr("Cannot set filter for frame type: %1").arg(f.type),
                         QCanBusDevice::CanBusError::ConfigurationError);
                return;
            case QCanBusFrame::InvalidFrame:
            case QCanBusFrame::DataFrame:
            case QCanBusFrame::ErrorFrame:
            case QCanBusFrame::RemoteRequestFrame:
                break;
            }

            if (f.frameId > 0x1FFFFFFFU) {
                setError(tr("FrameId %1 larger than 29 bit.").arg(f.frameId),
                         QCanBusDevice::CanBusError::ConfigurationError);
                return;
            }
        }
    }
    // connected & params not applyable/invalid
    if (canSocket != -1 && !applyConfigurationParameter(key, value))
        return;

    QCanBusDevice::setConfigurationParameter(key, value);
}
|———Node:{ Text: {
|———Node:if_statement Text: if (key == QCanBusDevice::RawFilterKey) {
        //verify valid/supported filters

        QList<QCanBusDevice::Filter> filters
                = value.value<QList<QCanBusDevice::Filter> >();
        foreach (QCanBusDevice::Filter f, filters) {
            switch (f.type) {
            case QCanBusFrame::UnknownFrame:

            default:
                setError(tr("Cannot set filter for frame type: %1").arg(f.type),
                         QCanBusDevice::CanBusError::ConfigurationError);
                return;
            case QCanBusFrame::InvalidFrame:
            case QCanBusFrame::DataFrame:
            case QCanBusFrame::ErrorFrame:
            case QCanBusFrame::RemoteRequestFrame:
                break;
            }

            if (f.frameId > 0x1FFFFFFFU) {
                setError(tr("FrameId %1 larger than 29 bit.").arg(f.frameId),
                         QCanBusDevice::CanBusError::ConfigurationError);
                return;
            }
        }
    }
|————Node:if Text: if
|————Node:condition_clause Text: (key == QCanBusDevice::RawFilterKey)
|—————Node:( Text: (
|—————Node:binary_expression Text: key == QCanBusDevice::RawFilterKey
|——————Node:identifier Text: key
|——————Node:== Text: ==
|——————Node:qualified_identifier Text: QCanBusDevice::RawFilterKey
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: RawFilterKey
|—————Node:) Text: )
|————Node:compound_statement Text: {
        //verify valid/supported filters

        QList<QCanBusDevice::Filter> filters
                = value.value<QList<QCanBusDevice::Filter> >();
        foreach (QCanBusDevice::Filter f, filters) {
            switch (f.type) {
            case QCanBusFrame::UnknownFrame:

            default:
                setError(tr("Cannot set filter for frame type: %1").arg(f.type),
                         QCanBusDevice::CanBusError::ConfigurationError);
                return;
            case QCanBusFrame::InvalidFrame:
            case QCanBusFrame::DataFrame:
            case QCanBusFrame::ErrorFrame:
            case QCanBusFrame::RemoteRequestFrame:
                break;
            }

            if (f.frameId > 0x1FFFFFFFU) {
                setError(tr("FrameId %1 larger than 29 bit.").arg(f.frameId),
                         QCanBusDevice::CanBusError::ConfigurationError);
                return;
            }
        }
    }
|—————Node:{ Text: {
|—————Node:comment Text: //verify valid/supported filters
|—————Node:declaration Text: QList<QCanBusDevice::Filter> filters
                = value.value<QList<QCanBusDevice::Filter> >();
|——————Node:template_type Text: QList<QCanBusDevice::Filter>
|———————Node:type_identifier Text: QList
|———————Node:template_argument_list Text: <QCanBusDevice::Filter>
|————————Node:< Text: <
|————————Node:type_descriptor Text: QCanBusDevice::Filter
|—————————Node:qualified_identifier Text: QCanBusDevice::Filter
|——————————Node:namespace_identifier Text: QCanBusDevice
|——————————Node::: Text: ::
|——————————Node:type_identifier Text: Filter
|————————Node:> Text: >
|——————Node:init_declarator Text: filters
                = value.value<QList<QCanBusDevice::Filter> >()
|———————Node:identifier Text: filters
|———————Node:= Text: =
|———————Node:call_expression Text: value.value<QList<QCanBusDevice::Filter> >()
|————————Node:field_expression Text: value.value<QList<QCanBusDevice::Filter> >
|—————————Node:identifier Text: value
|—————————Node:. Text: .
|—————————Node:template_method Text: value<QList<QCanBusDevice::Filter> >
|——————————Node:field_identifier Text: value
|——————————Node:template_argument_list Text: <QList<QCanBusDevice::Filter> >
|———————————Node:< Text: <
|———————————Node:type_descriptor Text: QList<QCanBusDevice::Filter>
|————————————Node:template_type Text: QList<QCanBusDevice::Filter>
|—————————————Node:type_identifier Text: QList
|—————————————Node:template_argument_list Text: <QCanBusDevice::Filter>
|——————————————Node:< Text: <
|——————————————Node:type_descriptor Text: QCanBusDevice::Filter
|———————————————Node:qualified_identifier Text: QCanBusDevice::Filter
|————————————————Node:namespace_identifier Text: QCanBusDevice
|————————————————Node::: Text: ::
|————————————————Node:type_identifier Text: Filter
|——————————————Node:> Text: >
|———————————Node:> Text: >
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:function_definition Text: foreach (QCanBusDevice::Filter f, filters) {
            switch (f.type) {
            case QCanBusFrame::UnknownFrame:

            default:
                setError(tr("Cannot set filter for frame type: %1").arg(f.type),
                         QCanBusDevice::CanBusError::ConfigurationError);
                return;
            case QCanBusFrame::InvalidFrame:
            case QCanBusFrame::DataFrame:
            case QCanBusFrame::ErrorFrame:
            case QCanBusFrame::RemoteRequestFrame:
                break;
            }

            if (f.frameId > 0x1FFFFFFFU) {
                setError(tr("FrameId %1 larger than 29 bit.").arg(f.frameId),
                         QCanBusDevice::CanBusError::ConfigurationError);
                return;
            }
        }
|——————Node:function_declarator Text: foreach (QCanBusDevice::Filter f, filters)
|———————Node:identifier Text: foreach
|———————Node:parameter_list Text: (QCanBusDevice::Filter f, filters)
|————————Node:( Text: (
|————————Node:parameter_declaration Text: QCanBusDevice::Filter f
|—————————Node:qualified_identifier Text: QCanBusDevice::Filter
|——————————Node:namespace_identifier Text: QCanBusDevice
|——————————Node::: Text: ::
|——————————Node:type_identifier Text: Filter
|—————————Node:identifier Text: f
|————————Node:, Text: ,
|————————Node:parameter_declaration Text: filters
|—————————Node:type_identifier Text: filters
|————————Node:) Text: )
|——————Node:compound_statement Text: {
            switch (f.type) {
            case QCanBusFrame::UnknownFrame:

            default:
                setError(tr("Cannot set filter for frame type: %1").arg(f.type),
                         QCanBusDevice::CanBusError::ConfigurationError);
                return;
            case QCanBusFrame::InvalidFrame:
            case QCanBusFrame::DataFrame:
            case QCanBusFrame::ErrorFrame:
            case QCanBusFrame::RemoteRequestFrame:
                break;
            }

            if (f.frameId > 0x1FFFFFFFU) {
                setError(tr("FrameId %1 larger than 29 bit.").arg(f.frameId),
                         QCanBusDevice::CanBusError::ConfigurationError);
                return;
            }
        }
|———————Node:{ Text: {
|———————Node:switch_statement Text: switch (f.type) {
            case QCanBusFrame::UnknownFrame:

            default:
                setError(tr("Cannot set filter for frame type: %1").arg(f.type),
                         QCanBusDevice::CanBusError::ConfigurationError);
                return;
            case QCanBusFrame::InvalidFrame:
            case QCanBusFrame::DataFrame:
            case QCanBusFrame::ErrorFrame:
            case QCanBusFrame::RemoteRequestFrame:
                break;
            }
|————————Node:switch Text: switch
|————————Node:condition_clause Text: (f.type)
|—————————Node:( Text: (
|—————————Node:field_expression Text: f.type
|——————————Node:identifier Text: f
|——————————Node:. Text: .
|——————————Node:field_identifier Text: type
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
            case QCanBusFrame::UnknownFrame:

            default:
                setError(tr("Cannot set filter for frame type: %1").arg(f.type),
                         QCanBusDevice::CanBusError::ConfigurationError);
                return;
            case QCanBusFrame::InvalidFrame:
            case QCanBusFrame::DataFrame:
            case QCanBusFrame::ErrorFrame:
            case QCanBusFrame::RemoteRequestFrame:
                break;
            }
|—————————Node:{ Text: {
|—————————Node:case_statement Text: case QCanBusFrame::UnknownFrame:
|——————————Node:case Text: case
|——————————Node:qualified_identifier Text: QCanBusFrame::UnknownFrame
|———————————Node:namespace_identifier Text: QCanBusFrame
|———————————Node::: Text: ::
|———————————Node:identifier Text: UnknownFrame
|——————————Node:: Text: :
|—————————Node:case_statement Text: default:
                setError(tr("Cannot set filter for frame type: %1").arg(f.type),
                         QCanBusDevice::CanBusError::ConfigurationError);
                return;
|——————————Node:default Text: default
|——————————Node:: Text: :
|——————————Node:expression_statement Text: setError(tr("Cannot set filter for frame type: %1").arg(f.type),
                         QCanBusDevice::CanBusError::ConfigurationError);
|———————————Node:call_expression Text: setError(tr("Cannot set filter for frame type: %1").arg(f.type),
                         QCanBusDevice::CanBusError::ConfigurationError)
|————————————Node:identifier Text: setError
|————————————Node:argument_list Text: (tr("Cannot set filter for frame type: %1").arg(f.type),
                         QCanBusDevice::CanBusError::ConfigurationError)
|—————————————Node:( Text: (
|—————————————Node:call_expression Text: tr("Cannot set filter for frame type: %1").arg(f.type)
|——————————————Node:field_expression Text: tr("Cannot set filter for frame type: %1").arg
|———————————————Node:call_expression Text: tr("Cannot set filter for frame type: %1")
|————————————————Node:identifier Text: tr
|————————————————Node:argument_list Text: ("Cannot set filter for frame type: %1")
|—————————————————Node:( Text: (
|—————————————————Node:string_literal Text: "Cannot set filter for frame type: %1"
|——————————————————Node:" Text: "
|——————————————————Node:string_content Text: Cannot set filter for frame type: %1
|——————————————————Node:" Text: "
|—————————————————Node:) Text: )
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: arg
|——————————————Node:argument_list Text: (f.type)
|———————————————Node:( Text: (
|———————————————Node:field_expression Text: f.type
|————————————————Node:identifier Text: f
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: type
|———————————————Node:) Text: )
|—————————————Node:, Text: ,
|—————————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ConfigurationError
|——————————————Node:namespace_identifier Text: QCanBusDevice
|——————————————Node::: Text: ::
|——————————————Node:qualified_identifier Text: CanBusError::ConfigurationError
|———————————————Node:namespace_identifier Text: CanBusError
|———————————————Node::: Text: ::
|———————————————Node:identifier Text: ConfigurationError
|—————————————Node:) Text: )
|———————————Node:; Text: ;
|——————————Node:return_statement Text: return;
|———————————Node:return Text: return
|———————————Node:; Text: ;
|—————————Node:case_statement Text: case QCanBusFrame::InvalidFrame:
|——————————Node:case Text: case
|——————————Node:qualified_identifier Text: QCanBusFrame::InvalidFrame
|———————————Node:namespace_identifier Text: QCanBusFrame
|———————————Node::: Text: ::
|———————————Node:identifier Text: InvalidFrame
|——————————Node:: Text: :
|—————————Node:case_statement Text: case QCanBusFrame::DataFrame:
|——————————Node:case Text: case
|——————————Node:qualified_identifier Text: QCanBusFrame::DataFrame
|———————————Node:namespace_identifier Text: QCanBusFrame
|———————————Node::: Text: ::
|———————————Node:identifier Text: DataFrame
|——————————Node:: Text: :
|—————————Node:case_statement Text: case QCanBusFrame::ErrorFrame:
|——————————Node:case Text: case
|——————————Node:qualified_identifier Text: QCanBusFrame::ErrorFrame
|———————————Node:namespace_identifier Text: QCanBusFrame
|———————————Node::: Text: ::
|———————————Node:identifier Text: ErrorFrame
|——————————Node:: Text: :
|—————————Node:case_statement Text: case QCanBusFrame::RemoteRequestFrame:
                break;
|——————————Node:case Text: case
|——————————Node:qualified_identifier Text: QCanBusFrame::RemoteRequestFrame
|———————————Node:namespace_identifier Text: QCanBusFrame
|———————————Node::: Text: ::
|———————————Node:identifier Text: RemoteRequestFrame
|——————————Node:: Text: :
|——————————Node:break_statement Text: break;
|———————————Node:break Text: break
|———————————Node:; Text: ;
|—————————Node:} Text: }
|———————Node:if_statement Text: if (f.frameId > 0x1FFFFFFFU) {
                setError(tr("FrameId %1 larger than 29 bit.").arg(f.frameId),
                         QCanBusDevice::CanBusError::ConfigurationError);
                return;
            }
|————————Node:if Text: if
|————————Node:condition_clause Text: (f.frameId > 0x1FFFFFFFU)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: f.frameId > 0x1FFFFFFFU
|——————————Node:field_expression Text: f.frameId
|———————————Node:identifier Text: f
|———————————Node:. Text: .
|———————————Node:field_identifier Text: frameId
|——————————Node:> Text: >
|——————————Node:number_literal Text: 0x1FFFFFFFU
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
                setError(tr("FrameId %1 larger than 29 bit.").arg(f.frameId),
                         QCanBusDevice::CanBusError::ConfigurationError);
                return;
            }
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: setError(tr("FrameId %1 larger than 29 bit.").arg(f.frameId),
                         QCanBusDevice::CanBusError::ConfigurationError);
|——————————Node:call_expression Text: setError(tr("FrameId %1 larger than 29 bit.").arg(f.frameId),
                         QCanBusDevice::CanBusError::ConfigurationError)
|———————————Node:identifier Text: setError
|———————————Node:argument_list Text: (tr("FrameId %1 larger than 29 bit.").arg(f.frameId),
                         QCanBusDevice::CanBusError::ConfigurationError)
|————————————Node:( Text: (
|————————————Node:call_expression Text: tr("FrameId %1 larger than 29 bit.").arg(f.frameId)
|—————————————Node:field_expression Text: tr("FrameId %1 larger than 29 bit.").arg
|——————————————Node:call_expression Text: tr("FrameId %1 larger than 29 bit.")
|———————————————Node:identifier Text: tr
|———————————————Node:argument_list Text: ("FrameId %1 larger than 29 bit.")
|————————————————Node:( Text: (
|————————————————Node:string_literal Text: "FrameId %1 larger than 29 bit."
|—————————————————Node:" Text: "
|—————————————————Node:string_content Text: FrameId %1 larger than 29 bit.
|—————————————————Node:" Text: "
|————————————————Node:) Text: )
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: arg
|—————————————Node:argument_list Text: (f.frameId)
|——————————————Node:( Text: (
|——————————————Node:field_expression Text: f.frameId
|———————————————Node:identifier Text: f
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: frameId
|——————————————Node:) Text: )
|————————————Node:, Text: ,
|————————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ConfigurationError
|—————————————Node:namespace_identifier Text: QCanBusDevice
|—————————————Node::: Text: ::
|—————————————Node:qualified_identifier Text: CanBusError::ConfigurationError
|——————————————Node:namespace_identifier Text: CanBusError
|——————————————Node::: Text: ::
|——————————————Node:identifier Text: ConfigurationError
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:return_statement Text: return;
|——————————Node:return Text: return
|——————————Node:; Text: ;
|—————————Node:} Text: }
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:comment Text: // connected & params not applyable/invalid
|———Node:if_statement Text: if (canSocket != -1 && !applyConfigurationParameter(key, value))
        return;
|————Node:if Text: if
|————Node:condition_clause Text: (canSocket != -1 && !applyConfigurationParameter(key, value))
|—————Node:( Text: (
|—————Node:binary_expression Text: canSocket != -1 && !applyConfigurationParameter(key, value)
|——————Node:binary_expression Text: canSocket != -1
|———————Node:identifier Text: canSocket
|———————Node:!= Text: !=
|———————Node:number_literal Text: -1
|——————Node:&& Text: &&
|——————Node:unary_expression Text: !applyConfigurationParameter(key, value)
|———————Node:! Text: !
|———————Node:call_expression Text: applyConfigurationParameter(key, value)
|————————Node:identifier Text: applyConfigurationParameter
|————————Node:argument_list Text: (key, value)
|—————————Node:( Text: (
|—————————Node:identifier Text: key
|—————————Node:, Text: ,
|—————————Node:identifier Text: value
|—————————Node:) Text: )
|—————Node:) Text: )
|————Node:return_statement Text: return;
|—————Node:return Text: return
|—————Node:; Text: ;
|———Node:expression_statement Text: QCanBusDevice::setConfigurationParameter(key, value);
|————Node:call_expression Text: QCanBusDevice::setConfigurationParameter(key, value)
|—————Node:qualified_identifier Text: QCanBusDevice::setConfigurationParameter
|——————Node:namespace_identifier Text: QCanBusDevice
|——————Node::: Text: ::
|——————Node:identifier Text: setConfigurationParameter
|—————Node:argument_list Text: (key, value)
|——————Node:( Text: (
|——————Node:identifier Text: key
|——————Node:, Text: ,
|——————Node:identifier Text: value
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: bool SocketCanBackend::writeFrame(const QCanBusFrame &newData)
{
    if (state() != ConnectedState)
        return false;

    canid_t canId = newData.frameId();
    if (newData.hasExtendedFrameFormat())
        canId |= CAN_EFF_FLAG;

    if (newData.frameType() == QCanBusFrame::ErrorFrame) {
        canId = (uint)(newData.error() & QCanBusFrame::AnyError);
        canId |= CAN_ERR_FLAG;
    }
    if (newData.frameType() == QCanBusFrame::RemoteRequestFrame)
        canId |= CAN_RTR_FLAG;

    bool isFdFrame = (newData.payload().size() > 8);
    if (isFdFrame && newData.payload().size() > CANFD_MAX_DLEN) {
        qWarning() << QString("payload (%1 bytes) is too large for chosen frame size of "
                              "maximal %2 bytes. Frame is discarded.").
                        arg(newData.payload().size()).arg(CANFD_MAX_DLEN);
        return false;
    }

    qint64 bytesWritten = 0;
    if (isFdFrame) {
        canfd_frame frame;
        frame.len = newData.payload().size();
        frame.can_id = canId;
        ::memcpy(frame.data, newData.payload().constData(), frame.len);

        bytesWritten = ::write(canSocket, &frame, sizeof(frame));
    } else {
        can_frame frame;
        frame.can_dlc = newData.payload().size();
        frame.can_id = canId;
        ::memcpy(frame.data, newData.payload().constData(), frame.can_dlc);

        bytesWritten = ::write(canSocket, &frame, sizeof(frame));
    }

    if (bytesWritten < 0) {
        setError(qt_error_string(errno),
                 QCanBusDevice::CanBusError::WriteError);
        return false;
    }

    emit framesWritten(1);

    return true;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: SocketCanBackend::writeFrame(const QCanBusFrame &newData)
|———Node:qualified_identifier Text: SocketCanBackend::writeFrame
|————Node:namespace_identifier Text: SocketCanBackend
|————Node::: Text: ::
|————Node:identifier Text: writeFrame
|———Node:parameter_list Text: (const QCanBusFrame &newData)
|————Node:( Text: (
|————Node:parameter_declaration Text: const QCanBusFrame &newData
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: QCanBusFrame
|—————Node:reference_declarator Text: &newData
|——————Node:& Text: &
|——————Node:identifier Text: newData
|————Node:) Text: )
|——Node:compound_statement Text: {
    if (state() != ConnectedState)
        return false;

    canid_t canId = newData.frameId();
    if (newData.hasExtendedFrameFormat())
        canId |= CAN_EFF_FLAG;

    if (newData.frameType() == QCanBusFrame::ErrorFrame) {
        canId = (uint)(newData.error() & QCanBusFrame::AnyError);
        canId |= CAN_ERR_FLAG;
    }
    if (newData.frameType() == QCanBusFrame::RemoteRequestFrame)
        canId |= CAN_RTR_FLAG;

    bool isFdFrame = (newData.payload().size() > 8);
    if (isFdFrame && newData.payload().size() > CANFD_MAX_DLEN) {
        qWarning() << QString("payload (%1 bytes) is too large for chosen frame size of "
                              "maximal %2 bytes. Frame is discarded.").
                        arg(newData.payload().size()).arg(CANFD_MAX_DLEN);
        return false;
    }

    qint64 bytesWritten = 0;
    if (isFdFrame) {
        canfd_frame frame;
        frame.len = newData.payload().size();
        frame.can_id = canId;
        ::memcpy(frame.data, newData.payload().constData(), frame.len);

        bytesWritten = ::write(canSocket, &frame, sizeof(frame));
    } else {
        can_frame frame;
        frame.can_dlc = newData.payload().size();
        frame.can_id = canId;
        ::memcpy(frame.data, newData.payload().constData(), frame.can_dlc);

        bytesWritten = ::write(canSocket, &frame, sizeof(frame));
    }

    if (bytesWritten < 0) {
        setError(qt_error_string(errno),
                 QCanBusDevice::CanBusError::WriteError);
        return false;
    }

    emit framesWritten(1);

    return true;
}
|———Node:{ Text: {
|———Node:if_statement Text: if (state() != ConnectedState)
        return false;
|————Node:if Text: if
|————Node:condition_clause Text: (state() != ConnectedState)
|—————Node:( Text: (
|—————Node:binary_expression Text: state() != ConnectedState
|——————Node:call_expression Text: state()
|———————Node:identifier Text: state
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:!= Text: !=
|——————Node:identifier Text: ConnectedState
|—————Node:) Text: )
|————Node:return_statement Text: return false;
|—————Node:return Text: return
|—————Node:false Text: false
|—————Node:; Text: ;
|———Node:declaration Text: canid_t canId = newData.frameId();
|————Node:type_identifier Text: canid_t
|————Node:init_declarator Text: canId = newData.frameId()
|—————Node:identifier Text: canId
|—————Node:= Text: =
|—————Node:call_expression Text: newData.frameId()
|——————Node:field_expression Text: newData.frameId
|———————Node:identifier Text: newData
|———————Node:. Text: .
|———————Node:field_identifier Text: frameId
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (newData.hasExtendedFrameFormat())
        canId |= CAN_EFF_FLAG;
|————Node:if Text: if
|————Node:condition_clause Text: (newData.hasExtendedFrameFormat())
|—————Node:( Text: (
|—————Node:call_expression Text: newData.hasExtendedFrameFormat()
|——————Node:field_expression Text: newData.hasExtendedFrameFormat
|———————Node:identifier Text: newData
|———————Node:. Text: .
|———————Node:field_identifier Text: hasExtendedFrameFormat
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:expression_statement Text: canId |= CAN_EFF_FLAG;
|—————Node:assignment_expression Text: canId |= CAN_EFF_FLAG
|——————Node:identifier Text: canId
|——————Node:|= Text: |=
|——————Node:identifier Text: CAN_EFF_FLAG
|—————Node:; Text: ;
|———Node:if_statement Text: if (newData.frameType() == QCanBusFrame::ErrorFrame) {
        canId = (uint)(newData.error() & QCanBusFrame::AnyError);
        canId |= CAN_ERR_FLAG;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (newData.frameType() == QCanBusFrame::ErrorFrame)
|—————Node:( Text: (
|—————Node:binary_expression Text: newData.frameType() == QCanBusFrame::ErrorFrame
|——————Node:call_expression Text: newData.frameType()
|———————Node:field_expression Text: newData.frameType
|————————Node:identifier Text: newData
|————————Node:. Text: .
|————————Node:field_identifier Text: frameType
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:== Text: ==
|——————Node:qualified_identifier Text: QCanBusFrame::ErrorFrame
|———————Node:namespace_identifier Text: QCanBusFrame
|———————Node::: Text: ::
|———————Node:identifier Text: ErrorFrame
|—————Node:) Text: )
|————Node:compound_statement Text: {
        canId = (uint)(newData.error() & QCanBusFrame::AnyError);
        canId |= CAN_ERR_FLAG;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: canId = (uint)(newData.error() & QCanBusFrame::AnyError);
|——————Node:assignment_expression Text: canId = (uint)(newData.error() & QCanBusFrame::AnyError)
|———————Node:identifier Text: canId
|———————Node:= Text: =
|———————Node:call_expression Text: (uint)(newData.error() & QCanBusFrame::AnyError)
|————————Node:parenthesized_expression Text: (uint)
|—————————Node:( Text: (
|—————————Node:identifier Text: uint
|—————————Node:) Text: )
|————————Node:argument_list Text: (newData.error() & QCanBusFrame::AnyError)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: newData.error() & QCanBusFrame::AnyError
|——————————Node:call_expression Text: newData.error()
|———————————Node:field_expression Text: newData.error
|————————————Node:identifier Text: newData
|————————————Node:. Text: .
|————————————Node:field_identifier Text: error
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:& Text: &
|——————————Node:qualified_identifier Text: QCanBusFrame::AnyError
|———————————Node:namespace_identifier Text: QCanBusFrame
|———————————Node::: Text: ::
|———————————Node:identifier Text: AnyError
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: canId |= CAN_ERR_FLAG;
|——————Node:assignment_expression Text: canId |= CAN_ERR_FLAG
|———————Node:identifier Text: canId
|———————Node:|= Text: |=
|———————Node:identifier Text: CAN_ERR_FLAG
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:if_statement Text: if (newData.frameType() == QCanBusFrame::RemoteRequestFrame)
        canId |= CAN_RTR_FLAG;
|————Node:if Text: if
|————Node:condition_clause Text: (newData.frameType() == QCanBusFrame::RemoteRequestFrame)
|—————Node:( Text: (
|—————Node:binary_expression Text: newData.frameType() == QCanBusFrame::RemoteRequestFrame
|——————Node:call_expression Text: newData.frameType()
|———————Node:field_expression Text: newData.frameType
|————————Node:identifier Text: newData
|————————Node:. Text: .
|————————Node:field_identifier Text: frameType
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:== Text: ==
|——————Node:qualified_identifier Text: QCanBusFrame::RemoteRequestFrame
|———————Node:namespace_identifier Text: QCanBusFrame
|———————Node::: Text: ::
|———————Node:identifier Text: RemoteRequestFrame
|—————Node:) Text: )
|————Node:expression_statement Text: canId |= CAN_RTR_FLAG;
|—————Node:assignment_expression Text: canId |= CAN_RTR_FLAG
|——————Node:identifier Text: canId
|——————Node:|= Text: |=
|——————Node:identifier Text: CAN_RTR_FLAG
|—————Node:; Text: ;
|———Node:declaration Text: bool isFdFrame = (newData.payload().size() > 8);
|————Node:primitive_type Text: bool
|————Node:init_declarator Text: isFdFrame = (newData.payload().size() > 8)
|—————Node:identifier Text: isFdFrame
|—————Node:= Text: =
|—————Node:parenthesized_expression Text: (newData.payload().size() > 8)
|——————Node:( Text: (
|——————Node:binary_expression Text: newData.payload().size() > 8
|———————Node:call_expression Text: newData.payload().size()
|————————Node:field_expression Text: newData.payload().size
|—————————Node:call_expression Text: newData.payload()
|——————————Node:field_expression Text: newData.payload
|———————————Node:identifier Text: newData
|———————————Node:. Text: .
|———————————Node:field_identifier Text: payload
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:. Text: .
|—————————Node:field_identifier Text: size
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:> Text: >
|———————Node:number_literal Text: 8
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (isFdFrame && newData.payload().size() > CANFD_MAX_DLEN) {
        qWarning() << QString("payload (%1 bytes) is too large for chosen frame size of "
                              "maximal %2 bytes. Frame is discarded.").
                        arg(newData.payload().size()).arg(CANFD_MAX_DLEN);
        return false;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (isFdFrame && newData.payload().size() > CANFD_MAX_DLEN)
|—————Node:( Text: (
|—————Node:binary_expression Text: isFdFrame && newData.payload().size() > CANFD_MAX_DLEN
|——————Node:identifier Text: isFdFrame
|——————Node:&& Text: &&
|——————Node:binary_expression Text: newData.payload().size() > CANFD_MAX_DLEN
|———————Node:call_expression Text: newData.payload().size()
|————————Node:field_expression Text: newData.payload().size
|—————————Node:call_expression Text: newData.payload()
|——————————Node:field_expression Text: newData.payload
|———————————Node:identifier Text: newData
|———————————Node:. Text: .
|———————————Node:field_identifier Text: payload
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:. Text: .
|—————————Node:field_identifier Text: size
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:> Text: >
|———————Node:identifier Text: CANFD_MAX_DLEN
|—————Node:) Text: )
|————Node:compound_statement Text: {
        qWarning() << QString("payload (%1 bytes) is too large for chosen frame size of "
                              "maximal %2 bytes. Frame is discarded.").
                        arg(newData.payload().size()).arg(CANFD_MAX_DLEN);
        return false;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: qWarning() << QString("payload (%1 bytes) is too large for chosen frame size of "
                              "maximal %2 bytes. Frame is discarded.").
                        arg(newData.payload().size()).arg(CANFD_MAX_DLEN);
|——————Node:binary_expression Text: qWarning() << QString("payload (%1 bytes) is too large for chosen frame size of "
                              "maximal %2 bytes. Frame is discarded.").
                        arg(newData.payload().size()).arg(CANFD_MAX_DLEN)
|———————Node:call_expression Text: qWarning()
|————————Node:identifier Text: qWarning
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:<< Text: <<
|———————Node:call_expression Text: QString("payload (%1 bytes) is too large for chosen frame size of "
                              "maximal %2 bytes. Frame is discarded.").
                        arg(newData.payload().size()).arg(CANFD_MAX_DLEN)
|————————Node:field_expression Text: QString("payload (%1 bytes) is too large for chosen frame size of "
                              "maximal %2 bytes. Frame is discarded.").
                        arg(newData.payload().size()).arg
|—————————Node:call_expression Text: QString("payload (%1 bytes) is too large for chosen frame size of "
                              "maximal %2 bytes. Frame is discarded.").
                        arg(newData.payload().size())
|——————————Node:field_expression Text: QString("payload (%1 bytes) is too large for chosen frame size of "
                              "maximal %2 bytes. Frame is discarded.").
                        arg
|———————————Node:call_expression Text: QString("payload (%1 bytes) is too large for chosen frame size of "
                              "maximal %2 bytes. Frame is discarded.")
|————————————Node:identifier Text: QString
|————————————Node:argument_list Text: ("payload (%1 bytes) is too large for chosen frame size of "
                              "maximal %2 bytes. Frame is discarded.")
|—————————————Node:( Text: (
|—————————————Node:concatenated_string Text: "payload (%1 bytes) is too large for chosen frame size of "
                              "maximal %2 bytes. Frame is discarded."
|——————————————Node:string_literal Text: "payload (%1 bytes) is too large for chosen frame size of "
|———————————————Node:" Text: "
|———————————————Node:string_content Text: payload (%1 bytes) is too large for chosen frame size of 
|———————————————Node:" Text: "
|——————————————Node:string_literal Text: "maximal %2 bytes. Frame is discarded."
|———————————————Node:" Text: "
|———————————————Node:string_content Text: maximal %2 bytes. Frame is discarded.
|———————————————Node:" Text: "
|—————————————Node:) Text: )
|———————————Node:. Text: .
|———————————Node:field_identifier Text: arg
|——————————Node:argument_list Text: (newData.payload().size())
|———————————Node:( Text: (
|———————————Node:call_expression Text: newData.payload().size()
|————————————Node:field_expression Text: newData.payload().size
|—————————————Node:call_expression Text: newData.payload()
|——————————————Node:field_expression Text: newData.payload
|———————————————Node:identifier Text: newData
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: payload
|——————————————Node:argument_list Text: ()
|———————————————Node:( Text: (
|———————————————Node:) Text: )
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: size
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:. Text: .
|—————————Node:field_identifier Text: arg
|————————Node:argument_list Text: (CANFD_MAX_DLEN)
|—————————Node:( Text: (
|—————————Node:identifier Text: CANFD_MAX_DLEN
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return false;
|——————Node:return Text: return
|——————Node:false Text: false
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:declaration Text: qint64 bytesWritten = 0;
|————Node:type_identifier Text: qint64
|————Node:init_declarator Text: bytesWritten = 0
|—————Node:identifier Text: bytesWritten
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:if_statement Text: if (isFdFrame) {
        canfd_frame frame;
        frame.len = newData.payload().size();
        frame.can_id = canId;
        ::memcpy(frame.data, newData.payload().constData(), frame.len);

        bytesWritten = ::write(canSocket, &frame, sizeof(frame));
    } else {
        can_frame frame;
        frame.can_dlc = newData.payload().size();
        frame.can_id = canId;
        ::memcpy(frame.data, newData.payload().constData(), frame.can_dlc);

        bytesWritten = ::write(canSocket, &frame, sizeof(frame));
    }
|————Node:if Text: if
|————Node:condition_clause Text: (isFdFrame)
|—————Node:( Text: (
|—————Node:identifier Text: isFdFrame
|—————Node:) Text: )
|————Node:compound_statement Text: {
        canfd_frame frame;
        frame.len = newData.payload().size();
        frame.can_id = canId;
        ::memcpy(frame.data, newData.payload().constData(), frame.len);

        bytesWritten = ::write(canSocket, &frame, sizeof(frame));
    }
|—————Node:{ Text: {
|—————Node:declaration Text: canfd_frame frame;
|——————Node:type_identifier Text: canfd_frame
|——————Node:identifier Text: frame
|——————Node:; Text: ;
|—————Node:expression_statement Text: frame.len = newData.payload().size();
|——————Node:assignment_expression Text: frame.len = newData.payload().size()
|———————Node:field_expression Text: frame.len
|————————Node:identifier Text: frame
|————————Node:. Text: .
|————————Node:field_identifier Text: len
|———————Node:= Text: =
|———————Node:call_expression Text: newData.payload().size()
|————————Node:field_expression Text: newData.payload().size
|—————————Node:call_expression Text: newData.payload()
|——————————Node:field_expression Text: newData.payload
|———————————Node:identifier Text: newData
|———————————Node:. Text: .
|———————————Node:field_identifier Text: payload
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:. Text: .
|—————————Node:field_identifier Text: size
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: frame.can_id = canId;
|——————Node:assignment_expression Text: frame.can_id = canId
|———————Node:field_expression Text: frame.can_id
|————————Node:identifier Text: frame
|————————Node:. Text: .
|————————Node:field_identifier Text: can_id
|———————Node:= Text: =
|———————Node:identifier Text: canId
|——————Node:; Text: ;
|—————Node:expression_statement Text: ::memcpy(frame.data, newData.payload().constData(), frame.len);
|——————Node:call_expression Text: ::memcpy(frame.data, newData.payload().constData(), frame.len)
|———————Node:qualified_identifier Text: ::memcpy
|————————Node::: Text: ::
|————————Node:identifier Text: memcpy
|———————Node:argument_list Text: (frame.data, newData.payload().constData(), frame.len)
|————————Node:( Text: (
|————————Node:field_expression Text: frame.data
|—————————Node:identifier Text: frame
|—————————Node:. Text: .
|—————————Node:field_identifier Text: data
|————————Node:, Text: ,
|————————Node:call_expression Text: newData.payload().constData()
|—————————Node:field_expression Text: newData.payload().constData
|——————————Node:call_expression Text: newData.payload()
|———————————Node:field_expression Text: newData.payload
|————————————Node:identifier Text: newData
|————————————Node:. Text: .
|————————————Node:field_identifier Text: payload
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:. Text: .
|——————————Node:field_identifier Text: constData
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:field_expression Text: frame.len
|—————————Node:identifier Text: frame
|—————————Node:. Text: .
|—————————Node:field_identifier Text: len
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: bytesWritten = ::write(canSocket, &frame, sizeof(frame));
|——————Node:assignment_expression Text: bytesWritten = ::write(canSocket, &frame, sizeof(frame))
|———————Node:identifier Text: bytesWritten
|———————Node:= Text: =
|———————Node:call_expression Text: ::write(canSocket, &frame, sizeof(frame))
|————————Node:qualified_identifier Text: ::write
|—————————Node::: Text: ::
|—————————Node:identifier Text: write
|————————Node:argument_list Text: (canSocket, &frame, sizeof(frame))
|—————————Node:( Text: (
|—————————Node:identifier Text: canSocket
|—————————Node:, Text: ,
|—————————Node:pointer_expression Text: &frame
|——————————Node:& Text: &
|——————————Node:identifier Text: frame
|—————————Node:, Text: ,
|—————————Node:sizeof_expression Text: sizeof(frame)
|——————————Node:sizeof Text: sizeof
|——————————Node:parenthesized_expression Text: (frame)
|———————————Node:( Text: (
|———————————Node:identifier Text: frame
|———————————Node:) Text: )
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else {
        can_frame frame;
        frame.can_dlc = newData.payload().size();
        frame.can_id = canId;
        ::memcpy(frame.data, newData.payload().constData(), frame.can_dlc);

        bytesWritten = ::write(canSocket, &frame, sizeof(frame));
    }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
        can_frame frame;
        frame.can_dlc = newData.payload().size();
        frame.can_id = canId;
        ::memcpy(frame.data, newData.payload().constData(), frame.can_dlc);

        bytesWritten = ::write(canSocket, &frame, sizeof(frame));
    }
|——————Node:{ Text: {
|——————Node:declaration Text: can_frame frame;
|———————Node:type_identifier Text: can_frame
|———————Node:identifier Text: frame
|———————Node:; Text: ;
|——————Node:expression_statement Text: frame.can_dlc = newData.payload().size();
|———————Node:assignment_expression Text: frame.can_dlc = newData.payload().size()
|————————Node:field_expression Text: frame.can_dlc
|—————————Node:identifier Text: frame
|—————————Node:. Text: .
|—————————Node:field_identifier Text: can_dlc
|————————Node:= Text: =
|————————Node:call_expression Text: newData.payload().size()
|—————————Node:field_expression Text: newData.payload().size
|——————————Node:call_expression Text: newData.payload()
|———————————Node:field_expression Text: newData.payload
|————————————Node:identifier Text: newData
|————————————Node:. Text: .
|————————————Node:field_identifier Text: payload
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:. Text: .
|——————————Node:field_identifier Text: size
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: frame.can_id = canId;
|———————Node:assignment_expression Text: frame.can_id = canId
|————————Node:field_expression Text: frame.can_id
|—————————Node:identifier Text: frame
|—————————Node:. Text: .
|—————————Node:field_identifier Text: can_id
|————————Node:= Text: =
|————————Node:identifier Text: canId
|———————Node:; Text: ;
|——————Node:expression_statement Text: ::memcpy(frame.data, newData.payload().constData(), frame.can_dlc);
|———————Node:call_expression Text: ::memcpy(frame.data, newData.payload().constData(), frame.can_dlc)
|————————Node:qualified_identifier Text: ::memcpy
|—————————Node::: Text: ::
|—————————Node:identifier Text: memcpy
|————————Node:argument_list Text: (frame.data, newData.payload().constData(), frame.can_dlc)
|—————————Node:( Text: (
|—————————Node:field_expression Text: frame.data
|——————————Node:identifier Text: frame
|——————————Node:. Text: .
|——————————Node:field_identifier Text: data
|—————————Node:, Text: ,
|—————————Node:call_expression Text: newData.payload().constData()
|——————————Node:field_expression Text: newData.payload().constData
|———————————Node:call_expression Text: newData.payload()
|————————————Node:field_expression Text: newData.payload
|—————————————Node:identifier Text: newData
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: payload
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:. Text: .
|———————————Node:field_identifier Text: constData
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:field_expression Text: frame.can_dlc
|——————————Node:identifier Text: frame
|——————————Node:. Text: .
|——————————Node:field_identifier Text: can_dlc
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: bytesWritten = ::write(canSocket, &frame, sizeof(frame));
|———————Node:assignment_expression Text: bytesWritten = ::write(canSocket, &frame, sizeof(frame))
|————————Node:identifier Text: bytesWritten
|————————Node:= Text: =
|————————Node:call_expression Text: ::write(canSocket, &frame, sizeof(frame))
|—————————Node:qualified_identifier Text: ::write
|——————————Node::: Text: ::
|——————————Node:identifier Text: write
|—————————Node:argument_list Text: (canSocket, &frame, sizeof(frame))
|——————————Node:( Text: (
|——————————Node:identifier Text: canSocket
|——————————Node:, Text: ,
|——————————Node:pointer_expression Text: &frame
|———————————Node:& Text: &
|———————————Node:identifier Text: frame
|——————————Node:, Text: ,
|——————————Node:sizeof_expression Text: sizeof(frame)
|———————————Node:sizeof Text: sizeof
|———————————Node:parenthesized_expression Text: (frame)
|————————————Node:( Text: (
|————————————Node:identifier Text: frame
|————————————Node:) Text: )
|——————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:} Text: }
|———Node:if_statement Text: if (bytesWritten < 0) {
        setError(qt_error_string(errno),
                 QCanBusDevice::CanBusError::WriteError);
        return false;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (bytesWritten < 0)
|—————Node:( Text: (
|—————Node:binary_expression Text: bytesWritten < 0
|——————Node:identifier Text: bytesWritten
|——————Node:< Text: <
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {
        setError(qt_error_string(errno),
                 QCanBusDevice::CanBusError::WriteError);
        return false;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: setError(qt_error_string(errno),
                 QCanBusDevice::CanBusError::WriteError);
|——————Node:call_expression Text: setError(qt_error_string(errno),
                 QCanBusDevice::CanBusError::WriteError)
|———————Node:identifier Text: setError
|———————Node:argument_list Text: (qt_error_string(errno),
                 QCanBusDevice::CanBusError::WriteError)
|————————Node:( Text: (
|————————Node:call_expression Text: qt_error_string(errno)
|—————————Node:identifier Text: qt_error_string
|—————————Node:argument_list Text: (errno)
|——————————Node:( Text: (
|——————————Node:identifier Text: errno
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::WriteError
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:qualified_identifier Text: CanBusError::WriteError
|——————————Node:namespace_identifier Text: CanBusError
|——————————Node::: Text: ::
|——————————Node:identifier Text: WriteError
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return false;
|——————Node:return Text: return
|——————Node:false Text: false
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:declaration Text: emit framesWritten(1);
|————Node:type_identifier Text: emit
|————Node:init_declarator Text: framesWritten(1)
|—————Node:identifier Text: framesWritten
|—————Node:argument_list Text: (1)
|——————Node:( Text: (
|——————Node:number_literal Text: 1
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return true;
|————Node:return Text: return
|————Node:true Text: true
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: QString SocketCanBackend::interpretErrorFrame(const QCanBusFrame &errorFrame)
{
    if (errorFrame.frameType() != QCanBusFrame::ErrorFrame)
        return QString();

    // the payload may contain the error details
    const QByteArray data = errorFrame.payload();
    QString errorMsg;

    if (errorFrame.error() & QCanBusFrame::TransmissionTimeoutError)
        errorMsg += QStringLiteral("TX timout\n");

    if (errorFrame.error() & QCanBusFrame::MissingAcknowledgmentError)
        errorMsg += QStringLiteral("Received no ACK on transmission\n");

    if (errorFrame.error() & QCanBusFrame::BusOffError)
        errorMsg += QStringLiteral("Bus off\n");

    if (errorFrame.error() & QCanBusFrame::BusError)
        errorMsg += QStringLiteral("Bus error\n");

    if (errorFrame.error() & QCanBusFrame::ControllerRestartError)
        errorMsg += QStringLiteral("Controller restarted\n");

    if (errorFrame.error() & QCanBusFrame::UnknownError)
        errorMsg += QStringLiteral("Unknown error\n");

    if (errorFrame.error() & QCanBusFrame::LostArbitrationError) {
        errorMsg += QStringLiteral("Lost arbitration:\n");
        if (data.size() >= 1) {
            errorMsg += QString::number(data.at(0), 16);
            errorMsg += QStringLiteral(" bit\n");
        }
    }

    if (errorFrame.error() & QCanBusFrame::ControllerError) {
        errorMsg += QStringLiteral("Controller problem:\n");
        if (data.size() >= 2) {
            char b = data.at(1) ;
            if (b & CAN_ERR_CRTL_RX_OVERFLOW)
                errorMsg += QStringLiteral(" RX buffer overflow\n");
            if (b & CAN_ERR_CRTL_TX_OVERFLOW)
                errorMsg += QStringLiteral(" TX buffer overflow\n");
            if (b & CAN_ERR_CRTL_RX_WARNING)
                errorMsg += QStringLiteral(" reached warning level for RX errors\n");
            if (b & CAN_ERR_CRTL_TX_WARNING)
                errorMsg += QStringLiteral(" reached warning level for TX errors\n");
            if (b & CAN_ERR_CRTL_RX_PASSIVE)
                errorMsg += QStringLiteral(" reached error passive status RX\n");
            if (b & CAN_ERR_CRTL_TX_PASSIVE)
                errorMsg += QStringLiteral(" reached error passive status TX\n");

            if (b == CAN_ERR_CRTL_UNSPEC)
                errorMsg += QStringLiteral(" Unspecified error\n");
        }
    }

    if (errorFrame.error() & QCanBusFrame::TransceiverError) {
        errorMsg = QStringLiteral("Transceiver status:");
        if (data.size() >= 5) {
            char b = data.at(4);
            if (b & CAN_ERR_TRX_CANH_NO_WIRE)
                errorMsg += QStringLiteral(" CAN-transceiver CANH no wire\n");
            if (b & CAN_ERR_TRX_CANH_SHORT_TO_BAT)
                errorMsg += QStringLiteral(" CAN-transceiver CANH short to bat\n");
            if (b & CAN_ERR_TRX_CANH_SHORT_TO_VCC)
                errorMsg += QStringLiteral(" CAN-transceiver CANH short to vcc\n");
            if (b & CAN_ERR_TRX_CANH_SHORT_TO_GND)
                errorMsg += QStringLiteral(" CAN-transceiver CANH short to ground\n");
            if (b & CAN_ERR_TRX_CANL_NO_WIRE)
                errorMsg += QStringLiteral(" CAN-transceiver CANL no wire\n");
            if (b & CAN_ERR_TRX_CANL_SHORT_TO_BAT)
                errorMsg += QStringLiteral(" CAN-transceiver CANL short to bat\n");
            if (b & CAN_ERR_TRX_CANL_SHORT_TO_VCC)
                errorMsg += QStringLiteral(" CAN-transceiver CANL short to vcc\n");
            if (b & CAN_ERR_TRX_CANL_SHORT_TO_GND)
                errorMsg += QStringLiteral(" CAN-transceiver CANL short to ground\n");
            if (b & CAN_ERR_TRX_CANL_SHORT_TO_CANH)
                errorMsg += QStringLiteral(" CAN-transceiver CANL short to CANH\n");

            if (b == CAN_ERR_TRX_UNSPEC)
                errorMsg += QStringLiteral(" unspecified\n");
        }

    }

    if (errorFrame.error() & QCanBusFrame::ProtocolViolationError) {
        errorMsg += QStringLiteral("Protocol violation:\n");
        if (data.size() > 3) {
            char b = data.at(2);
            if (b & CAN_ERR_PROT_BIT)
                errorMsg += QStringLiteral(" single bit error\n");
            if (b & CAN_ERR_PROT_FORM)
                errorMsg += QStringLiteral(" frame format error\n");
            if (b & CAN_ERR_PROT_STUFF)
                errorMsg += QStringLiteral(" bit stuffing error\n");
            if (b & CAN_ERR_PROT_BIT0)
                errorMsg += QStringLiteral(" unable to send dominant bit\n");
            if (b & CAN_ERR_PROT_BIT1)
                errorMsg += QStringLiteral(" unable to send recessive bit\n");
            if (b & CAN_ERR_PROT_OVERLOAD)
                errorMsg += QStringLiteral(" bus overload\n");
            if (b & CAN_ERR_PROT_ACTIVE)
                errorMsg += QStringLiteral(" active error announcement\n");
            if (b & CAN_ERR_PROT_TX)
                errorMsg += QStringLiteral(" error occurred on transmission\n");

            if (b == CAN_ERR_PROT_UNSPEC)
                errorMsg += QStringLiteral(" unspecified\n");
        }
        if (data.size() > 4) {
            char b = data.at(3);
            if (b == CAN_ERR_PROT_LOC_SOF)
                errorMsg += QStringLiteral(" start of frame\n");
            if (b == CAN_ERR_PROT_LOC_ID28_21)
                errorMsg += QStringLiteral(" ID bits 28 - 21 (SFF: 10 - 3)\n");
            if (b == CAN_ERR_PROT_LOC_ID20_18)
                errorMsg += QStringLiteral(" ID bits 20 - 18 (SFF: 2 - 0 )\n");
            if (b == CAN_ERR_PROT_LOC_SRTR)
                errorMsg += QStringLiteral(" substitute RTR (SFF: RTR)\n");
            if (b == CAN_ERR_PROT_LOC_IDE)
                errorMsg += QStringLiteral(" identifier extension\n");
            if (b == CAN_ERR_PROT_LOC_ID17_13)
                errorMsg += QStringLiteral(" ID bits 17-13\n");
            if (b == CAN_ERR_PROT_LOC_ID12_05)
                errorMsg += QStringLiteral(" ID bits 12-5\n");
            if (b == CAN_ERR_PROT_LOC_ID04_00)
                errorMsg += QStringLiteral(" ID bits 4-0\n");
            if (b == CAN_ERR_PROT_LOC_RTR)
                errorMsg += QStringLiteral(" RTR\n");
            if (b == CAN_ERR_PROT_LOC_RES1)
                errorMsg += QStringLiteral(" reserved bit 1\n");
            if (b == CAN_ERR_PROT_LOC_RES0)
                errorMsg += QStringLiteral(" reserved bit 0\n");
            if (b == CAN_ERR_PROT_LOC_DLC)
                errorMsg += QStringLiteral(" data length code\n");
            if (b == CAN_ERR_PROT_LOC_DATA)
                errorMsg += QStringLiteral(" data section\n");
            if (b == CAN_ERR_PROT_LOC_CRC_SEQ)
                errorMsg += QStringLiteral(" CRC sequence\n");
            if (b == CAN_ERR_PROT_LOC_CRC_DEL)
                errorMsg += QStringLiteral(" CRC delimiter\n");
            if (b == CAN_ERR_PROT_LOC_ACK)
                errorMsg += QStringLiteral(" ACK slot\n");
            if (b == CAN_ERR_PROT_LOC_ACK_DEL)
                errorMsg += QStringLiteral(" ACK delimiter\n");
            if (b == CAN_ERR_PROT_LOC_EOF)
                errorMsg += QStringLiteral(" end of frame\n");
            if (b == CAN_ERR_PROT_LOC_INTERM)
                errorMsg += QStringLiteral(" Intermission\n");

            if (b == CAN_ERR_PROT_LOC_UNSPEC)
                errorMsg += QStringLiteral(" unspecified\n");
        }
    }

    // cut trailing \n
    if (!errorMsg.isEmpty())
        errorMsg.chop(1);

    return errorMsg;
}
|——Node:type_identifier Text: QString
|——Node:function_declarator Text: SocketCanBackend::interpretErrorFrame(const QCanBusFrame &errorFrame)
|———Node:qualified_identifier Text: SocketCanBackend::interpretErrorFrame
|————Node:namespace_identifier Text: SocketCanBackend
|————Node::: Text: ::
|————Node:identifier Text: interpretErrorFrame
|———Node:parameter_list Text: (const QCanBusFrame &errorFrame)
|————Node:( Text: (
|————Node:parameter_declaration Text: const QCanBusFrame &errorFrame
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: QCanBusFrame
|—————Node:reference_declarator Text: &errorFrame
|——————Node:& Text: &
|——————Node:identifier Text: errorFrame
|————Node:) Text: )
|——Node:compound_statement Text: {
    if (errorFrame.frameType() != QCanBusFrame::ErrorFrame)
        return QString();

    // the payload may contain the error details
    const QByteArray data = errorFrame.payload();
    QString errorMsg;

    if (errorFrame.error() & QCanBusFrame::TransmissionTimeoutError)
        errorMsg += QStringLiteral("TX timout\n");

    if (errorFrame.error() & QCanBusFrame::MissingAcknowledgmentError)
        errorMsg += QStringLiteral("Received no ACK on transmission\n");

    if (errorFrame.error() & QCanBusFrame::BusOffError)
        errorMsg += QStringLiteral("Bus off\n");

    if (errorFrame.error() & QCanBusFrame::BusError)
        errorMsg += QStringLiteral("Bus error\n");

    if (errorFrame.error() & QCanBusFrame::ControllerRestartError)
        errorMsg += QStringLiteral("Controller restarted\n");

    if (errorFrame.error() & QCanBusFrame::UnknownError)
        errorMsg += QStringLiteral("Unknown error\n");

    if (errorFrame.error() & QCanBusFrame::LostArbitrationError) {
        errorMsg += QStringLiteral("Lost arbitration:\n");
        if (data.size() >= 1) {
            errorMsg += QString::number(data.at(0), 16);
            errorMsg += QStringLiteral(" bit\n");
        }
    }

    if (errorFrame.error() & QCanBusFrame::ControllerError) {
        errorMsg += QStringLiteral("Controller problem:\n");
        if (data.size() >= 2) {
            char b = data.at(1) ;
            if (b & CAN_ERR_CRTL_RX_OVERFLOW)
                errorMsg += QStringLiteral(" RX buffer overflow\n");
            if (b & CAN_ERR_CRTL_TX_OVERFLOW)
                errorMsg += QStringLiteral(" TX buffer overflow\n");
            if (b & CAN_ERR_CRTL_RX_WARNING)
                errorMsg += QStringLiteral(" reached warning level for RX errors\n");
            if (b & CAN_ERR_CRTL_TX_WARNING)
                errorMsg += QStringLiteral(" reached warning level for TX errors\n");
            if (b & CAN_ERR_CRTL_RX_PASSIVE)
                errorMsg += QStringLiteral(" reached error passive status RX\n");
            if (b & CAN_ERR_CRTL_TX_PASSIVE)
                errorMsg += QStringLiteral(" reached error passive status TX\n");

            if (b == CAN_ERR_CRTL_UNSPEC)
                errorMsg += QStringLiteral(" Unspecified error\n");
        }
    }

    if (errorFrame.error() & QCanBusFrame::TransceiverError) {
        errorMsg = QStringLiteral("Transceiver status:");
        if (data.size() >= 5) {
            char b = data.at(4);
            if (b & CAN_ERR_TRX_CANH_NO_WIRE)
                errorMsg += QStringLiteral(" CAN-transceiver CANH no wire\n");
            if (b & CAN_ERR_TRX_CANH_SHORT_TO_BAT)
                errorMsg += QStringLiteral(" CAN-transceiver CANH short to bat\n");
            if (b & CAN_ERR_TRX_CANH_SHORT_TO_VCC)
                errorMsg += QStringLiteral(" CAN-transceiver CANH short to vcc\n");
            if (b & CAN_ERR_TRX_CANH_SHORT_TO_GND)
                errorMsg += QStringLiteral(" CAN-transceiver CANH short to ground\n");
            if (b & CAN_ERR_TRX_CANL_NO_WIRE)
                errorMsg += QStringLiteral(" CAN-transceiver CANL no wire\n");
            if (b & CAN_ERR_TRX_CANL_SHORT_TO_BAT)
                errorMsg += QStringLiteral(" CAN-transceiver CANL short to bat\n");
            if (b & CAN_ERR_TRX_CANL_SHORT_TO_VCC)
                errorMsg += QStringLiteral(" CAN-transceiver CANL short to vcc\n");
            if (b & CAN_ERR_TRX_CANL_SHORT_TO_GND)
                errorMsg += QStringLiteral(" CAN-transceiver CANL short to ground\n");
            if (b & CAN_ERR_TRX_CANL_SHORT_TO_CANH)
                errorMsg += QStringLiteral(" CAN-transceiver CANL short to CANH\n");

            if (b == CAN_ERR_TRX_UNSPEC)
                errorMsg += QStringLiteral(" unspecified\n");
        }

    }

    if (errorFrame.error() & QCanBusFrame::ProtocolViolationError) {
        errorMsg += QStringLiteral("Protocol violation:\n");
        if (data.size() > 3) {
            char b = data.at(2);
            if (b & CAN_ERR_PROT_BIT)
                errorMsg += QStringLiteral(" single bit error\n");
            if (b & CAN_ERR_PROT_FORM)
                errorMsg += QStringLiteral(" frame format error\n");
            if (b & CAN_ERR_PROT_STUFF)
                errorMsg += QStringLiteral(" bit stuffing error\n");
            if (b & CAN_ERR_PROT_BIT0)
                errorMsg += QStringLiteral(" unable to send dominant bit\n");
            if (b & CAN_ERR_PROT_BIT1)
                errorMsg += QStringLiteral(" unable to send recessive bit\n");
            if (b & CAN_ERR_PROT_OVERLOAD)
                errorMsg += QStringLiteral(" bus overload\n");
            if (b & CAN_ERR_PROT_ACTIVE)
                errorMsg += QStringLiteral(" active error announcement\n");
            if (b & CAN_ERR_PROT_TX)
                errorMsg += QStringLiteral(" error occurred on transmission\n");

            if (b == CAN_ERR_PROT_UNSPEC)
                errorMsg += QStringLiteral(" unspecified\n");
        }
        if (data.size() > 4) {
            char b = data.at(3);
            if (b == CAN_ERR_PROT_LOC_SOF)
                errorMsg += QStringLiteral(" start of frame\n");
            if (b == CAN_ERR_PROT_LOC_ID28_21)
                errorMsg += QStringLiteral(" ID bits 28 - 21 (SFF: 10 - 3)\n");
            if (b == CAN_ERR_PROT_LOC_ID20_18)
                errorMsg += QStringLiteral(" ID bits 20 - 18 (SFF: 2 - 0 )\n");
            if (b == CAN_ERR_PROT_LOC_SRTR)
                errorMsg += QStringLiteral(" substitute RTR (SFF: RTR)\n");
            if (b == CAN_ERR_PROT_LOC_IDE)
                errorMsg += QStringLiteral(" identifier extension\n");
            if (b == CAN_ERR_PROT_LOC_ID17_13)
                errorMsg += QStringLiteral(" ID bits 17-13\n");
            if (b == CAN_ERR_PROT_LOC_ID12_05)
                errorMsg += QStringLiteral(" ID bits 12-5\n");
            if (b == CAN_ERR_PROT_LOC_ID04_00)
                errorMsg += QStringLiteral(" ID bits 4-0\n");
            if (b == CAN_ERR_PROT_LOC_RTR)
                errorMsg += QStringLiteral(" RTR\n");
            if (b == CAN_ERR_PROT_LOC_RES1)
                errorMsg += QStringLiteral(" reserved bit 1\n");
            if (b == CAN_ERR_PROT_LOC_RES0)
                errorMsg += QStringLiteral(" reserved bit 0\n");
            if (b == CAN_ERR_PROT_LOC_DLC)
                errorMsg += QStringLiteral(" data length code\n");
            if (b == CAN_ERR_PROT_LOC_DATA)
                errorMsg += QStringLiteral(" data section\n");
            if (b == CAN_ERR_PROT_LOC_CRC_SEQ)
                errorMsg += QStringLiteral(" CRC sequence\n");
            if (b == CAN_ERR_PROT_LOC_CRC_DEL)
                errorMsg += QStringLiteral(" CRC delimiter\n");
            if (b == CAN_ERR_PROT_LOC_ACK)
                errorMsg += QStringLiteral(" ACK slot\n");
            if (b == CAN_ERR_PROT_LOC_ACK_DEL)
                errorMsg += QStringLiteral(" ACK delimiter\n");
            if (b == CAN_ERR_PROT_LOC_EOF)
                errorMsg += QStringLiteral(" end of frame\n");
            if (b == CAN_ERR_PROT_LOC_INTERM)
                errorMsg += QStringLiteral(" Intermission\n");

            if (b == CAN_ERR_PROT_LOC_UNSPEC)
                errorMsg += QStringLiteral(" unspecified\n");
        }
    }

    // cut trailing \n
    if (!errorMsg.isEmpty())
        errorMsg.chop(1);

    return errorMsg;
}
|———Node:{ Text: {
|———Node:if_statement Text: if (errorFrame.frameType() != QCanBusFrame::ErrorFrame)
        return QString();
|————Node:if Text: if
|————Node:condition_clause Text: (errorFrame.frameType() != QCanBusFrame::ErrorFrame)
|—————Node:( Text: (
|—————Node:binary_expression Text: errorFrame.frameType() != QCanBusFrame::ErrorFrame
|——————Node:call_expression Text: errorFrame.frameType()
|———————Node:field_expression Text: errorFrame.frameType
|————————Node:identifier Text: errorFrame
|————————Node:. Text: .
|————————Node:field_identifier Text: frameType
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:!= Text: !=
|——————Node:qualified_identifier Text: QCanBusFrame::ErrorFrame
|———————Node:namespace_identifier Text: QCanBusFrame
|———————Node::: Text: ::
|———————Node:identifier Text: ErrorFrame
|—————Node:) Text: )
|————Node:return_statement Text: return QString();
|—————Node:return Text: return
|—————Node:call_expression Text: QString()
|——————Node:identifier Text: QString
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|———Node:comment Text: // the payload may contain the error details
|———Node:declaration Text: const QByteArray data = errorFrame.payload();
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: QByteArray
|————Node:init_declarator Text: data = errorFrame.payload()
|—————Node:identifier Text: data
|—————Node:= Text: =
|—————Node:call_expression Text: errorFrame.payload()
|——————Node:field_expression Text: errorFrame.payload
|———————Node:identifier Text: errorFrame
|———————Node:. Text: .
|———————Node:field_identifier Text: payload
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: QString errorMsg;
|————Node:type_identifier Text: QString
|————Node:identifier Text: errorMsg
|————Node:; Text: ;
|———Node:if_statement Text: if (errorFrame.error() & QCanBusFrame::TransmissionTimeoutError)
        errorMsg += QStringLiteral("TX timout\n");
|————Node:if Text: if
|————Node:condition_clause Text: (errorFrame.error() & QCanBusFrame::TransmissionTimeoutError)
|—————Node:( Text: (
|—————Node:binary_expression Text: errorFrame.error() & QCanBusFrame::TransmissionTimeoutError
|——————Node:call_expression Text: errorFrame.error()
|———————Node:field_expression Text: errorFrame.error
|————————Node:identifier Text: errorFrame
|————————Node:. Text: .
|————————Node:field_identifier Text: error
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:& Text: &
|——————Node:qualified_identifier Text: QCanBusFrame::TransmissionTimeoutError
|———————Node:namespace_identifier Text: QCanBusFrame
|———————Node::: Text: ::
|———————Node:identifier Text: TransmissionTimeoutError
|—————Node:) Text: )
|————Node:expression_statement Text: errorMsg += QStringLiteral("TX timout\n");
|—————Node:assignment_expression Text: errorMsg += QStringLiteral("TX timout\n")
|——————Node:identifier Text: errorMsg
|——————Node:+= Text: +=
|——————Node:call_expression Text: QStringLiteral("TX timout\n")
|———————Node:identifier Text: QStringLiteral
|———————Node:argument_list Text: ("TX timout\n")
|————————Node:( Text: (
|————————Node:string_literal Text: "TX timout\n"
|—————————Node:" Text: "
|—————————Node:string_content Text: TX timout
|—————————Node:escape_sequence Text: \n
|—————————Node:" Text: "
|————————Node:) Text: )
|—————Node:; Text: ;
|———Node:if_statement Text: if (errorFrame.error() & QCanBusFrame::MissingAcknowledgmentError)
        errorMsg += QStringLiteral("Received no ACK on transmission\n");
|————Node:if Text: if
|————Node:condition_clause Text: (errorFrame.error() & QCanBusFrame::MissingAcknowledgmentError)
|—————Node:( Text: (
|—————Node:binary_expression Text: errorFrame.error() & QCanBusFrame::MissingAcknowledgmentError
|——————Node:call_expression Text: errorFrame.error()
|———————Node:field_expression Text: errorFrame.error
|————————Node:identifier Text: errorFrame
|————————Node:. Text: .
|————————Node:field_identifier Text: error
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:& Text: &
|——————Node:qualified_identifier Text: QCanBusFrame::MissingAcknowledgmentError
|———————Node:namespace_identifier Text: QCanBusFrame
|———————Node::: Text: ::
|———————Node:identifier Text: MissingAcknowledgmentError
|—————Node:) Text: )
|————Node:expression_statement Text: errorMsg += QStringLiteral("Received no ACK on transmission\n");
|—————Node:assignment_expression Text: errorMsg += QStringLiteral("Received no ACK on transmission\n")
|——————Node:identifier Text: errorMsg
|——————Node:+= Text: +=
|——————Node:call_expression Text: QStringLiteral("Received no ACK on transmission\n")
|———————Node:identifier Text: QStringLiteral
|———————Node:argument_list Text: ("Received no ACK on transmission\n")
|————————Node:( Text: (
|————————Node:string_literal Text: "Received no ACK on transmission\n"
|—————————Node:" Text: "
|—————————Node:string_content Text: Received no ACK on transmission
|—————————Node:escape_sequence Text: \n
|—————————Node:" Text: "
|————————Node:) Text: )
|—————Node:; Text: ;
|———Node:if_statement Text: if (errorFrame.error() & QCanBusFrame::BusOffError)
        errorMsg += QStringLiteral("Bus off\n");
|————Node:if Text: if
|————Node:condition_clause Text: (errorFrame.error() & QCanBusFrame::BusOffError)
|—————Node:( Text: (
|—————Node:binary_expression Text: errorFrame.error() & QCanBusFrame::BusOffError
|——————Node:call_expression Text: errorFrame.error()
|———————Node:field_expression Text: errorFrame.error
|————————Node:identifier Text: errorFrame
|————————Node:. Text: .
|————————Node:field_identifier Text: error
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:& Text: &
|——————Node:qualified_identifier Text: QCanBusFrame::BusOffError
|———————Node:namespace_identifier Text: QCanBusFrame
|———————Node::: Text: ::
|———————Node:identifier Text: BusOffError
|—————Node:) Text: )
|————Node:expression_statement Text: errorMsg += QStringLiteral("Bus off\n");
|—————Node:assignment_expression Text: errorMsg += QStringLiteral("Bus off\n")
|——————Node:identifier Text: errorMsg
|——————Node:+= Text: +=
|——————Node:call_expression Text: QStringLiteral("Bus off\n")
|———————Node:identifier Text: QStringLiteral
|———————Node:argument_list Text: ("Bus off\n")
|————————Node:( Text: (
|————————Node:string_literal Text: "Bus off\n"
|—————————Node:" Text: "
|—————————Node:string_content Text: Bus off
|—————————Node:escape_sequence Text: \n
|—————————Node:" Text: "
|————————Node:) Text: )
|—————Node:; Text: ;
|———Node:if_statement Text: if (errorFrame.error() & QCanBusFrame::BusError)
        errorMsg += QStringLiteral("Bus error\n");
|————Node:if Text: if
|————Node:condition_clause Text: (errorFrame.error() & QCanBusFrame::BusError)
|—————Node:( Text: (
|—————Node:binary_expression Text: errorFrame.error() & QCanBusFrame::BusError
|——————Node:call_expression Text: errorFrame.error()
|———————Node:field_expression Text: errorFrame.error
|————————Node:identifier Text: errorFrame
|————————Node:. Text: .
|————————Node:field_identifier Text: error
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:& Text: &
|——————Node:qualified_identifier Text: QCanBusFrame::BusError
|———————Node:namespace_identifier Text: QCanBusFrame
|———————Node::: Text: ::
|———————Node:identifier Text: BusError
|—————Node:) Text: )
|————Node:expression_statement Text: errorMsg += QStringLiteral("Bus error\n");
|—————Node:assignment_expression Text: errorMsg += QStringLiteral("Bus error\n")
|——————Node:identifier Text: errorMsg
|——————Node:+= Text: +=
|——————Node:call_expression Text: QStringLiteral("Bus error\n")
|———————Node:identifier Text: QStringLiteral
|———————Node:argument_list Text: ("Bus error\n")
|————————Node:( Text: (
|————————Node:string_literal Text: "Bus error\n"
|—————————Node:" Text: "
|—————————Node:string_content Text: Bus error
|—————————Node:escape_sequence Text: \n
|—————————Node:" Text: "
|————————Node:) Text: )
|—————Node:; Text: ;
|———Node:if_statement Text: if (errorFrame.error() & QCanBusFrame::ControllerRestartError)
        errorMsg += QStringLiteral("Controller restarted\n");
|————Node:if Text: if
|————Node:condition_clause Text: (errorFrame.error() & QCanBusFrame::ControllerRestartError)
|—————Node:( Text: (
|—————Node:binary_expression Text: errorFrame.error() & QCanBusFrame::ControllerRestartError
|——————Node:call_expression Text: errorFrame.error()
|———————Node:field_expression Text: errorFrame.error
|————————Node:identifier Text: errorFrame
|————————Node:. Text: .
|————————Node:field_identifier Text: error
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:& Text: &
|——————Node:qualified_identifier Text: QCanBusFrame::ControllerRestartError
|———————Node:namespace_identifier Text: QCanBusFrame
|———————Node::: Text: ::
|———————Node:identifier Text: ControllerRestartError
|—————Node:) Text: )
|————Node:expression_statement Text: errorMsg += QStringLiteral("Controller restarted\n");
|—————Node:assignment_expression Text: errorMsg += QStringLiteral("Controller restarted\n")
|——————Node:identifier Text: errorMsg
|——————Node:+= Text: +=
|——————Node:call_expression Text: QStringLiteral("Controller restarted\n")
|———————Node:identifier Text: QStringLiteral
|———————Node:argument_list Text: ("Controller restarted\n")
|————————Node:( Text: (
|————————Node:string_literal Text: "Controller restarted\n"
|—————————Node:" Text: "
|—————————Node:string_content Text: Controller restarted
|—————————Node:escape_sequence Text: \n
|—————————Node:" Text: "
|————————Node:) Text: )
|—————Node:; Text: ;
|———Node:if_statement Text: if (errorFrame.error() & QCanBusFrame::UnknownError)
        errorMsg += QStringLiteral("Unknown error\n");
|————Node:if Text: if
|————Node:condition_clause Text: (errorFrame.error() & QCanBusFrame::UnknownError)
|—————Node:( Text: (
|—————Node:binary_expression Text: errorFrame.error() & QCanBusFrame::UnknownError
|——————Node:call_expression Text: errorFrame.error()
|———————Node:field_expression Text: errorFrame.error
|————————Node:identifier Text: errorFrame
|————————Node:. Text: .
|————————Node:field_identifier Text: error
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:& Text: &
|——————Node:qualified_identifier Text: QCanBusFrame::UnknownError
|———————Node:namespace_identifier Text: QCanBusFrame
|———————Node::: Text: ::
|———————Node:identifier Text: UnknownError
|—————Node:) Text: )
|————Node:expression_statement Text: errorMsg += QStringLiteral("Unknown error\n");
|—————Node:assignment_expression Text: errorMsg += QStringLiteral("Unknown error\n")
|——————Node:identifier Text: errorMsg
|——————Node:+= Text: +=
|——————Node:call_expression Text: QStringLiteral("Unknown error\n")
|———————Node:identifier Text: QStringLiteral
|———————Node:argument_list Text: ("Unknown error\n")
|————————Node:( Text: (
|————————Node:string_literal Text: "Unknown error\n"
|—————————Node:" Text: "
|—————————Node:string_content Text: Unknown error
|—————————Node:escape_sequence Text: \n
|—————————Node:" Text: "
|————————Node:) Text: )
|—————Node:; Text: ;
|———Node:if_statement Text: if (errorFrame.error() & QCanBusFrame::LostArbitrationError) {
        errorMsg += QStringLiteral("Lost arbitration:\n");
        if (data.size() >= 1) {
            errorMsg += QString::number(data.at(0), 16);
            errorMsg += QStringLiteral(" bit\n");
        }
    }
|————Node:if Text: if
|————Node:condition_clause Text: (errorFrame.error() & QCanBusFrame::LostArbitrationError)
|—————Node:( Text: (
|—————Node:binary_expression Text: errorFrame.error() & QCanBusFrame::LostArbitrationError
|——————Node:call_expression Text: errorFrame.error()
|———————Node:field_expression Text: errorFrame.error
|————————Node:identifier Text: errorFrame
|————————Node:. Text: .
|————————Node:field_identifier Text: error
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:& Text: &
|——————Node:qualified_identifier Text: QCanBusFrame::LostArbitrationError
|———————Node:namespace_identifier Text: QCanBusFrame
|———————Node::: Text: ::
|———————Node:identifier Text: LostArbitrationError
|—————Node:) Text: )
|————Node:compound_statement Text: {
        errorMsg += QStringLiteral("Lost arbitration:\n");
        if (data.size() >= 1) {
            errorMsg += QString::number(data.at(0), 16);
            errorMsg += QStringLiteral(" bit\n");
        }
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: errorMsg += QStringLiteral("Lost arbitration:\n");
|——————Node:assignment_expression Text: errorMsg += QStringLiteral("Lost arbitration:\n")
|———————Node:identifier Text: errorMsg
|———————Node:+= Text: +=
|———————Node:call_expression Text: QStringLiteral("Lost arbitration:\n")
|————————Node:identifier Text: QStringLiteral
|————————Node:argument_list Text: ("Lost arbitration:\n")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Lost arbitration:\n"
|——————————Node:" Text: "
|——————————Node:string_content Text: Lost arbitration:
|——————————Node:escape_sequence Text: \n
|——————————Node:" Text: "
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (data.size() >= 1) {
            errorMsg += QString::number(data.at(0), 16);
            errorMsg += QStringLiteral(" bit\n");
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (data.size() >= 1)
|———————Node:( Text: (
|———————Node:binary_expression Text: data.size() >= 1
|————————Node:call_expression Text: data.size()
|—————————Node:field_expression Text: data.size
|——————————Node:identifier Text: data
|——————————Node:. Text: .
|——————————Node:field_identifier Text: size
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:>= Text: >=
|————————Node:number_literal Text: 1
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            errorMsg += QString::number(data.at(0), 16);
            errorMsg += QStringLiteral(" bit\n");
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: errorMsg += QString::number(data.at(0), 16);
|————————Node:assignment_expression Text: errorMsg += QString::number(data.at(0), 16)
|—————————Node:identifier Text: errorMsg
|—————————Node:+= Text: +=
|—————————Node:call_expression Text: QString::number(data.at(0), 16)
|——————————Node:qualified_identifier Text: QString::number
|———————————Node:namespace_identifier Text: QString
|———————————Node::: Text: ::
|———————————Node:identifier Text: number
|——————————Node:argument_list Text: (data.at(0), 16)
|———————————Node:( Text: (
|———————————Node:call_expression Text: data.at(0)
|————————————Node:field_expression Text: data.at
|—————————————Node:identifier Text: data
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: at
|————————————Node:argument_list Text: (0)
|—————————————Node:( Text: (
|—————————————Node:number_literal Text: 0
|—————————————Node:) Text: )
|———————————Node:, Text: ,
|———————————Node:number_literal Text: 16
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: errorMsg += QStringLiteral(" bit\n");
|————————Node:assignment_expression Text: errorMsg += QStringLiteral(" bit\n")
|—————————Node:identifier Text: errorMsg
|—————————Node:+= Text: +=
|—————————Node:call_expression Text: QStringLiteral(" bit\n")
|——————————Node:identifier Text: QStringLiteral
|——————————Node:argument_list Text: (" bit\n")
|———————————Node:( Text: (
|———————————Node:string_literal Text: " bit\n"
|————————————Node:" Text: "
|————————————Node:string_content Text:  bit
|————————————Node:escape_sequence Text: \n
|————————————Node:" Text: "
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:if_statement Text: if (errorFrame.error() & QCanBusFrame::ControllerError) {
        errorMsg += QStringLiteral("Controller problem:\n");
        if (data.size() >= 2) {
            char b = data.at(1) ;
            if (b & CAN_ERR_CRTL_RX_OVERFLOW)
                errorMsg += QStringLiteral(" RX buffer overflow\n");
            if (b & CAN_ERR_CRTL_TX_OVERFLOW)
                errorMsg += QStringLiteral(" TX buffer overflow\n");
            if (b & CAN_ERR_CRTL_RX_WARNING)
                errorMsg += QStringLiteral(" reached warning level for RX errors\n");
            if (b & CAN_ERR_CRTL_TX_WARNING)
                errorMsg += QStringLiteral(" reached warning level for TX errors\n");
            if (b & CAN_ERR_CRTL_RX_PASSIVE)
                errorMsg += QStringLiteral(" reached error passive status RX\n");
            if (b & CAN_ERR_CRTL_TX_PASSIVE)
                errorMsg += QStringLiteral(" reached error passive status TX\n");

            if (b == CAN_ERR_CRTL_UNSPEC)
                errorMsg += QStringLiteral(" Unspecified error\n");
        }
    }
|————Node:if Text: if
|————Node:condition_clause Text: (errorFrame.error() & QCanBusFrame::ControllerError)
|—————Node:( Text: (
|—————Node:binary_expression Text: errorFrame.error() & QCanBusFrame::ControllerError
|——————Node:call_expression Text: errorFrame.error()
|———————Node:field_expression Text: errorFrame.error
|————————Node:identifier Text: errorFrame
|————————Node:. Text: .
|————————Node:field_identifier Text: error
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:& Text: &
|——————Node:qualified_identifier Text: QCanBusFrame::ControllerError
|———————Node:namespace_identifier Text: QCanBusFrame
|———————Node::: Text: ::
|———————Node:identifier Text: ControllerError
|—————Node:) Text: )
|————Node:compound_statement Text: {
        errorMsg += QStringLiteral("Controller problem:\n");
        if (data.size() >= 2) {
            char b = data.at(1) ;
            if (b & CAN_ERR_CRTL_RX_OVERFLOW)
                errorMsg += QStringLiteral(" RX buffer overflow\n");
            if (b & CAN_ERR_CRTL_TX_OVERFLOW)
                errorMsg += QStringLiteral(" TX buffer overflow\n");
            if (b & CAN_ERR_CRTL_RX_WARNING)
                errorMsg += QStringLiteral(" reached warning level for RX errors\n");
            if (b & CAN_ERR_CRTL_TX_WARNING)
                errorMsg += QStringLiteral(" reached warning level for TX errors\n");
            if (b & CAN_ERR_CRTL_RX_PASSIVE)
                errorMsg += QStringLiteral(" reached error passive status RX\n");
            if (b & CAN_ERR_CRTL_TX_PASSIVE)
                errorMsg += QStringLiteral(" reached error passive status TX\n");

            if (b == CAN_ERR_CRTL_UNSPEC)
                errorMsg += QStringLiteral(" Unspecified error\n");
        }
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: errorMsg += QStringLiteral("Controller problem:\n");
|——————Node:assignment_expression Text: errorMsg += QStringLiteral("Controller problem:\n")
|———————Node:identifier Text: errorMsg
|———————Node:+= Text: +=
|———————Node:call_expression Text: QStringLiteral("Controller problem:\n")
|————————Node:identifier Text: QStringLiteral
|————————Node:argument_list Text: ("Controller problem:\n")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Controller problem:\n"
|——————————Node:" Text: "
|——————————Node:string_content Text: Controller problem:
|——————————Node:escape_sequence Text: \n
|——————————Node:" Text: "
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (data.size() >= 2) {
            char b = data.at(1) ;
            if (b & CAN_ERR_CRTL_RX_OVERFLOW)
                errorMsg += QStringLiteral(" RX buffer overflow\n");
            if (b & CAN_ERR_CRTL_TX_OVERFLOW)
                errorMsg += QStringLiteral(" TX buffer overflow\n");
            if (b & CAN_ERR_CRTL_RX_WARNING)
                errorMsg += QStringLiteral(" reached warning level for RX errors\n");
            if (b & CAN_ERR_CRTL_TX_WARNING)
                errorMsg += QStringLiteral(" reached warning level for TX errors\n");
            if (b & CAN_ERR_CRTL_RX_PASSIVE)
                errorMsg += QStringLiteral(" reached error passive status RX\n");
            if (b & CAN_ERR_CRTL_TX_PASSIVE)
                errorMsg += QStringLiteral(" reached error passive status TX\n");

            if (b == CAN_ERR_CRTL_UNSPEC)
                errorMsg += QStringLiteral(" Unspecified error\n");
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (data.size() >= 2)
|———————Node:( Text: (
|———————Node:binary_expression Text: data.size() >= 2
|————————Node:call_expression Text: data.size()
|—————————Node:field_expression Text: data.size
|——————————Node:identifier Text: data
|——————————Node:. Text: .
|——————————Node:field_identifier Text: size
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:>= Text: >=
|————————Node:number_literal Text: 2
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            char b = data.at(1) ;
            if (b & CAN_ERR_CRTL_RX_OVERFLOW)
                errorMsg += QStringLiteral(" RX buffer overflow\n");
            if (b & CAN_ERR_CRTL_TX_OVERFLOW)
                errorMsg += QStringLiteral(" TX buffer overflow\n");
            if (b & CAN_ERR_CRTL_RX_WARNING)
                errorMsg += QStringLiteral(" reached warning level for RX errors\n");
            if (b & CAN_ERR_CRTL_TX_WARNING)
                errorMsg += QStringLiteral(" reached warning level for TX errors\n");
            if (b & CAN_ERR_CRTL_RX_PASSIVE)
                errorMsg += QStringLiteral(" reached error passive status RX\n");
            if (b & CAN_ERR_CRTL_TX_PASSIVE)
                errorMsg += QStringLiteral(" reached error passive status TX\n");

            if (b == CAN_ERR_CRTL_UNSPEC)
                errorMsg += QStringLiteral(" Unspecified error\n");
        }
|———————Node:{ Text: {
|———————Node:declaration Text: char b = data.at(1) ;
|————————Node:primitive_type Text: char
|————————Node:init_declarator Text: b = data.at(1)
|—————————Node:identifier Text: b
|—————————Node:= Text: =
|—————————Node:call_expression Text: data.at(1)
|——————————Node:field_expression Text: data.at
|———————————Node:identifier Text: data
|———————————Node:. Text: .
|———————————Node:field_identifier Text: at
|——————————Node:argument_list Text: (1)
|———————————Node:( Text: (
|———————————Node:number_literal Text: 1
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:if_statement Text: if (b & CAN_ERR_CRTL_RX_OVERFLOW)
                errorMsg += QStringLiteral(" RX buffer overflow\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b & CAN_ERR_CRTL_RX_OVERFLOW)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b & CAN_ERR_CRTL_RX_OVERFLOW
|——————————Node:identifier Text: b
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_ERR_CRTL_RX_OVERFLOW
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" RX buffer overflow\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" RX buffer overflow\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" RX buffer overflow\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" RX buffer overflow\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " RX buffer overflow\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  RX buffer overflow
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b & CAN_ERR_CRTL_TX_OVERFLOW)
                errorMsg += QStringLiteral(" TX buffer overflow\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b & CAN_ERR_CRTL_TX_OVERFLOW)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b & CAN_ERR_CRTL_TX_OVERFLOW
|——————————Node:identifier Text: b
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_ERR_CRTL_TX_OVERFLOW
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" TX buffer overflow\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" TX buffer overflow\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" TX buffer overflow\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" TX buffer overflow\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " TX buffer overflow\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  TX buffer overflow
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b & CAN_ERR_CRTL_RX_WARNING)
                errorMsg += QStringLiteral(" reached warning level for RX errors\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b & CAN_ERR_CRTL_RX_WARNING)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b & CAN_ERR_CRTL_RX_WARNING
|——————————Node:identifier Text: b
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_ERR_CRTL_RX_WARNING
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" reached warning level for RX errors\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" reached warning level for RX errors\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" reached warning level for RX errors\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" reached warning level for RX errors\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " reached warning level for RX errors\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  reached warning level for RX errors
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b & CAN_ERR_CRTL_TX_WARNING)
                errorMsg += QStringLiteral(" reached warning level for TX errors\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b & CAN_ERR_CRTL_TX_WARNING)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b & CAN_ERR_CRTL_TX_WARNING
|——————————Node:identifier Text: b
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_ERR_CRTL_TX_WARNING
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" reached warning level for TX errors\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" reached warning level for TX errors\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" reached warning level for TX errors\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" reached warning level for TX errors\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " reached warning level for TX errors\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  reached warning level for TX errors
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b & CAN_ERR_CRTL_RX_PASSIVE)
                errorMsg += QStringLiteral(" reached error passive status RX\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b & CAN_ERR_CRTL_RX_PASSIVE)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b & CAN_ERR_CRTL_RX_PASSIVE
|——————————Node:identifier Text: b
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_ERR_CRTL_RX_PASSIVE
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" reached error passive status RX\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" reached error passive status RX\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" reached error passive status RX\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" reached error passive status RX\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " reached error passive status RX\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  reached error passive status RX
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b & CAN_ERR_CRTL_TX_PASSIVE)
                errorMsg += QStringLiteral(" reached error passive status TX\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b & CAN_ERR_CRTL_TX_PASSIVE)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b & CAN_ERR_CRTL_TX_PASSIVE
|——————————Node:identifier Text: b
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_ERR_CRTL_TX_PASSIVE
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" reached error passive status TX\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" reached error passive status TX\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" reached error passive status TX\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" reached error passive status TX\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " reached error passive status TX\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  reached error passive status TX
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b == CAN_ERR_CRTL_UNSPEC)
                errorMsg += QStringLiteral(" Unspecified error\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b == CAN_ERR_CRTL_UNSPEC)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b == CAN_ERR_CRTL_UNSPEC
|——————————Node:identifier Text: b
|——————————Node:== Text: ==
|——————————Node:identifier Text: CAN_ERR_CRTL_UNSPEC
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" Unspecified error\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" Unspecified error\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" Unspecified error\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" Unspecified error\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " Unspecified error\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  Unspecified error
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:if_statement Text: if (errorFrame.error() & QCanBusFrame::TransceiverError) {
        errorMsg = QStringLiteral("Transceiver status:");
        if (data.size() >= 5) {
            char b = data.at(4);
            if (b & CAN_ERR_TRX_CANH_NO_WIRE)
                errorMsg += QStringLiteral(" CAN-transceiver CANH no wire\n");
            if (b & CAN_ERR_TRX_CANH_SHORT_TO_BAT)
                errorMsg += QStringLiteral(" CAN-transceiver CANH short to bat\n");
            if (b & CAN_ERR_TRX_CANH_SHORT_TO_VCC)
                errorMsg += QStringLiteral(" CAN-transceiver CANH short to vcc\n");
            if (b & CAN_ERR_TRX_CANH_SHORT_TO_GND)
                errorMsg += QStringLiteral(" CAN-transceiver CANH short to ground\n");
            if (b & CAN_ERR_TRX_CANL_NO_WIRE)
                errorMsg += QStringLiteral(" CAN-transceiver CANL no wire\n");
            if (b & CAN_ERR_TRX_CANL_SHORT_TO_BAT)
                errorMsg += QStringLiteral(" CAN-transceiver CANL short to bat\n");
            if (b & CAN_ERR_TRX_CANL_SHORT_TO_VCC)
                errorMsg += QStringLiteral(" CAN-transceiver CANL short to vcc\n");
            if (b & CAN_ERR_TRX_CANL_SHORT_TO_GND)
                errorMsg += QStringLiteral(" CAN-transceiver CANL short to ground\n");
            if (b & CAN_ERR_TRX_CANL_SHORT_TO_CANH)
                errorMsg += QStringLiteral(" CAN-transceiver CANL short to CANH\n");

            if (b == CAN_ERR_TRX_UNSPEC)
                errorMsg += QStringLiteral(" unspecified\n");
        }

    }
|————Node:if Text: if
|————Node:condition_clause Text: (errorFrame.error() & QCanBusFrame::TransceiverError)
|—————Node:( Text: (
|—————Node:binary_expression Text: errorFrame.error() & QCanBusFrame::TransceiverError
|——————Node:call_expression Text: errorFrame.error()
|———————Node:field_expression Text: errorFrame.error
|————————Node:identifier Text: errorFrame
|————————Node:. Text: .
|————————Node:field_identifier Text: error
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:& Text: &
|——————Node:qualified_identifier Text: QCanBusFrame::TransceiverError
|———————Node:namespace_identifier Text: QCanBusFrame
|———————Node::: Text: ::
|———————Node:identifier Text: TransceiverError
|—————Node:) Text: )
|————Node:compound_statement Text: {
        errorMsg = QStringLiteral("Transceiver status:");
        if (data.size() >= 5) {
            char b = data.at(4);
            if (b & CAN_ERR_TRX_CANH_NO_WIRE)
                errorMsg += QStringLiteral(" CAN-transceiver CANH no wire\n");
            if (b & CAN_ERR_TRX_CANH_SHORT_TO_BAT)
                errorMsg += QStringLiteral(" CAN-transceiver CANH short to bat\n");
            if (b & CAN_ERR_TRX_CANH_SHORT_TO_VCC)
                errorMsg += QStringLiteral(" CAN-transceiver CANH short to vcc\n");
            if (b & CAN_ERR_TRX_CANH_SHORT_TO_GND)
                errorMsg += QStringLiteral(" CAN-transceiver CANH short to ground\n");
            if (b & CAN_ERR_TRX_CANL_NO_WIRE)
                errorMsg += QStringLiteral(" CAN-transceiver CANL no wire\n");
            if (b & CAN_ERR_TRX_CANL_SHORT_TO_BAT)
                errorMsg += QStringLiteral(" CAN-transceiver CANL short to bat\n");
            if (b & CAN_ERR_TRX_CANL_SHORT_TO_VCC)
                errorMsg += QStringLiteral(" CAN-transceiver CANL short to vcc\n");
            if (b & CAN_ERR_TRX_CANL_SHORT_TO_GND)
                errorMsg += QStringLiteral(" CAN-transceiver CANL short to ground\n");
            if (b & CAN_ERR_TRX_CANL_SHORT_TO_CANH)
                errorMsg += QStringLiteral(" CAN-transceiver CANL short to CANH\n");

            if (b == CAN_ERR_TRX_UNSPEC)
                errorMsg += QStringLiteral(" unspecified\n");
        }

    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: errorMsg = QStringLiteral("Transceiver status:");
|——————Node:assignment_expression Text: errorMsg = QStringLiteral("Transceiver status:")
|———————Node:identifier Text: errorMsg
|———————Node:= Text: =
|———————Node:call_expression Text: QStringLiteral("Transceiver status:")
|————————Node:identifier Text: QStringLiteral
|————————Node:argument_list Text: ("Transceiver status:")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Transceiver status:"
|——————————Node:" Text: "
|——————————Node:string_content Text: Transceiver status:
|——————————Node:" Text: "
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (data.size() >= 5) {
            char b = data.at(4);
            if (b & CAN_ERR_TRX_CANH_NO_WIRE)
                errorMsg += QStringLiteral(" CAN-transceiver CANH no wire\n");
            if (b & CAN_ERR_TRX_CANH_SHORT_TO_BAT)
                errorMsg += QStringLiteral(" CAN-transceiver CANH short to bat\n");
            if (b & CAN_ERR_TRX_CANH_SHORT_TO_VCC)
                errorMsg += QStringLiteral(" CAN-transceiver CANH short to vcc\n");
            if (b & CAN_ERR_TRX_CANH_SHORT_TO_GND)
                errorMsg += QStringLiteral(" CAN-transceiver CANH short to ground\n");
            if (b & CAN_ERR_TRX_CANL_NO_WIRE)
                errorMsg += QStringLiteral(" CAN-transceiver CANL no wire\n");
            if (b & CAN_ERR_TRX_CANL_SHORT_TO_BAT)
                errorMsg += QStringLiteral(" CAN-transceiver CANL short to bat\n");
            if (b & CAN_ERR_TRX_CANL_SHORT_TO_VCC)
                errorMsg += QStringLiteral(" CAN-transceiver CANL short to vcc\n");
            if (b & CAN_ERR_TRX_CANL_SHORT_TO_GND)
                errorMsg += QStringLiteral(" CAN-transceiver CANL short to ground\n");
            if (b & CAN_ERR_TRX_CANL_SHORT_TO_CANH)
                errorMsg += QStringLiteral(" CAN-transceiver CANL short to CANH\n");

            if (b == CAN_ERR_TRX_UNSPEC)
                errorMsg += QStringLiteral(" unspecified\n");
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (data.size() >= 5)
|———————Node:( Text: (
|———————Node:binary_expression Text: data.size() >= 5
|————————Node:call_expression Text: data.size()
|—————————Node:field_expression Text: data.size
|——————————Node:identifier Text: data
|——————————Node:. Text: .
|——————————Node:field_identifier Text: size
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:>= Text: >=
|————————Node:number_literal Text: 5
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            char b = data.at(4);
            if (b & CAN_ERR_TRX_CANH_NO_WIRE)
                errorMsg += QStringLiteral(" CAN-transceiver CANH no wire\n");
            if (b & CAN_ERR_TRX_CANH_SHORT_TO_BAT)
                errorMsg += QStringLiteral(" CAN-transceiver CANH short to bat\n");
            if (b & CAN_ERR_TRX_CANH_SHORT_TO_VCC)
                errorMsg += QStringLiteral(" CAN-transceiver CANH short to vcc\n");
            if (b & CAN_ERR_TRX_CANH_SHORT_TO_GND)
                errorMsg += QStringLiteral(" CAN-transceiver CANH short to ground\n");
            if (b & CAN_ERR_TRX_CANL_NO_WIRE)
                errorMsg += QStringLiteral(" CAN-transceiver CANL no wire\n");
            if (b & CAN_ERR_TRX_CANL_SHORT_TO_BAT)
                errorMsg += QStringLiteral(" CAN-transceiver CANL short to bat\n");
            if (b & CAN_ERR_TRX_CANL_SHORT_TO_VCC)
                errorMsg += QStringLiteral(" CAN-transceiver CANL short to vcc\n");
            if (b & CAN_ERR_TRX_CANL_SHORT_TO_GND)
                errorMsg += QStringLiteral(" CAN-transceiver CANL short to ground\n");
            if (b & CAN_ERR_TRX_CANL_SHORT_TO_CANH)
                errorMsg += QStringLiteral(" CAN-transceiver CANL short to CANH\n");

            if (b == CAN_ERR_TRX_UNSPEC)
                errorMsg += QStringLiteral(" unspecified\n");
        }
|———————Node:{ Text: {
|———————Node:declaration Text: char b = data.at(4);
|————————Node:primitive_type Text: char
|————————Node:init_declarator Text: b = data.at(4)
|—————————Node:identifier Text: b
|—————————Node:= Text: =
|—————————Node:call_expression Text: data.at(4)
|——————————Node:field_expression Text: data.at
|———————————Node:identifier Text: data
|———————————Node:. Text: .
|———————————Node:field_identifier Text: at
|——————————Node:argument_list Text: (4)
|———————————Node:( Text: (
|———————————Node:number_literal Text: 4
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:if_statement Text: if (b & CAN_ERR_TRX_CANH_NO_WIRE)
                errorMsg += QStringLiteral(" CAN-transceiver CANH no wire\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b & CAN_ERR_TRX_CANH_NO_WIRE)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b & CAN_ERR_TRX_CANH_NO_WIRE
|——————————Node:identifier Text: b
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_ERR_TRX_CANH_NO_WIRE
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" CAN-transceiver CANH no wire\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" CAN-transceiver CANH no wire\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" CAN-transceiver CANH no wire\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" CAN-transceiver CANH no wire\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " CAN-transceiver CANH no wire\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  CAN-transceiver CANH no wire
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b & CAN_ERR_TRX_CANH_SHORT_TO_BAT)
                errorMsg += QStringLiteral(" CAN-transceiver CANH short to bat\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b & CAN_ERR_TRX_CANH_SHORT_TO_BAT)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b & CAN_ERR_TRX_CANH_SHORT_TO_BAT
|——————————Node:identifier Text: b
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_ERR_TRX_CANH_SHORT_TO_BAT
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" CAN-transceiver CANH short to bat\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" CAN-transceiver CANH short to bat\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" CAN-transceiver CANH short to bat\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" CAN-transceiver CANH short to bat\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " CAN-transceiver CANH short to bat\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  CAN-transceiver CANH short to bat
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b & CAN_ERR_TRX_CANH_SHORT_TO_VCC)
                errorMsg += QStringLiteral(" CAN-transceiver CANH short to vcc\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b & CAN_ERR_TRX_CANH_SHORT_TO_VCC)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b & CAN_ERR_TRX_CANH_SHORT_TO_VCC
|——————————Node:identifier Text: b
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_ERR_TRX_CANH_SHORT_TO_VCC
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" CAN-transceiver CANH short to vcc\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" CAN-transceiver CANH short to vcc\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" CAN-transceiver CANH short to vcc\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" CAN-transceiver CANH short to vcc\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " CAN-transceiver CANH short to vcc\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  CAN-transceiver CANH short to vcc
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b & CAN_ERR_TRX_CANH_SHORT_TO_GND)
                errorMsg += QStringLiteral(" CAN-transceiver CANH short to ground\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b & CAN_ERR_TRX_CANH_SHORT_TO_GND)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b & CAN_ERR_TRX_CANH_SHORT_TO_GND
|——————————Node:identifier Text: b
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_ERR_TRX_CANH_SHORT_TO_GND
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" CAN-transceiver CANH short to ground\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" CAN-transceiver CANH short to ground\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" CAN-transceiver CANH short to ground\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" CAN-transceiver CANH short to ground\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " CAN-transceiver CANH short to ground\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  CAN-transceiver CANH short to ground
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b & CAN_ERR_TRX_CANL_NO_WIRE)
                errorMsg += QStringLiteral(" CAN-transceiver CANL no wire\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b & CAN_ERR_TRX_CANL_NO_WIRE)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b & CAN_ERR_TRX_CANL_NO_WIRE
|——————————Node:identifier Text: b
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_ERR_TRX_CANL_NO_WIRE
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" CAN-transceiver CANL no wire\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" CAN-transceiver CANL no wire\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" CAN-transceiver CANL no wire\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" CAN-transceiver CANL no wire\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " CAN-transceiver CANL no wire\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  CAN-transceiver CANL no wire
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b & CAN_ERR_TRX_CANL_SHORT_TO_BAT)
                errorMsg += QStringLiteral(" CAN-transceiver CANL short to bat\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b & CAN_ERR_TRX_CANL_SHORT_TO_BAT)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b & CAN_ERR_TRX_CANL_SHORT_TO_BAT
|——————————Node:identifier Text: b
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_ERR_TRX_CANL_SHORT_TO_BAT
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" CAN-transceiver CANL short to bat\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" CAN-transceiver CANL short to bat\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" CAN-transceiver CANL short to bat\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" CAN-transceiver CANL short to bat\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " CAN-transceiver CANL short to bat\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  CAN-transceiver CANL short to bat
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b & CAN_ERR_TRX_CANL_SHORT_TO_VCC)
                errorMsg += QStringLiteral(" CAN-transceiver CANL short to vcc\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b & CAN_ERR_TRX_CANL_SHORT_TO_VCC)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b & CAN_ERR_TRX_CANL_SHORT_TO_VCC
|——————————Node:identifier Text: b
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_ERR_TRX_CANL_SHORT_TO_VCC
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" CAN-transceiver CANL short to vcc\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" CAN-transceiver CANL short to vcc\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" CAN-transceiver CANL short to vcc\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" CAN-transceiver CANL short to vcc\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " CAN-transceiver CANL short to vcc\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  CAN-transceiver CANL short to vcc
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b & CAN_ERR_TRX_CANL_SHORT_TO_GND)
                errorMsg += QStringLiteral(" CAN-transceiver CANL short to ground\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b & CAN_ERR_TRX_CANL_SHORT_TO_GND)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b & CAN_ERR_TRX_CANL_SHORT_TO_GND
|——————————Node:identifier Text: b
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_ERR_TRX_CANL_SHORT_TO_GND
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" CAN-transceiver CANL short to ground\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" CAN-transceiver CANL short to ground\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" CAN-transceiver CANL short to ground\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" CAN-transceiver CANL short to ground\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " CAN-transceiver CANL short to ground\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  CAN-transceiver CANL short to ground
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b & CAN_ERR_TRX_CANL_SHORT_TO_CANH)
                errorMsg += QStringLiteral(" CAN-transceiver CANL short to CANH\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b & CAN_ERR_TRX_CANL_SHORT_TO_CANH)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b & CAN_ERR_TRX_CANL_SHORT_TO_CANH
|——————————Node:identifier Text: b
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_ERR_TRX_CANL_SHORT_TO_CANH
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" CAN-transceiver CANL short to CANH\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" CAN-transceiver CANL short to CANH\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" CAN-transceiver CANL short to CANH\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" CAN-transceiver CANL short to CANH\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " CAN-transceiver CANL short to CANH\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  CAN-transceiver CANL short to CANH
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b == CAN_ERR_TRX_UNSPEC)
                errorMsg += QStringLiteral(" unspecified\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b == CAN_ERR_TRX_UNSPEC)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b == CAN_ERR_TRX_UNSPEC
|——————————Node:identifier Text: b
|——————————Node:== Text: ==
|——————————Node:identifier Text: CAN_ERR_TRX_UNSPEC
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" unspecified\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" unspecified\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" unspecified\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" unspecified\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " unspecified\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  unspecified
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:if_statement Text: if (errorFrame.error() & QCanBusFrame::ProtocolViolationError) {
        errorMsg += QStringLiteral("Protocol violation:\n");
        if (data.size() > 3) {
            char b = data.at(2);
            if (b & CAN_ERR_PROT_BIT)
                errorMsg += QStringLiteral(" single bit error\n");
            if (b & CAN_ERR_PROT_FORM)
                errorMsg += QStringLiteral(" frame format error\n");
            if (b & CAN_ERR_PROT_STUFF)
                errorMsg += QStringLiteral(" bit stuffing error\n");
            if (b & CAN_ERR_PROT_BIT0)
                errorMsg += QStringLiteral(" unable to send dominant bit\n");
            if (b & CAN_ERR_PROT_BIT1)
                errorMsg += QStringLiteral(" unable to send recessive bit\n");
            if (b & CAN_ERR_PROT_OVERLOAD)
                errorMsg += QStringLiteral(" bus overload\n");
            if (b & CAN_ERR_PROT_ACTIVE)
                errorMsg += QStringLiteral(" active error announcement\n");
            if (b & CAN_ERR_PROT_TX)
                errorMsg += QStringLiteral(" error occurred on transmission\n");

            if (b == CAN_ERR_PROT_UNSPEC)
                errorMsg += QStringLiteral(" unspecified\n");
        }
        if (data.size() > 4) {
            char b = data.at(3);
            if (b == CAN_ERR_PROT_LOC_SOF)
                errorMsg += QStringLiteral(" start of frame\n");
            if (b == CAN_ERR_PROT_LOC_ID28_21)
                errorMsg += QStringLiteral(" ID bits 28 - 21 (SFF: 10 - 3)\n");
            if (b == CAN_ERR_PROT_LOC_ID20_18)
                errorMsg += QStringLiteral(" ID bits 20 - 18 (SFF: 2 - 0 )\n");
            if (b == CAN_ERR_PROT_LOC_SRTR)
                errorMsg += QStringLiteral(" substitute RTR (SFF: RTR)\n");
            if (b == CAN_ERR_PROT_LOC_IDE)
                errorMsg += QStringLiteral(" identifier extension\n");
            if (b == CAN_ERR_PROT_LOC_ID17_13)
                errorMsg += QStringLiteral(" ID bits 17-13\n");
            if (b == CAN_ERR_PROT_LOC_ID12_05)
                errorMsg += QStringLiteral(" ID bits 12-5\n");
            if (b == CAN_ERR_PROT_LOC_ID04_00)
                errorMsg += QStringLiteral(" ID bits 4-0\n");
            if (b == CAN_ERR_PROT_LOC_RTR)
                errorMsg += QStringLiteral(" RTR\n");
            if (b == CAN_ERR_PROT_LOC_RES1)
                errorMsg += QStringLiteral(" reserved bit 1\n");
            if (b == CAN_ERR_PROT_LOC_RES0)
                errorMsg += QStringLiteral(" reserved bit 0\n");
            if (b == CAN_ERR_PROT_LOC_DLC)
                errorMsg += QStringLiteral(" data length code\n");
            if (b == CAN_ERR_PROT_LOC_DATA)
                errorMsg += QStringLiteral(" data section\n");
            if (b == CAN_ERR_PROT_LOC_CRC_SEQ)
                errorMsg += QStringLiteral(" CRC sequence\n");
            if (b == CAN_ERR_PROT_LOC_CRC_DEL)
                errorMsg += QStringLiteral(" CRC delimiter\n");
            if (b == CAN_ERR_PROT_LOC_ACK)
                errorMsg += QStringLiteral(" ACK slot\n");
            if (b == CAN_ERR_PROT_LOC_ACK_DEL)
                errorMsg += QStringLiteral(" ACK delimiter\n");
            if (b == CAN_ERR_PROT_LOC_EOF)
                errorMsg += QStringLiteral(" end of frame\n");
            if (b == CAN_ERR_PROT_LOC_INTERM)
                errorMsg += QStringLiteral(" Intermission\n");

            if (b == CAN_ERR_PROT_LOC_UNSPEC)
                errorMsg += QStringLiteral(" unspecified\n");
        }
    }
|————Node:if Text: if
|————Node:condition_clause Text: (errorFrame.error() & QCanBusFrame::ProtocolViolationError)
|—————Node:( Text: (
|—————Node:binary_expression Text: errorFrame.error() & QCanBusFrame::ProtocolViolationError
|——————Node:call_expression Text: errorFrame.error()
|———————Node:field_expression Text: errorFrame.error
|————————Node:identifier Text: errorFrame
|————————Node:. Text: .
|————————Node:field_identifier Text: error
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:& Text: &
|——————Node:qualified_identifier Text: QCanBusFrame::ProtocolViolationError
|———————Node:namespace_identifier Text: QCanBusFrame
|———————Node::: Text: ::
|———————Node:identifier Text: ProtocolViolationError
|—————Node:) Text: )
|————Node:compound_statement Text: {
        errorMsg += QStringLiteral("Protocol violation:\n");
        if (data.size() > 3) {
            char b = data.at(2);
            if (b & CAN_ERR_PROT_BIT)
                errorMsg += QStringLiteral(" single bit error\n");
            if (b & CAN_ERR_PROT_FORM)
                errorMsg += QStringLiteral(" frame format error\n");
            if (b & CAN_ERR_PROT_STUFF)
                errorMsg += QStringLiteral(" bit stuffing error\n");
            if (b & CAN_ERR_PROT_BIT0)
                errorMsg += QStringLiteral(" unable to send dominant bit\n");
            if (b & CAN_ERR_PROT_BIT1)
                errorMsg += QStringLiteral(" unable to send recessive bit\n");
            if (b & CAN_ERR_PROT_OVERLOAD)
                errorMsg += QStringLiteral(" bus overload\n");
            if (b & CAN_ERR_PROT_ACTIVE)
                errorMsg += QStringLiteral(" active error announcement\n");
            if (b & CAN_ERR_PROT_TX)
                errorMsg += QStringLiteral(" error occurred on transmission\n");

            if (b == CAN_ERR_PROT_UNSPEC)
                errorMsg += QStringLiteral(" unspecified\n");
        }
        if (data.size() > 4) {
            char b = data.at(3);
            if (b == CAN_ERR_PROT_LOC_SOF)
                errorMsg += QStringLiteral(" start of frame\n");
            if (b == CAN_ERR_PROT_LOC_ID28_21)
                errorMsg += QStringLiteral(" ID bits 28 - 21 (SFF: 10 - 3)\n");
            if (b == CAN_ERR_PROT_LOC_ID20_18)
                errorMsg += QStringLiteral(" ID bits 20 - 18 (SFF: 2 - 0 )\n");
            if (b == CAN_ERR_PROT_LOC_SRTR)
                errorMsg += QStringLiteral(" substitute RTR (SFF: RTR)\n");
            if (b == CAN_ERR_PROT_LOC_IDE)
                errorMsg += QStringLiteral(" identifier extension\n");
            if (b == CAN_ERR_PROT_LOC_ID17_13)
                errorMsg += QStringLiteral(" ID bits 17-13\n");
            if (b == CAN_ERR_PROT_LOC_ID12_05)
                errorMsg += QStringLiteral(" ID bits 12-5\n");
            if (b == CAN_ERR_PROT_LOC_ID04_00)
                errorMsg += QStringLiteral(" ID bits 4-0\n");
            if (b == CAN_ERR_PROT_LOC_RTR)
                errorMsg += QStringLiteral(" RTR\n");
            if (b == CAN_ERR_PROT_LOC_RES1)
                errorMsg += QStringLiteral(" reserved bit 1\n");
            if (b == CAN_ERR_PROT_LOC_RES0)
                errorMsg += QStringLiteral(" reserved bit 0\n");
            if (b == CAN_ERR_PROT_LOC_DLC)
                errorMsg += QStringLiteral(" data length code\n");
            if (b == CAN_ERR_PROT_LOC_DATA)
                errorMsg += QStringLiteral(" data section\n");
            if (b == CAN_ERR_PROT_LOC_CRC_SEQ)
                errorMsg += QStringLiteral(" CRC sequence\n");
            if (b == CAN_ERR_PROT_LOC_CRC_DEL)
                errorMsg += QStringLiteral(" CRC delimiter\n");
            if (b == CAN_ERR_PROT_LOC_ACK)
                errorMsg += QStringLiteral(" ACK slot\n");
            if (b == CAN_ERR_PROT_LOC_ACK_DEL)
                errorMsg += QStringLiteral(" ACK delimiter\n");
            if (b == CAN_ERR_PROT_LOC_EOF)
                errorMsg += QStringLiteral(" end of frame\n");
            if (b == CAN_ERR_PROT_LOC_INTERM)
                errorMsg += QStringLiteral(" Intermission\n");

            if (b == CAN_ERR_PROT_LOC_UNSPEC)
                errorMsg += QStringLiteral(" unspecified\n");
        }
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: errorMsg += QStringLiteral("Protocol violation:\n");
|——————Node:assignment_expression Text: errorMsg += QStringLiteral("Protocol violation:\n")
|———————Node:identifier Text: errorMsg
|———————Node:+= Text: +=
|———————Node:call_expression Text: QStringLiteral("Protocol violation:\n")
|————————Node:identifier Text: QStringLiteral
|————————Node:argument_list Text: ("Protocol violation:\n")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Protocol violation:\n"
|——————————Node:" Text: "
|——————————Node:string_content Text: Protocol violation:
|——————————Node:escape_sequence Text: \n
|——————————Node:" Text: "
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (data.size() > 3) {
            char b = data.at(2);
            if (b & CAN_ERR_PROT_BIT)
                errorMsg += QStringLiteral(" single bit error\n");
            if (b & CAN_ERR_PROT_FORM)
                errorMsg += QStringLiteral(" frame format error\n");
            if (b & CAN_ERR_PROT_STUFF)
                errorMsg += QStringLiteral(" bit stuffing error\n");
            if (b & CAN_ERR_PROT_BIT0)
                errorMsg += QStringLiteral(" unable to send dominant bit\n");
            if (b & CAN_ERR_PROT_BIT1)
                errorMsg += QStringLiteral(" unable to send recessive bit\n");
            if (b & CAN_ERR_PROT_OVERLOAD)
                errorMsg += QStringLiteral(" bus overload\n");
            if (b & CAN_ERR_PROT_ACTIVE)
                errorMsg += QStringLiteral(" active error announcement\n");
            if (b & CAN_ERR_PROT_TX)
                errorMsg += QStringLiteral(" error occurred on transmission\n");

            if (b == CAN_ERR_PROT_UNSPEC)
                errorMsg += QStringLiteral(" unspecified\n");
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (data.size() > 3)
|———————Node:( Text: (
|———————Node:binary_expression Text: data.size() > 3
|————————Node:call_expression Text: data.size()
|—————————Node:field_expression Text: data.size
|——————————Node:identifier Text: data
|——————————Node:. Text: .
|——————————Node:field_identifier Text: size
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:> Text: >
|————————Node:number_literal Text: 3
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            char b = data.at(2);
            if (b & CAN_ERR_PROT_BIT)
                errorMsg += QStringLiteral(" single bit error\n");
            if (b & CAN_ERR_PROT_FORM)
                errorMsg += QStringLiteral(" frame format error\n");
            if (b & CAN_ERR_PROT_STUFF)
                errorMsg += QStringLiteral(" bit stuffing error\n");
            if (b & CAN_ERR_PROT_BIT0)
                errorMsg += QStringLiteral(" unable to send dominant bit\n");
            if (b & CAN_ERR_PROT_BIT1)
                errorMsg += QStringLiteral(" unable to send recessive bit\n");
            if (b & CAN_ERR_PROT_OVERLOAD)
                errorMsg += QStringLiteral(" bus overload\n");
            if (b & CAN_ERR_PROT_ACTIVE)
                errorMsg += QStringLiteral(" active error announcement\n");
            if (b & CAN_ERR_PROT_TX)
                errorMsg += QStringLiteral(" error occurred on transmission\n");

            if (b == CAN_ERR_PROT_UNSPEC)
                errorMsg += QStringLiteral(" unspecified\n");
        }
|———————Node:{ Text: {
|———————Node:declaration Text: char b = data.at(2);
|————————Node:primitive_type Text: char
|————————Node:init_declarator Text: b = data.at(2)
|—————————Node:identifier Text: b
|—————————Node:= Text: =
|—————————Node:call_expression Text: data.at(2)
|——————————Node:field_expression Text: data.at
|———————————Node:identifier Text: data
|———————————Node:. Text: .
|———————————Node:field_identifier Text: at
|——————————Node:argument_list Text: (2)
|———————————Node:( Text: (
|———————————Node:number_literal Text: 2
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:if_statement Text: if (b & CAN_ERR_PROT_BIT)
                errorMsg += QStringLiteral(" single bit error\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b & CAN_ERR_PROT_BIT)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b & CAN_ERR_PROT_BIT
|——————————Node:identifier Text: b
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_ERR_PROT_BIT
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" single bit error\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" single bit error\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" single bit error\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" single bit error\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " single bit error\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  single bit error
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b & CAN_ERR_PROT_FORM)
                errorMsg += QStringLiteral(" frame format error\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b & CAN_ERR_PROT_FORM)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b & CAN_ERR_PROT_FORM
|——————————Node:identifier Text: b
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_ERR_PROT_FORM
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" frame format error\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" frame format error\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" frame format error\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" frame format error\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " frame format error\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  frame format error
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b & CAN_ERR_PROT_STUFF)
                errorMsg += QStringLiteral(" bit stuffing error\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b & CAN_ERR_PROT_STUFF)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b & CAN_ERR_PROT_STUFF
|——————————Node:identifier Text: b
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_ERR_PROT_STUFF
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" bit stuffing error\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" bit stuffing error\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" bit stuffing error\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" bit stuffing error\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " bit stuffing error\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  bit stuffing error
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b & CAN_ERR_PROT_BIT0)
                errorMsg += QStringLiteral(" unable to send dominant bit\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b & CAN_ERR_PROT_BIT0)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b & CAN_ERR_PROT_BIT0
|——————————Node:identifier Text: b
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_ERR_PROT_BIT0
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" unable to send dominant bit\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" unable to send dominant bit\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" unable to send dominant bit\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" unable to send dominant bit\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " unable to send dominant bit\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  unable to send dominant bit
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b & CAN_ERR_PROT_BIT1)
                errorMsg += QStringLiteral(" unable to send recessive bit\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b & CAN_ERR_PROT_BIT1)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b & CAN_ERR_PROT_BIT1
|——————————Node:identifier Text: b
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_ERR_PROT_BIT1
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" unable to send recessive bit\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" unable to send recessive bit\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" unable to send recessive bit\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" unable to send recessive bit\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " unable to send recessive bit\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  unable to send recessive bit
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b & CAN_ERR_PROT_OVERLOAD)
                errorMsg += QStringLiteral(" bus overload\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b & CAN_ERR_PROT_OVERLOAD)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b & CAN_ERR_PROT_OVERLOAD
|——————————Node:identifier Text: b
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_ERR_PROT_OVERLOAD
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" bus overload\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" bus overload\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" bus overload\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" bus overload\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " bus overload\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  bus overload
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b & CAN_ERR_PROT_ACTIVE)
                errorMsg += QStringLiteral(" active error announcement\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b & CAN_ERR_PROT_ACTIVE)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b & CAN_ERR_PROT_ACTIVE
|——————————Node:identifier Text: b
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_ERR_PROT_ACTIVE
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" active error announcement\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" active error announcement\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" active error announcement\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" active error announcement\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " active error announcement\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  active error announcement
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b & CAN_ERR_PROT_TX)
                errorMsg += QStringLiteral(" error occurred on transmission\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b & CAN_ERR_PROT_TX)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b & CAN_ERR_PROT_TX
|——————————Node:identifier Text: b
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_ERR_PROT_TX
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" error occurred on transmission\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" error occurred on transmission\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" error occurred on transmission\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" error occurred on transmission\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " error occurred on transmission\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  error occurred on transmission
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b == CAN_ERR_PROT_UNSPEC)
                errorMsg += QStringLiteral(" unspecified\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b == CAN_ERR_PROT_UNSPEC)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b == CAN_ERR_PROT_UNSPEC
|——————————Node:identifier Text: b
|——————————Node:== Text: ==
|——————————Node:identifier Text: CAN_ERR_PROT_UNSPEC
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" unspecified\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" unspecified\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" unspecified\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" unspecified\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " unspecified\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  unspecified
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:if_statement Text: if (data.size() > 4) {
            char b = data.at(3);
            if (b == CAN_ERR_PROT_LOC_SOF)
                errorMsg += QStringLiteral(" start of frame\n");
            if (b == CAN_ERR_PROT_LOC_ID28_21)
                errorMsg += QStringLiteral(" ID bits 28 - 21 (SFF: 10 - 3)\n");
            if (b == CAN_ERR_PROT_LOC_ID20_18)
                errorMsg += QStringLiteral(" ID bits 20 - 18 (SFF: 2 - 0 )\n");
            if (b == CAN_ERR_PROT_LOC_SRTR)
                errorMsg += QStringLiteral(" substitute RTR (SFF: RTR)\n");
            if (b == CAN_ERR_PROT_LOC_IDE)
                errorMsg += QStringLiteral(" identifier extension\n");
            if (b == CAN_ERR_PROT_LOC_ID17_13)
                errorMsg += QStringLiteral(" ID bits 17-13\n");
            if (b == CAN_ERR_PROT_LOC_ID12_05)
                errorMsg += QStringLiteral(" ID bits 12-5\n");
            if (b == CAN_ERR_PROT_LOC_ID04_00)
                errorMsg += QStringLiteral(" ID bits 4-0\n");
            if (b == CAN_ERR_PROT_LOC_RTR)
                errorMsg += QStringLiteral(" RTR\n");
            if (b == CAN_ERR_PROT_LOC_RES1)
                errorMsg += QStringLiteral(" reserved bit 1\n");
            if (b == CAN_ERR_PROT_LOC_RES0)
                errorMsg += QStringLiteral(" reserved bit 0\n");
            if (b == CAN_ERR_PROT_LOC_DLC)
                errorMsg += QStringLiteral(" data length code\n");
            if (b == CAN_ERR_PROT_LOC_DATA)
                errorMsg += QStringLiteral(" data section\n");
            if (b == CAN_ERR_PROT_LOC_CRC_SEQ)
                errorMsg += QStringLiteral(" CRC sequence\n");
            if (b == CAN_ERR_PROT_LOC_CRC_DEL)
                errorMsg += QStringLiteral(" CRC delimiter\n");
            if (b == CAN_ERR_PROT_LOC_ACK)
                errorMsg += QStringLiteral(" ACK slot\n");
            if (b == CAN_ERR_PROT_LOC_ACK_DEL)
                errorMsg += QStringLiteral(" ACK delimiter\n");
            if (b == CAN_ERR_PROT_LOC_EOF)
                errorMsg += QStringLiteral(" end of frame\n");
            if (b == CAN_ERR_PROT_LOC_INTERM)
                errorMsg += QStringLiteral(" Intermission\n");

            if (b == CAN_ERR_PROT_LOC_UNSPEC)
                errorMsg += QStringLiteral(" unspecified\n");
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (data.size() > 4)
|———————Node:( Text: (
|———————Node:binary_expression Text: data.size() > 4
|————————Node:call_expression Text: data.size()
|—————————Node:field_expression Text: data.size
|——————————Node:identifier Text: data
|——————————Node:. Text: .
|——————————Node:field_identifier Text: size
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:> Text: >
|————————Node:number_literal Text: 4
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            char b = data.at(3);
            if (b == CAN_ERR_PROT_LOC_SOF)
                errorMsg += QStringLiteral(" start of frame\n");
            if (b == CAN_ERR_PROT_LOC_ID28_21)
                errorMsg += QStringLiteral(" ID bits 28 - 21 (SFF: 10 - 3)\n");
            if (b == CAN_ERR_PROT_LOC_ID20_18)
                errorMsg += QStringLiteral(" ID bits 20 - 18 (SFF: 2 - 0 )\n");
            if (b == CAN_ERR_PROT_LOC_SRTR)
                errorMsg += QStringLiteral(" substitute RTR (SFF: RTR)\n");
            if (b == CAN_ERR_PROT_LOC_IDE)
                errorMsg += QStringLiteral(" identifier extension\n");
            if (b == CAN_ERR_PROT_LOC_ID17_13)
                errorMsg += QStringLiteral(" ID bits 17-13\n");
            if (b == CAN_ERR_PROT_LOC_ID12_05)
                errorMsg += QStringLiteral(" ID bits 12-5\n");
            if (b == CAN_ERR_PROT_LOC_ID04_00)
                errorMsg += QStringLiteral(" ID bits 4-0\n");
            if (b == CAN_ERR_PROT_LOC_RTR)
                errorMsg += QStringLiteral(" RTR\n");
            if (b == CAN_ERR_PROT_LOC_RES1)
                errorMsg += QStringLiteral(" reserved bit 1\n");
            if (b == CAN_ERR_PROT_LOC_RES0)
                errorMsg += QStringLiteral(" reserved bit 0\n");
            if (b == CAN_ERR_PROT_LOC_DLC)
                errorMsg += QStringLiteral(" data length code\n");
            if (b == CAN_ERR_PROT_LOC_DATA)
                errorMsg += QStringLiteral(" data section\n");
            if (b == CAN_ERR_PROT_LOC_CRC_SEQ)
                errorMsg += QStringLiteral(" CRC sequence\n");
            if (b == CAN_ERR_PROT_LOC_CRC_DEL)
                errorMsg += QStringLiteral(" CRC delimiter\n");
            if (b == CAN_ERR_PROT_LOC_ACK)
                errorMsg += QStringLiteral(" ACK slot\n");
            if (b == CAN_ERR_PROT_LOC_ACK_DEL)
                errorMsg += QStringLiteral(" ACK delimiter\n");
            if (b == CAN_ERR_PROT_LOC_EOF)
                errorMsg += QStringLiteral(" end of frame\n");
            if (b == CAN_ERR_PROT_LOC_INTERM)
                errorMsg += QStringLiteral(" Intermission\n");

            if (b == CAN_ERR_PROT_LOC_UNSPEC)
                errorMsg += QStringLiteral(" unspecified\n");
        }
|———————Node:{ Text: {
|———————Node:declaration Text: char b = data.at(3);
|————————Node:primitive_type Text: char
|————————Node:init_declarator Text: b = data.at(3)
|—————————Node:identifier Text: b
|—————————Node:= Text: =
|—————————Node:call_expression Text: data.at(3)
|——————————Node:field_expression Text: data.at
|———————————Node:identifier Text: data
|———————————Node:. Text: .
|———————————Node:field_identifier Text: at
|——————————Node:argument_list Text: (3)
|———————————Node:( Text: (
|———————————Node:number_literal Text: 3
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:if_statement Text: if (b == CAN_ERR_PROT_LOC_SOF)
                errorMsg += QStringLiteral(" start of frame\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b == CAN_ERR_PROT_LOC_SOF)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b == CAN_ERR_PROT_LOC_SOF
|——————————Node:identifier Text: b
|——————————Node:== Text: ==
|——————————Node:identifier Text: CAN_ERR_PROT_LOC_SOF
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" start of frame\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" start of frame\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" start of frame\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" start of frame\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " start of frame\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  start of frame
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b == CAN_ERR_PROT_LOC_ID28_21)
                errorMsg += QStringLiteral(" ID bits 28 - 21 (SFF: 10 - 3)\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b == CAN_ERR_PROT_LOC_ID28_21)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b == CAN_ERR_PROT_LOC_ID28_21
|——————————Node:identifier Text: b
|——————————Node:== Text: ==
|——————————Node:identifier Text: CAN_ERR_PROT_LOC_ID28_21
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" ID bits 28 - 21 (SFF: 10 - 3)\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" ID bits 28 - 21 (SFF: 10 - 3)\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" ID bits 28 - 21 (SFF: 10 - 3)\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" ID bits 28 - 21 (SFF: 10 - 3)\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " ID bits 28 - 21 (SFF: 10 - 3)\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  ID bits 28 - 21 (SFF: 10 - 3)
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b == CAN_ERR_PROT_LOC_ID20_18)
                errorMsg += QStringLiteral(" ID bits 20 - 18 (SFF: 2 - 0 )\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b == CAN_ERR_PROT_LOC_ID20_18)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b == CAN_ERR_PROT_LOC_ID20_18
|——————————Node:identifier Text: b
|——————————Node:== Text: ==
|——————————Node:identifier Text: CAN_ERR_PROT_LOC_ID20_18
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" ID bits 20 - 18 (SFF: 2 - 0 )\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" ID bits 20 - 18 (SFF: 2 - 0 )\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" ID bits 20 - 18 (SFF: 2 - 0 )\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" ID bits 20 - 18 (SFF: 2 - 0 )\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " ID bits 20 - 18 (SFF: 2 - 0 )\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  ID bits 20 - 18 (SFF: 2 - 0 )
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b == CAN_ERR_PROT_LOC_SRTR)
                errorMsg += QStringLiteral(" substitute RTR (SFF: RTR)\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b == CAN_ERR_PROT_LOC_SRTR)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b == CAN_ERR_PROT_LOC_SRTR
|——————————Node:identifier Text: b
|——————————Node:== Text: ==
|——————————Node:identifier Text: CAN_ERR_PROT_LOC_SRTR
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" substitute RTR (SFF: RTR)\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" substitute RTR (SFF: RTR)\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" substitute RTR (SFF: RTR)\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" substitute RTR (SFF: RTR)\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " substitute RTR (SFF: RTR)\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  substitute RTR (SFF: RTR)
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b == CAN_ERR_PROT_LOC_IDE)
                errorMsg += QStringLiteral(" identifier extension\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b == CAN_ERR_PROT_LOC_IDE)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b == CAN_ERR_PROT_LOC_IDE
|——————————Node:identifier Text: b
|——————————Node:== Text: ==
|——————————Node:identifier Text: CAN_ERR_PROT_LOC_IDE
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" identifier extension\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" identifier extension\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" identifier extension\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" identifier extension\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " identifier extension\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  identifier extension
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b == CAN_ERR_PROT_LOC_ID17_13)
                errorMsg += QStringLiteral(" ID bits 17-13\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b == CAN_ERR_PROT_LOC_ID17_13)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b == CAN_ERR_PROT_LOC_ID17_13
|——————————Node:identifier Text: b
|——————————Node:== Text: ==
|——————————Node:identifier Text: CAN_ERR_PROT_LOC_ID17_13
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" ID bits 17-13\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" ID bits 17-13\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" ID bits 17-13\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" ID bits 17-13\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " ID bits 17-13\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  ID bits 17-13
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b == CAN_ERR_PROT_LOC_ID12_05)
                errorMsg += QStringLiteral(" ID bits 12-5\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b == CAN_ERR_PROT_LOC_ID12_05)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b == CAN_ERR_PROT_LOC_ID12_05
|——————————Node:identifier Text: b
|——————————Node:== Text: ==
|——————————Node:identifier Text: CAN_ERR_PROT_LOC_ID12_05
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" ID bits 12-5\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" ID bits 12-5\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" ID bits 12-5\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" ID bits 12-5\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " ID bits 12-5\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  ID bits 12-5
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b == CAN_ERR_PROT_LOC_ID04_00)
                errorMsg += QStringLiteral(" ID bits 4-0\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b == CAN_ERR_PROT_LOC_ID04_00)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b == CAN_ERR_PROT_LOC_ID04_00
|——————————Node:identifier Text: b
|——————————Node:== Text: ==
|——————————Node:identifier Text: CAN_ERR_PROT_LOC_ID04_00
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" ID bits 4-0\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" ID bits 4-0\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" ID bits 4-0\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" ID bits 4-0\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " ID bits 4-0\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  ID bits 4-0
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b == CAN_ERR_PROT_LOC_RTR)
                errorMsg += QStringLiteral(" RTR\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b == CAN_ERR_PROT_LOC_RTR)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b == CAN_ERR_PROT_LOC_RTR
|——————————Node:identifier Text: b
|——————————Node:== Text: ==
|——————————Node:identifier Text: CAN_ERR_PROT_LOC_RTR
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" RTR\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" RTR\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" RTR\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" RTR\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " RTR\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  RTR
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b == CAN_ERR_PROT_LOC_RES1)
                errorMsg += QStringLiteral(" reserved bit 1\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b == CAN_ERR_PROT_LOC_RES1)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b == CAN_ERR_PROT_LOC_RES1
|——————————Node:identifier Text: b
|——————————Node:== Text: ==
|——————————Node:identifier Text: CAN_ERR_PROT_LOC_RES1
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" reserved bit 1\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" reserved bit 1\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" reserved bit 1\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" reserved bit 1\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " reserved bit 1\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  reserved bit 1
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b == CAN_ERR_PROT_LOC_RES0)
                errorMsg += QStringLiteral(" reserved bit 0\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b == CAN_ERR_PROT_LOC_RES0)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b == CAN_ERR_PROT_LOC_RES0
|——————————Node:identifier Text: b
|——————————Node:== Text: ==
|——————————Node:identifier Text: CAN_ERR_PROT_LOC_RES0
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" reserved bit 0\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" reserved bit 0\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" reserved bit 0\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" reserved bit 0\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " reserved bit 0\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  reserved bit 0
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b == CAN_ERR_PROT_LOC_DLC)
                errorMsg += QStringLiteral(" data length code\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b == CAN_ERR_PROT_LOC_DLC)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b == CAN_ERR_PROT_LOC_DLC
|——————————Node:identifier Text: b
|——————————Node:== Text: ==
|——————————Node:identifier Text: CAN_ERR_PROT_LOC_DLC
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" data length code\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" data length code\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" data length code\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" data length code\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " data length code\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  data length code
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b == CAN_ERR_PROT_LOC_DATA)
                errorMsg += QStringLiteral(" data section\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b == CAN_ERR_PROT_LOC_DATA)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b == CAN_ERR_PROT_LOC_DATA
|——————————Node:identifier Text: b
|——————————Node:== Text: ==
|——————————Node:identifier Text: CAN_ERR_PROT_LOC_DATA
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" data section\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" data section\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" data section\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" data section\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " data section\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  data section
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b == CAN_ERR_PROT_LOC_CRC_SEQ)
                errorMsg += QStringLiteral(" CRC sequence\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b == CAN_ERR_PROT_LOC_CRC_SEQ)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b == CAN_ERR_PROT_LOC_CRC_SEQ
|——————————Node:identifier Text: b
|——————————Node:== Text: ==
|——————————Node:identifier Text: CAN_ERR_PROT_LOC_CRC_SEQ
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" CRC sequence\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" CRC sequence\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" CRC sequence\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" CRC sequence\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " CRC sequence\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  CRC sequence
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b == CAN_ERR_PROT_LOC_CRC_DEL)
                errorMsg += QStringLiteral(" CRC delimiter\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b == CAN_ERR_PROT_LOC_CRC_DEL)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b == CAN_ERR_PROT_LOC_CRC_DEL
|——————————Node:identifier Text: b
|——————————Node:== Text: ==
|——————————Node:identifier Text: CAN_ERR_PROT_LOC_CRC_DEL
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" CRC delimiter\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" CRC delimiter\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" CRC delimiter\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" CRC delimiter\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " CRC delimiter\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  CRC delimiter
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b == CAN_ERR_PROT_LOC_ACK)
                errorMsg += QStringLiteral(" ACK slot\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b == CAN_ERR_PROT_LOC_ACK)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b == CAN_ERR_PROT_LOC_ACK
|——————————Node:identifier Text: b
|——————————Node:== Text: ==
|——————————Node:identifier Text: CAN_ERR_PROT_LOC_ACK
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" ACK slot\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" ACK slot\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" ACK slot\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" ACK slot\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " ACK slot\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  ACK slot
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b == CAN_ERR_PROT_LOC_ACK_DEL)
                errorMsg += QStringLiteral(" ACK delimiter\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b == CAN_ERR_PROT_LOC_ACK_DEL)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b == CAN_ERR_PROT_LOC_ACK_DEL
|——————————Node:identifier Text: b
|——————————Node:== Text: ==
|——————————Node:identifier Text: CAN_ERR_PROT_LOC_ACK_DEL
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" ACK delimiter\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" ACK delimiter\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" ACK delimiter\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" ACK delimiter\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " ACK delimiter\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  ACK delimiter
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b == CAN_ERR_PROT_LOC_EOF)
                errorMsg += QStringLiteral(" end of frame\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b == CAN_ERR_PROT_LOC_EOF)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b == CAN_ERR_PROT_LOC_EOF
|——————————Node:identifier Text: b
|——————————Node:== Text: ==
|——————————Node:identifier Text: CAN_ERR_PROT_LOC_EOF
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" end of frame\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" end of frame\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" end of frame\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" end of frame\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " end of frame\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  end of frame
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b == CAN_ERR_PROT_LOC_INTERM)
                errorMsg += QStringLiteral(" Intermission\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b == CAN_ERR_PROT_LOC_INTERM)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b == CAN_ERR_PROT_LOC_INTERM
|——————————Node:identifier Text: b
|——————————Node:== Text: ==
|——————————Node:identifier Text: CAN_ERR_PROT_LOC_INTERM
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" Intermission\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" Intermission\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" Intermission\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" Intermission\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " Intermission\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  Intermission
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (b == CAN_ERR_PROT_LOC_UNSPEC)
                errorMsg += QStringLiteral(" unspecified\n");
|————————Node:if Text: if
|————————Node:condition_clause Text: (b == CAN_ERR_PROT_LOC_UNSPEC)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: b == CAN_ERR_PROT_LOC_UNSPEC
|——————————Node:identifier Text: b
|——————————Node:== Text: ==
|——————————Node:identifier Text: CAN_ERR_PROT_LOC_UNSPEC
|—————————Node:) Text: )
|————————Node:expression_statement Text: errorMsg += QStringLiteral(" unspecified\n");
|—————————Node:assignment_expression Text: errorMsg += QStringLiteral(" unspecified\n")
|——————————Node:identifier Text: errorMsg
|——————————Node:+= Text: +=
|——————————Node:call_expression Text: QStringLiteral(" unspecified\n")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: (" unspecified\n")
|————————————Node:( Text: (
|————————————Node:string_literal Text: " unspecified\n"
|—————————————Node:" Text: "
|—————————————Node:string_content Text:  unspecified
|—————————————Node:escape_sequence Text: \n
|—————————————Node:" Text: "
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:comment Text: // cut trailing \n
|———Node:if_statement Text: if (!errorMsg.isEmpty())
        errorMsg.chop(1);
|————Node:if Text: if
|————Node:condition_clause Text: (!errorMsg.isEmpty())
|—————Node:( Text: (
|—————Node:unary_expression Text: !errorMsg.isEmpty()
|——————Node:! Text: !
|——————Node:call_expression Text: errorMsg.isEmpty()
|———————Node:field_expression Text: errorMsg.isEmpty
|————————Node:identifier Text: errorMsg
|————————Node:. Text: .
|————————Node:field_identifier Text: isEmpty
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|—————Node:) Text: )
|————Node:expression_statement Text: errorMsg.chop(1);
|—————Node:call_expression Text: errorMsg.chop(1)
|——————Node:field_expression Text: errorMsg.chop
|———————Node:identifier Text: errorMsg
|———————Node:. Text: .
|———————Node:field_identifier Text: chop
|——————Node:argument_list Text: (1)
|———————Node:( Text: (
|———————Node:number_literal Text: 1
|———————Node:) Text: )
|—————Node:; Text: ;
|———Node:return_statement Text: return errorMsg;
|————Node:return Text: return
|————Node:identifier Text: errorMsg
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void SocketCanBackend::readSocket()
{
    QVector<QCanBusFrame> newFrames;

    while (true) {
        struct canfd_frame frame;
        int bytesReceived;

        bytesReceived = ::read(canSocket, &frame, sizeof(frame));

        if (bytesReceived <= 0) {
            break;
        } else if (bytesReceived != CANFD_MTU && bytesReceived != CAN_MTU) {
            setError(tr("ERROR SocketCanBackend: incomplete can frame"),
                     QCanBusDevice::CanBusError::ReadError);
            continue;
        } else if (frame.len > bytesReceived - offsetof(canfd_frame, data)) {
            setError(tr("ERROR SocketCanBackend: invalid can frame length"),
                     QCanBusDevice::CanBusError::ReadError);
            continue;
        }

        struct timeval timeStamp;
        if (ioctl(canSocket, SIOCGSTAMP, &timeStamp) < 0) {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ReadError);
            timeStamp.tv_sec = 0;
            timeStamp.tv_usec = 0;
        }

        QCanBusFrame::TimeStamp stamp;
        stamp.setSeconds(timeStamp.tv_sec);
        stamp.setMicroSeconds(timeStamp.tv_usec);

        QCanBusFrame bufferedFrame;
        bufferedFrame.setTimeStamp(stamp);

        bufferedFrame.setExtendedFrameFormat(frame.can_id & CAN_EFF_FLAG);
        Q_ASSERT(frame.len <= CANFD_MAX_DLEN);

        if (frame.can_id & CAN_RTR_FLAG)
            bufferedFrame.setFrameType(QCanBusFrame::RemoteRequestFrame);
        if (frame.can_id & CAN_ERR_FLAG)
            bufferedFrame.setFrameType(QCanBusFrame::ErrorFrame);

        bufferedFrame.setFrameId(frame.can_id & CAN_EFF_MASK);

        QByteArray load(reinterpret_cast<char *>(frame.data), frame.len);
        bufferedFrame.setPayload(load);

        newFrames.append(bufferedFrame);
    }

    enqueueReceivedFrames(newFrames);
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: SocketCanBackend::readSocket()
|———Node:qualified_identifier Text: SocketCanBackend::readSocket
|————Node:namespace_identifier Text: SocketCanBackend
|————Node::: Text: ::
|————Node:identifier Text: readSocket
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    QVector<QCanBusFrame> newFrames;

    while (true) {
        struct canfd_frame frame;
        int bytesReceived;

        bytesReceived = ::read(canSocket, &frame, sizeof(frame));

        if (bytesReceived <= 0) {
            break;
        } else if (bytesReceived != CANFD_MTU && bytesReceived != CAN_MTU) {
            setError(tr("ERROR SocketCanBackend: incomplete can frame"),
                     QCanBusDevice::CanBusError::ReadError);
            continue;
        } else if (frame.len > bytesReceived - offsetof(canfd_frame, data)) {
            setError(tr("ERROR SocketCanBackend: invalid can frame length"),
                     QCanBusDevice::CanBusError::ReadError);
            continue;
        }

        struct timeval timeStamp;
        if (ioctl(canSocket, SIOCGSTAMP, &timeStamp) < 0) {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ReadError);
            timeStamp.tv_sec = 0;
            timeStamp.tv_usec = 0;
        }

        QCanBusFrame::TimeStamp stamp;
        stamp.setSeconds(timeStamp.tv_sec);
        stamp.setMicroSeconds(timeStamp.tv_usec);

        QCanBusFrame bufferedFrame;
        bufferedFrame.setTimeStamp(stamp);

        bufferedFrame.setExtendedFrameFormat(frame.can_id & CAN_EFF_FLAG);
        Q_ASSERT(frame.len <= CANFD_MAX_DLEN);

        if (frame.can_id & CAN_RTR_FLAG)
            bufferedFrame.setFrameType(QCanBusFrame::RemoteRequestFrame);
        if (frame.can_id & CAN_ERR_FLAG)
            bufferedFrame.setFrameType(QCanBusFrame::ErrorFrame);

        bufferedFrame.setFrameId(frame.can_id & CAN_EFF_MASK);

        QByteArray load(reinterpret_cast<char *>(frame.data), frame.len);
        bufferedFrame.setPayload(load);

        newFrames.append(bufferedFrame);
    }

    enqueueReceivedFrames(newFrames);
}
|———Node:{ Text: {
|———Node:declaration Text: QVector<QCanBusFrame> newFrames;
|————Node:template_type Text: QVector<QCanBusFrame>
|—————Node:type_identifier Text: QVector
|—————Node:template_argument_list Text: <QCanBusFrame>
|——————Node:< Text: <
|——————Node:type_descriptor Text: QCanBusFrame
|———————Node:type_identifier Text: QCanBusFrame
|——————Node:> Text: >
|————Node:identifier Text: newFrames
|————Node:; Text: ;
|———Node:while_statement Text: while (true) {
        struct canfd_frame frame;
        int bytesReceived;

        bytesReceived = ::read(canSocket, &frame, sizeof(frame));

        if (bytesReceived <= 0) {
            break;
        } else if (bytesReceived != CANFD_MTU && bytesReceived != CAN_MTU) {
            setError(tr("ERROR SocketCanBackend: incomplete can frame"),
                     QCanBusDevice::CanBusError::ReadError);
            continue;
        } else if (frame.len > bytesReceived - offsetof(canfd_frame, data)) {
            setError(tr("ERROR SocketCanBackend: invalid can frame length"),
                     QCanBusDevice::CanBusError::ReadError);
            continue;
        }

        struct timeval timeStamp;
        if (ioctl(canSocket, SIOCGSTAMP, &timeStamp) < 0) {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ReadError);
            timeStamp.tv_sec = 0;
            timeStamp.tv_usec = 0;
        }

        QCanBusFrame::TimeStamp stamp;
        stamp.setSeconds(timeStamp.tv_sec);
        stamp.setMicroSeconds(timeStamp.tv_usec);

        QCanBusFrame bufferedFrame;
        bufferedFrame.setTimeStamp(stamp);

        bufferedFrame.setExtendedFrameFormat(frame.can_id & CAN_EFF_FLAG);
        Q_ASSERT(frame.len <= CANFD_MAX_DLEN);

        if (frame.can_id & CAN_RTR_FLAG)
            bufferedFrame.setFrameType(QCanBusFrame::RemoteRequestFrame);
        if (frame.can_id & CAN_ERR_FLAG)
            bufferedFrame.setFrameType(QCanBusFrame::ErrorFrame);

        bufferedFrame.setFrameId(frame.can_id & CAN_EFF_MASK);

        QByteArray load(reinterpret_cast<char *>(frame.data), frame.len);
        bufferedFrame.setPayload(load);

        newFrames.append(bufferedFrame);
    }
|————Node:while Text: while
|————Node:condition_clause Text: (true)
|—————Node:( Text: (
|—————Node:true Text: true
|—————Node:) Text: )
|————Node:compound_statement Text: {
        struct canfd_frame frame;
        int bytesReceived;

        bytesReceived = ::read(canSocket, &frame, sizeof(frame));

        if (bytesReceived <= 0) {
            break;
        } else if (bytesReceived != CANFD_MTU && bytesReceived != CAN_MTU) {
            setError(tr("ERROR SocketCanBackend: incomplete can frame"),
                     QCanBusDevice::CanBusError::ReadError);
            continue;
        } else if (frame.len > bytesReceived - offsetof(canfd_frame, data)) {
            setError(tr("ERROR SocketCanBackend: invalid can frame length"),
                     QCanBusDevice::CanBusError::ReadError);
            continue;
        }

        struct timeval timeStamp;
        if (ioctl(canSocket, SIOCGSTAMP, &timeStamp) < 0) {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ReadError);
            timeStamp.tv_sec = 0;
            timeStamp.tv_usec = 0;
        }

        QCanBusFrame::TimeStamp stamp;
        stamp.setSeconds(timeStamp.tv_sec);
        stamp.setMicroSeconds(timeStamp.tv_usec);

        QCanBusFrame bufferedFrame;
        bufferedFrame.setTimeStamp(stamp);

        bufferedFrame.setExtendedFrameFormat(frame.can_id & CAN_EFF_FLAG);
        Q_ASSERT(frame.len <= CANFD_MAX_DLEN);

        if (frame.can_id & CAN_RTR_FLAG)
            bufferedFrame.setFrameType(QCanBusFrame::RemoteRequestFrame);
        if (frame.can_id & CAN_ERR_FLAG)
            bufferedFrame.setFrameType(QCanBusFrame::ErrorFrame);

        bufferedFrame.setFrameId(frame.can_id & CAN_EFF_MASK);

        QByteArray load(reinterpret_cast<char *>(frame.data), frame.len);
        bufferedFrame.setPayload(load);

        newFrames.append(bufferedFrame);
    }
|—————Node:{ Text: {
|—————Node:declaration Text: struct canfd_frame frame;
|——————Node:struct_specifier Text: struct canfd_frame
|———————Node:struct Text: struct
|———————Node:type_identifier Text: canfd_frame
|——————Node:identifier Text: frame
|——————Node:; Text: ;
|—————Node:declaration Text: int bytesReceived;
|——————Node:primitive_type Text: int
|——————Node:identifier Text: bytesReceived
|——————Node:; Text: ;
|—————Node:expression_statement Text: bytesReceived = ::read(canSocket, &frame, sizeof(frame));
|——————Node:assignment_expression Text: bytesReceived = ::read(canSocket, &frame, sizeof(frame))
|———————Node:identifier Text: bytesReceived
|———————Node:= Text: =
|———————Node:call_expression Text: ::read(canSocket, &frame, sizeof(frame))
|————————Node:qualified_identifier Text: ::read
|—————————Node::: Text: ::
|—————————Node:identifier Text: read
|————————Node:argument_list Text: (canSocket, &frame, sizeof(frame))
|—————————Node:( Text: (
|—————————Node:identifier Text: canSocket
|—————————Node:, Text: ,
|—————————Node:pointer_expression Text: &frame
|——————————Node:& Text: &
|——————————Node:identifier Text: frame
|—————————Node:, Text: ,
|—————————Node:sizeof_expression Text: sizeof(frame)
|——————————Node:sizeof Text: sizeof
|——————————Node:parenthesized_expression Text: (frame)
|———————————Node:( Text: (
|———————————Node:identifier Text: frame
|———————————Node:) Text: )
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (bytesReceived <= 0) {
            break;
        } else if (bytesReceived != CANFD_MTU && bytesReceived != CAN_MTU) {
            setError(tr("ERROR SocketCanBackend: incomplete can frame"),
                     QCanBusDevice::CanBusError::ReadError);
            continue;
        } else if (frame.len > bytesReceived - offsetof(canfd_frame, data)) {
            setError(tr("ERROR SocketCanBackend: invalid can frame length"),
                     QCanBusDevice::CanBusError::ReadError);
            continue;
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (bytesReceived <= 0)
|———————Node:( Text: (
|———————Node:binary_expression Text: bytesReceived <= 0
|————————Node:identifier Text: bytesReceived
|————————Node:<= Text: <=
|————————Node:number_literal Text: 0
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            break;
        }
|———————Node:{ Text: {
|———————Node:break_statement Text: break;
|————————Node:break Text: break
|————————Node:; Text: ;
|———————Node:} Text: }
|——————Node:else_clause Text: else if (bytesReceived != CANFD_MTU && bytesReceived != CAN_MTU) {
            setError(tr("ERROR SocketCanBackend: incomplete can frame"),
                     QCanBusDevice::CanBusError::ReadError);
            continue;
        } else if (frame.len > bytesReceived - offsetof(canfd_frame, data)) {
            setError(tr("ERROR SocketCanBackend: invalid can frame length"),
                     QCanBusDevice::CanBusError::ReadError);
            continue;
        }
|———————Node:else Text: else
|———————Node:if_statement Text: if (bytesReceived != CANFD_MTU && bytesReceived != CAN_MTU) {
            setError(tr("ERROR SocketCanBackend: incomplete can frame"),
                     QCanBusDevice::CanBusError::ReadError);
            continue;
        } else if (frame.len > bytesReceived - offsetof(canfd_frame, data)) {
            setError(tr("ERROR SocketCanBackend: invalid can frame length"),
                     QCanBusDevice::CanBusError::ReadError);
            continue;
        }
|————————Node:if Text: if
|————————Node:condition_clause Text: (bytesReceived != CANFD_MTU && bytesReceived != CAN_MTU)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: bytesReceived != CANFD_MTU && bytesReceived != CAN_MTU
|——————————Node:binary_expression Text: bytesReceived != CANFD_MTU
|———————————Node:identifier Text: bytesReceived
|———————————Node:!= Text: !=
|———————————Node:identifier Text: CANFD_MTU
|——————————Node:&& Text: &&
|——————————Node:binary_expression Text: bytesReceived != CAN_MTU
|———————————Node:identifier Text: bytesReceived
|———————————Node:!= Text: !=
|———————————Node:identifier Text: CAN_MTU
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
            setError(tr("ERROR SocketCanBackend: incomplete can frame"),
                     QCanBusDevice::CanBusError::ReadError);
            continue;
        }
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: setError(tr("ERROR SocketCanBackend: incomplete can frame"),
                     QCanBusDevice::CanBusError::ReadError);
|——————————Node:call_expression Text: setError(tr("ERROR SocketCanBackend: incomplete can frame"),
                     QCanBusDevice::CanBusError::ReadError)
|———————————Node:identifier Text: setError
|———————————Node:argument_list Text: (tr("ERROR SocketCanBackend: incomplete can frame"),
                     QCanBusDevice::CanBusError::ReadError)
|————————————Node:( Text: (
|————————————Node:call_expression Text: tr("ERROR SocketCanBackend: incomplete can frame")
|—————————————Node:identifier Text: tr
|—————————————Node:argument_list Text: ("ERROR SocketCanBackend: incomplete can frame")
|——————————————Node:( Text: (
|——————————————Node:string_literal Text: "ERROR SocketCanBackend: incomplete can frame"
|———————————————Node:" Text: "
|———————————————Node:string_content Text: ERROR SocketCanBackend: incomplete can frame
|———————————————Node:" Text: "
|——————————————Node:) Text: )
|————————————Node:, Text: ,
|————————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ReadError
|—————————————Node:namespace_identifier Text: QCanBusDevice
|—————————————Node::: Text: ::
|—————————————Node:qualified_identifier Text: CanBusError::ReadError
|——————————————Node:namespace_identifier Text: CanBusError
|——————————————Node::: Text: ::
|——————————————Node:identifier Text: ReadError
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:continue_statement Text: continue;
|——————————Node:continue Text: continue
|——————————Node:; Text: ;
|—————————Node:} Text: }
|————————Node:else_clause Text: else if (frame.len > bytesReceived - offsetof(canfd_frame, data)) {
            setError(tr("ERROR SocketCanBackend: invalid can frame length"),
                     QCanBusDevice::CanBusError::ReadError);
            continue;
        }
|—————————Node:else Text: else
|—————————Node:if_statement Text: if (frame.len > bytesReceived - offsetof(canfd_frame, data)) {
            setError(tr("ERROR SocketCanBackend: invalid can frame length"),
                     QCanBusDevice::CanBusError::ReadError);
            continue;
        }
|——————————Node:if Text: if
|——————————Node:condition_clause Text: (frame.len > bytesReceived - offsetof(canfd_frame, data))
|———————————Node:( Text: (
|———————————Node:binary_expression Text: frame.len > bytesReceived - offsetof(canfd_frame, data)
|————————————Node:field_expression Text: frame.len
|—————————————Node:identifier Text: frame
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: len
|————————————Node:> Text: >
|————————————Node:binary_expression Text: bytesReceived - offsetof(canfd_frame, data)
|—————————————Node:identifier Text: bytesReceived
|—————————————Node:- Text: -
|—————————————Node:offsetof_expression Text: offsetof(canfd_frame, data)
|——————————————Node:offsetof Text: offsetof
|——————————————Node:( Text: (
|——————————————Node:type_descriptor Text: canfd_frame
|———————————————Node:type_identifier Text: canfd_frame
|——————————————Node:, Text: ,
|——————————————Node:field_identifier Text: data
|——————————————Node:) Text: )
|———————————Node:) Text: )
|——————————Node:compound_statement Text: {
            setError(tr("ERROR SocketCanBackend: invalid can frame length"),
                     QCanBusDevice::CanBusError::ReadError);
            continue;
        }
|———————————Node:{ Text: {
|———————————Node:expression_statement Text: setError(tr("ERROR SocketCanBackend: invalid can frame length"),
                     QCanBusDevice::CanBusError::ReadError);
|————————————Node:call_expression Text: setError(tr("ERROR SocketCanBackend: invalid can frame length"),
                     QCanBusDevice::CanBusError::ReadError)
|—————————————Node:identifier Text: setError
|—————————————Node:argument_list Text: (tr("ERROR SocketCanBackend: invalid can frame length"),
                     QCanBusDevice::CanBusError::ReadError)
|——————————————Node:( Text: (
|——————————————Node:call_expression Text: tr("ERROR SocketCanBackend: invalid can frame length")
|———————————————Node:identifier Text: tr
|———————————————Node:argument_list Text: ("ERROR SocketCanBackend: invalid can frame length")
|————————————————Node:( Text: (
|————————————————Node:string_literal Text: "ERROR SocketCanBackend: invalid can frame length"
|—————————————————Node:" Text: "
|—————————————————Node:string_content Text: ERROR SocketCanBackend: invalid can frame length
|—————————————————Node:" Text: "
|————————————————Node:) Text: )
|——————————————Node:, Text: ,
|——————————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ReadError
|———————————————Node:namespace_identifier Text: QCanBusDevice
|———————————————Node::: Text: ::
|———————————————Node:qualified_identifier Text: CanBusError::ReadError
|————————————————Node:namespace_identifier Text: CanBusError
|————————————————Node::: Text: ::
|————————————————Node:identifier Text: ReadError
|——————————————Node:) Text: )
|————————————Node:; Text: ;
|———————————Node:continue_statement Text: continue;
|————————————Node:continue Text: continue
|————————————Node:; Text: ;
|———————————Node:} Text: }
|—————Node:declaration Text: struct timeval timeStamp;
|——————Node:struct_specifier Text: struct timeval
|———————Node:struct Text: struct
|———————Node:type_identifier Text: timeval
|——————Node:identifier Text: timeStamp
|——————Node:; Text: ;
|—————Node:if_statement Text: if (ioctl(canSocket, SIOCGSTAMP, &timeStamp) < 0) {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ReadError);
            timeStamp.tv_sec = 0;
            timeStamp.tv_usec = 0;
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (ioctl(canSocket, SIOCGSTAMP, &timeStamp) < 0)
|———————Node:( Text: (
|———————Node:binary_expression Text: ioctl(canSocket, SIOCGSTAMP, &timeStamp) < 0
|————————Node:call_expression Text: ioctl(canSocket, SIOCGSTAMP, &timeStamp)
|—————————Node:identifier Text: ioctl
|—————————Node:argument_list Text: (canSocket, SIOCGSTAMP, &timeStamp)
|——————————Node:( Text: (
|——————————Node:identifier Text: canSocket
|——————————Node:, Text: ,
|——————————Node:identifier Text: SIOCGSTAMP
|——————————Node:, Text: ,
|——————————Node:pointer_expression Text: &timeStamp
|———————————Node:& Text: &
|———————————Node:identifier Text: timeStamp
|——————————Node:) Text: )
|————————Node:< Text: <
|————————Node:number_literal Text: 0
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ReadError);
            timeStamp.tv_sec = 0;
            timeStamp.tv_usec = 0;
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ReadError);
|————————Node:call_expression Text: setError(qt_error_string(errno),
                     QCanBusDevice::CanBusError::ReadError)
|—————————Node:identifier Text: setError
|—————————Node:argument_list Text: (qt_error_string(errno),
                     QCanBusDevice::CanBusError::ReadError)
|——————————Node:( Text: (
|——————————Node:call_expression Text: qt_error_string(errno)
|———————————Node:identifier Text: qt_error_string
|———————————Node:argument_list Text: (errno)
|————————————Node:( Text: (
|————————————Node:identifier Text: errno
|————————————Node:) Text: )
|——————————Node:, Text: ,
|——————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ReadError
|———————————Node:namespace_identifier Text: QCanBusDevice
|———————————Node::: Text: ::
|———————————Node:qualified_identifier Text: CanBusError::ReadError
|————————————Node:namespace_identifier Text: CanBusError
|————————————Node::: Text: ::
|————————————Node:identifier Text: ReadError
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: timeStamp.tv_sec = 0;
|————————Node:assignment_expression Text: timeStamp.tv_sec = 0
|—————————Node:field_expression Text: timeStamp.tv_sec
|——————————Node:identifier Text: timeStamp
|——————————Node:. Text: .
|——————————Node:field_identifier Text: tv_sec
|—————————Node:= Text: =
|—————————Node:number_literal Text: 0
|————————Node:; Text: ;
|———————Node:expression_statement Text: timeStamp.tv_usec = 0;
|————————Node:assignment_expression Text: timeStamp.tv_usec = 0
|—————————Node:field_expression Text: timeStamp.tv_usec
|——————————Node:identifier Text: timeStamp
|——————————Node:. Text: .
|——————————Node:field_identifier Text: tv_usec
|—————————Node:= Text: =
|—————————Node:number_literal Text: 0
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:declaration Text: QCanBusFrame::TimeStamp stamp;
|——————Node:qualified_identifier Text: QCanBusFrame::TimeStamp
|———————Node:namespace_identifier Text: QCanBusFrame
|———————Node::: Text: ::
|———————Node:type_identifier Text: TimeStamp
|——————Node:identifier Text: stamp
|——————Node:; Text: ;
|—————Node:expression_statement Text: stamp.setSeconds(timeStamp.tv_sec);
|——————Node:call_expression Text: stamp.setSeconds(timeStamp.tv_sec)
|———————Node:field_expression Text: stamp.setSeconds
|————————Node:identifier Text: stamp
|————————Node:. Text: .
|————————Node:field_identifier Text: setSeconds
|———————Node:argument_list Text: (timeStamp.tv_sec)
|————————Node:( Text: (
|————————Node:field_expression Text: timeStamp.tv_sec
|—————————Node:identifier Text: timeStamp
|—————————Node:. Text: .
|—————————Node:field_identifier Text: tv_sec
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: stamp.setMicroSeconds(timeStamp.tv_usec);
|——————Node:call_expression Text: stamp.setMicroSeconds(timeStamp.tv_usec)
|———————Node:field_expression Text: stamp.setMicroSeconds
|————————Node:identifier Text: stamp
|————————Node:. Text: .
|————————Node:field_identifier Text: setMicroSeconds
|———————Node:argument_list Text: (timeStamp.tv_usec)
|————————Node:( Text: (
|————————Node:field_expression Text: timeStamp.tv_usec
|—————————Node:identifier Text: timeStamp
|—————————Node:. Text: .
|—————————Node:field_identifier Text: tv_usec
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:declaration Text: QCanBusFrame bufferedFrame;
|——————Node:type_identifier Text: QCanBusFrame
|——————Node:identifier Text: bufferedFrame
|——————Node:; Text: ;
|—————Node:expression_statement Text: bufferedFrame.setTimeStamp(stamp);
|——————Node:call_expression Text: bufferedFrame.setTimeStamp(stamp)
|———————Node:field_expression Text: bufferedFrame.setTimeStamp
|————————Node:identifier Text: bufferedFrame
|————————Node:. Text: .
|————————Node:field_identifier Text: setTimeStamp
|———————Node:argument_list Text: (stamp)
|————————Node:( Text: (
|————————Node:identifier Text: stamp
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: bufferedFrame.setExtendedFrameFormat(frame.can_id & CAN_EFF_FLAG);
|——————Node:call_expression Text: bufferedFrame.setExtendedFrameFormat(frame.can_id & CAN_EFF_FLAG)
|———————Node:field_expression Text: bufferedFrame.setExtendedFrameFormat
|————————Node:identifier Text: bufferedFrame
|————————Node:. Text: .
|————————Node:field_identifier Text: setExtendedFrameFormat
|———————Node:argument_list Text: (frame.can_id & CAN_EFF_FLAG)
|————————Node:( Text: (
|————————Node:binary_expression Text: frame.can_id & CAN_EFF_FLAG
|—————————Node:field_expression Text: frame.can_id
|——————————Node:identifier Text: frame
|——————————Node:. Text: .
|——————————Node:field_identifier Text: can_id
|—————————Node:& Text: &
|—————————Node:identifier Text: CAN_EFF_FLAG
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: Q_ASSERT(frame.len <= CANFD_MAX_DLEN);
|——————Node:call_expression Text: Q_ASSERT(frame.len <= CANFD_MAX_DLEN)
|———————Node:identifier Text: Q_ASSERT
|———————Node:argument_list Text: (frame.len <= CANFD_MAX_DLEN)
|————————Node:( Text: (
|————————Node:binary_expression Text: frame.len <= CANFD_MAX_DLEN
|—————————Node:field_expression Text: frame.len
|——————————Node:identifier Text: frame
|——————————Node:. Text: .
|——————————Node:field_identifier Text: len
|—————————Node:<= Text: <=
|—————————Node:identifier Text: CANFD_MAX_DLEN
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (frame.can_id & CAN_RTR_FLAG)
            bufferedFrame.setFrameType(QCanBusFrame::RemoteRequestFrame);
|——————Node:if Text: if
|——————Node:condition_clause Text: (frame.can_id & CAN_RTR_FLAG)
|———————Node:( Text: (
|———————Node:binary_expression Text: frame.can_id & CAN_RTR_FLAG
|————————Node:field_expression Text: frame.can_id
|—————————Node:identifier Text: frame
|—————————Node:. Text: .
|—————————Node:field_identifier Text: can_id
|————————Node:& Text: &
|————————Node:identifier Text: CAN_RTR_FLAG
|———————Node:) Text: )
|——————Node:expression_statement Text: bufferedFrame.setFrameType(QCanBusFrame::RemoteRequestFrame);
|———————Node:call_expression Text: bufferedFrame.setFrameType(QCanBusFrame::RemoteRequestFrame)
|————————Node:field_expression Text: bufferedFrame.setFrameType
|—————————Node:identifier Text: bufferedFrame
|—————————Node:. Text: .
|—————————Node:field_identifier Text: setFrameType
|————————Node:argument_list Text: (QCanBusFrame::RemoteRequestFrame)
|—————————Node:( Text: (
|—————————Node:qualified_identifier Text: QCanBusFrame::RemoteRequestFrame
|——————————Node:namespace_identifier Text: QCanBusFrame
|——————————Node::: Text: ::
|——————————Node:identifier Text: RemoteRequestFrame
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:if_statement Text: if (frame.can_id & CAN_ERR_FLAG)
            bufferedFrame.setFrameType(QCanBusFrame::ErrorFrame);
|——————Node:if Text: if
|——————Node:condition_clause Text: (frame.can_id & CAN_ERR_FLAG)
|———————Node:( Text: (
|———————Node:binary_expression Text: frame.can_id & CAN_ERR_FLAG
|————————Node:field_expression Text: frame.can_id
|—————————Node:identifier Text: frame
|—————————Node:. Text: .
|—————————Node:field_identifier Text: can_id
|————————Node:& Text: &
|————————Node:identifier Text: CAN_ERR_FLAG
|———————Node:) Text: )
|——————Node:expression_statement Text: bufferedFrame.setFrameType(QCanBusFrame::ErrorFrame);
|———————Node:call_expression Text: bufferedFrame.setFrameType(QCanBusFrame::ErrorFrame)
|————————Node:field_expression Text: bufferedFrame.setFrameType
|—————————Node:identifier Text: bufferedFrame
|—————————Node:. Text: .
|—————————Node:field_identifier Text: setFrameType
|————————Node:argument_list Text: (QCanBusFrame::ErrorFrame)
|—————————Node:( Text: (
|—————————Node:qualified_identifier Text: QCanBusFrame::ErrorFrame
|——————————Node:namespace_identifier Text: QCanBusFrame
|——————————Node::: Text: ::
|——————————Node:identifier Text: ErrorFrame
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:expression_statement Text: bufferedFrame.setFrameId(frame.can_id & CAN_EFF_MASK);
|——————Node:call_expression Text: bufferedFrame.setFrameId(frame.can_id & CAN_EFF_MASK)
|———————Node:field_expression Text: bufferedFrame.setFrameId
|————————Node:identifier Text: bufferedFrame
|————————Node:. Text: .
|————————Node:field_identifier Text: setFrameId
|———————Node:argument_list Text: (frame.can_id & CAN_EFF_MASK)
|————————Node:( Text: (
|————————Node:binary_expression Text: frame.can_id & CAN_EFF_MASK
|—————————Node:field_expression Text: frame.can_id
|——————————Node:identifier Text: frame
|——————————Node:. Text: .
|——————————Node:field_identifier Text: can_id
|—————————Node:& Text: &
|—————————Node:identifier Text: CAN_EFF_MASK
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:declaration Text: QByteArray load(reinterpret_cast<char *>(frame.data), frame.len);
|——————Node:type_identifier Text: QByteArray
|——————Node:init_declarator Text: load(reinterpret_cast<char *>(frame.data), frame.len)
|———————Node:identifier Text: load
|———————Node:argument_list Text: (reinterpret_cast<char *>(frame.data), frame.len)
|————————Node:( Text: (
|————————Node:call_expression Text: reinterpret_cast<char *>(frame.data)
|—————————Node:template_function Text: reinterpret_cast<char *>
|——————————Node:identifier Text: reinterpret_cast
|——————————Node:template_argument_list Text: <char *>
|———————————Node:< Text: <
|———————————Node:type_descriptor Text: char *
|————————————Node:primitive_type Text: char
|————————————Node:abstract_pointer_declarator Text: *
|—————————————Node:* Text: *
|———————————Node:> Text: >
|—————————Node:argument_list Text: (frame.data)
|——————————Node:( Text: (
|——————————Node:field_expression Text: frame.data
|———————————Node:identifier Text: frame
|———————————Node:. Text: .
|———————————Node:field_identifier Text: data
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:field_expression Text: frame.len
|—————————Node:identifier Text: frame
|—————————Node:. Text: .
|—————————Node:field_identifier Text: len
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: bufferedFrame.setPayload(load);
|——————Node:call_expression Text: bufferedFrame.setPayload(load)
|———————Node:field_expression Text: bufferedFrame.setPayload
|————————Node:identifier Text: bufferedFrame
|————————Node:. Text: .
|————————Node:field_identifier Text: setPayload
|———————Node:argument_list Text: (load)
|————————Node:( Text: (
|————————Node:identifier Text: load
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: newFrames.append(bufferedFrame);
|——————Node:call_expression Text: newFrames.append(bufferedFrame)
|———————Node:field_expression Text: newFrames.append
|————————Node:identifier Text: newFrames
|————————Node:. Text: .
|————————Node:field_identifier Text: append
|———————Node:argument_list Text: (bufferedFrame)
|————————Node:( Text: (
|————————Node:identifier Text: bufferedFrame
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: enqueueReceivedFrames(newFrames);
|————Node:call_expression Text: enqueueReceivedFrames(newFrames)
|—————Node:identifier Text: enqueueReceivedFrames
|—————Node:argument_list Text: (newFrames)
|——————Node:( Text: (
|——————Node:identifier Text: newFrames
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:expression_statement Text: QT_END_NAMESPACE
|——Node:identifier Text: QT_END_NAMESPACE
|——Node:; Text: 
