qtserialbus-src\plugins\canbus\tinycan\tinycanbackend.cpp

|Node:translation_unit
|—Node:comment Text: /****************************************************************************
**
** Copyright (C) 2017 Denis Shienkov <denis.shienkov@gmail.com>
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the QtSerialBus module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL3$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 3 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPLv3 included in the
** packaging of this file. Please review the following information to
** ensure the GNU Lesser General Public License version 3 requirements
** will be met: https://www.gnu.org/licenses/lgpl.html.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 2.0 or later as published by the Free
** Software Foundation and appearing in the file LICENSE.GPL included in
** the packaging of this file. Please review the following information to
** ensure the GNU General Public License version 2.0 requirements will be
** met: http://www.gnu.org/licenses/gpl-2.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/
|—Node:preproc_include Text: #include "tinycanbackend.h"

|——Node:#include Text: #include
|——Node:string_literal Text: "tinycanbackend.h"
|———Node:" Text: "
|———Node:string_content Text: tinycanbackend.h
|———Node:" Text: "
|—Node:preproc_include Text: #include "tinycanbackend_p.h"

|——Node:#include Text: #include
|——Node:string_literal Text: "tinycanbackend_p.h"
|———Node:" Text: "
|———Node:string_content Text: tinycanbackend_p.h
|———Node:" Text: "
|—Node:preproc_include Text: #include "tinycan_symbols_p.h"

|——Node:#include Text: #include
|——Node:string_literal Text: "tinycan_symbols_p.h"
|———Node:" Text: "
|———Node:string_content Text: tinycan_symbols_p.h
|———Node:" Text: "
|—Node:preproc_include Text: #include <QtSerialBus/qcanbusdevice.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <QtSerialBus/qcanbusdevice.h>
|—Node:preproc_include Text: #include <QtCore/qtimer.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <QtCore/qtimer.h>
|—Node:preproc_include Text: #include <QtCore/qmutex.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <QtCore/qmutex.h>
|—Node:preproc_include Text: #include <QtCore/qcoreevent.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <QtCore/qcoreevent.h>
|—Node:preproc_include Text: #include <QtCore/qloggingcategory.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <QtCore/qloggingcategory.h>
|—Node:preproc_include Text: #include <algorithm>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <algorithm>
|—Node:declaration Text: QT_BEGIN_NAMESPACE

Q_DECLARE_LOGGING_CATEGORY(QT_CANBUS_PLUGINS_TINYCAN)
|——Node:type_identifier Text: QT_BEGIN_NAMESPACE
|——Node:init_declarator Text: Q_DECLARE_LOGGING_CATEGORY(QT_CANBUS_PLUGINS_TINYCAN)
|———Node:identifier Text: Q_DECLARE_LOGGING_CATEGORY
|———Node:argument_list Text: (QT_CANBUS_PLUGINS_TINYCAN)
|————Node:( Text: (
|————Node:identifier Text: QT_CANBUS_PLUGINS_TINYCAN
|————Node:) Text: )
|——Node:; Text: 
|—Node:preproc_ifdef Text: #ifndef LINK_LIBMHSTCAN
Q_GLOBAL_STATIC(QLibrary, mhstcanLibrary)
#endif
|——Node:#ifndef Text: #ifndef
|——Node:identifier Text: LINK_LIBMHSTCAN
|——Node:expression_statement Text: Q_GLOBAL_STATIC(QLibrary, mhstcanLibrary)
|———Node:call_expression Text: Q_GLOBAL_STATIC(QLibrary, mhstcanLibrary)
|————Node:identifier Text: Q_GLOBAL_STATIC
|————Node:argument_list Text: (QLibrary, mhstcanLibrary)
|—————Node:( Text: (
|—————Node:identifier Text: QLibrary
|—————Node:, Text: ,
|—————Node:identifier Text: mhstcanLibrary
|—————Node:) Text: )
|———Node:; Text: 
|——Node:#endif Text: #endif
|—Node:function_definition Text: bool TinyCanBackend::canCreate(QString *errorReason)
{
#ifdef LINK_LIBMHSTCAN
    return true;
#else
    static bool symbolsResolved = resolveTinyCanSymbols(mhstcanLibrary());
    if (Q_UNLIKELY(!symbolsResolved)) {
        *errorReason = mhstcanLibrary()->errorString();
        return false;
    }
    return true;
#endif
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: TinyCanBackend::canCreate(QString *errorReason)
|———Node:qualified_identifier Text: TinyCanBackend::canCreate
|————Node:namespace_identifier Text: TinyCanBackend
|————Node::: Text: ::
|————Node:identifier Text: canCreate
|———Node:parameter_list Text: (QString *errorReason)
|————Node:( Text: (
|————Node:parameter_declaration Text: QString *errorReason
|—————Node:type_identifier Text: QString
|—————Node:pointer_declarator Text: *errorReason
|——————Node:* Text: *
|——————Node:identifier Text: errorReason
|————Node:) Text: )
|——Node:compound_statement Text: {
#ifdef LINK_LIBMHSTCAN
    return true;
#else
    static bool symbolsResolved = resolveTinyCanSymbols(mhstcanLibrary());
    if (Q_UNLIKELY(!symbolsResolved)) {
        *errorReason = mhstcanLibrary()->errorString();
        return false;
    }
    return true;
#endif
}
|———Node:{ Text: {
|———Node:preproc_ifdef Text: #ifdef LINK_LIBMHSTCAN
    return true;
#else
    static bool symbolsResolved = resolveTinyCanSymbols(mhstcanLibrary());
    if (Q_UNLIKELY(!symbolsResolved)) {
        *errorReason = mhstcanLibrary()->errorString();
        return false;
    }
    return true;
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: LINK_LIBMHSTCAN
|————Node:return_statement Text: return true;
|—————Node:return Text: return
|—————Node:true Text: true
|—————Node:; Text: ;
|————Node:preproc_else Text: #else
    static bool symbolsResolved = resolveTinyCanSymbols(mhstcanLibrary());
    if (Q_UNLIKELY(!symbolsResolved)) {
        *errorReason = mhstcanLibrary()->errorString();
        return false;
    }
    return true;
|—————Node:#else Text: #else
|—————Node:declaration Text: static bool symbolsResolved = resolveTinyCanSymbols(mhstcanLibrary());
|——————Node:storage_class_specifier Text: static
|———————Node:static Text: static
|——————Node:primitive_type Text: bool
|——————Node:init_declarator Text: symbolsResolved = resolveTinyCanSymbols(mhstcanLibrary())
|———————Node:identifier Text: symbolsResolved
|———————Node:= Text: =
|———————Node:call_expression Text: resolveTinyCanSymbols(mhstcanLibrary())
|————————Node:identifier Text: resolveTinyCanSymbols
|————————Node:argument_list Text: (mhstcanLibrary())
|—————————Node:( Text: (
|—————————Node:call_expression Text: mhstcanLibrary()
|——————————Node:identifier Text: mhstcanLibrary
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (Q_UNLIKELY(!symbolsResolved)) {
        *errorReason = mhstcanLibrary()->errorString();
        return false;
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: (Q_UNLIKELY(!symbolsResolved))
|———————Node:( Text: (
|———————Node:call_expression Text: Q_UNLIKELY(!symbolsResolved)
|————————Node:identifier Text: Q_UNLIKELY
|————————Node:argument_list Text: (!symbolsResolved)
|—————————Node:( Text: (
|—————————Node:unary_expression Text: !symbolsResolved
|——————————Node:! Text: !
|——————————Node:identifier Text: symbolsResolved
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {
        *errorReason = mhstcanLibrary()->errorString();
        return false;
    }
|———————Node:{ Text: {
|———————Node:expression_statement Text: *errorReason = mhstcanLibrary()->errorString();
|————————Node:assignment_expression Text: *errorReason = mhstcanLibrary()->errorString()
|—————————Node:pointer_expression Text: *errorReason
|——————————Node:* Text: *
|——————————Node:identifier Text: errorReason
|—————————Node:= Text: =
|—————————Node:call_expression Text: mhstcanLibrary()->errorString()
|——————————Node:field_expression Text: mhstcanLibrary()->errorString
|———————————Node:call_expression Text: mhstcanLibrary()
|————————————Node:identifier Text: mhstcanLibrary
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:-> Text: ->
|———————————Node:field_identifier Text: errorString
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:return_statement Text: return false;
|————————Node:return Text: return
|————————Node:false Text: false
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:return_statement Text: return true;
|——————Node:return Text: return
|——————Node:true Text: true
|——————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:} Text: }
|—Node:function_definition Text: QList<QCanBusDeviceInfo> TinyCanBackend::interfaces()
{
    QList<QCanBusDeviceInfo> result;
    result.append(createDeviceInfo(QStringLiteral("can0.0")));
    return result;
}
|——Node:template_type Text: QList<QCanBusDeviceInfo>
|———Node:type_identifier Text: QList
|———Node:template_argument_list Text: <QCanBusDeviceInfo>
|————Node:< Text: <
|————Node:type_descriptor Text: QCanBusDeviceInfo
|—————Node:type_identifier Text: QCanBusDeviceInfo
|————Node:> Text: >
|——Node:function_declarator Text: TinyCanBackend::interfaces()
|———Node:qualified_identifier Text: TinyCanBackend::interfaces
|————Node:namespace_identifier Text: TinyCanBackend
|————Node::: Text: ::
|————Node:identifier Text: interfaces
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    QList<QCanBusDeviceInfo> result;
    result.append(createDeviceInfo(QStringLiteral("can0.0")));
    return result;
}
|———Node:{ Text: {
|———Node:declaration Text: QList<QCanBusDeviceInfo> result;
|————Node:template_type Text: QList<QCanBusDeviceInfo>
|—————Node:type_identifier Text: QList
|—————Node:template_argument_list Text: <QCanBusDeviceInfo>
|——————Node:< Text: <
|——————Node:type_descriptor Text: QCanBusDeviceInfo
|———————Node:type_identifier Text: QCanBusDeviceInfo
|——————Node:> Text: >
|————Node:identifier Text: result
|————Node:; Text: ;
|———Node:expression_statement Text: result.append(createDeviceInfo(QStringLiteral("can0.0")));
|————Node:call_expression Text: result.append(createDeviceInfo(QStringLiteral("can0.0")))
|—————Node:field_expression Text: result.append
|——————Node:identifier Text: result
|——————Node:. Text: .
|——————Node:field_identifier Text: append
|—————Node:argument_list Text: (createDeviceInfo(QStringLiteral("can0.0")))
|——————Node:( Text: (
|——————Node:call_expression Text: createDeviceInfo(QStringLiteral("can0.0"))
|———————Node:identifier Text: createDeviceInfo
|———————Node:argument_list Text: (QStringLiteral("can0.0"))
|————————Node:( Text: (
|————————Node:call_expression Text: QStringLiteral("can0.0")
|—————————Node:identifier Text: QStringLiteral
|—————————Node:argument_list Text: ("can0.0")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "can0.0"
|———————————Node:" Text: "
|———————————Node:string_content Text: can0.0
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return result;
|————Node:return Text: return
|————Node:identifier Text: result
|————Node:; Text: ;
|———Node:} Text: }
|—Node:namespace_definition Text: namespace {

struct TinyCanGlobal {
    QList<TinyCanBackendPrivate *> channels;
    QMutex mutex;
};

}
|——Node:namespace Text: namespace
|——Node:declaration_list Text: {

struct TinyCanGlobal {
    QList<TinyCanBackendPrivate *> channels;
    QMutex mutex;
};

}
|———Node:{ Text: {
|———Node:struct_specifier Text: struct TinyCanGlobal {
    QList<TinyCanBackendPrivate *> channels;
    QMutex mutex;
}
|————Node:struct Text: struct
|————Node:type_identifier Text: TinyCanGlobal
|————Node:field_declaration_list Text: {
    QList<TinyCanBackendPrivate *> channels;
    QMutex mutex;
}
|—————Node:{ Text: {
|—————Node:field_declaration Text: QList<TinyCanBackendPrivate *> channels;
|——————Node:template_type Text: QList<TinyCanBackendPrivate *>
|———————Node:type_identifier Text: QList
|———————Node:template_argument_list Text: <TinyCanBackendPrivate *>
|————————Node:< Text: <
|————————Node:type_descriptor Text: TinyCanBackendPrivate *
|—————————Node:type_identifier Text: TinyCanBackendPrivate
|—————————Node:abstract_pointer_declarator Text: *
|——————————Node:* Text: *
|————————Node:> Text: >
|——————Node:field_identifier Text: channels
|——————Node:; Text: ;
|—————Node:field_declaration Text: QMutex mutex;
|——————Node:type_identifier Text: QMutex
|——————Node:field_identifier Text: mutex
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: // namespace
|—Node:expression_statement Text: Q_GLOBAL_STATIC(TinyCanGlobal, gTinyCan)
|——Node:call_expression Text: Q_GLOBAL_STATIC(TinyCanGlobal, gTinyCan)
|———Node:identifier Text: Q_GLOBAL_STATIC
|———Node:argument_list Text: (TinyCanGlobal, gTinyCan)
|————Node:( Text: (
|————Node:identifier Text: TinyCanGlobal
|————Node:, Text: ,
|————Node:identifier Text: gTinyCan
|————Node:) Text: )
|——Node:; Text: 
|—Node:class_specifier Text: class TinyCanWriteNotifier : public QTimer
{
    // no Q_OBJECT macro!
public:
    TinyCanWriteNotifier(TinyCanBackendPrivate *d, QObject *parent)
        : QTimer(parent)
        , dptr(d)
    {
    }

protected:
    void timerEvent(QTimerEvent *e) override
    {
        if (e->timerId() == timerId()) {
            dptr->startWrite();
            return;
        }
        QTimer::timerEvent(e);
    }

private:
    TinyCanBackendPrivate * const dptr;
}
|——Node:class Text: class
|——Node:type_identifier Text: TinyCanWriteNotifier
|——Node:base_class_clause Text: : public QTimer
|———Node:: Text: :
|———Node:access_specifier Text: public
|————Node:public Text: public
|———Node:type_identifier Text: QTimer
|——Node:field_declaration_list Text: {
    // no Q_OBJECT macro!
public:
    TinyCanWriteNotifier(TinyCanBackendPrivate *d, QObject *parent)
        : QTimer(parent)
        , dptr(d)
    {
    }

protected:
    void timerEvent(QTimerEvent *e) override
    {
        if (e->timerId() == timerId()) {
            dptr->startWrite();
            return;
        }
        QTimer::timerEvent(e);
    }

private:
    TinyCanBackendPrivate * const dptr;
}
|———Node:{ Text: {
|———Node:comment Text: // no Q_OBJECT macro!
|———Node:access_specifier Text: public
|————Node:public Text: public
|———Node:: Text: :
|———Node:function_definition Text: TinyCanWriteNotifier(TinyCanBackendPrivate *d, QObject *parent)
        : QTimer(parent)
        , dptr(d)
    {
    }
|————Node:function_declarator Text: TinyCanWriteNotifier(TinyCanBackendPrivate *d, QObject *parent)
|—————Node:identifier Text: TinyCanWriteNotifier
|—————Node:parameter_list Text: (TinyCanBackendPrivate *d, QObject *parent)
|——————Node:( Text: (
|——————Node:parameter_declaration Text: TinyCanBackendPrivate *d
|———————Node:type_identifier Text: TinyCanBackendPrivate
|———————Node:pointer_declarator Text: *d
|————————Node:* Text: *
|————————Node:identifier Text: d
|——————Node:, Text: ,
|——————Node:parameter_declaration Text: QObject *parent
|———————Node:type_identifier Text: QObject
|———————Node:pointer_declarator Text: *parent
|————————Node:* Text: *
|————————Node:identifier Text: parent
|——————Node:) Text: )
|————Node:field_initializer_list Text: : QTimer(parent)
        , dptr(d)
|—————Node:: Text: :
|—————Node:field_initializer Text: QTimer(parent)
|——————Node:field_identifier Text: QTimer
|——————Node:argument_list Text: (parent)
|———————Node:( Text: (
|———————Node:identifier Text: parent
|———————Node:) Text: )
|—————Node:, Text: ,
|—————Node:field_initializer Text: dptr(d)
|——————Node:field_identifier Text: dptr
|——————Node:argument_list Text: (d)
|———————Node:( Text: (
|———————Node:identifier Text: d
|———————Node:) Text: )
|————Node:compound_statement Text: {
    }
|—————Node:{ Text: {
|—————Node:} Text: }
|———Node:access_specifier Text: protected
|————Node:protected Text: protected
|———Node:: Text: :
|———Node:function_definition Text: void timerEvent(QTimerEvent *e) override
    {
        if (e->timerId() == timerId()) {
            dptr->startWrite();
            return;
        }
        QTimer::timerEvent(e);
    }
|————Node:primitive_type Text: void
|————Node:function_declarator Text: timerEvent(QTimerEvent *e) override
|—————Node:field_identifier Text: timerEvent
|—————Node:parameter_list Text: (QTimerEvent *e)
|——————Node:( Text: (
|——————Node:parameter_declaration Text: QTimerEvent *e
|———————Node:type_identifier Text: QTimerEvent
|———————Node:pointer_declarator Text: *e
|————————Node:* Text: *
|————————Node:identifier Text: e
|——————Node:) Text: )
|—————Node:virtual_specifier Text: override
|——————Node:override Text: override
|————Node:compound_statement Text: {
        if (e->timerId() == timerId()) {
            dptr->startWrite();
            return;
        }
        QTimer::timerEvent(e);
    }
|—————Node:{ Text: {
|—————Node:if_statement Text: if (e->timerId() == timerId()) {
            dptr->startWrite();
            return;
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (e->timerId() == timerId())
|———————Node:( Text: (
|———————Node:binary_expression Text: e->timerId() == timerId()
|————————Node:call_expression Text: e->timerId()
|—————————Node:field_expression Text: e->timerId
|——————————Node:identifier Text: e
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: timerId
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:== Text: ==
|————————Node:call_expression Text: timerId()
|—————————Node:identifier Text: timerId
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            dptr->startWrite();
            return;
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: dptr->startWrite();
|————————Node:call_expression Text: dptr->startWrite()
|—————————Node:field_expression Text: dptr->startWrite
|——————————Node:identifier Text: dptr
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: startWrite
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:return_statement Text: return;
|————————Node:return Text: return
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:expression_statement Text: QTimer::timerEvent(e);
|——————Node:call_expression Text: QTimer::timerEvent(e)
|———————Node:qualified_identifier Text: QTimer::timerEvent
|————————Node:namespace_identifier Text: QTimer
|————————Node::: Text: ::
|————————Node:identifier Text: timerEvent
|———————Node:argument_list Text: (e)
|————————Node:( Text: (
|————————Node:identifier Text: e
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:access_specifier Text: private
|————Node:private Text: private
|———Node:: Text: :
|———Node:field_declaration Text: TinyCanBackendPrivate * const dptr;
|————Node:type_identifier Text: TinyCanBackendPrivate
|————Node:pointer_declarator Text: * const dptr
|—————Node:* Text: *
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:field_identifier Text: dptr
|————Node:; Text: ;
|———Node:} Text: }
|—Node:; Text: ;
|—Node:declaration Text: static int driverRefCount = 0;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:primitive_type Text: int
|——Node:init_declarator Text: driverRefCount = 0
|———Node:identifier Text: driverRefCount
|———Node:= Text: =
|———Node:number_literal Text: 0
|——Node:; Text: ;
|—Node:function_definition Text: static void DRV_CALLBACK_TYPE canRxEventCallback(quint32 index, TCanMsg *frame, qint32 count)
{
    Q_UNUSED(frame);
    Q_UNUSED(count);

    QMutexLocker lock(&gTinyCan->mutex);
    for (TinyCanBackendPrivate *p : qAsConst(gTinyCan->channels)) {
        if (p->channelIndex == int(index)) {
            p->startRead();
            return;
        }
    }
}
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:primitive_type Text: void
|——Node:function_declarator Text: DRV_CALLBACK_TYPE canRxEventCallback(quint32 index, TCanMsg *frame, qint32 count)
|———Node:qualified_identifier Text: DRV_CALLBACK_TYPE canRxEventCallback
|————Node:namespace_identifier Text: DRV_CALLBACK_TYPE
|————Node::: Text: 
|————Node:identifier Text: canRxEventCallback
|———Node:parameter_list Text: (quint32 index, TCanMsg *frame, qint32 count)
|————Node:( Text: (
|————Node:parameter_declaration Text: quint32 index
|—————Node:type_identifier Text: quint32
|—————Node:identifier Text: index
|————Node:, Text: ,
|————Node:parameter_declaration Text: TCanMsg *frame
|—————Node:type_identifier Text: TCanMsg
|—————Node:pointer_declarator Text: *frame
|——————Node:* Text: *
|——————Node:identifier Text: frame
|————Node:, Text: ,
|————Node:parameter_declaration Text: qint32 count
|—————Node:type_identifier Text: qint32
|—————Node:identifier Text: count
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_UNUSED(frame);
    Q_UNUSED(count);

    QMutexLocker lock(&gTinyCan->mutex);
    for (TinyCanBackendPrivate *p : qAsConst(gTinyCan->channels)) {
        if (p->channelIndex == int(index)) {
            p->startRead();
            return;
        }
    }
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_UNUSED(frame);
|————Node:call_expression Text: Q_UNUSED(frame)
|—————Node:identifier Text: Q_UNUSED
|—————Node:argument_list Text: (frame)
|——————Node:( Text: (
|——————Node:identifier Text: frame
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: Q_UNUSED(count);
|————Node:call_expression Text: Q_UNUSED(count)
|—————Node:identifier Text: Q_UNUSED
|—————Node:argument_list Text: (count)
|——————Node:( Text: (
|——————Node:identifier Text: count
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: QMutexLocker lock(&gTinyCan->mutex);
|————Node:type_identifier Text: QMutexLocker
|————Node:init_declarator Text: lock(&gTinyCan->mutex)
|—————Node:identifier Text: lock
|—————Node:argument_list Text: (&gTinyCan->mutex)
|——————Node:( Text: (
|——————Node:pointer_expression Text: &gTinyCan->mutex
|———————Node:& Text: &
|———————Node:field_expression Text: gTinyCan->mutex
|————————Node:identifier Text: gTinyCan
|————————Node:-> Text: ->
|————————Node:field_identifier Text: mutex
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:for_range_loop Text: for (TinyCanBackendPrivate *p : qAsConst(gTinyCan->channels)) {
        if (p->channelIndex == int(index)) {
            p->startRead();
            return;
        }
    }
|————Node:for Text: for
|————Node:( Text: (
|————Node:type_identifier Text: TinyCanBackendPrivate
|————Node:pointer_declarator Text: *p
|—————Node:* Text: *
|—————Node:identifier Text: p
|————Node:: Text: :
|————Node:call_expression Text: qAsConst(gTinyCan->channels)
|—————Node:identifier Text: qAsConst
|—————Node:argument_list Text: (gTinyCan->channels)
|——————Node:( Text: (
|——————Node:field_expression Text: gTinyCan->channels
|———————Node:identifier Text: gTinyCan
|———————Node:-> Text: ->
|———————Node:field_identifier Text: channels
|——————Node:) Text: )
|————Node:) Text: )
|————Node:compound_statement Text: {
        if (p->channelIndex == int(index)) {
            p->startRead();
            return;
        }
    }
|—————Node:{ Text: {
|—————Node:if_statement Text: if (p->channelIndex == int(index)) {
            p->startRead();
            return;
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (p->channelIndex == int(index))
|———————Node:( Text: (
|———————Node:binary_expression Text: p->channelIndex == int(index)
|————————Node:field_expression Text: p->channelIndex
|—————————Node:identifier Text: p
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: channelIndex
|————————Node:== Text: ==
|————————Node:call_expression Text: int(index)
|—————————Node:primitive_type Text: int
|—————————Node:argument_list Text: (index)
|——————————Node:( Text: (
|——————————Node:identifier Text: index
|——————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            p->startRead();
            return;
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: p->startRead();
|————————Node:call_expression Text: p->startRead()
|—————————Node:field_expression Text: p->startRead
|——————————Node:identifier Text: p
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: startRead
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:return_statement Text: return;
|————————Node:return Text: return
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:} Text: }
|—Node:function_definition Text: TinyCanBackendPrivate::TinyCanBackendPrivate(TinyCanBackend *q)
    : q_ptr(q)
{
    startupDriver();

    QMutexLocker lock(&gTinyCan->mutex);
    gTinyCan->channels.append(this);
}
|——Node:function_declarator Text: TinyCanBackendPrivate::TinyCanBackendPrivate(TinyCanBackend *q)
|———Node:qualified_identifier Text: TinyCanBackendPrivate::TinyCanBackendPrivate
|————Node:namespace_identifier Text: TinyCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: TinyCanBackendPrivate
|———Node:parameter_list Text: (TinyCanBackend *q)
|————Node:( Text: (
|————Node:parameter_declaration Text: TinyCanBackend *q
|—————Node:type_identifier Text: TinyCanBackend
|—————Node:pointer_declarator Text: *q
|——————Node:* Text: *
|——————Node:identifier Text: q
|————Node:) Text: )
|——Node:field_initializer_list Text: : q_ptr(q)
|———Node:: Text: :
|———Node:field_initializer Text: q_ptr(q)
|————Node:field_identifier Text: q_ptr
|————Node:argument_list Text: (q)
|—————Node:( Text: (
|—————Node:identifier Text: q
|—————Node:) Text: )
|——Node:compound_statement Text: {
    startupDriver();

    QMutexLocker lock(&gTinyCan->mutex);
    gTinyCan->channels.append(this);
}
|———Node:{ Text: {
|———Node:expression_statement Text: startupDriver();
|————Node:call_expression Text: startupDriver()
|—————Node:identifier Text: startupDriver
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: QMutexLocker lock(&gTinyCan->mutex);
|————Node:type_identifier Text: QMutexLocker
|————Node:init_declarator Text: lock(&gTinyCan->mutex)
|—————Node:identifier Text: lock
|—————Node:argument_list Text: (&gTinyCan->mutex)
|——————Node:( Text: (
|——————Node:pointer_expression Text: &gTinyCan->mutex
|———————Node:& Text: &
|———————Node:field_expression Text: gTinyCan->mutex
|————————Node:identifier Text: gTinyCan
|————————Node:-> Text: ->
|————————Node:field_identifier Text: mutex
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: gTinyCan->channels.append(this);
|————Node:call_expression Text: gTinyCan->channels.append(this)
|—————Node:field_expression Text: gTinyCan->channels.append
|——————Node:field_expression Text: gTinyCan->channels
|———————Node:identifier Text: gTinyCan
|———————Node:-> Text: ->
|———————Node:field_identifier Text: channels
|——————Node:. Text: .
|——————Node:field_identifier Text: append
|—————Node:argument_list Text: (this)
|——————Node:( Text: (
|——————Node:this Text: this
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: TinyCanBackendPrivate::~TinyCanBackendPrivate()
{
    cleanupDriver();

    QMutexLocker lock(&gTinyCan->mutex);
    gTinyCan->channels.removeAll(this);
}
|——Node:function_declarator Text: TinyCanBackendPrivate::~TinyCanBackendPrivate()
|———Node:qualified_identifier Text: TinyCanBackendPrivate::~TinyCanBackendPrivate
|————Node:namespace_identifier Text: TinyCanBackendPrivate
|————Node::: Text: ::
|————Node:destructor_name Text: ~TinyCanBackendPrivate
|—————Node:~ Text: ~
|—————Node:identifier Text: TinyCanBackendPrivate
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    cleanupDriver();

    QMutexLocker lock(&gTinyCan->mutex);
    gTinyCan->channels.removeAll(this);
}
|———Node:{ Text: {
|———Node:expression_statement Text: cleanupDriver();
|————Node:call_expression Text: cleanupDriver()
|—————Node:identifier Text: cleanupDriver
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: QMutexLocker lock(&gTinyCan->mutex);
|————Node:type_identifier Text: QMutexLocker
|————Node:init_declarator Text: lock(&gTinyCan->mutex)
|—————Node:identifier Text: lock
|—————Node:argument_list Text: (&gTinyCan->mutex)
|——————Node:( Text: (
|——————Node:pointer_expression Text: &gTinyCan->mutex
|———————Node:& Text: &
|———————Node:field_expression Text: gTinyCan->mutex
|————————Node:identifier Text: gTinyCan
|————————Node:-> Text: ->
|————————Node:field_identifier Text: mutex
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: gTinyCan->channels.removeAll(this);
|————Node:call_expression Text: gTinyCan->channels.removeAll(this)
|—————Node:field_expression Text: gTinyCan->channels.removeAll
|——————Node:field_expression Text: gTinyCan->channels
|———————Node:identifier Text: gTinyCan
|———————Node:-> Text: ->
|———————Node:field_identifier Text: channels
|——————Node:. Text: .
|——————Node:field_identifier Text: removeAll
|—————Node:argument_list Text: (this)
|——————Node:( Text: (
|——————Node:this Text: this
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:struct_specifier Text: struct BitrateItem
{
    int bitrate;
    int code;
}
|——Node:struct Text: struct
|——Node:type_identifier Text: BitrateItem
|——Node:field_declaration_list Text: {
    int bitrate;
    int code;
}
|———Node:{ Text: {
|———Node:field_declaration Text: int bitrate;
|————Node:primitive_type Text: int
|————Node:field_identifier Text: bitrate
|————Node:; Text: ;
|———Node:field_declaration Text: int code;
|————Node:primitive_type Text: int
|————Node:field_identifier Text: code
|————Node:; Text: ;
|———Node:} Text: }
|—Node:; Text: ;
|—Node:struct_specifier Text: struct BitrateLessFunctor
{
    bool operator()( const BitrateItem &item1, const BitrateItem &item2) const
    {
        return item1.bitrate < item2.bitrate;
    }
}
|——Node:struct Text: struct
|——Node:type_identifier Text: BitrateLessFunctor
|——Node:field_declaration_list Text: {
    bool operator()( const BitrateItem &item1, const BitrateItem &item2) const
    {
        return item1.bitrate < item2.bitrate;
    }
}
|———Node:{ Text: {
|———Node:function_definition Text: bool operator()( const BitrateItem &item1, const BitrateItem &item2) const
    {
        return item1.bitrate < item2.bitrate;
    }
|————Node:primitive_type Text: bool
|————Node:function_declarator Text: operator()( const BitrateItem &item1, const BitrateItem &item2) const
|—————Node:operator_name Text: operator()
|——————Node:operator Text: operator
|——————Node:() Text: ()
|—————Node:parameter_list Text: ( const BitrateItem &item1, const BitrateItem &item2)
|——————Node:( Text: (
|——————Node:parameter_declaration Text: const BitrateItem &item1
|———————Node:type_qualifier Text: const
|————————Node:const Text: const
|———————Node:type_identifier Text: BitrateItem
|———————Node:reference_declarator Text: &item1
|————————Node:& Text: &
|————————Node:identifier Text: item1
|——————Node:, Text: ,
|——————Node:parameter_declaration Text: const BitrateItem &item2
|———————Node:type_qualifier Text: const
|————————Node:const Text: const
|———————Node:type_identifier Text: BitrateItem
|———————Node:reference_declarator Text: &item2
|————————Node:& Text: &
|————————Node:identifier Text: item2
|——————Node:) Text: )
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|————Node:compound_statement Text: {
        return item1.bitrate < item2.bitrate;
    }
|—————Node:{ Text: {
|—————Node:return_statement Text: return item1.bitrate < item2.bitrate;
|——————Node:return Text: return
|——————Node:binary_expression Text: item1.bitrate < item2.bitrate
|———————Node:field_expression Text: item1.bitrate
|————————Node:identifier Text: item1
|————————Node:. Text: .
|————————Node:field_identifier Text: bitrate
|———————Node:< Text: <
|———————Node:field_expression Text: item2.bitrate
|————————Node:identifier Text: item2
|————————Node:. Text: .
|————————Node:field_identifier Text: bitrate
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:} Text: }
|—Node:; Text: ;
|—Node:function_definition Text: static int bitrateCodeFromBitrate(int bitrate)
{
    static const BitrateItem bitratetable[] = {
        { 10000, CAN_10K_BIT },
        { 20000, CAN_20K_BIT },
        { 50000, CAN_50K_BIT },
        { 100000, CAN_100K_BIT },
        { 125000, CAN_125K_BIT },
        { 250000, CAN_250K_BIT },
        { 500000, CAN_500K_BIT },
        { 800000, CAN_800K_BIT },
        { 1000000, CAN_1M_BIT }
    };

    static const BitrateItem *endtable = bitratetable + (sizeof(bitratetable) / sizeof(*bitratetable));

    const BitrateItem item = { bitrate , 0 };
    const BitrateItem *where = std::lower_bound(bitratetable, endtable, item, BitrateLessFunctor());
    return where != endtable ? where->code : -1;
}
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:primitive_type Text: int
|——Node:function_declarator Text: bitrateCodeFromBitrate(int bitrate)
|———Node:identifier Text: bitrateCodeFromBitrate
|———Node:parameter_list Text: (int bitrate)
|————Node:( Text: (
|————Node:parameter_declaration Text: int bitrate
|—————Node:primitive_type Text: int
|—————Node:identifier Text: bitrate
|————Node:) Text: )
|——Node:compound_statement Text: {
    static const BitrateItem bitratetable[] = {
        { 10000, CAN_10K_BIT },
        { 20000, CAN_20K_BIT },
        { 50000, CAN_50K_BIT },
        { 100000, CAN_100K_BIT },
        { 125000, CAN_125K_BIT },
        { 250000, CAN_250K_BIT },
        { 500000, CAN_500K_BIT },
        { 800000, CAN_800K_BIT },
        { 1000000, CAN_1M_BIT }
    };

    static const BitrateItem *endtable = bitratetable + (sizeof(bitratetable) / sizeof(*bitratetable));

    const BitrateItem item = { bitrate , 0 };
    const BitrateItem *where = std::lower_bound(bitratetable, endtable, item, BitrateLessFunctor());
    return where != endtable ? where->code : -1;
}
|———Node:{ Text: {
|———Node:declaration Text: static const BitrateItem bitratetable[] = {
        { 10000, CAN_10K_BIT },
        { 20000, CAN_20K_BIT },
        { 50000, CAN_50K_BIT },
        { 100000, CAN_100K_BIT },
        { 125000, CAN_125K_BIT },
        { 250000, CAN_250K_BIT },
        { 500000, CAN_500K_BIT },
        { 800000, CAN_800K_BIT },
        { 1000000, CAN_1M_BIT }
    };
|————Node:storage_class_specifier Text: static
|—————Node:static Text: static
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: BitrateItem
|————Node:init_declarator Text: bitratetable[] = {
        { 10000, CAN_10K_BIT },
        { 20000, CAN_20K_BIT },
        { 50000, CAN_50K_BIT },
        { 100000, CAN_100K_BIT },
        { 125000, CAN_125K_BIT },
        { 250000, CAN_250K_BIT },
        { 500000, CAN_500K_BIT },
        { 800000, CAN_800K_BIT },
        { 1000000, CAN_1M_BIT }
    }
|—————Node:array_declarator Text: bitratetable[]
|——————Node:identifier Text: bitratetable
|——————Node:[ Text: [
|——————Node:] Text: ]
|—————Node:= Text: =
|—————Node:initializer_list Text: {
        { 10000, CAN_10K_BIT },
        { 20000, CAN_20K_BIT },
        { 50000, CAN_50K_BIT },
        { 100000, CAN_100K_BIT },
        { 125000, CAN_125K_BIT },
        { 250000, CAN_250K_BIT },
        { 500000, CAN_500K_BIT },
        { 800000, CAN_800K_BIT },
        { 1000000, CAN_1M_BIT }
    }
|——————Node:{ Text: {
|——————Node:initializer_list Text: { 10000, CAN_10K_BIT }
|———————Node:{ Text: {
|———————Node:number_literal Text: 10000
|———————Node:, Text: ,
|———————Node:identifier Text: CAN_10K_BIT
|———————Node:} Text: }
|——————Node:, Text: ,
|——————Node:initializer_list Text: { 20000, CAN_20K_BIT }
|———————Node:{ Text: {
|———————Node:number_literal Text: 20000
|———————Node:, Text: ,
|———————Node:identifier Text: CAN_20K_BIT
|———————Node:} Text: }
|——————Node:, Text: ,
|——————Node:initializer_list Text: { 50000, CAN_50K_BIT }
|———————Node:{ Text: {
|———————Node:number_literal Text: 50000
|———————Node:, Text: ,
|———————Node:identifier Text: CAN_50K_BIT
|———————Node:} Text: }
|——————Node:, Text: ,
|——————Node:initializer_list Text: { 100000, CAN_100K_BIT }
|———————Node:{ Text: {
|———————Node:number_literal Text: 100000
|———————Node:, Text: ,
|———————Node:identifier Text: CAN_100K_BIT
|———————Node:} Text: }
|——————Node:, Text: ,
|——————Node:initializer_list Text: { 125000, CAN_125K_BIT }
|———————Node:{ Text: {
|———————Node:number_literal Text: 125000
|———————Node:, Text: ,
|———————Node:identifier Text: CAN_125K_BIT
|———————Node:} Text: }
|——————Node:, Text: ,
|——————Node:initializer_list Text: { 250000, CAN_250K_BIT }
|———————Node:{ Text: {
|———————Node:number_literal Text: 250000
|———————Node:, Text: ,
|———————Node:identifier Text: CAN_250K_BIT
|———————Node:} Text: }
|——————Node:, Text: ,
|——————Node:initializer_list Text: { 500000, CAN_500K_BIT }
|———————Node:{ Text: {
|———————Node:number_literal Text: 500000
|———————Node:, Text: ,
|———————Node:identifier Text: CAN_500K_BIT
|———————Node:} Text: }
|——————Node:, Text: ,
|——————Node:initializer_list Text: { 800000, CAN_800K_BIT }
|———————Node:{ Text: {
|———————Node:number_literal Text: 800000
|———————Node:, Text: ,
|———————Node:identifier Text: CAN_800K_BIT
|———————Node:} Text: }
|——————Node:, Text: ,
|——————Node:initializer_list Text: { 1000000, CAN_1M_BIT }
|———————Node:{ Text: {
|———————Node:number_literal Text: 1000000
|———————Node:, Text: ,
|———————Node:identifier Text: CAN_1M_BIT
|———————Node:} Text: }
|——————Node:} Text: }
|————Node:; Text: ;
|———Node:declaration Text: static const BitrateItem *endtable = bitratetable + (sizeof(bitratetable) / sizeof(*bitratetable));
|————Node:storage_class_specifier Text: static
|—————Node:static Text: static
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: BitrateItem
|————Node:init_declarator Text: *endtable = bitratetable + (sizeof(bitratetable) / sizeof(*bitratetable))
|—————Node:pointer_declarator Text: *endtable
|——————Node:* Text: *
|——————Node:identifier Text: endtable
|—————Node:= Text: =
|—————Node:binary_expression Text: bitratetable + (sizeof(bitratetable) / sizeof(*bitratetable))
|——————Node:identifier Text: bitratetable
|——————Node:+ Text: +
|——————Node:parenthesized_expression Text: (sizeof(bitratetable) / sizeof(*bitratetable))
|———————Node:( Text: (
|———————Node:binary_expression Text: sizeof(bitratetable) / sizeof(*bitratetable)
|————————Node:sizeof_expression Text: sizeof(bitratetable)
|—————————Node:sizeof Text: sizeof
|—————————Node:parenthesized_expression Text: (bitratetable)
|——————————Node:( Text: (
|——————————Node:identifier Text: bitratetable
|——————————Node:) Text: )
|————————Node:/ Text: /
|————————Node:sizeof_expression Text: sizeof(*bitratetable)
|—————————Node:sizeof Text: sizeof
|—————————Node:parenthesized_expression Text: (*bitratetable)
|——————————Node:( Text: (
|——————————Node:pointer_expression Text: *bitratetable
|———————————Node:* Text: *
|———————————Node:identifier Text: bitratetable
|——————————Node:) Text: )
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: const BitrateItem item = { bitrate , 0 };
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: BitrateItem
|————Node:init_declarator Text: item = { bitrate , 0 }
|—————Node:identifier Text: item
|—————Node:= Text: =
|—————Node:initializer_list Text: { bitrate , 0 }
|——————Node:{ Text: {
|——————Node:identifier Text: bitrate
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:} Text: }
|————Node:; Text: ;
|———Node:declaration Text: const BitrateItem *where = std::lower_bound(bitratetable, endtable, item, BitrateLessFunctor());
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: BitrateItem
|————Node:init_declarator Text: *where = std::lower_bound(bitratetable, endtable, item, BitrateLessFunctor())
|—————Node:pointer_declarator Text: *where
|——————Node:* Text: *
|——————Node:identifier Text: where
|—————Node:= Text: =
|—————Node:call_expression Text: std::lower_bound(bitratetable, endtable, item, BitrateLessFunctor())
|——————Node:qualified_identifier Text: std::lower_bound
|———————Node:namespace_identifier Text: std
|———————Node::: Text: ::
|———————Node:identifier Text: lower_bound
|——————Node:argument_list Text: (bitratetable, endtable, item, BitrateLessFunctor())
|———————Node:( Text: (
|———————Node:identifier Text: bitratetable
|———————Node:, Text: ,
|———————Node:identifier Text: endtable
|———————Node:, Text: ,
|———————Node:identifier Text: item
|———————Node:, Text: ,
|———————Node:call_expression Text: BitrateLessFunctor()
|————————Node:identifier Text: BitrateLessFunctor
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return where != endtable ? where->code : -1;
|————Node:return Text: return
|————Node:conditional_expression Text: where != endtable ? where->code : -1
|—————Node:binary_expression Text: where != endtable
|——————Node:identifier Text: where
|——————Node:!= Text: !=
|——————Node:identifier Text: endtable
|—————Node:? Text: ?
|—————Node:field_expression Text: where->code
|——————Node:identifier Text: where
|——————Node:-> Text: ->
|——————Node:field_identifier Text: code
|—————Node:: Text: :
|—————Node:number_literal Text: -1
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: bool TinyCanBackendPrivate::open()
{
    Q_Q(TinyCanBackend);

    {
        char options[] = "AutoConnect=1;AutoReopen=0";
        const int ret = ::CanSetOptions(options);
        if (Q_UNLIKELY(ret < 0)) {
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError);
            return false;
        }
    }

    {
        const int ret = ::CanDeviceOpen(channelIndex, nullptr);
        if (Q_UNLIKELY(ret < 0)) {
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError);
            return false;
        }
    }

    {
        const int ret = ::CanSetMode(channelIndex, OP_CAN_START, CAN_CMD_ALL_CLEAR);
        if (Q_UNLIKELY(ret < 0)) {
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError);
            ::CanDeviceClose(channelIndex);
            return false;
        }
    }

    writeNotifier = new TinyCanWriteNotifier(this, q);
    writeNotifier->setInterval(0);

    isOpen = true;
    return true;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: TinyCanBackendPrivate::open()
|———Node:qualified_identifier Text: TinyCanBackendPrivate::open
|————Node:namespace_identifier Text: TinyCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: open
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(TinyCanBackend);

    {
        char options[] = "AutoConnect=1;AutoReopen=0";
        const int ret = ::CanSetOptions(options);
        if (Q_UNLIKELY(ret < 0)) {
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError);
            return false;
        }
    }

    {
        const int ret = ::CanDeviceOpen(channelIndex, nullptr);
        if (Q_UNLIKELY(ret < 0)) {
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError);
            return false;
        }
    }

    {
        const int ret = ::CanSetMode(channelIndex, OP_CAN_START, CAN_CMD_ALL_CLEAR);
        if (Q_UNLIKELY(ret < 0)) {
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError);
            ::CanDeviceClose(channelIndex);
            return false;
        }
    }

    writeNotifier = new TinyCanWriteNotifier(this, q);
    writeNotifier->setInterval(0);

    isOpen = true;
    return true;
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(TinyCanBackend);
|————Node:call_expression Text: Q_Q(TinyCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (TinyCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: TinyCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:compound_statement Text: {
        char options[] = "AutoConnect=1;AutoReopen=0";
        const int ret = ::CanSetOptions(options);
        if (Q_UNLIKELY(ret < 0)) {
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError);
            return false;
        }
    }
|————Node:{ Text: {
|————Node:declaration Text: char options[] = "AutoConnect=1;AutoReopen=0";
|—————Node:primitive_type Text: char
|—————Node:init_declarator Text: options[] = "AutoConnect=1;AutoReopen=0"
|——————Node:array_declarator Text: options[]
|———————Node:identifier Text: options
|———————Node:[ Text: [
|———————Node:] Text: ]
|——————Node:= Text: =
|——————Node:string_literal Text: "AutoConnect=1;AutoReopen=0"
|———————Node:" Text: "
|———————Node:string_content Text: AutoConnect=1;AutoReopen=0
|———————Node:" Text: "
|—————Node:; Text: ;
|————Node:declaration Text: const int ret = ::CanSetOptions(options);
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:primitive_type Text: int
|—————Node:init_declarator Text: ret = ::CanSetOptions(options)
|——————Node:identifier Text: ret
|——————Node:= Text: =
|——————Node:call_expression Text: ::CanSetOptions(options)
|———————Node:qualified_identifier Text: ::CanSetOptions
|————————Node::: Text: ::
|————————Node:identifier Text: CanSetOptions
|———————Node:argument_list Text: (options)
|————————Node:( Text: (
|————————Node:identifier Text: options
|————————Node:) Text: )
|—————Node:; Text: ;
|————Node:if_statement Text: if (Q_UNLIKELY(ret < 0)) {
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError);
            return false;
        }
|—————Node:if Text: if
|—————Node:condition_clause Text: (Q_UNLIKELY(ret < 0))
|——————Node:( Text: (
|——————Node:call_expression Text: Q_UNLIKELY(ret < 0)
|———————Node:identifier Text: Q_UNLIKELY
|———————Node:argument_list Text: (ret < 0)
|————————Node:( Text: (
|————————Node:binary_expression Text: ret < 0
|—————————Node:identifier Text: ret
|—————————Node:< Text: <
|—————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:) Text: )
|—————Node:compound_statement Text: {
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError);
            return false;
        }
|——————Node:{ Text: {
|——————Node:expression_statement Text: q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError);
|———————Node:call_expression Text: q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError)
|————————Node:field_expression Text: q->setError
|—————————Node:identifier Text: q
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: setError
|————————Node:argument_list Text: (systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError)
|—————————Node:( Text: (
|—————————Node:call_expression Text: systemErrorString(ret)
|——————————Node:identifier Text: systemErrorString
|——————————Node:argument_list Text: (ret)
|———————————Node:( Text: (
|———————————Node:identifier Text: ret
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ConnectionError
|——————————Node:namespace_identifier Text: QCanBusDevice
|——————————Node::: Text: ::
|——————————Node:qualified_identifier Text: CanBusError::ConnectionError
|———————————Node:namespace_identifier Text: CanBusError
|———————————Node::: Text: ::
|———————————Node:identifier Text: ConnectionError
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:return_statement Text: return false;
|———————Node:return Text: return
|———————Node:false Text: false
|———————Node:; Text: ;
|——————Node:} Text: }
|————Node:} Text: }
|———Node:compound_statement Text: {
        const int ret = ::CanDeviceOpen(channelIndex, nullptr);
        if (Q_UNLIKELY(ret < 0)) {
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError);
            return false;
        }
    }
|————Node:{ Text: {
|————Node:declaration Text: const int ret = ::CanDeviceOpen(channelIndex, nullptr);
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:primitive_type Text: int
|—————Node:init_declarator Text: ret = ::CanDeviceOpen(channelIndex, nullptr)
|——————Node:identifier Text: ret
|——————Node:= Text: =
|——————Node:call_expression Text: ::CanDeviceOpen(channelIndex, nullptr)
|———————Node:qualified_identifier Text: ::CanDeviceOpen
|————————Node::: Text: ::
|————————Node:identifier Text: CanDeviceOpen
|———————Node:argument_list Text: (channelIndex, nullptr)
|————————Node:( Text: (
|————————Node:identifier Text: channelIndex
|————————Node:, Text: ,
|————————Node:null Text: nullptr
|—————————Node:nullptr Text: nullptr
|————————Node:) Text: )
|—————Node:; Text: ;
|————Node:if_statement Text: if (Q_UNLIKELY(ret < 0)) {
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError);
            return false;
        }
|—————Node:if Text: if
|—————Node:condition_clause Text: (Q_UNLIKELY(ret < 0))
|——————Node:( Text: (
|——————Node:call_expression Text: Q_UNLIKELY(ret < 0)
|———————Node:identifier Text: Q_UNLIKELY
|———————Node:argument_list Text: (ret < 0)
|————————Node:( Text: (
|————————Node:binary_expression Text: ret < 0
|—————————Node:identifier Text: ret
|—————————Node:< Text: <
|—————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:) Text: )
|—————Node:compound_statement Text: {
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError);
            return false;
        }
|——————Node:{ Text: {
|——————Node:expression_statement Text: q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError);
|———————Node:call_expression Text: q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError)
|————————Node:field_expression Text: q->setError
|—————————Node:identifier Text: q
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: setError
|————————Node:argument_list Text: (systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError)
|—————————Node:( Text: (
|—————————Node:call_expression Text: systemErrorString(ret)
|——————————Node:identifier Text: systemErrorString
|——————————Node:argument_list Text: (ret)
|———————————Node:( Text: (
|———————————Node:identifier Text: ret
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ConnectionError
|——————————Node:namespace_identifier Text: QCanBusDevice
|——————————Node::: Text: ::
|——————————Node:qualified_identifier Text: CanBusError::ConnectionError
|———————————Node:namespace_identifier Text: CanBusError
|———————————Node::: Text: ::
|———————————Node:identifier Text: ConnectionError
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:return_statement Text: return false;
|———————Node:return Text: return
|———————Node:false Text: false
|———————Node:; Text: ;
|——————Node:} Text: }
|————Node:} Text: }
|———Node:compound_statement Text: {
        const int ret = ::CanSetMode(channelIndex, OP_CAN_START, CAN_CMD_ALL_CLEAR);
        if (Q_UNLIKELY(ret < 0)) {
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError);
            ::CanDeviceClose(channelIndex);
            return false;
        }
    }
|————Node:{ Text: {
|————Node:declaration Text: const int ret = ::CanSetMode(channelIndex, OP_CAN_START, CAN_CMD_ALL_CLEAR);
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:primitive_type Text: int
|—————Node:init_declarator Text: ret = ::CanSetMode(channelIndex, OP_CAN_START, CAN_CMD_ALL_CLEAR)
|——————Node:identifier Text: ret
|——————Node:= Text: =
|——————Node:call_expression Text: ::CanSetMode(channelIndex, OP_CAN_START, CAN_CMD_ALL_CLEAR)
|———————Node:qualified_identifier Text: ::CanSetMode
|————————Node::: Text: ::
|————————Node:identifier Text: CanSetMode
|———————Node:argument_list Text: (channelIndex, OP_CAN_START, CAN_CMD_ALL_CLEAR)
|————————Node:( Text: (
|————————Node:identifier Text: channelIndex
|————————Node:, Text: ,
|————————Node:identifier Text: OP_CAN_START
|————————Node:, Text: ,
|————————Node:identifier Text: CAN_CMD_ALL_CLEAR
|————————Node:) Text: )
|—————Node:; Text: ;
|————Node:if_statement Text: if (Q_UNLIKELY(ret < 0)) {
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError);
            ::CanDeviceClose(channelIndex);
            return false;
        }
|—————Node:if Text: if
|—————Node:condition_clause Text: (Q_UNLIKELY(ret < 0))
|——————Node:( Text: (
|——————Node:call_expression Text: Q_UNLIKELY(ret < 0)
|———————Node:identifier Text: Q_UNLIKELY
|———————Node:argument_list Text: (ret < 0)
|————————Node:( Text: (
|————————Node:binary_expression Text: ret < 0
|—————————Node:identifier Text: ret
|—————————Node:< Text: <
|—————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:) Text: )
|—————Node:compound_statement Text: {
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError);
            ::CanDeviceClose(channelIndex);
            return false;
        }
|——————Node:{ Text: {
|——————Node:expression_statement Text: q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError);
|———————Node:call_expression Text: q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError)
|————————Node:field_expression Text: q->setError
|—————————Node:identifier Text: q
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: setError
|————————Node:argument_list Text: (systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError)
|—————————Node:( Text: (
|—————————Node:call_expression Text: systemErrorString(ret)
|——————————Node:identifier Text: systemErrorString
|——————————Node:argument_list Text: (ret)
|———————————Node:( Text: (
|———————————Node:identifier Text: ret
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ConnectionError
|——————————Node:namespace_identifier Text: QCanBusDevice
|——————————Node::: Text: ::
|——————————Node:qualified_identifier Text: CanBusError::ConnectionError
|———————————Node:namespace_identifier Text: CanBusError
|———————————Node::: Text: ::
|———————————Node:identifier Text: ConnectionError
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: ::CanDeviceClose(channelIndex);
|———————Node:call_expression Text: ::CanDeviceClose(channelIndex)
|————————Node:qualified_identifier Text: ::CanDeviceClose
|—————————Node::: Text: ::
|—————————Node:identifier Text: CanDeviceClose
|————————Node:argument_list Text: (channelIndex)
|—————————Node:( Text: (
|—————————Node:identifier Text: channelIndex
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:return_statement Text: return false;
|———————Node:return Text: return
|———————Node:false Text: false
|———————Node:; Text: ;
|——————Node:} Text: }
|————Node:} Text: }
|———Node:expression_statement Text: writeNotifier = new TinyCanWriteNotifier(this, q);
|————Node:assignment_expression Text: writeNotifier = new TinyCanWriteNotifier(this, q)
|—————Node:identifier Text: writeNotifier
|—————Node:= Text: =
|—————Node:new_expression Text: new TinyCanWriteNotifier(this, q)
|——————Node:new Text: new
|——————Node:type_identifier Text: TinyCanWriteNotifier
|——————Node:argument_list Text: (this, q)
|———————Node:( Text: (
|———————Node:this Text: this
|———————Node:, Text: ,
|———————Node:identifier Text: q
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: writeNotifier->setInterval(0);
|————Node:call_expression Text: writeNotifier->setInterval(0)
|—————Node:field_expression Text: writeNotifier->setInterval
|——————Node:identifier Text: writeNotifier
|——————Node:-> Text: ->
|——————Node:field_identifier Text: setInterval
|—————Node:argument_list Text: (0)
|——————Node:( Text: (
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: isOpen = true;
|————Node:assignment_expression Text: isOpen = true
|—————Node:identifier Text: isOpen
|—————Node:= Text: =
|—————Node:true Text: true
|————Node:; Text: ;
|———Node:return_statement Text: return true;
|————Node:return Text: return
|————Node:true Text: true
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void TinyCanBackendPrivate::close()
{
    Q_Q(TinyCanBackend);

    delete writeNotifier;
    writeNotifier = nullptr;

    const int ret = ::CanDeviceClose(channelIndex);
    if (Q_UNLIKELY(ret < 0))
        q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError);

    isOpen = false;
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: TinyCanBackendPrivate::close()
|———Node:qualified_identifier Text: TinyCanBackendPrivate::close
|————Node:namespace_identifier Text: TinyCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: close
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(TinyCanBackend);

    delete writeNotifier;
    writeNotifier = nullptr;

    const int ret = ::CanDeviceClose(channelIndex);
    if (Q_UNLIKELY(ret < 0))
        q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError);

    isOpen = false;
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(TinyCanBackend);
|————Node:call_expression Text: Q_Q(TinyCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (TinyCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: TinyCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: delete writeNotifier;
|————Node:delete_expression Text: delete writeNotifier
|—————Node:delete Text: delete
|—————Node:identifier Text: writeNotifier
|————Node:; Text: ;
|———Node:expression_statement Text: writeNotifier = nullptr;
|————Node:assignment_expression Text: writeNotifier = nullptr
|—————Node:identifier Text: writeNotifier
|—————Node:= Text: =
|—————Node:null Text: nullptr
|——————Node:nullptr Text: nullptr
|————Node:; Text: ;
|———Node:declaration Text: const int ret = ::CanDeviceClose(channelIndex);
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: int
|————Node:init_declarator Text: ret = ::CanDeviceClose(channelIndex)
|—————Node:identifier Text: ret
|—————Node:= Text: =
|—————Node:call_expression Text: ::CanDeviceClose(channelIndex)
|——————Node:qualified_identifier Text: ::CanDeviceClose
|———————Node::: Text: ::
|———————Node:identifier Text: CanDeviceClose
|——————Node:argument_list Text: (channelIndex)
|———————Node:( Text: (
|———————Node:identifier Text: channelIndex
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(ret < 0))
        q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError);
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(ret < 0))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(ret < 0)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (ret < 0)
|———————Node:( Text: (
|———————Node:binary_expression Text: ret < 0
|————————Node:identifier Text: ret
|————————Node:< Text: <
|————————Node:number_literal Text: 0
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:expression_statement Text: q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError);
|—————Node:call_expression Text: q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError)
|——————Node:field_expression Text: q->setError
|———————Node:identifier Text: q
|———————Node:-> Text: ->
|———————Node:field_identifier Text: setError
|——————Node:argument_list Text: (systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError)
|———————Node:( Text: (
|———————Node:call_expression Text: systemErrorString(ret)
|————————Node:identifier Text: systemErrorString
|————————Node:argument_list Text: (ret)
|—————————Node:( Text: (
|—————————Node:identifier Text: ret
|—————————Node:) Text: )
|———————Node:, Text: ,
|———————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ConnectionError
|————————Node:namespace_identifier Text: QCanBusDevice
|————————Node::: Text: ::
|————————Node:qualified_identifier Text: CanBusError::ConnectionError
|—————————Node:namespace_identifier Text: CanBusError
|—————————Node::: Text: ::
|—————————Node:identifier Text: ConnectionError
|———————Node:) Text: )
|—————Node:; Text: ;
|———Node:expression_statement Text: isOpen = false;
|————Node:assignment_expression Text: isOpen = false
|—————Node:identifier Text: isOpen
|—————Node:= Text: =
|—————Node:false Text: false
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: bool TinyCanBackendPrivate::setConfigurationParameter(QCanBusDevice::ConfigurationKey key,
                                                      const QVariant &value)
{
    Q_Q(TinyCanBackend);

    switch (key) {
    case QCanBusDevice::BitRateKey:
        return setBitRate(value.toInt());
    default:
        q->setError(TinyCanBackend::tr("Unsupported configuration key: %1").arg(key),
                    QCanBusDevice::ConfigurationError);
        return false;
    }
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: TinyCanBackendPrivate::setConfigurationParameter(QCanBusDevice::ConfigurationKey key,
                                                      const QVariant &value)
|———Node:qualified_identifier Text: TinyCanBackendPrivate::setConfigurationParameter
|————Node:namespace_identifier Text: TinyCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: setConfigurationParameter
|———Node:parameter_list Text: (QCanBusDevice::ConfigurationKey key,
                                                      const QVariant &value)
|————Node:( Text: (
|————Node:parameter_declaration Text: QCanBusDevice::ConfigurationKey key
|—————Node:qualified_identifier Text: QCanBusDevice::ConfigurationKey
|——————Node:namespace_identifier Text: QCanBusDevice
|——————Node::: Text: ::
|——————Node:type_identifier Text: ConfigurationKey
|—————Node:identifier Text: key
|————Node:, Text: ,
|————Node:parameter_declaration Text: const QVariant &value
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: QVariant
|—————Node:reference_declarator Text: &value
|——————Node:& Text: &
|——————Node:identifier Text: value
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(TinyCanBackend);

    switch (key) {
    case QCanBusDevice::BitRateKey:
        return setBitRate(value.toInt());
    default:
        q->setError(TinyCanBackend::tr("Unsupported configuration key: %1").arg(key),
                    QCanBusDevice::ConfigurationError);
        return false;
    }
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(TinyCanBackend);
|————Node:call_expression Text: Q_Q(TinyCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (TinyCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: TinyCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:switch_statement Text: switch (key) {
    case QCanBusDevice::BitRateKey:
        return setBitRate(value.toInt());
    default:
        q->setError(TinyCanBackend::tr("Unsupported configuration key: %1").arg(key),
                    QCanBusDevice::ConfigurationError);
        return false;
    }
|————Node:switch Text: switch
|————Node:condition_clause Text: (key)
|—————Node:( Text: (
|—————Node:identifier Text: key
|—————Node:) Text: )
|————Node:compound_statement Text: {
    case QCanBusDevice::BitRateKey:
        return setBitRate(value.toInt());
    default:
        q->setError(TinyCanBackend::tr("Unsupported configuration key: %1").arg(key),
                    QCanBusDevice::ConfigurationError);
        return false;
    }
|—————Node:{ Text: {
|—————Node:case_statement Text: case QCanBusDevice::BitRateKey:
        return setBitRate(value.toInt());
|——————Node:case Text: case
|——————Node:qualified_identifier Text: QCanBusDevice::BitRateKey
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: BitRateKey
|——————Node:: Text: :
|——————Node:return_statement Text: return setBitRate(value.toInt());
|———————Node:return Text: return
|———————Node:call_expression Text: setBitRate(value.toInt())
|————————Node:identifier Text: setBitRate
|————————Node:argument_list Text: (value.toInt())
|—————————Node:( Text: (
|—————————Node:call_expression Text: value.toInt()
|——————————Node:field_expression Text: value.toInt
|———————————Node:identifier Text: value
|———————————Node:. Text: .
|———————————Node:field_identifier Text: toInt
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: default:
        q->setError(TinyCanBackend::tr("Unsupported configuration key: %1").arg(key),
                    QCanBusDevice::ConfigurationError);
        return false;
|——————Node:default Text: default
|——————Node:: Text: :
|——————Node:expression_statement Text: q->setError(TinyCanBackend::tr("Unsupported configuration key: %1").arg(key),
                    QCanBusDevice::ConfigurationError);
|———————Node:call_expression Text: q->setError(TinyCanBackend::tr("Unsupported configuration key: %1").arg(key),
                    QCanBusDevice::ConfigurationError)
|————————Node:field_expression Text: q->setError
|—————————Node:identifier Text: q
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: setError
|————————Node:argument_list Text: (TinyCanBackend::tr("Unsupported configuration key: %1").arg(key),
                    QCanBusDevice::ConfigurationError)
|—————————Node:( Text: (
|—————————Node:call_expression Text: TinyCanBackend::tr("Unsupported configuration key: %1").arg(key)
|——————————Node:field_expression Text: TinyCanBackend::tr("Unsupported configuration key: %1").arg
|———————————Node:call_expression Text: TinyCanBackend::tr("Unsupported configuration key: %1")
|————————————Node:qualified_identifier Text: TinyCanBackend::tr
|—————————————Node:namespace_identifier Text: TinyCanBackend
|—————————————Node::: Text: ::
|—————————————Node:identifier Text: tr
|————————————Node:argument_list Text: ("Unsupported configuration key: %1")
|—————————————Node:( Text: (
|—————————————Node:string_literal Text: "Unsupported configuration key: %1"
|——————————————Node:" Text: "
|——————————————Node:string_content Text: Unsupported configuration key: %1
|——————————————Node:" Text: "
|—————————————Node:) Text: )
|———————————Node:. Text: .
|———————————Node:field_identifier Text: arg
|——————————Node:argument_list Text: (key)
|———————————Node:( Text: (
|———————————Node:identifier Text: key
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:qualified_identifier Text: QCanBusDevice::ConfigurationError
|——————————Node:namespace_identifier Text: QCanBusDevice
|——————————Node::: Text: ::
|——————————Node:identifier Text: ConfigurationError
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:return_statement Text: return false;
|———————Node:return Text: return
|———————Node:false Text: false
|———————Node:; Text: ;
|—————Node:} Text: }
|———Node:} Text: }
|—Node:comment Text: // These error codes taked from the errors.h file, which
|—Node:comment Text: // exists only in linux sources.
|—Node:function_definition Text: QString TinyCanBackendPrivate::systemErrorString(int errorCode)
{
    switch (errorCode) {
    case 0:
        return TinyCanBackend::tr("No error");
    case -1:
        return TinyCanBackend::tr("Driver not initialized");
    case -2:
        return TinyCanBackend::tr("Invalid parameters values were passed");
    case -3:
        return TinyCanBackend::tr("Invalid index value");
    case -4:
        return TinyCanBackend::tr("More invalid CAN-channel");
    case -5:
        return TinyCanBackend::tr("General error");
    case -6:
        return TinyCanBackend::tr("The FIFO cannot be written");
    case -7:
        return TinyCanBackend::tr("The buffer cannot be written");
    case -8:
        return TinyCanBackend::tr("The FIFO cannot be read");
    case -9:
        return TinyCanBackend::tr("The buffer cannot be read");
    case -10:
        return TinyCanBackend::tr("Variable not found");
    case -11:
        return TinyCanBackend::tr("Reading of the variable does not permit");
    case -12:
        return TinyCanBackend::tr("Reading buffer for variable too small");
    case -13:
        return TinyCanBackend::tr("Writing of the variable does not permit");
    case -14:
        return TinyCanBackend::tr("The string/stream to be written is to majority");
    case -15:
        return TinyCanBackend::tr("Fell short min of value");
    case -16:
        return TinyCanBackend::tr("Max value crossed");
    case -17:
        return TinyCanBackend::tr("Access refuses");
    case -18:
        return TinyCanBackend::tr("Invalid value of CAN speed");
    case -19:
        return TinyCanBackend::tr("Invalid value of baud rate");
    case -20:
        return TinyCanBackend::tr("Value not put");
    case -21:
        return TinyCanBackend::tr("No connection to the hardware");
    case -22:
        return TinyCanBackend::tr("Communication error to the hardware");
    case -23:
        return TinyCanBackend::tr("Hardware sends wrong number of parameters");
    case -24:
        return TinyCanBackend::tr("Not enough main memory");
    case -25:
        return TinyCanBackend::tr("The system cannot provide the enough resources");
    case -26:
        return TinyCanBackend::tr("A system call returns with an error");
    case -27:
        return TinyCanBackend::tr("The main thread is occupied");
    case -28:
        return TinyCanBackend::tr("User allocated memory not found");
    case -29:
        return TinyCanBackend::tr("The main thread cannot be launched");
        // the codes -30...-33 are skipped, as they belongs to sockets
    default:
        return TinyCanBackend::tr("Unknown error");
    }
}
|——Node:type_identifier Text: QString
|——Node:function_declarator Text: TinyCanBackendPrivate::systemErrorString(int errorCode)
|———Node:qualified_identifier Text: TinyCanBackendPrivate::systemErrorString
|————Node:namespace_identifier Text: TinyCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: systemErrorString
|———Node:parameter_list Text: (int errorCode)
|————Node:( Text: (
|————Node:parameter_declaration Text: int errorCode
|—————Node:primitive_type Text: int
|—————Node:identifier Text: errorCode
|————Node:) Text: )
|——Node:compound_statement Text: {
    switch (errorCode) {
    case 0:
        return TinyCanBackend::tr("No error");
    case -1:
        return TinyCanBackend::tr("Driver not initialized");
    case -2:
        return TinyCanBackend::tr("Invalid parameters values were passed");
    case -3:
        return TinyCanBackend::tr("Invalid index value");
    case -4:
        return TinyCanBackend::tr("More invalid CAN-channel");
    case -5:
        return TinyCanBackend::tr("General error");
    case -6:
        return TinyCanBackend::tr("The FIFO cannot be written");
    case -7:
        return TinyCanBackend::tr("The buffer cannot be written");
    case -8:
        return TinyCanBackend::tr("The FIFO cannot be read");
    case -9:
        return TinyCanBackend::tr("The buffer cannot be read");
    case -10:
        return TinyCanBackend::tr("Variable not found");
    case -11:
        return TinyCanBackend::tr("Reading of the variable does not permit");
    case -12:
        return TinyCanBackend::tr("Reading buffer for variable too small");
    case -13:
        return TinyCanBackend::tr("Writing of the variable does not permit");
    case -14:
        return TinyCanBackend::tr("The string/stream to be written is to majority");
    case -15:
        return TinyCanBackend::tr("Fell short min of value");
    case -16:
        return TinyCanBackend::tr("Max value crossed");
    case -17:
        return TinyCanBackend::tr("Access refuses");
    case -18:
        return TinyCanBackend::tr("Invalid value of CAN speed");
    case -19:
        return TinyCanBackend::tr("Invalid value of baud rate");
    case -20:
        return TinyCanBackend::tr("Value not put");
    case -21:
        return TinyCanBackend::tr("No connection to the hardware");
    case -22:
        return TinyCanBackend::tr("Communication error to the hardware");
    case -23:
        return TinyCanBackend::tr("Hardware sends wrong number of parameters");
    case -24:
        return TinyCanBackend::tr("Not enough main memory");
    case -25:
        return TinyCanBackend::tr("The system cannot provide the enough resources");
    case -26:
        return TinyCanBackend::tr("A system call returns with an error");
    case -27:
        return TinyCanBackend::tr("The main thread is occupied");
    case -28:
        return TinyCanBackend::tr("User allocated memory not found");
    case -29:
        return TinyCanBackend::tr("The main thread cannot be launched");
        // the codes -30...-33 are skipped, as they belongs to sockets
    default:
        return TinyCanBackend::tr("Unknown error");
    }
}
|———Node:{ Text: {
|———Node:switch_statement Text: switch (errorCode) {
    case 0:
        return TinyCanBackend::tr("No error");
    case -1:
        return TinyCanBackend::tr("Driver not initialized");
    case -2:
        return TinyCanBackend::tr("Invalid parameters values were passed");
    case -3:
        return TinyCanBackend::tr("Invalid index value");
    case -4:
        return TinyCanBackend::tr("More invalid CAN-channel");
    case -5:
        return TinyCanBackend::tr("General error");
    case -6:
        return TinyCanBackend::tr("The FIFO cannot be written");
    case -7:
        return TinyCanBackend::tr("The buffer cannot be written");
    case -8:
        return TinyCanBackend::tr("The FIFO cannot be read");
    case -9:
        return TinyCanBackend::tr("The buffer cannot be read");
    case -10:
        return TinyCanBackend::tr("Variable not found");
    case -11:
        return TinyCanBackend::tr("Reading of the variable does not permit");
    case -12:
        return TinyCanBackend::tr("Reading buffer for variable too small");
    case -13:
        return TinyCanBackend::tr("Writing of the variable does not permit");
    case -14:
        return TinyCanBackend::tr("The string/stream to be written is to majority");
    case -15:
        return TinyCanBackend::tr("Fell short min of value");
    case -16:
        return TinyCanBackend::tr("Max value crossed");
    case -17:
        return TinyCanBackend::tr("Access refuses");
    case -18:
        return TinyCanBackend::tr("Invalid value of CAN speed");
    case -19:
        return TinyCanBackend::tr("Invalid value of baud rate");
    case -20:
        return TinyCanBackend::tr("Value not put");
    case -21:
        return TinyCanBackend::tr("No connection to the hardware");
    case -22:
        return TinyCanBackend::tr("Communication error to the hardware");
    case -23:
        return TinyCanBackend::tr("Hardware sends wrong number of parameters");
    case -24:
        return TinyCanBackend::tr("Not enough main memory");
    case -25:
        return TinyCanBackend::tr("The system cannot provide the enough resources");
    case -26:
        return TinyCanBackend::tr("A system call returns with an error");
    case -27:
        return TinyCanBackend::tr("The main thread is occupied");
    case -28:
        return TinyCanBackend::tr("User allocated memory not found");
    case -29:
        return TinyCanBackend::tr("The main thread cannot be launched");
        // the codes -30...-33 are skipped, as they belongs to sockets
    default:
        return TinyCanBackend::tr("Unknown error");
    }
|————Node:switch Text: switch
|————Node:condition_clause Text: (errorCode)
|—————Node:( Text: (
|—————Node:identifier Text: errorCode
|—————Node:) Text: )
|————Node:compound_statement Text: {
    case 0:
        return TinyCanBackend::tr("No error");
    case -1:
        return TinyCanBackend::tr("Driver not initialized");
    case -2:
        return TinyCanBackend::tr("Invalid parameters values were passed");
    case -3:
        return TinyCanBackend::tr("Invalid index value");
    case -4:
        return TinyCanBackend::tr("More invalid CAN-channel");
    case -5:
        return TinyCanBackend::tr("General error");
    case -6:
        return TinyCanBackend::tr("The FIFO cannot be written");
    case -7:
        return TinyCanBackend::tr("The buffer cannot be written");
    case -8:
        return TinyCanBackend::tr("The FIFO cannot be read");
    case -9:
        return TinyCanBackend::tr("The buffer cannot be read");
    case -10:
        return TinyCanBackend::tr("Variable not found");
    case -11:
        return TinyCanBackend::tr("Reading of the variable does not permit");
    case -12:
        return TinyCanBackend::tr("Reading buffer for variable too small");
    case -13:
        return TinyCanBackend::tr("Writing of the variable does not permit");
    case -14:
        return TinyCanBackend::tr("The string/stream to be written is to majority");
    case -15:
        return TinyCanBackend::tr("Fell short min of value");
    case -16:
        return TinyCanBackend::tr("Max value crossed");
    case -17:
        return TinyCanBackend::tr("Access refuses");
    case -18:
        return TinyCanBackend::tr("Invalid value of CAN speed");
    case -19:
        return TinyCanBackend::tr("Invalid value of baud rate");
    case -20:
        return TinyCanBackend::tr("Value not put");
    case -21:
        return TinyCanBackend::tr("No connection to the hardware");
    case -22:
        return TinyCanBackend::tr("Communication error to the hardware");
    case -23:
        return TinyCanBackend::tr("Hardware sends wrong number of parameters");
    case -24:
        return TinyCanBackend::tr("Not enough main memory");
    case -25:
        return TinyCanBackend::tr("The system cannot provide the enough resources");
    case -26:
        return TinyCanBackend::tr("A system call returns with an error");
    case -27:
        return TinyCanBackend::tr("The main thread is occupied");
    case -28:
        return TinyCanBackend::tr("User allocated memory not found");
    case -29:
        return TinyCanBackend::tr("The main thread cannot be launched");
        // the codes -30...-33 are skipped, as they belongs to sockets
    default:
        return TinyCanBackend::tr("Unknown error");
    }
|—————Node:{ Text: {
|—————Node:case_statement Text: case 0:
        return TinyCanBackend::tr("No error");
|——————Node:case Text: case
|——————Node:number_literal Text: 0
|——————Node:: Text: :
|——————Node:return_statement Text: return TinyCanBackend::tr("No error");
|———————Node:return Text: return
|———————Node:call_expression Text: TinyCanBackend::tr("No error")
|————————Node:qualified_identifier Text: TinyCanBackend::tr
|—————————Node:namespace_identifier Text: TinyCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("No error")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "No error"
|——————————Node:" Text: "
|——————————Node:string_content Text: No error
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case -1:
        return TinyCanBackend::tr("Driver not initialized");
|——————Node:case Text: case
|——————Node:number_literal Text: -1
|——————Node:: Text: :
|——————Node:return_statement Text: return TinyCanBackend::tr("Driver not initialized");
|———————Node:return Text: return
|———————Node:call_expression Text: TinyCanBackend::tr("Driver not initialized")
|————————Node:qualified_identifier Text: TinyCanBackend::tr
|—————————Node:namespace_identifier Text: TinyCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("Driver not initialized")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Driver not initialized"
|——————————Node:" Text: "
|——————————Node:string_content Text: Driver not initialized
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case -2:
        return TinyCanBackend::tr("Invalid parameters values were passed");
|——————Node:case Text: case
|——————Node:number_literal Text: -2
|——————Node:: Text: :
|——————Node:return_statement Text: return TinyCanBackend::tr("Invalid parameters values were passed");
|———————Node:return Text: return
|———————Node:call_expression Text: TinyCanBackend::tr("Invalid parameters values were passed")
|————————Node:qualified_identifier Text: TinyCanBackend::tr
|—————————Node:namespace_identifier Text: TinyCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("Invalid parameters values were passed")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Invalid parameters values were passed"
|——————————Node:" Text: "
|——————————Node:string_content Text: Invalid parameters values were passed
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case -3:
        return TinyCanBackend::tr("Invalid index value");
|——————Node:case Text: case
|——————Node:number_literal Text: -3
|——————Node:: Text: :
|——————Node:return_statement Text: return TinyCanBackend::tr("Invalid index value");
|———————Node:return Text: return
|———————Node:call_expression Text: TinyCanBackend::tr("Invalid index value")
|————————Node:qualified_identifier Text: TinyCanBackend::tr
|—————————Node:namespace_identifier Text: TinyCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("Invalid index value")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Invalid index value"
|——————————Node:" Text: "
|——————————Node:string_content Text: Invalid index value
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case -4:
        return TinyCanBackend::tr("More invalid CAN-channel");
|——————Node:case Text: case
|——————Node:number_literal Text: -4
|——————Node:: Text: :
|——————Node:return_statement Text: return TinyCanBackend::tr("More invalid CAN-channel");
|———————Node:return Text: return
|———————Node:call_expression Text: TinyCanBackend::tr("More invalid CAN-channel")
|————————Node:qualified_identifier Text: TinyCanBackend::tr
|—————————Node:namespace_identifier Text: TinyCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("More invalid CAN-channel")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "More invalid CAN-channel"
|——————————Node:" Text: "
|——————————Node:string_content Text: More invalid CAN-channel
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case -5:
        return TinyCanBackend::tr("General error");
|——————Node:case Text: case
|——————Node:number_literal Text: -5
|——————Node:: Text: :
|——————Node:return_statement Text: return TinyCanBackend::tr("General error");
|———————Node:return Text: return
|———————Node:call_expression Text: TinyCanBackend::tr("General error")
|————————Node:qualified_identifier Text: TinyCanBackend::tr
|—————————Node:namespace_identifier Text: TinyCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("General error")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "General error"
|——————————Node:" Text: "
|——————————Node:string_content Text: General error
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case -6:
        return TinyCanBackend::tr("The FIFO cannot be written");
|——————Node:case Text: case
|——————Node:number_literal Text: -6
|——————Node:: Text: :
|——————Node:return_statement Text: return TinyCanBackend::tr("The FIFO cannot be written");
|———————Node:return Text: return
|———————Node:call_expression Text: TinyCanBackend::tr("The FIFO cannot be written")
|————————Node:qualified_identifier Text: TinyCanBackend::tr
|—————————Node:namespace_identifier Text: TinyCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("The FIFO cannot be written")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "The FIFO cannot be written"
|——————————Node:" Text: "
|——————————Node:string_content Text: The FIFO cannot be written
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case -7:
        return TinyCanBackend::tr("The buffer cannot be written");
|——————Node:case Text: case
|——————Node:number_literal Text: -7
|——————Node:: Text: :
|——————Node:return_statement Text: return TinyCanBackend::tr("The buffer cannot be written");
|———————Node:return Text: return
|———————Node:call_expression Text: TinyCanBackend::tr("The buffer cannot be written")
|————————Node:qualified_identifier Text: TinyCanBackend::tr
|—————————Node:namespace_identifier Text: TinyCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("The buffer cannot be written")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "The buffer cannot be written"
|——————————Node:" Text: "
|——————————Node:string_content Text: The buffer cannot be written
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case -8:
        return TinyCanBackend::tr("The FIFO cannot be read");
|——————Node:case Text: case
|——————Node:number_literal Text: -8
|——————Node:: Text: :
|——————Node:return_statement Text: return TinyCanBackend::tr("The FIFO cannot be read");
|———————Node:return Text: return
|———————Node:call_expression Text: TinyCanBackend::tr("The FIFO cannot be read")
|————————Node:qualified_identifier Text: TinyCanBackend::tr
|—————————Node:namespace_identifier Text: TinyCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("The FIFO cannot be read")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "The FIFO cannot be read"
|——————————Node:" Text: "
|——————————Node:string_content Text: The FIFO cannot be read
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case -9:
        return TinyCanBackend::tr("The buffer cannot be read");
|——————Node:case Text: case
|——————Node:number_literal Text: -9
|——————Node:: Text: :
|——————Node:return_statement Text: return TinyCanBackend::tr("The buffer cannot be read");
|———————Node:return Text: return
|———————Node:call_expression Text: TinyCanBackend::tr("The buffer cannot be read")
|————————Node:qualified_identifier Text: TinyCanBackend::tr
|—————————Node:namespace_identifier Text: TinyCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("The buffer cannot be read")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "The buffer cannot be read"
|——————————Node:" Text: "
|——————————Node:string_content Text: The buffer cannot be read
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case -10:
        return TinyCanBackend::tr("Variable not found");
|——————Node:case Text: case
|——————Node:number_literal Text: -10
|——————Node:: Text: :
|——————Node:return_statement Text: return TinyCanBackend::tr("Variable not found");
|———————Node:return Text: return
|———————Node:call_expression Text: TinyCanBackend::tr("Variable not found")
|————————Node:qualified_identifier Text: TinyCanBackend::tr
|—————————Node:namespace_identifier Text: TinyCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("Variable not found")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Variable not found"
|——————————Node:" Text: "
|——————————Node:string_content Text: Variable not found
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case -11:
        return TinyCanBackend::tr("Reading of the variable does not permit");
|——————Node:case Text: case
|——————Node:number_literal Text: -11
|——————Node:: Text: :
|——————Node:return_statement Text: return TinyCanBackend::tr("Reading of the variable does not permit");
|———————Node:return Text: return
|———————Node:call_expression Text: TinyCanBackend::tr("Reading of the variable does not permit")
|————————Node:qualified_identifier Text: TinyCanBackend::tr
|—————————Node:namespace_identifier Text: TinyCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("Reading of the variable does not permit")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Reading of the variable does not permit"
|——————————Node:" Text: "
|——————————Node:string_content Text: Reading of the variable does not permit
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case -12:
        return TinyCanBackend::tr("Reading buffer for variable too small");
|——————Node:case Text: case
|——————Node:number_literal Text: -12
|——————Node:: Text: :
|——————Node:return_statement Text: return TinyCanBackend::tr("Reading buffer for variable too small");
|———————Node:return Text: return
|———————Node:call_expression Text: TinyCanBackend::tr("Reading buffer for variable too small")
|————————Node:qualified_identifier Text: TinyCanBackend::tr
|—————————Node:namespace_identifier Text: TinyCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("Reading buffer for variable too small")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Reading buffer for variable too small"
|——————————Node:" Text: "
|——————————Node:string_content Text: Reading buffer for variable too small
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case -13:
        return TinyCanBackend::tr("Writing of the variable does not permit");
|——————Node:case Text: case
|——————Node:number_literal Text: -13
|——————Node:: Text: :
|——————Node:return_statement Text: return TinyCanBackend::tr("Writing of the variable does not permit");
|———————Node:return Text: return
|———————Node:call_expression Text: TinyCanBackend::tr("Writing of the variable does not permit")
|————————Node:qualified_identifier Text: TinyCanBackend::tr
|—————————Node:namespace_identifier Text: TinyCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("Writing of the variable does not permit")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Writing of the variable does not permit"
|——————————Node:" Text: "
|——————————Node:string_content Text: Writing of the variable does not permit
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case -14:
        return TinyCanBackend::tr("The string/stream to be written is to majority");
|——————Node:case Text: case
|——————Node:number_literal Text: -14
|——————Node:: Text: :
|——————Node:return_statement Text: return TinyCanBackend::tr("The string/stream to be written is to majority");
|———————Node:return Text: return
|———————Node:call_expression Text: TinyCanBackend::tr("The string/stream to be written is to majority")
|————————Node:qualified_identifier Text: TinyCanBackend::tr
|—————————Node:namespace_identifier Text: TinyCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("The string/stream to be written is to majority")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "The string/stream to be written is to majority"
|——————————Node:" Text: "
|——————————Node:string_content Text: The string/stream to be written is to majority
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case -15:
        return TinyCanBackend::tr("Fell short min of value");
|——————Node:case Text: case
|——————Node:number_literal Text: -15
|——————Node:: Text: :
|——————Node:return_statement Text: return TinyCanBackend::tr("Fell short min of value");
|———————Node:return Text: return
|———————Node:call_expression Text: TinyCanBackend::tr("Fell short min of value")
|————————Node:qualified_identifier Text: TinyCanBackend::tr
|—————————Node:namespace_identifier Text: TinyCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("Fell short min of value")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Fell short min of value"
|——————————Node:" Text: "
|——————————Node:string_content Text: Fell short min of value
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case -16:
        return TinyCanBackend::tr("Max value crossed");
|——————Node:case Text: case
|——————Node:number_literal Text: -16
|——————Node:: Text: :
|——————Node:return_statement Text: return TinyCanBackend::tr("Max value crossed");
|———————Node:return Text: return
|———————Node:call_expression Text: TinyCanBackend::tr("Max value crossed")
|————————Node:qualified_identifier Text: TinyCanBackend::tr
|—————————Node:namespace_identifier Text: TinyCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("Max value crossed")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Max value crossed"
|——————————Node:" Text: "
|——————————Node:string_content Text: Max value crossed
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case -17:
        return TinyCanBackend::tr("Access refuses");
|——————Node:case Text: case
|——————Node:number_literal Text: -17
|——————Node:: Text: :
|——————Node:return_statement Text: return TinyCanBackend::tr("Access refuses");
|———————Node:return Text: return
|———————Node:call_expression Text: TinyCanBackend::tr("Access refuses")
|————————Node:qualified_identifier Text: TinyCanBackend::tr
|—————————Node:namespace_identifier Text: TinyCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("Access refuses")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Access refuses"
|——————————Node:" Text: "
|——————————Node:string_content Text: Access refuses
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case -18:
        return TinyCanBackend::tr("Invalid value of CAN speed");
|——————Node:case Text: case
|——————Node:number_literal Text: -18
|——————Node:: Text: :
|——————Node:return_statement Text: return TinyCanBackend::tr("Invalid value of CAN speed");
|———————Node:return Text: return
|———————Node:call_expression Text: TinyCanBackend::tr("Invalid value of CAN speed")
|————————Node:qualified_identifier Text: TinyCanBackend::tr
|—————————Node:namespace_identifier Text: TinyCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("Invalid value of CAN speed")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Invalid value of CAN speed"
|——————————Node:" Text: "
|——————————Node:string_content Text: Invalid value of CAN speed
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case -19:
        return TinyCanBackend::tr("Invalid value of baud rate");
|——————Node:case Text: case
|——————Node:number_literal Text: -19
|——————Node:: Text: :
|——————Node:return_statement Text: return TinyCanBackend::tr("Invalid value of baud rate");
|———————Node:return Text: return
|———————Node:call_expression Text: TinyCanBackend::tr("Invalid value of baud rate")
|————————Node:qualified_identifier Text: TinyCanBackend::tr
|—————————Node:namespace_identifier Text: TinyCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("Invalid value of baud rate")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Invalid value of baud rate"
|——————————Node:" Text: "
|——————————Node:string_content Text: Invalid value of baud rate
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case -20:
        return TinyCanBackend::tr("Value not put");
|——————Node:case Text: case
|——————Node:number_literal Text: -20
|——————Node:: Text: :
|——————Node:return_statement Text: return TinyCanBackend::tr("Value not put");
|———————Node:return Text: return
|———————Node:call_expression Text: TinyCanBackend::tr("Value not put")
|————————Node:qualified_identifier Text: TinyCanBackend::tr
|—————————Node:namespace_identifier Text: TinyCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("Value not put")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Value not put"
|——————————Node:" Text: "
|——————————Node:string_content Text: Value not put
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case -21:
        return TinyCanBackend::tr("No connection to the hardware");
|——————Node:case Text: case
|——————Node:number_literal Text: -21
|——————Node:: Text: :
|——————Node:return_statement Text: return TinyCanBackend::tr("No connection to the hardware");
|———————Node:return Text: return
|———————Node:call_expression Text: TinyCanBackend::tr("No connection to the hardware")
|————————Node:qualified_identifier Text: TinyCanBackend::tr
|—————————Node:namespace_identifier Text: TinyCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("No connection to the hardware")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "No connection to the hardware"
|——————————Node:" Text: "
|——————————Node:string_content Text: No connection to the hardware
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case -22:
        return TinyCanBackend::tr("Communication error to the hardware");
|——————Node:case Text: case
|——————Node:number_literal Text: -22
|——————Node:: Text: :
|——————Node:return_statement Text: return TinyCanBackend::tr("Communication error to the hardware");
|———————Node:return Text: return
|———————Node:call_expression Text: TinyCanBackend::tr("Communication error to the hardware")
|————————Node:qualified_identifier Text: TinyCanBackend::tr
|—————————Node:namespace_identifier Text: TinyCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("Communication error to the hardware")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Communication error to the hardware"
|——————————Node:" Text: "
|——————————Node:string_content Text: Communication error to the hardware
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case -23:
        return TinyCanBackend::tr("Hardware sends wrong number of parameters");
|——————Node:case Text: case
|——————Node:number_literal Text: -23
|——————Node:: Text: :
|——————Node:return_statement Text: return TinyCanBackend::tr("Hardware sends wrong number of parameters");
|———————Node:return Text: return
|———————Node:call_expression Text: TinyCanBackend::tr("Hardware sends wrong number of parameters")
|————————Node:qualified_identifier Text: TinyCanBackend::tr
|—————————Node:namespace_identifier Text: TinyCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("Hardware sends wrong number of parameters")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Hardware sends wrong number of parameters"
|——————————Node:" Text: "
|——————————Node:string_content Text: Hardware sends wrong number of parameters
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case -24:
        return TinyCanBackend::tr("Not enough main memory");
|——————Node:case Text: case
|——————Node:number_literal Text: -24
|——————Node:: Text: :
|——————Node:return_statement Text: return TinyCanBackend::tr("Not enough main memory");
|———————Node:return Text: return
|———————Node:call_expression Text: TinyCanBackend::tr("Not enough main memory")
|————————Node:qualified_identifier Text: TinyCanBackend::tr
|—————————Node:namespace_identifier Text: TinyCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("Not enough main memory")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Not enough main memory"
|——————————Node:" Text: "
|——————————Node:string_content Text: Not enough main memory
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case -25:
        return TinyCanBackend::tr("The system cannot provide the enough resources");
|——————Node:case Text: case
|——————Node:number_literal Text: -25
|——————Node:: Text: :
|——————Node:return_statement Text: return TinyCanBackend::tr("The system cannot provide the enough resources");
|———————Node:return Text: return
|———————Node:call_expression Text: TinyCanBackend::tr("The system cannot provide the enough resources")
|————————Node:qualified_identifier Text: TinyCanBackend::tr
|—————————Node:namespace_identifier Text: TinyCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("The system cannot provide the enough resources")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "The system cannot provide the enough resources"
|——————————Node:" Text: "
|——————————Node:string_content Text: The system cannot provide the enough resources
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case -26:
        return TinyCanBackend::tr("A system call returns with an error");
|——————Node:case Text: case
|——————Node:number_literal Text: -26
|——————Node:: Text: :
|——————Node:return_statement Text: return TinyCanBackend::tr("A system call returns with an error");
|———————Node:return Text: return
|———————Node:call_expression Text: TinyCanBackend::tr("A system call returns with an error")
|————————Node:qualified_identifier Text: TinyCanBackend::tr
|—————————Node:namespace_identifier Text: TinyCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("A system call returns with an error")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "A system call returns with an error"
|——————————Node:" Text: "
|——————————Node:string_content Text: A system call returns with an error
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case -27:
        return TinyCanBackend::tr("The main thread is occupied");
|——————Node:case Text: case
|——————Node:number_literal Text: -27
|——————Node:: Text: :
|——————Node:return_statement Text: return TinyCanBackend::tr("The main thread is occupied");
|———————Node:return Text: return
|———————Node:call_expression Text: TinyCanBackend::tr("The main thread is occupied")
|————————Node:qualified_identifier Text: TinyCanBackend::tr
|—————————Node:namespace_identifier Text: TinyCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("The main thread is occupied")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "The main thread is occupied"
|——————————Node:" Text: "
|——————————Node:string_content Text: The main thread is occupied
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case -28:
        return TinyCanBackend::tr("User allocated memory not found");
|——————Node:case Text: case
|——————Node:number_literal Text: -28
|——————Node:: Text: :
|——————Node:return_statement Text: return TinyCanBackend::tr("User allocated memory not found");
|———————Node:return Text: return
|———————Node:call_expression Text: TinyCanBackend::tr("User allocated memory not found")
|————————Node:qualified_identifier Text: TinyCanBackend::tr
|—————————Node:namespace_identifier Text: TinyCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("User allocated memory not found")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "User allocated memory not found"
|——————————Node:" Text: "
|——————————Node:string_content Text: User allocated memory not found
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case -29:
        return TinyCanBackend::tr("The main thread cannot be launched");
|——————Node:case Text: case
|——————Node:number_literal Text: -29
|——————Node:: Text: :
|——————Node:return_statement Text: return TinyCanBackend::tr("The main thread cannot be launched");
|———————Node:return Text: return
|———————Node:call_expression Text: TinyCanBackend::tr("The main thread cannot be launched")
|————————Node:qualified_identifier Text: TinyCanBackend::tr
|—————————Node:namespace_identifier Text: TinyCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("The main thread cannot be launched")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "The main thread cannot be launched"
|——————————Node:" Text: "
|——————————Node:string_content Text: The main thread cannot be launched
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:comment Text: // the codes -30...-33 are skipped, as they belongs to sockets
|—————Node:case_statement Text: default:
        return TinyCanBackend::tr("Unknown error");
|——————Node:default Text: default
|——————Node:: Text: :
|——————Node:return_statement Text: return TinyCanBackend::tr("Unknown error");
|———————Node:return Text: return
|———————Node:call_expression Text: TinyCanBackend::tr("Unknown error")
|————————Node:qualified_identifier Text: TinyCanBackend::tr
|—————————Node:namespace_identifier Text: TinyCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("Unknown error")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Unknown error"
|——————————Node:" Text: "
|——————————Node:string_content Text: Unknown error
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:} Text: }
|———Node:} Text: }
|—Node:function_definition Text: static int channelIndexFromName(const QString &interfaceName)
{
    if (interfaceName == QStringLiteral("can0.0"))
        return INDEX_CAN_KANAL_A;
    else if (interfaceName == QStringLiteral("can0.1"))
        return INDEX_CAN_KANAL_B;
    else
        return INDEX_INVALID;
}
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:primitive_type Text: int
|——Node:function_declarator Text: channelIndexFromName(const QString &interfaceName)
|———Node:identifier Text: channelIndexFromName
|———Node:parameter_list Text: (const QString &interfaceName)
|————Node:( Text: (
|————Node:parameter_declaration Text: const QString &interfaceName
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: QString
|—————Node:reference_declarator Text: &interfaceName
|——————Node:& Text: &
|——————Node:identifier Text: interfaceName
|————Node:) Text: )
|——Node:compound_statement Text: {
    if (interfaceName == QStringLiteral("can0.0"))
        return INDEX_CAN_KANAL_A;
    else if (interfaceName == QStringLiteral("can0.1"))
        return INDEX_CAN_KANAL_B;
    else
        return INDEX_INVALID;
}
|———Node:{ Text: {
|———Node:if_statement Text: if (interfaceName == QStringLiteral("can0.0"))
        return INDEX_CAN_KANAL_A;
    else if (interfaceName == QStringLiteral("can0.1"))
        return INDEX_CAN_KANAL_B;
    else
        return INDEX_INVALID;
|————Node:if Text: if
|————Node:condition_clause Text: (interfaceName == QStringLiteral("can0.0"))
|—————Node:( Text: (
|—————Node:binary_expression Text: interfaceName == QStringLiteral("can0.0")
|——————Node:identifier Text: interfaceName
|——————Node:== Text: ==
|——————Node:call_expression Text: QStringLiteral("can0.0")
|———————Node:identifier Text: QStringLiteral
|———————Node:argument_list Text: ("can0.0")
|————————Node:( Text: (
|————————Node:string_literal Text: "can0.0"
|—————————Node:" Text: "
|—————————Node:string_content Text: can0.0
|—————————Node:" Text: "
|————————Node:) Text: )
|—————Node:) Text: )
|————Node:return_statement Text: return INDEX_CAN_KANAL_A;
|—————Node:return Text: return
|—————Node:identifier Text: INDEX_CAN_KANAL_A
|—————Node:; Text: ;
|————Node:else_clause Text: else if (interfaceName == QStringLiteral("can0.1"))
        return INDEX_CAN_KANAL_B;
    else
        return INDEX_INVALID;
|—————Node:else Text: else
|—————Node:if_statement Text: if (interfaceName == QStringLiteral("can0.1"))
        return INDEX_CAN_KANAL_B;
    else
        return INDEX_INVALID;
|——————Node:if Text: if
|——————Node:condition_clause Text: (interfaceName == QStringLiteral("can0.1"))
|———————Node:( Text: (
|———————Node:binary_expression Text: interfaceName == QStringLiteral("can0.1")
|————————Node:identifier Text: interfaceName
|————————Node:== Text: ==
|————————Node:call_expression Text: QStringLiteral("can0.1")
|—————————Node:identifier Text: QStringLiteral
|—————————Node:argument_list Text: ("can0.1")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "can0.1"
|———————————Node:" Text: "
|———————————Node:string_content Text: can0.1
|———————————Node:" Text: "
|——————————Node:) Text: )
|———————Node:) Text: )
|——————Node:return_statement Text: return INDEX_CAN_KANAL_B;
|———————Node:return Text: return
|———————Node:identifier Text: INDEX_CAN_KANAL_B
|———————Node:; Text: ;
|——————Node:else_clause Text: else
        return INDEX_INVALID;
|———————Node:else Text: else
|———————Node:return_statement Text: return INDEX_INVALID;
|————————Node:return Text: return
|————————Node:identifier Text: INDEX_INVALID
|————————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void TinyCanBackendPrivate::setupChannel(const QString &interfaceName)
{
    channelIndex = channelIndexFromName(interfaceName);
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: TinyCanBackendPrivate::setupChannel(const QString &interfaceName)
|———Node:qualified_identifier Text: TinyCanBackendPrivate::setupChannel
|————Node:namespace_identifier Text: TinyCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: setupChannel
|———Node:parameter_list Text: (const QString &interfaceName)
|————Node:( Text: (
|————Node:parameter_declaration Text: const QString &interfaceName
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: QString
|—————Node:reference_declarator Text: &interfaceName
|——————Node:& Text: &
|——————Node:identifier Text: interfaceName
|————Node:) Text: )
|——Node:compound_statement Text: {
    channelIndex = channelIndexFromName(interfaceName);
}
|———Node:{ Text: {
|———Node:expression_statement Text: channelIndex = channelIndexFromName(interfaceName);
|————Node:assignment_expression Text: channelIndex = channelIndexFromName(interfaceName)
|—————Node:identifier Text: channelIndex
|—————Node:= Text: =
|—————Node:call_expression Text: channelIndexFromName(interfaceName)
|——————Node:identifier Text: channelIndexFromName
|——————Node:argument_list Text: (interfaceName)
|———————Node:( Text: (
|———————Node:identifier Text: interfaceName
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: // Calls only in constructor
|—Node:function_definition Text: void TinyCanBackendPrivate::setupDefaultConfigurations()
{
    Q_Q(TinyCanBackend);

    q->setConfigurationParameter(QCanBusDevice::BitRateKey, 500000);
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: TinyCanBackendPrivate::setupDefaultConfigurations()
|———Node:qualified_identifier Text: TinyCanBackendPrivate::setupDefaultConfigurations
|————Node:namespace_identifier Text: TinyCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: setupDefaultConfigurations
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(TinyCanBackend);

    q->setConfigurationParameter(QCanBusDevice::BitRateKey, 500000);
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(TinyCanBackend);
|————Node:call_expression Text: Q_Q(TinyCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (TinyCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: TinyCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: q->setConfigurationParameter(QCanBusDevice::BitRateKey, 500000);
|————Node:call_expression Text: q->setConfigurationParameter(QCanBusDevice::BitRateKey, 500000)
|—————Node:field_expression Text: q->setConfigurationParameter
|——————Node:identifier Text: q
|——————Node:-> Text: ->
|——————Node:field_identifier Text: setConfigurationParameter
|—————Node:argument_list Text: (QCanBusDevice::BitRateKey, 500000)
|——————Node:( Text: (
|——————Node:qualified_identifier Text: QCanBusDevice::BitRateKey
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: BitRateKey
|——————Node:, Text: ,
|——————Node:number_literal Text: 500000
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void TinyCanBackendPrivate::startWrite()
{
    Q_Q(TinyCanBackend);

    if (!q->hasOutgoingFrames()) {
        writeNotifier->stop();
        return;
    }

    const QCanBusFrame frame = q->dequeueOutgoingFrame();
    const QByteArray payload = frame.payload();
    const qsizetype payloadSize = payload.size();

    TCanMsg message = {};

    if (Q_UNLIKELY(payloadSize > qsizetype(sizeof(message.Data.Bytes)))) {
        qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "Cannot write frame with payload size %d.", int(payloadSize));
    } else {
        message.Id = frame.frameId();
        message.Flags.Flag.Len = payloadSize;
        message.Flags.Flag.Error = (frame.frameType() == QCanBusFrame::ErrorFrame);
        message.Flags.Flag.RTR = (frame.frameType() == QCanBusFrame::RemoteRequestFrame);
        message.Flags.Flag.TxD = 1;
        message.Flags.Flag.EFF = frame.hasExtendedFrameFormat();

        const qint32 messagesToWrite = 1;
        ::memcpy(message.Data.Bytes, payload.constData(), payloadSize);
        const int ret = ::CanTransmit(channelIndex, &message, messagesToWrite);
        if (Q_UNLIKELY(ret < 0))
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::WriteError);
        else
            emit q->framesWritten(messagesToWrite);
    }

    if (q->hasOutgoingFrames() && !writeNotifier->isActive())
        writeNotifier->start();
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: TinyCanBackendPrivate::startWrite()
|———Node:qualified_identifier Text: TinyCanBackendPrivate::startWrite
|————Node:namespace_identifier Text: TinyCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: startWrite
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(TinyCanBackend);

    if (!q->hasOutgoingFrames()) {
        writeNotifier->stop();
        return;
    }

    const QCanBusFrame frame = q->dequeueOutgoingFrame();
    const QByteArray payload = frame.payload();
    const qsizetype payloadSize = payload.size();

    TCanMsg message = {};

    if (Q_UNLIKELY(payloadSize > qsizetype(sizeof(message.Data.Bytes)))) {
        qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "Cannot write frame with payload size %d.", int(payloadSize));
    } else {
        message.Id = frame.frameId();
        message.Flags.Flag.Len = payloadSize;
        message.Flags.Flag.Error = (frame.frameType() == QCanBusFrame::ErrorFrame);
        message.Flags.Flag.RTR = (frame.frameType() == QCanBusFrame::RemoteRequestFrame);
        message.Flags.Flag.TxD = 1;
        message.Flags.Flag.EFF = frame.hasExtendedFrameFormat();

        const qint32 messagesToWrite = 1;
        ::memcpy(message.Data.Bytes, payload.constData(), payloadSize);
        const int ret = ::CanTransmit(channelIndex, &message, messagesToWrite);
        if (Q_UNLIKELY(ret < 0))
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::WriteError);
        else
            emit q->framesWritten(messagesToWrite);
    }

    if (q->hasOutgoingFrames() && !writeNotifier->isActive())
        writeNotifier->start();
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(TinyCanBackend);
|————Node:call_expression Text: Q_Q(TinyCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (TinyCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: TinyCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (!q->hasOutgoingFrames()) {
        writeNotifier->stop();
        return;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (!q->hasOutgoingFrames())
|—————Node:( Text: (
|—————Node:unary_expression Text: !q->hasOutgoingFrames()
|——————Node:! Text: !
|——————Node:call_expression Text: q->hasOutgoingFrames()
|———————Node:field_expression Text: q->hasOutgoingFrames
|————————Node:identifier Text: q
|————————Node:-> Text: ->
|————————Node:field_identifier Text: hasOutgoingFrames
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        writeNotifier->stop();
        return;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: writeNotifier->stop();
|——————Node:call_expression Text: writeNotifier->stop()
|———————Node:field_expression Text: writeNotifier->stop
|————————Node:identifier Text: writeNotifier
|————————Node:-> Text: ->
|————————Node:field_identifier Text: stop
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return;
|——————Node:return Text: return
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:declaration Text: const QCanBusFrame frame = q->dequeueOutgoingFrame();
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: QCanBusFrame
|————Node:init_declarator Text: frame = q->dequeueOutgoingFrame()
|—————Node:identifier Text: frame
|—————Node:= Text: =
|—————Node:call_expression Text: q->dequeueOutgoingFrame()
|——————Node:field_expression Text: q->dequeueOutgoingFrame
|———————Node:identifier Text: q
|———————Node:-> Text: ->
|———————Node:field_identifier Text: dequeueOutgoingFrame
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: const QByteArray payload = frame.payload();
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: QByteArray
|————Node:init_declarator Text: payload = frame.payload()
|—————Node:identifier Text: payload
|—————Node:= Text: =
|—————Node:call_expression Text: frame.payload()
|——————Node:field_expression Text: frame.payload
|———————Node:identifier Text: frame
|———————Node:. Text: .
|———————Node:field_identifier Text: payload
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: const qsizetype payloadSize = payload.size();
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: qsizetype
|————Node:init_declarator Text: payloadSize = payload.size()
|—————Node:identifier Text: payloadSize
|—————Node:= Text: =
|—————Node:call_expression Text: payload.size()
|——————Node:field_expression Text: payload.size
|———————Node:identifier Text: payload
|———————Node:. Text: .
|———————Node:field_identifier Text: size
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: TCanMsg message = {};
|————Node:type_identifier Text: TCanMsg
|————Node:init_declarator Text: message = {}
|—————Node:identifier Text: message
|—————Node:= Text: =
|—————Node:initializer_list Text: {}
|——————Node:{ Text: {
|——————Node:} Text: }
|————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(payloadSize > qsizetype(sizeof(message.Data.Bytes)))) {
        qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "Cannot write frame with payload size %d.", int(payloadSize));
    } else {
        message.Id = frame.frameId();
        message.Flags.Flag.Len = payloadSize;
        message.Flags.Flag.Error = (frame.frameType() == QCanBusFrame::ErrorFrame);
        message.Flags.Flag.RTR = (frame.frameType() == QCanBusFrame::RemoteRequestFrame);
        message.Flags.Flag.TxD = 1;
        message.Flags.Flag.EFF = frame.hasExtendedFrameFormat();

        const qint32 messagesToWrite = 1;
        ::memcpy(message.Data.Bytes, payload.constData(), payloadSize);
        const int ret = ::CanTransmit(channelIndex, &message, messagesToWrite);
        if (Q_UNLIKELY(ret < 0))
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::WriteError);
        else
            emit q->framesWritten(messagesToWrite);
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(payloadSize > qsizetype(sizeof(message.Data.Bytes))))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(payloadSize > qsizetype(sizeof(message.Data.Bytes)))
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (payloadSize > qsizetype(sizeof(message.Data.Bytes)))
|———————Node:( Text: (
|———————Node:binary_expression Text: payloadSize > qsizetype(sizeof(message.Data.Bytes))
|————————Node:identifier Text: payloadSize
|————————Node:> Text: >
|————————Node:call_expression Text: qsizetype(sizeof(message.Data.Bytes))
|—————————Node:identifier Text: qsizetype
|—————————Node:argument_list Text: (sizeof(message.Data.Bytes))
|——————————Node:( Text: (
|——————————Node:sizeof_expression Text: sizeof(message.Data.Bytes)
|———————————Node:sizeof Text: sizeof
|———————————Node:parenthesized_expression Text: (message.Data.Bytes)
|————————————Node:( Text: (
|————————————Node:field_expression Text: message.Data.Bytes
|—————————————Node:field_expression Text: message.Data
|——————————————Node:identifier Text: message
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: Data
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: Bytes
|————————————Node:) Text: )
|——————————Node:) Text: )
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "Cannot write frame with payload size %d.", int(payloadSize));
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "Cannot write frame with payload size %d.", int(payloadSize));
|——————Node:call_expression Text: qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "Cannot write frame with payload size %d.", int(payloadSize))
|———————Node:identifier Text: qCWarning
|———————Node:argument_list Text: (QT_CANBUS_PLUGINS_TINYCAN, "Cannot write frame with payload size %d.", int(payloadSize))
|————————Node:( Text: (
|————————Node:identifier Text: QT_CANBUS_PLUGINS_TINYCAN
|————————Node:, Text: ,
|————————Node:string_literal Text: "Cannot write frame with payload size %d."
|—————————Node:" Text: "
|—————————Node:string_content Text: Cannot write frame with payload size %d.
|—————————Node:" Text: "
|————————Node:, Text: ,
|————————Node:call_expression Text: int(payloadSize)
|—————————Node:primitive_type Text: int
|—————————Node:argument_list Text: (payloadSize)
|——————————Node:( Text: (
|——————————Node:identifier Text: payloadSize
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else {
        message.Id = frame.frameId();
        message.Flags.Flag.Len = payloadSize;
        message.Flags.Flag.Error = (frame.frameType() == QCanBusFrame::ErrorFrame);
        message.Flags.Flag.RTR = (frame.frameType() == QCanBusFrame::RemoteRequestFrame);
        message.Flags.Flag.TxD = 1;
        message.Flags.Flag.EFF = frame.hasExtendedFrameFormat();

        const qint32 messagesToWrite = 1;
        ::memcpy(message.Data.Bytes, payload.constData(), payloadSize);
        const int ret = ::CanTransmit(channelIndex, &message, messagesToWrite);
        if (Q_UNLIKELY(ret < 0))
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::WriteError);
        else
            emit q->framesWritten(messagesToWrite);
    }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
        message.Id = frame.frameId();
        message.Flags.Flag.Len = payloadSize;
        message.Flags.Flag.Error = (frame.frameType() == QCanBusFrame::ErrorFrame);
        message.Flags.Flag.RTR = (frame.frameType() == QCanBusFrame::RemoteRequestFrame);
        message.Flags.Flag.TxD = 1;
        message.Flags.Flag.EFF = frame.hasExtendedFrameFormat();

        const qint32 messagesToWrite = 1;
        ::memcpy(message.Data.Bytes, payload.constData(), payloadSize);
        const int ret = ::CanTransmit(channelIndex, &message, messagesToWrite);
        if (Q_UNLIKELY(ret < 0))
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::WriteError);
        else
            emit q->framesWritten(messagesToWrite);
    }
|——————Node:{ Text: {
|——————Node:expression_statement Text: message.Id = frame.frameId();
|———————Node:assignment_expression Text: message.Id = frame.frameId()
|————————Node:field_expression Text: message.Id
|—————————Node:identifier Text: message
|—————————Node:. Text: .
|—————————Node:field_identifier Text: Id
|————————Node:= Text: =
|————————Node:call_expression Text: frame.frameId()
|—————————Node:field_expression Text: frame.frameId
|——————————Node:identifier Text: frame
|——————————Node:. Text: .
|——————————Node:field_identifier Text: frameId
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: message.Flags.Flag.Len = payloadSize;
|———————Node:assignment_expression Text: message.Flags.Flag.Len = payloadSize
|————————Node:field_expression Text: message.Flags.Flag.Len
|—————————Node:field_expression Text: message.Flags.Flag
|——————————Node:field_expression Text: message.Flags
|———————————Node:identifier Text: message
|———————————Node:. Text: .
|———————————Node:field_identifier Text: Flags
|——————————Node:. Text: .
|——————————Node:field_identifier Text: Flag
|—————————Node:. Text: .
|—————————Node:field_identifier Text: Len
|————————Node:= Text: =
|————————Node:identifier Text: payloadSize
|———————Node:; Text: ;
|——————Node:expression_statement Text: message.Flags.Flag.Error = (frame.frameType() == QCanBusFrame::ErrorFrame);
|———————Node:assignment_expression Text: message.Flags.Flag.Error = (frame.frameType() == QCanBusFrame::ErrorFrame)
|————————Node:field_expression Text: message.Flags.Flag.Error
|—————————Node:field_expression Text: message.Flags.Flag
|——————————Node:field_expression Text: message.Flags
|———————————Node:identifier Text: message
|———————————Node:. Text: .
|———————————Node:field_identifier Text: Flags
|——————————Node:. Text: .
|——————————Node:field_identifier Text: Flag
|—————————Node:. Text: .
|—————————Node:field_identifier Text: Error
|————————Node:= Text: =
|————————Node:parenthesized_expression Text: (frame.frameType() == QCanBusFrame::ErrorFrame)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: frame.frameType() == QCanBusFrame::ErrorFrame
|——————————Node:call_expression Text: frame.frameType()
|———————————Node:field_expression Text: frame.frameType
|————————————Node:identifier Text: frame
|————————————Node:. Text: .
|————————————Node:field_identifier Text: frameType
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:== Text: ==
|——————————Node:qualified_identifier Text: QCanBusFrame::ErrorFrame
|———————————Node:namespace_identifier Text: QCanBusFrame
|———————————Node::: Text: ::
|———————————Node:identifier Text: ErrorFrame
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: message.Flags.Flag.RTR = (frame.frameType() == QCanBusFrame::RemoteRequestFrame);
|———————Node:assignment_expression Text: message.Flags.Flag.RTR = (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
|————————Node:field_expression Text: message.Flags.Flag.RTR
|—————————Node:field_expression Text: message.Flags.Flag
|——————————Node:field_expression Text: message.Flags
|———————————Node:identifier Text: message
|———————————Node:. Text: .
|———————————Node:field_identifier Text: Flags
|——————————Node:. Text: .
|——————————Node:field_identifier Text: Flag
|—————————Node:. Text: .
|—————————Node:field_identifier Text: RTR
|————————Node:= Text: =
|————————Node:parenthesized_expression Text: (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: frame.frameType() == QCanBusFrame::RemoteRequestFrame
|——————————Node:call_expression Text: frame.frameType()
|———————————Node:field_expression Text: frame.frameType
|————————————Node:identifier Text: frame
|————————————Node:. Text: .
|————————————Node:field_identifier Text: frameType
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:== Text: ==
|——————————Node:qualified_identifier Text: QCanBusFrame::RemoteRequestFrame
|———————————Node:namespace_identifier Text: QCanBusFrame
|———————————Node::: Text: ::
|———————————Node:identifier Text: RemoteRequestFrame
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: message.Flags.Flag.TxD = 1;
|———————Node:assignment_expression Text: message.Flags.Flag.TxD = 1
|————————Node:field_expression Text: message.Flags.Flag.TxD
|—————————Node:field_expression Text: message.Flags.Flag
|——————————Node:field_expression Text: message.Flags
|———————————Node:identifier Text: message
|———————————Node:. Text: .
|———————————Node:field_identifier Text: Flags
|——————————Node:. Text: .
|——————————Node:field_identifier Text: Flag
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TxD
|————————Node:= Text: =
|————————Node:number_literal Text: 1
|———————Node:; Text: ;
|——————Node:expression_statement Text: message.Flags.Flag.EFF = frame.hasExtendedFrameFormat();
|———————Node:assignment_expression Text: message.Flags.Flag.EFF = frame.hasExtendedFrameFormat()
|————————Node:field_expression Text: message.Flags.Flag.EFF
|—————————Node:field_expression Text: message.Flags.Flag
|——————————Node:field_expression Text: message.Flags
|———————————Node:identifier Text: message
|———————————Node:. Text: .
|———————————Node:field_identifier Text: Flags
|——————————Node:. Text: .
|——————————Node:field_identifier Text: Flag
|—————————Node:. Text: .
|—————————Node:field_identifier Text: EFF
|————————Node:= Text: =
|————————Node:call_expression Text: frame.hasExtendedFrameFormat()
|—————————Node:field_expression Text: frame.hasExtendedFrameFormat
|——————————Node:identifier Text: frame
|——————————Node:. Text: .
|——————————Node:field_identifier Text: hasExtendedFrameFormat
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:declaration Text: const qint32 messagesToWrite = 1;
|———————Node:type_qualifier Text: const
|————————Node:const Text: const
|———————Node:type_identifier Text: qint32
|———————Node:init_declarator Text: messagesToWrite = 1
|————————Node:identifier Text: messagesToWrite
|————————Node:= Text: =
|————————Node:number_literal Text: 1
|———————Node:; Text: ;
|——————Node:expression_statement Text: ::memcpy(message.Data.Bytes, payload.constData(), payloadSize);
|———————Node:call_expression Text: ::memcpy(message.Data.Bytes, payload.constData(), payloadSize)
|————————Node:qualified_identifier Text: ::memcpy
|—————————Node::: Text: ::
|—————————Node:identifier Text: memcpy
|————————Node:argument_list Text: (message.Data.Bytes, payload.constData(), payloadSize)
|—————————Node:( Text: (
|—————————Node:field_expression Text: message.Data.Bytes
|——————————Node:field_expression Text: message.Data
|———————————Node:identifier Text: message
|———————————Node:. Text: .
|———————————Node:field_identifier Text: Data
|——————————Node:. Text: .
|——————————Node:field_identifier Text: Bytes
|—————————Node:, Text: ,
|—————————Node:call_expression Text: payload.constData()
|——————————Node:field_expression Text: payload.constData
|———————————Node:identifier Text: payload
|———————————Node:. Text: .
|———————————Node:field_identifier Text: constData
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:identifier Text: payloadSize
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:declaration Text: const int ret = ::CanTransmit(channelIndex, &message, messagesToWrite);
|———————Node:type_qualifier Text: const
|————————Node:const Text: const
|———————Node:primitive_type Text: int
|———————Node:init_declarator Text: ret = ::CanTransmit(channelIndex, &message, messagesToWrite)
|————————Node:identifier Text: ret
|————————Node:= Text: =
|————————Node:call_expression Text: ::CanTransmit(channelIndex, &message, messagesToWrite)
|—————————Node:qualified_identifier Text: ::CanTransmit
|——————————Node::: Text: ::
|——————————Node:identifier Text: CanTransmit
|—————————Node:argument_list Text: (channelIndex, &message, messagesToWrite)
|——————————Node:( Text: (
|——————————Node:identifier Text: channelIndex
|——————————Node:, Text: ,
|——————————Node:pointer_expression Text: &message
|———————————Node:& Text: &
|———————————Node:identifier Text: message
|——————————Node:, Text: ,
|——————————Node:identifier Text: messagesToWrite
|——————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:if_statement Text: if (Q_UNLIKELY(ret < 0))
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::WriteError);
        else
            emit q->framesWritten(messagesToWrite);
|———————Node:if Text: if
|———————Node:condition_clause Text: (Q_UNLIKELY(ret < 0))
|————————Node:( Text: (
|————————Node:call_expression Text: Q_UNLIKELY(ret < 0)
|—————————Node:identifier Text: Q_UNLIKELY
|—————————Node:argument_list Text: (ret < 0)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: ret < 0
|———————————Node:identifier Text: ret
|———————————Node:< Text: <
|———————————Node:number_literal Text: 0
|——————————Node:) Text: )
|————————Node:) Text: )
|———————Node:expression_statement Text: q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::WriteError);
|————————Node:call_expression Text: q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::WriteError)
|—————————Node:field_expression Text: q->setError
|——————————Node:identifier Text: q
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: setError
|—————————Node:argument_list Text: (systemErrorString(ret), QCanBusDevice::CanBusError::WriteError)
|——————————Node:( Text: (
|——————————Node:call_expression Text: systemErrorString(ret)
|———————————Node:identifier Text: systemErrorString
|———————————Node:argument_list Text: (ret)
|————————————Node:( Text: (
|————————————Node:identifier Text: ret
|————————————Node:) Text: )
|——————————Node:, Text: ,
|——————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::WriteError
|———————————Node:namespace_identifier Text: QCanBusDevice
|———————————Node::: Text: ::
|———————————Node:qualified_identifier Text: CanBusError::WriteError
|————————————Node:namespace_identifier Text: CanBusError
|————————————Node::: Text: ::
|————————————Node:identifier Text: WriteError
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:else_clause Text: else
            emit q->framesWritten(messagesToWrite);
|————————Node:else Text: else
|————————Node:expression_statement Text: emit q->framesWritten(messagesToWrite);
|—————————Node:call_expression Text: emit q->framesWritten(messagesToWrite)
|——————————Node:field_expression Text: emit q->framesWritten
|———————————Node:identifier Text: emit
|———————————Node:ERROR Text: q
|————————————Node:identifier Text: q
|———————————Node:-> Text: ->
|———————————Node:field_identifier Text: framesWritten
|——————————Node:argument_list Text: (messagesToWrite)
|———————————Node:( Text: (
|———————————Node:identifier Text: messagesToWrite
|———————————Node:) Text: )
|—————————Node:; Text: ;
|——————Node:} Text: }
|———Node:if_statement Text: if (q->hasOutgoingFrames() && !writeNotifier->isActive())
        writeNotifier->start();
|————Node:if Text: if
|————Node:condition_clause Text: (q->hasOutgoingFrames() && !writeNotifier->isActive())
|—————Node:( Text: (
|—————Node:binary_expression Text: q->hasOutgoingFrames() && !writeNotifier->isActive()
|——————Node:call_expression Text: q->hasOutgoingFrames()
|———————Node:field_expression Text: q->hasOutgoingFrames
|————————Node:identifier Text: q
|————————Node:-> Text: ->
|————————Node:field_identifier Text: hasOutgoingFrames
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:&& Text: &&
|——————Node:unary_expression Text: !writeNotifier->isActive()
|———————Node:! Text: !
|———————Node:call_expression Text: writeNotifier->isActive()
|————————Node:field_expression Text: writeNotifier->isActive
|—————————Node:identifier Text: writeNotifier
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: isActive
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|—————Node:) Text: )
|————Node:expression_statement Text: writeNotifier->start();
|—————Node:call_expression Text: writeNotifier->start()
|——————Node:field_expression Text: writeNotifier->start
|———————Node:identifier Text: writeNotifier
|———————Node:-> Text: ->
|———————Node:field_identifier Text: start
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: // this method is called from the different thread!
|—Node:function_definition Text: void TinyCanBackendPrivate::startRead()
{
    Q_Q(TinyCanBackend);

    QList<QCanBusFrame> newFrames;

    for (;;) {
        if (!::CanReceiveGetCount(channelIndex))
            break;

        TCanMsg message = {};

        const int messagesToRead = 1;
        const int ret = ::CanReceive(channelIndex, &message, messagesToRead);
        if (Q_UNLIKELY(ret < 0)) {
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ReadError);

            TDeviceStatus status = {};

            if (::CanGetDeviceStatus(channelIndex, &status) < 0) {
                q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ReadError);
            } else {
                if (status.CanStatus == CAN_STATUS_BUS_OFF) {
                    qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "CAN bus is in off state, trying to reset the bus.");
                    resetController();
                }
            }

            continue;
        }

        QCanBusFrame frame(message.Id, QByteArray(reinterpret_cast<char *>(message.Data.Bytes),
                                                  int(message.Flags.Flag.Len)));
        frame.setTimeStamp(QCanBusFrame::TimeStamp(message.Time.Sec, message.Time.USec));
        frame.setExtendedFrameFormat(message.Flags.Flag.EFF);

        if (message.Flags.Flag.Error)
            frame.setFrameType(QCanBusFrame::ErrorFrame);
        else if (message.Flags.Flag.RTR)
            frame.setFrameType(QCanBusFrame::RemoteRequestFrame);
        else
            frame.setFrameType(QCanBusFrame::DataFrame);

        newFrames.append(std::move(frame));
    }

    q->enqueueReceivedFrames(newFrames);
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: TinyCanBackendPrivate::startRead()
|———Node:qualified_identifier Text: TinyCanBackendPrivate::startRead
|————Node:namespace_identifier Text: TinyCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: startRead
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(TinyCanBackend);

    QList<QCanBusFrame> newFrames;

    for (;;) {
        if (!::CanReceiveGetCount(channelIndex))
            break;

        TCanMsg message = {};

        const int messagesToRead = 1;
        const int ret = ::CanReceive(channelIndex, &message, messagesToRead);
        if (Q_UNLIKELY(ret < 0)) {
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ReadError);

            TDeviceStatus status = {};

            if (::CanGetDeviceStatus(channelIndex, &status) < 0) {
                q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ReadError);
            } else {
                if (status.CanStatus == CAN_STATUS_BUS_OFF) {
                    qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "CAN bus is in off state, trying to reset the bus.");
                    resetController();
                }
            }

            continue;
        }

        QCanBusFrame frame(message.Id, QByteArray(reinterpret_cast<char *>(message.Data.Bytes),
                                                  int(message.Flags.Flag.Len)));
        frame.setTimeStamp(QCanBusFrame::TimeStamp(message.Time.Sec, message.Time.USec));
        frame.setExtendedFrameFormat(message.Flags.Flag.EFF);

        if (message.Flags.Flag.Error)
            frame.setFrameType(QCanBusFrame::ErrorFrame);
        else if (message.Flags.Flag.RTR)
            frame.setFrameType(QCanBusFrame::RemoteRequestFrame);
        else
            frame.setFrameType(QCanBusFrame::DataFrame);

        newFrames.append(std::move(frame));
    }

    q->enqueueReceivedFrames(newFrames);
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(TinyCanBackend);
|————Node:call_expression Text: Q_Q(TinyCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (TinyCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: TinyCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: QList<QCanBusFrame> newFrames;
|————Node:template_type Text: QList<QCanBusFrame>
|—————Node:type_identifier Text: QList
|—————Node:template_argument_list Text: <QCanBusFrame>
|——————Node:< Text: <
|——————Node:type_descriptor Text: QCanBusFrame
|———————Node:type_identifier Text: QCanBusFrame
|——————Node:> Text: >
|————Node:identifier Text: newFrames
|————Node:; Text: ;
|———Node:for_statement Text: for (;;) {
        if (!::CanReceiveGetCount(channelIndex))
            break;

        TCanMsg message = {};

        const int messagesToRead = 1;
        const int ret = ::CanReceive(channelIndex, &message, messagesToRead);
        if (Q_UNLIKELY(ret < 0)) {
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ReadError);

            TDeviceStatus status = {};

            if (::CanGetDeviceStatus(channelIndex, &status) < 0) {
                q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ReadError);
            } else {
                if (status.CanStatus == CAN_STATUS_BUS_OFF) {
                    qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "CAN bus is in off state, trying to reset the bus.");
                    resetController();
                }
            }

            continue;
        }

        QCanBusFrame frame(message.Id, QByteArray(reinterpret_cast<char *>(message.Data.Bytes),
                                                  int(message.Flags.Flag.Len)));
        frame.setTimeStamp(QCanBusFrame::TimeStamp(message.Time.Sec, message.Time.USec));
        frame.setExtendedFrameFormat(message.Flags.Flag.EFF);

        if (message.Flags.Flag.Error)
            frame.setFrameType(QCanBusFrame::ErrorFrame);
        else if (message.Flags.Flag.RTR)
            frame.setFrameType(QCanBusFrame::RemoteRequestFrame);
        else
            frame.setFrameType(QCanBusFrame::DataFrame);

        newFrames.append(std::move(frame));
    }
|————Node:for Text: for
|————Node:( Text: (
|————Node:; Text: ;
|————Node:; Text: ;
|————Node:) Text: )
|————Node:compound_statement Text: {
        if (!::CanReceiveGetCount(channelIndex))
            break;

        TCanMsg message = {};

        const int messagesToRead = 1;
        const int ret = ::CanReceive(channelIndex, &message, messagesToRead);
        if (Q_UNLIKELY(ret < 0)) {
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ReadError);

            TDeviceStatus status = {};

            if (::CanGetDeviceStatus(channelIndex, &status) < 0) {
                q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ReadError);
            } else {
                if (status.CanStatus == CAN_STATUS_BUS_OFF) {
                    qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "CAN bus is in off state, trying to reset the bus.");
                    resetController();
                }
            }

            continue;
        }

        QCanBusFrame frame(message.Id, QByteArray(reinterpret_cast<char *>(message.Data.Bytes),
                                                  int(message.Flags.Flag.Len)));
        frame.setTimeStamp(QCanBusFrame::TimeStamp(message.Time.Sec, message.Time.USec));
        frame.setExtendedFrameFormat(message.Flags.Flag.EFF);

        if (message.Flags.Flag.Error)
            frame.setFrameType(QCanBusFrame::ErrorFrame);
        else if (message.Flags.Flag.RTR)
            frame.setFrameType(QCanBusFrame::RemoteRequestFrame);
        else
            frame.setFrameType(QCanBusFrame::DataFrame);

        newFrames.append(std::move(frame));
    }
|—————Node:{ Text: {
|—————Node:if_statement Text: if (!::CanReceiveGetCount(channelIndex))
            break;
|——————Node:if Text: if
|——————Node:condition_clause Text: (!::CanReceiveGetCount(channelIndex))
|———————Node:( Text: (
|———————Node:unary_expression Text: !::CanReceiveGetCount(channelIndex)
|————————Node:! Text: !
|————————Node:call_expression Text: ::CanReceiveGetCount(channelIndex)
|—————————Node:qualified_identifier Text: ::CanReceiveGetCount
|——————————Node::: Text: ::
|——————————Node:identifier Text: CanReceiveGetCount
|—————————Node:argument_list Text: (channelIndex)
|——————————Node:( Text: (
|——————————Node:identifier Text: channelIndex
|——————————Node:) Text: )
|———————Node:) Text: )
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:declaration Text: TCanMsg message = {};
|——————Node:type_identifier Text: TCanMsg
|——————Node:init_declarator Text: message = {}
|———————Node:identifier Text: message
|———————Node:= Text: =
|———————Node:initializer_list Text: {}
|————————Node:{ Text: {
|————————Node:} Text: }
|——————Node:; Text: ;
|—————Node:declaration Text: const int messagesToRead = 1;
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:primitive_type Text: int
|——————Node:init_declarator Text: messagesToRead = 1
|———————Node:identifier Text: messagesToRead
|———————Node:= Text: =
|———————Node:number_literal Text: 1
|——————Node:; Text: ;
|—————Node:declaration Text: const int ret = ::CanReceive(channelIndex, &message, messagesToRead);
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:primitive_type Text: int
|——————Node:init_declarator Text: ret = ::CanReceive(channelIndex, &message, messagesToRead)
|———————Node:identifier Text: ret
|———————Node:= Text: =
|———————Node:call_expression Text: ::CanReceive(channelIndex, &message, messagesToRead)
|————————Node:qualified_identifier Text: ::CanReceive
|—————————Node::: Text: ::
|—————————Node:identifier Text: CanReceive
|————————Node:argument_list Text: (channelIndex, &message, messagesToRead)
|—————————Node:( Text: (
|—————————Node:identifier Text: channelIndex
|—————————Node:, Text: ,
|—————————Node:pointer_expression Text: &message
|——————————Node:& Text: &
|——————————Node:identifier Text: message
|—————————Node:, Text: ,
|—————————Node:identifier Text: messagesToRead
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (Q_UNLIKELY(ret < 0)) {
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ReadError);

            TDeviceStatus status = {};

            if (::CanGetDeviceStatus(channelIndex, &status) < 0) {
                q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ReadError);
            } else {
                if (status.CanStatus == CAN_STATUS_BUS_OFF) {
                    qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "CAN bus is in off state, trying to reset the bus.");
                    resetController();
                }
            }

            continue;
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (Q_UNLIKELY(ret < 0))
|———————Node:( Text: (
|———————Node:call_expression Text: Q_UNLIKELY(ret < 0)
|————————Node:identifier Text: Q_UNLIKELY
|————————Node:argument_list Text: (ret < 0)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: ret < 0
|——————————Node:identifier Text: ret
|——————————Node:< Text: <
|——————————Node:number_literal Text: 0
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ReadError);

            TDeviceStatus status = {};

            if (::CanGetDeviceStatus(channelIndex, &status) < 0) {
                q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ReadError);
            } else {
                if (status.CanStatus == CAN_STATUS_BUS_OFF) {
                    qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "CAN bus is in off state, trying to reset the bus.");
                    resetController();
                }
            }

            continue;
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ReadError);
|————————Node:call_expression Text: q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ReadError)
|—————————Node:field_expression Text: q->setError
|——————————Node:identifier Text: q
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: setError
|—————————Node:argument_list Text: (systemErrorString(ret), QCanBusDevice::CanBusError::ReadError)
|——————————Node:( Text: (
|——————————Node:call_expression Text: systemErrorString(ret)
|———————————Node:identifier Text: systemErrorString
|———————————Node:argument_list Text: (ret)
|————————————Node:( Text: (
|————————————Node:identifier Text: ret
|————————————Node:) Text: )
|——————————Node:, Text: ,
|——————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ReadError
|———————————Node:namespace_identifier Text: QCanBusDevice
|———————————Node::: Text: ::
|———————————Node:qualified_identifier Text: CanBusError::ReadError
|————————————Node:namespace_identifier Text: CanBusError
|————————————Node::: Text: ::
|————————————Node:identifier Text: ReadError
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:declaration Text: TDeviceStatus status = {};
|————————Node:type_identifier Text: TDeviceStatus
|————————Node:init_declarator Text: status = {}
|—————————Node:identifier Text: status
|—————————Node:= Text: =
|—————————Node:initializer_list Text: {}
|——————————Node:{ Text: {
|——————————Node:} Text: }
|————————Node:; Text: ;
|———————Node:if_statement Text: if (::CanGetDeviceStatus(channelIndex, &status) < 0) {
                q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ReadError);
            } else {
                if (status.CanStatus == CAN_STATUS_BUS_OFF) {
                    qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "CAN bus is in off state, trying to reset the bus.");
                    resetController();
                }
            }
|————————Node:if Text: if
|————————Node:condition_clause Text: (::CanGetDeviceStatus(channelIndex, &status) < 0)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: ::CanGetDeviceStatus(channelIndex, &status) < 0
|——————————Node:call_expression Text: ::CanGetDeviceStatus(channelIndex, &status)
|———————————Node:qualified_identifier Text: ::CanGetDeviceStatus
|————————————Node::: Text: ::
|————————————Node:identifier Text: CanGetDeviceStatus
|———————————Node:argument_list Text: (channelIndex, &status)
|————————————Node:( Text: (
|————————————Node:identifier Text: channelIndex
|————————————Node:, Text: ,
|————————————Node:pointer_expression Text: &status
|—————————————Node:& Text: &
|—————————————Node:identifier Text: status
|————————————Node:) Text: )
|——————————Node:< Text: <
|——————————Node:number_literal Text: 0
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
                q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ReadError);
            }
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ReadError);
|——————————Node:call_expression Text: q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ReadError)
|———————————Node:field_expression Text: q->setError
|————————————Node:identifier Text: q
|————————————Node:-> Text: ->
|————————————Node:field_identifier Text: setError
|———————————Node:argument_list Text: (systemErrorString(ret), QCanBusDevice::CanBusError::ReadError)
|————————————Node:( Text: (
|————————————Node:call_expression Text: systemErrorString(ret)
|—————————————Node:identifier Text: systemErrorString
|—————————————Node:argument_list Text: (ret)
|——————————————Node:( Text: (
|——————————————Node:identifier Text: ret
|——————————————Node:) Text: )
|————————————Node:, Text: ,
|————————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ReadError
|—————————————Node:namespace_identifier Text: QCanBusDevice
|—————————————Node::: Text: ::
|—————————————Node:qualified_identifier Text: CanBusError::ReadError
|——————————————Node:namespace_identifier Text: CanBusError
|——————————————Node::: Text: ::
|——————————————Node:identifier Text: ReadError
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:} Text: }
|————————Node:else_clause Text: else {
                if (status.CanStatus == CAN_STATUS_BUS_OFF) {
                    qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "CAN bus is in off state, trying to reset the bus.");
                    resetController();
                }
            }
|—————————Node:else Text: else
|—————————Node:compound_statement Text: {
                if (status.CanStatus == CAN_STATUS_BUS_OFF) {
                    qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "CAN bus is in off state, trying to reset the bus.");
                    resetController();
                }
            }
|——————————Node:{ Text: {
|——————————Node:if_statement Text: if (status.CanStatus == CAN_STATUS_BUS_OFF) {
                    qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "CAN bus is in off state, trying to reset the bus.");
                    resetController();
                }
|———————————Node:if Text: if
|———————————Node:condition_clause Text: (status.CanStatus == CAN_STATUS_BUS_OFF)
|————————————Node:( Text: (
|————————————Node:binary_expression Text: status.CanStatus == CAN_STATUS_BUS_OFF
|—————————————Node:field_expression Text: status.CanStatus
|——————————————Node:identifier Text: status
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: CanStatus
|—————————————Node:== Text: ==
|—————————————Node:identifier Text: CAN_STATUS_BUS_OFF
|————————————Node:) Text: )
|———————————Node:compound_statement Text: {
                    qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "CAN bus is in off state, trying to reset the bus.");
                    resetController();
                }
|————————————Node:{ Text: {
|————————————Node:expression_statement Text: qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "CAN bus is in off state, trying to reset the bus.");
|—————————————Node:call_expression Text: qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "CAN bus is in off state, trying to reset the bus.")
|——————————————Node:identifier Text: qCWarning
|——————————————Node:argument_list Text: (QT_CANBUS_PLUGINS_TINYCAN, "CAN bus is in off state, trying to reset the bus.")
|———————————————Node:( Text: (
|———————————————Node:identifier Text: QT_CANBUS_PLUGINS_TINYCAN
|———————————————Node:, Text: ,
|———————————————Node:string_literal Text: "CAN bus is in off state, trying to reset the bus."
|————————————————Node:" Text: "
|————————————————Node:string_content Text: CAN bus is in off state, trying to reset the bus.
|————————————————Node:" Text: "
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: resetController();
|—————————————Node:call_expression Text: resetController()
|——————————————Node:identifier Text: resetController
|——————————————Node:argument_list Text: ()
|———————————————Node:( Text: (
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:} Text: }
|——————————Node:} Text: }
|———————Node:continue_statement Text: continue;
|————————Node:continue Text: continue
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:declaration Text: QCanBusFrame frame(message.Id, QByteArray(reinterpret_cast<char *>(message.Data.Bytes),
                                                  int(message.Flags.Flag.Len)));
|——————Node:type_identifier Text: QCanBusFrame
|——————Node:init_declarator Text: frame(message.Id, QByteArray(reinterpret_cast<char *>(message.Data.Bytes),
                                                  int(message.Flags.Flag.Len)))
|———————Node:identifier Text: frame
|———————Node:argument_list Text: (message.Id, QByteArray(reinterpret_cast<char *>(message.Data.Bytes),
                                                  int(message.Flags.Flag.Len)))
|————————Node:( Text: (
|————————Node:field_expression Text: message.Id
|—————————Node:identifier Text: message
|—————————Node:. Text: .
|—————————Node:field_identifier Text: Id
|————————Node:, Text: ,
|————————Node:call_expression Text: QByteArray(reinterpret_cast<char *>(message.Data.Bytes),
                                                  int(message.Flags.Flag.Len))
|—————————Node:identifier Text: QByteArray
|—————————Node:argument_list Text: (reinterpret_cast<char *>(message.Data.Bytes),
                                                  int(message.Flags.Flag.Len))
|——————————Node:( Text: (
|——————————Node:call_expression Text: reinterpret_cast<char *>(message.Data.Bytes)
|———————————Node:template_function Text: reinterpret_cast<char *>
|————————————Node:identifier Text: reinterpret_cast
|————————————Node:template_argument_list Text: <char *>
|—————————————Node:< Text: <
|—————————————Node:type_descriptor Text: char *
|——————————————Node:primitive_type Text: char
|——————————————Node:abstract_pointer_declarator Text: *
|———————————————Node:* Text: *
|—————————————Node:> Text: >
|———————————Node:argument_list Text: (message.Data.Bytes)
|————————————Node:( Text: (
|————————————Node:field_expression Text: message.Data.Bytes
|—————————————Node:field_expression Text: message.Data
|——————————————Node:identifier Text: message
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: Data
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: Bytes
|————————————Node:) Text: )
|——————————Node:, Text: ,
|——————————Node:call_expression Text: int(message.Flags.Flag.Len)
|———————————Node:primitive_type Text: int
|———————————Node:argument_list Text: (message.Flags.Flag.Len)
|————————————Node:( Text: (
|————————————Node:field_expression Text: message.Flags.Flag.Len
|—————————————Node:field_expression Text: message.Flags.Flag
|——————————————Node:field_expression Text: message.Flags
|———————————————Node:identifier Text: message
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: Flags
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: Flag
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: Len
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: frame.setTimeStamp(QCanBusFrame::TimeStamp(message.Time.Sec, message.Time.USec));
|——————Node:call_expression Text: frame.setTimeStamp(QCanBusFrame::TimeStamp(message.Time.Sec, message.Time.USec))
|———————Node:field_expression Text: frame.setTimeStamp
|————————Node:identifier Text: frame
|————————Node:. Text: .
|————————Node:field_identifier Text: setTimeStamp
|———————Node:argument_list Text: (QCanBusFrame::TimeStamp(message.Time.Sec, message.Time.USec))
|————————Node:( Text: (
|————————Node:call_expression Text: QCanBusFrame::TimeStamp(message.Time.Sec, message.Time.USec)
|—————————Node:qualified_identifier Text: QCanBusFrame::TimeStamp
|——————————Node:namespace_identifier Text: QCanBusFrame
|——————————Node::: Text: ::
|——————————Node:identifier Text: TimeStamp
|—————————Node:argument_list Text: (message.Time.Sec, message.Time.USec)
|——————————Node:( Text: (
|——————————Node:field_expression Text: message.Time.Sec
|———————————Node:field_expression Text: message.Time
|————————————Node:identifier Text: message
|————————————Node:. Text: .
|————————————Node:field_identifier Text: Time
|———————————Node:. Text: .
|———————————Node:field_identifier Text: Sec
|——————————Node:, Text: ,
|——————————Node:field_expression Text: message.Time.USec
|———————————Node:field_expression Text: message.Time
|————————————Node:identifier Text: message
|————————————Node:. Text: .
|————————————Node:field_identifier Text: Time
|———————————Node:. Text: .
|———————————Node:field_identifier Text: USec
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: frame.setExtendedFrameFormat(message.Flags.Flag.EFF);
|——————Node:call_expression Text: frame.setExtendedFrameFormat(message.Flags.Flag.EFF)
|———————Node:field_expression Text: frame.setExtendedFrameFormat
|————————Node:identifier Text: frame
|————————Node:. Text: .
|————————Node:field_identifier Text: setExtendedFrameFormat
|———————Node:argument_list Text: (message.Flags.Flag.EFF)
|————————Node:( Text: (
|————————Node:field_expression Text: message.Flags.Flag.EFF
|—————————Node:field_expression Text: message.Flags.Flag
|——————————Node:field_expression Text: message.Flags
|———————————Node:identifier Text: message
|———————————Node:. Text: .
|———————————Node:field_identifier Text: Flags
|——————————Node:. Text: .
|——————————Node:field_identifier Text: Flag
|—————————Node:. Text: .
|—————————Node:field_identifier Text: EFF
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (message.Flags.Flag.Error)
            frame.setFrameType(QCanBusFrame::ErrorFrame);
        else if (message.Flags.Flag.RTR)
            frame.setFrameType(QCanBusFrame::RemoteRequestFrame);
        else
            frame.setFrameType(QCanBusFrame::DataFrame);
|——————Node:if Text: if
|——————Node:condition_clause Text: (message.Flags.Flag.Error)
|———————Node:( Text: (
|———————Node:field_expression Text: message.Flags.Flag.Error
|————————Node:field_expression Text: message.Flags.Flag
|—————————Node:field_expression Text: message.Flags
|——————————Node:identifier Text: message
|——————————Node:. Text: .
|——————————Node:field_identifier Text: Flags
|—————————Node:. Text: .
|—————————Node:field_identifier Text: Flag
|————————Node:. Text: .
|————————Node:field_identifier Text: Error
|———————Node:) Text: )
|——————Node:expression_statement Text: frame.setFrameType(QCanBusFrame::ErrorFrame);
|———————Node:call_expression Text: frame.setFrameType(QCanBusFrame::ErrorFrame)
|————————Node:field_expression Text: frame.setFrameType
|—————————Node:identifier Text: frame
|—————————Node:. Text: .
|—————————Node:field_identifier Text: setFrameType
|————————Node:argument_list Text: (QCanBusFrame::ErrorFrame)
|—————————Node:( Text: (
|—————————Node:qualified_identifier Text: QCanBusFrame::ErrorFrame
|——————————Node:namespace_identifier Text: QCanBusFrame
|——————————Node::: Text: ::
|——————————Node:identifier Text: ErrorFrame
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:else_clause Text: else if (message.Flags.Flag.RTR)
            frame.setFrameType(QCanBusFrame::RemoteRequestFrame);
        else
            frame.setFrameType(QCanBusFrame::DataFrame);
|———————Node:else Text: else
|———————Node:if_statement Text: if (message.Flags.Flag.RTR)
            frame.setFrameType(QCanBusFrame::RemoteRequestFrame);
        else
            frame.setFrameType(QCanBusFrame::DataFrame);
|————————Node:if Text: if
|————————Node:condition_clause Text: (message.Flags.Flag.RTR)
|—————————Node:( Text: (
|—————————Node:field_expression Text: message.Flags.Flag.RTR
|——————————Node:field_expression Text: message.Flags.Flag
|———————————Node:field_expression Text: message.Flags
|————————————Node:identifier Text: message
|————————————Node:. Text: .
|————————————Node:field_identifier Text: Flags
|———————————Node:. Text: .
|———————————Node:field_identifier Text: Flag
|——————————Node:. Text: .
|——————————Node:field_identifier Text: RTR
|—————————Node:) Text: )
|————————Node:expression_statement Text: frame.setFrameType(QCanBusFrame::RemoteRequestFrame);
|—————————Node:call_expression Text: frame.setFrameType(QCanBusFrame::RemoteRequestFrame)
|——————————Node:field_expression Text: frame.setFrameType
|———————————Node:identifier Text: frame
|———————————Node:. Text: .
|———————————Node:field_identifier Text: setFrameType
|——————————Node:argument_list Text: (QCanBusFrame::RemoteRequestFrame)
|———————————Node:( Text: (
|———————————Node:qualified_identifier Text: QCanBusFrame::RemoteRequestFrame
|————————————Node:namespace_identifier Text: QCanBusFrame
|————————————Node::: Text: ::
|————————————Node:identifier Text: RemoteRequestFrame
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:else_clause Text: else
            frame.setFrameType(QCanBusFrame::DataFrame);
|—————————Node:else Text: else
|—————————Node:expression_statement Text: frame.setFrameType(QCanBusFrame::DataFrame);
|——————————Node:call_expression Text: frame.setFrameType(QCanBusFrame::DataFrame)
|———————————Node:field_expression Text: frame.setFrameType
|————————————Node:identifier Text: frame
|————————————Node:. Text: .
|————————————Node:field_identifier Text: setFrameType
|———————————Node:argument_list Text: (QCanBusFrame::DataFrame)
|————————————Node:( Text: (
|————————————Node:qualified_identifier Text: QCanBusFrame::DataFrame
|—————————————Node:namespace_identifier Text: QCanBusFrame
|—————————————Node::: Text: ::
|—————————————Node:identifier Text: DataFrame
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————Node:expression_statement Text: newFrames.append(std::move(frame));
|——————Node:call_expression Text: newFrames.append(std::move(frame))
|———————Node:field_expression Text: newFrames.append
|————————Node:identifier Text: newFrames
|————————Node:. Text: .
|————————Node:field_identifier Text: append
|———————Node:argument_list Text: (std::move(frame))
|————————Node:( Text: (
|————————Node:call_expression Text: std::move(frame)
|—————————Node:qualified_identifier Text: std::move
|——————————Node:namespace_identifier Text: std
|——————————Node::: Text: ::
|——————————Node:identifier Text: move
|—————————Node:argument_list Text: (frame)
|——————————Node:( Text: (
|——————————Node:identifier Text: frame
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: q->enqueueReceivedFrames(newFrames);
|————Node:call_expression Text: q->enqueueReceivedFrames(newFrames)
|—————Node:field_expression Text: q->enqueueReceivedFrames
|——————Node:identifier Text: q
|——————Node:-> Text: ->
|——————Node:field_identifier Text: enqueueReceivedFrames
|—————Node:argument_list Text: (newFrames)
|——————Node:( Text: (
|——————Node:identifier Text: newFrames
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void TinyCanBackendPrivate::startupDriver()
{
    Q_Q(TinyCanBackend);

    if (driverRefCount == 0) {
        const int ret = ::CanInitDriver(nullptr);
        if (Q_UNLIKELY(ret < 0)) {
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError);
            return;
        }

        ::CanSetRxEventCallback(&canRxEventCallback);
        ::CanSetEvents(EVENT_ENABLE_RX_MESSAGES);

    } else if (Q_UNLIKELY(driverRefCount < 0)) {
        qCCritical(QT_CANBUS_PLUGINS_TINYCAN, "Wrong driver reference counter: %d",
                   driverRefCount);
        return;
    }

    ++driverRefCount;
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: TinyCanBackendPrivate::startupDriver()
|———Node:qualified_identifier Text: TinyCanBackendPrivate::startupDriver
|————Node:namespace_identifier Text: TinyCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: startupDriver
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(TinyCanBackend);

    if (driverRefCount == 0) {
        const int ret = ::CanInitDriver(nullptr);
        if (Q_UNLIKELY(ret < 0)) {
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError);
            return;
        }

        ::CanSetRxEventCallback(&canRxEventCallback);
        ::CanSetEvents(EVENT_ENABLE_RX_MESSAGES);

    } else if (Q_UNLIKELY(driverRefCount < 0)) {
        qCCritical(QT_CANBUS_PLUGINS_TINYCAN, "Wrong driver reference counter: %d",
                   driverRefCount);
        return;
    }

    ++driverRefCount;
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(TinyCanBackend);
|————Node:call_expression Text: Q_Q(TinyCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (TinyCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: TinyCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (driverRefCount == 0) {
        const int ret = ::CanInitDriver(nullptr);
        if (Q_UNLIKELY(ret < 0)) {
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError);
            return;
        }

        ::CanSetRxEventCallback(&canRxEventCallback);
        ::CanSetEvents(EVENT_ENABLE_RX_MESSAGES);

    } else if (Q_UNLIKELY(driverRefCount < 0)) {
        qCCritical(QT_CANBUS_PLUGINS_TINYCAN, "Wrong driver reference counter: %d",
                   driverRefCount);
        return;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (driverRefCount == 0)
|—————Node:( Text: (
|—————Node:binary_expression Text: driverRefCount == 0
|——————Node:identifier Text: driverRefCount
|——————Node:== Text: ==
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {
        const int ret = ::CanInitDriver(nullptr);
        if (Q_UNLIKELY(ret < 0)) {
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError);
            return;
        }

        ::CanSetRxEventCallback(&canRxEventCallback);
        ::CanSetEvents(EVENT_ENABLE_RX_MESSAGES);

    }
|—————Node:{ Text: {
|—————Node:declaration Text: const int ret = ::CanInitDriver(nullptr);
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:primitive_type Text: int
|——————Node:init_declarator Text: ret = ::CanInitDriver(nullptr)
|———————Node:identifier Text: ret
|———————Node:= Text: =
|———————Node:call_expression Text: ::CanInitDriver(nullptr)
|————————Node:qualified_identifier Text: ::CanInitDriver
|—————————Node::: Text: ::
|—————————Node:identifier Text: CanInitDriver
|————————Node:argument_list Text: (nullptr)
|—————————Node:( Text: (
|—————————Node:null Text: nullptr
|——————————Node:nullptr Text: nullptr
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (Q_UNLIKELY(ret < 0)) {
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError);
            return;
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (Q_UNLIKELY(ret < 0))
|———————Node:( Text: (
|———————Node:call_expression Text: Q_UNLIKELY(ret < 0)
|————————Node:identifier Text: Q_UNLIKELY
|————————Node:argument_list Text: (ret < 0)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: ret < 0
|——————————Node:identifier Text: ret
|——————————Node:< Text: <
|——————————Node:number_literal Text: 0
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError);
            return;
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError);
|————————Node:call_expression Text: q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError)
|—————————Node:field_expression Text: q->setError
|——————————Node:identifier Text: q
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: setError
|—————————Node:argument_list Text: (systemErrorString(ret), QCanBusDevice::CanBusError::ConnectionError)
|——————————Node:( Text: (
|——————————Node:call_expression Text: systemErrorString(ret)
|———————————Node:identifier Text: systemErrorString
|———————————Node:argument_list Text: (ret)
|————————————Node:( Text: (
|————————————Node:identifier Text: ret
|————————————Node:) Text: )
|——————————Node:, Text: ,
|——————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ConnectionError
|———————————Node:namespace_identifier Text: QCanBusDevice
|———————————Node::: Text: ::
|———————————Node:qualified_identifier Text: CanBusError::ConnectionError
|————————————Node:namespace_identifier Text: CanBusError
|————————————Node::: Text: ::
|————————————Node:identifier Text: ConnectionError
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:return_statement Text: return;
|————————Node:return Text: return
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:expression_statement Text: ::CanSetRxEventCallback(&canRxEventCallback);
|——————Node:call_expression Text: ::CanSetRxEventCallback(&canRxEventCallback)
|———————Node:qualified_identifier Text: ::CanSetRxEventCallback
|————————Node::: Text: ::
|————————Node:identifier Text: CanSetRxEventCallback
|———————Node:argument_list Text: (&canRxEventCallback)
|————————Node:( Text: (
|————————Node:pointer_expression Text: &canRxEventCallback
|—————————Node:& Text: &
|—————————Node:identifier Text: canRxEventCallback
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: ::CanSetEvents(EVENT_ENABLE_RX_MESSAGES);
|——————Node:call_expression Text: ::CanSetEvents(EVENT_ENABLE_RX_MESSAGES)
|———————Node:qualified_identifier Text: ::CanSetEvents
|————————Node::: Text: ::
|————————Node:identifier Text: CanSetEvents
|———————Node:argument_list Text: (EVENT_ENABLE_RX_MESSAGES)
|————————Node:( Text: (
|————————Node:identifier Text: EVENT_ENABLE_RX_MESSAGES
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else if (Q_UNLIKELY(driverRefCount < 0)) {
        qCCritical(QT_CANBUS_PLUGINS_TINYCAN, "Wrong driver reference counter: %d",
                   driverRefCount);
        return;
    }
|—————Node:else Text: else
|—————Node:if_statement Text: if (Q_UNLIKELY(driverRefCount < 0)) {
        qCCritical(QT_CANBUS_PLUGINS_TINYCAN, "Wrong driver reference counter: %d",
                   driverRefCount);
        return;
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: (Q_UNLIKELY(driverRefCount < 0))
|———————Node:( Text: (
|———————Node:call_expression Text: Q_UNLIKELY(driverRefCount < 0)
|————————Node:identifier Text: Q_UNLIKELY
|————————Node:argument_list Text: (driverRefCount < 0)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: driverRefCount < 0
|——————————Node:identifier Text: driverRefCount
|——————————Node:< Text: <
|——————————Node:number_literal Text: 0
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {
        qCCritical(QT_CANBUS_PLUGINS_TINYCAN, "Wrong driver reference counter: %d",
                   driverRefCount);
        return;
    }
|———————Node:{ Text: {
|———————Node:expression_statement Text: qCCritical(QT_CANBUS_PLUGINS_TINYCAN, "Wrong driver reference counter: %d",
                   driverRefCount);
|————————Node:call_expression Text: qCCritical(QT_CANBUS_PLUGINS_TINYCAN, "Wrong driver reference counter: %d",
                   driverRefCount)
|—————————Node:identifier Text: qCCritical
|—————————Node:argument_list Text: (QT_CANBUS_PLUGINS_TINYCAN, "Wrong driver reference counter: %d",
                   driverRefCount)
|——————————Node:( Text: (
|——————————Node:identifier Text: QT_CANBUS_PLUGINS_TINYCAN
|——————————Node:, Text: ,
|——————————Node:string_literal Text: "Wrong driver reference counter: %d"
|———————————Node:" Text: "
|———————————Node:string_content Text: Wrong driver reference counter: %d
|———————————Node:" Text: "
|——————————Node:, Text: ,
|——————————Node:identifier Text: driverRefCount
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:return_statement Text: return;
|————————Node:return Text: return
|————————Node:; Text: ;
|———————Node:} Text: }
|———Node:expression_statement Text: ++driverRefCount;
|————Node:update_expression Text: ++driverRefCount
|—————Node:++ Text: ++
|—————Node:identifier Text: driverRefCount
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void TinyCanBackendPrivate::cleanupDriver()
{
    --driverRefCount;

    if (Q_UNLIKELY(driverRefCount < 0)) {
        qCCritical(QT_CANBUS_PLUGINS_TINYCAN, "Wrong driver reference counter: %d",
                   driverRefCount);
        driverRefCount = 0;
    } else if (driverRefCount == 0) {
        ::CanSetEvents(EVENT_DISABLE_ALL);
        ::CanDownDriver();
    }
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: TinyCanBackendPrivate::cleanupDriver()
|———Node:qualified_identifier Text: TinyCanBackendPrivate::cleanupDriver
|————Node:namespace_identifier Text: TinyCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: cleanupDriver
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    --driverRefCount;

    if (Q_UNLIKELY(driverRefCount < 0)) {
        qCCritical(QT_CANBUS_PLUGINS_TINYCAN, "Wrong driver reference counter: %d",
                   driverRefCount);
        driverRefCount = 0;
    } else if (driverRefCount == 0) {
        ::CanSetEvents(EVENT_DISABLE_ALL);
        ::CanDownDriver();
    }
}
|———Node:{ Text: {
|———Node:expression_statement Text: --driverRefCount;
|————Node:update_expression Text: --driverRefCount
|—————Node:-- Text: --
|—————Node:identifier Text: driverRefCount
|————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(driverRefCount < 0)) {
        qCCritical(QT_CANBUS_PLUGINS_TINYCAN, "Wrong driver reference counter: %d",
                   driverRefCount);
        driverRefCount = 0;
    } else if (driverRefCount == 0) {
        ::CanSetEvents(EVENT_DISABLE_ALL);
        ::CanDownDriver();
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(driverRefCount < 0))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(driverRefCount < 0)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (driverRefCount < 0)
|———————Node:( Text: (
|———————Node:binary_expression Text: driverRefCount < 0
|————————Node:identifier Text: driverRefCount
|————————Node:< Text: <
|————————Node:number_literal Text: 0
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        qCCritical(QT_CANBUS_PLUGINS_TINYCAN, "Wrong driver reference counter: %d",
                   driverRefCount);
        driverRefCount = 0;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: qCCritical(QT_CANBUS_PLUGINS_TINYCAN, "Wrong driver reference counter: %d",
                   driverRefCount);
|——————Node:call_expression Text: qCCritical(QT_CANBUS_PLUGINS_TINYCAN, "Wrong driver reference counter: %d",
                   driverRefCount)
|———————Node:identifier Text: qCCritical
|———————Node:argument_list Text: (QT_CANBUS_PLUGINS_TINYCAN, "Wrong driver reference counter: %d",
                   driverRefCount)
|————————Node:( Text: (
|————————Node:identifier Text: QT_CANBUS_PLUGINS_TINYCAN
|————————Node:, Text: ,
|————————Node:string_literal Text: "Wrong driver reference counter: %d"
|—————————Node:" Text: "
|—————————Node:string_content Text: Wrong driver reference counter: %d
|—————————Node:" Text: "
|————————Node:, Text: ,
|————————Node:identifier Text: driverRefCount
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: driverRefCount = 0;
|——————Node:assignment_expression Text: driverRefCount = 0
|———————Node:identifier Text: driverRefCount
|———————Node:= Text: =
|———————Node:number_literal Text: 0
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else if (driverRefCount == 0) {
        ::CanSetEvents(EVENT_DISABLE_ALL);
        ::CanDownDriver();
    }
|—————Node:else Text: else
|—————Node:if_statement Text: if (driverRefCount == 0) {
        ::CanSetEvents(EVENT_DISABLE_ALL);
        ::CanDownDriver();
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: (driverRefCount == 0)
|———————Node:( Text: (
|———————Node:binary_expression Text: driverRefCount == 0
|————————Node:identifier Text: driverRefCount
|————————Node:== Text: ==
|————————Node:number_literal Text: 0
|———————Node:) Text: )
|——————Node:compound_statement Text: {
        ::CanSetEvents(EVENT_DISABLE_ALL);
        ::CanDownDriver();
    }
|———————Node:{ Text: {
|———————Node:expression_statement Text: ::CanSetEvents(EVENT_DISABLE_ALL);
|————————Node:call_expression Text: ::CanSetEvents(EVENT_DISABLE_ALL)
|—————————Node:qualified_identifier Text: ::CanSetEvents
|——————————Node::: Text: ::
|——————————Node:identifier Text: CanSetEvents
|—————————Node:argument_list Text: (EVENT_DISABLE_ALL)
|——————————Node:( Text: (
|——————————Node:identifier Text: EVENT_DISABLE_ALL
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: ::CanDownDriver();
|————————Node:call_expression Text: ::CanDownDriver()
|—————————Node:qualified_identifier Text: ::CanDownDriver
|——————————Node::: Text: ::
|——————————Node:identifier Text: CanDownDriver
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|———Node:} Text: }
|—Node:function_definition Text: void TinyCanBackendPrivate::resetController()
{
    Q_Q(TinyCanBackend);
    qint32 ret = ::CanSetMode(channelIndex, OP_CAN_RESET, CAN_CMD_NONE);
    if (Q_UNLIKELY(ret < 0)) {
        const QString errorString = systemErrorString(ret);
        qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "Cannot perform hardware reset: %ls",
                  qUtf16Printable(errorString));
        q->setError(errorString, QCanBusDevice::CanBusError::ConfigurationError);
    }
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: TinyCanBackendPrivate::resetController()
|———Node:qualified_identifier Text: TinyCanBackendPrivate::resetController
|————Node:namespace_identifier Text: TinyCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: resetController
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(TinyCanBackend);
    qint32 ret = ::CanSetMode(channelIndex, OP_CAN_RESET, CAN_CMD_NONE);
    if (Q_UNLIKELY(ret < 0)) {
        const QString errorString = systemErrorString(ret);
        qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "Cannot perform hardware reset: %ls",
                  qUtf16Printable(errorString));
        q->setError(errorString, QCanBusDevice::CanBusError::ConfigurationError);
    }
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(TinyCanBackend);
|————Node:call_expression Text: Q_Q(TinyCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (TinyCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: TinyCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: qint32 ret = ::CanSetMode(channelIndex, OP_CAN_RESET, CAN_CMD_NONE);
|————Node:type_identifier Text: qint32
|————Node:init_declarator Text: ret = ::CanSetMode(channelIndex, OP_CAN_RESET, CAN_CMD_NONE)
|—————Node:identifier Text: ret
|—————Node:= Text: =
|—————Node:call_expression Text: ::CanSetMode(channelIndex, OP_CAN_RESET, CAN_CMD_NONE)
|——————Node:qualified_identifier Text: ::CanSetMode
|———————Node::: Text: ::
|———————Node:identifier Text: CanSetMode
|——————Node:argument_list Text: (channelIndex, OP_CAN_RESET, CAN_CMD_NONE)
|———————Node:( Text: (
|———————Node:identifier Text: channelIndex
|———————Node:, Text: ,
|———————Node:identifier Text: OP_CAN_RESET
|———————Node:, Text: ,
|———————Node:identifier Text: CAN_CMD_NONE
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(ret < 0)) {
        const QString errorString = systemErrorString(ret);
        qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "Cannot perform hardware reset: %ls",
                  qUtf16Printable(errorString));
        q->setError(errorString, QCanBusDevice::CanBusError::ConfigurationError);
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(ret < 0))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(ret < 0)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (ret < 0)
|———————Node:( Text: (
|———————Node:binary_expression Text: ret < 0
|————————Node:identifier Text: ret
|————————Node:< Text: <
|————————Node:number_literal Text: 0
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        const QString errorString = systemErrorString(ret);
        qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "Cannot perform hardware reset: %ls",
                  qUtf16Printable(errorString));
        q->setError(errorString, QCanBusDevice::CanBusError::ConfigurationError);
    }
|—————Node:{ Text: {
|—————Node:declaration Text: const QString errorString = systemErrorString(ret);
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:type_identifier Text: QString
|——————Node:init_declarator Text: errorString = systemErrorString(ret)
|———————Node:identifier Text: errorString
|———————Node:= Text: =
|———————Node:call_expression Text: systemErrorString(ret)
|————————Node:identifier Text: systemErrorString
|————————Node:argument_list Text: (ret)
|—————————Node:( Text: (
|—————————Node:identifier Text: ret
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "Cannot perform hardware reset: %ls",
                  qUtf16Printable(errorString));
|——————Node:call_expression Text: qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "Cannot perform hardware reset: %ls",
                  qUtf16Printable(errorString))
|———————Node:identifier Text: qCWarning
|———————Node:argument_list Text: (QT_CANBUS_PLUGINS_TINYCAN, "Cannot perform hardware reset: %ls",
                  qUtf16Printable(errorString))
|————————Node:( Text: (
|————————Node:identifier Text: QT_CANBUS_PLUGINS_TINYCAN
|————————Node:, Text: ,
|————————Node:string_literal Text: "Cannot perform hardware reset: %ls"
|—————————Node:" Text: "
|—————————Node:string_content Text: Cannot perform hardware reset: %ls
|—————————Node:" Text: "
|————————Node:, Text: ,
|————————Node:call_expression Text: qUtf16Printable(errorString)
|—————————Node:identifier Text: qUtf16Printable
|—————————Node:argument_list Text: (errorString)
|——————————Node:( Text: (
|——————————Node:identifier Text: errorString
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: q->setError(errorString, QCanBusDevice::CanBusError::ConfigurationError);
|——————Node:call_expression Text: q->setError(errorString, QCanBusDevice::CanBusError::ConfigurationError)
|———————Node:field_expression Text: q->setError
|————————Node:identifier Text: q
|————————Node:-> Text: ->
|————————Node:field_identifier Text: setError
|———————Node:argument_list Text: (errorString, QCanBusDevice::CanBusError::ConfigurationError)
|————————Node:( Text: (
|————————Node:identifier Text: errorString
|————————Node:, Text: ,
|————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ConfigurationError
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:qualified_identifier Text: CanBusError::ConfigurationError
|——————————Node:namespace_identifier Text: CanBusError
|——————————Node::: Text: ::
|——————————Node:identifier Text: ConfigurationError
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:} Text: }
|—Node:function_definition Text: bool TinyCanBackendPrivate::setBitRate(int bitrate)
{
    Q_Q(TinyCanBackend);

    const int bitrateCode = bitrateCodeFromBitrate(bitrate);
    if (Q_UNLIKELY(bitrateCode == -1)) {
        q->setError(TinyCanBackend::tr("Unsupported bitrate value"),
                    QCanBusDevice::ConfigurationError);
        return false;
    }

    if (isOpen) {
        const int ret = ::CanSetSpeed(channelIndex, bitrateCode);
        if (Q_UNLIKELY(ret < 0)) {
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConfigurationError);
            return false;
        }
    }

    return true;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: TinyCanBackendPrivate::setBitRate(int bitrate)
|———Node:qualified_identifier Text: TinyCanBackendPrivate::setBitRate
|————Node:namespace_identifier Text: TinyCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: setBitRate
|———Node:parameter_list Text: (int bitrate)
|————Node:( Text: (
|————Node:parameter_declaration Text: int bitrate
|—————Node:primitive_type Text: int
|—————Node:identifier Text: bitrate
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(TinyCanBackend);

    const int bitrateCode = bitrateCodeFromBitrate(bitrate);
    if (Q_UNLIKELY(bitrateCode == -1)) {
        q->setError(TinyCanBackend::tr("Unsupported bitrate value"),
                    QCanBusDevice::ConfigurationError);
        return false;
    }

    if (isOpen) {
        const int ret = ::CanSetSpeed(channelIndex, bitrateCode);
        if (Q_UNLIKELY(ret < 0)) {
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConfigurationError);
            return false;
        }
    }

    return true;
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(TinyCanBackend);
|————Node:call_expression Text: Q_Q(TinyCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (TinyCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: TinyCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: const int bitrateCode = bitrateCodeFromBitrate(bitrate);
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: int
|————Node:init_declarator Text: bitrateCode = bitrateCodeFromBitrate(bitrate)
|—————Node:identifier Text: bitrateCode
|—————Node:= Text: =
|—————Node:call_expression Text: bitrateCodeFromBitrate(bitrate)
|——————Node:identifier Text: bitrateCodeFromBitrate
|——————Node:argument_list Text: (bitrate)
|———————Node:( Text: (
|———————Node:identifier Text: bitrate
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(bitrateCode == -1)) {
        q->setError(TinyCanBackend::tr("Unsupported bitrate value"),
                    QCanBusDevice::ConfigurationError);
        return false;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(bitrateCode == -1))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(bitrateCode == -1)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (bitrateCode == -1)
|———————Node:( Text: (
|———————Node:binary_expression Text: bitrateCode == -1
|————————Node:identifier Text: bitrateCode
|————————Node:== Text: ==
|————————Node:number_literal Text: -1
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        q->setError(TinyCanBackend::tr("Unsupported bitrate value"),
                    QCanBusDevice::ConfigurationError);
        return false;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: q->setError(TinyCanBackend::tr("Unsupported bitrate value"),
                    QCanBusDevice::ConfigurationError);
|——————Node:call_expression Text: q->setError(TinyCanBackend::tr("Unsupported bitrate value"),
                    QCanBusDevice::ConfigurationError)
|———————Node:field_expression Text: q->setError
|————————Node:identifier Text: q
|————————Node:-> Text: ->
|————————Node:field_identifier Text: setError
|———————Node:argument_list Text: (TinyCanBackend::tr("Unsupported bitrate value"),
                    QCanBusDevice::ConfigurationError)
|————————Node:( Text: (
|————————Node:call_expression Text: TinyCanBackend::tr("Unsupported bitrate value")
|—————————Node:qualified_identifier Text: TinyCanBackend::tr
|——————————Node:namespace_identifier Text: TinyCanBackend
|——————————Node::: Text: ::
|——————————Node:identifier Text: tr
|—————————Node:argument_list Text: ("Unsupported bitrate value")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "Unsupported bitrate value"
|———————————Node:" Text: "
|———————————Node:string_content Text: Unsupported bitrate value
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:qualified_identifier Text: QCanBusDevice::ConfigurationError
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:identifier Text: ConfigurationError
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return false;
|——————Node:return Text: return
|——————Node:false Text: false
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:if_statement Text: if (isOpen) {
        const int ret = ::CanSetSpeed(channelIndex, bitrateCode);
        if (Q_UNLIKELY(ret < 0)) {
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConfigurationError);
            return false;
        }
    }
|————Node:if Text: if
|————Node:condition_clause Text: (isOpen)
|—————Node:( Text: (
|—————Node:identifier Text: isOpen
|—————Node:) Text: )
|————Node:compound_statement Text: {
        const int ret = ::CanSetSpeed(channelIndex, bitrateCode);
        if (Q_UNLIKELY(ret < 0)) {
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConfigurationError);
            return false;
        }
    }
|—————Node:{ Text: {
|—————Node:declaration Text: const int ret = ::CanSetSpeed(channelIndex, bitrateCode);
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:primitive_type Text: int
|——————Node:init_declarator Text: ret = ::CanSetSpeed(channelIndex, bitrateCode)
|———————Node:identifier Text: ret
|———————Node:= Text: =
|———————Node:call_expression Text: ::CanSetSpeed(channelIndex, bitrateCode)
|————————Node:qualified_identifier Text: ::CanSetSpeed
|—————————Node::: Text: ::
|—————————Node:identifier Text: CanSetSpeed
|————————Node:argument_list Text: (channelIndex, bitrateCode)
|—————————Node:( Text: (
|—————————Node:identifier Text: channelIndex
|—————————Node:, Text: ,
|—————————Node:identifier Text: bitrateCode
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (Q_UNLIKELY(ret < 0)) {
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConfigurationError);
            return false;
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (Q_UNLIKELY(ret < 0))
|———————Node:( Text: (
|———————Node:call_expression Text: Q_UNLIKELY(ret < 0)
|————————Node:identifier Text: Q_UNLIKELY
|————————Node:argument_list Text: (ret < 0)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: ret < 0
|——————————Node:identifier Text: ret
|——————————Node:< Text: <
|——————————Node:number_literal Text: 0
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConfigurationError);
            return false;
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConfigurationError);
|————————Node:call_expression Text: q->setError(systemErrorString(ret), QCanBusDevice::CanBusError::ConfigurationError)
|—————————Node:field_expression Text: q->setError
|——————————Node:identifier Text: q
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: setError
|—————————Node:argument_list Text: (systemErrorString(ret), QCanBusDevice::CanBusError::ConfigurationError)
|——————————Node:( Text: (
|——————————Node:call_expression Text: systemErrorString(ret)
|———————————Node:identifier Text: systemErrorString
|———————————Node:argument_list Text: (ret)
|————————————Node:( Text: (
|————————————Node:identifier Text: ret
|————————————Node:) Text: )
|——————————Node:, Text: ,
|——————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ConfigurationError
|———————————Node:namespace_identifier Text: QCanBusDevice
|———————————Node::: Text: ::
|———————————Node:qualified_identifier Text: CanBusError::ConfigurationError
|————————————Node:namespace_identifier Text: CanBusError
|————————————Node::: Text: ::
|————————————Node:identifier Text: ConfigurationError
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:return_statement Text: return false;
|————————Node:return Text: return
|————————Node:false Text: false
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:return_statement Text: return true;
|————Node:return Text: return
|————Node:true Text: true
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: TinyCanBackend::TinyCanBackend(const QString &name, QObject *parent)
    : QCanBusDevice(parent)
    , d_ptr(new TinyCanBackendPrivate(this))
{
    Q_D(TinyCanBackend);

    d->setupChannel(name);
    d->setupDefaultConfigurations();

    std::function<void()> f = std::bind(&TinyCanBackend::resetController, this);
    setResetControllerFunction(f);
}
|——Node:function_declarator Text: TinyCanBackend::TinyCanBackend(const QString &name, QObject *parent)
|———Node:qualified_identifier Text: TinyCanBackend::TinyCanBackend
|————Node:namespace_identifier Text: TinyCanBackend
|————Node::: Text: ::
|————Node:identifier Text: TinyCanBackend
|———Node:parameter_list Text: (const QString &name, QObject *parent)
|————Node:( Text: (
|————Node:parameter_declaration Text: const QString &name
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: QString
|—————Node:reference_declarator Text: &name
|——————Node:& Text: &
|——————Node:identifier Text: name
|————Node:, Text: ,
|————Node:parameter_declaration Text: QObject *parent
|—————Node:type_identifier Text: QObject
|—————Node:pointer_declarator Text: *parent
|——————Node:* Text: *
|——————Node:identifier Text: parent
|————Node:) Text: )
|——Node:field_initializer_list Text: : QCanBusDevice(parent)
    , d_ptr(new TinyCanBackendPrivate(this))
|———Node:: Text: :
|———Node:field_initializer Text: QCanBusDevice(parent)
|————Node:field_identifier Text: QCanBusDevice
|————Node:argument_list Text: (parent)
|—————Node:( Text: (
|—————Node:identifier Text: parent
|—————Node:) Text: )
|———Node:, Text: ,
|———Node:field_initializer Text: d_ptr(new TinyCanBackendPrivate(this))
|————Node:field_identifier Text: d_ptr
|————Node:argument_list Text: (new TinyCanBackendPrivate(this))
|—————Node:( Text: (
|—————Node:new_expression Text: new TinyCanBackendPrivate(this)
|——————Node:new Text: new
|——————Node:type_identifier Text: TinyCanBackendPrivate
|——————Node:argument_list Text: (this)
|———————Node:( Text: (
|———————Node:this Text: this
|———————Node:) Text: )
|—————Node:) Text: )
|——Node:compound_statement Text: {
    Q_D(TinyCanBackend);

    d->setupChannel(name);
    d->setupDefaultConfigurations();

    std::function<void()> f = std::bind(&TinyCanBackend::resetController, this);
    setResetControllerFunction(f);
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_D(TinyCanBackend);
|————Node:call_expression Text: Q_D(TinyCanBackend)
|—————Node:identifier Text: Q_D
|—————Node:argument_list Text: (TinyCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: TinyCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: d->setupChannel(name);
|————Node:call_expression Text: d->setupChannel(name)
|—————Node:field_expression Text: d->setupChannel
|——————Node:identifier Text: d
|——————Node:-> Text: ->
|——————Node:field_identifier Text: setupChannel
|—————Node:argument_list Text: (name)
|——————Node:( Text: (
|——————Node:identifier Text: name
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: d->setupDefaultConfigurations();
|————Node:call_expression Text: d->setupDefaultConfigurations()
|—————Node:field_expression Text: d->setupDefaultConfigurations
|——————Node:identifier Text: d
|——————Node:-> Text: ->
|——————Node:field_identifier Text: setupDefaultConfigurations
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: std::function<void()> f = std::bind(&TinyCanBackend::resetController, this);
|————Node:qualified_identifier Text: std::function<void()>
|—————Node:namespace_identifier Text: std
|—————Node::: Text: ::
|—————Node:template_type Text: function<void()>
|——————Node:type_identifier Text: function
|——————Node:template_argument_list Text: <void()>
|———————Node:< Text: <
|———————Node:type_descriptor Text: void()
|————————Node:primitive_type Text: void
|————————Node:abstract_function_declarator Text: ()
|—————————Node:parameter_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|———————Node:> Text: >
|————Node:init_declarator Text: f = std::bind(&TinyCanBackend::resetController, this)
|—————Node:identifier Text: f
|—————Node:= Text: =
|—————Node:call_expression Text: std::bind(&TinyCanBackend::resetController, this)
|——————Node:qualified_identifier Text: std::bind
|———————Node:namespace_identifier Text: std
|———————Node::: Text: ::
|———————Node:identifier Text: bind
|——————Node:argument_list Text: (&TinyCanBackend::resetController, this)
|———————Node:( Text: (
|———————Node:pointer_expression Text: &TinyCanBackend::resetController
|————————Node:& Text: &
|————————Node:qualified_identifier Text: TinyCanBackend::resetController
|—————————Node:namespace_identifier Text: TinyCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: resetController
|———————Node:, Text: ,
|———————Node:this Text: this
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: setResetControllerFunction(f);
|————Node:call_expression Text: setResetControllerFunction(f)
|—————Node:identifier Text: setResetControllerFunction
|—————Node:argument_list Text: (f)
|——————Node:( Text: (
|——————Node:identifier Text: f
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: TinyCanBackend::~TinyCanBackend()
{
    close();
    delete d_ptr;
}
|——Node:function_declarator Text: TinyCanBackend::~TinyCanBackend()
|———Node:qualified_identifier Text: TinyCanBackend::~TinyCanBackend
|————Node:namespace_identifier Text: TinyCanBackend
|————Node::: Text: ::
|————Node:destructor_name Text: ~TinyCanBackend
|—————Node:~ Text: ~
|—————Node:identifier Text: TinyCanBackend
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    close();
    delete d_ptr;
}
|———Node:{ Text: {
|———Node:expression_statement Text: close();
|————Node:call_expression Text: close()
|—————Node:identifier Text: close
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: delete d_ptr;
|————Node:delete_expression Text: delete d_ptr
|—————Node:delete Text: delete
|—————Node:identifier Text: d_ptr
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: bool TinyCanBackend::open()
{
    Q_D(TinyCanBackend);

    if (!d->isOpen) {
        if (!d->open()) {
            close(); // sets UnconnectedState
            return false;
        }

        // apply all stored configurations
        const auto keys = configurationKeys();
        for (ConfigurationKey key : keys) {
            const QVariant param = configurationParameter(key);
            const bool success = d->setConfigurationParameter(key, param);
            if (Q_UNLIKELY(!success)) {
                qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "Cannot apply parameter: %d with value: %ls.",
                          key, qUtf16Printable(param.toString()));
            }
        }
    }

    setState(QCanBusDevice::ConnectedState);
    return true;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: TinyCanBackend::open()
|———Node:qualified_identifier Text: TinyCanBackend::open
|————Node:namespace_identifier Text: TinyCanBackend
|————Node::: Text: ::
|————Node:identifier Text: open
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_D(TinyCanBackend);

    if (!d->isOpen) {
        if (!d->open()) {
            close(); // sets UnconnectedState
            return false;
        }

        // apply all stored configurations
        const auto keys = configurationKeys();
        for (ConfigurationKey key : keys) {
            const QVariant param = configurationParameter(key);
            const bool success = d->setConfigurationParameter(key, param);
            if (Q_UNLIKELY(!success)) {
                qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "Cannot apply parameter: %d with value: %ls.",
                          key, qUtf16Printable(param.toString()));
            }
        }
    }

    setState(QCanBusDevice::ConnectedState);
    return true;
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_D(TinyCanBackend);
|————Node:call_expression Text: Q_D(TinyCanBackend)
|—————Node:identifier Text: Q_D
|—————Node:argument_list Text: (TinyCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: TinyCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (!d->isOpen) {
        if (!d->open()) {
            close(); // sets UnconnectedState
            return false;
        }

        // apply all stored configurations
        const auto keys = configurationKeys();
        for (ConfigurationKey key : keys) {
            const QVariant param = configurationParameter(key);
            const bool success = d->setConfigurationParameter(key, param);
            if (Q_UNLIKELY(!success)) {
                qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "Cannot apply parameter: %d with value: %ls.",
                          key, qUtf16Printable(param.toString()));
            }
        }
    }
|————Node:if Text: if
|————Node:condition_clause Text: (!d->isOpen)
|—————Node:( Text: (
|—————Node:unary_expression Text: !d->isOpen
|——————Node:! Text: !
|——————Node:field_expression Text: d->isOpen
|———————Node:identifier Text: d
|———————Node:-> Text: ->
|———————Node:field_identifier Text: isOpen
|—————Node:) Text: )
|————Node:compound_statement Text: {
        if (!d->open()) {
            close(); // sets UnconnectedState
            return false;
        }

        // apply all stored configurations
        const auto keys = configurationKeys();
        for (ConfigurationKey key : keys) {
            const QVariant param = configurationParameter(key);
            const bool success = d->setConfigurationParameter(key, param);
            if (Q_UNLIKELY(!success)) {
                qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "Cannot apply parameter: %d with value: %ls.",
                          key, qUtf16Printable(param.toString()));
            }
        }
    }
|—————Node:{ Text: {
|—————Node:if_statement Text: if (!d->open()) {
            close(); // sets UnconnectedState
            return false;
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (!d->open())
|———————Node:( Text: (
|———————Node:unary_expression Text: !d->open()
|————————Node:! Text: !
|————————Node:call_expression Text: d->open()
|—————————Node:field_expression Text: d->open
|——————————Node:identifier Text: d
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: open
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            close(); // sets UnconnectedState
            return false;
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: close();
|————————Node:call_expression Text: close()
|—————————Node:identifier Text: close
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:comment Text: // sets UnconnectedState
|———————Node:return_statement Text: return false;
|————————Node:return Text: return
|————————Node:false Text: false
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:comment Text: // apply all stored configurations
|—————Node:declaration Text: const auto keys = configurationKeys();
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:placeholder_type_specifier Text: auto
|———————Node:auto Text: auto
|——————Node:init_declarator Text: keys = configurationKeys()
|———————Node:identifier Text: keys
|———————Node:= Text: =
|———————Node:call_expression Text: configurationKeys()
|————————Node:identifier Text: configurationKeys
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:for_range_loop Text: for (ConfigurationKey key : keys) {
            const QVariant param = configurationParameter(key);
            const bool success = d->setConfigurationParameter(key, param);
            if (Q_UNLIKELY(!success)) {
                qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "Cannot apply parameter: %d with value: %ls.",
                          key, qUtf16Printable(param.toString()));
            }
        }
|——————Node:for Text: for
|——————Node:( Text: (
|——————Node:type_identifier Text: ConfigurationKey
|——————Node:identifier Text: key
|——————Node:: Text: :
|——————Node:identifier Text: keys
|——————Node:) Text: )
|——————Node:compound_statement Text: {
            const QVariant param = configurationParameter(key);
            const bool success = d->setConfigurationParameter(key, param);
            if (Q_UNLIKELY(!success)) {
                qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "Cannot apply parameter: %d with value: %ls.",
                          key, qUtf16Printable(param.toString()));
            }
        }
|———————Node:{ Text: {
|———————Node:declaration Text: const QVariant param = configurationParameter(key);
|————————Node:type_qualifier Text: const
|—————————Node:const Text: const
|————————Node:type_identifier Text: QVariant
|————————Node:init_declarator Text: param = configurationParameter(key)
|—————————Node:identifier Text: param
|—————————Node:= Text: =
|—————————Node:call_expression Text: configurationParameter(key)
|——————————Node:identifier Text: configurationParameter
|——————————Node:argument_list Text: (key)
|———————————Node:( Text: (
|———————————Node:identifier Text: key
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:declaration Text: const bool success = d->setConfigurationParameter(key, param);
|————————Node:type_qualifier Text: const
|—————————Node:const Text: const
|————————Node:primitive_type Text: bool
|————————Node:init_declarator Text: success = d->setConfigurationParameter(key, param)
|—————————Node:identifier Text: success
|—————————Node:= Text: =
|—————————Node:call_expression Text: d->setConfigurationParameter(key, param)
|——————————Node:field_expression Text: d->setConfigurationParameter
|———————————Node:identifier Text: d
|———————————Node:-> Text: ->
|———————————Node:field_identifier Text: setConfigurationParameter
|——————————Node:argument_list Text: (key, param)
|———————————Node:( Text: (
|———————————Node:identifier Text: key
|———————————Node:, Text: ,
|———————————Node:identifier Text: param
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:if_statement Text: if (Q_UNLIKELY(!success)) {
                qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "Cannot apply parameter: %d with value: %ls.",
                          key, qUtf16Printable(param.toString()));
            }
|————————Node:if Text: if
|————————Node:condition_clause Text: (Q_UNLIKELY(!success))
|—————————Node:( Text: (
|—————————Node:call_expression Text: Q_UNLIKELY(!success)
|——————————Node:identifier Text: Q_UNLIKELY
|——————————Node:argument_list Text: (!success)
|———————————Node:( Text: (
|———————————Node:unary_expression Text: !success
|————————————Node:! Text: !
|————————————Node:identifier Text: success
|———————————Node:) Text: )
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
                qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "Cannot apply parameter: %d with value: %ls.",
                          key, qUtf16Printable(param.toString()));
            }
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "Cannot apply parameter: %d with value: %ls.",
                          key, qUtf16Printable(param.toString()));
|——————————Node:call_expression Text: qCWarning(QT_CANBUS_PLUGINS_TINYCAN, "Cannot apply parameter: %d with value: %ls.",
                          key, qUtf16Printable(param.toString()))
|———————————Node:identifier Text: qCWarning
|———————————Node:argument_list Text: (QT_CANBUS_PLUGINS_TINYCAN, "Cannot apply parameter: %d with value: %ls.",
                          key, qUtf16Printable(param.toString()))
|————————————Node:( Text: (
|————————————Node:identifier Text: QT_CANBUS_PLUGINS_TINYCAN
|————————————Node:, Text: ,
|————————————Node:string_literal Text: "Cannot apply parameter: %d with value: %ls."
|—————————————Node:" Text: "
|—————————————Node:string_content Text: Cannot apply parameter: %d with value: %ls.
|—————————————Node:" Text: "
|————————————Node:, Text: ,
|————————————Node:identifier Text: key
|————————————Node:, Text: ,
|————————————Node:call_expression Text: qUtf16Printable(param.toString())
|—————————————Node:identifier Text: qUtf16Printable
|—————————————Node:argument_list Text: (param.toString())
|——————————————Node:( Text: (
|——————————————Node:call_expression Text: param.toString()
|———————————————Node:field_expression Text: param.toString
|————————————————Node:identifier Text: param
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: toString
|———————————————Node:argument_list Text: ()
|————————————————Node:( Text: (
|————————————————Node:) Text: )
|——————————————Node:) Text: )
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:} Text: }
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:expression_statement Text: setState(QCanBusDevice::ConnectedState);
|————Node:call_expression Text: setState(QCanBusDevice::ConnectedState)
|—————Node:identifier Text: setState
|—————Node:argument_list Text: (QCanBusDevice::ConnectedState)
|——————Node:( Text: (
|——————Node:qualified_identifier Text: QCanBusDevice::ConnectedState
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: ConnectedState
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return true;
|————Node:return Text: return
|————Node:true Text: true
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void TinyCanBackend::close()
{
    Q_D(TinyCanBackend);

    d->close();

    setState(QCanBusDevice::UnconnectedState);
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: TinyCanBackend::close()
|———Node:qualified_identifier Text: TinyCanBackend::close
|————Node:namespace_identifier Text: TinyCanBackend
|————Node::: Text: ::
|————Node:identifier Text: close
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_D(TinyCanBackend);

    d->close();

    setState(QCanBusDevice::UnconnectedState);
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_D(TinyCanBackend);
|————Node:call_expression Text: Q_D(TinyCanBackend)
|—————Node:identifier Text: Q_D
|—————Node:argument_list Text: (TinyCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: TinyCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: d->close();
|————Node:call_expression Text: d->close()
|—————Node:field_expression Text: d->close
|——————Node:identifier Text: d
|——————Node:-> Text: ->
|——————Node:field_identifier Text: close
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: setState(QCanBusDevice::UnconnectedState);
|————Node:call_expression Text: setState(QCanBusDevice::UnconnectedState)
|—————Node:identifier Text: setState
|—————Node:argument_list Text: (QCanBusDevice::UnconnectedState)
|——————Node:( Text: (
|——————Node:qualified_identifier Text: QCanBusDevice::UnconnectedState
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: UnconnectedState
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void TinyCanBackend::setConfigurationParameter(ConfigurationKey key, const QVariant &value)
{
    Q_D(TinyCanBackend);

    if (d->setConfigurationParameter(key, value))
        QCanBusDevice::setConfigurationParameter(key, value);
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: TinyCanBackend::setConfigurationParameter(ConfigurationKey key, const QVariant &value)
|———Node:qualified_identifier Text: TinyCanBackend::setConfigurationParameter
|————Node:namespace_identifier Text: TinyCanBackend
|————Node::: Text: ::
|————Node:identifier Text: setConfigurationParameter
|———Node:parameter_list Text: (ConfigurationKey key, const QVariant &value)
|————Node:( Text: (
|————Node:parameter_declaration Text: ConfigurationKey key
|—————Node:type_identifier Text: ConfigurationKey
|—————Node:identifier Text: key
|————Node:, Text: ,
|————Node:parameter_declaration Text: const QVariant &value
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: QVariant
|—————Node:reference_declarator Text: &value
|——————Node:& Text: &
|——————Node:identifier Text: value
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_D(TinyCanBackend);

    if (d->setConfigurationParameter(key, value))
        QCanBusDevice::setConfigurationParameter(key, value);
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_D(TinyCanBackend);
|————Node:call_expression Text: Q_D(TinyCanBackend)
|—————Node:identifier Text: Q_D
|—————Node:argument_list Text: (TinyCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: TinyCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (d->setConfigurationParameter(key, value))
        QCanBusDevice::setConfigurationParameter(key, value);
|————Node:if Text: if
|————Node:condition_clause Text: (d->setConfigurationParameter(key, value))
|—————Node:( Text: (
|—————Node:call_expression Text: d->setConfigurationParameter(key, value)
|——————Node:field_expression Text: d->setConfigurationParameter
|———————Node:identifier Text: d
|———————Node:-> Text: ->
|———————Node:field_identifier Text: setConfigurationParameter
|——————Node:argument_list Text: (key, value)
|———————Node:( Text: (
|———————Node:identifier Text: key
|———————Node:, Text: ,
|———————Node:identifier Text: value
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:expression_statement Text: QCanBusDevice::setConfigurationParameter(key, value);
|—————Node:call_expression Text: QCanBusDevice::setConfigurationParameter(key, value)
|——————Node:qualified_identifier Text: QCanBusDevice::setConfigurationParameter
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: setConfigurationParameter
|——————Node:argument_list Text: (key, value)
|———————Node:( Text: (
|———————Node:identifier Text: key
|———————Node:, Text: ,
|———————Node:identifier Text: value
|———————Node:) Text: )
|—————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: bool TinyCanBackend::writeFrame(const QCanBusFrame &newData)
{
    Q_D(TinyCanBackend);

    if (Q_UNLIKELY(state() != QCanBusDevice::ConnectedState))
        return false;

    if (Q_UNLIKELY(!newData.isValid())) {
        setError(tr("Cannot write invalid QCanBusFrame"), QCanBusDevice::WriteError);
        return false;
    }

    if (Q_UNLIKELY(newData.frameType() != QCanBusFrame::DataFrame
            && newData.frameType() != QCanBusFrame::RemoteRequestFrame
            && newData.frameType() != QCanBusFrame::ErrorFrame)) {
        setError(tr("Unable to write a frame with unacceptable type"),
                 QCanBusDevice::WriteError);
        return false;
    }

    // CAN FD frame format not supported at this stage
    if (Q_UNLIKELY(newData.hasFlexibleDataRateFormat())) {
        setError(tr("CAN FD frame format not supported."), QCanBusDevice::WriteError);
        return false;
    }

    enqueueOutgoingFrame(newData);

    if (!d->writeNotifier->isActive())
        d->writeNotifier->start();

    return true;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: TinyCanBackend::writeFrame(const QCanBusFrame &newData)
|———Node:qualified_identifier Text: TinyCanBackend::writeFrame
|————Node:namespace_identifier Text: TinyCanBackend
|————Node::: Text: ::
|————Node:identifier Text: writeFrame
|———Node:parameter_list Text: (const QCanBusFrame &newData)
|————Node:( Text: (
|————Node:parameter_declaration Text: const QCanBusFrame &newData
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: QCanBusFrame
|—————Node:reference_declarator Text: &newData
|——————Node:& Text: &
|——————Node:identifier Text: newData
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_D(TinyCanBackend);

    if (Q_UNLIKELY(state() != QCanBusDevice::ConnectedState))
        return false;

    if (Q_UNLIKELY(!newData.isValid())) {
        setError(tr("Cannot write invalid QCanBusFrame"), QCanBusDevice::WriteError);
        return false;
    }

    if (Q_UNLIKELY(newData.frameType() != QCanBusFrame::DataFrame
            && newData.frameType() != QCanBusFrame::RemoteRequestFrame
            && newData.frameType() != QCanBusFrame::ErrorFrame)) {
        setError(tr("Unable to write a frame with unacceptable type"),
                 QCanBusDevice::WriteError);
        return false;
    }

    // CAN FD frame format not supported at this stage
    if (Q_UNLIKELY(newData.hasFlexibleDataRateFormat())) {
        setError(tr("CAN FD frame format not supported."), QCanBusDevice::WriteError);
        return false;
    }

    enqueueOutgoingFrame(newData);

    if (!d->writeNotifier->isActive())
        d->writeNotifier->start();

    return true;
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_D(TinyCanBackend);
|————Node:call_expression Text: Q_D(TinyCanBackend)
|—————Node:identifier Text: Q_D
|—————Node:argument_list Text: (TinyCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: TinyCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(state() != QCanBusDevice::ConnectedState))
        return false;
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(state() != QCanBusDevice::ConnectedState))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(state() != QCanBusDevice::ConnectedState)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (state() != QCanBusDevice::ConnectedState)
|———————Node:( Text: (
|———————Node:binary_expression Text: state() != QCanBusDevice::ConnectedState
|————————Node:call_expression Text: state()
|—————————Node:identifier Text: state
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:!= Text: !=
|————————Node:qualified_identifier Text: QCanBusDevice::ConnectedState
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:identifier Text: ConnectedState
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:return_statement Text: return false;
|—————Node:return Text: return
|—————Node:false Text: false
|—————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(!newData.isValid())) {
        setError(tr("Cannot write invalid QCanBusFrame"), QCanBusDevice::WriteError);
        return false;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(!newData.isValid()))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(!newData.isValid())
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (!newData.isValid())
|———————Node:( Text: (
|———————Node:unary_expression Text: !newData.isValid()
|————————Node:! Text: !
|————————Node:call_expression Text: newData.isValid()
|—————————Node:field_expression Text: newData.isValid
|——————————Node:identifier Text: newData
|——————————Node:. Text: .
|——————————Node:field_identifier Text: isValid
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        setError(tr("Cannot write invalid QCanBusFrame"), QCanBusDevice::WriteError);
        return false;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: setError(tr("Cannot write invalid QCanBusFrame"), QCanBusDevice::WriteError);
|——————Node:call_expression Text: setError(tr("Cannot write invalid QCanBusFrame"), QCanBusDevice::WriteError)
|———————Node:identifier Text: setError
|———————Node:argument_list Text: (tr("Cannot write invalid QCanBusFrame"), QCanBusDevice::WriteError)
|————————Node:( Text: (
|————————Node:call_expression Text: tr("Cannot write invalid QCanBusFrame")
|—————————Node:identifier Text: tr
|—————————Node:argument_list Text: ("Cannot write invalid QCanBusFrame")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "Cannot write invalid QCanBusFrame"
|———————————Node:" Text: "
|———————————Node:string_content Text: Cannot write invalid QCanBusFrame
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:qualified_identifier Text: QCanBusDevice::WriteError
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:identifier Text: WriteError
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return false;
|——————Node:return Text: return
|——————Node:false Text: false
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:if_statement Text: if (Q_UNLIKELY(newData.frameType() != QCanBusFrame::DataFrame
            && newData.frameType() != QCanBusFrame::RemoteRequestFrame
            && newData.frameType() != QCanBusFrame::ErrorFrame)) {
        setError(tr("Unable to write a frame with unacceptable type"),
                 QCanBusDevice::WriteError);
        return false;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(newData.frameType() != QCanBusFrame::DataFrame
            && newData.frameType() != QCanBusFrame::RemoteRequestFrame
            && newData.frameType() != QCanBusFrame::ErrorFrame))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(newData.frameType() != QCanBusFrame::DataFrame
            && newData.frameType() != QCanBusFrame::RemoteRequestFrame
            && newData.frameType() != QCanBusFrame::ErrorFrame)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (newData.frameType() != QCanBusFrame::DataFrame
            && newData.frameType() != QCanBusFrame::RemoteRequestFrame
            && newData.frameType() != QCanBusFrame::ErrorFrame)
|———————Node:( Text: (
|———————Node:binary_expression Text: newData.frameType() != QCanBusFrame::DataFrame
            && newData.frameType() != QCanBusFrame::RemoteRequestFrame
            && newData.frameType() != QCanBusFrame::ErrorFrame
|————————Node:binary_expression Text: newData.frameType() != QCanBusFrame::DataFrame
            && newData.frameType() != QCanBusFrame::RemoteRequestFrame
|—————————Node:binary_expression Text: newData.frameType() != QCanBusFrame::DataFrame
|——————————Node:call_expression Text: newData.frameType()
|———————————Node:field_expression Text: newData.frameType
|————————————Node:identifier Text: newData
|————————————Node:. Text: .
|————————————Node:field_identifier Text: frameType
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:!= Text: !=
|——————————Node:qualified_identifier Text: QCanBusFrame::DataFrame
|———————————Node:namespace_identifier Text: QCanBusFrame
|———————————Node::: Text: ::
|———————————Node:identifier Text: DataFrame
|—————————Node:&& Text: &&
|—————————Node:binary_expression Text: newData.frameType() != QCanBusFrame::RemoteRequestFrame
|——————————Node:call_expression Text: newData.frameType()
|———————————Node:field_expression Text: newData.frameType
|————————————Node:identifier Text: newData
|————————————Node:. Text: .
|————————————Node:field_identifier Text: frameType
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:!= Text: !=
|——————————Node:qualified_identifier Text: QCanBusFrame::RemoteRequestFrame
|———————————Node:namespace_identifier Text: QCanBusFrame
|———————————Node::: Text: ::
|———————————Node:identifier Text: RemoteRequestFrame
|————————Node:&& Text: &&
|————————Node:binary_expression Text: newData.frameType() != QCanBusFrame::ErrorFrame
|—————————Node:call_expression Text: newData.frameType()
|——————————Node:field_expression Text: newData.frameType
|———————————Node:identifier Text: newData
|———————————Node:. Text: .
|———————————Node:field_identifier Text: frameType
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:!= Text: !=
|—————————Node:qualified_identifier Text: QCanBusFrame::ErrorFrame
|——————————Node:namespace_identifier Text: QCanBusFrame
|——————————Node::: Text: ::
|——————————Node:identifier Text: ErrorFrame
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        setError(tr("Unable to write a frame with unacceptable type"),
                 QCanBusDevice::WriteError);
        return false;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: setError(tr("Unable to write a frame with unacceptable type"),
                 QCanBusDevice::WriteError);
|——————Node:call_expression Text: setError(tr("Unable to write a frame with unacceptable type"),
                 QCanBusDevice::WriteError)
|———————Node:identifier Text: setError
|———————Node:argument_list Text: (tr("Unable to write a frame with unacceptable type"),
                 QCanBusDevice::WriteError)
|————————Node:( Text: (
|————————Node:call_expression Text: tr("Unable to write a frame with unacceptable type")
|—————————Node:identifier Text: tr
|—————————Node:argument_list Text: ("Unable to write a frame with unacceptable type")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "Unable to write a frame with unacceptable type"
|———————————Node:" Text: "
|———————————Node:string_content Text: Unable to write a frame with unacceptable type
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:qualified_identifier Text: QCanBusDevice::WriteError
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:identifier Text: WriteError
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return false;
|——————Node:return Text: return
|——————Node:false Text: false
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment Text: // CAN FD frame format not supported at this stage
|———Node:if_statement Text: if (Q_UNLIKELY(newData.hasFlexibleDataRateFormat())) {
        setError(tr("CAN FD frame format not supported."), QCanBusDevice::WriteError);
        return false;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(newData.hasFlexibleDataRateFormat()))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(newData.hasFlexibleDataRateFormat())
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (newData.hasFlexibleDataRateFormat())
|———————Node:( Text: (
|———————Node:call_expression Text: newData.hasFlexibleDataRateFormat()
|————————Node:field_expression Text: newData.hasFlexibleDataRateFormat
|—————————Node:identifier Text: newData
|—————————Node:. Text: .
|—————————Node:field_identifier Text: hasFlexibleDataRateFormat
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        setError(tr("CAN FD frame format not supported."), QCanBusDevice::WriteError);
        return false;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: setError(tr("CAN FD frame format not supported."), QCanBusDevice::WriteError);
|——————Node:call_expression Text: setError(tr("CAN FD frame format not supported."), QCanBusDevice::WriteError)
|———————Node:identifier Text: setError
|———————Node:argument_list Text: (tr("CAN FD frame format not supported."), QCanBusDevice::WriteError)
|————————Node:( Text: (
|————————Node:call_expression Text: tr("CAN FD frame format not supported.")
|—————————Node:identifier Text: tr
|—————————Node:argument_list Text: ("CAN FD frame format not supported.")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "CAN FD frame format not supported."
|———————————Node:" Text: "
|———————————Node:string_content Text: CAN FD frame format not supported.
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:qualified_identifier Text: QCanBusDevice::WriteError
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:identifier Text: WriteError
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return false;
|——————Node:return Text: return
|——————Node:false Text: false
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: enqueueOutgoingFrame(newData);
|————Node:call_expression Text: enqueueOutgoingFrame(newData)
|—————Node:identifier Text: enqueueOutgoingFrame
|—————Node:argument_list Text: (newData)
|——————Node:( Text: (
|——————Node:identifier Text: newData
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (!d->writeNotifier->isActive())
        d->writeNotifier->start();
|————Node:if Text: if
|————Node:condition_clause Text: (!d->writeNotifier->isActive())
|—————Node:( Text: (
|—————Node:unary_expression Text: !d->writeNotifier->isActive()
|——————Node:! Text: !
|——————Node:call_expression Text: d->writeNotifier->isActive()
|———————Node:field_expression Text: d->writeNotifier->isActive
|————————Node:field_expression Text: d->writeNotifier
|—————————Node:identifier Text: d
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: writeNotifier
|————————Node:-> Text: ->
|————————Node:field_identifier Text: isActive
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|—————Node:) Text: )
|————Node:expression_statement Text: d->writeNotifier->start();
|—————Node:call_expression Text: d->writeNotifier->start()
|——————Node:field_expression Text: d->writeNotifier->start
|———————Node:field_expression Text: d->writeNotifier
|————————Node:identifier Text: d
|————————Node:-> Text: ->
|————————Node:field_identifier Text: writeNotifier
|———————Node:-> Text: ->
|———————Node:field_identifier Text: start
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|———Node:return_statement Text: return true;
|————Node:return Text: return
|————Node:true Text: true
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: // TODO: Implement me
|—Node:function_definition Text: QString TinyCanBackend::interpretErrorFrame(const QCanBusFrame &errorFrame)
{
    Q_UNUSED(errorFrame);

    return QString();
}
|——Node:type_identifier Text: QString
|——Node:function_declarator Text: TinyCanBackend::interpretErrorFrame(const QCanBusFrame &errorFrame)
|———Node:qualified_identifier Text: TinyCanBackend::interpretErrorFrame
|————Node:namespace_identifier Text: TinyCanBackend
|————Node::: Text: ::
|————Node:identifier Text: interpretErrorFrame
|———Node:parameter_list Text: (const QCanBusFrame &errorFrame)
|————Node:( Text: (
|————Node:parameter_declaration Text: const QCanBusFrame &errorFrame
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: QCanBusFrame
|—————Node:reference_declarator Text: &errorFrame
|——————Node:& Text: &
|——————Node:identifier Text: errorFrame
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_UNUSED(errorFrame);

    return QString();
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_UNUSED(errorFrame);
|————Node:call_expression Text: Q_UNUSED(errorFrame)
|—————Node:identifier Text: Q_UNUSED
|—————Node:argument_list Text: (errorFrame)
|——————Node:( Text: (
|——————Node:identifier Text: errorFrame
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return QString();
|————Node:return Text: return
|————Node:call_expression Text: QString()
|—————Node:identifier Text: QString
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void TinyCanBackend::resetController()
{
    Q_D(TinyCanBackend);
    d->resetController();
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: TinyCanBackend::resetController()
|———Node:qualified_identifier Text: TinyCanBackend::resetController
|————Node:namespace_identifier Text: TinyCanBackend
|————Node::: Text: ::
|————Node:identifier Text: resetController
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_D(TinyCanBackend);
    d->resetController();
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_D(TinyCanBackend);
|————Node:call_expression Text: Q_D(TinyCanBackend)
|—————Node:identifier Text: Q_D
|—————Node:argument_list Text: (TinyCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: TinyCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: d->resetController();
|————Node:call_expression Text: d->resetController()
|—————Node:field_expression Text: d->resetController
|——————Node:identifier Text: d
|——————Node:-> Text: ->
|——————Node:field_identifier Text: resetController
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:expression_statement Text: QT_END_NAMESPACE
|——Node:identifier Text: QT_END_NAMESPACE
|——Node:; Text: 
