dev-can-linux-tools\candump\src\candump.c

|Node:translation_unit
|—Node:comment Text: /*
 * \file    candump.c
 * \brief   This program reads CAN messages from dev-can-* driver devices and
 *          dump them to screen in human readable form.
 *
 * Copyright (C) 2022 Deniz Eren <deniz.eren@outlook.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
|—Node:preproc_include Text: #include <prints.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <prints.h>
|—Node:preproc_include Text: #include <dev-can-linux/commands.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <dev-can-linux/commands.h>
|—Node:declaration Text: static int fd = -1;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:primitive_type Text: int
|——Node:init_declarator Text: fd = -1
|———Node:identifier Text: fd
|———Node:= Text: =
|———Node:number_literal Text: -1
|——Node:; Text: ;
|—Node:function_definition Text: static void sigint_signal_handler (int sig_no) {
    close(fd);

    exit(0);
}
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:primitive_type Text: void
|——Node:function_declarator Text: sigint_signal_handler (int sig_no)
|———Node:identifier Text: sigint_signal_handler
|———Node:parameter_list Text: (int sig_no)
|————Node:( Text: (
|————Node:parameter_declaration Text: int sig_no
|—————Node:primitive_type Text: int
|—————Node:identifier Text: sig_no
|————Node:) Text: )
|——Node:compound_statement Text: {
    close(fd);

    exit(0);
}
|———Node:{ Text: {
|———Node:expression_statement Text: close(fd);
|————Node:call_expression Text: close(fd)
|—————Node:identifier Text: close
|—————Node:argument_list Text: (fd)
|——————Node:( Text: (
|——————Node:identifier Text: fd
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: exit(0);
|————Node:call_expression Text: exit(0)
|—————Node:identifier Text: exit
|—————Node:argument_list Text: (0)
|——————Node:( Text: (
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void help (char* program_name) {
    print_notice();

    printf("\n");
    printf("\e[1mSYNOPSIS\e[m\n");
    printf("    \e[1m%s\e[m [options]\n", program_name);
    printf("\n");
    printf("\e[1mDESCRIPTION\e[m\n");
    printf("    \e[1mDEV-CAN-LINUX\e[m is a QNX CAN-bus driver project that aims at porting drivers\n");
    printf("    from the open-source Linux Kernel project to QNX RTOS.\n");
    printf("\n");
    printf("    \e[1mCANDUMP\e[m is an accompanying tool used to read raw CAN messages.\n");
    printf("\n");
    printf("\e[1mOPTIONS\e[m\n");
    printf("    \e[1m-u subopts\e[m - Specify the device RX file descriptors.\n");
    printf("\n");
    printf("                 Suboptions (\e[1msubopts\e[m):\n");
    printf("\n");
    printf("                 \e[1m#\e[m      - Specify ID number of the device to configure;\n");
    printf("                          e.g. /dev/can0/ is -u0\n");
    printf("                 \e[1mrx#\e[m    - ID of RX file descriptors to connect to\n");
    printf("\n");
    printf("                 Example:\n");
    printf("                     candump -u0,rx0\n");
    printf("\n");
    printf("    \e[1m-w\e[m         - Print warranty message and exit.\n");
    printf("    \e[1m-c\e[m         - Print license details and exit.\n");
    printf("    \e[1m-?/h\e[m       - Print help menu and exit.\n");
    printf("\n");
    printf("\e[1mBUGS\e[m\n");
    printf("    If you find a bug, please report it.\n");
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: help (char* program_name)
|———Node:identifier Text: help
|———Node:parameter_list Text: (char* program_name)
|————Node:( Text: (
|————Node:parameter_declaration Text: char* program_name
|—————Node:primitive_type Text: char
|—————Node:pointer_declarator Text: * program_name
|——————Node:* Text: *
|——————Node:identifier Text: program_name
|————Node:) Text: )
|——Node:compound_statement Text: {
    print_notice();

    printf("\n");
    printf("\e[1mSYNOPSIS\e[m\n");
    printf("    \e[1m%s\e[m [options]\n", program_name);
    printf("\n");
    printf("\e[1mDESCRIPTION\e[m\n");
    printf("    \e[1mDEV-CAN-LINUX\e[m is a QNX CAN-bus driver project that aims at porting drivers\n");
    printf("    from the open-source Linux Kernel project to QNX RTOS.\n");
    printf("\n");
    printf("    \e[1mCANDUMP\e[m is an accompanying tool used to read raw CAN messages.\n");
    printf("\n");
    printf("\e[1mOPTIONS\e[m\n");
    printf("    \e[1m-u subopts\e[m - Specify the device RX file descriptors.\n");
    printf("\n");
    printf("                 Suboptions (\e[1msubopts\e[m):\n");
    printf("\n");
    printf("                 \e[1m#\e[m      - Specify ID number of the device to configure;\n");
    printf("                          e.g. /dev/can0/ is -u0\n");
    printf("                 \e[1mrx#\e[m    - ID of RX file descriptors to connect to\n");
    printf("\n");
    printf("                 Example:\n");
    printf("                     candump -u0,rx0\n");
    printf("\n");
    printf("    \e[1m-w\e[m         - Print warranty message and exit.\n");
    printf("    \e[1m-c\e[m         - Print license details and exit.\n");
    printf("    \e[1m-?/h\e[m       - Print help menu and exit.\n");
    printf("\n");
    printf("\e[1mBUGS\e[m\n");
    printf("    If you find a bug, please report it.\n");
}
|———Node:{ Text: {
|———Node:expression_statement Text: print_notice();
|————Node:call_expression Text: print_notice()
|—————Node:identifier Text: print_notice
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\n");
|————Node:call_expression Text: printf("\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\e[1mSYNOPSIS\e[m\n");
|————Node:call_expression Text: printf("\e[1mSYNOPSIS\e[m\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\e[1mSYNOPSIS\e[m\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\e[1mSYNOPSIS\e[m\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1mSYNOPSIS
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("    \e[1m%s\e[m [options]\n", program_name);
|————Node:call_expression Text: printf("    \e[1m%s\e[m [options]\n", program_name)
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("    \e[1m%s\e[m [options]\n", program_name)
|——————Node:( Text: (
|——————Node:string_literal Text: "    \e[1m%s\e[m [options]\n"
|———————Node:" Text: "
|———————Node:string_content Text:     
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1m%s
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m [options]
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:, Text: ,
|——————Node:identifier Text: program_name
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\n");
|————Node:call_expression Text: printf("\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\e[1mDESCRIPTION\e[m\n");
|————Node:call_expression Text: printf("\e[1mDESCRIPTION\e[m\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\e[1mDESCRIPTION\e[m\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\e[1mDESCRIPTION\e[m\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1mDESCRIPTION
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("    \e[1mDEV-CAN-LINUX\e[m is a QNX CAN-bus driver project that aims at porting drivers\n");
|————Node:call_expression Text: printf("    \e[1mDEV-CAN-LINUX\e[m is a QNX CAN-bus driver project that aims at porting drivers\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("    \e[1mDEV-CAN-LINUX\e[m is a QNX CAN-bus driver project that aims at porting drivers\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "    \e[1mDEV-CAN-LINUX\e[m is a QNX CAN-bus driver project that aims at porting drivers\n"
|———————Node:" Text: "
|———————Node:string_content Text:     
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1mDEV-CAN-LINUX
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m is a QNX CAN-bus driver project that aims at porting drivers
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("    from the open-source Linux Kernel project to QNX RTOS.\n");
|————Node:call_expression Text: printf("    from the open-source Linux Kernel project to QNX RTOS.\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("    from the open-source Linux Kernel project to QNX RTOS.\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "    from the open-source Linux Kernel project to QNX RTOS.\n"
|———————Node:" Text: "
|———————Node:string_content Text:     from the open-source Linux Kernel project to QNX RTOS.
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\n");
|————Node:call_expression Text: printf("\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("    \e[1mCANDUMP\e[m is an accompanying tool used to read raw CAN messages.\n");
|————Node:call_expression Text: printf("    \e[1mCANDUMP\e[m is an accompanying tool used to read raw CAN messages.\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("    \e[1mCANDUMP\e[m is an accompanying tool used to read raw CAN messages.\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "    \e[1mCANDUMP\e[m is an accompanying tool used to read raw CAN messages.\n"
|———————Node:" Text: "
|———————Node:string_content Text:     
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1mCANDUMP
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m is an accompanying tool used to read raw CAN messages.
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\n");
|————Node:call_expression Text: printf("\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\e[1mOPTIONS\e[m\n");
|————Node:call_expression Text: printf("\e[1mOPTIONS\e[m\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\e[1mOPTIONS\e[m\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\e[1mOPTIONS\e[m\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1mOPTIONS
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("    \e[1m-u subopts\e[m - Specify the device RX file descriptors.\n");
|————Node:call_expression Text: printf("    \e[1m-u subopts\e[m - Specify the device RX file descriptors.\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("    \e[1m-u subopts\e[m - Specify the device RX file descriptors.\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "    \e[1m-u subopts\e[m - Specify the device RX file descriptors.\n"
|———————Node:" Text: "
|———————Node:string_content Text:     
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1m-u subopts
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m - Specify the device RX file descriptors.
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\n");
|————Node:call_expression Text: printf("\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("                 Suboptions (\e[1msubopts\e[m):\n");
|————Node:call_expression Text: printf("                 Suboptions (\e[1msubopts\e[m):\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("                 Suboptions (\e[1msubopts\e[m):\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "                 Suboptions (\e[1msubopts\e[m):\n"
|———————Node:" Text: "
|———————Node:string_content Text:                  Suboptions (
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1msubopts
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m):
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\n");
|————Node:call_expression Text: printf("\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("                 \e[1m#\e[m      - Specify ID number of the device to configure;\n");
|————Node:call_expression Text: printf("                 \e[1m#\e[m      - Specify ID number of the device to configure;\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("                 \e[1m#\e[m      - Specify ID number of the device to configure;\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "                 \e[1m#\e[m      - Specify ID number of the device to configure;\n"
|———————Node:" Text: "
|———————Node:string_content Text:                  
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1m#
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m      - Specify ID number of the device to configure;
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("                          e.g. /dev/can0/ is -u0\n");
|————Node:call_expression Text: printf("                          e.g. /dev/can0/ is -u0\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("                          e.g. /dev/can0/ is -u0\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "                          e.g. /dev/can0/ is -u0\n"
|———————Node:" Text: "
|———————Node:string_content Text:                           e.g. /dev/can0/ is -u0
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("                 \e[1mrx#\e[m    - ID of RX file descriptors to connect to\n");
|————Node:call_expression Text: printf("                 \e[1mrx#\e[m    - ID of RX file descriptors to connect to\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("                 \e[1mrx#\e[m    - ID of RX file descriptors to connect to\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "                 \e[1mrx#\e[m    - ID of RX file descriptors to connect to\n"
|———————Node:" Text: "
|———————Node:string_content Text:                  
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1mrx#
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m    - ID of RX file descriptors to connect to
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\n");
|————Node:call_expression Text: printf("\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("                 Example:\n");
|————Node:call_expression Text: printf("                 Example:\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("                 Example:\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "                 Example:\n"
|———————Node:" Text: "
|———————Node:string_content Text:                  Example:
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("                     candump -u0,rx0\n");
|————Node:call_expression Text: printf("                     candump -u0,rx0\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("                     candump -u0,rx0\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "                     candump -u0,rx0\n"
|———————Node:" Text: "
|———————Node:string_content Text:                      candump -u0,rx0
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\n");
|————Node:call_expression Text: printf("\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("    \e[1m-w\e[m         - Print warranty message and exit.\n");
|————Node:call_expression Text: printf("    \e[1m-w\e[m         - Print warranty message and exit.\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("    \e[1m-w\e[m         - Print warranty message and exit.\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "    \e[1m-w\e[m         - Print warranty message and exit.\n"
|———————Node:" Text: "
|———————Node:string_content Text:     
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1m-w
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m         - Print warranty message and exit.
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("    \e[1m-c\e[m         - Print license details and exit.\n");
|————Node:call_expression Text: printf("    \e[1m-c\e[m         - Print license details and exit.\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("    \e[1m-c\e[m         - Print license details and exit.\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "    \e[1m-c\e[m         - Print license details and exit.\n"
|———————Node:" Text: "
|———————Node:string_content Text:     
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1m-c
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m         - Print license details and exit.
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("    \e[1m-?/h\e[m       - Print help menu and exit.\n");
|————Node:call_expression Text: printf("    \e[1m-?/h\e[m       - Print help menu and exit.\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("    \e[1m-?/h\e[m       - Print help menu and exit.\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "    \e[1m-?/h\e[m       - Print help menu and exit.\n"
|———————Node:" Text: "
|———————Node:string_content Text:     
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1m-?/h
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m       - Print help menu and exit.
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\n");
|————Node:call_expression Text: printf("\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("\e[1mBUGS\e[m\n");
|————Node:call_expression Text: printf("\e[1mBUGS\e[m\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("\e[1mBUGS\e[m\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "\e[1mBUGS\e[m\n"
|———————Node:" Text: "
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [1mBUGS
|———————Node:escape_sequence Text: \e
|———————Node:string_content Text: [m
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: printf("    If you find a bug, please report it.\n");
|————Node:call_expression Text: printf("    If you find a bug, please report it.\n")
|—————Node:identifier Text: printf
|—————Node:argument_list Text: ("    If you find a bug, please report it.\n")
|——————Node:( Text: (
|——————Node:string_literal Text: "    If you find a bug, please report it.\n"
|———————Node:" Text: "
|———————Node:string_content Text:     If you find a bug, please report it.
|———————Node:escape_sequence Text: \n
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int main (int argc, char* argv[]) {
    int opt;
    char* buffer;

    int optu_unit = 0;
    char optu_mailbox_str[32];
    int optu_mailbox_is_tx = 0;
    int optu_mailbox = 0;

    while ((opt = getopt(argc, argv, "u:wc?h")) != -1) {
        switch (opt) {
        case 'u':
            buffer = optu_mailbox_str;
            sscanf(optarg, "%d,%s", &optu_unit, buffer);
            buffer[2] = 0;

            if (strncmp(buffer, "tx", 2) == 0) {
                optu_mailbox_is_tx = 1;
            }
            else if (strncmp(buffer, "rx", 2) == 0) {
                optu_mailbox_is_tx = 0;
            }
            else {
                exit(EXIT_FAILURE);
            }

            sscanf(optu_mailbox_str+2, "%d", &optu_mailbox);
            break;

        case 'w':
            print_warranty();
            return EXIT_SUCCESS;

        case 'c':
            print_license();
            return EXIT_SUCCESS;

        case '?':
        case 'h':
            help(argv[0]);
            return EXIT_SUCCESS;

        default:
            printf("invalid option %c\n", opt);
            break;
        }
    }

    signal(SIGINT, sigint_signal_handler);

    int     ret = EOK;
    struct  can_msg canmsg;

    char OPEN_FILE[16];

    snprintf( OPEN_FILE, 16, "/dev/can%d/%s%d",
            optu_unit,
            (optu_mailbox_is_tx ? "tx" : "rx"), optu_mailbox );

    if ((fd = open(OPEN_FILE, O_RDWR)) == -1) {
        printf("candump error: %s\n", strerror(errno));

        exit(EXIT_FAILURE);
    }

    while (ret == EOK) {
        if ((ret = read_frame_raw_block(fd, &canmsg)) == EOK) {
            printf("  %s TS: %ums [%s] %X [%d] " \
                      "%02X %02X %02X %02X %02X %02X %02X %02X\n",
                    OPEN_FILE,
                    canmsg.ext.timestamp,
                    canmsg.ext.is_extended_mid ? "EFF" : "SFF",
                    /**
                     * Message IDs or MIDs are slightly different on QNX compared
                     * to Linux. The form of the ID depends on whether or not the
                     * driver is using extended MIDs:
                     *
                     *      - In standard 11-bit MIDs, bits 18–28 define the MID.
                     *      - In extended 29-bit MIDs, bits 0–28 define the MID.
                     */
                    canmsg.ext.is_extended_mid ? canmsg.mid : canmsg.mid >> 18,
                    canmsg.len,
                    canmsg.dat[0],
                    canmsg.dat[1],
                    canmsg.dat[2],
                    canmsg.dat[3],
                    canmsg.dat[4],
                    canmsg.dat[5],
                    canmsg.dat[6],
                    canmsg.dat[7]);
        }
    }

    close(fd);
    return ret;
}
|——Node:primitive_type Text: int
|——Node:function_declarator Text: main (int argc, char* argv[])
|———Node:identifier Text: main
|———Node:parameter_list Text: (int argc, char* argv[])
|————Node:( Text: (
|————Node:parameter_declaration Text: int argc
|—————Node:primitive_type Text: int
|—————Node:identifier Text: argc
|————Node:, Text: ,
|————Node:parameter_declaration Text: char* argv[]
|—————Node:primitive_type Text: char
|—————Node:pointer_declarator Text: * argv[]
|——————Node:* Text: *
|——————Node:array_declarator Text: argv[]
|———————Node:identifier Text: argv
|———————Node:[ Text: [
|———————Node:] Text: ]
|————Node:) Text: )
|——Node:compound_statement Text: {
    int opt;
    char* buffer;

    int optu_unit = 0;
    char optu_mailbox_str[32];
    int optu_mailbox_is_tx = 0;
    int optu_mailbox = 0;

    while ((opt = getopt(argc, argv, "u:wc?h")) != -1) {
        switch (opt) {
        case 'u':
            buffer = optu_mailbox_str;
            sscanf(optarg, "%d,%s", &optu_unit, buffer);
            buffer[2] = 0;

            if (strncmp(buffer, "tx", 2) == 0) {
                optu_mailbox_is_tx = 1;
            }
            else if (strncmp(buffer, "rx", 2) == 0) {
                optu_mailbox_is_tx = 0;
            }
            else {
                exit(EXIT_FAILURE);
            }

            sscanf(optu_mailbox_str+2, "%d", &optu_mailbox);
            break;

        case 'w':
            print_warranty();
            return EXIT_SUCCESS;

        case 'c':
            print_license();
            return EXIT_SUCCESS;

        case '?':
        case 'h':
            help(argv[0]);
            return EXIT_SUCCESS;

        default:
            printf("invalid option %c\n", opt);
            break;
        }
    }

    signal(SIGINT, sigint_signal_handler);

    int     ret = EOK;
    struct  can_msg canmsg;

    char OPEN_FILE[16];

    snprintf( OPEN_FILE, 16, "/dev/can%d/%s%d",
            optu_unit,
            (optu_mailbox_is_tx ? "tx" : "rx"), optu_mailbox );

    if ((fd = open(OPEN_FILE, O_RDWR)) == -1) {
        printf("candump error: %s\n", strerror(errno));

        exit(EXIT_FAILURE);
    }

    while (ret == EOK) {
        if ((ret = read_frame_raw_block(fd, &canmsg)) == EOK) {
            printf("  %s TS: %ums [%s] %X [%d] " \
                      "%02X %02X %02X %02X %02X %02X %02X %02X\n",
                    OPEN_FILE,
                    canmsg.ext.timestamp,
                    canmsg.ext.is_extended_mid ? "EFF" : "SFF",
                    /**
                     * Message IDs or MIDs are slightly different on QNX compared
                     * to Linux. The form of the ID depends on whether or not the
                     * driver is using extended MIDs:
                     *
                     *      - In standard 11-bit MIDs, bits 18–28 define the MID.
                     *      - In extended 29-bit MIDs, bits 0–28 define the MID.
                     */
                    canmsg.ext.is_extended_mid ? canmsg.mid : canmsg.mid >> 18,
                    canmsg.len,
                    canmsg.dat[0],
                    canmsg.dat[1],
                    canmsg.dat[2],
                    canmsg.dat[3],
                    canmsg.dat[4],
                    canmsg.dat[5],
                    canmsg.dat[6],
                    canmsg.dat[7]);
        }
    }

    close(fd);
    return ret;
}
|———Node:{ Text: {
|———Node:declaration Text: int opt;
|————Node:primitive_type Text: int
|————Node:identifier Text: opt
|————Node:; Text: ;
|———Node:declaration Text: char* buffer;
|————Node:primitive_type Text: char
|————Node:pointer_declarator Text: * buffer
|—————Node:* Text: *
|—————Node:identifier Text: buffer
|————Node:; Text: ;
|———Node:declaration Text: int optu_unit = 0;
|————Node:primitive_type Text: int
|————Node:init_declarator Text: optu_unit = 0
|—————Node:identifier Text: optu_unit
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: char optu_mailbox_str[32];
|————Node:primitive_type Text: char
|————Node:array_declarator Text: optu_mailbox_str[32]
|—————Node:identifier Text: optu_mailbox_str
|—————Node:[ Text: [
|—————Node:number_literal Text: 32
|—————Node:] Text: ]
|————Node:; Text: ;
|———Node:declaration Text: int optu_mailbox_is_tx = 0;
|————Node:primitive_type Text: int
|————Node:init_declarator Text: optu_mailbox_is_tx = 0
|—————Node:identifier Text: optu_mailbox_is_tx
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: int optu_mailbox = 0;
|————Node:primitive_type Text: int
|————Node:init_declarator Text: optu_mailbox = 0
|—————Node:identifier Text: optu_mailbox
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:while_statement Text: while ((opt = getopt(argc, argv, "u:wc?h")) != -1) {
        switch (opt) {
        case 'u':
            buffer = optu_mailbox_str;
            sscanf(optarg, "%d,%s", &optu_unit, buffer);
            buffer[2] = 0;

            if (strncmp(buffer, "tx", 2) == 0) {
                optu_mailbox_is_tx = 1;
            }
            else if (strncmp(buffer, "rx", 2) == 0) {
                optu_mailbox_is_tx = 0;
            }
            else {
                exit(EXIT_FAILURE);
            }

            sscanf(optu_mailbox_str+2, "%d", &optu_mailbox);
            break;

        case 'w':
            print_warranty();
            return EXIT_SUCCESS;

        case 'c':
            print_license();
            return EXIT_SUCCESS;

        case '?':
        case 'h':
            help(argv[0]);
            return EXIT_SUCCESS;

        default:
            printf("invalid option %c\n", opt);
            break;
        }
    }
|————Node:while Text: while
|————Node:parenthesized_expression Text: ((opt = getopt(argc, argv, "u:wc?h")) != -1)
|—————Node:( Text: (
|—————Node:binary_expression Text: (opt = getopt(argc, argv, "u:wc?h")) != -1
|——————Node:parenthesized_expression Text: (opt = getopt(argc, argv, "u:wc?h"))
|———————Node:( Text: (
|———————Node:assignment_expression Text: opt = getopt(argc, argv, "u:wc?h")
|————————Node:identifier Text: opt
|————————Node:= Text: =
|————————Node:call_expression Text: getopt(argc, argv, "u:wc?h")
|—————————Node:identifier Text: getopt
|—————————Node:argument_list Text: (argc, argv, "u:wc?h")
|——————————Node:( Text: (
|——————————Node:identifier Text: argc
|——————————Node:, Text: ,
|——————————Node:identifier Text: argv
|——————————Node:, Text: ,
|——————————Node:string_literal Text: "u:wc?h"
|———————————Node:" Text: "
|———————————Node:string_content Text: u:wc?h
|———————————Node:" Text: "
|——————————Node:) Text: )
|———————Node:) Text: )
|——————Node:!= Text: !=
|——————Node:number_literal Text: -1
|—————Node:) Text: )
|————Node:compound_statement Text: {
        switch (opt) {
        case 'u':
            buffer = optu_mailbox_str;
            sscanf(optarg, "%d,%s", &optu_unit, buffer);
            buffer[2] = 0;

            if (strncmp(buffer, "tx", 2) == 0) {
                optu_mailbox_is_tx = 1;
            }
            else if (strncmp(buffer, "rx", 2) == 0) {
                optu_mailbox_is_tx = 0;
            }
            else {
                exit(EXIT_FAILURE);
            }

            sscanf(optu_mailbox_str+2, "%d", &optu_mailbox);
            break;

        case 'w':
            print_warranty();
            return EXIT_SUCCESS;

        case 'c':
            print_license();
            return EXIT_SUCCESS;

        case '?':
        case 'h':
            help(argv[0]);
            return EXIT_SUCCESS;

        default:
            printf("invalid option %c\n", opt);
            break;
        }
    }
|—————Node:{ Text: {
|—————Node:switch_statement Text: switch (opt) {
        case 'u':
            buffer = optu_mailbox_str;
            sscanf(optarg, "%d,%s", &optu_unit, buffer);
            buffer[2] = 0;

            if (strncmp(buffer, "tx", 2) == 0) {
                optu_mailbox_is_tx = 1;
            }
            else if (strncmp(buffer, "rx", 2) == 0) {
                optu_mailbox_is_tx = 0;
            }
            else {
                exit(EXIT_FAILURE);
            }

            sscanf(optu_mailbox_str+2, "%d", &optu_mailbox);
            break;

        case 'w':
            print_warranty();
            return EXIT_SUCCESS;

        case 'c':
            print_license();
            return EXIT_SUCCESS;

        case '?':
        case 'h':
            help(argv[0]);
            return EXIT_SUCCESS;

        default:
            printf("invalid option %c\n", opt);
            break;
        }
|——————Node:switch Text: switch
|——————Node:parenthesized_expression Text: (opt)
|———————Node:( Text: (
|———————Node:identifier Text: opt
|———————Node:) Text: )
|——————Node:compound_statement Text: {
        case 'u':
            buffer = optu_mailbox_str;
            sscanf(optarg, "%d,%s", &optu_unit, buffer);
            buffer[2] = 0;

            if (strncmp(buffer, "tx", 2) == 0) {
                optu_mailbox_is_tx = 1;
            }
            else if (strncmp(buffer, "rx", 2) == 0) {
                optu_mailbox_is_tx = 0;
            }
            else {
                exit(EXIT_FAILURE);
            }

            sscanf(optu_mailbox_str+2, "%d", &optu_mailbox);
            break;

        case 'w':
            print_warranty();
            return EXIT_SUCCESS;

        case 'c':
            print_license();
            return EXIT_SUCCESS;

        case '?':
        case 'h':
            help(argv[0]);
            return EXIT_SUCCESS;

        default:
            printf("invalid option %c\n", opt);
            break;
        }
|———————Node:{ Text: {
|———————Node:case_statement Text: case 'u':
            buffer = optu_mailbox_str;
            sscanf(optarg, "%d,%s", &optu_unit, buffer);
            buffer[2] = 0;

            if (strncmp(buffer, "tx", 2) == 0) {
                optu_mailbox_is_tx = 1;
            }
            else if (strncmp(buffer, "rx", 2) == 0) {
                optu_mailbox_is_tx = 0;
            }
            else {
                exit(EXIT_FAILURE);
            }

            sscanf(optu_mailbox_str+2, "%d", &optu_mailbox);
            break;
|————————Node:case Text: case
|————————Node:char_literal Text: 'u'
|—————————Node:' Text: '
|—————————Node:character Text: u
|—————————Node:' Text: '
|————————Node:: Text: :
|————————Node:expression_statement Text: buffer = optu_mailbox_str;
|—————————Node:assignment_expression Text: buffer = optu_mailbox_str
|——————————Node:identifier Text: buffer
|——————————Node:= Text: =
|——————————Node:identifier Text: optu_mailbox_str
|—————————Node:; Text: ;
|————————Node:expression_statement Text: sscanf(optarg, "%d,%s", &optu_unit, buffer);
|—————————Node:call_expression Text: sscanf(optarg, "%d,%s", &optu_unit, buffer)
|——————————Node:identifier Text: sscanf
|——————————Node:argument_list Text: (optarg, "%d,%s", &optu_unit, buffer)
|———————————Node:( Text: (
|———————————Node:identifier Text: optarg
|———————————Node:, Text: ,
|———————————Node:string_literal Text: "%d,%s"
|————————————Node:" Text: "
|————————————Node:string_content Text: %d,%s
|————————————Node:" Text: "
|———————————Node:, Text: ,
|———————————Node:pointer_expression Text: &optu_unit
|————————————Node:& Text: &
|————————————Node:identifier Text: optu_unit
|———————————Node:, Text: ,
|———————————Node:identifier Text: buffer
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: buffer[2] = 0;
|—————————Node:assignment_expression Text: buffer[2] = 0
|——————————Node:subscript_expression Text: buffer[2]
|———————————Node:identifier Text: buffer
|———————————Node:[ Text: [
|———————————Node:number_literal Text: 2
|———————————Node:] Text: ]
|——————————Node:= Text: =
|——————————Node:number_literal Text: 0
|—————————Node:; Text: ;
|————————Node:if_statement Text: if (strncmp(buffer, "tx", 2) == 0) {
                optu_mailbox_is_tx = 1;
            }
            else if (strncmp(buffer, "rx", 2) == 0) {
                optu_mailbox_is_tx = 0;
            }
            else {
                exit(EXIT_FAILURE);
            }
|—————————Node:if Text: if
|—————————Node:parenthesized_expression Text: (strncmp(buffer, "tx", 2) == 0)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: strncmp(buffer, "tx", 2) == 0
|———————————Node:call_expression Text: strncmp(buffer, "tx", 2)
|————————————Node:identifier Text: strncmp
|————————————Node:argument_list Text: (buffer, "tx", 2)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: buffer
|—————————————Node:, Text: ,
|—————————————Node:string_literal Text: "tx"
|——————————————Node:" Text: "
|——————————————Node:string_content Text: tx
|——————————————Node:" Text: "
|—————————————Node:, Text: ,
|—————————————Node:number_literal Text: 2
|—————————————Node:) Text: )
|———————————Node:== Text: ==
|———————————Node:number_literal Text: 0
|——————————Node:) Text: )
|—————————Node:compound_statement Text: {
                optu_mailbox_is_tx = 1;
            }
|——————————Node:{ Text: {
|——————————Node:expression_statement Text: optu_mailbox_is_tx = 1;
|———————————Node:assignment_expression Text: optu_mailbox_is_tx = 1
|————————————Node:identifier Text: optu_mailbox_is_tx
|————————————Node:= Text: =
|————————————Node:number_literal Text: 1
|———————————Node:; Text: ;
|——————————Node:} Text: }
|—————————Node:else_clause Text: else if (strncmp(buffer, "rx", 2) == 0) {
                optu_mailbox_is_tx = 0;
            }
            else {
                exit(EXIT_FAILURE);
            }
|——————————Node:else Text: else
|——————————Node:if_statement Text: if (strncmp(buffer, "rx", 2) == 0) {
                optu_mailbox_is_tx = 0;
            }
            else {
                exit(EXIT_FAILURE);
            }
|———————————Node:if Text: if
|———————————Node:parenthesized_expression Text: (strncmp(buffer, "rx", 2) == 0)
|————————————Node:( Text: (
|————————————Node:binary_expression Text: strncmp(buffer, "rx", 2) == 0
|—————————————Node:call_expression Text: strncmp(buffer, "rx", 2)
|——————————————Node:identifier Text: strncmp
|——————————————Node:argument_list Text: (buffer, "rx", 2)
|———————————————Node:( Text: (
|———————————————Node:identifier Text: buffer
|———————————————Node:, Text: ,
|———————————————Node:string_literal Text: "rx"
|————————————————Node:" Text: "
|————————————————Node:string_content Text: rx
|————————————————Node:" Text: "
|———————————————Node:, Text: ,
|———————————————Node:number_literal Text: 2
|———————————————Node:) Text: )
|—————————————Node:== Text: ==
|—————————————Node:number_literal Text: 0
|————————————Node:) Text: )
|———————————Node:compound_statement Text: {
                optu_mailbox_is_tx = 0;
            }
|————————————Node:{ Text: {
|————————————Node:expression_statement Text: optu_mailbox_is_tx = 0;
|—————————————Node:assignment_expression Text: optu_mailbox_is_tx = 0
|——————————————Node:identifier Text: optu_mailbox_is_tx
|——————————————Node:= Text: =
|——————————————Node:number_literal Text: 0
|—————————————Node:; Text: ;
|————————————Node:} Text: }
|———————————Node:else_clause Text: else {
                exit(EXIT_FAILURE);
            }
|————————————Node:else Text: else
|————————————Node:compound_statement Text: {
                exit(EXIT_FAILURE);
            }
|—————————————Node:{ Text: {
|—————————————Node:expression_statement Text: exit(EXIT_FAILURE);
|——————————————Node:call_expression Text: exit(EXIT_FAILURE)
|———————————————Node:identifier Text: exit
|———————————————Node:argument_list Text: (EXIT_FAILURE)
|————————————————Node:( Text: (
|————————————————Node:identifier Text: EXIT_FAILURE
|————————————————Node:) Text: )
|——————————————Node:; Text: ;
|—————————————Node:} Text: }
|————————Node:expression_statement Text: sscanf(optu_mailbox_str+2, "%d", &optu_mailbox);
|—————————Node:call_expression Text: sscanf(optu_mailbox_str+2, "%d", &optu_mailbox)
|——————————Node:identifier Text: sscanf
|——————————Node:argument_list Text: (optu_mailbox_str+2, "%d", &optu_mailbox)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: optu_mailbox_str+2
|————————————Node:identifier Text: optu_mailbox_str
|————————————Node:+ Text: +
|————————————Node:number_literal Text: 2
|———————————Node:, Text: ,
|———————————Node:string_literal Text: "%d"
|————————————Node:" Text: "
|————————————Node:string_content Text: %d
|————————————Node:" Text: "
|———————————Node:, Text: ,
|———————————Node:pointer_expression Text: &optu_mailbox
|————————————Node:& Text: &
|————————————Node:identifier Text: optu_mailbox
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:break_statement Text: break;
|—————————Node:break Text: break
|—————————Node:; Text: ;
|———————Node:case_statement Text: case 'w':
            print_warranty();
            return EXIT_SUCCESS;
|————————Node:case Text: case
|————————Node:char_literal Text: 'w'
|—————————Node:' Text: '
|—————————Node:character Text: w
|—————————Node:' Text: '
|————————Node:: Text: :
|————————Node:expression_statement Text: print_warranty();
|—————————Node:call_expression Text: print_warranty()
|——————————Node:identifier Text: print_warranty
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:return_statement Text: return EXIT_SUCCESS;
|—————————Node:return Text: return
|—————————Node:identifier Text: EXIT_SUCCESS
|—————————Node:; Text: ;
|———————Node:case_statement Text: case 'c':
            print_license();
            return EXIT_SUCCESS;
|————————Node:case Text: case
|————————Node:char_literal Text: 'c'
|—————————Node:' Text: '
|—————————Node:character Text: c
|—————————Node:' Text: '
|————————Node:: Text: :
|————————Node:expression_statement Text: print_license();
|—————————Node:call_expression Text: print_license()
|——————————Node:identifier Text: print_license
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:return_statement Text: return EXIT_SUCCESS;
|—————————Node:return Text: return
|—————————Node:identifier Text: EXIT_SUCCESS
|—————————Node:; Text: ;
|———————Node:case_statement Text: case '?':
|————————Node:case Text: case
|————————Node:char_literal Text: '?'
|—————————Node:' Text: '
|—————————Node:character Text: ?
|—————————Node:' Text: '
|————————Node:: Text: :
|———————Node:case_statement Text: case 'h':
            help(argv[0]);
            return EXIT_SUCCESS;
|————————Node:case Text: case
|————————Node:char_literal Text: 'h'
|—————————Node:' Text: '
|—————————Node:character Text: h
|—————————Node:' Text: '
|————————Node:: Text: :
|————————Node:expression_statement Text: help(argv[0]);
|—————————Node:call_expression Text: help(argv[0])
|——————————Node:identifier Text: help
|——————————Node:argument_list Text: (argv[0])
|———————————Node:( Text: (
|———————————Node:subscript_expression Text: argv[0]
|————————————Node:identifier Text: argv
|————————————Node:[ Text: [
|————————————Node:number_literal Text: 0
|————————————Node:] Text: ]
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:return_statement Text: return EXIT_SUCCESS;
|—————————Node:return Text: return
|—————————Node:identifier Text: EXIT_SUCCESS
|—————————Node:; Text: ;
|———————Node:case_statement Text: default:
            printf("invalid option %c\n", opt);
            break;
|————————Node:default Text: default
|————————Node:: Text: :
|————————Node:expression_statement Text: printf("invalid option %c\n", opt);
|—————————Node:call_expression Text: printf("invalid option %c\n", opt)
|——————————Node:identifier Text: printf
|——————————Node:argument_list Text: ("invalid option %c\n", opt)
|———————————Node:( Text: (
|———————————Node:string_literal Text: "invalid option %c\n"
|————————————Node:" Text: "
|————————————Node:string_content Text: invalid option %c
|————————————Node:escape_sequence Text: \n
|————————————Node:" Text: "
|———————————Node:, Text: ,
|———————————Node:identifier Text: opt
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:break_statement Text: break;
|—————————Node:break Text: break
|—————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:expression_statement Text: signal(SIGINT, sigint_signal_handler);
|————Node:call_expression Text: signal(SIGINT, sigint_signal_handler)
|—————Node:identifier Text: signal
|—————Node:argument_list Text: (SIGINT, sigint_signal_handler)
|——————Node:( Text: (
|——————Node:identifier Text: SIGINT
|——————Node:, Text: ,
|——————Node:identifier Text: sigint_signal_handler
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: int     ret = EOK;
|————Node:primitive_type Text: int
|————Node:init_declarator Text: ret = EOK
|—————Node:identifier Text: ret
|—————Node:= Text: =
|—————Node:identifier Text: EOK
|————Node:; Text: ;
|———Node:declaration Text: struct  can_msg canmsg;
|————Node:struct_specifier Text: struct  can_msg
|—————Node:struct Text: struct
|—————Node:type_identifier Text: can_msg
|————Node:identifier Text: canmsg
|————Node:; Text: ;
|———Node:declaration Text: char OPEN_FILE[16];
|————Node:primitive_type Text: char
|————Node:array_declarator Text: OPEN_FILE[16]
|—————Node:identifier Text: OPEN_FILE
|—————Node:[ Text: [
|—————Node:number_literal Text: 16
|—————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: snprintf( OPEN_FILE, 16, "/dev/can%d/%s%d",
            optu_unit,
            (optu_mailbox_is_tx ? "tx" : "rx"), optu_mailbox );
|————Node:call_expression Text: snprintf( OPEN_FILE, 16, "/dev/can%d/%s%d",
            optu_unit,
            (optu_mailbox_is_tx ? "tx" : "rx"), optu_mailbox )
|—————Node:identifier Text: snprintf
|—————Node:argument_list Text: ( OPEN_FILE, 16, "/dev/can%d/%s%d",
            optu_unit,
            (optu_mailbox_is_tx ? "tx" : "rx"), optu_mailbox )
|——————Node:( Text: (
|——————Node:identifier Text: OPEN_FILE
|——————Node:, Text: ,
|——————Node:number_literal Text: 16
|——————Node:, Text: ,
|——————Node:string_literal Text: "/dev/can%d/%s%d"
|———————Node:" Text: "
|———————Node:string_content Text: /dev/can%d/%s%d
|———————Node:" Text: "
|——————Node:, Text: ,
|——————Node:identifier Text: optu_unit
|——————Node:, Text: ,
|——————Node:parenthesized_expression Text: (optu_mailbox_is_tx ? "tx" : "rx")
|———————Node:( Text: (
|———————Node:conditional_expression Text: optu_mailbox_is_tx ? "tx" : "rx"
|————————Node:identifier Text: optu_mailbox_is_tx
|————————Node:? Text: ?
|————————Node:string_literal Text: "tx"
|—————————Node:" Text: "
|—————————Node:string_content Text: tx
|—————————Node:" Text: "
|————————Node:: Text: :
|————————Node:string_literal Text: "rx"
|—————————Node:" Text: "
|—————————Node:string_content Text: rx
|—————————Node:" Text: "
|———————Node:) Text: )
|——————Node:, Text: ,
|——————Node:identifier Text: optu_mailbox
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if ((fd = open(OPEN_FILE, O_RDWR)) == -1) {
        printf("candump error: %s\n", strerror(errno));

        exit(EXIT_FAILURE);
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: ((fd = open(OPEN_FILE, O_RDWR)) == -1)
|—————Node:( Text: (
|—————Node:binary_expression Text: (fd = open(OPEN_FILE, O_RDWR)) == -1
|——————Node:parenthesized_expression Text: (fd = open(OPEN_FILE, O_RDWR))
|———————Node:( Text: (
|———————Node:assignment_expression Text: fd = open(OPEN_FILE, O_RDWR)
|————————Node:identifier Text: fd
|————————Node:= Text: =
|————————Node:call_expression Text: open(OPEN_FILE, O_RDWR)
|—————————Node:identifier Text: open
|—————————Node:argument_list Text: (OPEN_FILE, O_RDWR)
|——————————Node:( Text: (
|——————————Node:identifier Text: OPEN_FILE
|——————————Node:, Text: ,
|——————————Node:identifier Text: O_RDWR
|——————————Node:) Text: )
|———————Node:) Text: )
|——————Node:== Text: ==
|——————Node:number_literal Text: -1
|—————Node:) Text: )
|————Node:compound_statement Text: {
        printf("candump error: %s\n", strerror(errno));

        exit(EXIT_FAILURE);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: printf("candump error: %s\n", strerror(errno));
|——————Node:call_expression Text: printf("candump error: %s\n", strerror(errno))
|———————Node:identifier Text: printf
|———————Node:argument_list Text: ("candump error: %s\n", strerror(errno))
|————————Node:( Text: (
|————————Node:string_literal Text: "candump error: %s\n"
|—————————Node:" Text: "
|—————————Node:string_content Text: candump error: %s
|—————————Node:escape_sequence Text: \n
|—————————Node:" Text: "
|————————Node:, Text: ,
|————————Node:call_expression Text: strerror(errno)
|—————————Node:identifier Text: strerror
|—————————Node:argument_list Text: (errno)
|——————————Node:( Text: (
|——————————Node:identifier Text: errno
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: exit(EXIT_FAILURE);
|——————Node:call_expression Text: exit(EXIT_FAILURE)
|———————Node:identifier Text: exit
|———————Node:argument_list Text: (EXIT_FAILURE)
|————————Node:( Text: (
|————————Node:identifier Text: EXIT_FAILURE
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:while_statement Text: while (ret == EOK) {
        if ((ret = read_frame_raw_block(fd, &canmsg)) == EOK) {
            printf("  %s TS: %ums [%s] %X [%d] " \
                      "%02X %02X %02X %02X %02X %02X %02X %02X\n",
                    OPEN_FILE,
                    canmsg.ext.timestamp,
                    canmsg.ext.is_extended_mid ? "EFF" : "SFF",
                    /**
                     * Message IDs or MIDs are slightly different on QNX compared
                     * to Linux. The form of the ID depends on whether or not the
                     * driver is using extended MIDs:
                     *
                     *      - In standard 11-bit MIDs, bits 18–28 define the MID.
                     *      - In extended 29-bit MIDs, bits 0–28 define the MID.
                     */
                    canmsg.ext.is_extended_mid ? canmsg.mid : canmsg.mid >> 18,
                    canmsg.len,
                    canmsg.dat[0],
                    canmsg.dat[1],
                    canmsg.dat[2],
                    canmsg.dat[3],
                    canmsg.dat[4],
                    canmsg.dat[5],
                    canmsg.dat[6],
                    canmsg.dat[7]);
        }
    }
|————Node:while Text: while
|————Node:parenthesized_expression Text: (ret == EOK)
|—————Node:( Text: (
|—————Node:binary_expression Text: ret == EOK
|——————Node:identifier Text: ret
|——————Node:== Text: ==
|——————Node:identifier Text: EOK
|—————Node:) Text: )
|————Node:compound_statement Text: {
        if ((ret = read_frame_raw_block(fd, &canmsg)) == EOK) {
            printf("  %s TS: %ums [%s] %X [%d] " \
                      "%02X %02X %02X %02X %02X %02X %02X %02X\n",
                    OPEN_FILE,
                    canmsg.ext.timestamp,
                    canmsg.ext.is_extended_mid ? "EFF" : "SFF",
                    /**
                     * Message IDs or MIDs are slightly different on QNX compared
                     * to Linux. The form of the ID depends on whether or not the
                     * driver is using extended MIDs:
                     *
                     *      - In standard 11-bit MIDs, bits 18–28 define the MID.
                     *      - In extended 29-bit MIDs, bits 0–28 define the MID.
                     */
                    canmsg.ext.is_extended_mid ? canmsg.mid : canmsg.mid >> 18,
                    canmsg.len,
                    canmsg.dat[0],
                    canmsg.dat[1],
                    canmsg.dat[2],
                    canmsg.dat[3],
                    canmsg.dat[4],
                    canmsg.dat[5],
                    canmsg.dat[6],
                    canmsg.dat[7]);
        }
    }
|—————Node:{ Text: {
|—————Node:if_statement Text: if ((ret = read_frame_raw_block(fd, &canmsg)) == EOK) {
            printf("  %s TS: %ums [%s] %X [%d] " \
                      "%02X %02X %02X %02X %02X %02X %02X %02X\n",
                    OPEN_FILE,
                    canmsg.ext.timestamp,
                    canmsg.ext.is_extended_mid ? "EFF" : "SFF",
                    /**
                     * Message IDs or MIDs are slightly different on QNX compared
                     * to Linux. The form of the ID depends on whether or not the
                     * driver is using extended MIDs:
                     *
                     *      - In standard 11-bit MIDs, bits 18–28 define the MID.
                     *      - In extended 29-bit MIDs, bits 0–28 define the MID.
                     */
                    canmsg.ext.is_extended_mid ? canmsg.mid : canmsg.mid >> 18,
                    canmsg.len,
                    canmsg.dat[0],
                    canmsg.dat[1],
                    canmsg.dat[2],
                    canmsg.dat[3],
                    canmsg.dat[4],
                    canmsg.dat[5],
                    canmsg.dat[6],
                    canmsg.dat[7]);
        }
|——————Node:if Text: if
|——————Node:parenthesized_expression Text: ((ret = read_frame_raw_block(fd, &canmsg)) == EOK)
|———————Node:( Text: (
|———————Node:binary_expression Text: (ret = read_frame_raw_block(fd, &canmsg)) == EOK
|————————Node:parenthesized_expression Text: (ret = read_frame_raw_block(fd, &canmsg))
|—————————Node:( Text: (
|—————————Node:assignment_expression Text: ret = read_frame_raw_block(fd, &canmsg)
|——————————Node:identifier Text: ret
|——————————Node:= Text: =
|——————————Node:call_expression Text: read_frame_raw_block(fd, &canmsg)
|———————————Node:identifier Text: read_frame_raw_block
|———————————Node:argument_list Text: (fd, &canmsg)
|————————————Node:( Text: (
|————————————Node:identifier Text: fd
|————————————Node:, Text: ,
|————————————Node:pointer_expression Text: &canmsg
|—————————————Node:& Text: &
|—————————————Node:identifier Text: canmsg
|————————————Node:) Text: )
|—————————Node:) Text: )
|————————Node:== Text: ==
|————————Node:identifier Text: EOK
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            printf("  %s TS: %ums [%s] %X [%d] " \
                      "%02X %02X %02X %02X %02X %02X %02X %02X\n",
                    OPEN_FILE,
                    canmsg.ext.timestamp,
                    canmsg.ext.is_extended_mid ? "EFF" : "SFF",
                    /**
                     * Message IDs or MIDs are slightly different on QNX compared
                     * to Linux. The form of the ID depends on whether or not the
                     * driver is using extended MIDs:
                     *
                     *      - In standard 11-bit MIDs, bits 18–28 define the MID.
                     *      - In extended 29-bit MIDs, bits 0–28 define the MID.
                     */
                    canmsg.ext.is_extended_mid ? canmsg.mid : canmsg.mid >> 18,
                    canmsg.len,
                    canmsg.dat[0],
                    canmsg.dat[1],
                    canmsg.dat[2],
                    canmsg.dat[3],
                    canmsg.dat[4],
                    canmsg.dat[5],
                    canmsg.dat[6],
                    canmsg.dat[7]);
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: printf("  %s TS: %ums [%s] %X [%d] " \
                      "%02X %02X %02X %02X %02X %02X %02X %02X\n",
                    OPEN_FILE,
                    canmsg.ext.timestamp,
                    canmsg.ext.is_extended_mid ? "EFF" : "SFF",
                    /**
                     * Message IDs or MIDs are slightly different on QNX compared
                     * to Linux. The form of the ID depends on whether or not the
                     * driver is using extended MIDs:
                     *
                     *      - In standard 11-bit MIDs, bits 18–28 define the MID.
                     *      - In extended 29-bit MIDs, bits 0–28 define the MID.
                     */
                    canmsg.ext.is_extended_mid ? canmsg.mid : canmsg.mid >> 18,
                    canmsg.len,
                    canmsg.dat[0],
                    canmsg.dat[1],
                    canmsg.dat[2],
                    canmsg.dat[3],
                    canmsg.dat[4],
                    canmsg.dat[5],
                    canmsg.dat[6],
                    canmsg.dat[7]);
|————————Node:call_expression Text: printf("  %s TS: %ums [%s] %X [%d] " \
                      "%02X %02X %02X %02X %02X %02X %02X %02X\n",
                    OPEN_FILE,
                    canmsg.ext.timestamp,
                    canmsg.ext.is_extended_mid ? "EFF" : "SFF",
                    /**
                     * Message IDs or MIDs are slightly different on QNX compared
                     * to Linux. The form of the ID depends on whether or not the
                     * driver is using extended MIDs:
                     *
                     *      - In standard 11-bit MIDs, bits 18–28 define the MID.
                     *      - In extended 29-bit MIDs, bits 0–28 define the MID.
                     */
                    canmsg.ext.is_extended_mid ? canmsg.mid : canmsg.mid >> 18,
                    canmsg.len,
                    canmsg.dat[0],
                    canmsg.dat[1],
                    canmsg.dat[2],
                    canmsg.dat[3],
                    canmsg.dat[4],
                    canmsg.dat[5],
                    canmsg.dat[6],
                    canmsg.dat[7])
|—————————Node:identifier Text: printf
|—————————Node:argument_list Text: ("  %s TS: %ums [%s] %X [%d] " \
                      "%02X %02X %02X %02X %02X %02X %02X %02X\n",
                    OPEN_FILE,
                    canmsg.ext.timestamp,
                    canmsg.ext.is_extended_mid ? "EFF" : "SFF",
                    /**
                     * Message IDs or MIDs are slightly different on QNX compared
                     * to Linux. The form of the ID depends on whether or not the
                     * driver is using extended MIDs:
                     *
                     *      - In standard 11-bit MIDs, bits 18–28 define the MID.
                     *      - In extended 29-bit MIDs, bits 0–28 define the MID.
                     */
                    canmsg.ext.is_extended_mid ? canmsg.mid : canmsg.mid >> 18,
                    canmsg.len,
                    canmsg.dat[0],
                    canmsg.dat[1],
                    canmsg.dat[2],
                    canmsg.dat[3],
                    canmsg.dat[4],
                    canmsg.dat[5],
                    canmsg.dat[6],
                    canmsg.dat[7])
|——————————Node:( Text: (
|——————————Node:concatenated_string Text: "  %s TS: %ums [%s] %X [%d] " \
                      "%02X %02X %02X %02X %02X %02X %02X %02X\n"
|———————————Node:string_literal Text: "  %s TS: %ums [%s] %X [%d] "
|————————————Node:" Text: "
|————————————Node:string_content Text:   %s TS: %ums [%s] %X [%d] 
|————————————Node:" Text: "
|———————————Node:string_literal Text: "%02X %02X %02X %02X %02X %02X %02X %02X\n"
|————————————Node:" Text: "
|————————————Node:string_content Text: %02X %02X %02X %02X %02X %02X %02X %02X
|————————————Node:escape_sequence Text: \n
|————————————Node:" Text: "
|——————————Node:, Text: ,
|——————————Node:identifier Text: OPEN_FILE
|——————————Node:, Text: ,
|——————————Node:field_expression Text: canmsg.ext.timestamp
|———————————Node:field_expression Text: canmsg.ext
|————————————Node:identifier Text: canmsg
|————————————Node:. Text: .
|————————————Node:field_identifier Text: ext
|———————————Node:. Text: .
|———————————Node:field_identifier Text: timestamp
|——————————Node:, Text: ,
|——————————Node:conditional_expression Text: canmsg.ext.is_extended_mid ? "EFF" : "SFF"
|———————————Node:field_expression Text: canmsg.ext.is_extended_mid
|————————————Node:field_expression Text: canmsg.ext
|—————————————Node:identifier Text: canmsg
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: ext
|————————————Node:. Text: .
|————————————Node:field_identifier Text: is_extended_mid
|———————————Node:? Text: ?
|———————————Node:string_literal Text: "EFF"
|————————————Node:" Text: "
|————————————Node:string_content Text: EFF
|————————————Node:" Text: "
|———————————Node:: Text: :
|———————————Node:string_literal Text: "SFF"
|————————————Node:" Text: "
|————————————Node:string_content Text: SFF
|————————————Node:" Text: "
|——————————Node:, Text: ,
|——————————Node:comment Text: /**
                     * Message IDs or MIDs are slightly different on QNX compared
                     * to Linux. The form of the ID depends on whether or not the
                     * driver is using extended MIDs:
                     *
                     *      - In standard 11-bit MIDs, bits 18–28 define the MID.
                     *      - In extended 29-bit MIDs, bits 0–28 define the MID.
                     */
|——————————Node:conditional_expression Text: canmsg.ext.is_extended_mid ? canmsg.mid : canmsg.mid >> 18
|———————————Node:field_expression Text: canmsg.ext.is_extended_mid
|————————————Node:field_expression Text: canmsg.ext
|—————————————Node:identifier Text: canmsg
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: ext
|————————————Node:. Text: .
|————————————Node:field_identifier Text: is_extended_mid
|———————————Node:? Text: ?
|———————————Node:field_expression Text: canmsg.mid
|————————————Node:identifier Text: canmsg
|————————————Node:. Text: .
|————————————Node:field_identifier Text: mid
|———————————Node:: Text: :
|———————————Node:binary_expression Text: canmsg.mid >> 18
|————————————Node:field_expression Text: canmsg.mid
|—————————————Node:identifier Text: canmsg
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: mid
|————————————Node:>> Text: >>
|————————————Node:number_literal Text: 18
|——————————Node:, Text: ,
|——————————Node:field_expression Text: canmsg.len
|———————————Node:identifier Text: canmsg
|———————————Node:. Text: .
|———————————Node:field_identifier Text: len
|——————————Node:, Text: ,
|——————————Node:subscript_expression Text: canmsg.dat[0]
|———————————Node:field_expression Text: canmsg.dat
|————————————Node:identifier Text: canmsg
|————————————Node:. Text: .
|————————————Node:field_identifier Text: dat
|———————————Node:[ Text: [
|———————————Node:number_literal Text: 0
|———————————Node:] Text: ]
|——————————Node:, Text: ,
|——————————Node:subscript_expression Text: canmsg.dat[1]
|———————————Node:field_expression Text: canmsg.dat
|————————————Node:identifier Text: canmsg
|————————————Node:. Text: .
|————————————Node:field_identifier Text: dat
|———————————Node:[ Text: [
|———————————Node:number_literal Text: 1
|———————————Node:] Text: ]
|——————————Node:, Text: ,
|——————————Node:subscript_expression Text: canmsg.dat[2]
|———————————Node:field_expression Text: canmsg.dat
|————————————Node:identifier Text: canmsg
|————————————Node:. Text: .
|————————————Node:field_identifier Text: dat
|———————————Node:[ Text: [
|———————————Node:number_literal Text: 2
|———————————Node:] Text: ]
|——————————Node:, Text: ,
|——————————Node:subscript_expression Text: canmsg.dat[3]
|———————————Node:field_expression Text: canmsg.dat
|————————————Node:identifier Text: canmsg
|————————————Node:. Text: .
|————————————Node:field_identifier Text: dat
|———————————Node:[ Text: [
|———————————Node:number_literal Text: 3
|———————————Node:] Text: ]
|——————————Node:, Text: ,
|——————————Node:subscript_expression Text: canmsg.dat[4]
|———————————Node:field_expression Text: canmsg.dat
|————————————Node:identifier Text: canmsg
|————————————Node:. Text: .
|————————————Node:field_identifier Text: dat
|———————————Node:[ Text: [
|———————————Node:number_literal Text: 4
|———————————Node:] Text: ]
|——————————Node:, Text: ,
|——————————Node:subscript_expression Text: canmsg.dat[5]
|———————————Node:field_expression Text: canmsg.dat
|————————————Node:identifier Text: canmsg
|————————————Node:. Text: .
|————————————Node:field_identifier Text: dat
|———————————Node:[ Text: [
|———————————Node:number_literal Text: 5
|———————————Node:] Text: ]
|——————————Node:, Text: ,
|——————————Node:subscript_expression Text: canmsg.dat[6]
|———————————Node:field_expression Text: canmsg.dat
|————————————Node:identifier Text: canmsg
|————————————Node:. Text: .
|————————————Node:field_identifier Text: dat
|———————————Node:[ Text: [
|———————————Node:number_literal Text: 6
|———————————Node:] Text: ]
|——————————Node:, Text: ,
|——————————Node:subscript_expression Text: canmsg.dat[7]
|———————————Node:field_expression Text: canmsg.dat
|————————————Node:identifier Text: canmsg
|————————————Node:. Text: .
|————————————Node:field_identifier Text: dat
|———————————Node:[ Text: [
|———————————Node:number_literal Text: 7
|———————————Node:] Text: ]
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:expression_statement Text: close(fd);
|————Node:call_expression Text: close(fd)
|—————Node:identifier Text: close
|—————Node:argument_list Text: (fd)
|——————Node:( Text: (
|——————Node:identifier Text: fd
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return ret;
|————Node:return Text: return
|————Node:identifier Text: ret
|————Node:; Text: ;
|———Node:} Text: }
