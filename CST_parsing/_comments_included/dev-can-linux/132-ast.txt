dev-can-linux-dev-can-linux\commands.h

|Node:translation_unit
|—Node:comment Text: /*
 * \file    commands.h
 *
 * Copyright (C) 2022 Deniz Eren <deniz.eren@outlook.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
|—Node:preproc_include Text: #include <stdio.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <stdio.h>
|—Node:preproc_include Text: #include <stdlib.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <stdlib.h>
|—Node:preproc_include Text: #include <string.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <string.h>
|—Node:preproc_include Text: #include <errno.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <errno.h>
|—Node:preproc_if Text: #if DEVCANLINUX_SYSLOG == 1
#include <syslog.h>
#endif
|——Node:#if Text: #if
|——Node:binary_expression Text: DEVCANLINUX_SYSLOG == 1
|———Node:identifier Text: DEVCANLINUX_SYSLOG
|———Node:== Text: ==
|———Node:number_literal Text: 1
|——Node:
 Text: 

|——Node:preproc_include Text: #include <syslog.h>

|———Node:#include Text: #include
|———Node:system_lib_string Text: <syslog.h>
|——Node:#endif Text: #endif
|—Node:preproc_include Text: #include <fcntl.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <fcntl.h>
|—Node:preproc_include Text: #include <sys/can_dcmd.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <sys/can_dcmd.h>
|—Node:preproc_if Text: #if DEVCANLINUX_SYSLOG == 1
# define SYSLOG_ERR(fmt, arg...) syslog(LOG_ERR, fmt, ##arg)
#else
# define SYSLOG_ERR(fmt, arg...)
#endif
|——Node:#if Text: #if
|——Node:binary_expression Text: DEVCANLINUX_SYSLOG == 1
|———Node:identifier Text: DEVCANLINUX_SYSLOG
|———Node:== Text: ==
|———Node:number_literal Text: 1
|——Node:
 Text: 

|——Node:preproc_function_def Text: # define SYSLOG_ERR(fmt, arg...) syslog(LOG_ERR, fmt, ##arg)

|———Node:#define Text: # define
|———Node:identifier Text: SYSLOG_ERR
|———Node:preproc_params Text: (fmt, arg...)
|————Node:( Text: (
|————Node:identifier Text: fmt
|————Node:, Text: ,
|————Node:identifier Text: arg
|————Node:ERROR Text: ...
|—————Node:... Text: ...
|————Node:) Text: )
|———Node:preproc_arg Text: syslog(LOG_ERR, fmt, ##arg)
|——Node:preproc_else Text: #else
# define SYSLOG_ERR(fmt, arg...)

|———Node:#else Text: #else
|———Node:preproc_function_def Text: # define SYSLOG_ERR(fmt, arg...)

|————Node:#define Text: # define
|————Node:identifier Text: SYSLOG_ERR
|————Node:preproc_params Text: (fmt, arg...)
|—————Node:( Text: (
|—————Node:identifier Text: fmt
|—————Node:, Text: ,
|—————Node:identifier Text: arg
|—————Node:ERROR Text: ...
|——————Node:... Text: ...
|—————Node:) Text: )
|——Node:#endif Text: #endif
|—Node:preproc_if Text: #if DEVCANLINUX_STDERR == 1
# define FPRINTF_ERR(fmt, arg...) fprintf(stderr, fmt, ##arg)
#else
# define FPRINTF_ERR(fmt, arg...)
#endif
|——Node:#if Text: #if
|——Node:binary_expression Text: DEVCANLINUX_STDERR == 1
|———Node:identifier Text: DEVCANLINUX_STDERR
|———Node:== Text: ==
|———Node:number_literal Text: 1
|——Node:
 Text: 

|——Node:preproc_function_def Text: # define FPRINTF_ERR(fmt, arg...) fprintf(stderr, fmt, ##arg)

|———Node:#define Text: # define
|———Node:identifier Text: FPRINTF_ERR
|———Node:preproc_params Text: (fmt, arg...)
|————Node:( Text: (
|————Node:identifier Text: fmt
|————Node:, Text: ,
|————Node:identifier Text: arg
|————Node:ERROR Text: ...
|—————Node:... Text: ...
|————Node:) Text: )
|———Node:preproc_arg Text: fprintf(stderr, fmt, ##arg)
|——Node:preproc_else Text: #else
# define FPRINTF_ERR(fmt, arg...)

|———Node:#else Text: #else
|———Node:preproc_function_def Text: # define FPRINTF_ERR(fmt, arg...)

|————Node:#define Text: # define
|————Node:identifier Text: FPRINTF_ERR
|————Node:preproc_params Text: (fmt, arg...)
|—————Node:( Text: (
|—————Node:identifier Text: fmt
|—————Node:, Text: ,
|—————Node:identifier Text: arg
|—————Node:ERROR Text: ...
|——————Node:... Text: ...
|—————Node:) Text: )
|——Node:#endif Text: #endif
|—Node:preproc_function_def Text: #define log_error(fmt, arg...) {   \
        SYSLOG_ERR(fmt, ##arg);  \
        FPRINTF_ERR(fmt, ##arg); \
    }

|——Node:#define Text: #define
|——Node:identifier Text: log_error
|——Node:preproc_params Text: (fmt, arg...)
|———Node:( Text: (
|———Node:identifier Text: fmt
|———Node:, Text: ,
|———Node:identifier Text: arg
|———Node:ERROR Text: ...
|————Node:... Text: ...
|———Node:) Text: )
|——Node:preproc_arg Text: {   \
        SYSLOG_ERR(fmt, ##arg);  \
        FPRINTF_ERR(fmt, ##arg); \
    }
|—Node:comment Text: /*
 * Extended devctl() commands; these are in addition to the standard
 * QNX dev-can-* driver protocol commands
 */
|—Node:preproc_def Text: #define EXT_CAN_CMD_CODE                    0x54

|——Node:#define Text: #define
|——Node:identifier Text: EXT_CAN_CMD_CODE
|——Node:preproc_arg Text: 0x54
|—Node:preproc_def Text: #define EXT_CAN_DEVCTL_SET_LATENCY_LIMIT_MS __DIOT(_DCMD_MISC, EXT_CAN_CMD_CODE + 0,  uint32_t)

|——Node:#define Text: #define
|——Node:identifier Text: EXT_CAN_DEVCTL_SET_LATENCY_LIMIT_MS
|——Node:preproc_arg Text: __DIOT(_DCMD_MISC, EXT_CAN_CMD_CODE + 0,  uint32_t)
|—Node:comment Text: /**
 * Special Note
 *
 * When using functions:
 *      write_frame_raw()
 *      read_frame_raw_block()
 *      read_frame_raw_noblock()
 *      set_mid()
 *      get_mid()
 *      set_mfilter()
 *      get_mfilter()
 *
 * Message IDs or MIDs are slightly different on QNX compared to Linux. The form
 * of the ID depends on whether or not the driver is using extended MIDs:
 *
 *      - In standard 11-bit MIDs, bits 18–28 define the MID.
 *      - In extended 29-bit MIDs, bits 0–28 define the MID.
 */
|—Node:function_definition Text: static inline int write_frame_raw (int filedes, struct can_msg* canmsg) {
    if (canmsg == NULL) {
        log_error("write_frame_raw error: input is NULL\n");

        return EFAULT; /* Bad address */
    }

    int ret;

    if (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_TX_FRAME_RAW,
            canmsg, sizeof(struct can_msg), NULL )))
    {
        log_error("devctl CAN_DEVCTL_TX_FRAME_RAW: %s\n", strerror(ret));

        return ret;
    }

    return EOK;
}
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:storage_class_specifier Text: inline
|———Node:inline Text: inline
|——Node:primitive_type Text: int
|——Node:function_declarator Text: write_frame_raw (int filedes, struct can_msg* canmsg)
|———Node:identifier Text: write_frame_raw
|———Node:parameter_list Text: (int filedes, struct can_msg* canmsg)
|————Node:( Text: (
|————Node:parameter_declaration Text: int filedes
|—————Node:primitive_type Text: int
|—————Node:identifier Text: filedes
|————Node:, Text: ,
|————Node:parameter_declaration Text: struct can_msg* canmsg
|—————Node:struct_specifier Text: struct can_msg
|——————Node:struct Text: struct
|——————Node:type_identifier Text: can_msg
|—————Node:pointer_declarator Text: * canmsg
|——————Node:* Text: *
|——————Node:identifier Text: canmsg
|————Node:) Text: )
|——Node:compound_statement Text: {
    if (canmsg == NULL) {
        log_error("write_frame_raw error: input is NULL\n");

        return EFAULT; /* Bad address */
    }

    int ret;

    if (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_TX_FRAME_RAW,
            canmsg, sizeof(struct can_msg), NULL )))
    {
        log_error("devctl CAN_DEVCTL_TX_FRAME_RAW: %s\n", strerror(ret));

        return ret;
    }

    return EOK;
}
|———Node:{ Text: {
|———Node:if_statement Text: if (canmsg == NULL) {
        log_error("write_frame_raw error: input is NULL\n");

        return EFAULT; /* Bad address */
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: (canmsg == NULL)
|—————Node:( Text: (
|—————Node:binary_expression Text: canmsg == NULL
|——————Node:identifier Text: canmsg
|——————Node:== Text: ==
|——————Node:null Text: NULL
|———————Node:NULL Text: NULL
|—————Node:) Text: )
|————Node:compound_statement Text: {
        log_error("write_frame_raw error: input is NULL\n");

        return EFAULT; /* Bad address */
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: log_error("write_frame_raw error: input is NULL\n");
|——————Node:call_expression Text: log_error("write_frame_raw error: input is NULL\n")
|———————Node:identifier Text: log_error
|———————Node:argument_list Text: ("write_frame_raw error: input is NULL\n")
|————————Node:( Text: (
|————————Node:string_literal Text: "write_frame_raw error: input is NULL\n"
|—————————Node:" Text: "
|—————————Node:string_content Text: write_frame_raw error: input is NULL
|—————————Node:escape_sequence Text: \n
|—————————Node:" Text: "
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return EFAULT;
|——————Node:return Text: return
|——————Node:identifier Text: EFAULT
|——————Node:; Text: ;
|—————Node:comment Text: /* Bad address */
|—————Node:} Text: }
|———Node:declaration Text: int ret;
|————Node:primitive_type Text: int
|————Node:identifier Text: ret
|————Node:; Text: ;
|———Node:if_statement Text: if (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_TX_FRAME_RAW,
            canmsg, sizeof(struct can_msg), NULL )))
    {
        log_error("devctl CAN_DEVCTL_TX_FRAME_RAW: %s\n", strerror(ret));

        return ret;
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_TX_FRAME_RAW,
            canmsg, sizeof(struct can_msg), NULL )))
|—————Node:( Text: (
|—————Node:binary_expression Text: EOK != (ret = devctl(
            filedes, CAN_DEVCTL_TX_FRAME_RAW,
            canmsg, sizeof(struct can_msg), NULL ))
|——————Node:identifier Text: EOK
|——————Node:!= Text: !=
|——————Node:parenthesized_expression Text: (ret = devctl(
            filedes, CAN_DEVCTL_TX_FRAME_RAW,
            canmsg, sizeof(struct can_msg), NULL ))
|———————Node:( Text: (
|———————Node:assignment_expression Text: ret = devctl(
            filedes, CAN_DEVCTL_TX_FRAME_RAW,
            canmsg, sizeof(struct can_msg), NULL )
|————————Node:identifier Text: ret
|————————Node:= Text: =
|————————Node:call_expression Text: devctl(
            filedes, CAN_DEVCTL_TX_FRAME_RAW,
            canmsg, sizeof(struct can_msg), NULL )
|—————————Node:identifier Text: devctl
|—————————Node:argument_list Text: (
            filedes, CAN_DEVCTL_TX_FRAME_RAW,
            canmsg, sizeof(struct can_msg), NULL )
|——————————Node:( Text: (
|——————————Node:identifier Text: filedes
|——————————Node:, Text: ,
|——————————Node:identifier Text: CAN_DEVCTL_TX_FRAME_RAW
|——————————Node:, Text: ,
|——————————Node:identifier Text: canmsg
|——————————Node:, Text: ,
|——————————Node:sizeof_expression Text: sizeof(struct can_msg)
|———————————Node:sizeof Text: sizeof
|———————————Node:( Text: (
|———————————Node:type_descriptor Text: struct can_msg
|————————————Node:struct_specifier Text: struct can_msg
|—————————————Node:struct Text: struct
|—————————————Node:type_identifier Text: can_msg
|———————————Node:) Text: )
|——————————Node:, Text: ,
|——————————Node:null Text: NULL
|———————————Node:NULL Text: NULL
|——————————Node:) Text: )
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        log_error("devctl CAN_DEVCTL_TX_FRAME_RAW: %s\n", strerror(ret));

        return ret;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: log_error("devctl CAN_DEVCTL_TX_FRAME_RAW: %s\n", strerror(ret));
|——————Node:call_expression Text: log_error("devctl CAN_DEVCTL_TX_FRAME_RAW: %s\n", strerror(ret))
|———————Node:identifier Text: log_error
|———————Node:argument_list Text: ("devctl CAN_DEVCTL_TX_FRAME_RAW: %s\n", strerror(ret))
|————————Node:( Text: (
|————————Node:string_literal Text: "devctl CAN_DEVCTL_TX_FRAME_RAW: %s\n"
|—————————Node:" Text: "
|—————————Node:string_content Text: devctl CAN_DEVCTL_TX_FRAME_RAW: %s
|—————————Node:escape_sequence Text: \n
|—————————Node:" Text: "
|————————Node:, Text: ,
|————————Node:call_expression Text: strerror(ret)
|—————————Node:identifier Text: strerror
|—————————Node:argument_list Text: (ret)
|——————————Node:( Text: (
|——————————Node:identifier Text: ret
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return ret;
|——————Node:return Text: return
|——————Node:identifier Text: ret
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return EOK;
|————Node:return Text: return
|————Node:identifier Text: EOK
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: static inline int read_frame_raw_block (int filedes, struct can_msg* canmsg) {
    int ret;
    struct can_msg canmsg_temp;
    struct can_msg* _canmsg = &canmsg_temp;

    if (canmsg) {
        _canmsg = canmsg;
    }

    if (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_RX_FRAME_RAW_BLOCK,
            _canmsg, sizeof(struct can_msg), NULL )))
    {
        log_error("devctl CAN_DEVCTL_RX_FRAME_RAW_BLOCK: %s\n", strerror(ret));

        return ret;
    }

    return EOK;
}
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:storage_class_specifier Text: inline
|———Node:inline Text: inline
|——Node:primitive_type Text: int
|——Node:function_declarator Text: read_frame_raw_block (int filedes, struct can_msg* canmsg)
|———Node:identifier Text: read_frame_raw_block
|———Node:parameter_list Text: (int filedes, struct can_msg* canmsg)
|————Node:( Text: (
|————Node:parameter_declaration Text: int filedes
|—————Node:primitive_type Text: int
|—————Node:identifier Text: filedes
|————Node:, Text: ,
|————Node:parameter_declaration Text: struct can_msg* canmsg
|—————Node:struct_specifier Text: struct can_msg
|——————Node:struct Text: struct
|——————Node:type_identifier Text: can_msg
|—————Node:pointer_declarator Text: * canmsg
|——————Node:* Text: *
|——————Node:identifier Text: canmsg
|————Node:) Text: )
|——Node:compound_statement Text: {
    int ret;
    struct can_msg canmsg_temp;
    struct can_msg* _canmsg = &canmsg_temp;

    if (canmsg) {
        _canmsg = canmsg;
    }

    if (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_RX_FRAME_RAW_BLOCK,
            _canmsg, sizeof(struct can_msg), NULL )))
    {
        log_error("devctl CAN_DEVCTL_RX_FRAME_RAW_BLOCK: %s\n", strerror(ret));

        return ret;
    }

    return EOK;
}
|———Node:{ Text: {
|———Node:declaration Text: int ret;
|————Node:primitive_type Text: int
|————Node:identifier Text: ret
|————Node:; Text: ;
|———Node:declaration Text: struct can_msg canmsg_temp;
|————Node:struct_specifier Text: struct can_msg
|—————Node:struct Text: struct
|—————Node:type_identifier Text: can_msg
|————Node:identifier Text: canmsg_temp
|————Node:; Text: ;
|———Node:declaration Text: struct can_msg* _canmsg = &canmsg_temp;
|————Node:struct_specifier Text: struct can_msg
|—————Node:struct Text: struct
|—————Node:type_identifier Text: can_msg
|————Node:init_declarator Text: * _canmsg = &canmsg_temp
|—————Node:pointer_declarator Text: * _canmsg
|——————Node:* Text: *
|——————Node:identifier Text: _canmsg
|—————Node:= Text: =
|—————Node:pointer_expression Text: &canmsg_temp
|——————Node:& Text: &
|——————Node:identifier Text: canmsg_temp
|————Node:; Text: ;
|———Node:if_statement Text: if (canmsg) {
        _canmsg = canmsg;
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: (canmsg)
|—————Node:( Text: (
|—————Node:identifier Text: canmsg
|—————Node:) Text: )
|————Node:compound_statement Text: {
        _canmsg = canmsg;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: _canmsg = canmsg;
|——————Node:assignment_expression Text: _canmsg = canmsg
|———————Node:identifier Text: _canmsg
|———————Node:= Text: =
|———————Node:identifier Text: canmsg
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:if_statement Text: if (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_RX_FRAME_RAW_BLOCK,
            _canmsg, sizeof(struct can_msg), NULL )))
    {
        log_error("devctl CAN_DEVCTL_RX_FRAME_RAW_BLOCK: %s\n", strerror(ret));

        return ret;
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_RX_FRAME_RAW_BLOCK,
            _canmsg, sizeof(struct can_msg), NULL )))
|—————Node:( Text: (
|—————Node:binary_expression Text: EOK != (ret = devctl(
            filedes, CAN_DEVCTL_RX_FRAME_RAW_BLOCK,
            _canmsg, sizeof(struct can_msg), NULL ))
|——————Node:identifier Text: EOK
|——————Node:!= Text: !=
|——————Node:parenthesized_expression Text: (ret = devctl(
            filedes, CAN_DEVCTL_RX_FRAME_RAW_BLOCK,
            _canmsg, sizeof(struct can_msg), NULL ))
|———————Node:( Text: (
|———————Node:assignment_expression Text: ret = devctl(
            filedes, CAN_DEVCTL_RX_FRAME_RAW_BLOCK,
            _canmsg, sizeof(struct can_msg), NULL )
|————————Node:identifier Text: ret
|————————Node:= Text: =
|————————Node:call_expression Text: devctl(
            filedes, CAN_DEVCTL_RX_FRAME_RAW_BLOCK,
            _canmsg, sizeof(struct can_msg), NULL )
|—————————Node:identifier Text: devctl
|—————————Node:argument_list Text: (
            filedes, CAN_DEVCTL_RX_FRAME_RAW_BLOCK,
            _canmsg, sizeof(struct can_msg), NULL )
|——————————Node:( Text: (
|——————————Node:identifier Text: filedes
|——————————Node:, Text: ,
|——————————Node:identifier Text: CAN_DEVCTL_RX_FRAME_RAW_BLOCK
|——————————Node:, Text: ,
|——————————Node:identifier Text: _canmsg
|——————————Node:, Text: ,
|——————————Node:sizeof_expression Text: sizeof(struct can_msg)
|———————————Node:sizeof Text: sizeof
|———————————Node:( Text: (
|———————————Node:type_descriptor Text: struct can_msg
|————————————Node:struct_specifier Text: struct can_msg
|—————————————Node:struct Text: struct
|—————————————Node:type_identifier Text: can_msg
|———————————Node:) Text: )
|——————————Node:, Text: ,
|——————————Node:null Text: NULL
|———————————Node:NULL Text: NULL
|——————————Node:) Text: )
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        log_error("devctl CAN_DEVCTL_RX_FRAME_RAW_BLOCK: %s\n", strerror(ret));

        return ret;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: log_error("devctl CAN_DEVCTL_RX_FRAME_RAW_BLOCK: %s\n", strerror(ret));
|——————Node:call_expression Text: log_error("devctl CAN_DEVCTL_RX_FRAME_RAW_BLOCK: %s\n", strerror(ret))
|———————Node:identifier Text: log_error
|———————Node:argument_list Text: ("devctl CAN_DEVCTL_RX_FRAME_RAW_BLOCK: %s\n", strerror(ret))
|————————Node:( Text: (
|————————Node:string_literal Text: "devctl CAN_DEVCTL_RX_FRAME_RAW_BLOCK: %s\n"
|—————————Node:" Text: "
|—————————Node:string_content Text: devctl CAN_DEVCTL_RX_FRAME_RAW_BLOCK: %s
|—————————Node:escape_sequence Text: \n
|—————————Node:" Text: "
|————————Node:, Text: ,
|————————Node:call_expression Text: strerror(ret)
|—————————Node:identifier Text: strerror
|—————————Node:argument_list Text: (ret)
|——————————Node:( Text: (
|——————————Node:identifier Text: ret
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return ret;
|——————Node:return Text: return
|——————Node:identifier Text: ret
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return EOK;
|————Node:return Text: return
|————Node:identifier Text: EOK
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: static inline int read_frame_raw_noblock (int filedes, struct can_msg* canmsg) {
    int ret;
    struct can_msg canmsg_temp;
    struct can_msg* _canmsg = &canmsg_temp;

    if (canmsg) {
        _canmsg = canmsg;
    }

    if (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_RX_FRAME_RAW_NOBLOCK,
            _canmsg, sizeof(struct can_msg), NULL )))
    {
        if (ret != EAGAIN) {
            log_error("devctl CAN_DEVCTL_RX_FRAME_RAW_NOBLOCK: %s\n",
                    strerror(ret));
        }

        return ret;
    }

    return EOK;
}
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:storage_class_specifier Text: inline
|———Node:inline Text: inline
|——Node:primitive_type Text: int
|——Node:function_declarator Text: read_frame_raw_noblock (int filedes, struct can_msg* canmsg)
|———Node:identifier Text: read_frame_raw_noblock
|———Node:parameter_list Text: (int filedes, struct can_msg* canmsg)
|————Node:( Text: (
|————Node:parameter_declaration Text: int filedes
|—————Node:primitive_type Text: int
|—————Node:identifier Text: filedes
|————Node:, Text: ,
|————Node:parameter_declaration Text: struct can_msg* canmsg
|—————Node:struct_specifier Text: struct can_msg
|——————Node:struct Text: struct
|——————Node:type_identifier Text: can_msg
|—————Node:pointer_declarator Text: * canmsg
|——————Node:* Text: *
|——————Node:identifier Text: canmsg
|————Node:) Text: )
|——Node:compound_statement Text: {
    int ret;
    struct can_msg canmsg_temp;
    struct can_msg* _canmsg = &canmsg_temp;

    if (canmsg) {
        _canmsg = canmsg;
    }

    if (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_RX_FRAME_RAW_NOBLOCK,
            _canmsg, sizeof(struct can_msg), NULL )))
    {
        if (ret != EAGAIN) {
            log_error("devctl CAN_DEVCTL_RX_FRAME_RAW_NOBLOCK: %s\n",
                    strerror(ret));
        }

        return ret;
    }

    return EOK;
}
|———Node:{ Text: {
|———Node:declaration Text: int ret;
|————Node:primitive_type Text: int
|————Node:identifier Text: ret
|————Node:; Text: ;
|———Node:declaration Text: struct can_msg canmsg_temp;
|————Node:struct_specifier Text: struct can_msg
|—————Node:struct Text: struct
|—————Node:type_identifier Text: can_msg
|————Node:identifier Text: canmsg_temp
|————Node:; Text: ;
|———Node:declaration Text: struct can_msg* _canmsg = &canmsg_temp;
|————Node:struct_specifier Text: struct can_msg
|—————Node:struct Text: struct
|—————Node:type_identifier Text: can_msg
|————Node:init_declarator Text: * _canmsg = &canmsg_temp
|—————Node:pointer_declarator Text: * _canmsg
|——————Node:* Text: *
|——————Node:identifier Text: _canmsg
|—————Node:= Text: =
|—————Node:pointer_expression Text: &canmsg_temp
|——————Node:& Text: &
|——————Node:identifier Text: canmsg_temp
|————Node:; Text: ;
|———Node:if_statement Text: if (canmsg) {
        _canmsg = canmsg;
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: (canmsg)
|—————Node:( Text: (
|—————Node:identifier Text: canmsg
|—————Node:) Text: )
|————Node:compound_statement Text: {
        _canmsg = canmsg;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: _canmsg = canmsg;
|——————Node:assignment_expression Text: _canmsg = canmsg
|———————Node:identifier Text: _canmsg
|———————Node:= Text: =
|———————Node:identifier Text: canmsg
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:if_statement Text: if (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_RX_FRAME_RAW_NOBLOCK,
            _canmsg, sizeof(struct can_msg), NULL )))
    {
        if (ret != EAGAIN) {
            log_error("devctl CAN_DEVCTL_RX_FRAME_RAW_NOBLOCK: %s\n",
                    strerror(ret));
        }

        return ret;
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_RX_FRAME_RAW_NOBLOCK,
            _canmsg, sizeof(struct can_msg), NULL )))
|—————Node:( Text: (
|—————Node:binary_expression Text: EOK != (ret = devctl(
            filedes, CAN_DEVCTL_RX_FRAME_RAW_NOBLOCK,
            _canmsg, sizeof(struct can_msg), NULL ))
|——————Node:identifier Text: EOK
|——————Node:!= Text: !=
|——————Node:parenthesized_expression Text: (ret = devctl(
            filedes, CAN_DEVCTL_RX_FRAME_RAW_NOBLOCK,
            _canmsg, sizeof(struct can_msg), NULL ))
|———————Node:( Text: (
|———————Node:assignment_expression Text: ret = devctl(
            filedes, CAN_DEVCTL_RX_FRAME_RAW_NOBLOCK,
            _canmsg, sizeof(struct can_msg), NULL )
|————————Node:identifier Text: ret
|————————Node:= Text: =
|————————Node:call_expression Text: devctl(
            filedes, CAN_DEVCTL_RX_FRAME_RAW_NOBLOCK,
            _canmsg, sizeof(struct can_msg), NULL )
|—————————Node:identifier Text: devctl
|—————————Node:argument_list Text: (
            filedes, CAN_DEVCTL_RX_FRAME_RAW_NOBLOCK,
            _canmsg, sizeof(struct can_msg), NULL )
|——————————Node:( Text: (
|——————————Node:identifier Text: filedes
|——————————Node:, Text: ,
|——————————Node:identifier Text: CAN_DEVCTL_RX_FRAME_RAW_NOBLOCK
|——————————Node:, Text: ,
|——————————Node:identifier Text: _canmsg
|——————————Node:, Text: ,
|——————————Node:sizeof_expression Text: sizeof(struct can_msg)
|———————————Node:sizeof Text: sizeof
|———————————Node:( Text: (
|———————————Node:type_descriptor Text: struct can_msg
|————————————Node:struct_specifier Text: struct can_msg
|—————————————Node:struct Text: struct
|—————————————Node:type_identifier Text: can_msg
|———————————Node:) Text: )
|——————————Node:, Text: ,
|——————————Node:null Text: NULL
|———————————Node:NULL Text: NULL
|——————————Node:) Text: )
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        if (ret != EAGAIN) {
            log_error("devctl CAN_DEVCTL_RX_FRAME_RAW_NOBLOCK: %s\n",
                    strerror(ret));
        }

        return ret;
    }
|—————Node:{ Text: {
|—————Node:if_statement Text: if (ret != EAGAIN) {
            log_error("devctl CAN_DEVCTL_RX_FRAME_RAW_NOBLOCK: %s\n",
                    strerror(ret));
        }
|——————Node:if Text: if
|——————Node:parenthesized_expression Text: (ret != EAGAIN)
|———————Node:( Text: (
|———————Node:binary_expression Text: ret != EAGAIN
|————————Node:identifier Text: ret
|————————Node:!= Text: !=
|————————Node:identifier Text: EAGAIN
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            log_error("devctl CAN_DEVCTL_RX_FRAME_RAW_NOBLOCK: %s\n",
                    strerror(ret));
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: log_error("devctl CAN_DEVCTL_RX_FRAME_RAW_NOBLOCK: %s\n",
                    strerror(ret));
|————————Node:call_expression Text: log_error("devctl CAN_DEVCTL_RX_FRAME_RAW_NOBLOCK: %s\n",
                    strerror(ret))
|—————————Node:identifier Text: log_error
|—————————Node:argument_list Text: ("devctl CAN_DEVCTL_RX_FRAME_RAW_NOBLOCK: %s\n",
                    strerror(ret))
|——————————Node:( Text: (
|——————————Node:string_literal Text: "devctl CAN_DEVCTL_RX_FRAME_RAW_NOBLOCK: %s\n"
|———————————Node:" Text: "
|———————————Node:string_content Text: devctl CAN_DEVCTL_RX_FRAME_RAW_NOBLOCK: %s
|———————————Node:escape_sequence Text: \n
|———————————Node:" Text: "
|——————————Node:, Text: ,
|——————————Node:call_expression Text: strerror(ret)
|———————————Node:identifier Text: strerror
|———————————Node:argument_list Text: (ret)
|————————————Node:( Text: (
|————————————Node:identifier Text: ret
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:return_statement Text: return ret;
|——————Node:return Text: return
|——————Node:identifier Text: ret
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return EOK;
|————Node:return Text: return
|————Node:identifier Text: EOK
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: static inline int set_latency_limit_ms (int filedes, uint32_t value) {
    int ret;

    if (EOK != (ret = devctl(
            filedes, EXT_CAN_DEVCTL_SET_LATENCY_LIMIT_MS,
            &value, sizeof(uint32_t), NULL )))
    {
        log_error("devctl EXT_CAN_DEVCTL_SET_LATENCY_LIMIT_MS: %s\n",
                strerror(ret));

        return ret;
    }

    return EOK;
}
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:storage_class_specifier Text: inline
|———Node:inline Text: inline
|——Node:primitive_type Text: int
|——Node:function_declarator Text: set_latency_limit_ms (int filedes, uint32_t value)
|———Node:identifier Text: set_latency_limit_ms
|———Node:parameter_list Text: (int filedes, uint32_t value)
|————Node:( Text: (
|————Node:parameter_declaration Text: int filedes
|—————Node:primitive_type Text: int
|—————Node:identifier Text: filedes
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint32_t value
|—————Node:primitive_type Text: uint32_t
|—————Node:identifier Text: value
|————Node:) Text: )
|——Node:compound_statement Text: {
    int ret;

    if (EOK != (ret = devctl(
            filedes, EXT_CAN_DEVCTL_SET_LATENCY_LIMIT_MS,
            &value, sizeof(uint32_t), NULL )))
    {
        log_error("devctl EXT_CAN_DEVCTL_SET_LATENCY_LIMIT_MS: %s\n",
                strerror(ret));

        return ret;
    }

    return EOK;
}
|———Node:{ Text: {
|———Node:declaration Text: int ret;
|————Node:primitive_type Text: int
|————Node:identifier Text: ret
|————Node:; Text: ;
|———Node:if_statement Text: if (EOK != (ret = devctl(
            filedes, EXT_CAN_DEVCTL_SET_LATENCY_LIMIT_MS,
            &value, sizeof(uint32_t), NULL )))
    {
        log_error("devctl EXT_CAN_DEVCTL_SET_LATENCY_LIMIT_MS: %s\n",
                strerror(ret));

        return ret;
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: (EOK != (ret = devctl(
            filedes, EXT_CAN_DEVCTL_SET_LATENCY_LIMIT_MS,
            &value, sizeof(uint32_t), NULL )))
|—————Node:( Text: (
|—————Node:binary_expression Text: EOK != (ret = devctl(
            filedes, EXT_CAN_DEVCTL_SET_LATENCY_LIMIT_MS,
            &value, sizeof(uint32_t), NULL ))
|——————Node:identifier Text: EOK
|——————Node:!= Text: !=
|——————Node:parenthesized_expression Text: (ret = devctl(
            filedes, EXT_CAN_DEVCTL_SET_LATENCY_LIMIT_MS,
            &value, sizeof(uint32_t), NULL ))
|———————Node:( Text: (
|———————Node:assignment_expression Text: ret = devctl(
            filedes, EXT_CAN_DEVCTL_SET_LATENCY_LIMIT_MS,
            &value, sizeof(uint32_t), NULL )
|————————Node:identifier Text: ret
|————————Node:= Text: =
|————————Node:call_expression Text: devctl(
            filedes, EXT_CAN_DEVCTL_SET_LATENCY_LIMIT_MS,
            &value, sizeof(uint32_t), NULL )
|—————————Node:identifier Text: devctl
|—————————Node:argument_list Text: (
            filedes, EXT_CAN_DEVCTL_SET_LATENCY_LIMIT_MS,
            &value, sizeof(uint32_t), NULL )
|——————————Node:( Text: (
|——————————Node:identifier Text: filedes
|——————————Node:, Text: ,
|——————————Node:identifier Text: EXT_CAN_DEVCTL_SET_LATENCY_LIMIT_MS
|——————————Node:, Text: ,
|——————————Node:pointer_expression Text: &value
|———————————Node:& Text: &
|———————————Node:identifier Text: value
|——————————Node:, Text: ,
|——————————Node:sizeof_expression Text: sizeof(uint32_t)
|———————————Node:sizeof Text: sizeof
|———————————Node:( Text: (
|———————————Node:type_descriptor Text: uint32_t
|————————————Node:primitive_type Text: uint32_t
|———————————Node:) Text: )
|——————————Node:, Text: ,
|——————————Node:null Text: NULL
|———————————Node:NULL Text: NULL
|——————————Node:) Text: )
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        log_error("devctl EXT_CAN_DEVCTL_SET_LATENCY_LIMIT_MS: %s\n",
                strerror(ret));

        return ret;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: log_error("devctl EXT_CAN_DEVCTL_SET_LATENCY_LIMIT_MS: %s\n",
                strerror(ret));
|——————Node:call_expression Text: log_error("devctl EXT_CAN_DEVCTL_SET_LATENCY_LIMIT_MS: %s\n",
                strerror(ret))
|———————Node:identifier Text: log_error
|———————Node:argument_list Text: ("devctl EXT_CAN_DEVCTL_SET_LATENCY_LIMIT_MS: %s\n",
                strerror(ret))
|————————Node:( Text: (
|————————Node:string_literal Text: "devctl EXT_CAN_DEVCTL_SET_LATENCY_LIMIT_MS: %s\n"
|—————————Node:" Text: "
|—————————Node:string_content Text: devctl EXT_CAN_DEVCTL_SET_LATENCY_LIMIT_MS: %s
|—————————Node:escape_sequence Text: \n
|—————————Node:" Text: "
|————————Node:, Text: ,
|————————Node:call_expression Text: strerror(ret)
|—————————Node:identifier Text: strerror
|—————————Node:argument_list Text: (ret)
|——————————Node:( Text: (
|——————————Node:identifier Text: ret
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return ret;
|——————Node:return Text: return
|——————Node:identifier Text: ret
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return EOK;
|————Node:return Text: return
|————Node:identifier Text: EOK
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: static inline int set_bitrate (int filedes, uint32_t value) {
    int ret;
    struct can_devctl_timing timing = { .ref_clock_freq = value };

    if (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_SET_TIMING,
            &timing, sizeof(struct can_devctl_timing), NULL )))
    {
        log_error("devctl CAN_DEVCTL_SET_TIMING: %s\n", strerror(ret));

        return ret;
    }

    return EOK;
}
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:storage_class_specifier Text: inline
|———Node:inline Text: inline
|——Node:primitive_type Text: int
|——Node:function_declarator Text: set_bitrate (int filedes, uint32_t value)
|———Node:identifier Text: set_bitrate
|———Node:parameter_list Text: (int filedes, uint32_t value)
|————Node:( Text: (
|————Node:parameter_declaration Text: int filedes
|—————Node:primitive_type Text: int
|—————Node:identifier Text: filedes
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint32_t value
|—————Node:primitive_type Text: uint32_t
|—————Node:identifier Text: value
|————Node:) Text: )
|——Node:compound_statement Text: {
    int ret;
    struct can_devctl_timing timing = { .ref_clock_freq = value };

    if (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_SET_TIMING,
            &timing, sizeof(struct can_devctl_timing), NULL )))
    {
        log_error("devctl CAN_DEVCTL_SET_TIMING: %s\n", strerror(ret));

        return ret;
    }

    return EOK;
}
|———Node:{ Text: {
|———Node:declaration Text: int ret;
|————Node:primitive_type Text: int
|————Node:identifier Text: ret
|————Node:; Text: ;
|———Node:declaration Text: struct can_devctl_timing timing = { .ref_clock_freq = value };
|————Node:struct_specifier Text: struct can_devctl_timing
|—————Node:struct Text: struct
|—————Node:type_identifier Text: can_devctl_timing
|————Node:init_declarator Text: timing = { .ref_clock_freq = value }
|—————Node:identifier Text: timing
|—————Node:= Text: =
|—————Node:initializer_list Text: { .ref_clock_freq = value }
|——————Node:{ Text: {
|——————Node:initializer_pair Text: .ref_clock_freq = value
|———————Node:field_designator Text: .ref_clock_freq
|————————Node:. Text: .
|————————Node:field_identifier Text: ref_clock_freq
|———————Node:= Text: =
|———————Node:identifier Text: value
|——————Node:} Text: }
|————Node:; Text: ;
|———Node:if_statement Text: if (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_SET_TIMING,
            &timing, sizeof(struct can_devctl_timing), NULL )))
    {
        log_error("devctl CAN_DEVCTL_SET_TIMING: %s\n", strerror(ret));

        return ret;
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_SET_TIMING,
            &timing, sizeof(struct can_devctl_timing), NULL )))
|—————Node:( Text: (
|—————Node:binary_expression Text: EOK != (ret = devctl(
            filedes, CAN_DEVCTL_SET_TIMING,
            &timing, sizeof(struct can_devctl_timing), NULL ))
|——————Node:identifier Text: EOK
|——————Node:!= Text: !=
|——————Node:parenthesized_expression Text: (ret = devctl(
            filedes, CAN_DEVCTL_SET_TIMING,
            &timing, sizeof(struct can_devctl_timing), NULL ))
|———————Node:( Text: (
|———————Node:assignment_expression Text: ret = devctl(
            filedes, CAN_DEVCTL_SET_TIMING,
            &timing, sizeof(struct can_devctl_timing), NULL )
|————————Node:identifier Text: ret
|————————Node:= Text: =
|————————Node:call_expression Text: devctl(
            filedes, CAN_DEVCTL_SET_TIMING,
            &timing, sizeof(struct can_devctl_timing), NULL )
|—————————Node:identifier Text: devctl
|—————————Node:argument_list Text: (
            filedes, CAN_DEVCTL_SET_TIMING,
            &timing, sizeof(struct can_devctl_timing), NULL )
|——————————Node:( Text: (
|——————————Node:identifier Text: filedes
|——————————Node:, Text: ,
|——————————Node:identifier Text: CAN_DEVCTL_SET_TIMING
|——————————Node:, Text: ,
|——————————Node:pointer_expression Text: &timing
|———————————Node:& Text: &
|———————————Node:identifier Text: timing
|——————————Node:, Text: ,
|——————————Node:sizeof_expression Text: sizeof(struct can_devctl_timing)
|———————————Node:sizeof Text: sizeof
|———————————Node:( Text: (
|———————————Node:type_descriptor Text: struct can_devctl_timing
|————————————Node:struct_specifier Text: struct can_devctl_timing
|—————————————Node:struct Text: struct
|—————————————Node:type_identifier Text: can_devctl_timing
|———————————Node:) Text: )
|——————————Node:, Text: ,
|——————————Node:null Text: NULL
|———————————Node:NULL Text: NULL
|——————————Node:) Text: )
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        log_error("devctl CAN_DEVCTL_SET_TIMING: %s\n", strerror(ret));

        return ret;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: log_error("devctl CAN_DEVCTL_SET_TIMING: %s\n", strerror(ret));
|——————Node:call_expression Text: log_error("devctl CAN_DEVCTL_SET_TIMING: %s\n", strerror(ret))
|———————Node:identifier Text: log_error
|———————Node:argument_list Text: ("devctl CAN_DEVCTL_SET_TIMING: %s\n", strerror(ret))
|————————Node:( Text: (
|————————Node:string_literal Text: "devctl CAN_DEVCTL_SET_TIMING: %s\n"
|—————————Node:" Text: "
|—————————Node:string_content Text: devctl CAN_DEVCTL_SET_TIMING: %s
|—————————Node:escape_sequence Text: \n
|—————————Node:" Text: "
|————————Node:, Text: ,
|————————Node:call_expression Text: strerror(ret)
|—————————Node:identifier Text: strerror
|—————————Node:argument_list Text: (ret)
|——————————Node:( Text: (
|——————————Node:identifier Text: ret
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return ret;
|——————Node:return Text: return
|——————Node:identifier Text: ret
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return EOK;
|————Node:return Text: return
|————Node:identifier Text: EOK
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: static inline int set_bittiming (int filedes, struct can_devctl_timing* timing) {
    int ret;

    if (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_SET_TIMING,
            timing, sizeof(struct can_devctl_timing), NULL )))
    {
        log_error("devctl CAN_DEVCTL_SET_TIMING: %s\n", strerror(ret));

        return ret;
    }

    return EOK;
}
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:storage_class_specifier Text: inline
|———Node:inline Text: inline
|——Node:primitive_type Text: int
|——Node:function_declarator Text: set_bittiming (int filedes, struct can_devctl_timing* timing)
|———Node:identifier Text: set_bittiming
|———Node:parameter_list Text: (int filedes, struct can_devctl_timing* timing)
|————Node:( Text: (
|————Node:parameter_declaration Text: int filedes
|—————Node:primitive_type Text: int
|—————Node:identifier Text: filedes
|————Node:, Text: ,
|————Node:parameter_declaration Text: struct can_devctl_timing* timing
|—————Node:struct_specifier Text: struct can_devctl_timing
|——————Node:struct Text: struct
|——————Node:type_identifier Text: can_devctl_timing
|—————Node:pointer_declarator Text: * timing
|——————Node:* Text: *
|——————Node:identifier Text: timing
|————Node:) Text: )
|——Node:compound_statement Text: {
    int ret;

    if (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_SET_TIMING,
            timing, sizeof(struct can_devctl_timing), NULL )))
    {
        log_error("devctl CAN_DEVCTL_SET_TIMING: %s\n", strerror(ret));

        return ret;
    }

    return EOK;
}
|———Node:{ Text: {
|———Node:declaration Text: int ret;
|————Node:primitive_type Text: int
|————Node:identifier Text: ret
|————Node:; Text: ;
|———Node:if_statement Text: if (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_SET_TIMING,
            timing, sizeof(struct can_devctl_timing), NULL )))
    {
        log_error("devctl CAN_DEVCTL_SET_TIMING: %s\n", strerror(ret));

        return ret;
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_SET_TIMING,
            timing, sizeof(struct can_devctl_timing), NULL )))
|—————Node:( Text: (
|—————Node:binary_expression Text: EOK != (ret = devctl(
            filedes, CAN_DEVCTL_SET_TIMING,
            timing, sizeof(struct can_devctl_timing), NULL ))
|——————Node:identifier Text: EOK
|——————Node:!= Text: !=
|——————Node:parenthesized_expression Text: (ret = devctl(
            filedes, CAN_DEVCTL_SET_TIMING,
            timing, sizeof(struct can_devctl_timing), NULL ))
|———————Node:( Text: (
|———————Node:assignment_expression Text: ret = devctl(
            filedes, CAN_DEVCTL_SET_TIMING,
            timing, sizeof(struct can_devctl_timing), NULL )
|————————Node:identifier Text: ret
|————————Node:= Text: =
|————————Node:call_expression Text: devctl(
            filedes, CAN_DEVCTL_SET_TIMING,
            timing, sizeof(struct can_devctl_timing), NULL )
|—————————Node:identifier Text: devctl
|—————————Node:argument_list Text: (
            filedes, CAN_DEVCTL_SET_TIMING,
            timing, sizeof(struct can_devctl_timing), NULL )
|——————————Node:( Text: (
|——————————Node:identifier Text: filedes
|——————————Node:, Text: ,
|——————————Node:identifier Text: CAN_DEVCTL_SET_TIMING
|——————————Node:, Text: ,
|——————————Node:identifier Text: timing
|——————————Node:, Text: ,
|——————————Node:sizeof_expression Text: sizeof(struct can_devctl_timing)
|———————————Node:sizeof Text: sizeof
|———————————Node:( Text: (
|———————————Node:type_descriptor Text: struct can_devctl_timing
|————————————Node:struct_specifier Text: struct can_devctl_timing
|—————————————Node:struct Text: struct
|—————————————Node:type_identifier Text: can_devctl_timing
|———————————Node:) Text: )
|——————————Node:, Text: ,
|——————————Node:null Text: NULL
|———————————Node:NULL Text: NULL
|——————————Node:) Text: )
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        log_error("devctl CAN_DEVCTL_SET_TIMING: %s\n", strerror(ret));

        return ret;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: log_error("devctl CAN_DEVCTL_SET_TIMING: %s\n", strerror(ret));
|——————Node:call_expression Text: log_error("devctl CAN_DEVCTL_SET_TIMING: %s\n", strerror(ret))
|———————Node:identifier Text: log_error
|———————Node:argument_list Text: ("devctl CAN_DEVCTL_SET_TIMING: %s\n", strerror(ret))
|————————Node:( Text: (
|————————Node:string_literal Text: "devctl CAN_DEVCTL_SET_TIMING: %s\n"
|—————————Node:" Text: "
|—————————Node:string_content Text: devctl CAN_DEVCTL_SET_TIMING: %s
|—————————Node:escape_sequence Text: \n
|—————————Node:" Text: "
|————————Node:, Text: ,
|————————Node:call_expression Text: strerror(ret)
|—————————Node:identifier Text: strerror
|—————————Node:argument_list Text: (ret)
|——————————Node:( Text: (
|——————————Node:identifier Text: ret
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return ret;
|——————Node:return Text: return
|——————Node:identifier Text: ret
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return EOK;
|————Node:return Text: return
|————Node:identifier Text: EOK
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: static inline int get_info (int filedes, struct can_devctl_info* info) {
    int ret;

    if (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_GET_INFO,
            info, sizeof(struct can_devctl_info), NULL )))
    {
        log_error("devctl CAN_DEVCTL_GET_INFO: %s\n", strerror(ret));

        return ret;
    }

    return EOK;
}
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:storage_class_specifier Text: inline
|———Node:inline Text: inline
|——Node:primitive_type Text: int
|——Node:function_declarator Text: get_info (int filedes, struct can_devctl_info* info)
|———Node:identifier Text: get_info
|———Node:parameter_list Text: (int filedes, struct can_devctl_info* info)
|————Node:( Text: (
|————Node:parameter_declaration Text: int filedes
|—————Node:primitive_type Text: int
|—————Node:identifier Text: filedes
|————Node:, Text: ,
|————Node:parameter_declaration Text: struct can_devctl_info* info
|—————Node:struct_specifier Text: struct can_devctl_info
|——————Node:struct Text: struct
|——————Node:type_identifier Text: can_devctl_info
|—————Node:pointer_declarator Text: * info
|——————Node:* Text: *
|——————Node:identifier Text: info
|————Node:) Text: )
|——Node:compound_statement Text: {
    int ret;

    if (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_GET_INFO,
            info, sizeof(struct can_devctl_info), NULL )))
    {
        log_error("devctl CAN_DEVCTL_GET_INFO: %s\n", strerror(ret));

        return ret;
    }

    return EOK;
}
|———Node:{ Text: {
|———Node:declaration Text: int ret;
|————Node:primitive_type Text: int
|————Node:identifier Text: ret
|————Node:; Text: ;
|———Node:if_statement Text: if (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_GET_INFO,
            info, sizeof(struct can_devctl_info), NULL )))
    {
        log_error("devctl CAN_DEVCTL_GET_INFO: %s\n", strerror(ret));

        return ret;
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_GET_INFO,
            info, sizeof(struct can_devctl_info), NULL )))
|—————Node:( Text: (
|—————Node:binary_expression Text: EOK != (ret = devctl(
            filedes, CAN_DEVCTL_GET_INFO,
            info, sizeof(struct can_devctl_info), NULL ))
|——————Node:identifier Text: EOK
|——————Node:!= Text: !=
|——————Node:parenthesized_expression Text: (ret = devctl(
            filedes, CAN_DEVCTL_GET_INFO,
            info, sizeof(struct can_devctl_info), NULL ))
|———————Node:( Text: (
|———————Node:assignment_expression Text: ret = devctl(
            filedes, CAN_DEVCTL_GET_INFO,
            info, sizeof(struct can_devctl_info), NULL )
|————————Node:identifier Text: ret
|————————Node:= Text: =
|————————Node:call_expression Text: devctl(
            filedes, CAN_DEVCTL_GET_INFO,
            info, sizeof(struct can_devctl_info), NULL )
|—————————Node:identifier Text: devctl
|—————————Node:argument_list Text: (
            filedes, CAN_DEVCTL_GET_INFO,
            info, sizeof(struct can_devctl_info), NULL )
|——————————Node:( Text: (
|——————————Node:identifier Text: filedes
|——————————Node:, Text: ,
|——————————Node:identifier Text: CAN_DEVCTL_GET_INFO
|——————————Node:, Text: ,
|——————————Node:identifier Text: info
|——————————Node:, Text: ,
|——————————Node:sizeof_expression Text: sizeof(struct can_devctl_info)
|———————————Node:sizeof Text: sizeof
|———————————Node:( Text: (
|———————————Node:type_descriptor Text: struct can_devctl_info
|————————————Node:struct_specifier Text: struct can_devctl_info
|—————————————Node:struct Text: struct
|—————————————Node:type_identifier Text: can_devctl_info
|———————————Node:) Text: )
|——————————Node:, Text: ,
|——————————Node:null Text: NULL
|———————————Node:NULL Text: NULL
|——————————Node:) Text: )
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        log_error("devctl CAN_DEVCTL_GET_INFO: %s\n", strerror(ret));

        return ret;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: log_error("devctl CAN_DEVCTL_GET_INFO: %s\n", strerror(ret));
|——————Node:call_expression Text: log_error("devctl CAN_DEVCTL_GET_INFO: %s\n", strerror(ret))
|———————Node:identifier Text: log_error
|———————Node:argument_list Text: ("devctl CAN_DEVCTL_GET_INFO: %s\n", strerror(ret))
|————————Node:( Text: (
|————————Node:string_literal Text: "devctl CAN_DEVCTL_GET_INFO: %s\n"
|—————————Node:" Text: "
|—————————Node:string_content Text: devctl CAN_DEVCTL_GET_INFO: %s
|—————————Node:escape_sequence Text: \n
|—————————Node:" Text: "
|————————Node:, Text: ,
|————————Node:call_expression Text: strerror(ret)
|—————————Node:identifier Text: strerror
|—————————Node:argument_list Text: (ret)
|——————————Node:( Text: (
|——————————Node:identifier Text: ret
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return ret;
|——————Node:return Text: return
|——————Node:identifier Text: ret
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return EOK;
|————Node:return Text: return
|————Node:identifier Text: EOK
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: static inline int get_stats (int filedes, struct can_devctl_stats* info) {
    int ret;

    if (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_GET_STATS,
            info, sizeof(struct can_devctl_stats), NULL )))
    {
        log_error("devctl CAN_DEVCTL_GET_STATS: %s\n", strerror(ret));

        return ret;
    }

    return EOK;
}
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:storage_class_specifier Text: inline
|———Node:inline Text: inline
|——Node:primitive_type Text: int
|——Node:function_declarator Text: get_stats (int filedes, struct can_devctl_stats* info)
|———Node:identifier Text: get_stats
|———Node:parameter_list Text: (int filedes, struct can_devctl_stats* info)
|————Node:( Text: (
|————Node:parameter_declaration Text: int filedes
|—————Node:primitive_type Text: int
|—————Node:identifier Text: filedes
|————Node:, Text: ,
|————Node:parameter_declaration Text: struct can_devctl_stats* info
|—————Node:struct_specifier Text: struct can_devctl_stats
|——————Node:struct Text: struct
|——————Node:type_identifier Text: can_devctl_stats
|—————Node:pointer_declarator Text: * info
|——————Node:* Text: *
|——————Node:identifier Text: info
|————Node:) Text: )
|——Node:compound_statement Text: {
    int ret;

    if (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_GET_STATS,
            info, sizeof(struct can_devctl_stats), NULL )))
    {
        log_error("devctl CAN_DEVCTL_GET_STATS: %s\n", strerror(ret));

        return ret;
    }

    return EOK;
}
|———Node:{ Text: {
|———Node:declaration Text: int ret;
|————Node:primitive_type Text: int
|————Node:identifier Text: ret
|————Node:; Text: ;
|———Node:if_statement Text: if (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_GET_STATS,
            info, sizeof(struct can_devctl_stats), NULL )))
    {
        log_error("devctl CAN_DEVCTL_GET_STATS: %s\n", strerror(ret));

        return ret;
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_GET_STATS,
            info, sizeof(struct can_devctl_stats), NULL )))
|—————Node:( Text: (
|—————Node:binary_expression Text: EOK != (ret = devctl(
            filedes, CAN_DEVCTL_GET_STATS,
            info, sizeof(struct can_devctl_stats), NULL ))
|——————Node:identifier Text: EOK
|——————Node:!= Text: !=
|——————Node:parenthesized_expression Text: (ret = devctl(
            filedes, CAN_DEVCTL_GET_STATS,
            info, sizeof(struct can_devctl_stats), NULL ))
|———————Node:( Text: (
|———————Node:assignment_expression Text: ret = devctl(
            filedes, CAN_DEVCTL_GET_STATS,
            info, sizeof(struct can_devctl_stats), NULL )
|————————Node:identifier Text: ret
|————————Node:= Text: =
|————————Node:call_expression Text: devctl(
            filedes, CAN_DEVCTL_GET_STATS,
            info, sizeof(struct can_devctl_stats), NULL )
|—————————Node:identifier Text: devctl
|—————————Node:argument_list Text: (
            filedes, CAN_DEVCTL_GET_STATS,
            info, sizeof(struct can_devctl_stats), NULL )
|——————————Node:( Text: (
|——————————Node:identifier Text: filedes
|——————————Node:, Text: ,
|——————————Node:identifier Text: CAN_DEVCTL_GET_STATS
|——————————Node:, Text: ,
|——————————Node:identifier Text: info
|——————————Node:, Text: ,
|——————————Node:sizeof_expression Text: sizeof(struct can_devctl_stats)
|———————————Node:sizeof Text: sizeof
|———————————Node:( Text: (
|———————————Node:type_descriptor Text: struct can_devctl_stats
|————————————Node:struct_specifier Text: struct can_devctl_stats
|—————————————Node:struct Text: struct
|—————————————Node:type_identifier Text: can_devctl_stats
|———————————Node:) Text: )
|——————————Node:, Text: ,
|——————————Node:null Text: NULL
|———————————Node:NULL Text: NULL
|——————————Node:) Text: )
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        log_error("devctl CAN_DEVCTL_GET_STATS: %s\n", strerror(ret));

        return ret;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: log_error("devctl CAN_DEVCTL_GET_STATS: %s\n", strerror(ret));
|——————Node:call_expression Text: log_error("devctl CAN_DEVCTL_GET_STATS: %s\n", strerror(ret))
|———————Node:identifier Text: log_error
|———————Node:argument_list Text: ("devctl CAN_DEVCTL_GET_STATS: %s\n", strerror(ret))
|————————Node:( Text: (
|————————Node:string_literal Text: "devctl CAN_DEVCTL_GET_STATS: %s\n"
|—————————Node:" Text: "
|—————————Node:string_content Text: devctl CAN_DEVCTL_GET_STATS: %s
|—————————Node:escape_sequence Text: \n
|—————————Node:" Text: "
|————————Node:, Text: ,
|————————Node:call_expression Text: strerror(ret)
|—————————Node:identifier Text: strerror
|—————————Node:argument_list Text: (ret)
|——————————Node:( Text: (
|——————————Node:identifier Text: ret
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return ret;
|——————Node:return Text: return
|——————Node:identifier Text: ret
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return EOK;
|————Node:return Text: return
|————Node:identifier Text: EOK
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: static inline int set_mid (int filedes, uint32_t value) {
    int ret;

    if (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_SET_MID,
            &value, sizeof(uint32_t), NULL )))
    {
        log_error("devctl CAN_DEVCTL_SET_MID: %s\n", strerror(ret));

        return ret;
    }

    return EOK;
}
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:storage_class_specifier Text: inline
|———Node:inline Text: inline
|——Node:primitive_type Text: int
|——Node:function_declarator Text: set_mid (int filedes, uint32_t value)
|———Node:identifier Text: set_mid
|———Node:parameter_list Text: (int filedes, uint32_t value)
|————Node:( Text: (
|————Node:parameter_declaration Text: int filedes
|—————Node:primitive_type Text: int
|—————Node:identifier Text: filedes
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint32_t value
|—————Node:primitive_type Text: uint32_t
|—————Node:identifier Text: value
|————Node:) Text: )
|——Node:compound_statement Text: {
    int ret;

    if (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_SET_MID,
            &value, sizeof(uint32_t), NULL )))
    {
        log_error("devctl CAN_DEVCTL_SET_MID: %s\n", strerror(ret));

        return ret;
    }

    return EOK;
}
|———Node:{ Text: {
|———Node:declaration Text: int ret;
|————Node:primitive_type Text: int
|————Node:identifier Text: ret
|————Node:; Text: ;
|———Node:if_statement Text: if (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_SET_MID,
            &value, sizeof(uint32_t), NULL )))
    {
        log_error("devctl CAN_DEVCTL_SET_MID: %s\n", strerror(ret));

        return ret;
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_SET_MID,
            &value, sizeof(uint32_t), NULL )))
|—————Node:( Text: (
|—————Node:binary_expression Text: EOK != (ret = devctl(
            filedes, CAN_DEVCTL_SET_MID,
            &value, sizeof(uint32_t), NULL ))
|——————Node:identifier Text: EOK
|——————Node:!= Text: !=
|——————Node:parenthesized_expression Text: (ret = devctl(
            filedes, CAN_DEVCTL_SET_MID,
            &value, sizeof(uint32_t), NULL ))
|———————Node:( Text: (
|———————Node:assignment_expression Text: ret = devctl(
            filedes, CAN_DEVCTL_SET_MID,
            &value, sizeof(uint32_t), NULL )
|————————Node:identifier Text: ret
|————————Node:= Text: =
|————————Node:call_expression Text: devctl(
            filedes, CAN_DEVCTL_SET_MID,
            &value, sizeof(uint32_t), NULL )
|—————————Node:identifier Text: devctl
|—————————Node:argument_list Text: (
            filedes, CAN_DEVCTL_SET_MID,
            &value, sizeof(uint32_t), NULL )
|——————————Node:( Text: (
|——————————Node:identifier Text: filedes
|——————————Node:, Text: ,
|——————————Node:identifier Text: CAN_DEVCTL_SET_MID
|——————————Node:, Text: ,
|——————————Node:pointer_expression Text: &value
|———————————Node:& Text: &
|———————————Node:identifier Text: value
|——————————Node:, Text: ,
|——————————Node:sizeof_expression Text: sizeof(uint32_t)
|———————————Node:sizeof Text: sizeof
|———————————Node:( Text: (
|———————————Node:type_descriptor Text: uint32_t
|————————————Node:primitive_type Text: uint32_t
|———————————Node:) Text: )
|——————————Node:, Text: ,
|——————————Node:null Text: NULL
|———————————Node:NULL Text: NULL
|——————————Node:) Text: )
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        log_error("devctl CAN_DEVCTL_SET_MID: %s\n", strerror(ret));

        return ret;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: log_error("devctl CAN_DEVCTL_SET_MID: %s\n", strerror(ret));
|——————Node:call_expression Text: log_error("devctl CAN_DEVCTL_SET_MID: %s\n", strerror(ret))
|———————Node:identifier Text: log_error
|———————Node:argument_list Text: ("devctl CAN_DEVCTL_SET_MID: %s\n", strerror(ret))
|————————Node:( Text: (
|————————Node:string_literal Text: "devctl CAN_DEVCTL_SET_MID: %s\n"
|—————————Node:" Text: "
|—————————Node:string_content Text: devctl CAN_DEVCTL_SET_MID: %s
|—————————Node:escape_sequence Text: \n
|—————————Node:" Text: "
|————————Node:, Text: ,
|————————Node:call_expression Text: strerror(ret)
|—————————Node:identifier Text: strerror
|—————————Node:argument_list Text: (ret)
|——————————Node:( Text: (
|——————————Node:identifier Text: ret
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return ret;
|——————Node:return Text: return
|——————Node:identifier Text: ret
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return EOK;
|————Node:return Text: return
|————Node:identifier Text: EOK
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: static inline int get_mid (int filedes, uint32_t* value) {
    int ret;

    if (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_GET_MID,
            value, sizeof(uint32_t), NULL )))
    {
        log_error("devctl CAN_DEVCTL_GET_MID: %s\n", strerror(ret));

        return ret;
    }

    return EOK;
}
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:storage_class_specifier Text: inline
|———Node:inline Text: inline
|——Node:primitive_type Text: int
|——Node:function_declarator Text: get_mid (int filedes, uint32_t* value)
|———Node:identifier Text: get_mid
|———Node:parameter_list Text: (int filedes, uint32_t* value)
|————Node:( Text: (
|————Node:parameter_declaration Text: int filedes
|—————Node:primitive_type Text: int
|—————Node:identifier Text: filedes
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint32_t* value
|—————Node:primitive_type Text: uint32_t
|—————Node:pointer_declarator Text: * value
|——————Node:* Text: *
|——————Node:identifier Text: value
|————Node:) Text: )
|——Node:compound_statement Text: {
    int ret;

    if (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_GET_MID,
            value, sizeof(uint32_t), NULL )))
    {
        log_error("devctl CAN_DEVCTL_GET_MID: %s\n", strerror(ret));

        return ret;
    }

    return EOK;
}
|———Node:{ Text: {
|———Node:declaration Text: int ret;
|————Node:primitive_type Text: int
|————Node:identifier Text: ret
|————Node:; Text: ;
|———Node:if_statement Text: if (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_GET_MID,
            value, sizeof(uint32_t), NULL )))
    {
        log_error("devctl CAN_DEVCTL_GET_MID: %s\n", strerror(ret));

        return ret;
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_GET_MID,
            value, sizeof(uint32_t), NULL )))
|—————Node:( Text: (
|—————Node:binary_expression Text: EOK != (ret = devctl(
            filedes, CAN_DEVCTL_GET_MID,
            value, sizeof(uint32_t), NULL ))
|——————Node:identifier Text: EOK
|——————Node:!= Text: !=
|——————Node:parenthesized_expression Text: (ret = devctl(
            filedes, CAN_DEVCTL_GET_MID,
            value, sizeof(uint32_t), NULL ))
|———————Node:( Text: (
|———————Node:assignment_expression Text: ret = devctl(
            filedes, CAN_DEVCTL_GET_MID,
            value, sizeof(uint32_t), NULL )
|————————Node:identifier Text: ret
|————————Node:= Text: =
|————————Node:call_expression Text: devctl(
            filedes, CAN_DEVCTL_GET_MID,
            value, sizeof(uint32_t), NULL )
|—————————Node:identifier Text: devctl
|—————————Node:argument_list Text: (
            filedes, CAN_DEVCTL_GET_MID,
            value, sizeof(uint32_t), NULL )
|——————————Node:( Text: (
|——————————Node:identifier Text: filedes
|——————————Node:, Text: ,
|——————————Node:identifier Text: CAN_DEVCTL_GET_MID
|——————————Node:, Text: ,
|——————————Node:identifier Text: value
|——————————Node:, Text: ,
|——————————Node:sizeof_expression Text: sizeof(uint32_t)
|———————————Node:sizeof Text: sizeof
|———————————Node:( Text: (
|———————————Node:type_descriptor Text: uint32_t
|————————————Node:primitive_type Text: uint32_t
|———————————Node:) Text: )
|——————————Node:, Text: ,
|——————————Node:null Text: NULL
|———————————Node:NULL Text: NULL
|——————————Node:) Text: )
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        log_error("devctl CAN_DEVCTL_GET_MID: %s\n", strerror(ret));

        return ret;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: log_error("devctl CAN_DEVCTL_GET_MID: %s\n", strerror(ret));
|——————Node:call_expression Text: log_error("devctl CAN_DEVCTL_GET_MID: %s\n", strerror(ret))
|———————Node:identifier Text: log_error
|———————Node:argument_list Text: ("devctl CAN_DEVCTL_GET_MID: %s\n", strerror(ret))
|————————Node:( Text: (
|————————Node:string_literal Text: "devctl CAN_DEVCTL_GET_MID: %s\n"
|—————————Node:" Text: "
|—————————Node:string_content Text: devctl CAN_DEVCTL_GET_MID: %s
|—————————Node:escape_sequence Text: \n
|—————————Node:" Text: "
|————————Node:, Text: ,
|————————Node:call_expression Text: strerror(ret)
|—————————Node:identifier Text: strerror
|—————————Node:argument_list Text: (ret)
|——————————Node:( Text: (
|——————————Node:identifier Text: ret
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return ret;
|——————Node:return Text: return
|——————Node:identifier Text: ret
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return EOK;
|————Node:return Text: return
|————Node:identifier Text: EOK
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: static inline int set_mfilter (int filedes, uint32_t value) {
    int ret;

    if (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_SET_MFILTER,
            &value, sizeof(uint32_t), NULL )))
    {
        log_error("devctl CAN_DEVCTL_SET_MFILTER: %s\n", strerror(ret));

        return ret;
    }

    return EOK;
}
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:storage_class_specifier Text: inline
|———Node:inline Text: inline
|——Node:primitive_type Text: int
|——Node:function_declarator Text: set_mfilter (int filedes, uint32_t value)
|———Node:identifier Text: set_mfilter
|———Node:parameter_list Text: (int filedes, uint32_t value)
|————Node:( Text: (
|————Node:parameter_declaration Text: int filedes
|—————Node:primitive_type Text: int
|—————Node:identifier Text: filedes
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint32_t value
|—————Node:primitive_type Text: uint32_t
|—————Node:identifier Text: value
|————Node:) Text: )
|——Node:compound_statement Text: {
    int ret;

    if (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_SET_MFILTER,
            &value, sizeof(uint32_t), NULL )))
    {
        log_error("devctl CAN_DEVCTL_SET_MFILTER: %s\n", strerror(ret));

        return ret;
    }

    return EOK;
}
|———Node:{ Text: {
|———Node:declaration Text: int ret;
|————Node:primitive_type Text: int
|————Node:identifier Text: ret
|————Node:; Text: ;
|———Node:if_statement Text: if (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_SET_MFILTER,
            &value, sizeof(uint32_t), NULL )))
    {
        log_error("devctl CAN_DEVCTL_SET_MFILTER: %s\n", strerror(ret));

        return ret;
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_SET_MFILTER,
            &value, sizeof(uint32_t), NULL )))
|—————Node:( Text: (
|—————Node:binary_expression Text: EOK != (ret = devctl(
            filedes, CAN_DEVCTL_SET_MFILTER,
            &value, sizeof(uint32_t), NULL ))
|——————Node:identifier Text: EOK
|——————Node:!= Text: !=
|——————Node:parenthesized_expression Text: (ret = devctl(
            filedes, CAN_DEVCTL_SET_MFILTER,
            &value, sizeof(uint32_t), NULL ))
|———————Node:( Text: (
|———————Node:assignment_expression Text: ret = devctl(
            filedes, CAN_DEVCTL_SET_MFILTER,
            &value, sizeof(uint32_t), NULL )
|————————Node:identifier Text: ret
|————————Node:= Text: =
|————————Node:call_expression Text: devctl(
            filedes, CAN_DEVCTL_SET_MFILTER,
            &value, sizeof(uint32_t), NULL )
|—————————Node:identifier Text: devctl
|—————————Node:argument_list Text: (
            filedes, CAN_DEVCTL_SET_MFILTER,
            &value, sizeof(uint32_t), NULL )
|——————————Node:( Text: (
|——————————Node:identifier Text: filedes
|——————————Node:, Text: ,
|——————————Node:identifier Text: CAN_DEVCTL_SET_MFILTER
|——————————Node:, Text: ,
|——————————Node:pointer_expression Text: &value
|———————————Node:& Text: &
|———————————Node:identifier Text: value
|——————————Node:, Text: ,
|——————————Node:sizeof_expression Text: sizeof(uint32_t)
|———————————Node:sizeof Text: sizeof
|———————————Node:( Text: (
|———————————Node:type_descriptor Text: uint32_t
|————————————Node:primitive_type Text: uint32_t
|———————————Node:) Text: )
|——————————Node:, Text: ,
|——————————Node:null Text: NULL
|———————————Node:NULL Text: NULL
|——————————Node:) Text: )
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        log_error("devctl CAN_DEVCTL_SET_MFILTER: %s\n", strerror(ret));

        return ret;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: log_error("devctl CAN_DEVCTL_SET_MFILTER: %s\n", strerror(ret));
|——————Node:call_expression Text: log_error("devctl CAN_DEVCTL_SET_MFILTER: %s\n", strerror(ret))
|———————Node:identifier Text: log_error
|———————Node:argument_list Text: ("devctl CAN_DEVCTL_SET_MFILTER: %s\n", strerror(ret))
|————————Node:( Text: (
|————————Node:string_literal Text: "devctl CAN_DEVCTL_SET_MFILTER: %s\n"
|—————————Node:" Text: "
|—————————Node:string_content Text: devctl CAN_DEVCTL_SET_MFILTER: %s
|—————————Node:escape_sequence Text: \n
|—————————Node:" Text: "
|————————Node:, Text: ,
|————————Node:call_expression Text: strerror(ret)
|—————————Node:identifier Text: strerror
|—————————Node:argument_list Text: (ret)
|——————————Node:( Text: (
|——————————Node:identifier Text: ret
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return ret;
|——————Node:return Text: return
|——————Node:identifier Text: ret
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return EOK;
|————Node:return Text: return
|————Node:identifier Text: EOK
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: static inline int get_mfilter (int filedes, uint32_t* value) {
    int ret;

    if (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_GET_MFILTER,
            value, sizeof(uint32_t), NULL )))
    {
        log_error("devctl CAN_DEVCTL_GET_MFILTER: %s\n", strerror(ret));

        return ret;
    }

    return EOK;
}
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:storage_class_specifier Text: inline
|———Node:inline Text: inline
|——Node:primitive_type Text: int
|——Node:function_declarator Text: get_mfilter (int filedes, uint32_t* value)
|———Node:identifier Text: get_mfilter
|———Node:parameter_list Text: (int filedes, uint32_t* value)
|————Node:( Text: (
|————Node:parameter_declaration Text: int filedes
|—————Node:primitive_type Text: int
|—————Node:identifier Text: filedes
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint32_t* value
|—————Node:primitive_type Text: uint32_t
|—————Node:pointer_declarator Text: * value
|——————Node:* Text: *
|——————Node:identifier Text: value
|————Node:) Text: )
|——Node:compound_statement Text: {
    int ret;

    if (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_GET_MFILTER,
            value, sizeof(uint32_t), NULL )))
    {
        log_error("devctl CAN_DEVCTL_GET_MFILTER: %s\n", strerror(ret));

        return ret;
    }

    return EOK;
}
|———Node:{ Text: {
|———Node:declaration Text: int ret;
|————Node:primitive_type Text: int
|————Node:identifier Text: ret
|————Node:; Text: ;
|———Node:if_statement Text: if (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_GET_MFILTER,
            value, sizeof(uint32_t), NULL )))
    {
        log_error("devctl CAN_DEVCTL_GET_MFILTER: %s\n", strerror(ret));

        return ret;
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: (EOK != (ret = devctl(
            filedes, CAN_DEVCTL_GET_MFILTER,
            value, sizeof(uint32_t), NULL )))
|—————Node:( Text: (
|—————Node:binary_expression Text: EOK != (ret = devctl(
            filedes, CAN_DEVCTL_GET_MFILTER,
            value, sizeof(uint32_t), NULL ))
|——————Node:identifier Text: EOK
|——————Node:!= Text: !=
|——————Node:parenthesized_expression Text: (ret = devctl(
            filedes, CAN_DEVCTL_GET_MFILTER,
            value, sizeof(uint32_t), NULL ))
|———————Node:( Text: (
|———————Node:assignment_expression Text: ret = devctl(
            filedes, CAN_DEVCTL_GET_MFILTER,
            value, sizeof(uint32_t), NULL )
|————————Node:identifier Text: ret
|————————Node:= Text: =
|————————Node:call_expression Text: devctl(
            filedes, CAN_DEVCTL_GET_MFILTER,
            value, sizeof(uint32_t), NULL )
|—————————Node:identifier Text: devctl
|—————————Node:argument_list Text: (
            filedes, CAN_DEVCTL_GET_MFILTER,
            value, sizeof(uint32_t), NULL )
|——————————Node:( Text: (
|——————————Node:identifier Text: filedes
|——————————Node:, Text: ,
|——————————Node:identifier Text: CAN_DEVCTL_GET_MFILTER
|——————————Node:, Text: ,
|——————————Node:identifier Text: value
|——————————Node:, Text: ,
|——————————Node:sizeof_expression Text: sizeof(uint32_t)
|———————————Node:sizeof Text: sizeof
|———————————Node:( Text: (
|———————————Node:type_descriptor Text: uint32_t
|————————————Node:primitive_type Text: uint32_t
|———————————Node:) Text: )
|——————————Node:, Text: ,
|——————————Node:null Text: NULL
|———————————Node:NULL Text: NULL
|——————————Node:) Text: )
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        log_error("devctl CAN_DEVCTL_GET_MFILTER: %s\n", strerror(ret));

        return ret;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: log_error("devctl CAN_DEVCTL_GET_MFILTER: %s\n", strerror(ret));
|——————Node:call_expression Text: log_error("devctl CAN_DEVCTL_GET_MFILTER: %s\n", strerror(ret))
|———————Node:identifier Text: log_error
|———————Node:argument_list Text: ("devctl CAN_DEVCTL_GET_MFILTER: %s\n", strerror(ret))
|————————Node:( Text: (
|————————Node:string_literal Text: "devctl CAN_DEVCTL_GET_MFILTER: %s\n"
|—————————Node:" Text: "
|—————————Node:string_content Text: devctl CAN_DEVCTL_GET_MFILTER: %s
|—————————Node:escape_sequence Text: \n
|—————————Node:" Text: "
|————————Node:, Text: ,
|————————Node:call_expression Text: strerror(ret)
|—————————Node:identifier Text: strerror
|—————————Node:argument_list Text: (ret)
|——————————Node:( Text: (
|——————————Node:identifier Text: ret
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return ret;
|——————Node:return Text: return
|——————Node:identifier Text: ret
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return EOK;
|————Node:return Text: return
|————Node:identifier Text: EOK
|————Node:; Text: ;
|———Node:} Text: }
