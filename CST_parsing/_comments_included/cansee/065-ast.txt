cansee-src\canhandler.cpp

|Node:translation_unit
|—Node:preproc_include Text: #include "canhandler.h"

|——Node:#include Text: #include
|——Node:string_literal Text: "canhandler.h"
|———Node:" Text: "
|———Node:string_content Text: canhandler.h
|———Node:" Text: "
|—Node:declaration Text: static CS_CONFIG_t *can_config;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_identifier Text: CS_CONFIG_t
|——Node:pointer_declarator Text: *can_config
|———Node:* Text: *
|———Node:identifier Text: can_config
|——Node:; Text: ;
|—Node:declaration Text: static uint8_t used_bus;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:primitive_type Text: uint8_t
|——Node:identifier Text: used_bus
|——Node:; Text: ;
|—Node:declaration Text: CAN_device_t CAN_cfg;
|——Node:type_identifier Text: CAN_device_t
|——Node:identifier Text: CAN_cfg
|——Node:; Text: ;
|—Node:function_definition Text: void can_bus_set () {
  if (used_bus == 0) {                                            // init the CAN bus (pins and baudrate)
    CAN_cfg.speed     = (CAN_speed_t)can_config->can0_speed;
    CAN_cfg.tx_pin_id = (gpio_num_t)can_config->can0_tx;
    CAN_cfg.rx_pin_id = (gpio_num_t)can_config->can0_rx;
  } else {
    CAN_cfg.speed     = (CAN_speed_t)can_config->can1_speed;
    CAN_cfg.tx_pin_id = (gpio_num_t)can_config->can1_tx;
    CAN_cfg.rx_pin_id = (gpio_num_t)can_config->can1_rx;
  }
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: can_bus_set ()
|———Node:identifier Text: can_bus_set
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
  if (used_bus == 0) {                                            // init the CAN bus (pins and baudrate)
    CAN_cfg.speed     = (CAN_speed_t)can_config->can0_speed;
    CAN_cfg.tx_pin_id = (gpio_num_t)can_config->can0_tx;
    CAN_cfg.rx_pin_id = (gpio_num_t)can_config->can0_rx;
  } else {
    CAN_cfg.speed     = (CAN_speed_t)can_config->can1_speed;
    CAN_cfg.tx_pin_id = (gpio_num_t)can_config->can1_tx;
    CAN_cfg.rx_pin_id = (gpio_num_t)can_config->can1_rx;
  }
}
|———Node:{ Text: {
|———Node:if_statement Text: if (used_bus == 0) {                                            // init the CAN bus (pins and baudrate)
    CAN_cfg.speed     = (CAN_speed_t)can_config->can0_speed;
    CAN_cfg.tx_pin_id = (gpio_num_t)can_config->can0_tx;
    CAN_cfg.rx_pin_id = (gpio_num_t)can_config->can0_rx;
  } else {
    CAN_cfg.speed     = (CAN_speed_t)can_config->can1_speed;
    CAN_cfg.tx_pin_id = (gpio_num_t)can_config->can1_tx;
    CAN_cfg.rx_pin_id = (gpio_num_t)can_config->can1_rx;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (used_bus == 0)
|—————Node:( Text: (
|—————Node:binary_expression Text: used_bus == 0
|——————Node:identifier Text: used_bus
|——————Node:== Text: ==
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {                                            // init the CAN bus (pins and baudrate)
    CAN_cfg.speed     = (CAN_speed_t)can_config->can0_speed;
    CAN_cfg.tx_pin_id = (gpio_num_t)can_config->can0_tx;
    CAN_cfg.rx_pin_id = (gpio_num_t)can_config->can0_rx;
  }
|—————Node:{ Text: {
|—————Node:comment Text: // init the CAN bus (pins and baudrate)
|—————Node:expression_statement Text: CAN_cfg.speed     = (CAN_speed_t)can_config->can0_speed;
|——————Node:assignment_expression Text: CAN_cfg.speed     = (CAN_speed_t)can_config->can0_speed
|———————Node:field_expression Text: CAN_cfg.speed
|————————Node:identifier Text: CAN_cfg
|————————Node:. Text: .
|————————Node:field_identifier Text: speed
|———————Node:= Text: =
|———————Node:cast_expression Text: (CAN_speed_t)can_config->can0_speed
|————————Node:( Text: (
|————————Node:type_descriptor Text: CAN_speed_t
|—————————Node:type_identifier Text: CAN_speed_t
|————————Node:) Text: )
|————————Node:field_expression Text: can_config->can0_speed
|—————————Node:identifier Text: can_config
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: can0_speed
|——————Node:; Text: ;
|—————Node:expression_statement Text: CAN_cfg.tx_pin_id = (gpio_num_t)can_config->can0_tx;
|——————Node:assignment_expression Text: CAN_cfg.tx_pin_id = (gpio_num_t)can_config->can0_tx
|———————Node:field_expression Text: CAN_cfg.tx_pin_id
|————————Node:identifier Text: CAN_cfg
|————————Node:. Text: .
|————————Node:field_identifier Text: tx_pin_id
|———————Node:= Text: =
|———————Node:cast_expression Text: (gpio_num_t)can_config->can0_tx
|————————Node:( Text: (
|————————Node:type_descriptor Text: gpio_num_t
|—————————Node:type_identifier Text: gpio_num_t
|————————Node:) Text: )
|————————Node:field_expression Text: can_config->can0_tx
|—————————Node:identifier Text: can_config
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: can0_tx
|——————Node:; Text: ;
|—————Node:expression_statement Text: CAN_cfg.rx_pin_id = (gpio_num_t)can_config->can0_rx;
|——————Node:assignment_expression Text: CAN_cfg.rx_pin_id = (gpio_num_t)can_config->can0_rx
|———————Node:field_expression Text: CAN_cfg.rx_pin_id
|————————Node:identifier Text: CAN_cfg
|————————Node:. Text: .
|————————Node:field_identifier Text: rx_pin_id
|———————Node:= Text: =
|———————Node:cast_expression Text: (gpio_num_t)can_config->can0_rx
|————————Node:( Text: (
|————————Node:type_descriptor Text: gpio_num_t
|—————————Node:type_identifier Text: gpio_num_t
|————————Node:) Text: )
|————————Node:field_expression Text: can_config->can0_rx
|—————————Node:identifier Text: can_config
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: can0_rx
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else {
    CAN_cfg.speed     = (CAN_speed_t)can_config->can1_speed;
    CAN_cfg.tx_pin_id = (gpio_num_t)can_config->can1_tx;
    CAN_cfg.rx_pin_id = (gpio_num_t)can_config->can1_rx;
  }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
    CAN_cfg.speed     = (CAN_speed_t)can_config->can1_speed;
    CAN_cfg.tx_pin_id = (gpio_num_t)can_config->can1_tx;
    CAN_cfg.rx_pin_id = (gpio_num_t)can_config->can1_rx;
  }
|——————Node:{ Text: {
|——————Node:expression_statement Text: CAN_cfg.speed     = (CAN_speed_t)can_config->can1_speed;
|———————Node:assignment_expression Text: CAN_cfg.speed     = (CAN_speed_t)can_config->can1_speed
|————————Node:field_expression Text: CAN_cfg.speed
|—————————Node:identifier Text: CAN_cfg
|—————————Node:. Text: .
|—————————Node:field_identifier Text: speed
|————————Node:= Text: =
|————————Node:cast_expression Text: (CAN_speed_t)can_config->can1_speed
|—————————Node:( Text: (
|—————————Node:type_descriptor Text: CAN_speed_t
|——————————Node:type_identifier Text: CAN_speed_t
|—————————Node:) Text: )
|—————————Node:field_expression Text: can_config->can1_speed
|——————————Node:identifier Text: can_config
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: can1_speed
|———————Node:; Text: ;
|——————Node:expression_statement Text: CAN_cfg.tx_pin_id = (gpio_num_t)can_config->can1_tx;
|———————Node:assignment_expression Text: CAN_cfg.tx_pin_id = (gpio_num_t)can_config->can1_tx
|————————Node:field_expression Text: CAN_cfg.tx_pin_id
|—————————Node:identifier Text: CAN_cfg
|—————————Node:. Text: .
|—————————Node:field_identifier Text: tx_pin_id
|————————Node:= Text: =
|————————Node:cast_expression Text: (gpio_num_t)can_config->can1_tx
|—————————Node:( Text: (
|—————————Node:type_descriptor Text: gpio_num_t
|——————————Node:type_identifier Text: gpio_num_t
|—————————Node:) Text: )
|—————————Node:field_expression Text: can_config->can1_tx
|——————————Node:identifier Text: can_config
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: can1_tx
|———————Node:; Text: ;
|——————Node:expression_statement Text: CAN_cfg.rx_pin_id = (gpio_num_t)can_config->can1_rx;
|———————Node:assignment_expression Text: CAN_cfg.rx_pin_id = (gpio_num_t)can_config->can1_rx
|————————Node:field_expression Text: CAN_cfg.rx_pin_id
|—————————Node:identifier Text: CAN_cfg
|—————————Node:. Text: .
|—————————Node:field_identifier Text: rx_pin_id
|————————Node:= Text: =
|————————Node:cast_expression Text: (gpio_num_t)can_config->can1_rx
|—————————Node:( Text: (
|—————————Node:type_descriptor Text: gpio_num_t
|——————————Node:type_identifier Text: gpio_num_t
|—————————Node:) Text: )
|—————————Node:field_expression Text: can_config->can1_rx
|——————————Node:identifier Text: can_config
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: can1_rx
|———————Node:; Text: ;
|——————Node:} Text: }
|———Node:} Text: }
|—Node:function_definition Text: void can_init (CS_CONFIG_t *config) {
  can_config = config;
  used_bus = 0;
  can_bus_set ();
  // create a generic RTOS queue for CAN receiving, with 10 positions
  CAN_cfg.rx_queue = xQueueCreate(10, sizeof(CAN_frame_t));
  if (CAN_cfg.rx_queue == 0) {
    if (can_config->mode_debug) Serial.println("Can't create CANbus buffer. Stopping");
    while (1);
  }
  if (can_config->mode_debug) Serial.println("CANbus started");
  ESP32Can.CANInit();                              // initialize CAN Module
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: can_init (CS_CONFIG_t *config)
|———Node:identifier Text: can_init
|———Node:parameter_list Text: (CS_CONFIG_t *config)
|————Node:( Text: (
|————Node:parameter_declaration Text: CS_CONFIG_t *config
|—————Node:type_identifier Text: CS_CONFIG_t
|—————Node:pointer_declarator Text: *config
|——————Node:* Text: *
|——————Node:identifier Text: config
|————Node:) Text: )
|——Node:compound_statement Text: {
  can_config = config;
  used_bus = 0;
  can_bus_set ();
  // create a generic RTOS queue for CAN receiving, with 10 positions
  CAN_cfg.rx_queue = xQueueCreate(10, sizeof(CAN_frame_t));
  if (CAN_cfg.rx_queue == 0) {
    if (can_config->mode_debug) Serial.println("Can't create CANbus buffer. Stopping");
    while (1);
  }
  if (can_config->mode_debug) Serial.println("CANbus started");
  ESP32Can.CANInit();                              // initialize CAN Module
}
|———Node:{ Text: {
|———Node:expression_statement Text: can_config = config;
|————Node:assignment_expression Text: can_config = config
|—————Node:identifier Text: can_config
|—————Node:= Text: =
|—————Node:identifier Text: config
|————Node:; Text: ;
|———Node:expression_statement Text: used_bus = 0;
|————Node:assignment_expression Text: used_bus = 0
|—————Node:identifier Text: used_bus
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: can_bus_set ();
|————Node:call_expression Text: can_bus_set ()
|—————Node:identifier Text: can_bus_set
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment Text: // create a generic RTOS queue for CAN receiving, with 10 positions
|———Node:expression_statement Text: CAN_cfg.rx_queue = xQueueCreate(10, sizeof(CAN_frame_t));
|————Node:assignment_expression Text: CAN_cfg.rx_queue = xQueueCreate(10, sizeof(CAN_frame_t))
|—————Node:field_expression Text: CAN_cfg.rx_queue
|——————Node:identifier Text: CAN_cfg
|——————Node:. Text: .
|——————Node:field_identifier Text: rx_queue
|—————Node:= Text: =
|—————Node:call_expression Text: xQueueCreate(10, sizeof(CAN_frame_t))
|——————Node:identifier Text: xQueueCreate
|——————Node:argument_list Text: (10, sizeof(CAN_frame_t))
|———————Node:( Text: (
|———————Node:number_literal Text: 10
|———————Node:, Text: ,
|———————Node:sizeof_expression Text: sizeof(CAN_frame_t)
|————————Node:sizeof Text: sizeof
|————————Node:parenthesized_expression Text: (CAN_frame_t)
|—————————Node:( Text: (
|—————————Node:identifier Text: CAN_frame_t
|—————————Node:) Text: )
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (CAN_cfg.rx_queue == 0) {
    if (can_config->mode_debug) Serial.println("Can't create CANbus buffer. Stopping");
    while (1);
  }
|————Node:if Text: if
|————Node:condition_clause Text: (CAN_cfg.rx_queue == 0)
|—————Node:( Text: (
|—————Node:binary_expression Text: CAN_cfg.rx_queue == 0
|——————Node:field_expression Text: CAN_cfg.rx_queue
|———————Node:identifier Text: CAN_cfg
|———————Node:. Text: .
|———————Node:field_identifier Text: rx_queue
|——————Node:== Text: ==
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {
    if (can_config->mode_debug) Serial.println("Can't create CANbus buffer. Stopping");
    while (1);
  }
|—————Node:{ Text: {
|—————Node:if_statement Text: if (can_config->mode_debug) Serial.println("Can't create CANbus buffer. Stopping");
|——————Node:if Text: if
|——————Node:condition_clause Text: (can_config->mode_debug)
|———————Node:( Text: (
|———————Node:field_expression Text: can_config->mode_debug
|————————Node:identifier Text: can_config
|————————Node:-> Text: ->
|————————Node:field_identifier Text: mode_debug
|———————Node:) Text: )
|——————Node:expression_statement Text: Serial.println("Can't create CANbus buffer. Stopping");
|———————Node:call_expression Text: Serial.println("Can't create CANbus buffer. Stopping")
|————————Node:field_expression Text: Serial.println
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: println
|————————Node:argument_list Text: ("Can't create CANbus buffer. Stopping")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Can't create CANbus buffer. Stopping"
|——————————Node:" Text: "
|——————————Node:string_content Text: Can't create CANbus buffer. Stopping
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:while_statement Text: while (1);
|——————Node:while Text: while
|——————Node:condition_clause Text: (1)
|———————Node:( Text: (
|———————Node:number_literal Text: 1
|———————Node:) Text: )
|——————Node:expression_statement Text: ;
|———————Node:; Text: ;
|—————Node:} Text: }
|———Node:if_statement Text: if (can_config->mode_debug) Serial.println("CANbus started");
|————Node:if Text: if
|————Node:condition_clause Text: (can_config->mode_debug)
|—————Node:( Text: (
|—————Node:field_expression Text: can_config->mode_debug
|——————Node:identifier Text: can_config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: mode_debug
|—————Node:) Text: )
|————Node:expression_statement Text: Serial.println("CANbus started");
|—————Node:call_expression Text: Serial.println("CANbus started")
|——————Node:field_expression Text: Serial.println
|———————Node:identifier Text: Serial
|———————Node:. Text: .
|———————Node:field_identifier Text: println
|——————Node:argument_list Text: ("CANbus started")
|———————Node:( Text: (
|———————Node:string_literal Text: "CANbus started"
|————————Node:" Text: "
|————————Node:string_content Text: CANbus started
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|———Node:expression_statement Text: ESP32Can.CANInit();
|————Node:call_expression Text: ESP32Can.CANInit()
|—————Node:field_expression Text: ESP32Can.CANInit
|——————Node:identifier Text: ESP32Can
|——————Node:. Text: .
|——————Node:field_identifier Text: CANInit
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment Text: // initialize CAN Module
|———Node:} Text: }
|—Node:function_definition Text: void can_send (CAN_frame_t *frame, uint8_t bus) {
  if (bus != used_bus) {
    used_bus = bus;
    ESP32Can.CANStop();
    can_bus_set ();
    ESP32Can.CANInit();                            // initialize CAN Module
  }
  ESP32Can.CANWriteFrame (frame);
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: can_send (CAN_frame_t *frame, uint8_t bus)
|———Node:identifier Text: can_send
|———Node:parameter_list Text: (CAN_frame_t *frame, uint8_t bus)
|————Node:( Text: (
|————Node:parameter_declaration Text: CAN_frame_t *frame
|—————Node:type_identifier Text: CAN_frame_t
|—————Node:pointer_declarator Text: *frame
|——————Node:* Text: *
|——————Node:identifier Text: frame
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint8_t bus
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: bus
|————Node:) Text: )
|——Node:compound_statement Text: {
  if (bus != used_bus) {
    used_bus = bus;
    ESP32Can.CANStop();
    can_bus_set ();
    ESP32Can.CANInit();                            // initialize CAN Module
  }
  ESP32Can.CANWriteFrame (frame);
}
|———Node:{ Text: {
|———Node:if_statement Text: if (bus != used_bus) {
    used_bus = bus;
    ESP32Can.CANStop();
    can_bus_set ();
    ESP32Can.CANInit();                            // initialize CAN Module
  }
|————Node:if Text: if
|————Node:condition_clause Text: (bus != used_bus)
|—————Node:( Text: (
|—————Node:binary_expression Text: bus != used_bus
|——————Node:identifier Text: bus
|——————Node:!= Text: !=
|——————Node:identifier Text: used_bus
|—————Node:) Text: )
|————Node:compound_statement Text: {
    used_bus = bus;
    ESP32Can.CANStop();
    can_bus_set ();
    ESP32Can.CANInit();                            // initialize CAN Module
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: used_bus = bus;
|——————Node:assignment_expression Text: used_bus = bus
|———————Node:identifier Text: used_bus
|———————Node:= Text: =
|———————Node:identifier Text: bus
|——————Node:; Text: ;
|—————Node:expression_statement Text: ESP32Can.CANStop();
|——————Node:call_expression Text: ESP32Can.CANStop()
|———————Node:field_expression Text: ESP32Can.CANStop
|————————Node:identifier Text: ESP32Can
|————————Node:. Text: .
|————————Node:field_identifier Text: CANStop
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: can_bus_set ();
|——————Node:call_expression Text: can_bus_set ()
|———————Node:identifier Text: can_bus_set
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: ESP32Can.CANInit();
|——————Node:call_expression Text: ESP32Can.CANInit()
|———————Node:field_expression Text: ESP32Can.CANInit
|————————Node:identifier Text: ESP32Can
|————————Node:. Text: .
|————————Node:field_identifier Text: CANInit
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment Text: // initialize CAN Module
|—————Node:} Text: }
|———Node:expression_statement Text: ESP32Can.CANWriteFrame (frame);
|————Node:call_expression Text: ESP32Can.CANWriteFrame (frame)
|—————Node:field_expression Text: ESP32Can.CANWriteFrame
|——————Node:identifier Text: ESP32Can
|——————Node:. Text: .
|——————Node:field_identifier Text: CANWriteFrame
|—————Node:argument_list Text: (frame)
|——————Node:( Text: (
|——————Node:identifier Text: frame
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: boolean can_receive (CAN_frame_t *rx_frame) {
  return xQueueReceive (CAN_cfg.rx_queue, rx_frame, (TickType_t)0) == pdTRUE ? true : false;
}
|——Node:type_identifier Text: boolean
|——Node:function_declarator Text: can_receive (CAN_frame_t *rx_frame)
|———Node:identifier Text: can_receive
|———Node:parameter_list Text: (CAN_frame_t *rx_frame)
|————Node:( Text: (
|————Node:parameter_declaration Text: CAN_frame_t *rx_frame
|—————Node:type_identifier Text: CAN_frame_t
|—————Node:pointer_declarator Text: *rx_frame
|——————Node:* Text: *
|——————Node:identifier Text: rx_frame
|————Node:) Text: )
|——Node:compound_statement Text: {
  return xQueueReceive (CAN_cfg.rx_queue, rx_frame, (TickType_t)0) == pdTRUE ? true : false;
}
|———Node:{ Text: {
|———Node:return_statement Text: return xQueueReceive (CAN_cfg.rx_queue, rx_frame, (TickType_t)0) == pdTRUE ? true : false;
|————Node:return Text: return
|————Node:conditional_expression Text: xQueueReceive (CAN_cfg.rx_queue, rx_frame, (TickType_t)0) == pdTRUE ? true : false
|—————Node:binary_expression Text: xQueueReceive (CAN_cfg.rx_queue, rx_frame, (TickType_t)0) == pdTRUE
|——————Node:call_expression Text: xQueueReceive (CAN_cfg.rx_queue, rx_frame, (TickType_t)0)
|———————Node:identifier Text: xQueueReceive
|———————Node:argument_list Text: (CAN_cfg.rx_queue, rx_frame, (TickType_t)0)
|————————Node:( Text: (
|————————Node:field_expression Text: CAN_cfg.rx_queue
|—————————Node:identifier Text: CAN_cfg
|—————————Node:. Text: .
|—————————Node:field_identifier Text: rx_queue
|————————Node:, Text: ,
|————————Node:identifier Text: rx_frame
|————————Node:, Text: ,
|————————Node:cast_expression Text: (TickType_t)0
|—————————Node:( Text: (
|—————————Node:type_descriptor Text: TickType_t
|——————————Node:type_identifier Text: TickType_t
|—————————Node:) Text: )
|—————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:== Text: ==
|——————Node:identifier Text: pdTRUE
|—————Node:? Text: ?
|—————Node:true Text: true
|—————Node:: Text: :
|—————Node:false Text: false
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: // convert a CAN_frame to readable hex output format
|—Node:function_definition Text: String canFrameToString(CAN_frame_t &frame) {
  String dataString = String(frame.MsgID, HEX) + ",";
  for (int i = 0; i < frame.FIR.B.DLC; i++) {
    dataString += getHex(frame.data.u8[i]);
  }
  dataString += "\n";
  return dataString;
}
|——Node:type_identifier Text: String
|——Node:function_declarator Text: canFrameToString(CAN_frame_t &frame)
|———Node:identifier Text: canFrameToString
|———Node:parameter_list Text: (CAN_frame_t &frame)
|————Node:( Text: (
|————Node:parameter_declaration Text: CAN_frame_t &frame
|—————Node:type_identifier Text: CAN_frame_t
|—————Node:reference_declarator Text: &frame
|——————Node:& Text: &
|——————Node:identifier Text: frame
|————Node:) Text: )
|——Node:compound_statement Text: {
  String dataString = String(frame.MsgID, HEX) + ",";
  for (int i = 0; i < frame.FIR.B.DLC; i++) {
    dataString += getHex(frame.data.u8[i]);
  }
  dataString += "\n";
  return dataString;
}
|———Node:{ Text: {
|———Node:declaration Text: String dataString = String(frame.MsgID, HEX) + ",";
|————Node:type_identifier Text: String
|————Node:init_declarator Text: dataString = String(frame.MsgID, HEX) + ","
|—————Node:identifier Text: dataString
|—————Node:= Text: =
|—————Node:binary_expression Text: String(frame.MsgID, HEX) + ","
|——————Node:call_expression Text: String(frame.MsgID, HEX)
|———————Node:identifier Text: String
|———————Node:argument_list Text: (frame.MsgID, HEX)
|————————Node:( Text: (
|————————Node:field_expression Text: frame.MsgID
|—————————Node:identifier Text: frame
|—————————Node:. Text: .
|—————————Node:field_identifier Text: MsgID
|————————Node:, Text: ,
|————————Node:identifier Text: HEX
|————————Node:) Text: )
|——————Node:+ Text: +
|——————Node:string_literal Text: ","
|———————Node:" Text: "
|———————Node:string_content Text: ,
|———————Node:" Text: "
|————Node:; Text: ;
|———Node:for_statement Text: for (int i = 0; i < frame.FIR.B.DLC; i++) {
    dataString += getHex(frame.data.u8[i]);
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:declaration Text: int i = 0;
|—————Node:primitive_type Text: int
|—————Node:init_declarator Text: i = 0
|——————Node:identifier Text: i
|——————Node:= Text: =
|——————Node:number_literal Text: 0
|—————Node:; Text: ;
|————Node:binary_expression Text: i < frame.FIR.B.DLC
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:field_expression Text: frame.FIR.B.DLC
|——————Node:field_expression Text: frame.FIR.B
|———————Node:field_expression Text: frame.FIR
|————————Node:identifier Text: frame
|————————Node:. Text: .
|————————Node:field_identifier Text: FIR
|———————Node:. Text: .
|———————Node:field_identifier Text: B
|——————Node:. Text: .
|——————Node:field_identifier Text: DLC
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    dataString += getHex(frame.data.u8[i]);
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: dataString += getHex(frame.data.u8[i]);
|——————Node:assignment_expression Text: dataString += getHex(frame.data.u8[i])
|———————Node:identifier Text: dataString
|———————Node:+= Text: +=
|———————Node:call_expression Text: getHex(frame.data.u8[i])
|————————Node:identifier Text: getHex
|————————Node:argument_list Text: (frame.data.u8[i])
|—————————Node:( Text: (
|—————————Node:subscript_expression Text: frame.data.u8[i]
|——————————Node:field_expression Text: frame.data.u8
|———————————Node:field_expression Text: frame.data
|————————————Node:identifier Text: frame
|————————————Node:. Text: .
|————————————Node:field_identifier Text: data
|———————————Node:. Text: .
|———————————Node:field_identifier Text: u8
|——————————Node:subscript_argument_list Text: [i]
|———————————Node:[ Text: [
|———————————Node:identifier Text: i
|———————————Node:] Text: ]
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: dataString += "\n";
|————Node:assignment_expression Text: dataString += "\n"
|—————Node:identifier Text: dataString
|—————Node:+= Text: +=
|—————Node:string_literal Text: "\n"
|——————Node:" Text: "
|——————Node:escape_sequence Text: \n
|——————Node:" Text: "
|————Node:; Text: ;
|———Node:return_statement Text: return dataString;
|————Node:return Text: return
|————Node:identifier Text: dataString
|————Node:; Text: ;
|———Node:} Text: }
