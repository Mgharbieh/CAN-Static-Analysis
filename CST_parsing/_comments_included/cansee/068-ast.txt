cansee-src\isotphandler.cpp

|Node:translation_unit
|—Node:preproc_include Text: #include "isotphandler.h"

|——Node:#include Text: #include
|——Node:string_literal Text: "isotphandler.h"
|———Node:" Text: "
|———Node:string_content Text: isotphandler.h
|———Node:" Text: "
|—Node:preproc_include Text: #include "leds.h"

|——Node:#include Text: #include
|——Node:string_literal Text: "leds.h"
|———Node:" Text: "
|———Node:string_content Text: leds.h
|———Node:" Text: "
|—Node:declaration Text: static CS_CONFIG_t *isotp_config;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_identifier Text: CS_CONFIG_t
|——Node:pointer_declarator Text: *isotp_config
|———Node:* Text: *
|———Node:identifier Text: isotp_config
|——Node:; Text: ;
|—Node:declaration Text: static ISO_MESSAGE_t isoMessageIncoming;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_identifier Text: ISO_MESSAGE_t
|——Node:identifier Text: isoMessageIncoming
|——Node:; Text: ;
|—Node:comment Text: // declare an ISO-TP message
|—Node:declaration Text: static ISO_MESSAGE_t isoMessageOutgoing;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_identifier Text: ISO_MESSAGE_t
|——Node:identifier Text: isoMessageOutgoing
|——Node:; Text: ;
|—Node:comment Text: // declare an ISO-TP message
|—Node:declaration Text: static unsigned long lastMicros;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:sized_type_specifier Text: unsigned long
|———Node:unsigned Text: unsigned
|———Node:long Text: long
|——Node:identifier Text: lastMicros
|——Node:; Text: ;
|—Node:function_definition Text: void isotp_init () {
  isotp_config = getConfig ();
  isoMessageIncoming.id = isoMessageOutgoing.id = 0xffff;
  isoMessageIncoming.length = isoMessageIncoming.index = isoMessageOutgoing.length = isoMessageOutgoing.index = 0;
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: isotp_init ()
|———Node:identifier Text: isotp_init
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
  isotp_config = getConfig ();
  isoMessageIncoming.id = isoMessageOutgoing.id = 0xffff;
  isoMessageIncoming.length = isoMessageIncoming.index = isoMessageOutgoing.length = isoMessageOutgoing.index = 0;
}
|———Node:{ Text: {
|———Node:expression_statement Text: isotp_config = getConfig ();
|————Node:assignment_expression Text: isotp_config = getConfig ()
|—————Node:identifier Text: isotp_config
|—————Node:= Text: =
|—————Node:call_expression Text: getConfig ()
|——————Node:identifier Text: getConfig
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: isoMessageIncoming.id = isoMessageOutgoing.id = 0xffff;
|————Node:assignment_expression Text: isoMessageIncoming.id = isoMessageOutgoing.id = 0xffff
|—————Node:field_expression Text: isoMessageIncoming.id
|——————Node:identifier Text: isoMessageIncoming
|——————Node:. Text: .
|——————Node:field_identifier Text: id
|—————Node:= Text: =
|—————Node:assignment_expression Text: isoMessageOutgoing.id = 0xffff
|——————Node:field_expression Text: isoMessageOutgoing.id
|———————Node:identifier Text: isoMessageOutgoing
|———————Node:. Text: .
|———————Node:field_identifier Text: id
|——————Node:= Text: =
|——————Node:number_literal Text: 0xffff
|————Node:; Text: ;
|———Node:expression_statement Text: isoMessageIncoming.length = isoMessageIncoming.index = isoMessageOutgoing.length = isoMessageOutgoing.index = 0;
|————Node:assignment_expression Text: isoMessageIncoming.length = isoMessageIncoming.index = isoMessageOutgoing.length = isoMessageOutgoing.index = 0
|—————Node:field_expression Text: isoMessageIncoming.length
|——————Node:identifier Text: isoMessageIncoming
|——————Node:. Text: .
|——————Node:field_identifier Text: length
|—————Node:= Text: =
|—————Node:assignment_expression Text: isoMessageIncoming.index = isoMessageOutgoing.length = isoMessageOutgoing.index = 0
|——————Node:field_expression Text: isoMessageIncoming.index
|———————Node:identifier Text: isoMessageIncoming
|———————Node:. Text: .
|———————Node:field_identifier Text: index
|——————Node:= Text: =
|——————Node:assignment_expression Text: isoMessageOutgoing.length = isoMessageOutgoing.index = 0
|———————Node:field_expression Text: isoMessageOutgoing.length
|————————Node:identifier Text: isoMessageOutgoing
|————————Node:. Text: .
|————————Node:field_identifier Text: length
|———————Node:= Text: =
|———————Node:assignment_expression Text: isoMessageOutgoing.index = 0
|————————Node:field_expression Text: isoMessageOutgoing.index
|—————————Node:identifier Text: isoMessageOutgoing
|—————————Node:. Text: .
|—————————Node:field_identifier Text: index
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void isotp_ticker () {
  CAN_frame_t frame;                               // build the CAN frame
  if (isoMessageOutgoing.flow_active == 0) return; //
  if ((micros() - lastMicros) < isoMessageOutgoing.flow_delay) return;

  // Prepare the next frame
  frame.FIR.B.FF = CAN_frame_std;                  // set the type to 11 bits
  frame.FIR.B.RTR = CAN_no_RTR;                    // no RTR
  frame.MsgID = isoMessageOutgoing.id;             // set the ID
  frame.FIR.B.DLC = 8; //command.requestLength + 1;// set the length. Note some ECU's like DLC 8

  frame.data.u8[0] = 0x20 | (isoMessageOutgoing.next++ & 0x0f);
  int i;
  for (i = 0; i < 7 && isoMessageOutgoing.index < isoMessageOutgoing.length; i++) {
    frame.data.u8[i+1] = isoMessageOutgoing.data[isoMessageOutgoing.index++];
  }
  for (; i < 7; i++) {
    frame.data.u8[i+1] = 0;
  }

  // send the frame
  if (isotp_config->mode_debug & DEBUG_COMMAND_ISO) {
    Serial.print ("> com:Sending ISOTP NEXT:");
    Serial.print (canFrameToString (frame));
  }

  if (isoMessageOutgoing.length == isoMessageOutgoing.index) {
    // Done sending the outgoing message, so reset it and cancel further
    // handling by this ticker
    isoMessageOutgoing.length = isoMessageOutgoing.index = 0;
    isoMessageOutgoing.flow_active = 0;

    // At this moment, further sending by the ticker will stop. A few clow control
    // should not come in, but we now expect the answer, so do not invalidate the
    // incoming id
    // isoMessageIncoming.id = 0xffff;
    // the incoming message is full initiaized (id, index)
  }

  if (isoMessageOutgoing.flow_counter != 0) {
    if (--isoMessageOutgoing.flow_counter == 0) {
      isoMessageOutgoing.flow_active = 0;
    }
  }

  led_set (LED_GREEN, true);
  can_send (&frame, 0); // bus ogic needs to be added
  led_set (LED_GREEN, false);
  //
  lastMicros = micros();

}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: isotp_ticker ()
|———Node:identifier Text: isotp_ticker
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
  CAN_frame_t frame;                               // build the CAN frame
  if (isoMessageOutgoing.flow_active == 0) return; //
  if ((micros() - lastMicros) < isoMessageOutgoing.flow_delay) return;

  // Prepare the next frame
  frame.FIR.B.FF = CAN_frame_std;                  // set the type to 11 bits
  frame.FIR.B.RTR = CAN_no_RTR;                    // no RTR
  frame.MsgID = isoMessageOutgoing.id;             // set the ID
  frame.FIR.B.DLC = 8; //command.requestLength + 1;// set the length. Note some ECU's like DLC 8

  frame.data.u8[0] = 0x20 | (isoMessageOutgoing.next++ & 0x0f);
  int i;
  for (i = 0; i < 7 && isoMessageOutgoing.index < isoMessageOutgoing.length; i++) {
    frame.data.u8[i+1] = isoMessageOutgoing.data[isoMessageOutgoing.index++];
  }
  for (; i < 7; i++) {
    frame.data.u8[i+1] = 0;
  }

  // send the frame
  if (isotp_config->mode_debug & DEBUG_COMMAND_ISO) {
    Serial.print ("> com:Sending ISOTP NEXT:");
    Serial.print (canFrameToString (frame));
  }

  if (isoMessageOutgoing.length == isoMessageOutgoing.index) {
    // Done sending the outgoing message, so reset it and cancel further
    // handling by this ticker
    isoMessageOutgoing.length = isoMessageOutgoing.index = 0;
    isoMessageOutgoing.flow_active = 0;

    // At this moment, further sending by the ticker will stop. A few clow control
    // should not come in, but we now expect the answer, so do not invalidate the
    // incoming id
    // isoMessageIncoming.id = 0xffff;
    // the incoming message is full initiaized (id, index)
  }

  if (isoMessageOutgoing.flow_counter != 0) {
    if (--isoMessageOutgoing.flow_counter == 0) {
      isoMessageOutgoing.flow_active = 0;
    }
  }

  led_set (LED_GREEN, true);
  can_send (&frame, 0); // bus ogic needs to be added
  led_set (LED_GREEN, false);
  //
  lastMicros = micros();

}
|———Node:{ Text: {
|———Node:declaration Text: CAN_frame_t frame;
|————Node:type_identifier Text: CAN_frame_t
|————Node:identifier Text: frame
|————Node:; Text: ;
|———Node:comment Text: // build the CAN frame
|———Node:if_statement Text: if (isoMessageOutgoing.flow_active == 0) return;
|————Node:if Text: if
|————Node:condition_clause Text: (isoMessageOutgoing.flow_active == 0)
|—————Node:( Text: (
|—————Node:binary_expression Text: isoMessageOutgoing.flow_active == 0
|——————Node:field_expression Text: isoMessageOutgoing.flow_active
|———————Node:identifier Text: isoMessageOutgoing
|———————Node:. Text: .
|———————Node:field_identifier Text: flow_active
|——————Node:== Text: ==
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:return_statement Text: return;
|—————Node:return Text: return
|—————Node:; Text: ;
|———Node:comment Text: //
|———Node:if_statement Text: if ((micros() - lastMicros) < isoMessageOutgoing.flow_delay) return;
|————Node:if Text: if
|————Node:condition_clause Text: ((micros() - lastMicros) < isoMessageOutgoing.flow_delay)
|—————Node:( Text: (
|—————Node:binary_expression Text: (micros() - lastMicros) < isoMessageOutgoing.flow_delay
|——————Node:parenthesized_expression Text: (micros() - lastMicros)
|———————Node:( Text: (
|———————Node:binary_expression Text: micros() - lastMicros
|————————Node:call_expression Text: micros()
|—————————Node:identifier Text: micros
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:- Text: -
|————————Node:identifier Text: lastMicros
|———————Node:) Text: )
|——————Node:< Text: <
|——————Node:field_expression Text: isoMessageOutgoing.flow_delay
|———————Node:identifier Text: isoMessageOutgoing
|———————Node:. Text: .
|———————Node:field_identifier Text: flow_delay
|—————Node:) Text: )
|————Node:return_statement Text: return;
|—————Node:return Text: return
|—————Node:; Text: ;
|———Node:comment Text: // Prepare the next frame
|———Node:expression_statement Text: frame.FIR.B.FF = CAN_frame_std;
|————Node:assignment_expression Text: frame.FIR.B.FF = CAN_frame_std
|—————Node:field_expression Text: frame.FIR.B.FF
|——————Node:field_expression Text: frame.FIR.B
|———————Node:field_expression Text: frame.FIR
|————————Node:identifier Text: frame
|————————Node:. Text: .
|————————Node:field_identifier Text: FIR
|———————Node:. Text: .
|———————Node:field_identifier Text: B
|——————Node:. Text: .
|——————Node:field_identifier Text: FF
|—————Node:= Text: =
|—————Node:identifier Text: CAN_frame_std
|————Node:; Text: ;
|———Node:comment Text: // set the type to 11 bits
|———Node:expression_statement Text: frame.FIR.B.RTR = CAN_no_RTR;
|————Node:assignment_expression Text: frame.FIR.B.RTR = CAN_no_RTR
|—————Node:field_expression Text: frame.FIR.B.RTR
|——————Node:field_expression Text: frame.FIR.B
|———————Node:field_expression Text: frame.FIR
|————————Node:identifier Text: frame
|————————Node:. Text: .
|————————Node:field_identifier Text: FIR
|———————Node:. Text: .
|———————Node:field_identifier Text: B
|——————Node:. Text: .
|——————Node:field_identifier Text: RTR
|—————Node:= Text: =
|—————Node:identifier Text: CAN_no_RTR
|————Node:; Text: ;
|———Node:comment Text: // no RTR
|———Node:expression_statement Text: frame.MsgID = isoMessageOutgoing.id;
|————Node:assignment_expression Text: frame.MsgID = isoMessageOutgoing.id
|—————Node:field_expression Text: frame.MsgID
|——————Node:identifier Text: frame
|——————Node:. Text: .
|——————Node:field_identifier Text: MsgID
|—————Node:= Text: =
|—————Node:field_expression Text: isoMessageOutgoing.id
|——————Node:identifier Text: isoMessageOutgoing
|——————Node:. Text: .
|——————Node:field_identifier Text: id
|————Node:; Text: ;
|———Node:comment Text: // set the ID
|———Node:expression_statement Text: frame.FIR.B.DLC = 8;
|————Node:assignment_expression Text: frame.FIR.B.DLC = 8
|—————Node:field_expression Text: frame.FIR.B.DLC
|——————Node:field_expression Text: frame.FIR.B
|———————Node:field_expression Text: frame.FIR
|————————Node:identifier Text: frame
|————————Node:. Text: .
|————————Node:field_identifier Text: FIR
|———————Node:. Text: .
|———————Node:field_identifier Text: B
|——————Node:. Text: .
|——————Node:field_identifier Text: DLC
|—————Node:= Text: =
|—————Node:number_literal Text: 8
|————Node:; Text: ;
|———Node:comment Text: //command.requestLength + 1;// set the length. Note some ECU's like DLC 8
|———Node:expression_statement Text: frame.data.u8[0] = 0x20 | (isoMessageOutgoing.next++ & 0x0f);
|————Node:assignment_expression Text: frame.data.u8[0] = 0x20 | (isoMessageOutgoing.next++ & 0x0f)
|—————Node:subscript_expression Text: frame.data.u8[0]
|——————Node:field_expression Text: frame.data.u8
|———————Node:field_expression Text: frame.data
|————————Node:identifier Text: frame
|————————Node:. Text: .
|————————Node:field_identifier Text: data
|———————Node:. Text: .
|———————Node:field_identifier Text: u8
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:binary_expression Text: 0x20 | (isoMessageOutgoing.next++ & 0x0f)
|——————Node:number_literal Text: 0x20
|——————Node:| Text: |
|——————Node:parenthesized_expression Text: (isoMessageOutgoing.next++ & 0x0f)
|———————Node:( Text: (
|———————Node:binary_expression Text: isoMessageOutgoing.next++ & 0x0f
|————————Node:update_expression Text: isoMessageOutgoing.next++
|—————————Node:field_expression Text: isoMessageOutgoing.next
|——————————Node:identifier Text: isoMessageOutgoing
|——————————Node:. Text: .
|——————————Node:field_identifier Text: next
|—————————Node:++ Text: ++
|————————Node:& Text: &
|————————Node:number_literal Text: 0x0f
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: int i;
|————Node:primitive_type Text: int
|————Node:identifier Text: i
|————Node:; Text: ;
|———Node:for_statement Text: for (i = 0; i < 7 && isoMessageOutgoing.index < isoMessageOutgoing.length; i++) {
    frame.data.u8[i+1] = isoMessageOutgoing.data[isoMessageOutgoing.index++];
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:assignment_expression Text: i = 0
|—————Node:identifier Text: i
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|————Node:binary_expression Text: i < 7 && isoMessageOutgoing.index < isoMessageOutgoing.length
|—————Node:binary_expression Text: i < 7
|——————Node:identifier Text: i
|——————Node:< Text: <
|——————Node:number_literal Text: 7
|—————Node:&& Text: &&
|—————Node:binary_expression Text: isoMessageOutgoing.index < isoMessageOutgoing.length
|——————Node:field_expression Text: isoMessageOutgoing.index
|———————Node:identifier Text: isoMessageOutgoing
|———————Node:. Text: .
|———————Node:field_identifier Text: index
|——————Node:< Text: <
|——————Node:field_expression Text: isoMessageOutgoing.length
|———————Node:identifier Text: isoMessageOutgoing
|———————Node:. Text: .
|———————Node:field_identifier Text: length
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    frame.data.u8[i+1] = isoMessageOutgoing.data[isoMessageOutgoing.index++];
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: frame.data.u8[i+1] = isoMessageOutgoing.data[isoMessageOutgoing.index++];
|——————Node:assignment_expression Text: frame.data.u8[i+1] = isoMessageOutgoing.data[isoMessageOutgoing.index++]
|———————Node:subscript_expression Text: frame.data.u8[i+1]
|————————Node:field_expression Text: frame.data.u8
|—————————Node:field_expression Text: frame.data
|——————————Node:identifier Text: frame
|——————————Node:. Text: .
|——————————Node:field_identifier Text: data
|—————————Node:. Text: .
|—————————Node:field_identifier Text: u8
|————————Node:subscript_argument_list Text: [i+1]
|—————————Node:[ Text: [
|—————————Node:binary_expression Text: i+1
|——————————Node:identifier Text: i
|——————————Node:+ Text: +
|——————————Node:number_literal Text: 1
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:subscript_expression Text: isoMessageOutgoing.data[isoMessageOutgoing.index++]
|————————Node:field_expression Text: isoMessageOutgoing.data
|—————————Node:identifier Text: isoMessageOutgoing
|—————————Node:. Text: .
|—————————Node:field_identifier Text: data
|————————Node:subscript_argument_list Text: [isoMessageOutgoing.index++]
|—————————Node:[ Text: [
|—————————Node:update_expression Text: isoMessageOutgoing.index++
|——————————Node:field_expression Text: isoMessageOutgoing.index
|———————————Node:identifier Text: isoMessageOutgoing
|———————————Node:. Text: .
|———————————Node:field_identifier Text: index
|——————————Node:++ Text: ++
|—————————Node:] Text: ]
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:for_statement Text: for (; i < 7; i++) {
    frame.data.u8[i+1] = 0;
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:; Text: ;
|————Node:binary_expression Text: i < 7
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:number_literal Text: 7
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    frame.data.u8[i+1] = 0;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: frame.data.u8[i+1] = 0;
|——————Node:assignment_expression Text: frame.data.u8[i+1] = 0
|———————Node:subscript_expression Text: frame.data.u8[i+1]
|————————Node:field_expression Text: frame.data.u8
|—————————Node:field_expression Text: frame.data
|——————————Node:identifier Text: frame
|——————————Node:. Text: .
|——————————Node:field_identifier Text: data
|—————————Node:. Text: .
|—————————Node:field_identifier Text: u8
|————————Node:subscript_argument_list Text: [i+1]
|—————————Node:[ Text: [
|—————————Node:binary_expression Text: i+1
|——————————Node:identifier Text: i
|——————————Node:+ Text: +
|——————————Node:number_literal Text: 1
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:number_literal Text: 0
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment Text: // send the frame
|———Node:if_statement Text: if (isotp_config->mode_debug & DEBUG_COMMAND_ISO) {
    Serial.print ("> com:Sending ISOTP NEXT:");
    Serial.print (canFrameToString (frame));
  }
|————Node:if Text: if
|————Node:condition_clause Text: (isotp_config->mode_debug & DEBUG_COMMAND_ISO)
|—————Node:( Text: (
|—————Node:binary_expression Text: isotp_config->mode_debug & DEBUG_COMMAND_ISO
|——————Node:field_expression Text: isotp_config->mode_debug
|———————Node:identifier Text: isotp_config
|———————Node:-> Text: ->
|———————Node:field_identifier Text: mode_debug
|——————Node:& Text: &
|——————Node:identifier Text: DEBUG_COMMAND_ISO
|—————Node:) Text: )
|————Node:compound_statement Text: {
    Serial.print ("> com:Sending ISOTP NEXT:");
    Serial.print (canFrameToString (frame));
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: Serial.print ("> com:Sending ISOTP NEXT:");
|——————Node:call_expression Text: Serial.print ("> com:Sending ISOTP NEXT:")
|———————Node:field_expression Text: Serial.print
|————————Node:identifier Text: Serial
|————————Node:. Text: .
|————————Node:field_identifier Text: print
|———————Node:argument_list Text: ("> com:Sending ISOTP NEXT:")
|————————Node:( Text: (
|————————Node:string_literal Text: "> com:Sending ISOTP NEXT:"
|—————————Node:" Text: "
|—————————Node:string_content Text: > com:Sending ISOTP NEXT:
|—————————Node:" Text: "
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: Serial.print (canFrameToString (frame));
|——————Node:call_expression Text: Serial.print (canFrameToString (frame))
|———————Node:field_expression Text: Serial.print
|————————Node:identifier Text: Serial
|————————Node:. Text: .
|————————Node:field_identifier Text: print
|———————Node:argument_list Text: (canFrameToString (frame))
|————————Node:( Text: (
|————————Node:call_expression Text: canFrameToString (frame)
|—————————Node:identifier Text: canFrameToString
|—————————Node:argument_list Text: (frame)
|——————————Node:( Text: (
|——————————Node:identifier Text: frame
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:if_statement Text: if (isoMessageOutgoing.length == isoMessageOutgoing.index) {
    // Done sending the outgoing message, so reset it and cancel further
    // handling by this ticker
    isoMessageOutgoing.length = isoMessageOutgoing.index = 0;
    isoMessageOutgoing.flow_active = 0;

    // At this moment, further sending by the ticker will stop. A few clow control
    // should not come in, but we now expect the answer, so do not invalidate the
    // incoming id
    // isoMessageIncoming.id = 0xffff;
    // the incoming message is full initiaized (id, index)
  }
|————Node:if Text: if
|————Node:condition_clause Text: (isoMessageOutgoing.length == isoMessageOutgoing.index)
|—————Node:( Text: (
|—————Node:binary_expression Text: isoMessageOutgoing.length == isoMessageOutgoing.index
|——————Node:field_expression Text: isoMessageOutgoing.length
|———————Node:identifier Text: isoMessageOutgoing
|———————Node:. Text: .
|———————Node:field_identifier Text: length
|——————Node:== Text: ==
|——————Node:field_expression Text: isoMessageOutgoing.index
|———————Node:identifier Text: isoMessageOutgoing
|———————Node:. Text: .
|———————Node:field_identifier Text: index
|—————Node:) Text: )
|————Node:compound_statement Text: {
    // Done sending the outgoing message, so reset it and cancel further
    // handling by this ticker
    isoMessageOutgoing.length = isoMessageOutgoing.index = 0;
    isoMessageOutgoing.flow_active = 0;

    // At this moment, further sending by the ticker will stop. A few clow control
    // should not come in, but we now expect the answer, so do not invalidate the
    // incoming id
    // isoMessageIncoming.id = 0xffff;
    // the incoming message is full initiaized (id, index)
  }
|—————Node:{ Text: {
|—————Node:comment Text: // Done sending the outgoing message, so reset it and cancel further
|—————Node:comment Text: // handling by this ticker
|—————Node:expression_statement Text: isoMessageOutgoing.length = isoMessageOutgoing.index = 0;
|——————Node:assignment_expression Text: isoMessageOutgoing.length = isoMessageOutgoing.index = 0
|———————Node:field_expression Text: isoMessageOutgoing.length
|————————Node:identifier Text: isoMessageOutgoing
|————————Node:. Text: .
|————————Node:field_identifier Text: length
|———————Node:= Text: =
|———————Node:assignment_expression Text: isoMessageOutgoing.index = 0
|————————Node:field_expression Text: isoMessageOutgoing.index
|—————————Node:identifier Text: isoMessageOutgoing
|—————————Node:. Text: .
|—————————Node:field_identifier Text: index
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|——————Node:; Text: ;
|—————Node:expression_statement Text: isoMessageOutgoing.flow_active = 0;
|——————Node:assignment_expression Text: isoMessageOutgoing.flow_active = 0
|———————Node:field_expression Text: isoMessageOutgoing.flow_active
|————————Node:identifier Text: isoMessageOutgoing
|————————Node:. Text: .
|————————Node:field_identifier Text: flow_active
|———————Node:= Text: =
|———————Node:number_literal Text: 0
|——————Node:; Text: ;
|—————Node:comment Text: // At this moment, further sending by the ticker will stop. A few clow control
|—————Node:comment Text: // should not come in, but we now expect the answer, so do not invalidate the
|—————Node:comment Text: // incoming id
|—————Node:comment Text: // isoMessageIncoming.id = 0xffff;
|—————Node:comment Text: // the incoming message is full initiaized (id, index)
|—————Node:} Text: }
|———Node:if_statement Text: if (isoMessageOutgoing.flow_counter != 0) {
    if (--isoMessageOutgoing.flow_counter == 0) {
      isoMessageOutgoing.flow_active = 0;
    }
  }
|————Node:if Text: if
|————Node:condition_clause Text: (isoMessageOutgoing.flow_counter != 0)
|—————Node:( Text: (
|—————Node:binary_expression Text: isoMessageOutgoing.flow_counter != 0
|——————Node:field_expression Text: isoMessageOutgoing.flow_counter
|———————Node:identifier Text: isoMessageOutgoing
|———————Node:. Text: .
|———————Node:field_identifier Text: flow_counter
|——————Node:!= Text: !=
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {
    if (--isoMessageOutgoing.flow_counter == 0) {
      isoMessageOutgoing.flow_active = 0;
    }
  }
|—————Node:{ Text: {
|—————Node:if_statement Text: if (--isoMessageOutgoing.flow_counter == 0) {
      isoMessageOutgoing.flow_active = 0;
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: (--isoMessageOutgoing.flow_counter == 0)
|———————Node:( Text: (
|———————Node:binary_expression Text: --isoMessageOutgoing.flow_counter == 0
|————————Node:update_expression Text: --isoMessageOutgoing.flow_counter
|—————————Node:-- Text: --
|—————————Node:field_expression Text: isoMessageOutgoing.flow_counter
|——————————Node:identifier Text: isoMessageOutgoing
|——————————Node:. Text: .
|——————————Node:field_identifier Text: flow_counter
|————————Node:== Text: ==
|————————Node:number_literal Text: 0
|———————Node:) Text: )
|——————Node:compound_statement Text: {
      isoMessageOutgoing.flow_active = 0;
    }
|———————Node:{ Text: {
|———————Node:expression_statement Text: isoMessageOutgoing.flow_active = 0;
|————————Node:assignment_expression Text: isoMessageOutgoing.flow_active = 0
|—————————Node:field_expression Text: isoMessageOutgoing.flow_active
|——————————Node:identifier Text: isoMessageOutgoing
|——————————Node:. Text: .
|——————————Node:field_identifier Text: flow_active
|—————————Node:= Text: =
|—————————Node:number_literal Text: 0
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:expression_statement Text: led_set (LED_GREEN, true);
|————Node:call_expression Text: led_set (LED_GREEN, true)
|—————Node:identifier Text: led_set
|—————Node:argument_list Text: (LED_GREEN, true)
|——————Node:( Text: (
|——————Node:identifier Text: LED_GREEN
|——————Node:, Text: ,
|——————Node:true Text: true
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: can_send (&frame, 0);
|————Node:call_expression Text: can_send (&frame, 0)
|—————Node:identifier Text: can_send
|—————Node:argument_list Text: (&frame, 0)
|——————Node:( Text: (
|——————Node:pointer_expression Text: &frame
|———————Node:& Text: &
|———————Node:identifier Text: frame
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment Text: // bus ogic needs to be added
|———Node:expression_statement Text: led_set (LED_GREEN, false);
|————Node:call_expression Text: led_set (LED_GREEN, false)
|—————Node:identifier Text: led_set
|—————Node:argument_list Text: (LED_GREEN, false)
|——————Node:( Text: (
|——————Node:identifier Text: LED_GREEN
|——————Node:, Text: ,
|——————Node:false Text: false
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment Text: //
|———Node:expression_statement Text: lastMicros = micros();
|————Node:assignment_expression Text: lastMicros = micros()
|—————Node:identifier Text: lastMicros
|—————Node:= Text: =
|—————Node:call_expression Text: micros()
|——————Node:identifier Text: micros
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void storeIsotpframe (CAN_frame_t &frame, uint8_t bus) {
  // if there is content and this is the frame we are waiting for
  if (frame.FIR.B.DLC > 0 && frame.MsgID == isoMessageIncoming.id) {

    uint8_t type = frame.data.u8[0] >> 4;          // type = first nibble

    // single frame answer ***************************************************
    if (type == 0x0) {
      if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) {
        Serial.print("< can:ISO SING:");
        Serial.print(canFrameToString(frame));
      }

      uint16_t messageLength = frame.data.u8[0] & 0x0f;// length = second nibble + second byte
      if (messageLength > 7) messageLength = 7;    // this should never happen
      isoMessageIncoming.length = messageLength;

      // fill up with this initial first-frame data (should always be 6)
      for (int i = 1; i < frame.FIR.B.DLC && isoMessageIncoming.index < isoMessageIncoming.length; i++) {
        isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
      }
      if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) Serial.print("> can:ISO MSG:");
      if (isotp_config->output_handler) isotp_config->output_handler (isoMessageToString (isoMessageIncoming));
      isoMessageIncoming.id = 0xffff;              // cancel this message so nothing will be added intil it is re-initialized
    }

    // first frame of a multi-framed message *********************************
    else if (type == 0x1) {
      if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) {
        Serial.print("< can:ISO FRST:");
        Serial.print(canFrameToString(frame));
      }

      // start by requesting requesing the type Consecutive (0x2) frames by sending a Flow frame
      led_set (LED_GREEN, true);
      can_send_flow (isoMessageOutgoing.id, bus);
      led_set (LED_GREEN, false);

      uint16_t messageLength = (frame.data.u8[0] & 0x0f) << 8;// length = second nibble + second byte
      messageLength |= frame.data.u8[1];
      if (messageLength > 4096) messageLength = 4096; // this should never happen
      isoMessageIncoming.length = messageLength;
      for (int i = 2; i < 8; i++) {
        isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
      }
    }

    // consecutive frame(s) **************************************************
    else if (type == 0x2) {
      if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) {
        Serial.print("< can:ISO NEXT:");
        Serial.print(canFrameToString(frame));
      }

      uint8_t sequence = frame.data.u8[0] & 0x0f;
      if (isoMessageIncoming.next == sequence) {
        for (int i = 1; i < frame.FIR.B.DLC && isoMessageIncoming.index < isoMessageIncoming.length; i++) {
          isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
        }

        // wait for next message, rollover from 15 to 0
        isoMessageIncoming.next = isoMessageIncoming.next == 15 ? 0 : isoMessageIncoming.next + 1;

        // is this the last part?
        if (isoMessageIncoming.index == isoMessageIncoming.length) {
          // output the data
          String dataString = isoMessageToString(isoMessageIncoming);
          if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) Serial.print("> can:ISO MSG:");
          if (isotp_config->output_handler) isotp_config->output_handler (dataString);
          isoMessageIncoming.id = 0xffff;              // cancel this message so nothing will be added intil it is re-initialized
        }
      } else {
        if (isotp_config->mode_debug) Serial.println("< can:ISO Out of sequence, resetting");
        isoMessageIncoming.id = 0xffff;              // cancel this message so nothing will be added intil it is re-initialized
      }

      // incoming flow control ***********************************************
    } else if (type == 0x3) {
      //uint8_t flag = isoMessageIncoming.data[0] &0x0f;
      isoMessageOutgoing.flow_counter = frame.data.u8[1];
      isoMessageOutgoing.flow_delay = frame.data.u8[2] <= 127 ? frame.data.u8[2] * 1000 : frame.data.u8[2] - 0xf0;
      // to avoid overwhelming the outgoing queue, set minimum to 5 ms
      // this is experimental.
      if (isoMessageOutgoing.flow_delay < 5000) isoMessageOutgoing.flow_delay = 5000;
      isoMessageOutgoing.flow_active = 1;
      lastMicros = micros();
    } else {
      if (isotp_config->mode_debug) Serial.println("< can:ISO ignoring unknown frame type:" + String (type));
    }

  } else {
    if (isotp_config->mode_debug) Serial.println("< can:ISO frame of unrequested id:" + String(frame.MsgID, HEX));
  }
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: storeIsotpframe (CAN_frame_t &frame, uint8_t bus)
|———Node:identifier Text: storeIsotpframe
|———Node:parameter_list Text: (CAN_frame_t &frame, uint8_t bus)
|————Node:( Text: (
|————Node:parameter_declaration Text: CAN_frame_t &frame
|—————Node:type_identifier Text: CAN_frame_t
|—————Node:reference_declarator Text: &frame
|——————Node:& Text: &
|——————Node:identifier Text: frame
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint8_t bus
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: bus
|————Node:) Text: )
|——Node:compound_statement Text: {
  // if there is content and this is the frame we are waiting for
  if (frame.FIR.B.DLC > 0 && frame.MsgID == isoMessageIncoming.id) {

    uint8_t type = frame.data.u8[0] >> 4;          // type = first nibble

    // single frame answer ***************************************************
    if (type == 0x0) {
      if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) {
        Serial.print("< can:ISO SING:");
        Serial.print(canFrameToString(frame));
      }

      uint16_t messageLength = frame.data.u8[0] & 0x0f;// length = second nibble + second byte
      if (messageLength > 7) messageLength = 7;    // this should never happen
      isoMessageIncoming.length = messageLength;

      // fill up with this initial first-frame data (should always be 6)
      for (int i = 1; i < frame.FIR.B.DLC && isoMessageIncoming.index < isoMessageIncoming.length; i++) {
        isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
      }
      if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) Serial.print("> can:ISO MSG:");
      if (isotp_config->output_handler) isotp_config->output_handler (isoMessageToString (isoMessageIncoming));
      isoMessageIncoming.id = 0xffff;              // cancel this message so nothing will be added intil it is re-initialized
    }

    // first frame of a multi-framed message *********************************
    else if (type == 0x1) {
      if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) {
        Serial.print("< can:ISO FRST:");
        Serial.print(canFrameToString(frame));
      }

      // start by requesting requesing the type Consecutive (0x2) frames by sending a Flow frame
      led_set (LED_GREEN, true);
      can_send_flow (isoMessageOutgoing.id, bus);
      led_set (LED_GREEN, false);

      uint16_t messageLength = (frame.data.u8[0] & 0x0f) << 8;// length = second nibble + second byte
      messageLength |= frame.data.u8[1];
      if (messageLength > 4096) messageLength = 4096; // this should never happen
      isoMessageIncoming.length = messageLength;
      for (int i = 2; i < 8; i++) {
        isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
      }
    }

    // consecutive frame(s) **************************************************
    else if (type == 0x2) {
      if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) {
        Serial.print("< can:ISO NEXT:");
        Serial.print(canFrameToString(frame));
      }

      uint8_t sequence = frame.data.u8[0] & 0x0f;
      if (isoMessageIncoming.next == sequence) {
        for (int i = 1; i < frame.FIR.B.DLC && isoMessageIncoming.index < isoMessageIncoming.length; i++) {
          isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
        }

        // wait for next message, rollover from 15 to 0
        isoMessageIncoming.next = isoMessageIncoming.next == 15 ? 0 : isoMessageIncoming.next + 1;

        // is this the last part?
        if (isoMessageIncoming.index == isoMessageIncoming.length) {
          // output the data
          String dataString = isoMessageToString(isoMessageIncoming);
          if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) Serial.print("> can:ISO MSG:");
          if (isotp_config->output_handler) isotp_config->output_handler (dataString);
          isoMessageIncoming.id = 0xffff;              // cancel this message so nothing will be added intil it is re-initialized
        }
      } else {
        if (isotp_config->mode_debug) Serial.println("< can:ISO Out of sequence, resetting");
        isoMessageIncoming.id = 0xffff;              // cancel this message so nothing will be added intil it is re-initialized
      }

      // incoming flow control ***********************************************
    } else if (type == 0x3) {
      //uint8_t flag = isoMessageIncoming.data[0] &0x0f;
      isoMessageOutgoing.flow_counter = frame.data.u8[1];
      isoMessageOutgoing.flow_delay = frame.data.u8[2] <= 127 ? frame.data.u8[2] * 1000 : frame.data.u8[2] - 0xf0;
      // to avoid overwhelming the outgoing queue, set minimum to 5 ms
      // this is experimental.
      if (isoMessageOutgoing.flow_delay < 5000) isoMessageOutgoing.flow_delay = 5000;
      isoMessageOutgoing.flow_active = 1;
      lastMicros = micros();
    } else {
      if (isotp_config->mode_debug) Serial.println("< can:ISO ignoring unknown frame type:" + String (type));
    }

  } else {
    if (isotp_config->mode_debug) Serial.println("< can:ISO frame of unrequested id:" + String(frame.MsgID, HEX));
  }
}
|———Node:{ Text: {
|———Node:comment Text: // if there is content and this is the frame we are waiting for
|———Node:if_statement Text: if (frame.FIR.B.DLC > 0 && frame.MsgID == isoMessageIncoming.id) {

    uint8_t type = frame.data.u8[0] >> 4;          // type = first nibble

    // single frame answer ***************************************************
    if (type == 0x0) {
      if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) {
        Serial.print("< can:ISO SING:");
        Serial.print(canFrameToString(frame));
      }

      uint16_t messageLength = frame.data.u8[0] & 0x0f;// length = second nibble + second byte
      if (messageLength > 7) messageLength = 7;    // this should never happen
      isoMessageIncoming.length = messageLength;

      // fill up with this initial first-frame data (should always be 6)
      for (int i = 1; i < frame.FIR.B.DLC && isoMessageIncoming.index < isoMessageIncoming.length; i++) {
        isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
      }
      if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) Serial.print("> can:ISO MSG:");
      if (isotp_config->output_handler) isotp_config->output_handler (isoMessageToString (isoMessageIncoming));
      isoMessageIncoming.id = 0xffff;              // cancel this message so nothing will be added intil it is re-initialized
    }

    // first frame of a multi-framed message *********************************
    else if (type == 0x1) {
      if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) {
        Serial.print("< can:ISO FRST:");
        Serial.print(canFrameToString(frame));
      }

      // start by requesting requesing the type Consecutive (0x2) frames by sending a Flow frame
      led_set (LED_GREEN, true);
      can_send_flow (isoMessageOutgoing.id, bus);
      led_set (LED_GREEN, false);

      uint16_t messageLength = (frame.data.u8[0] & 0x0f) << 8;// length = second nibble + second byte
      messageLength |= frame.data.u8[1];
      if (messageLength > 4096) messageLength = 4096; // this should never happen
      isoMessageIncoming.length = messageLength;
      for (int i = 2; i < 8; i++) {
        isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
      }
    }

    // consecutive frame(s) **************************************************
    else if (type == 0x2) {
      if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) {
        Serial.print("< can:ISO NEXT:");
        Serial.print(canFrameToString(frame));
      }

      uint8_t sequence = frame.data.u8[0] & 0x0f;
      if (isoMessageIncoming.next == sequence) {
        for (int i = 1; i < frame.FIR.B.DLC && isoMessageIncoming.index < isoMessageIncoming.length; i++) {
          isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
        }

        // wait for next message, rollover from 15 to 0
        isoMessageIncoming.next = isoMessageIncoming.next == 15 ? 0 : isoMessageIncoming.next + 1;

        // is this the last part?
        if (isoMessageIncoming.index == isoMessageIncoming.length) {
          // output the data
          String dataString = isoMessageToString(isoMessageIncoming);
          if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) Serial.print("> can:ISO MSG:");
          if (isotp_config->output_handler) isotp_config->output_handler (dataString);
          isoMessageIncoming.id = 0xffff;              // cancel this message so nothing will be added intil it is re-initialized
        }
      } else {
        if (isotp_config->mode_debug) Serial.println("< can:ISO Out of sequence, resetting");
        isoMessageIncoming.id = 0xffff;              // cancel this message so nothing will be added intil it is re-initialized
      }

      // incoming flow control ***********************************************
    } else if (type == 0x3) {
      //uint8_t flag = isoMessageIncoming.data[0] &0x0f;
      isoMessageOutgoing.flow_counter = frame.data.u8[1];
      isoMessageOutgoing.flow_delay = frame.data.u8[2] <= 127 ? frame.data.u8[2] * 1000 : frame.data.u8[2] - 0xf0;
      // to avoid overwhelming the outgoing queue, set minimum to 5 ms
      // this is experimental.
      if (isoMessageOutgoing.flow_delay < 5000) isoMessageOutgoing.flow_delay = 5000;
      isoMessageOutgoing.flow_active = 1;
      lastMicros = micros();
    } else {
      if (isotp_config->mode_debug) Serial.println("< can:ISO ignoring unknown frame type:" + String (type));
    }

  } else {
    if (isotp_config->mode_debug) Serial.println("< can:ISO frame of unrequested id:" + String(frame.MsgID, HEX));
  }
|————Node:if Text: if
|————Node:condition_clause Text: (frame.FIR.B.DLC > 0 && frame.MsgID == isoMessageIncoming.id)
|—————Node:( Text: (
|—————Node:binary_expression Text: frame.FIR.B.DLC > 0 && frame.MsgID == isoMessageIncoming.id
|——————Node:binary_expression Text: frame.FIR.B.DLC > 0
|———————Node:field_expression Text: frame.FIR.B.DLC
|————————Node:field_expression Text: frame.FIR.B
|—————————Node:field_expression Text: frame.FIR
|——————————Node:identifier Text: frame
|——————————Node:. Text: .
|——————————Node:field_identifier Text: FIR
|—————————Node:. Text: .
|—————————Node:field_identifier Text: B
|————————Node:. Text: .
|————————Node:field_identifier Text: DLC
|———————Node:> Text: >
|———————Node:number_literal Text: 0
|——————Node:&& Text: &&
|——————Node:binary_expression Text: frame.MsgID == isoMessageIncoming.id
|———————Node:field_expression Text: frame.MsgID
|————————Node:identifier Text: frame
|————————Node:. Text: .
|————————Node:field_identifier Text: MsgID
|———————Node:== Text: ==
|———————Node:field_expression Text: isoMessageIncoming.id
|————————Node:identifier Text: isoMessageIncoming
|————————Node:. Text: .
|————————Node:field_identifier Text: id
|—————Node:) Text: )
|————Node:compound_statement Text: {

    uint8_t type = frame.data.u8[0] >> 4;          // type = first nibble

    // single frame answer ***************************************************
    if (type == 0x0) {
      if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) {
        Serial.print("< can:ISO SING:");
        Serial.print(canFrameToString(frame));
      }

      uint16_t messageLength = frame.data.u8[0] & 0x0f;// length = second nibble + second byte
      if (messageLength > 7) messageLength = 7;    // this should never happen
      isoMessageIncoming.length = messageLength;

      // fill up with this initial first-frame data (should always be 6)
      for (int i = 1; i < frame.FIR.B.DLC && isoMessageIncoming.index < isoMessageIncoming.length; i++) {
        isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
      }
      if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) Serial.print("> can:ISO MSG:");
      if (isotp_config->output_handler) isotp_config->output_handler (isoMessageToString (isoMessageIncoming));
      isoMessageIncoming.id = 0xffff;              // cancel this message so nothing will be added intil it is re-initialized
    }

    // first frame of a multi-framed message *********************************
    else if (type == 0x1) {
      if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) {
        Serial.print("< can:ISO FRST:");
        Serial.print(canFrameToString(frame));
      }

      // start by requesting requesing the type Consecutive (0x2) frames by sending a Flow frame
      led_set (LED_GREEN, true);
      can_send_flow (isoMessageOutgoing.id, bus);
      led_set (LED_GREEN, false);

      uint16_t messageLength = (frame.data.u8[0] & 0x0f) << 8;// length = second nibble + second byte
      messageLength |= frame.data.u8[1];
      if (messageLength > 4096) messageLength = 4096; // this should never happen
      isoMessageIncoming.length = messageLength;
      for (int i = 2; i < 8; i++) {
        isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
      }
    }

    // consecutive frame(s) **************************************************
    else if (type == 0x2) {
      if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) {
        Serial.print("< can:ISO NEXT:");
        Serial.print(canFrameToString(frame));
      }

      uint8_t sequence = frame.data.u8[0] & 0x0f;
      if (isoMessageIncoming.next == sequence) {
        for (int i = 1; i < frame.FIR.B.DLC && isoMessageIncoming.index < isoMessageIncoming.length; i++) {
          isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
        }

        // wait for next message, rollover from 15 to 0
        isoMessageIncoming.next = isoMessageIncoming.next == 15 ? 0 : isoMessageIncoming.next + 1;

        // is this the last part?
        if (isoMessageIncoming.index == isoMessageIncoming.length) {
          // output the data
          String dataString = isoMessageToString(isoMessageIncoming);
          if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) Serial.print("> can:ISO MSG:");
          if (isotp_config->output_handler) isotp_config->output_handler (dataString);
          isoMessageIncoming.id = 0xffff;              // cancel this message so nothing will be added intil it is re-initialized
        }
      } else {
        if (isotp_config->mode_debug) Serial.println("< can:ISO Out of sequence, resetting");
        isoMessageIncoming.id = 0xffff;              // cancel this message so nothing will be added intil it is re-initialized
      }

      // incoming flow control ***********************************************
    } else if (type == 0x3) {
      //uint8_t flag = isoMessageIncoming.data[0] &0x0f;
      isoMessageOutgoing.flow_counter = frame.data.u8[1];
      isoMessageOutgoing.flow_delay = frame.data.u8[2] <= 127 ? frame.data.u8[2] * 1000 : frame.data.u8[2] - 0xf0;
      // to avoid overwhelming the outgoing queue, set minimum to 5 ms
      // this is experimental.
      if (isoMessageOutgoing.flow_delay < 5000) isoMessageOutgoing.flow_delay = 5000;
      isoMessageOutgoing.flow_active = 1;
      lastMicros = micros();
    } else {
      if (isotp_config->mode_debug) Serial.println("< can:ISO ignoring unknown frame type:" + String (type));
    }

  }
|—————Node:{ Text: {
|—————Node:declaration Text: uint8_t type = frame.data.u8[0] >> 4;
|——————Node:primitive_type Text: uint8_t
|——————Node:init_declarator Text: type = frame.data.u8[0] >> 4
|———————Node:identifier Text: type
|———————Node:= Text: =
|———————Node:binary_expression Text: frame.data.u8[0] >> 4
|————————Node:subscript_expression Text: frame.data.u8[0]
|—————————Node:field_expression Text: frame.data.u8
|——————————Node:field_expression Text: frame.data
|———————————Node:identifier Text: frame
|———————————Node:. Text: .
|———————————Node:field_identifier Text: data
|——————————Node:. Text: .
|——————————Node:field_identifier Text: u8
|—————————Node:subscript_argument_list Text: [0]
|——————————Node:[ Text: [
|——————————Node:number_literal Text: 0
|——————————Node:] Text: ]
|————————Node:>> Text: >>
|————————Node:number_literal Text: 4
|——————Node:; Text: ;
|—————Node:comment Text: // type = first nibble
|—————Node:comment Text: // single frame answer ***************************************************
|—————Node:if_statement Text: if (type == 0x0) {
      if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) {
        Serial.print("< can:ISO SING:");
        Serial.print(canFrameToString(frame));
      }

      uint16_t messageLength = frame.data.u8[0] & 0x0f;// length = second nibble + second byte
      if (messageLength > 7) messageLength = 7;    // this should never happen
      isoMessageIncoming.length = messageLength;

      // fill up with this initial first-frame data (should always be 6)
      for (int i = 1; i < frame.FIR.B.DLC && isoMessageIncoming.index < isoMessageIncoming.length; i++) {
        isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
      }
      if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) Serial.print("> can:ISO MSG:");
      if (isotp_config->output_handler) isotp_config->output_handler (isoMessageToString (isoMessageIncoming));
      isoMessageIncoming.id = 0xffff;              // cancel this message so nothing will be added intil it is re-initialized
    }

    // first frame of a multi-framed message *********************************
    else if (type == 0x1) {
      if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) {
        Serial.print("< can:ISO FRST:");
        Serial.print(canFrameToString(frame));
      }

      // start by requesting requesing the type Consecutive (0x2) frames by sending a Flow frame
      led_set (LED_GREEN, true);
      can_send_flow (isoMessageOutgoing.id, bus);
      led_set (LED_GREEN, false);

      uint16_t messageLength = (frame.data.u8[0] & 0x0f) << 8;// length = second nibble + second byte
      messageLength |= frame.data.u8[1];
      if (messageLength > 4096) messageLength = 4096; // this should never happen
      isoMessageIncoming.length = messageLength;
      for (int i = 2; i < 8; i++) {
        isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
      }
    }

    // consecutive frame(s) **************************************************
    else if (type == 0x2) {
      if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) {
        Serial.print("< can:ISO NEXT:");
        Serial.print(canFrameToString(frame));
      }

      uint8_t sequence = frame.data.u8[0] & 0x0f;
      if (isoMessageIncoming.next == sequence) {
        for (int i = 1; i < frame.FIR.B.DLC && isoMessageIncoming.index < isoMessageIncoming.length; i++) {
          isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
        }

        // wait for next message, rollover from 15 to 0
        isoMessageIncoming.next = isoMessageIncoming.next == 15 ? 0 : isoMessageIncoming.next + 1;

        // is this the last part?
        if (isoMessageIncoming.index == isoMessageIncoming.length) {
          // output the data
          String dataString = isoMessageToString(isoMessageIncoming);
          if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) Serial.print("> can:ISO MSG:");
          if (isotp_config->output_handler) isotp_config->output_handler (dataString);
          isoMessageIncoming.id = 0xffff;              // cancel this message so nothing will be added intil it is re-initialized
        }
      } else {
        if (isotp_config->mode_debug) Serial.println("< can:ISO Out of sequence, resetting");
        isoMessageIncoming.id = 0xffff;              // cancel this message so nothing will be added intil it is re-initialized
      }

      // incoming flow control ***********************************************
    } else if (type == 0x3) {
      //uint8_t flag = isoMessageIncoming.data[0] &0x0f;
      isoMessageOutgoing.flow_counter = frame.data.u8[1];
      isoMessageOutgoing.flow_delay = frame.data.u8[2] <= 127 ? frame.data.u8[2] * 1000 : frame.data.u8[2] - 0xf0;
      // to avoid overwhelming the outgoing queue, set minimum to 5 ms
      // this is experimental.
      if (isoMessageOutgoing.flow_delay < 5000) isoMessageOutgoing.flow_delay = 5000;
      isoMessageOutgoing.flow_active = 1;
      lastMicros = micros();
    } else {
      if (isotp_config->mode_debug) Serial.println("< can:ISO ignoring unknown frame type:" + String (type));
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: (type == 0x0)
|———————Node:( Text: (
|———————Node:binary_expression Text: type == 0x0
|————————Node:identifier Text: type
|————————Node:== Text: ==
|————————Node:number_literal Text: 0x0
|———————Node:) Text: )
|——————Node:compound_statement Text: {
      if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) {
        Serial.print("< can:ISO SING:");
        Serial.print(canFrameToString(frame));
      }

      uint16_t messageLength = frame.data.u8[0] & 0x0f;// length = second nibble + second byte
      if (messageLength > 7) messageLength = 7;    // this should never happen
      isoMessageIncoming.length = messageLength;

      // fill up with this initial first-frame data (should always be 6)
      for (int i = 1; i < frame.FIR.B.DLC && isoMessageIncoming.index < isoMessageIncoming.length; i++) {
        isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
      }
      if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) Serial.print("> can:ISO MSG:");
      if (isotp_config->output_handler) isotp_config->output_handler (isoMessageToString (isoMessageIncoming));
      isoMessageIncoming.id = 0xffff;              // cancel this message so nothing will be added intil it is re-initialized
    }
|———————Node:{ Text: {
|———————Node:if_statement Text: if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) {
        Serial.print("< can:ISO SING:");
        Serial.print(canFrameToString(frame));
      }
|————————Node:if Text: if
|————————Node:condition_clause Text: (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO
|——————————Node:field_expression Text: isotp_config->mode_debug
|———————————Node:identifier Text: isotp_config
|———————————Node:-> Text: ->
|———————————Node:field_identifier Text: mode_debug
|——————————Node:& Text: &
|——————————Node:identifier Text: DEBUG_BUS_RECEIVE_ISO
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
        Serial.print("< can:ISO SING:");
        Serial.print(canFrameToString(frame));
      }
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: Serial.print("< can:ISO SING:");
|——————————Node:call_expression Text: Serial.print("< can:ISO SING:")
|———————————Node:field_expression Text: Serial.print
|————————————Node:identifier Text: Serial
|————————————Node:. Text: .
|————————————Node:field_identifier Text: print
|———————————Node:argument_list Text: ("< can:ISO SING:")
|————————————Node:( Text: (
|————————————Node:string_literal Text: "< can:ISO SING:"
|—————————————Node:" Text: "
|—————————————Node:string_content Text: < can:ISO SING:
|—————————————Node:" Text: "
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:expression_statement Text: Serial.print(canFrameToString(frame));
|——————————Node:call_expression Text: Serial.print(canFrameToString(frame))
|———————————Node:field_expression Text: Serial.print
|————————————Node:identifier Text: Serial
|————————————Node:. Text: .
|————————————Node:field_identifier Text: print
|———————————Node:argument_list Text: (canFrameToString(frame))
|————————————Node:( Text: (
|————————————Node:call_expression Text: canFrameToString(frame)
|—————————————Node:identifier Text: canFrameToString
|—————————————Node:argument_list Text: (frame)
|——————————————Node:( Text: (
|——————————————Node:identifier Text: frame
|——————————————Node:) Text: )
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:} Text: }
|———————Node:declaration Text: uint16_t messageLength = frame.data.u8[0] & 0x0f;
|————————Node:primitive_type Text: uint16_t
|————————Node:init_declarator Text: messageLength = frame.data.u8[0] & 0x0f
|—————————Node:identifier Text: messageLength
|—————————Node:= Text: =
|—————————Node:binary_expression Text: frame.data.u8[0] & 0x0f
|——————————Node:subscript_expression Text: frame.data.u8[0]
|———————————Node:field_expression Text: frame.data.u8
|————————————Node:field_expression Text: frame.data
|—————————————Node:identifier Text: frame
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: data
|————————————Node:. Text: .
|————————————Node:field_identifier Text: u8
|———————————Node:subscript_argument_list Text: [0]
|————————————Node:[ Text: [
|————————————Node:number_literal Text: 0
|————————————Node:] Text: ]
|——————————Node:& Text: &
|——————————Node:number_literal Text: 0x0f
|————————Node:; Text: ;
|———————Node:comment Text: // length = second nibble + second byte
|———————Node:if_statement Text: if (messageLength > 7) messageLength = 7;
|————————Node:if Text: if
|————————Node:condition_clause Text: (messageLength > 7)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: messageLength > 7
|——————————Node:identifier Text: messageLength
|——————————Node:> Text: >
|——————————Node:number_literal Text: 7
|—————————Node:) Text: )
|————————Node:expression_statement Text: messageLength = 7;
|—————————Node:assignment_expression Text: messageLength = 7
|——————————Node:identifier Text: messageLength
|——————————Node:= Text: =
|——————————Node:number_literal Text: 7
|—————————Node:; Text: ;
|———————Node:comment Text: // this should never happen
|———————Node:expression_statement Text: isoMessageIncoming.length = messageLength;
|————————Node:assignment_expression Text: isoMessageIncoming.length = messageLength
|—————————Node:field_expression Text: isoMessageIncoming.length
|——————————Node:identifier Text: isoMessageIncoming
|——————————Node:. Text: .
|——————————Node:field_identifier Text: length
|—————————Node:= Text: =
|—————————Node:identifier Text: messageLength
|————————Node:; Text: ;
|———————Node:comment Text: // fill up with this initial first-frame data (should always be 6)
|———————Node:for_statement Text: for (int i = 1; i < frame.FIR.B.DLC && isoMessageIncoming.index < isoMessageIncoming.length; i++) {
        isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
      }
|————————Node:for Text: for
|————————Node:( Text: (
|————————Node:declaration Text: int i = 1;
|—————————Node:primitive_type Text: int
|—————————Node:init_declarator Text: i = 1
|——————————Node:identifier Text: i
|——————————Node:= Text: =
|——————————Node:number_literal Text: 1
|—————————Node:; Text: ;
|————————Node:binary_expression Text: i < frame.FIR.B.DLC && isoMessageIncoming.index < isoMessageIncoming.length
|—————————Node:binary_expression Text: i < frame.FIR.B.DLC
|——————————Node:identifier Text: i
|——————————Node:< Text: <
|——————————Node:field_expression Text: frame.FIR.B.DLC
|———————————Node:field_expression Text: frame.FIR.B
|————————————Node:field_expression Text: frame.FIR
|—————————————Node:identifier Text: frame
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: FIR
|————————————Node:. Text: .
|————————————Node:field_identifier Text: B
|———————————Node:. Text: .
|———————————Node:field_identifier Text: DLC
|—————————Node:&& Text: &&
|—————————Node:binary_expression Text: isoMessageIncoming.index < isoMessageIncoming.length
|——————————Node:field_expression Text: isoMessageIncoming.index
|———————————Node:identifier Text: isoMessageIncoming
|———————————Node:. Text: .
|———————————Node:field_identifier Text: index
|——————————Node:< Text: <
|——————————Node:field_expression Text: isoMessageIncoming.length
|———————————Node:identifier Text: isoMessageIncoming
|———————————Node:. Text: .
|———————————Node:field_identifier Text: length
|————————Node:; Text: ;
|————————Node:update_expression Text: i++
|—————————Node:identifier Text: i
|—————————Node:++ Text: ++
|————————Node:) Text: )
|————————Node:compound_statement Text: {
        isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
      }
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
|——————————Node:assignment_expression Text: isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i]
|———————————Node:subscript_expression Text: isoMessageIncoming.data[isoMessageIncoming.index++]
|————————————Node:field_expression Text: isoMessageIncoming.data
|—————————————Node:identifier Text: isoMessageIncoming
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: data
|————————————Node:subscript_argument_list Text: [isoMessageIncoming.index++]
|—————————————Node:[ Text: [
|—————————————Node:update_expression Text: isoMessageIncoming.index++
|——————————————Node:field_expression Text: isoMessageIncoming.index
|———————————————Node:identifier Text: isoMessageIncoming
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: index
|——————————————Node:++ Text: ++
|—————————————Node:] Text: ]
|———————————Node:= Text: =
|———————————Node:subscript_expression Text: frame.data.u8[i]
|————————————Node:field_expression Text: frame.data.u8
|—————————————Node:field_expression Text: frame.data
|——————————————Node:identifier Text: frame
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: data
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: u8
|————————————Node:subscript_argument_list Text: [i]
|—————————————Node:[ Text: [
|—————————————Node:identifier Text: i
|—————————————Node:] Text: ]
|——————————Node:; Text: ;
|—————————Node:} Text: }
|———————Node:if_statement Text: if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) Serial.print("> can:ISO MSG:");
|————————Node:if Text: if
|————————Node:condition_clause Text: (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO
|——————————Node:field_expression Text: isotp_config->mode_debug
|———————————Node:identifier Text: isotp_config
|———————————Node:-> Text: ->
|———————————Node:field_identifier Text: mode_debug
|——————————Node:& Text: &
|——————————Node:identifier Text: DEBUG_BUS_RECEIVE_ISO
|—————————Node:) Text: )
|————————Node:expression_statement Text: Serial.print("> can:ISO MSG:");
|—————————Node:call_expression Text: Serial.print("> can:ISO MSG:")
|——————————Node:field_expression Text: Serial.print
|———————————Node:identifier Text: Serial
|———————————Node:. Text: .
|———————————Node:field_identifier Text: print
|——————————Node:argument_list Text: ("> can:ISO MSG:")
|———————————Node:( Text: (
|———————————Node:string_literal Text: "> can:ISO MSG:"
|————————————Node:" Text: "
|————————————Node:string_content Text: > can:ISO MSG:
|————————————Node:" Text: "
|———————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:if_statement Text: if (isotp_config->output_handler) isotp_config->output_handler (isoMessageToString (isoMessageIncoming));
|————————Node:if Text: if
|————————Node:condition_clause Text: (isotp_config->output_handler)
|—————————Node:( Text: (
|—————————Node:field_expression Text: isotp_config->output_handler
|——————————Node:identifier Text: isotp_config
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: output_handler
|—————————Node:) Text: )
|————————Node:expression_statement Text: isotp_config->output_handler (isoMessageToString (isoMessageIncoming));
|—————————Node:call_expression Text: isotp_config->output_handler (isoMessageToString (isoMessageIncoming))
|——————————Node:field_expression Text: isotp_config->output_handler
|———————————Node:identifier Text: isotp_config
|———————————Node:-> Text: ->
|———————————Node:field_identifier Text: output_handler
|——————————Node:argument_list Text: (isoMessageToString (isoMessageIncoming))
|———————————Node:( Text: (
|———————————Node:call_expression Text: isoMessageToString (isoMessageIncoming)
|————————————Node:identifier Text: isoMessageToString
|————————————Node:argument_list Text: (isoMessageIncoming)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: isoMessageIncoming
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:expression_statement Text: isoMessageIncoming.id = 0xffff;
|————————Node:assignment_expression Text: isoMessageIncoming.id = 0xffff
|—————————Node:field_expression Text: isoMessageIncoming.id
|——————————Node:identifier Text: isoMessageIncoming
|——————————Node:. Text: .
|——————————Node:field_identifier Text: id
|—————————Node:= Text: =
|—————————Node:number_literal Text: 0xffff
|————————Node:; Text: ;
|———————Node:comment Text: // cancel this message so nothing will be added intil it is re-initialized
|———————Node:} Text: }
|——————Node:comment Text: // first frame of a multi-framed message *********************************
|——————Node:else_clause Text: else if (type == 0x1) {
      if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) {
        Serial.print("< can:ISO FRST:");
        Serial.print(canFrameToString(frame));
      }

      // start by requesting requesing the type Consecutive (0x2) frames by sending a Flow frame
      led_set (LED_GREEN, true);
      can_send_flow (isoMessageOutgoing.id, bus);
      led_set (LED_GREEN, false);

      uint16_t messageLength = (frame.data.u8[0] & 0x0f) << 8;// length = second nibble + second byte
      messageLength |= frame.data.u8[1];
      if (messageLength > 4096) messageLength = 4096; // this should never happen
      isoMessageIncoming.length = messageLength;
      for (int i = 2; i < 8; i++) {
        isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
      }
    }

    // consecutive frame(s) **************************************************
    else if (type == 0x2) {
      if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) {
        Serial.print("< can:ISO NEXT:");
        Serial.print(canFrameToString(frame));
      }

      uint8_t sequence = frame.data.u8[0] & 0x0f;
      if (isoMessageIncoming.next == sequence) {
        for (int i = 1; i < frame.FIR.B.DLC && isoMessageIncoming.index < isoMessageIncoming.length; i++) {
          isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
        }

        // wait for next message, rollover from 15 to 0
        isoMessageIncoming.next = isoMessageIncoming.next == 15 ? 0 : isoMessageIncoming.next + 1;

        // is this the last part?
        if (isoMessageIncoming.index == isoMessageIncoming.length) {
          // output the data
          String dataString = isoMessageToString(isoMessageIncoming);
          if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) Serial.print("> can:ISO MSG:");
          if (isotp_config->output_handler) isotp_config->output_handler (dataString);
          isoMessageIncoming.id = 0xffff;              // cancel this message so nothing will be added intil it is re-initialized
        }
      } else {
        if (isotp_config->mode_debug) Serial.println("< can:ISO Out of sequence, resetting");
        isoMessageIncoming.id = 0xffff;              // cancel this message so nothing will be added intil it is re-initialized
      }

      // incoming flow control ***********************************************
    } else if (type == 0x3) {
      //uint8_t flag = isoMessageIncoming.data[0] &0x0f;
      isoMessageOutgoing.flow_counter = frame.data.u8[1];
      isoMessageOutgoing.flow_delay = frame.data.u8[2] <= 127 ? frame.data.u8[2] * 1000 : frame.data.u8[2] - 0xf0;
      // to avoid overwhelming the outgoing queue, set minimum to 5 ms
      // this is experimental.
      if (isoMessageOutgoing.flow_delay < 5000) isoMessageOutgoing.flow_delay = 5000;
      isoMessageOutgoing.flow_active = 1;
      lastMicros = micros();
    } else {
      if (isotp_config->mode_debug) Serial.println("< can:ISO ignoring unknown frame type:" + String (type));
    }
|———————Node:else Text: else
|———————Node:if_statement Text: if (type == 0x1) {
      if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) {
        Serial.print("< can:ISO FRST:");
        Serial.print(canFrameToString(frame));
      }

      // start by requesting requesing the type Consecutive (0x2) frames by sending a Flow frame
      led_set (LED_GREEN, true);
      can_send_flow (isoMessageOutgoing.id, bus);
      led_set (LED_GREEN, false);

      uint16_t messageLength = (frame.data.u8[0] & 0x0f) << 8;// length = second nibble + second byte
      messageLength |= frame.data.u8[1];
      if (messageLength > 4096) messageLength = 4096; // this should never happen
      isoMessageIncoming.length = messageLength;
      for (int i = 2; i < 8; i++) {
        isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
      }
    }

    // consecutive frame(s) **************************************************
    else if (type == 0x2) {
      if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) {
        Serial.print("< can:ISO NEXT:");
        Serial.print(canFrameToString(frame));
      }

      uint8_t sequence = frame.data.u8[0] & 0x0f;
      if (isoMessageIncoming.next == sequence) {
        for (int i = 1; i < frame.FIR.B.DLC && isoMessageIncoming.index < isoMessageIncoming.length; i++) {
          isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
        }

        // wait for next message, rollover from 15 to 0
        isoMessageIncoming.next = isoMessageIncoming.next == 15 ? 0 : isoMessageIncoming.next + 1;

        // is this the last part?
        if (isoMessageIncoming.index == isoMessageIncoming.length) {
          // output the data
          String dataString = isoMessageToString(isoMessageIncoming);
          if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) Serial.print("> can:ISO MSG:");
          if (isotp_config->output_handler) isotp_config->output_handler (dataString);
          isoMessageIncoming.id = 0xffff;              // cancel this message so nothing will be added intil it is re-initialized
        }
      } else {
        if (isotp_config->mode_debug) Serial.println("< can:ISO Out of sequence, resetting");
        isoMessageIncoming.id = 0xffff;              // cancel this message so nothing will be added intil it is re-initialized
      }

      // incoming flow control ***********************************************
    } else if (type == 0x3) {
      //uint8_t flag = isoMessageIncoming.data[0] &0x0f;
      isoMessageOutgoing.flow_counter = frame.data.u8[1];
      isoMessageOutgoing.flow_delay = frame.data.u8[2] <= 127 ? frame.data.u8[2] * 1000 : frame.data.u8[2] - 0xf0;
      // to avoid overwhelming the outgoing queue, set minimum to 5 ms
      // this is experimental.
      if (isoMessageOutgoing.flow_delay < 5000) isoMessageOutgoing.flow_delay = 5000;
      isoMessageOutgoing.flow_active = 1;
      lastMicros = micros();
    } else {
      if (isotp_config->mode_debug) Serial.println("< can:ISO ignoring unknown frame type:" + String (type));
    }
|————————Node:if Text: if
|————————Node:condition_clause Text: (type == 0x1)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: type == 0x1
|——————————Node:identifier Text: type
|——————————Node:== Text: ==
|——————————Node:number_literal Text: 0x1
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
      if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) {
        Serial.print("< can:ISO FRST:");
        Serial.print(canFrameToString(frame));
      }

      // start by requesting requesing the type Consecutive (0x2) frames by sending a Flow frame
      led_set (LED_GREEN, true);
      can_send_flow (isoMessageOutgoing.id, bus);
      led_set (LED_GREEN, false);

      uint16_t messageLength = (frame.data.u8[0] & 0x0f) << 8;// length = second nibble + second byte
      messageLength |= frame.data.u8[1];
      if (messageLength > 4096) messageLength = 4096; // this should never happen
      isoMessageIncoming.length = messageLength;
      for (int i = 2; i < 8; i++) {
        isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
      }
    }
|—————————Node:{ Text: {
|—————————Node:if_statement Text: if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) {
        Serial.print("< can:ISO FRST:");
        Serial.print(canFrameToString(frame));
      }
|——————————Node:if Text: if
|——————————Node:condition_clause Text: (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO
|————————————Node:field_expression Text: isotp_config->mode_debug
|—————————————Node:identifier Text: isotp_config
|—————————————Node:-> Text: ->
|—————————————Node:field_identifier Text: mode_debug
|————————————Node:& Text: &
|————————————Node:identifier Text: DEBUG_BUS_RECEIVE_ISO
|———————————Node:) Text: )
|——————————Node:compound_statement Text: {
        Serial.print("< can:ISO FRST:");
        Serial.print(canFrameToString(frame));
      }
|———————————Node:{ Text: {
|———————————Node:expression_statement Text: Serial.print("< can:ISO FRST:");
|————————————Node:call_expression Text: Serial.print("< can:ISO FRST:")
|—————————————Node:field_expression Text: Serial.print
|——————————————Node:identifier Text: Serial
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: print
|—————————————Node:argument_list Text: ("< can:ISO FRST:")
|——————————————Node:( Text: (
|——————————————Node:string_literal Text: "< can:ISO FRST:"
|———————————————Node:" Text: "
|———————————————Node:string_content Text: < can:ISO FRST:
|———————————————Node:" Text: "
|——————————————Node:) Text: )
|————————————Node:; Text: ;
|———————————Node:expression_statement Text: Serial.print(canFrameToString(frame));
|————————————Node:call_expression Text: Serial.print(canFrameToString(frame))
|—————————————Node:field_expression Text: Serial.print
|——————————————Node:identifier Text: Serial
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: print
|—————————————Node:argument_list Text: (canFrameToString(frame))
|——————————————Node:( Text: (
|——————————————Node:call_expression Text: canFrameToString(frame)
|———————————————Node:identifier Text: canFrameToString
|———————————————Node:argument_list Text: (frame)
|————————————————Node:( Text: (
|————————————————Node:identifier Text: frame
|————————————————Node:) Text: )
|——————————————Node:) Text: )
|————————————Node:; Text: ;
|———————————Node:} Text: }
|—————————Node:comment Text: // start by requesting requesing the type Consecutive (0x2) frames by sending a Flow frame
|—————————Node:expression_statement Text: led_set (LED_GREEN, true);
|——————————Node:call_expression Text: led_set (LED_GREEN, true)
|———————————Node:identifier Text: led_set
|———————————Node:argument_list Text: (LED_GREEN, true)
|————————————Node:( Text: (
|————————————Node:identifier Text: LED_GREEN
|————————————Node:, Text: ,
|————————————Node:true Text: true
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:expression_statement Text: can_send_flow (isoMessageOutgoing.id, bus);
|——————————Node:call_expression Text: can_send_flow (isoMessageOutgoing.id, bus)
|———————————Node:identifier Text: can_send_flow
|———————————Node:argument_list Text: (isoMessageOutgoing.id, bus)
|————————————Node:( Text: (
|————————————Node:field_expression Text: isoMessageOutgoing.id
|—————————————Node:identifier Text: isoMessageOutgoing
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: id
|————————————Node:, Text: ,
|————————————Node:identifier Text: bus
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:expression_statement Text: led_set (LED_GREEN, false);
|——————————Node:call_expression Text: led_set (LED_GREEN, false)
|———————————Node:identifier Text: led_set
|———————————Node:argument_list Text: (LED_GREEN, false)
|————————————Node:( Text: (
|————————————Node:identifier Text: LED_GREEN
|————————————Node:, Text: ,
|————————————Node:false Text: false
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:declaration Text: uint16_t messageLength = (frame.data.u8[0] & 0x0f) << 8;
|——————————Node:primitive_type Text: uint16_t
|——————————Node:init_declarator Text: messageLength = (frame.data.u8[0] & 0x0f) << 8
|———————————Node:identifier Text: messageLength
|———————————Node:= Text: =
|———————————Node:binary_expression Text: (frame.data.u8[0] & 0x0f) << 8
|————————————Node:parenthesized_expression Text: (frame.data.u8[0] & 0x0f)
|—————————————Node:( Text: (
|—————————————Node:binary_expression Text: frame.data.u8[0] & 0x0f
|——————————————Node:subscript_expression Text: frame.data.u8[0]
|———————————————Node:field_expression Text: frame.data.u8
|————————————————Node:field_expression Text: frame.data
|—————————————————Node:identifier Text: frame
|—————————————————Node:. Text: .
|—————————————————Node:field_identifier Text: data
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: u8
|———————————————Node:subscript_argument_list Text: [0]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 0
|————————————————Node:] Text: ]
|——————————————Node:& Text: &
|——————————————Node:number_literal Text: 0x0f
|—————————————Node:) Text: )
|————————————Node:<< Text: <<
|————————————Node:number_literal Text: 8
|——————————Node:; Text: ;
|—————————Node:comment Text: // length = second nibble + second byte
|—————————Node:expression_statement Text: messageLength |= frame.data.u8[1];
|——————————Node:assignment_expression Text: messageLength |= frame.data.u8[1]
|———————————Node:identifier Text: messageLength
|———————————Node:|= Text: |=
|———————————Node:subscript_expression Text: frame.data.u8[1]
|————————————Node:field_expression Text: frame.data.u8
|—————————————Node:field_expression Text: frame.data
|——————————————Node:identifier Text: frame
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: data
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: u8
|————————————Node:subscript_argument_list Text: [1]
|—————————————Node:[ Text: [
|—————————————Node:number_literal Text: 1
|—————————————Node:] Text: ]
|——————————Node:; Text: ;
|—————————Node:if_statement Text: if (messageLength > 4096) messageLength = 4096;
|——————————Node:if Text: if
|——————————Node:condition_clause Text: (messageLength > 4096)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: messageLength > 4096
|————————————Node:identifier Text: messageLength
|————————————Node:> Text: >
|————————————Node:number_literal Text: 4096
|———————————Node:) Text: )
|——————————Node:expression_statement Text: messageLength = 4096;
|———————————Node:assignment_expression Text: messageLength = 4096
|————————————Node:identifier Text: messageLength
|————————————Node:= Text: =
|————————————Node:number_literal Text: 4096
|———————————Node:; Text: ;
|—————————Node:comment Text: // this should never happen
|—————————Node:expression_statement Text: isoMessageIncoming.length = messageLength;
|——————————Node:assignment_expression Text: isoMessageIncoming.length = messageLength
|———————————Node:field_expression Text: isoMessageIncoming.length
|————————————Node:identifier Text: isoMessageIncoming
|————————————Node:. Text: .
|————————————Node:field_identifier Text: length
|———————————Node:= Text: =
|———————————Node:identifier Text: messageLength
|——————————Node:; Text: ;
|—————————Node:for_statement Text: for (int i = 2; i < 8; i++) {
        isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
      }
|——————————Node:for Text: for
|——————————Node:( Text: (
|——————————Node:declaration Text: int i = 2;
|———————————Node:primitive_type Text: int
|———————————Node:init_declarator Text: i = 2
|————————————Node:identifier Text: i
|————————————Node:= Text: =
|————————————Node:number_literal Text: 2
|———————————Node:; Text: ;
|——————————Node:binary_expression Text: i < 8
|———————————Node:identifier Text: i
|———————————Node:< Text: <
|———————————Node:number_literal Text: 8
|——————————Node:; Text: ;
|——————————Node:update_expression Text: i++
|———————————Node:identifier Text: i
|———————————Node:++ Text: ++
|——————————Node:) Text: )
|——————————Node:compound_statement Text: {
        isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
      }
|———————————Node:{ Text: {
|———————————Node:expression_statement Text: isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
|————————————Node:assignment_expression Text: isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i]
|—————————————Node:subscript_expression Text: isoMessageIncoming.data[isoMessageIncoming.index++]
|——————————————Node:field_expression Text: isoMessageIncoming.data
|———————————————Node:identifier Text: isoMessageIncoming
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: data
|——————————————Node:subscript_argument_list Text: [isoMessageIncoming.index++]
|———————————————Node:[ Text: [
|———————————————Node:update_expression Text: isoMessageIncoming.index++
|————————————————Node:field_expression Text: isoMessageIncoming.index
|—————————————————Node:identifier Text: isoMessageIncoming
|—————————————————Node:. Text: .
|—————————————————Node:field_identifier Text: index
|————————————————Node:++ Text: ++
|———————————————Node:] Text: ]
|—————————————Node:= Text: =
|—————————————Node:subscript_expression Text: frame.data.u8[i]
|——————————————Node:field_expression Text: frame.data.u8
|———————————————Node:field_expression Text: frame.data
|————————————————Node:identifier Text: frame
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: data
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: u8
|——————————————Node:subscript_argument_list Text: [i]
|———————————————Node:[ Text: [
|———————————————Node:identifier Text: i
|———————————————Node:] Text: ]
|————————————Node:; Text: ;
|———————————Node:} Text: }
|—————————Node:} Text: }
|————————Node:comment Text: // consecutive frame(s) **************************************************
|————————Node:else_clause Text: else if (type == 0x2) {
      if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) {
        Serial.print("< can:ISO NEXT:");
        Serial.print(canFrameToString(frame));
      }

      uint8_t sequence = frame.data.u8[0] & 0x0f;
      if (isoMessageIncoming.next == sequence) {
        for (int i = 1; i < frame.FIR.B.DLC && isoMessageIncoming.index < isoMessageIncoming.length; i++) {
          isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
        }

        // wait for next message, rollover from 15 to 0
        isoMessageIncoming.next = isoMessageIncoming.next == 15 ? 0 : isoMessageIncoming.next + 1;

        // is this the last part?
        if (isoMessageIncoming.index == isoMessageIncoming.length) {
          // output the data
          String dataString = isoMessageToString(isoMessageIncoming);
          if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) Serial.print("> can:ISO MSG:");
          if (isotp_config->output_handler) isotp_config->output_handler (dataString);
          isoMessageIncoming.id = 0xffff;              // cancel this message so nothing will be added intil it is re-initialized
        }
      } else {
        if (isotp_config->mode_debug) Serial.println("< can:ISO Out of sequence, resetting");
        isoMessageIncoming.id = 0xffff;              // cancel this message so nothing will be added intil it is re-initialized
      }

      // incoming flow control ***********************************************
    } else if (type == 0x3) {
      //uint8_t flag = isoMessageIncoming.data[0] &0x0f;
      isoMessageOutgoing.flow_counter = frame.data.u8[1];
      isoMessageOutgoing.flow_delay = frame.data.u8[2] <= 127 ? frame.data.u8[2] * 1000 : frame.data.u8[2] - 0xf0;
      // to avoid overwhelming the outgoing queue, set minimum to 5 ms
      // this is experimental.
      if (isoMessageOutgoing.flow_delay < 5000) isoMessageOutgoing.flow_delay = 5000;
      isoMessageOutgoing.flow_active = 1;
      lastMicros = micros();
    } else {
      if (isotp_config->mode_debug) Serial.println("< can:ISO ignoring unknown frame type:" + String (type));
    }
|—————————Node:else Text: else
|—————————Node:if_statement Text: if (type == 0x2) {
      if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) {
        Serial.print("< can:ISO NEXT:");
        Serial.print(canFrameToString(frame));
      }

      uint8_t sequence = frame.data.u8[0] & 0x0f;
      if (isoMessageIncoming.next == sequence) {
        for (int i = 1; i < frame.FIR.B.DLC && isoMessageIncoming.index < isoMessageIncoming.length; i++) {
          isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
        }

        // wait for next message, rollover from 15 to 0
        isoMessageIncoming.next = isoMessageIncoming.next == 15 ? 0 : isoMessageIncoming.next + 1;

        // is this the last part?
        if (isoMessageIncoming.index == isoMessageIncoming.length) {
          // output the data
          String dataString = isoMessageToString(isoMessageIncoming);
          if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) Serial.print("> can:ISO MSG:");
          if (isotp_config->output_handler) isotp_config->output_handler (dataString);
          isoMessageIncoming.id = 0xffff;              // cancel this message so nothing will be added intil it is re-initialized
        }
      } else {
        if (isotp_config->mode_debug) Serial.println("< can:ISO Out of sequence, resetting");
        isoMessageIncoming.id = 0xffff;              // cancel this message so nothing will be added intil it is re-initialized
      }

      // incoming flow control ***********************************************
    } else if (type == 0x3) {
      //uint8_t flag = isoMessageIncoming.data[0] &0x0f;
      isoMessageOutgoing.flow_counter = frame.data.u8[1];
      isoMessageOutgoing.flow_delay = frame.data.u8[2] <= 127 ? frame.data.u8[2] * 1000 : frame.data.u8[2] - 0xf0;
      // to avoid overwhelming the outgoing queue, set minimum to 5 ms
      // this is experimental.
      if (isoMessageOutgoing.flow_delay < 5000) isoMessageOutgoing.flow_delay = 5000;
      isoMessageOutgoing.flow_active = 1;
      lastMicros = micros();
    } else {
      if (isotp_config->mode_debug) Serial.println("< can:ISO ignoring unknown frame type:" + String (type));
    }
|——————————Node:if Text: if
|——————————Node:condition_clause Text: (type == 0x2)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: type == 0x2
|————————————Node:identifier Text: type
|————————————Node:== Text: ==
|————————————Node:number_literal Text: 0x2
|———————————Node:) Text: )
|——————————Node:compound_statement Text: {
      if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) {
        Serial.print("< can:ISO NEXT:");
        Serial.print(canFrameToString(frame));
      }

      uint8_t sequence = frame.data.u8[0] & 0x0f;
      if (isoMessageIncoming.next == sequence) {
        for (int i = 1; i < frame.FIR.B.DLC && isoMessageIncoming.index < isoMessageIncoming.length; i++) {
          isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
        }

        // wait for next message, rollover from 15 to 0
        isoMessageIncoming.next = isoMessageIncoming.next == 15 ? 0 : isoMessageIncoming.next + 1;

        // is this the last part?
        if (isoMessageIncoming.index == isoMessageIncoming.length) {
          // output the data
          String dataString = isoMessageToString(isoMessageIncoming);
          if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) Serial.print("> can:ISO MSG:");
          if (isotp_config->output_handler) isotp_config->output_handler (dataString);
          isoMessageIncoming.id = 0xffff;              // cancel this message so nothing will be added intil it is re-initialized
        }
      } else {
        if (isotp_config->mode_debug) Serial.println("< can:ISO Out of sequence, resetting");
        isoMessageIncoming.id = 0xffff;              // cancel this message so nothing will be added intil it is re-initialized
      }

      // incoming flow control ***********************************************
    }
|———————————Node:{ Text: {
|———————————Node:if_statement Text: if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) {
        Serial.print("< can:ISO NEXT:");
        Serial.print(canFrameToString(frame));
      }
|————————————Node:if Text: if
|————————————Node:condition_clause Text: (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO)
|—————————————Node:( Text: (
|—————————————Node:binary_expression Text: isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO
|——————————————Node:field_expression Text: isotp_config->mode_debug
|———————————————Node:identifier Text: isotp_config
|———————————————Node:-> Text: ->
|———————————————Node:field_identifier Text: mode_debug
|——————————————Node:& Text: &
|——————————————Node:identifier Text: DEBUG_BUS_RECEIVE_ISO
|—————————————Node:) Text: )
|————————————Node:compound_statement Text: {
        Serial.print("< can:ISO NEXT:");
        Serial.print(canFrameToString(frame));
      }
|—————————————Node:{ Text: {
|—————————————Node:expression_statement Text: Serial.print("< can:ISO NEXT:");
|——————————————Node:call_expression Text: Serial.print("< can:ISO NEXT:")
|———————————————Node:field_expression Text: Serial.print
|————————————————Node:identifier Text: Serial
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: print
|———————————————Node:argument_list Text: ("< can:ISO NEXT:")
|————————————————Node:( Text: (
|————————————————Node:string_literal Text: "< can:ISO NEXT:"
|—————————————————Node:" Text: "
|—————————————————Node:string_content Text: < can:ISO NEXT:
|—————————————————Node:" Text: "
|————————————————Node:) Text: )
|——————————————Node:; Text: ;
|—————————————Node:expression_statement Text: Serial.print(canFrameToString(frame));
|——————————————Node:call_expression Text: Serial.print(canFrameToString(frame))
|———————————————Node:field_expression Text: Serial.print
|————————————————Node:identifier Text: Serial
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: print
|———————————————Node:argument_list Text: (canFrameToString(frame))
|————————————————Node:( Text: (
|————————————————Node:call_expression Text: canFrameToString(frame)
|—————————————————Node:identifier Text: canFrameToString
|—————————————————Node:argument_list Text: (frame)
|——————————————————Node:( Text: (
|——————————————————Node:identifier Text: frame
|——————————————————Node:) Text: )
|————————————————Node:) Text: )
|——————————————Node:; Text: ;
|—————————————Node:} Text: }
|———————————Node:declaration Text: uint8_t sequence = frame.data.u8[0] & 0x0f;
|————————————Node:primitive_type Text: uint8_t
|————————————Node:init_declarator Text: sequence = frame.data.u8[0] & 0x0f
|—————————————Node:identifier Text: sequence
|—————————————Node:= Text: =
|—————————————Node:binary_expression Text: frame.data.u8[0] & 0x0f
|——————————————Node:subscript_expression Text: frame.data.u8[0]
|———————————————Node:field_expression Text: frame.data.u8
|————————————————Node:field_expression Text: frame.data
|—————————————————Node:identifier Text: frame
|—————————————————Node:. Text: .
|—————————————————Node:field_identifier Text: data
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: u8
|———————————————Node:subscript_argument_list Text: [0]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 0
|————————————————Node:] Text: ]
|——————————————Node:& Text: &
|——————————————Node:number_literal Text: 0x0f
|————————————Node:; Text: ;
|———————————Node:if_statement Text: if (isoMessageIncoming.next == sequence) {
        for (int i = 1; i < frame.FIR.B.DLC && isoMessageIncoming.index < isoMessageIncoming.length; i++) {
          isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
        }

        // wait for next message, rollover from 15 to 0
        isoMessageIncoming.next = isoMessageIncoming.next == 15 ? 0 : isoMessageIncoming.next + 1;

        // is this the last part?
        if (isoMessageIncoming.index == isoMessageIncoming.length) {
          // output the data
          String dataString = isoMessageToString(isoMessageIncoming);
          if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) Serial.print("> can:ISO MSG:");
          if (isotp_config->output_handler) isotp_config->output_handler (dataString);
          isoMessageIncoming.id = 0xffff;              // cancel this message so nothing will be added intil it is re-initialized
        }
      } else {
        if (isotp_config->mode_debug) Serial.println("< can:ISO Out of sequence, resetting");
        isoMessageIncoming.id = 0xffff;              // cancel this message so nothing will be added intil it is re-initialized
      }
|————————————Node:if Text: if
|————————————Node:condition_clause Text: (isoMessageIncoming.next == sequence)
|—————————————Node:( Text: (
|—————————————Node:binary_expression Text: isoMessageIncoming.next == sequence
|——————————————Node:field_expression Text: isoMessageIncoming.next
|———————————————Node:identifier Text: isoMessageIncoming
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: next
|——————————————Node:== Text: ==
|——————————————Node:identifier Text: sequence
|—————————————Node:) Text: )
|————————————Node:compound_statement Text: {
        for (int i = 1; i < frame.FIR.B.DLC && isoMessageIncoming.index < isoMessageIncoming.length; i++) {
          isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
        }

        // wait for next message, rollover from 15 to 0
        isoMessageIncoming.next = isoMessageIncoming.next == 15 ? 0 : isoMessageIncoming.next + 1;

        // is this the last part?
        if (isoMessageIncoming.index == isoMessageIncoming.length) {
          // output the data
          String dataString = isoMessageToString(isoMessageIncoming);
          if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) Serial.print("> can:ISO MSG:");
          if (isotp_config->output_handler) isotp_config->output_handler (dataString);
          isoMessageIncoming.id = 0xffff;              // cancel this message so nothing will be added intil it is re-initialized
        }
      }
|—————————————Node:{ Text: {
|—————————————Node:for_statement Text: for (int i = 1; i < frame.FIR.B.DLC && isoMessageIncoming.index < isoMessageIncoming.length; i++) {
          isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
        }
|——————————————Node:for Text: for
|——————————————Node:( Text: (
|——————————————Node:declaration Text: int i = 1;
|———————————————Node:primitive_type Text: int
|———————————————Node:init_declarator Text: i = 1
|————————————————Node:identifier Text: i
|————————————————Node:= Text: =
|————————————————Node:number_literal Text: 1
|———————————————Node:; Text: ;
|——————————————Node:binary_expression Text: i < frame.FIR.B.DLC && isoMessageIncoming.index < isoMessageIncoming.length
|———————————————Node:binary_expression Text: i < frame.FIR.B.DLC
|————————————————Node:identifier Text: i
|————————————————Node:< Text: <
|————————————————Node:field_expression Text: frame.FIR.B.DLC
|—————————————————Node:field_expression Text: frame.FIR.B
|——————————————————Node:field_expression Text: frame.FIR
|———————————————————Node:identifier Text: frame
|———————————————————Node:. Text: .
|———————————————————Node:field_identifier Text: FIR
|——————————————————Node:. Text: .
|——————————————————Node:field_identifier Text: B
|—————————————————Node:. Text: .
|—————————————————Node:field_identifier Text: DLC
|———————————————Node:&& Text: &&
|———————————————Node:binary_expression Text: isoMessageIncoming.index < isoMessageIncoming.length
|————————————————Node:field_expression Text: isoMessageIncoming.index
|—————————————————Node:identifier Text: isoMessageIncoming
|—————————————————Node:. Text: .
|—————————————————Node:field_identifier Text: index
|————————————————Node:< Text: <
|————————————————Node:field_expression Text: isoMessageIncoming.length
|—————————————————Node:identifier Text: isoMessageIncoming
|—————————————————Node:. Text: .
|—————————————————Node:field_identifier Text: length
|——————————————Node:; Text: ;
|——————————————Node:update_expression Text: i++
|———————————————Node:identifier Text: i
|———————————————Node:++ Text: ++
|——————————————Node:) Text: )
|——————————————Node:compound_statement Text: {
          isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
        }
|———————————————Node:{ Text: {
|———————————————Node:expression_statement Text: isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i];
|————————————————Node:assignment_expression Text: isoMessageIncoming.data[isoMessageIncoming.index++] = frame.data.u8[i]
|—————————————————Node:subscript_expression Text: isoMessageIncoming.data[isoMessageIncoming.index++]
|——————————————————Node:field_expression Text: isoMessageIncoming.data
|———————————————————Node:identifier Text: isoMessageIncoming
|———————————————————Node:. Text: .
|———————————————————Node:field_identifier Text: data
|——————————————————Node:subscript_argument_list Text: [isoMessageIncoming.index++]
|———————————————————Node:[ Text: [
|———————————————————Node:update_expression Text: isoMessageIncoming.index++
|————————————————————Node:field_expression Text: isoMessageIncoming.index
|—————————————————————Node:identifier Text: isoMessageIncoming
|—————————————————————Node:. Text: .
|—————————————————————Node:field_identifier Text: index
|————————————————————Node:++ Text: ++
|———————————————————Node:] Text: ]
|—————————————————Node:= Text: =
|—————————————————Node:subscript_expression Text: frame.data.u8[i]
|——————————————————Node:field_expression Text: frame.data.u8
|———————————————————Node:field_expression Text: frame.data
|————————————————————Node:identifier Text: frame
|————————————————————Node:. Text: .
|————————————————————Node:field_identifier Text: data
|———————————————————Node:. Text: .
|———————————————————Node:field_identifier Text: u8
|——————————————————Node:subscript_argument_list Text: [i]
|———————————————————Node:[ Text: [
|———————————————————Node:identifier Text: i
|———————————————————Node:] Text: ]
|————————————————Node:; Text: ;
|———————————————Node:} Text: }
|—————————————Node:comment Text: // wait for next message, rollover from 15 to 0
|—————————————Node:expression_statement Text: isoMessageIncoming.next = isoMessageIncoming.next == 15 ? 0 : isoMessageIncoming.next + 1;
|——————————————Node:assignment_expression Text: isoMessageIncoming.next = isoMessageIncoming.next == 15 ? 0 : isoMessageIncoming.next + 1
|———————————————Node:field_expression Text: isoMessageIncoming.next
|————————————————Node:identifier Text: isoMessageIncoming
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: next
|———————————————Node:= Text: =
|———————————————Node:conditional_expression Text: isoMessageIncoming.next == 15 ? 0 : isoMessageIncoming.next + 1
|————————————————Node:binary_expression Text: isoMessageIncoming.next == 15
|—————————————————Node:field_expression Text: isoMessageIncoming.next
|——————————————————Node:identifier Text: isoMessageIncoming
|——————————————————Node:. Text: .
|——————————————————Node:field_identifier Text: next
|—————————————————Node:== Text: ==
|—————————————————Node:number_literal Text: 15
|————————————————Node:? Text: ?
|————————————————Node:number_literal Text: 0
|————————————————Node:: Text: :
|————————————————Node:binary_expression Text: isoMessageIncoming.next + 1
|—————————————————Node:field_expression Text: isoMessageIncoming.next
|——————————————————Node:identifier Text: isoMessageIncoming
|——————————————————Node:. Text: .
|——————————————————Node:field_identifier Text: next
|—————————————————Node:+ Text: +
|—————————————————Node:number_literal Text: 1
|——————————————Node:; Text: ;
|—————————————Node:comment Text: // is this the last part?
|—————————————Node:if_statement Text: if (isoMessageIncoming.index == isoMessageIncoming.length) {
          // output the data
          String dataString = isoMessageToString(isoMessageIncoming);
          if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) Serial.print("> can:ISO MSG:");
          if (isotp_config->output_handler) isotp_config->output_handler (dataString);
          isoMessageIncoming.id = 0xffff;              // cancel this message so nothing will be added intil it is re-initialized
        }
|——————————————Node:if Text: if
|——————————————Node:condition_clause Text: (isoMessageIncoming.index == isoMessageIncoming.length)
|———————————————Node:( Text: (
|———————————————Node:binary_expression Text: isoMessageIncoming.index == isoMessageIncoming.length
|————————————————Node:field_expression Text: isoMessageIncoming.index
|—————————————————Node:identifier Text: isoMessageIncoming
|—————————————————Node:. Text: .
|—————————————————Node:field_identifier Text: index
|————————————————Node:== Text: ==
|————————————————Node:field_expression Text: isoMessageIncoming.length
|—————————————————Node:identifier Text: isoMessageIncoming
|—————————————————Node:. Text: .
|—————————————————Node:field_identifier Text: length
|———————————————Node:) Text: )
|——————————————Node:compound_statement Text: {
          // output the data
          String dataString = isoMessageToString(isoMessageIncoming);
          if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) Serial.print("> can:ISO MSG:");
          if (isotp_config->output_handler) isotp_config->output_handler (dataString);
          isoMessageIncoming.id = 0xffff;              // cancel this message so nothing will be added intil it is re-initialized
        }
|———————————————Node:{ Text: {
|———————————————Node:comment Text: // output the data
|———————————————Node:declaration Text: String dataString = isoMessageToString(isoMessageIncoming);
|————————————————Node:type_identifier Text: String
|————————————————Node:init_declarator Text: dataString = isoMessageToString(isoMessageIncoming)
|—————————————————Node:identifier Text: dataString
|—————————————————Node:= Text: =
|—————————————————Node:call_expression Text: isoMessageToString(isoMessageIncoming)
|——————————————————Node:identifier Text: isoMessageToString
|——————————————————Node:argument_list Text: (isoMessageIncoming)
|———————————————————Node:( Text: (
|———————————————————Node:identifier Text: isoMessageIncoming
|———————————————————Node:) Text: )
|————————————————Node:; Text: ;
|———————————————Node:if_statement Text: if (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO) Serial.print("> can:ISO MSG:");
|————————————————Node:if Text: if
|————————————————Node:condition_clause Text: (isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO)
|—————————————————Node:( Text: (
|—————————————————Node:binary_expression Text: isotp_config->mode_debug & DEBUG_BUS_RECEIVE_ISO
|——————————————————Node:field_expression Text: isotp_config->mode_debug
|———————————————————Node:identifier Text: isotp_config
|———————————————————Node:-> Text: ->
|———————————————————Node:field_identifier Text: mode_debug
|——————————————————Node:& Text: &
|——————————————————Node:identifier Text: DEBUG_BUS_RECEIVE_ISO
|—————————————————Node:) Text: )
|————————————————Node:expression_statement Text: Serial.print("> can:ISO MSG:");
|—————————————————Node:call_expression Text: Serial.print("> can:ISO MSG:")
|——————————————————Node:field_expression Text: Serial.print
|———————————————————Node:identifier Text: Serial
|———————————————————Node:. Text: .
|———————————————————Node:field_identifier Text: print
|——————————————————Node:argument_list Text: ("> can:ISO MSG:")
|———————————————————Node:( Text: (
|———————————————————Node:string_literal Text: "> can:ISO MSG:"
|————————————————————Node:" Text: "
|————————————————————Node:string_content Text: > can:ISO MSG:
|————————————————————Node:" Text: "
|———————————————————Node:) Text: )
|—————————————————Node:; Text: ;
|———————————————Node:if_statement Text: if (isotp_config->output_handler) isotp_config->output_handler (dataString);
|————————————————Node:if Text: if
|————————————————Node:condition_clause Text: (isotp_config->output_handler)
|—————————————————Node:( Text: (
|—————————————————Node:field_expression Text: isotp_config->output_handler
|——————————————————Node:identifier Text: isotp_config
|——————————————————Node:-> Text: ->
|——————————————————Node:field_identifier Text: output_handler
|—————————————————Node:) Text: )
|————————————————Node:expression_statement Text: isotp_config->output_handler (dataString);
|—————————————————Node:call_expression Text: isotp_config->output_handler (dataString)
|——————————————————Node:field_expression Text: isotp_config->output_handler
|———————————————————Node:identifier Text: isotp_config
|———————————————————Node:-> Text: ->
|———————————————————Node:field_identifier Text: output_handler
|——————————————————Node:argument_list Text: (dataString)
|———————————————————Node:( Text: (
|———————————————————Node:identifier Text: dataString
|———————————————————Node:) Text: )
|—————————————————Node:; Text: ;
|———————————————Node:expression_statement Text: isoMessageIncoming.id = 0xffff;
|————————————————Node:assignment_expression Text: isoMessageIncoming.id = 0xffff
|—————————————————Node:field_expression Text: isoMessageIncoming.id
|——————————————————Node:identifier Text: isoMessageIncoming
|——————————————————Node:. Text: .
|——————————————————Node:field_identifier Text: id
|—————————————————Node:= Text: =
|—————————————————Node:number_literal Text: 0xffff
|————————————————Node:; Text: ;
|———————————————Node:comment Text: // cancel this message so nothing will be added intil it is re-initialized
|———————————————Node:} Text: }
|—————————————Node:} Text: }
|————————————Node:else_clause Text: else {
        if (isotp_config->mode_debug) Serial.println("< can:ISO Out of sequence, resetting");
        isoMessageIncoming.id = 0xffff;              // cancel this message so nothing will be added intil it is re-initialized
      }
|—————————————Node:else Text: else
|—————————————Node:compound_statement Text: {
        if (isotp_config->mode_debug) Serial.println("< can:ISO Out of sequence, resetting");
        isoMessageIncoming.id = 0xffff;              // cancel this message so nothing will be added intil it is re-initialized
      }
|——————————————Node:{ Text: {
|——————————————Node:if_statement Text: if (isotp_config->mode_debug) Serial.println("< can:ISO Out of sequence, resetting");
|———————————————Node:if Text: if
|———————————————Node:condition_clause Text: (isotp_config->mode_debug)
|————————————————Node:( Text: (
|————————————————Node:field_expression Text: isotp_config->mode_debug
|—————————————————Node:identifier Text: isotp_config
|—————————————————Node:-> Text: ->
|—————————————————Node:field_identifier Text: mode_debug
|————————————————Node:) Text: )
|———————————————Node:expression_statement Text: Serial.println("< can:ISO Out of sequence, resetting");
|————————————————Node:call_expression Text: Serial.println("< can:ISO Out of sequence, resetting")
|—————————————————Node:field_expression Text: Serial.println
|——————————————————Node:identifier Text: Serial
|——————————————————Node:. Text: .
|——————————————————Node:field_identifier Text: println
|—————————————————Node:argument_list Text: ("< can:ISO Out of sequence, resetting")
|——————————————————Node:( Text: (
|——————————————————Node:string_literal Text: "< can:ISO Out of sequence, resetting"
|———————————————————Node:" Text: "
|———————————————————Node:string_content Text: < can:ISO Out of sequence, resetting
|———————————————————Node:" Text: "
|——————————————————Node:) Text: )
|————————————————Node:; Text: ;
|——————————————Node:expression_statement Text: isoMessageIncoming.id = 0xffff;
|———————————————Node:assignment_expression Text: isoMessageIncoming.id = 0xffff
|————————————————Node:field_expression Text: isoMessageIncoming.id
|—————————————————Node:identifier Text: isoMessageIncoming
|—————————————————Node:. Text: .
|—————————————————Node:field_identifier Text: id
|————————————————Node:= Text: =
|————————————————Node:number_literal Text: 0xffff
|———————————————Node:; Text: ;
|——————————————Node:comment Text: // cancel this message so nothing will be added intil it is re-initialized
|——————————————Node:} Text: }
|———————————Node:comment Text: // incoming flow control ***********************************************
|———————————Node:} Text: }
|——————————Node:else_clause Text: else if (type == 0x3) {
      //uint8_t flag = isoMessageIncoming.data[0] &0x0f;
      isoMessageOutgoing.flow_counter = frame.data.u8[1];
      isoMessageOutgoing.flow_delay = frame.data.u8[2] <= 127 ? frame.data.u8[2] * 1000 : frame.data.u8[2] - 0xf0;
      // to avoid overwhelming the outgoing queue, set minimum to 5 ms
      // this is experimental.
      if (isoMessageOutgoing.flow_delay < 5000) isoMessageOutgoing.flow_delay = 5000;
      isoMessageOutgoing.flow_active = 1;
      lastMicros = micros();
    } else {
      if (isotp_config->mode_debug) Serial.println("< can:ISO ignoring unknown frame type:" + String (type));
    }
|———————————Node:else Text: else
|———————————Node:if_statement Text: if (type == 0x3) {
      //uint8_t flag = isoMessageIncoming.data[0] &0x0f;
      isoMessageOutgoing.flow_counter = frame.data.u8[1];
      isoMessageOutgoing.flow_delay = frame.data.u8[2] <= 127 ? frame.data.u8[2] * 1000 : frame.data.u8[2] - 0xf0;
      // to avoid overwhelming the outgoing queue, set minimum to 5 ms
      // this is experimental.
      if (isoMessageOutgoing.flow_delay < 5000) isoMessageOutgoing.flow_delay = 5000;
      isoMessageOutgoing.flow_active = 1;
      lastMicros = micros();
    } else {
      if (isotp_config->mode_debug) Serial.println("< can:ISO ignoring unknown frame type:" + String (type));
    }
|————————————Node:if Text: if
|————————————Node:condition_clause Text: (type == 0x3)
|—————————————Node:( Text: (
|—————————————Node:binary_expression Text: type == 0x3
|——————————————Node:identifier Text: type
|——————————————Node:== Text: ==
|——————————————Node:number_literal Text: 0x3
|—————————————Node:) Text: )
|————————————Node:compound_statement Text: {
      //uint8_t flag = isoMessageIncoming.data[0] &0x0f;
      isoMessageOutgoing.flow_counter = frame.data.u8[1];
      isoMessageOutgoing.flow_delay = frame.data.u8[2] <= 127 ? frame.data.u8[2] * 1000 : frame.data.u8[2] - 0xf0;
      // to avoid overwhelming the outgoing queue, set minimum to 5 ms
      // this is experimental.
      if (isoMessageOutgoing.flow_delay < 5000) isoMessageOutgoing.flow_delay = 5000;
      isoMessageOutgoing.flow_active = 1;
      lastMicros = micros();
    }
|—————————————Node:{ Text: {
|—————————————Node:comment Text: //uint8_t flag = isoMessageIncoming.data[0] &0x0f;
|—————————————Node:expression_statement Text: isoMessageOutgoing.flow_counter = frame.data.u8[1];
|——————————————Node:assignment_expression Text: isoMessageOutgoing.flow_counter = frame.data.u8[1]
|———————————————Node:field_expression Text: isoMessageOutgoing.flow_counter
|————————————————Node:identifier Text: isoMessageOutgoing
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: flow_counter
|———————————————Node:= Text: =
|———————————————Node:subscript_expression Text: frame.data.u8[1]
|————————————————Node:field_expression Text: frame.data.u8
|—————————————————Node:field_expression Text: frame.data
|——————————————————Node:identifier Text: frame
|——————————————————Node:. Text: .
|——————————————————Node:field_identifier Text: data
|—————————————————Node:. Text: .
|—————————————————Node:field_identifier Text: u8
|————————————————Node:subscript_argument_list Text: [1]
|—————————————————Node:[ Text: [
|—————————————————Node:number_literal Text: 1
|—————————————————Node:] Text: ]
|——————————————Node:; Text: ;
|—————————————Node:expression_statement Text: isoMessageOutgoing.flow_delay = frame.data.u8[2] <= 127 ? frame.data.u8[2] * 1000 : frame.data.u8[2] - 0xf0;
|——————————————Node:assignment_expression Text: isoMessageOutgoing.flow_delay = frame.data.u8[2] <= 127 ? frame.data.u8[2] * 1000 : frame.data.u8[2] - 0xf0
|———————————————Node:field_expression Text: isoMessageOutgoing.flow_delay
|————————————————Node:identifier Text: isoMessageOutgoing
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: flow_delay
|———————————————Node:= Text: =
|———————————————Node:conditional_expression Text: frame.data.u8[2] <= 127 ? frame.data.u8[2] * 1000 : frame.data.u8[2] - 0xf0
|————————————————Node:binary_expression Text: frame.data.u8[2] <= 127
|—————————————————Node:subscript_expression Text: frame.data.u8[2]
|——————————————————Node:field_expression Text: frame.data.u8
|———————————————————Node:field_expression Text: frame.data
|————————————————————Node:identifier Text: frame
|————————————————————Node:. Text: .
|————————————————————Node:field_identifier Text: data
|———————————————————Node:. Text: .
|———————————————————Node:field_identifier Text: u8
|——————————————————Node:subscript_argument_list Text: [2]
|———————————————————Node:[ Text: [
|———————————————————Node:number_literal Text: 2
|———————————————————Node:] Text: ]
|—————————————————Node:<= Text: <=
|—————————————————Node:number_literal Text: 127
|————————————————Node:? Text: ?
|————————————————Node:binary_expression Text: frame.data.u8[2] * 1000
|—————————————————Node:subscript_expression Text: frame.data.u8[2]
|——————————————————Node:field_expression Text: frame.data.u8
|———————————————————Node:field_expression Text: frame.data
|————————————————————Node:identifier Text: frame
|————————————————————Node:. Text: .
|————————————————————Node:field_identifier Text: data
|———————————————————Node:. Text: .
|———————————————————Node:field_identifier Text: u8
|——————————————————Node:subscript_argument_list Text: [2]
|———————————————————Node:[ Text: [
|———————————————————Node:number_literal Text: 2
|———————————————————Node:] Text: ]
|—————————————————Node:* Text: *
|—————————————————Node:number_literal Text: 1000
|————————————————Node:: Text: :
|————————————————Node:binary_expression Text: frame.data.u8[2] - 0xf0
|—————————————————Node:subscript_expression Text: frame.data.u8[2]
|——————————————————Node:field_expression Text: frame.data.u8
|———————————————————Node:field_expression Text: frame.data
|————————————————————Node:identifier Text: frame
|————————————————————Node:. Text: .
|————————————————————Node:field_identifier Text: data
|———————————————————Node:. Text: .
|———————————————————Node:field_identifier Text: u8
|——————————————————Node:subscript_argument_list Text: [2]
|———————————————————Node:[ Text: [
|———————————————————Node:number_literal Text: 2
|———————————————————Node:] Text: ]
|—————————————————Node:- Text: -
|—————————————————Node:number_literal Text: 0xf0
|——————————————Node:; Text: ;
|—————————————Node:comment Text: // to avoid overwhelming the outgoing queue, set minimum to 5 ms
|—————————————Node:comment Text: // this is experimental.
|—————————————Node:if_statement Text: if (isoMessageOutgoing.flow_delay < 5000) isoMessageOutgoing.flow_delay = 5000;
|——————————————Node:if Text: if
|——————————————Node:condition_clause Text: (isoMessageOutgoing.flow_delay < 5000)
|———————————————Node:( Text: (
|———————————————Node:binary_expression Text: isoMessageOutgoing.flow_delay < 5000
|————————————————Node:field_expression Text: isoMessageOutgoing.flow_delay
|—————————————————Node:identifier Text: isoMessageOutgoing
|—————————————————Node:. Text: .
|—————————————————Node:field_identifier Text: flow_delay
|————————————————Node:< Text: <
|————————————————Node:number_literal Text: 5000
|———————————————Node:) Text: )
|——————————————Node:expression_statement Text: isoMessageOutgoing.flow_delay = 5000;
|———————————————Node:assignment_expression Text: isoMessageOutgoing.flow_delay = 5000
|————————————————Node:field_expression Text: isoMessageOutgoing.flow_delay
|—————————————————Node:identifier Text: isoMessageOutgoing
|—————————————————Node:. Text: .
|—————————————————Node:field_identifier Text: flow_delay
|————————————————Node:= Text: =
|————————————————Node:number_literal Text: 5000
|———————————————Node:; Text: ;
|—————————————Node:expression_statement Text: isoMessageOutgoing.flow_active = 1;
|——————————————Node:assignment_expression Text: isoMessageOutgoing.flow_active = 1
|———————————————Node:field_expression Text: isoMessageOutgoing.flow_active
|————————————————Node:identifier Text: isoMessageOutgoing
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: flow_active
|———————————————Node:= Text: =
|———————————————Node:number_literal Text: 1
|——————————————Node:; Text: ;
|—————————————Node:expression_statement Text: lastMicros = micros();
|——————————————Node:assignment_expression Text: lastMicros = micros()
|———————————————Node:identifier Text: lastMicros
|———————————————Node:= Text: =
|———————————————Node:call_expression Text: micros()
|————————————————Node:identifier Text: micros
|————————————————Node:argument_list Text: ()
|—————————————————Node:( Text: (
|—————————————————Node:) Text: )
|——————————————Node:; Text: ;
|—————————————Node:} Text: }
|————————————Node:else_clause Text: else {
      if (isotp_config->mode_debug) Serial.println("< can:ISO ignoring unknown frame type:" + String (type));
    }
|—————————————Node:else Text: else
|—————————————Node:compound_statement Text: {
      if (isotp_config->mode_debug) Serial.println("< can:ISO ignoring unknown frame type:" + String (type));
    }
|——————————————Node:{ Text: {
|——————————————Node:if_statement Text: if (isotp_config->mode_debug) Serial.println("< can:ISO ignoring unknown frame type:" + String (type));
|———————————————Node:if Text: if
|———————————————Node:condition_clause Text: (isotp_config->mode_debug)
|————————————————Node:( Text: (
|————————————————Node:field_expression Text: isotp_config->mode_debug
|—————————————————Node:identifier Text: isotp_config
|—————————————————Node:-> Text: ->
|—————————————————Node:field_identifier Text: mode_debug
|————————————————Node:) Text: )
|———————————————Node:expression_statement Text: Serial.println("< can:ISO ignoring unknown frame type:" + String (type));
|————————————————Node:call_expression Text: Serial.println("< can:ISO ignoring unknown frame type:" + String (type))
|—————————————————Node:field_expression Text: Serial.println
|——————————————————Node:identifier Text: Serial
|——————————————————Node:. Text: .
|——————————————————Node:field_identifier Text: println
|—————————————————Node:argument_list Text: ("< can:ISO ignoring unknown frame type:" + String (type))
|——————————————————Node:( Text: (
|——————————————————Node:binary_expression Text: "< can:ISO ignoring unknown frame type:" + String (type)
|———————————————————Node:string_literal Text: "< can:ISO ignoring unknown frame type:"
|————————————————————Node:" Text: "
|————————————————————Node:string_content Text: < can:ISO ignoring unknown frame type:
|————————————————————Node:" Text: "
|———————————————————Node:+ Text: +
|———————————————————Node:call_expression Text: String (type)
|————————————————————Node:identifier Text: String
|————————————————————Node:argument_list Text: (type)
|—————————————————————Node:( Text: (
|—————————————————————Node:identifier Text: type
|—————————————————————Node:) Text: )
|——————————————————Node:) Text: )
|————————————————Node:; Text: ;
|——————————————Node:} Text: }
|—————Node:} Text: }
|————Node:else_clause Text: else {
    if (isotp_config->mode_debug) Serial.println("< can:ISO frame of unrequested id:" + String(frame.MsgID, HEX));
  }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
    if (isotp_config->mode_debug) Serial.println("< can:ISO frame of unrequested id:" + String(frame.MsgID, HEX));
  }
|——————Node:{ Text: {
|——————Node:if_statement Text: if (isotp_config->mode_debug) Serial.println("< can:ISO frame of unrequested id:" + String(frame.MsgID, HEX));
|———————Node:if Text: if
|———————Node:condition_clause Text: (isotp_config->mode_debug)
|————————Node:( Text: (
|————————Node:field_expression Text: isotp_config->mode_debug
|—————————Node:identifier Text: isotp_config
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: mode_debug
|————————Node:) Text: )
|———————Node:expression_statement Text: Serial.println("< can:ISO frame of unrequested id:" + String(frame.MsgID, HEX));
|————————Node:call_expression Text: Serial.println("< can:ISO frame of unrequested id:" + String(frame.MsgID, HEX))
|—————————Node:field_expression Text: Serial.println
|——————————Node:identifier Text: Serial
|——————————Node:. Text: .
|——————————Node:field_identifier Text: println
|—————————Node:argument_list Text: ("< can:ISO frame of unrequested id:" + String(frame.MsgID, HEX))
|——————————Node:( Text: (
|——————————Node:binary_expression Text: "< can:ISO frame of unrequested id:" + String(frame.MsgID, HEX)
|———————————Node:string_literal Text: "< can:ISO frame of unrequested id:"
|————————————Node:" Text: "
|————————————Node:string_content Text: < can:ISO frame of unrequested id:
|————————————Node:" Text: "
|———————————Node:+ Text: +
|———————————Node:call_expression Text: String(frame.MsgID, HEX)
|————————————Node:identifier Text: String
|————————————Node:argument_list Text: (frame.MsgID, HEX)
|—————————————Node:( Text: (
|—————————————Node:field_expression Text: frame.MsgID
|——————————————Node:identifier Text: frame
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: MsgID
|—————————————Node:, Text: ,
|—————————————Node:identifier Text: HEX
|—————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:; Text: ;
|——————Node:} Text: }
|———Node:} Text: }
|—Node:function_definition Text: void can_send_flow (uint32_t requestId, uint8_t bus) {
  CAN_frame_t flow;
  flow.FIR.B.FF = CAN_frame_std;                   // set the type to 11 bits
  flow.FIR.B.RTR = CAN_no_RTR;                     // no RTR
  flow.MsgID = requestId;                          // send it to the requestId
  flow.FIR.B.DLC = 8;                              // length 8 bytes
  flow.data.u8[0] = 0x30;                          // type Flow (3), flag Clear to send (0)
  flow.data.u8[1] = 0x00;                          // instruct to send all remaining frames without flow control
  flow.data.u8[2] = 0x00;                          // delay between frames <=127 = millis, can maybe set to 0
  flow.data.u8[3] = 0;                             // fill-up
  flow.data.u8[4] = 0;                             // fill-up
  flow.data.u8[5] = 0;                             // fill-up
  flow.data.u8[6] = 0;                             // fill-up
  flow.data.u8[7] = 0;                             // fill-up
  led_set (LED_GREEN, true);
  can_send (&flow, bus);
  led_set (LED_GREEN, false);
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: can_send_flow (uint32_t requestId, uint8_t bus)
|———Node:identifier Text: can_send_flow
|———Node:parameter_list Text: (uint32_t requestId, uint8_t bus)
|————Node:( Text: (
|————Node:parameter_declaration Text: uint32_t requestId
|—————Node:primitive_type Text: uint32_t
|—————Node:identifier Text: requestId
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint8_t bus
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: bus
|————Node:) Text: )
|——Node:compound_statement Text: {
  CAN_frame_t flow;
  flow.FIR.B.FF = CAN_frame_std;                   // set the type to 11 bits
  flow.FIR.B.RTR = CAN_no_RTR;                     // no RTR
  flow.MsgID = requestId;                          // send it to the requestId
  flow.FIR.B.DLC = 8;                              // length 8 bytes
  flow.data.u8[0] = 0x30;                          // type Flow (3), flag Clear to send (0)
  flow.data.u8[1] = 0x00;                          // instruct to send all remaining frames without flow control
  flow.data.u8[2] = 0x00;                          // delay between frames <=127 = millis, can maybe set to 0
  flow.data.u8[3] = 0;                             // fill-up
  flow.data.u8[4] = 0;                             // fill-up
  flow.data.u8[5] = 0;                             // fill-up
  flow.data.u8[6] = 0;                             // fill-up
  flow.data.u8[7] = 0;                             // fill-up
  led_set (LED_GREEN, true);
  can_send (&flow, bus);
  led_set (LED_GREEN, false);
}
|———Node:{ Text: {
|———Node:declaration Text: CAN_frame_t flow;
|————Node:type_identifier Text: CAN_frame_t
|————Node:identifier Text: flow
|————Node:; Text: ;
|———Node:expression_statement Text: flow.FIR.B.FF = CAN_frame_std;
|————Node:assignment_expression Text: flow.FIR.B.FF = CAN_frame_std
|—————Node:field_expression Text: flow.FIR.B.FF
|——————Node:field_expression Text: flow.FIR.B
|———————Node:field_expression Text: flow.FIR
|————————Node:identifier Text: flow
|————————Node:. Text: .
|————————Node:field_identifier Text: FIR
|———————Node:. Text: .
|———————Node:field_identifier Text: B
|——————Node:. Text: .
|——————Node:field_identifier Text: FF
|—————Node:= Text: =
|—————Node:identifier Text: CAN_frame_std
|————Node:; Text: ;
|———Node:comment Text: // set the type to 11 bits
|———Node:expression_statement Text: flow.FIR.B.RTR = CAN_no_RTR;
|————Node:assignment_expression Text: flow.FIR.B.RTR = CAN_no_RTR
|—————Node:field_expression Text: flow.FIR.B.RTR
|——————Node:field_expression Text: flow.FIR.B
|———————Node:field_expression Text: flow.FIR
|————————Node:identifier Text: flow
|————————Node:. Text: .
|————————Node:field_identifier Text: FIR
|———————Node:. Text: .
|———————Node:field_identifier Text: B
|——————Node:. Text: .
|——————Node:field_identifier Text: RTR
|—————Node:= Text: =
|—————Node:identifier Text: CAN_no_RTR
|————Node:; Text: ;
|———Node:comment Text: // no RTR
|———Node:expression_statement Text: flow.MsgID = requestId;
|————Node:assignment_expression Text: flow.MsgID = requestId
|—————Node:field_expression Text: flow.MsgID
|——————Node:identifier Text: flow
|——————Node:. Text: .
|——————Node:field_identifier Text: MsgID
|—————Node:= Text: =
|—————Node:identifier Text: requestId
|————Node:; Text: ;
|———Node:comment Text: // send it to the requestId
|———Node:expression_statement Text: flow.FIR.B.DLC = 8;
|————Node:assignment_expression Text: flow.FIR.B.DLC = 8
|—————Node:field_expression Text: flow.FIR.B.DLC
|——————Node:field_expression Text: flow.FIR.B
|———————Node:field_expression Text: flow.FIR
|————————Node:identifier Text: flow
|————————Node:. Text: .
|————————Node:field_identifier Text: FIR
|———————Node:. Text: .
|———————Node:field_identifier Text: B
|——————Node:. Text: .
|——————Node:field_identifier Text: DLC
|—————Node:= Text: =
|—————Node:number_literal Text: 8
|————Node:; Text: ;
|———Node:comment Text: // length 8 bytes
|———Node:expression_statement Text: flow.data.u8[0] = 0x30;
|————Node:assignment_expression Text: flow.data.u8[0] = 0x30
|—————Node:subscript_expression Text: flow.data.u8[0]
|——————Node:field_expression Text: flow.data.u8
|———————Node:field_expression Text: flow.data
|————————Node:identifier Text: flow
|————————Node:. Text: .
|————————Node:field_identifier Text: data
|———————Node:. Text: .
|———————Node:field_identifier Text: u8
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:number_literal Text: 0x30
|————Node:; Text: ;
|———Node:comment Text: // type Flow (3), flag Clear to send (0)
|———Node:expression_statement Text: flow.data.u8[1] = 0x00;
|————Node:assignment_expression Text: flow.data.u8[1] = 0x00
|—————Node:subscript_expression Text: flow.data.u8[1]
|——————Node:field_expression Text: flow.data.u8
|———————Node:field_expression Text: flow.data
|————————Node:identifier Text: flow
|————————Node:. Text: .
|————————Node:field_identifier Text: data
|———————Node:. Text: .
|———————Node:field_identifier Text: u8
|——————Node:subscript_argument_list Text: [1]
|———————Node:[ Text: [
|———————Node:number_literal Text: 1
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:number_literal Text: 0x00
|————Node:; Text: ;
|———Node:comment Text: // instruct to send all remaining frames without flow control
|———Node:expression_statement Text: flow.data.u8[2] = 0x00;
|————Node:assignment_expression Text: flow.data.u8[2] = 0x00
|—————Node:subscript_expression Text: flow.data.u8[2]
|——————Node:field_expression Text: flow.data.u8
|———————Node:field_expression Text: flow.data
|————————Node:identifier Text: flow
|————————Node:. Text: .
|————————Node:field_identifier Text: data
|———————Node:. Text: .
|———————Node:field_identifier Text: u8
|——————Node:subscript_argument_list Text: [2]
|———————Node:[ Text: [
|———————Node:number_literal Text: 2
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:number_literal Text: 0x00
|————Node:; Text: ;
|———Node:comment Text: // delay between frames <=127 = millis, can maybe set to 0
|———Node:expression_statement Text: flow.data.u8[3] = 0;
|————Node:assignment_expression Text: flow.data.u8[3] = 0
|—————Node:subscript_expression Text: flow.data.u8[3]
|——————Node:field_expression Text: flow.data.u8
|———————Node:field_expression Text: flow.data
|————————Node:identifier Text: flow
|————————Node:. Text: .
|————————Node:field_identifier Text: data
|———————Node:. Text: .
|———————Node:field_identifier Text: u8
|——————Node:subscript_argument_list Text: [3]
|———————Node:[ Text: [
|———————Node:number_literal Text: 3
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment Text: // fill-up
|———Node:expression_statement Text: flow.data.u8[4] = 0;
|————Node:assignment_expression Text: flow.data.u8[4] = 0
|—————Node:subscript_expression Text: flow.data.u8[4]
|——————Node:field_expression Text: flow.data.u8
|———————Node:field_expression Text: flow.data
|————————Node:identifier Text: flow
|————————Node:. Text: .
|————————Node:field_identifier Text: data
|———————Node:. Text: .
|———————Node:field_identifier Text: u8
|——————Node:subscript_argument_list Text: [4]
|———————Node:[ Text: [
|———————Node:number_literal Text: 4
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment Text: // fill-up
|———Node:expression_statement Text: flow.data.u8[5] = 0;
|————Node:assignment_expression Text: flow.data.u8[5] = 0
|—————Node:subscript_expression Text: flow.data.u8[5]
|——————Node:field_expression Text: flow.data.u8
|———————Node:field_expression Text: flow.data
|————————Node:identifier Text: flow
|————————Node:. Text: .
|————————Node:field_identifier Text: data
|———————Node:. Text: .
|———————Node:field_identifier Text: u8
|——————Node:subscript_argument_list Text: [5]
|———————Node:[ Text: [
|———————Node:number_literal Text: 5
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment Text: // fill-up
|———Node:expression_statement Text: flow.data.u8[6] = 0;
|————Node:assignment_expression Text: flow.data.u8[6] = 0
|—————Node:subscript_expression Text: flow.data.u8[6]
|——————Node:field_expression Text: flow.data.u8
|———————Node:field_expression Text: flow.data
|————————Node:identifier Text: flow
|————————Node:. Text: .
|————————Node:field_identifier Text: data
|———————Node:. Text: .
|———————Node:field_identifier Text: u8
|——————Node:subscript_argument_list Text: [6]
|———————Node:[ Text: [
|———————Node:number_literal Text: 6
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment Text: // fill-up
|———Node:expression_statement Text: flow.data.u8[7] = 0;
|————Node:assignment_expression Text: flow.data.u8[7] = 0
|—————Node:subscript_expression Text: flow.data.u8[7]
|——————Node:field_expression Text: flow.data.u8
|———————Node:field_expression Text: flow.data
|————————Node:identifier Text: flow
|————————Node:. Text: .
|————————Node:field_identifier Text: data
|———————Node:. Text: .
|———————Node:field_identifier Text: u8
|——————Node:subscript_argument_list Text: [7]
|———————Node:[ Text: [
|———————Node:number_literal Text: 7
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment Text: // fill-up
|———Node:expression_statement Text: led_set (LED_GREEN, true);
|————Node:call_expression Text: led_set (LED_GREEN, true)
|—————Node:identifier Text: led_set
|—————Node:argument_list Text: (LED_GREEN, true)
|——————Node:( Text: (
|——————Node:identifier Text: LED_GREEN
|——————Node:, Text: ,
|——————Node:true Text: true
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: can_send (&flow, bus);
|————Node:call_expression Text: can_send (&flow, bus)
|—————Node:identifier Text: can_send
|—————Node:argument_list Text: (&flow, bus)
|——————Node:( Text: (
|——————Node:pointer_expression Text: &flow
|———————Node:& Text: &
|———————Node:identifier Text: flow
|——————Node:, Text: ,
|——————Node:identifier Text: bus
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: led_set (LED_GREEN, false);
|————Node:call_expression Text: led_set (LED_GREEN, false)
|—————Node:identifier Text: led_set
|—————Node:argument_list Text: (LED_GREEN, false)
|——————Node:( Text: (
|——————Node:identifier Text: LED_GREEN
|——————Node:, Text: ,
|——————Node:false Text: false
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void requestIsotp (uint32_t id, int16_t length, uint8_t *request, uint8_t bus) {
  CAN_frame_t frame;                             // build the CAN frame
  // only accept this command if the requested ID belongs to an ISO-TP frame
  if (id < 0x700 || id > 0x7ff) {
    if (isotp_config->output_handler) isotp_config->output_handler (String (id, HEX) + "\n");
    return;
  }
  // prepare the incoming message
  isoMessageIncoming.id = id;                      // expected ID of answer
  isoMessageIncoming.index = 0;                    // starting
  isoMessageIncoming.next = 1;

  if ((isoMessageOutgoing.id = getRequestId (id)) == 0) { // ID to send request to
    if (isotp_config->mode_debug & DEBUG_COMMAND) Serial.println ("> com:" + String (id, HEX) + " has no corresponding request ID");
    if (isotp_config->output_handler) isotp_config->output_handler (String (id, HEX) + "\n");
    return;
  }
  // store request to send
  isoMessageOutgoing.length = length;
  if (isoMessageOutgoing.length > 4096) isoMessageOutgoing.length = 4096; // this should never happen (yet)
  for (uint16_t i = 0; i < length; i++) {
    isoMessageOutgoing.data[i] = request[i];
  }
  isoMessageOutgoing.index = 0;                    // start at the beginning
  isoMessageOutgoing.next = 1;

  // Prepare the initial frame
  frame.FIR.B.FF = CAN_frame_std;                  // set the type to 11 bits
  frame.FIR.B.RTR = CAN_no_RTR;                    // no RTR
  frame.MsgID = isoMessageOutgoing.id;             // set the ID
  frame.FIR.B.DLC = 8; //command.requestLength + 1;// set the length. Note some ECU's like DLC 8

  if (isoMessageOutgoing.length <= 6) {            // send SING frame
    frame.data.u8[0] = (isoMessageOutgoing.length & 0x0f);
    for (int i = 0; i < isoMessageOutgoing.length; i++) { // fill up the other bytes with the request
      frame.data.u8[i+1] = isoMessageOutgoing.data[i];
    }
    for (int i = isoMessageOutgoing.length; i < 7; i++) {
      frame.data.u8[i+1] = 0;                      // zero out frame
    }
    // send the frame
    if (isotp_config->mode_debug & DEBUG_COMMAND_ISO) {
      Serial.print ("> com:Sending ISOTP SING request:");
      Serial.print (canFrameToString (frame));
    }
    led_set (LED_GREEN, true);
    can_send (&frame, bus);
    led_set (LED_GREEN, false);
    // --> any incoming frames with the given id will be handled by "storeFrame"
    // and send off if complete. But ensure the ticker doesn't do any flow_block
    // controle
    isoMessageOutgoing.length = isoMessageOutgoing.index = 0;


  } else {                                         // send a FIRST frame
    frame.data.u8[0] = (uint8_t)(0x10 + ((length >> 8) & 0x0f));
    frame.data.u8[1] = (uint8_t)(length & 0xff);
    for (int i = 0; i < 6; i++) {                  // fill up the other bytes with the request
      frame.data.u8[i + 2] = isoMessageOutgoing.data[isoMessageOutgoing.index++];
    }
    // send the frame
    if (isotp_config->mode_debug & DEBUG_COMMAND_ISO) {
      Serial.print ("> com:Sending ISOTP FRST request:");
      Serial.print (canFrameToString (frame));
    }
    led_set (LED_GREEN, true);
    can_send (&frame, bus);
    led_set (LED_GREEN, false);
    // --> any incoming frames with the given id will be handled by "storeFrame" and send off if complete
  }
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: requestIsotp (uint32_t id, int16_t length, uint8_t *request, uint8_t bus)
|———Node:identifier Text: requestIsotp
|———Node:parameter_list Text: (uint32_t id, int16_t length, uint8_t *request, uint8_t bus)
|————Node:( Text: (
|————Node:parameter_declaration Text: uint32_t id
|—————Node:primitive_type Text: uint32_t
|—————Node:identifier Text: id
|————Node:, Text: ,
|————Node:parameter_declaration Text: int16_t length
|—————Node:primitive_type Text: int16_t
|—————Node:identifier Text: length
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint8_t *request
|—————Node:primitive_type Text: uint8_t
|—————Node:pointer_declarator Text: *request
|——————Node:* Text: *
|——————Node:identifier Text: request
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint8_t bus
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: bus
|————Node:) Text: )
|——Node:compound_statement Text: {
  CAN_frame_t frame;                             // build the CAN frame
  // only accept this command if the requested ID belongs to an ISO-TP frame
  if (id < 0x700 || id > 0x7ff) {
    if (isotp_config->output_handler) isotp_config->output_handler (String (id, HEX) + "\n");
    return;
  }
  // prepare the incoming message
  isoMessageIncoming.id = id;                      // expected ID of answer
  isoMessageIncoming.index = 0;                    // starting
  isoMessageIncoming.next = 1;

  if ((isoMessageOutgoing.id = getRequestId (id)) == 0) { // ID to send request to
    if (isotp_config->mode_debug & DEBUG_COMMAND) Serial.println ("> com:" + String (id, HEX) + " has no corresponding request ID");
    if (isotp_config->output_handler) isotp_config->output_handler (String (id, HEX) + "\n");
    return;
  }
  // store request to send
  isoMessageOutgoing.length = length;
  if (isoMessageOutgoing.length > 4096) isoMessageOutgoing.length = 4096; // this should never happen (yet)
  for (uint16_t i = 0; i < length; i++) {
    isoMessageOutgoing.data[i] = request[i];
  }
  isoMessageOutgoing.index = 0;                    // start at the beginning
  isoMessageOutgoing.next = 1;

  // Prepare the initial frame
  frame.FIR.B.FF = CAN_frame_std;                  // set the type to 11 bits
  frame.FIR.B.RTR = CAN_no_RTR;                    // no RTR
  frame.MsgID = isoMessageOutgoing.id;             // set the ID
  frame.FIR.B.DLC = 8; //command.requestLength + 1;// set the length. Note some ECU's like DLC 8

  if (isoMessageOutgoing.length <= 6) {            // send SING frame
    frame.data.u8[0] = (isoMessageOutgoing.length & 0x0f);
    for (int i = 0; i < isoMessageOutgoing.length; i++) { // fill up the other bytes with the request
      frame.data.u8[i+1] = isoMessageOutgoing.data[i];
    }
    for (int i = isoMessageOutgoing.length; i < 7; i++) {
      frame.data.u8[i+1] = 0;                      // zero out frame
    }
    // send the frame
    if (isotp_config->mode_debug & DEBUG_COMMAND_ISO) {
      Serial.print ("> com:Sending ISOTP SING request:");
      Serial.print (canFrameToString (frame));
    }
    led_set (LED_GREEN, true);
    can_send (&frame, bus);
    led_set (LED_GREEN, false);
    // --> any incoming frames with the given id will be handled by "storeFrame"
    // and send off if complete. But ensure the ticker doesn't do any flow_block
    // controle
    isoMessageOutgoing.length = isoMessageOutgoing.index = 0;


  } else {                                         // send a FIRST frame
    frame.data.u8[0] = (uint8_t)(0x10 + ((length >> 8) & 0x0f));
    frame.data.u8[1] = (uint8_t)(length & 0xff);
    for (int i = 0; i < 6; i++) {                  // fill up the other bytes with the request
      frame.data.u8[i + 2] = isoMessageOutgoing.data[isoMessageOutgoing.index++];
    }
    // send the frame
    if (isotp_config->mode_debug & DEBUG_COMMAND_ISO) {
      Serial.print ("> com:Sending ISOTP FRST request:");
      Serial.print (canFrameToString (frame));
    }
    led_set (LED_GREEN, true);
    can_send (&frame, bus);
    led_set (LED_GREEN, false);
    // --> any incoming frames with the given id will be handled by "storeFrame" and send off if complete
  }
}
|———Node:{ Text: {
|———Node:declaration Text: CAN_frame_t frame;
|————Node:type_identifier Text: CAN_frame_t
|————Node:identifier Text: frame
|————Node:; Text: ;
|———Node:comment Text: // build the CAN frame
|———Node:comment Text: // only accept this command if the requested ID belongs to an ISO-TP frame
|———Node:if_statement Text: if (id < 0x700 || id > 0x7ff) {
    if (isotp_config->output_handler) isotp_config->output_handler (String (id, HEX) + "\n");
    return;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (id < 0x700 || id > 0x7ff)
|—————Node:( Text: (
|—————Node:binary_expression Text: id < 0x700 || id > 0x7ff
|——————Node:binary_expression Text: id < 0x700
|———————Node:identifier Text: id
|———————Node:< Text: <
|———————Node:number_literal Text: 0x700
|——————Node:|| Text: ||
|——————Node:binary_expression Text: id > 0x7ff
|———————Node:identifier Text: id
|———————Node:> Text: >
|———————Node:number_literal Text: 0x7ff
|—————Node:) Text: )
|————Node:compound_statement Text: {
    if (isotp_config->output_handler) isotp_config->output_handler (String (id, HEX) + "\n");
    return;
  }
|—————Node:{ Text: {
|—————Node:if_statement Text: if (isotp_config->output_handler) isotp_config->output_handler (String (id, HEX) + "\n");
|——————Node:if Text: if
|——————Node:condition_clause Text: (isotp_config->output_handler)
|———————Node:( Text: (
|———————Node:field_expression Text: isotp_config->output_handler
|————————Node:identifier Text: isotp_config
|————————Node:-> Text: ->
|————————Node:field_identifier Text: output_handler
|———————Node:) Text: )
|——————Node:expression_statement Text: isotp_config->output_handler (String (id, HEX) + "\n");
|———————Node:call_expression Text: isotp_config->output_handler (String (id, HEX) + "\n")
|————————Node:field_expression Text: isotp_config->output_handler
|—————————Node:identifier Text: isotp_config
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: output_handler
|————————Node:argument_list Text: (String (id, HEX) + "\n")
|—————————Node:( Text: (
|—————————Node:binary_expression Text: String (id, HEX) + "\n"
|——————————Node:call_expression Text: String (id, HEX)
|———————————Node:identifier Text: String
|———————————Node:argument_list Text: (id, HEX)
|————————————Node:( Text: (
|————————————Node:identifier Text: id
|————————————Node:, Text: ,
|————————————Node:identifier Text: HEX
|————————————Node:) Text: )
|——————————Node:+ Text: +
|——————————Node:string_literal Text: "\n"
|———————————Node:" Text: "
|———————————Node:escape_sequence Text: \n
|———————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:return_statement Text: return;
|——————Node:return Text: return
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment Text: // prepare the incoming message
|———Node:expression_statement Text: isoMessageIncoming.id = id;
|————Node:assignment_expression Text: isoMessageIncoming.id = id
|—————Node:field_expression Text: isoMessageIncoming.id
|——————Node:identifier Text: isoMessageIncoming
|——————Node:. Text: .
|——————Node:field_identifier Text: id
|—————Node:= Text: =
|—————Node:identifier Text: id
|————Node:; Text: ;
|———Node:comment Text: // expected ID of answer
|———Node:expression_statement Text: isoMessageIncoming.index = 0;
|————Node:assignment_expression Text: isoMessageIncoming.index = 0
|—————Node:field_expression Text: isoMessageIncoming.index
|——————Node:identifier Text: isoMessageIncoming
|——————Node:. Text: .
|——————Node:field_identifier Text: index
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment Text: // starting
|———Node:expression_statement Text: isoMessageIncoming.next = 1;
|————Node:assignment_expression Text: isoMessageIncoming.next = 1
|—————Node:field_expression Text: isoMessageIncoming.next
|——————Node:identifier Text: isoMessageIncoming
|——————Node:. Text: .
|——————Node:field_identifier Text: next
|—————Node:= Text: =
|—————Node:number_literal Text: 1
|————Node:; Text: ;
|———Node:if_statement Text: if ((isoMessageOutgoing.id = getRequestId (id)) == 0) { // ID to send request to
    if (isotp_config->mode_debug & DEBUG_COMMAND) Serial.println ("> com:" + String (id, HEX) + " has no corresponding request ID");
    if (isotp_config->output_handler) isotp_config->output_handler (String (id, HEX) + "\n");
    return;
  }
|————Node:if Text: if
|————Node:condition_clause Text: ((isoMessageOutgoing.id = getRequestId (id)) == 0)
|—————Node:( Text: (
|—————Node:binary_expression Text: (isoMessageOutgoing.id = getRequestId (id)) == 0
|——————Node:parenthesized_expression Text: (isoMessageOutgoing.id = getRequestId (id))
|———————Node:( Text: (
|———————Node:assignment_expression Text: isoMessageOutgoing.id = getRequestId (id)
|————————Node:field_expression Text: isoMessageOutgoing.id
|—————————Node:identifier Text: isoMessageOutgoing
|—————————Node:. Text: .
|—————————Node:field_identifier Text: id
|————————Node:= Text: =
|————————Node:call_expression Text: getRequestId (id)
|—————————Node:identifier Text: getRequestId
|—————————Node:argument_list Text: (id)
|——————————Node:( Text: (
|——————————Node:identifier Text: id
|——————————Node:) Text: )
|———————Node:) Text: )
|——————Node:== Text: ==
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: { // ID to send request to
    if (isotp_config->mode_debug & DEBUG_COMMAND) Serial.println ("> com:" + String (id, HEX) + " has no corresponding request ID");
    if (isotp_config->output_handler) isotp_config->output_handler (String (id, HEX) + "\n");
    return;
  }
|—————Node:{ Text: {
|—————Node:comment Text: // ID to send request to
|—————Node:if_statement Text: if (isotp_config->mode_debug & DEBUG_COMMAND) Serial.println ("> com:" + String (id, HEX) + " has no corresponding request ID");
|——————Node:if Text: if
|——————Node:condition_clause Text: (isotp_config->mode_debug & DEBUG_COMMAND)
|———————Node:( Text: (
|———————Node:binary_expression Text: isotp_config->mode_debug & DEBUG_COMMAND
|————————Node:field_expression Text: isotp_config->mode_debug
|—————————Node:identifier Text: isotp_config
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: mode_debug
|————————Node:& Text: &
|————————Node:identifier Text: DEBUG_COMMAND
|———————Node:) Text: )
|——————Node:expression_statement Text: Serial.println ("> com:" + String (id, HEX) + " has no corresponding request ID");
|———————Node:call_expression Text: Serial.println ("> com:" + String (id, HEX) + " has no corresponding request ID")
|————————Node:field_expression Text: Serial.println
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: println
|————————Node:argument_list Text: ("> com:" + String (id, HEX) + " has no corresponding request ID")
|—————————Node:( Text: (
|—————————Node:binary_expression Text: "> com:" + String (id, HEX) + " has no corresponding request ID"
|——————————Node:binary_expression Text: "> com:" + String (id, HEX)
|———————————Node:string_literal Text: "> com:"
|————————————Node:" Text: "
|————————————Node:string_content Text: > com:
|————————————Node:" Text: "
|———————————Node:+ Text: +
|———————————Node:call_expression Text: String (id, HEX)
|————————————Node:identifier Text: String
|————————————Node:argument_list Text: (id, HEX)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: id
|—————————————Node:, Text: ,
|—————————————Node:identifier Text: HEX
|—————————————Node:) Text: )
|——————————Node:+ Text: +
|——————————Node:string_literal Text: " has no corresponding request ID"
|———————————Node:" Text: "
|———————————Node:string_content Text:  has no corresponding request ID
|———————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:if_statement Text: if (isotp_config->output_handler) isotp_config->output_handler (String (id, HEX) + "\n");
|——————Node:if Text: if
|——————Node:condition_clause Text: (isotp_config->output_handler)
|———————Node:( Text: (
|———————Node:field_expression Text: isotp_config->output_handler
|————————Node:identifier Text: isotp_config
|————————Node:-> Text: ->
|————————Node:field_identifier Text: output_handler
|———————Node:) Text: )
|——————Node:expression_statement Text: isotp_config->output_handler (String (id, HEX) + "\n");
|———————Node:call_expression Text: isotp_config->output_handler (String (id, HEX) + "\n")
|————————Node:field_expression Text: isotp_config->output_handler
|—————————Node:identifier Text: isotp_config
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: output_handler
|————————Node:argument_list Text: (String (id, HEX) + "\n")
|—————————Node:( Text: (
|—————————Node:binary_expression Text: String (id, HEX) + "\n"
|——————————Node:call_expression Text: String (id, HEX)
|———————————Node:identifier Text: String
|———————————Node:argument_list Text: (id, HEX)
|————————————Node:( Text: (
|————————————Node:identifier Text: id
|————————————Node:, Text: ,
|————————————Node:identifier Text: HEX
|————————————Node:) Text: )
|——————————Node:+ Text: +
|——————————Node:string_literal Text: "\n"
|———————————Node:" Text: "
|———————————Node:escape_sequence Text: \n
|———————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:return_statement Text: return;
|——————Node:return Text: return
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment Text: // store request to send
|———Node:expression_statement Text: isoMessageOutgoing.length = length;
|————Node:assignment_expression Text: isoMessageOutgoing.length = length
|—————Node:field_expression Text: isoMessageOutgoing.length
|——————Node:identifier Text: isoMessageOutgoing
|——————Node:. Text: .
|——————Node:field_identifier Text: length
|—————Node:= Text: =
|—————Node:identifier Text: length
|————Node:; Text: ;
|———Node:if_statement Text: if (isoMessageOutgoing.length > 4096) isoMessageOutgoing.length = 4096;
|————Node:if Text: if
|————Node:condition_clause Text: (isoMessageOutgoing.length > 4096)
|—————Node:( Text: (
|—————Node:binary_expression Text: isoMessageOutgoing.length > 4096
|——————Node:field_expression Text: isoMessageOutgoing.length
|———————Node:identifier Text: isoMessageOutgoing
|———————Node:. Text: .
|———————Node:field_identifier Text: length
|——————Node:> Text: >
|——————Node:number_literal Text: 4096
|—————Node:) Text: )
|————Node:expression_statement Text: isoMessageOutgoing.length = 4096;
|—————Node:assignment_expression Text: isoMessageOutgoing.length = 4096
|——————Node:field_expression Text: isoMessageOutgoing.length
|———————Node:identifier Text: isoMessageOutgoing
|———————Node:. Text: .
|———————Node:field_identifier Text: length
|——————Node:= Text: =
|——————Node:number_literal Text: 4096
|—————Node:; Text: ;
|———Node:comment Text: // this should never happen (yet)
|———Node:for_statement Text: for (uint16_t i = 0; i < length; i++) {
    isoMessageOutgoing.data[i] = request[i];
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:declaration Text: uint16_t i = 0;
|—————Node:primitive_type Text: uint16_t
|—————Node:init_declarator Text: i = 0
|——————Node:identifier Text: i
|——————Node:= Text: =
|——————Node:number_literal Text: 0
|—————Node:; Text: ;
|————Node:binary_expression Text: i < length
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:identifier Text: length
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    isoMessageOutgoing.data[i] = request[i];
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: isoMessageOutgoing.data[i] = request[i];
|——————Node:assignment_expression Text: isoMessageOutgoing.data[i] = request[i]
|———————Node:subscript_expression Text: isoMessageOutgoing.data[i]
|————————Node:field_expression Text: isoMessageOutgoing.data
|—————————Node:identifier Text: isoMessageOutgoing
|—————————Node:. Text: .
|—————————Node:field_identifier Text: data
|————————Node:subscript_argument_list Text: [i]
|—————————Node:[ Text: [
|—————————Node:identifier Text: i
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:subscript_expression Text: request[i]
|————————Node:identifier Text: request
|————————Node:subscript_argument_list Text: [i]
|—————————Node:[ Text: [
|—————————Node:identifier Text: i
|—————————Node:] Text: ]
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: isoMessageOutgoing.index = 0;
|————Node:assignment_expression Text: isoMessageOutgoing.index = 0
|—————Node:field_expression Text: isoMessageOutgoing.index
|——————Node:identifier Text: isoMessageOutgoing
|——————Node:. Text: .
|——————Node:field_identifier Text: index
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment Text: // start at the beginning
|———Node:expression_statement Text: isoMessageOutgoing.next = 1;
|————Node:assignment_expression Text: isoMessageOutgoing.next = 1
|—————Node:field_expression Text: isoMessageOutgoing.next
|——————Node:identifier Text: isoMessageOutgoing
|——————Node:. Text: .
|——————Node:field_identifier Text: next
|—————Node:= Text: =
|—————Node:number_literal Text: 1
|————Node:; Text: ;
|———Node:comment Text: // Prepare the initial frame
|———Node:expression_statement Text: frame.FIR.B.FF = CAN_frame_std;
|————Node:assignment_expression Text: frame.FIR.B.FF = CAN_frame_std
|—————Node:field_expression Text: frame.FIR.B.FF
|——————Node:field_expression Text: frame.FIR.B
|———————Node:field_expression Text: frame.FIR
|————————Node:identifier Text: frame
|————————Node:. Text: .
|————————Node:field_identifier Text: FIR
|———————Node:. Text: .
|———————Node:field_identifier Text: B
|——————Node:. Text: .
|——————Node:field_identifier Text: FF
|—————Node:= Text: =
|—————Node:identifier Text: CAN_frame_std
|————Node:; Text: ;
|———Node:comment Text: // set the type to 11 bits
|———Node:expression_statement Text: frame.FIR.B.RTR = CAN_no_RTR;
|————Node:assignment_expression Text: frame.FIR.B.RTR = CAN_no_RTR
|—————Node:field_expression Text: frame.FIR.B.RTR
|——————Node:field_expression Text: frame.FIR.B
|———————Node:field_expression Text: frame.FIR
|————————Node:identifier Text: frame
|————————Node:. Text: .
|————————Node:field_identifier Text: FIR
|———————Node:. Text: .
|———————Node:field_identifier Text: B
|——————Node:. Text: .
|——————Node:field_identifier Text: RTR
|—————Node:= Text: =
|—————Node:identifier Text: CAN_no_RTR
|————Node:; Text: ;
|———Node:comment Text: // no RTR
|———Node:expression_statement Text: frame.MsgID = isoMessageOutgoing.id;
|————Node:assignment_expression Text: frame.MsgID = isoMessageOutgoing.id
|—————Node:field_expression Text: frame.MsgID
|——————Node:identifier Text: frame
|——————Node:. Text: .
|——————Node:field_identifier Text: MsgID
|—————Node:= Text: =
|—————Node:field_expression Text: isoMessageOutgoing.id
|——————Node:identifier Text: isoMessageOutgoing
|——————Node:. Text: .
|——————Node:field_identifier Text: id
|————Node:; Text: ;
|———Node:comment Text: // set the ID
|———Node:expression_statement Text: frame.FIR.B.DLC = 8;
|————Node:assignment_expression Text: frame.FIR.B.DLC = 8
|—————Node:field_expression Text: frame.FIR.B.DLC
|——————Node:field_expression Text: frame.FIR.B
|———————Node:field_expression Text: frame.FIR
|————————Node:identifier Text: frame
|————————Node:. Text: .
|————————Node:field_identifier Text: FIR
|———————Node:. Text: .
|———————Node:field_identifier Text: B
|——————Node:. Text: .
|——————Node:field_identifier Text: DLC
|—————Node:= Text: =
|—————Node:number_literal Text: 8
|————Node:; Text: ;
|———Node:comment Text: //command.requestLength + 1;// set the length. Note some ECU's like DLC 8
|———Node:if_statement Text: if (isoMessageOutgoing.length <= 6) {            // send SING frame
    frame.data.u8[0] = (isoMessageOutgoing.length & 0x0f);
    for (int i = 0; i < isoMessageOutgoing.length; i++) { // fill up the other bytes with the request
      frame.data.u8[i+1] = isoMessageOutgoing.data[i];
    }
    for (int i = isoMessageOutgoing.length; i < 7; i++) {
      frame.data.u8[i+1] = 0;                      // zero out frame
    }
    // send the frame
    if (isotp_config->mode_debug & DEBUG_COMMAND_ISO) {
      Serial.print ("> com:Sending ISOTP SING request:");
      Serial.print (canFrameToString (frame));
    }
    led_set (LED_GREEN, true);
    can_send (&frame, bus);
    led_set (LED_GREEN, false);
    // --> any incoming frames with the given id will be handled by "storeFrame"
    // and send off if complete. But ensure the ticker doesn't do any flow_block
    // controle
    isoMessageOutgoing.length = isoMessageOutgoing.index = 0;


  } else {                                         // send a FIRST frame
    frame.data.u8[0] = (uint8_t)(0x10 + ((length >> 8) & 0x0f));
    frame.data.u8[1] = (uint8_t)(length & 0xff);
    for (int i = 0; i < 6; i++) {                  // fill up the other bytes with the request
      frame.data.u8[i + 2] = isoMessageOutgoing.data[isoMessageOutgoing.index++];
    }
    // send the frame
    if (isotp_config->mode_debug & DEBUG_COMMAND_ISO) {
      Serial.print ("> com:Sending ISOTP FRST request:");
      Serial.print (canFrameToString (frame));
    }
    led_set (LED_GREEN, true);
    can_send (&frame, bus);
    led_set (LED_GREEN, false);
    // --> any incoming frames with the given id will be handled by "storeFrame" and send off if complete
  }
|————Node:if Text: if
|————Node:condition_clause Text: (isoMessageOutgoing.length <= 6)
|—————Node:( Text: (
|—————Node:binary_expression Text: isoMessageOutgoing.length <= 6
|——————Node:field_expression Text: isoMessageOutgoing.length
|———————Node:identifier Text: isoMessageOutgoing
|———————Node:. Text: .
|———————Node:field_identifier Text: length
|——————Node:<= Text: <=
|——————Node:number_literal Text: 6
|—————Node:) Text: )
|————Node:compound_statement Text: {            // send SING frame
    frame.data.u8[0] = (isoMessageOutgoing.length & 0x0f);
    for (int i = 0; i < isoMessageOutgoing.length; i++) { // fill up the other bytes with the request
      frame.data.u8[i+1] = isoMessageOutgoing.data[i];
    }
    for (int i = isoMessageOutgoing.length; i < 7; i++) {
      frame.data.u8[i+1] = 0;                      // zero out frame
    }
    // send the frame
    if (isotp_config->mode_debug & DEBUG_COMMAND_ISO) {
      Serial.print ("> com:Sending ISOTP SING request:");
      Serial.print (canFrameToString (frame));
    }
    led_set (LED_GREEN, true);
    can_send (&frame, bus);
    led_set (LED_GREEN, false);
    // --> any incoming frames with the given id will be handled by "storeFrame"
    // and send off if complete. But ensure the ticker doesn't do any flow_block
    // controle
    isoMessageOutgoing.length = isoMessageOutgoing.index = 0;


  }
|—————Node:{ Text: {
|—————Node:comment Text: // send SING frame
|—————Node:expression_statement Text: frame.data.u8[0] = (isoMessageOutgoing.length & 0x0f);
|——————Node:assignment_expression Text: frame.data.u8[0] = (isoMessageOutgoing.length & 0x0f)
|———————Node:subscript_expression Text: frame.data.u8[0]
|————————Node:field_expression Text: frame.data.u8
|—————————Node:field_expression Text: frame.data
|——————————Node:identifier Text: frame
|——————————Node:. Text: .
|——————————Node:field_identifier Text: data
|—————————Node:. Text: .
|—————————Node:field_identifier Text: u8
|————————Node:subscript_argument_list Text: [0]
|—————————Node:[ Text: [
|—————————Node:number_literal Text: 0
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:parenthesized_expression Text: (isoMessageOutgoing.length & 0x0f)
|————————Node:( Text: (
|————————Node:binary_expression Text: isoMessageOutgoing.length & 0x0f
|—————————Node:field_expression Text: isoMessageOutgoing.length
|——————————Node:identifier Text: isoMessageOutgoing
|——————————Node:. Text: .
|——————————Node:field_identifier Text: length
|—————————Node:& Text: &
|—————————Node:number_literal Text: 0x0f
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:for_statement Text: for (int i = 0; i < isoMessageOutgoing.length; i++) { // fill up the other bytes with the request
      frame.data.u8[i+1] = isoMessageOutgoing.data[i];
    }
|——————Node:for Text: for
|——————Node:( Text: (
|——————Node:declaration Text: int i = 0;
|———————Node:primitive_type Text: int
|———————Node:init_declarator Text: i = 0
|————————Node:identifier Text: i
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:binary_expression Text: i < isoMessageOutgoing.length
|———————Node:identifier Text: i
|———————Node:< Text: <
|———————Node:field_expression Text: isoMessageOutgoing.length
|————————Node:identifier Text: isoMessageOutgoing
|————————Node:. Text: .
|————————Node:field_identifier Text: length
|——————Node:; Text: ;
|——————Node:update_expression Text: i++
|———————Node:identifier Text: i
|———————Node:++ Text: ++
|——————Node:) Text: )
|——————Node:compound_statement Text: { // fill up the other bytes with the request
      frame.data.u8[i+1] = isoMessageOutgoing.data[i];
    }
|———————Node:{ Text: {
|———————Node:comment Text: // fill up the other bytes with the request
|———————Node:expression_statement Text: frame.data.u8[i+1] = isoMessageOutgoing.data[i];
|————————Node:assignment_expression Text: frame.data.u8[i+1] = isoMessageOutgoing.data[i]
|—————————Node:subscript_expression Text: frame.data.u8[i+1]
|——————————Node:field_expression Text: frame.data.u8
|———————————Node:field_expression Text: frame.data
|————————————Node:identifier Text: frame
|————————————Node:. Text: .
|————————————Node:field_identifier Text: data
|———————————Node:. Text: .
|———————————Node:field_identifier Text: u8
|——————————Node:subscript_argument_list Text: [i+1]
|———————————Node:[ Text: [
|———————————Node:binary_expression Text: i+1
|————————————Node:identifier Text: i
|————————————Node:+ Text: +
|————————————Node:number_literal Text: 1
|———————————Node:] Text: ]
|—————————Node:= Text: =
|—————————Node:subscript_expression Text: isoMessageOutgoing.data[i]
|——————————Node:field_expression Text: isoMessageOutgoing.data
|———————————Node:identifier Text: isoMessageOutgoing
|———————————Node:. Text: .
|———————————Node:field_identifier Text: data
|——————————Node:subscript_argument_list Text: [i]
|———————————Node:[ Text: [
|———————————Node:identifier Text: i
|———————————Node:] Text: ]
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:for_statement Text: for (int i = isoMessageOutgoing.length; i < 7; i++) {
      frame.data.u8[i+1] = 0;                      // zero out frame
    }
|——————Node:for Text: for
|——————Node:( Text: (
|——————Node:declaration Text: int i = isoMessageOutgoing.length;
|———————Node:primitive_type Text: int
|———————Node:init_declarator Text: i = isoMessageOutgoing.length
|————————Node:identifier Text: i
|————————Node:= Text: =
|————————Node:field_expression Text: isoMessageOutgoing.length
|—————————Node:identifier Text: isoMessageOutgoing
|—————————Node:. Text: .
|—————————Node:field_identifier Text: length
|———————Node:; Text: ;
|——————Node:binary_expression Text: i < 7
|———————Node:identifier Text: i
|———————Node:< Text: <
|———————Node:number_literal Text: 7
|——————Node:; Text: ;
|——————Node:update_expression Text: i++
|———————Node:identifier Text: i
|———————Node:++ Text: ++
|——————Node:) Text: )
|——————Node:compound_statement Text: {
      frame.data.u8[i+1] = 0;                      // zero out frame
    }
|———————Node:{ Text: {
|———————Node:expression_statement Text: frame.data.u8[i+1] = 0;
|————————Node:assignment_expression Text: frame.data.u8[i+1] = 0
|—————————Node:subscript_expression Text: frame.data.u8[i+1]
|——————————Node:field_expression Text: frame.data.u8
|———————————Node:field_expression Text: frame.data
|————————————Node:identifier Text: frame
|————————————Node:. Text: .
|————————————Node:field_identifier Text: data
|———————————Node:. Text: .
|———————————Node:field_identifier Text: u8
|——————————Node:subscript_argument_list Text: [i+1]
|———————————Node:[ Text: [
|———————————Node:binary_expression Text: i+1
|————————————Node:identifier Text: i
|————————————Node:+ Text: +
|————————————Node:number_literal Text: 1
|———————————Node:] Text: ]
|—————————Node:= Text: =
|—————————Node:number_literal Text: 0
|————————Node:; Text: ;
|———————Node:comment Text: // zero out frame
|———————Node:} Text: }
|—————Node:comment Text: // send the frame
|—————Node:if_statement Text: if (isotp_config->mode_debug & DEBUG_COMMAND_ISO) {
      Serial.print ("> com:Sending ISOTP SING request:");
      Serial.print (canFrameToString (frame));
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: (isotp_config->mode_debug & DEBUG_COMMAND_ISO)
|———————Node:( Text: (
|———————Node:binary_expression Text: isotp_config->mode_debug & DEBUG_COMMAND_ISO
|————————Node:field_expression Text: isotp_config->mode_debug
|—————————Node:identifier Text: isotp_config
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: mode_debug
|————————Node:& Text: &
|————————Node:identifier Text: DEBUG_COMMAND_ISO
|———————Node:) Text: )
|——————Node:compound_statement Text: {
      Serial.print ("> com:Sending ISOTP SING request:");
      Serial.print (canFrameToString (frame));
    }
|———————Node:{ Text: {
|———————Node:expression_statement Text: Serial.print ("> com:Sending ISOTP SING request:");
|————————Node:call_expression Text: Serial.print ("> com:Sending ISOTP SING request:")
|—————————Node:field_expression Text: Serial.print
|——————————Node:identifier Text: Serial
|——————————Node:. Text: .
|——————————Node:field_identifier Text: print
|—————————Node:argument_list Text: ("> com:Sending ISOTP SING request:")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "> com:Sending ISOTP SING request:"
|———————————Node:" Text: "
|———————————Node:string_content Text: > com:Sending ISOTP SING request:
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: Serial.print (canFrameToString (frame));
|————————Node:call_expression Text: Serial.print (canFrameToString (frame))
|—————————Node:field_expression Text: Serial.print
|——————————Node:identifier Text: Serial
|——————————Node:. Text: .
|——————————Node:field_identifier Text: print
|—————————Node:argument_list Text: (canFrameToString (frame))
|——————————Node:( Text: (
|——————————Node:call_expression Text: canFrameToString (frame)
|———————————Node:identifier Text: canFrameToString
|———————————Node:argument_list Text: (frame)
|————————————Node:( Text: (
|————————————Node:identifier Text: frame
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:expression_statement Text: led_set (LED_GREEN, true);
|——————Node:call_expression Text: led_set (LED_GREEN, true)
|———————Node:identifier Text: led_set
|———————Node:argument_list Text: (LED_GREEN, true)
|————————Node:( Text: (
|————————Node:identifier Text: LED_GREEN
|————————Node:, Text: ,
|————————Node:true Text: true
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: can_send (&frame, bus);
|——————Node:call_expression Text: can_send (&frame, bus)
|———————Node:identifier Text: can_send
|———————Node:argument_list Text: (&frame, bus)
|————————Node:( Text: (
|————————Node:pointer_expression Text: &frame
|—————————Node:& Text: &
|—————————Node:identifier Text: frame
|————————Node:, Text: ,
|————————Node:identifier Text: bus
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: led_set (LED_GREEN, false);
|——————Node:call_expression Text: led_set (LED_GREEN, false)
|———————Node:identifier Text: led_set
|———————Node:argument_list Text: (LED_GREEN, false)
|————————Node:( Text: (
|————————Node:identifier Text: LED_GREEN
|————————Node:, Text: ,
|————————Node:false Text: false
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment Text: // --> any incoming frames with the given id will be handled by "storeFrame"
|—————Node:comment Text: // and send off if complete. But ensure the ticker doesn't do any flow_block
|—————Node:comment Text: // controle
|—————Node:expression_statement Text: isoMessageOutgoing.length = isoMessageOutgoing.index = 0;
|——————Node:assignment_expression Text: isoMessageOutgoing.length = isoMessageOutgoing.index = 0
|———————Node:field_expression Text: isoMessageOutgoing.length
|————————Node:identifier Text: isoMessageOutgoing
|————————Node:. Text: .
|————————Node:field_identifier Text: length
|———————Node:= Text: =
|———————Node:assignment_expression Text: isoMessageOutgoing.index = 0
|————————Node:field_expression Text: isoMessageOutgoing.index
|—————————Node:identifier Text: isoMessageOutgoing
|—————————Node:. Text: .
|—————————Node:field_identifier Text: index
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else {                                         // send a FIRST frame
    frame.data.u8[0] = (uint8_t)(0x10 + ((length >> 8) & 0x0f));
    frame.data.u8[1] = (uint8_t)(length & 0xff);
    for (int i = 0; i < 6; i++) {                  // fill up the other bytes with the request
      frame.data.u8[i + 2] = isoMessageOutgoing.data[isoMessageOutgoing.index++];
    }
    // send the frame
    if (isotp_config->mode_debug & DEBUG_COMMAND_ISO) {
      Serial.print ("> com:Sending ISOTP FRST request:");
      Serial.print (canFrameToString (frame));
    }
    led_set (LED_GREEN, true);
    can_send (&frame, bus);
    led_set (LED_GREEN, false);
    // --> any incoming frames with the given id will be handled by "storeFrame" and send off if complete
  }
|—————Node:else Text: else
|—————Node:compound_statement Text: {                                         // send a FIRST frame
    frame.data.u8[0] = (uint8_t)(0x10 + ((length >> 8) & 0x0f));
    frame.data.u8[1] = (uint8_t)(length & 0xff);
    for (int i = 0; i < 6; i++) {                  // fill up the other bytes with the request
      frame.data.u8[i + 2] = isoMessageOutgoing.data[isoMessageOutgoing.index++];
    }
    // send the frame
    if (isotp_config->mode_debug & DEBUG_COMMAND_ISO) {
      Serial.print ("> com:Sending ISOTP FRST request:");
      Serial.print (canFrameToString (frame));
    }
    led_set (LED_GREEN, true);
    can_send (&frame, bus);
    led_set (LED_GREEN, false);
    // --> any incoming frames with the given id will be handled by "storeFrame" and send off if complete
  }
|——————Node:{ Text: {
|——————Node:comment Text: // send a FIRST frame
|——————Node:expression_statement Text: frame.data.u8[0] = (uint8_t)(0x10 + ((length >> 8) & 0x0f));
|———————Node:assignment_expression Text: frame.data.u8[0] = (uint8_t)(0x10 + ((length >> 8) & 0x0f))
|————————Node:subscript_expression Text: frame.data.u8[0]
|—————————Node:field_expression Text: frame.data.u8
|——————————Node:field_expression Text: frame.data
|———————————Node:identifier Text: frame
|———————————Node:. Text: .
|———————————Node:field_identifier Text: data
|——————————Node:. Text: .
|——————————Node:field_identifier Text: u8
|—————————Node:subscript_argument_list Text: [0]
|——————————Node:[ Text: [
|——————————Node:number_literal Text: 0
|——————————Node:] Text: ]
|————————Node:= Text: =
|————————Node:cast_expression Text: (uint8_t)(0x10 + ((length >> 8) & 0x0f))
|—————————Node:( Text: (
|—————————Node:type_descriptor Text: uint8_t
|——————————Node:primitive_type Text: uint8_t
|—————————Node:) Text: )
|—————————Node:parenthesized_expression Text: (0x10 + ((length >> 8) & 0x0f))
|——————————Node:( Text: (
|——————————Node:binary_expression Text: 0x10 + ((length >> 8) & 0x0f)
|———————————Node:number_literal Text: 0x10
|———————————Node:+ Text: +
|———————————Node:parenthesized_expression Text: ((length >> 8) & 0x0f)
|————————————Node:( Text: (
|————————————Node:binary_expression Text: (length >> 8) & 0x0f
|—————————————Node:parenthesized_expression Text: (length >> 8)
|——————————————Node:( Text: (
|——————————————Node:binary_expression Text: length >> 8
|———————————————Node:identifier Text: length
|———————————————Node:>> Text: >>
|———————————————Node:number_literal Text: 8
|——————————————Node:) Text: )
|—————————————Node:& Text: &
|—————————————Node:number_literal Text: 0x0f
|————————————Node:) Text: )
|——————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: frame.data.u8[1] = (uint8_t)(length & 0xff);
|———————Node:assignment_expression Text: frame.data.u8[1] = (uint8_t)(length & 0xff)
|————————Node:subscript_expression Text: frame.data.u8[1]
|—————————Node:field_expression Text: frame.data.u8
|——————————Node:field_expression Text: frame.data
|———————————Node:identifier Text: frame
|———————————Node:. Text: .
|———————————Node:field_identifier Text: data
|——————————Node:. Text: .
|——————————Node:field_identifier Text: u8
|—————————Node:subscript_argument_list Text: [1]
|——————————Node:[ Text: [
|——————————Node:number_literal Text: 1
|——————————Node:] Text: ]
|————————Node:= Text: =
|————————Node:cast_expression Text: (uint8_t)(length & 0xff)
|—————————Node:( Text: (
|—————————Node:type_descriptor Text: uint8_t
|——————————Node:primitive_type Text: uint8_t
|—————————Node:) Text: )
|—————————Node:parenthesized_expression Text: (length & 0xff)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: length & 0xff
|———————————Node:identifier Text: length
|———————————Node:& Text: &
|———————————Node:number_literal Text: 0xff
|——————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:for_statement Text: for (int i = 0; i < 6; i++) {                  // fill up the other bytes with the request
      frame.data.u8[i + 2] = isoMessageOutgoing.data[isoMessageOutgoing.index++];
    }
|———————Node:for Text: for
|———————Node:( Text: (
|———————Node:declaration Text: int i = 0;
|————————Node:primitive_type Text: int
|————————Node:init_declarator Text: i = 0
|—————————Node:identifier Text: i
|—————————Node:= Text: =
|—————————Node:number_literal Text: 0
|————————Node:; Text: ;
|———————Node:binary_expression Text: i < 6
|————————Node:identifier Text: i
|————————Node:< Text: <
|————————Node:number_literal Text: 6
|———————Node:; Text: ;
|———————Node:update_expression Text: i++
|————————Node:identifier Text: i
|————————Node:++ Text: ++
|———————Node:) Text: )
|———————Node:compound_statement Text: {                  // fill up the other bytes with the request
      frame.data.u8[i + 2] = isoMessageOutgoing.data[isoMessageOutgoing.index++];
    }
|————————Node:{ Text: {
|————————Node:comment Text: // fill up the other bytes with the request
|————————Node:expression_statement Text: frame.data.u8[i + 2] = isoMessageOutgoing.data[isoMessageOutgoing.index++];
|—————————Node:assignment_expression Text: frame.data.u8[i + 2] = isoMessageOutgoing.data[isoMessageOutgoing.index++]
|——————————Node:subscript_expression Text: frame.data.u8[i + 2]
|———————————Node:field_expression Text: frame.data.u8
|————————————Node:field_expression Text: frame.data
|—————————————Node:identifier Text: frame
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: data
|————————————Node:. Text: .
|————————————Node:field_identifier Text: u8
|———————————Node:subscript_argument_list Text: [i + 2]
|————————————Node:[ Text: [
|————————————Node:binary_expression Text: i + 2
|—————————————Node:identifier Text: i
|—————————————Node:+ Text: +
|—————————————Node:number_literal Text: 2
|————————————Node:] Text: ]
|——————————Node:= Text: =
|——————————Node:subscript_expression Text: isoMessageOutgoing.data[isoMessageOutgoing.index++]
|———————————Node:field_expression Text: isoMessageOutgoing.data
|————————————Node:identifier Text: isoMessageOutgoing
|————————————Node:. Text: .
|————————————Node:field_identifier Text: data
|———————————Node:subscript_argument_list Text: [isoMessageOutgoing.index++]
|————————————Node:[ Text: [
|————————————Node:update_expression Text: isoMessageOutgoing.index++
|—————————————Node:field_expression Text: isoMessageOutgoing.index
|——————————————Node:identifier Text: isoMessageOutgoing
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: index
|—————————————Node:++ Text: ++
|————————————Node:] Text: ]
|—————————Node:; Text: ;
|————————Node:} Text: }
|——————Node:comment Text: // send the frame
|——————Node:if_statement Text: if (isotp_config->mode_debug & DEBUG_COMMAND_ISO) {
      Serial.print ("> com:Sending ISOTP FRST request:");
      Serial.print (canFrameToString (frame));
    }
|———————Node:if Text: if
|———————Node:condition_clause Text: (isotp_config->mode_debug & DEBUG_COMMAND_ISO)
|————————Node:( Text: (
|————————Node:binary_expression Text: isotp_config->mode_debug & DEBUG_COMMAND_ISO
|—————————Node:field_expression Text: isotp_config->mode_debug
|——————————Node:identifier Text: isotp_config
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: mode_debug
|—————————Node:& Text: &
|—————————Node:identifier Text: DEBUG_COMMAND_ISO
|————————Node:) Text: )
|———————Node:compound_statement Text: {
      Serial.print ("> com:Sending ISOTP FRST request:");
      Serial.print (canFrameToString (frame));
    }
|————————Node:{ Text: {
|————————Node:expression_statement Text: Serial.print ("> com:Sending ISOTP FRST request:");
|—————————Node:call_expression Text: Serial.print ("> com:Sending ISOTP FRST request:")
|——————————Node:field_expression Text: Serial.print
|———————————Node:identifier Text: Serial
|———————————Node:. Text: .
|———————————Node:field_identifier Text: print
|——————————Node:argument_list Text: ("> com:Sending ISOTP FRST request:")
|———————————Node:( Text: (
|———————————Node:string_literal Text: "> com:Sending ISOTP FRST request:"
|————————————Node:" Text: "
|————————————Node:string_content Text: > com:Sending ISOTP FRST request:
|————————————Node:" Text: "
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: Serial.print (canFrameToString (frame));
|—————————Node:call_expression Text: Serial.print (canFrameToString (frame))
|——————————Node:field_expression Text: Serial.print
|———————————Node:identifier Text: Serial
|———————————Node:. Text: .
|———————————Node:field_identifier Text: print
|——————————Node:argument_list Text: (canFrameToString (frame))
|———————————Node:( Text: (
|———————————Node:call_expression Text: canFrameToString (frame)
|————————————Node:identifier Text: canFrameToString
|————————————Node:argument_list Text: (frame)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: frame
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:} Text: }
|——————Node:expression_statement Text: led_set (LED_GREEN, true);
|———————Node:call_expression Text: led_set (LED_GREEN, true)
|————————Node:identifier Text: led_set
|————————Node:argument_list Text: (LED_GREEN, true)
|—————————Node:( Text: (
|—————————Node:identifier Text: LED_GREEN
|—————————Node:, Text: ,
|—————————Node:true Text: true
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: can_send (&frame, bus);
|———————Node:call_expression Text: can_send (&frame, bus)
|————————Node:identifier Text: can_send
|————————Node:argument_list Text: (&frame, bus)
|—————————Node:( Text: (
|—————————Node:pointer_expression Text: &frame
|——————————Node:& Text: &
|——————————Node:identifier Text: frame
|—————————Node:, Text: ,
|—————————Node:identifier Text: bus
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: led_set (LED_GREEN, false);
|———————Node:call_expression Text: led_set (LED_GREEN, false)
|————————Node:identifier Text: led_set
|————————Node:argument_list Text: (LED_GREEN, false)
|—————————Node:( Text: (
|—————————Node:identifier Text: LED_GREEN
|—————————Node:, Text: ,
|—————————Node:false Text: false
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:comment Text: // --> any incoming frames with the given id will be handled by "storeFrame" and send off if complete
|——————Node:} Text: }
|———Node:} Text: }
|—Node:comment Text: // convert a ISO-TP message to readable hex output format
|—Node:function_definition Text: String isoMessageToString (ISO_MESSAGE_t &message) {
  String dataString = String(message.id, HEX) + ",";
  for (int i = 0; i < message.length; i++) {
    dataString += getHex(message.data[i]);
  }
  dataString += "\n";
  return dataString;
}
|——Node:type_identifier Text: String
|——Node:function_declarator Text: isoMessageToString (ISO_MESSAGE_t &message)
|———Node:identifier Text: isoMessageToString
|———Node:parameter_list Text: (ISO_MESSAGE_t &message)
|————Node:( Text: (
|————Node:parameter_declaration Text: ISO_MESSAGE_t &message
|—————Node:type_identifier Text: ISO_MESSAGE_t
|—————Node:reference_declarator Text: &message
|——————Node:& Text: &
|——————Node:identifier Text: message
|————Node:) Text: )
|——Node:compound_statement Text: {
  String dataString = String(message.id, HEX) + ",";
  for (int i = 0; i < message.length; i++) {
    dataString += getHex(message.data[i]);
  }
  dataString += "\n";
  return dataString;
}
|———Node:{ Text: {
|———Node:declaration Text: String dataString = String(message.id, HEX) + ",";
|————Node:type_identifier Text: String
|————Node:init_declarator Text: dataString = String(message.id, HEX) + ","
|—————Node:identifier Text: dataString
|—————Node:= Text: =
|—————Node:binary_expression Text: String(message.id, HEX) + ","
|——————Node:call_expression Text: String(message.id, HEX)
|———————Node:identifier Text: String
|———————Node:argument_list Text: (message.id, HEX)
|————————Node:( Text: (
|————————Node:field_expression Text: message.id
|—————————Node:identifier Text: message
|—————————Node:. Text: .
|—————————Node:field_identifier Text: id
|————————Node:, Text: ,
|————————Node:identifier Text: HEX
|————————Node:) Text: )
|——————Node:+ Text: +
|——————Node:string_literal Text: ","
|———————Node:" Text: "
|———————Node:string_content Text: ,
|———————Node:" Text: "
|————Node:; Text: ;
|———Node:for_statement Text: for (int i = 0; i < message.length; i++) {
    dataString += getHex(message.data[i]);
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:declaration Text: int i = 0;
|—————Node:primitive_type Text: int
|—————Node:init_declarator Text: i = 0
|——————Node:identifier Text: i
|——————Node:= Text: =
|——————Node:number_literal Text: 0
|—————Node:; Text: ;
|————Node:binary_expression Text: i < message.length
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:field_expression Text: message.length
|——————Node:identifier Text: message
|——————Node:. Text: .
|——————Node:field_identifier Text: length
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    dataString += getHex(message.data[i]);
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: dataString += getHex(message.data[i]);
|——————Node:assignment_expression Text: dataString += getHex(message.data[i])
|———————Node:identifier Text: dataString
|———————Node:+= Text: +=
|———————Node:call_expression Text: getHex(message.data[i])
|————————Node:identifier Text: getHex
|————————Node:argument_list Text: (message.data[i])
|—————————Node:( Text: (
|—————————Node:subscript_expression Text: message.data[i]
|——————————Node:field_expression Text: message.data
|———————————Node:identifier Text: message
|———————————Node:. Text: .
|———————————Node:field_identifier Text: data
|——————————Node:subscript_argument_list Text: [i]
|———————————Node:[ Text: [
|———————————Node:identifier Text: i
|———————————Node:] Text: ]
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: dataString += "\n";
|————Node:assignment_expression Text: dataString += "\n"
|—————Node:identifier Text: dataString
|—————Node:+= Text: +=
|—————Node:string_literal Text: "\n"
|——————Node:" Text: "
|——————Node:escape_sequence Text: \n
|——————Node:" Text: "
|————Node:; Text: ;
|———Node:return_statement Text: return dataString;
|————Node:return Text: return
|————Node:identifier Text: dataString
|————Node:; Text: ;
|———Node:} Text: }
