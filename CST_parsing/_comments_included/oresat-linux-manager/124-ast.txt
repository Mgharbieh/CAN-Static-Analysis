oresat-linux-manager-CANopenComm\CO_command.c

|Node:translation_unit
|—Node:comment Text: /*
 * Socket command interface for CANopenSocket.
 *
 * @file        CO_command.c
 * @author      Janez Paternoster
 * @copyright   2015 Janez Paternoster
 *
 * This file is part of CANopenSocket, a Linux implementation of CANopen
 * stack with master functionality. Project home page is
 * <https://github.com/CANopenNode/CANopenSocket>. CANopenSocket is based
 * on CANopenNode: <https://github.com/CANopenNode/CANopenNode>.
 *
 * CANopenSocket is free and open source software: you can redistribute
 * it and/or modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
|—Node:preproc_include Text: #include "CANopen.h"

|——Node:#include Text: #include
|——Node:string_literal Text: "CANopen.h"
|———Node:" Text: "
|———Node:string_content Text: CANopen.h
|———Node:" Text: "
|—Node:preproc_include Text: #include "CO_command.h"

|——Node:#include Text: #include
|——Node:string_literal Text: "CO_command.h"
|———Node:" Text: "
|———Node:string_content Text: CO_command.h
|———Node:" Text: "
|—Node:preproc_include Text: #include "CO_comm_helpers.h"

|——Node:#include Text: #include
|——Node:string_literal Text: "CO_comm_helpers.h"
|———Node:" Text: "
|———Node:string_content Text: CO_comm_helpers.h
|———Node:" Text: "
|—Node:preproc_include Text: #include "CO_master.h"

|——Node:#include Text: #include
|——Node:string_literal Text: "CO_master.h"
|———Node:" Text: "
|———Node:string_content Text: CO_master.h
|———Node:" Text: "
|—Node:preproc_include Text: #include <stdio.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <stdio.h>
|—Node:preproc_include Text: #include <stdlib.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <stdlib.h>
|—Node:preproc_include Text: #include <unistd.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <unistd.h>
|—Node:preproc_include Text: #include <string.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <string.h>
|—Node:preproc_include Text: #include <ctype.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <ctype.h>
|—Node:preproc_include Text: #include <endian.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <endian.h>
|—Node:preproc_include Text: #include <errno.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <errno.h>
|—Node:preproc_include Text: #include <pthread.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <pthread.h>
|—Node:preproc_include Text: #include <sys/un.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <sys/un.h>
|—Node:preproc_include Text: #include <sys/socket.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <sys/socket.h>
|—Node:comment Text: /* Maximum size of Object Dictionary variable transmitted via SDO. */
|—Node:preproc_ifdef Text: #ifdef FILE_TRANSFER_MAX_SIZE
#ifndef CO_COMMAND_SDO_BUFFER_SIZE
    #define CO_COMMAND_SDO_BUFFER_SIZE FILE_TRANSFER_MAX_SIZE
#endif
#else
#ifndef CO_COMMAND_SDO_BUFFER_SIZE
    #define CO_COMMAND_SDO_BUFFER_SIZE 1000000
#endif
#endif
|——Node:#ifdef Text: #ifdef
|——Node:identifier Text: FILE_TRANSFER_MAX_SIZE
|——Node:preproc_ifdef Text: #ifndef CO_COMMAND_SDO_BUFFER_SIZE
    #define CO_COMMAND_SDO_BUFFER_SIZE FILE_TRANSFER_MAX_SIZE
#endif
|———Node:#ifndef Text: #ifndef
|———Node:identifier Text: CO_COMMAND_SDO_BUFFER_SIZE
|———Node:preproc_def Text: #define CO_COMMAND_SDO_BUFFER_SIZE FILE_TRANSFER_MAX_SIZE

|————Node:#define Text: #define
|————Node:identifier Text: CO_COMMAND_SDO_BUFFER_SIZE
|————Node:preproc_arg Text: FILE_TRANSFER_MAX_SIZE
|———Node:#endif Text: #endif
|——Node:preproc_else Text: #else
#ifndef CO_COMMAND_SDO_BUFFER_SIZE
    #define CO_COMMAND_SDO_BUFFER_SIZE 1000000
#endif
|———Node:#else Text: #else
|———Node:preproc_ifdef Text: #ifndef CO_COMMAND_SDO_BUFFER_SIZE
    #define CO_COMMAND_SDO_BUFFER_SIZE 1000000
#endif
|————Node:#ifndef Text: #ifndef
|————Node:identifier Text: CO_COMMAND_SDO_BUFFER_SIZE
|————Node:preproc_def Text: #define CO_COMMAND_SDO_BUFFER_SIZE 1000000

|—————Node:#define Text: #define
|—————Node:identifier Text: CO_COMMAND_SDO_BUFFER_SIZE
|—————Node:preproc_arg Text: 1000000
|————Node:#endif Text: #endif
|——Node:#endif Text: #endif
|—Node:preproc_def Text: #define STRING_BUFFER_SIZE  (CO_COMMAND_SDO_BUFFER_SIZE * 4 + 100)

|——Node:#define Text: #define
|——Node:identifier Text: STRING_BUFFER_SIZE
|——Node:preproc_arg Text: (CO_COMMAND_SDO_BUFFER_SIZE * 4 + 100)
|—Node:preproc_def Text: #define LISTEN_BACKLOG      50

|——Node:#define Text: #define
|——Node:identifier Text: LISTEN_BACKLOG
|——Node:preproc_arg Text: 50
|—Node:comment Text: /* Globals */
|—Node:declaration Text: char                       *CO_command_socketPath = "/tmp/CO_command_socket";
|——Node:primitive_type Text: char
|——Node:init_declarator Text: *CO_command_socketPath = "/tmp/CO_command_socket"
|———Node:pointer_declarator Text: *CO_command_socketPath
|————Node:* Text: *
|————Node:identifier Text: CO_command_socketPath
|———Node:= Text: =
|———Node:string_literal Text: "/tmp/CO_command_socket"
|————Node:" Text: "
|————Node:string_content Text: /tmp/CO_command_socket
|————Node:" Text: "
|——Node:; Text: ;
|—Node:comment Text: /* Name of the local domain socket */
|—Node:comment Text: /* Variables */
|—Node:declaration Text: static void*                command_thread(void* arg);
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:primitive_type Text: void
|——Node:pointer_declarator Text: *                command_thread(void* arg)
|———Node:* Text: *
|———Node:function_declarator Text: command_thread(void* arg)
|————Node:identifier Text: command_thread
|————Node:parameter_list Text: (void* arg)
|—————Node:( Text: (
|—————Node:parameter_declaration Text: void* arg
|——————Node:primitive_type Text: void
|——————Node:pointer_declarator Text: * arg
|———————Node:* Text: *
|———————Node:identifier Text: arg
|—————Node:) Text: )
|——Node:; Text: ;
|—Node:declaration Text: static pthread_t            command_thread_id;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_identifier Text: pthread_t
|——Node:identifier Text: command_thread_id
|——Node:; Text: ;
|—Node:declaration Text: static pthread_attr_t       command_thread_attr;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_identifier Text: pthread_attr_t
|——Node:identifier Text: command_thread_attr
|——Node:; Text: ;
|—Node:declaration Text: static void                 command_process(int fd, char* command, size_t commandLength);
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:primitive_type Text: void
|——Node:function_declarator Text: command_process(int fd, char* command, size_t commandLength)
|———Node:identifier Text: command_process
|———Node:parameter_list Text: (int fd, char* command, size_t commandLength)
|————Node:( Text: (
|————Node:parameter_declaration Text: int fd
|—————Node:primitive_type Text: int
|—————Node:identifier Text: fd
|————Node:, Text: ,
|————Node:parameter_declaration Text: char* command
|—————Node:primitive_type Text: char
|—————Node:pointer_declarator Text: * command
|——————Node:* Text: *
|——————Node:identifier Text: command
|————Node:, Text: ,
|————Node:parameter_declaration Text: size_t commandLength
|—————Node:primitive_type Text: size_t
|—————Node:identifier Text: commandLength
|————Node:) Text: )
|——Node:; Text: ;
|—Node:declaration Text: static int                  fdSocket;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:primitive_type Text: int
|——Node:identifier Text: fdSocket
|——Node:; Text: ;
|—Node:declaration Text: static uint16_t             comm_net = 1;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:primitive_type Text: uint16_t
|——Node:init_declarator Text: comm_net = 1
|———Node:identifier Text: comm_net
|———Node:= Text: =
|———Node:number_literal Text: 1
|——Node:; Text: ;
|—Node:comment Text: /* default CAN net number */
|—Node:declaration Text: static uint8_t              comm_node_default = 0xFF;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: comm_node_default = 0xFF
|———Node:identifier Text: comm_node_default
|———Node:= Text: =
|———Node:number_literal Text: 0xFF
|——Node:; Text: ;
|—Node:comment Text: /* CANopen Node ID number is undefined at startup. */
|—Node:declaration Text: static uint16_t             SDOtimeoutTime = 500;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:primitive_type Text: uint16_t
|——Node:init_declarator Text: SDOtimeoutTime = 500
|———Node:identifier Text: SDOtimeoutTime
|———Node:= Text: =
|———Node:number_literal Text: 500
|——Node:; Text: ;
|—Node:comment Text: /* Timeout time for SDO transfer in milliseconds, if no response */
|—Node:declaration Text: static uint8_t              blockTransferEnable = 1;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: blockTransferEnable = 1
|———Node:identifier Text: blockTransferEnable
|———Node:= Text: =
|———Node:number_literal Text: 1
|——Node:; Text: ;
|—Node:comment Text: /* SDO block transfer enabled? */
|—Node:declaration Text: static volatile int         endProgram = 0;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: volatile
|———Node:volatile Text: volatile
|——Node:primitive_type Text: int
|——Node:init_declarator Text: endProgram = 0
|———Node:identifier Text: endProgram
|———Node:= Text: =
|———Node:number_literal Text: 0
|——Node:; Text: ;
|—Node:comment Text: /******************************************************************************/
|—Node:function_definition Text: int CO_command_init(void) {
    struct sockaddr_un addr;

    if(CO == NULL || CO->SDOclient == NULL){
        CO_errExit("CO_command_init - Wrong arguments");
    }

    /* Create, bind and listen socket */
    fdSocket = socket(AF_UNIX, SOCK_STREAM, 0);
    if(fdSocket == -1) {
        CO_errExit("CO_command_init - socket failed");
    }

    memset(&addr, 0, sizeof(struct sockaddr_un));
    addr.sun_family = AF_UNIX;
    strncpy(addr.sun_path, CO_command_socketPath, sizeof(addr.sun_path) - 1);

    if(bind(fdSocket, (struct sockaddr *) &addr, sizeof(struct sockaddr_un)) == -1) {
        fprintf(stderr, "Can't bind Socket to path '%s'\n", CO_command_socketPath);
        CO_errExit("CO_command_init");
    }

    if(listen(fdSocket, LISTEN_BACKLOG) == -1) {
        CO_errExit("CO_command_init - listen failed");
    }

    /* Create thread */
    endProgram = 0;
    pthread_attr_setstacksize(&command_thread_attr, STRING_BUFFER_SIZE * 10);
    if(pthread_create(&command_thread_id, &command_thread_attr, command_thread, NULL) != 0) {
        CO_errExit("CO_command_init - thread creation failed");
    }

    return 0;
}
|——Node:primitive_type Text: int
|——Node:function_declarator Text: CO_command_init(void)
|———Node:identifier Text: CO_command_init
|———Node:parameter_list Text: (void)
|————Node:( Text: (
|————Node:parameter_declaration Text: void
|—————Node:primitive_type Text: void
|————Node:) Text: )
|——Node:compound_statement Text: {
    struct sockaddr_un addr;

    if(CO == NULL || CO->SDOclient == NULL){
        CO_errExit("CO_command_init - Wrong arguments");
    }

    /* Create, bind and listen socket */
    fdSocket = socket(AF_UNIX, SOCK_STREAM, 0);
    if(fdSocket == -1) {
        CO_errExit("CO_command_init - socket failed");
    }

    memset(&addr, 0, sizeof(struct sockaddr_un));
    addr.sun_family = AF_UNIX;
    strncpy(addr.sun_path, CO_command_socketPath, sizeof(addr.sun_path) - 1);

    if(bind(fdSocket, (struct sockaddr *) &addr, sizeof(struct sockaddr_un)) == -1) {
        fprintf(stderr, "Can't bind Socket to path '%s'\n", CO_command_socketPath);
        CO_errExit("CO_command_init");
    }

    if(listen(fdSocket, LISTEN_BACKLOG) == -1) {
        CO_errExit("CO_command_init - listen failed");
    }

    /* Create thread */
    endProgram = 0;
    pthread_attr_setstacksize(&command_thread_attr, STRING_BUFFER_SIZE * 10);
    if(pthread_create(&command_thread_id, &command_thread_attr, command_thread, NULL) != 0) {
        CO_errExit("CO_command_init - thread creation failed");
    }

    return 0;
}
|———Node:{ Text: {
|———Node:declaration Text: struct sockaddr_un addr;
|————Node:struct_specifier Text: struct sockaddr_un
|—————Node:struct Text: struct
|—————Node:type_identifier Text: sockaddr_un
|————Node:identifier Text: addr
|————Node:; Text: ;
|———Node:if_statement Text: if(CO == NULL || CO->SDOclient == NULL){
        CO_errExit("CO_command_init - Wrong arguments");
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: (CO == NULL || CO->SDOclient == NULL)
|—————Node:( Text: (
|—————Node:binary_expression Text: CO == NULL || CO->SDOclient == NULL
|——————Node:binary_expression Text: CO == NULL
|———————Node:identifier Text: CO
|———————Node:== Text: ==
|———————Node:null Text: NULL
|————————Node:NULL Text: NULL
|——————Node:|| Text: ||
|——————Node:binary_expression Text: CO->SDOclient == NULL
|———————Node:field_expression Text: CO->SDOclient
|————————Node:identifier Text: CO
|————————Node:-> Text: ->
|————————Node:field_identifier Text: SDOclient
|———————Node:== Text: ==
|———————Node:null Text: NULL
|————————Node:NULL Text: NULL
|—————Node:) Text: )
|————Node:compound_statement Text: {
        CO_errExit("CO_command_init - Wrong arguments");
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: CO_errExit("CO_command_init - Wrong arguments");
|——————Node:call_expression Text: CO_errExit("CO_command_init - Wrong arguments")
|———————Node:identifier Text: CO_errExit
|———————Node:argument_list Text: ("CO_command_init - Wrong arguments")
|————————Node:( Text: (
|————————Node:string_literal Text: "CO_command_init - Wrong arguments"
|—————————Node:" Text: "
|—————————Node:string_content Text: CO_command_init - Wrong arguments
|—————————Node:" Text: "
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment Text: /* Create, bind and listen socket */
|———Node:expression_statement Text: fdSocket = socket(AF_UNIX, SOCK_STREAM, 0);
|————Node:assignment_expression Text: fdSocket = socket(AF_UNIX, SOCK_STREAM, 0)
|—————Node:identifier Text: fdSocket
|—————Node:= Text: =
|—————Node:call_expression Text: socket(AF_UNIX, SOCK_STREAM, 0)
|——————Node:identifier Text: socket
|——————Node:argument_list Text: (AF_UNIX, SOCK_STREAM, 0)
|———————Node:( Text: (
|———————Node:identifier Text: AF_UNIX
|———————Node:, Text: ,
|———————Node:identifier Text: SOCK_STREAM
|———————Node:, Text: ,
|———————Node:number_literal Text: 0
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if(fdSocket == -1) {
        CO_errExit("CO_command_init - socket failed");
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: (fdSocket == -1)
|—————Node:( Text: (
|—————Node:binary_expression Text: fdSocket == -1
|——————Node:identifier Text: fdSocket
|——————Node:== Text: ==
|——————Node:number_literal Text: -1
|—————Node:) Text: )
|————Node:compound_statement Text: {
        CO_errExit("CO_command_init - socket failed");
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: CO_errExit("CO_command_init - socket failed");
|——————Node:call_expression Text: CO_errExit("CO_command_init - socket failed")
|———————Node:identifier Text: CO_errExit
|———————Node:argument_list Text: ("CO_command_init - socket failed")
|————————Node:( Text: (
|————————Node:string_literal Text: "CO_command_init - socket failed"
|—————————Node:" Text: "
|—————————Node:string_content Text: CO_command_init - socket failed
|—————————Node:" Text: "
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: memset(&addr, 0, sizeof(struct sockaddr_un));
|————Node:call_expression Text: memset(&addr, 0, sizeof(struct sockaddr_un))
|—————Node:identifier Text: memset
|—————Node:argument_list Text: (&addr, 0, sizeof(struct sockaddr_un))
|——————Node:( Text: (
|——————Node:pointer_expression Text: &addr
|———————Node:& Text: &
|———————Node:identifier Text: addr
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:, Text: ,
|——————Node:sizeof_expression Text: sizeof(struct sockaddr_un)
|———————Node:sizeof Text: sizeof
|———————Node:( Text: (
|———————Node:type_descriptor Text: struct sockaddr_un
|————————Node:struct_specifier Text: struct sockaddr_un
|—————————Node:struct Text: struct
|—————————Node:type_identifier Text: sockaddr_un
|———————Node:) Text: )
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: addr.sun_family = AF_UNIX;
|————Node:assignment_expression Text: addr.sun_family = AF_UNIX
|—————Node:field_expression Text: addr.sun_family
|——————Node:identifier Text: addr
|——————Node:. Text: .
|——————Node:field_identifier Text: sun_family
|—————Node:= Text: =
|—————Node:identifier Text: AF_UNIX
|————Node:; Text: ;
|———Node:expression_statement Text: strncpy(addr.sun_path, CO_command_socketPath, sizeof(addr.sun_path) - 1);
|————Node:call_expression Text: strncpy(addr.sun_path, CO_command_socketPath, sizeof(addr.sun_path) - 1)
|—————Node:identifier Text: strncpy
|—————Node:argument_list Text: (addr.sun_path, CO_command_socketPath, sizeof(addr.sun_path) - 1)
|——————Node:( Text: (
|——————Node:field_expression Text: addr.sun_path
|———————Node:identifier Text: addr
|———————Node:. Text: .
|———————Node:field_identifier Text: sun_path
|——————Node:, Text: ,
|——————Node:identifier Text: CO_command_socketPath
|——————Node:, Text: ,
|——————Node:binary_expression Text: sizeof(addr.sun_path) - 1
|———————Node:sizeof_expression Text: sizeof(addr.sun_path)
|————————Node:sizeof Text: sizeof
|————————Node:parenthesized_expression Text: (addr.sun_path)
|—————————Node:( Text: (
|—————————Node:field_expression Text: addr.sun_path
|——————————Node:identifier Text: addr
|——————————Node:. Text: .
|——————————Node:field_identifier Text: sun_path
|—————————Node:) Text: )
|———————Node:- Text: -
|———————Node:number_literal Text: 1
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if(bind(fdSocket, (struct sockaddr *) &addr, sizeof(struct sockaddr_un)) == -1) {
        fprintf(stderr, "Can't bind Socket to path '%s'\n", CO_command_socketPath);
        CO_errExit("CO_command_init");
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: (bind(fdSocket, (struct sockaddr *) &addr, sizeof(struct sockaddr_un)) == -1)
|—————Node:( Text: (
|—————Node:binary_expression Text: bind(fdSocket, (struct sockaddr *) &addr, sizeof(struct sockaddr_un)) == -1
|——————Node:call_expression Text: bind(fdSocket, (struct sockaddr *) &addr, sizeof(struct sockaddr_un))
|———————Node:identifier Text: bind
|———————Node:argument_list Text: (fdSocket, (struct sockaddr *) &addr, sizeof(struct sockaddr_un))
|————————Node:( Text: (
|————————Node:identifier Text: fdSocket
|————————Node:, Text: ,
|————————Node:cast_expression Text: (struct sockaddr *) &addr
|—————————Node:( Text: (
|—————————Node:type_descriptor Text: struct sockaddr *
|——————————Node:struct_specifier Text: struct sockaddr
|———————————Node:struct Text: struct
|———————————Node:type_identifier Text: sockaddr
|——————————Node:abstract_pointer_declarator Text: *
|———————————Node:* Text: *
|—————————Node:) Text: )
|—————————Node:pointer_expression Text: &addr
|——————————Node:& Text: &
|——————————Node:identifier Text: addr
|————————Node:, Text: ,
|————————Node:sizeof_expression Text: sizeof(struct sockaddr_un)
|—————————Node:sizeof Text: sizeof
|—————————Node:( Text: (
|—————————Node:type_descriptor Text: struct sockaddr_un
|——————————Node:struct_specifier Text: struct sockaddr_un
|———————————Node:struct Text: struct
|———————————Node:type_identifier Text: sockaddr_un
|—————————Node:) Text: )
|————————Node:) Text: )
|——————Node:== Text: ==
|——————Node:number_literal Text: -1
|—————Node:) Text: )
|————Node:compound_statement Text: {
        fprintf(stderr, "Can't bind Socket to path '%s'\n", CO_command_socketPath);
        CO_errExit("CO_command_init");
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: fprintf(stderr, "Can't bind Socket to path '%s'\n", CO_command_socketPath);
|——————Node:call_expression Text: fprintf(stderr, "Can't bind Socket to path '%s'\n", CO_command_socketPath)
|———————Node:identifier Text: fprintf
|———————Node:argument_list Text: (stderr, "Can't bind Socket to path '%s'\n", CO_command_socketPath)
|————————Node:( Text: (
|————————Node:identifier Text: stderr
|————————Node:, Text: ,
|————————Node:string_literal Text: "Can't bind Socket to path '%s'\n"
|—————————Node:" Text: "
|—————————Node:string_content Text: Can't bind Socket to path '%s'
|—————————Node:escape_sequence Text: \n
|—————————Node:" Text: "
|————————Node:, Text: ,
|————————Node:identifier Text: CO_command_socketPath
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: CO_errExit("CO_command_init");
|——————Node:call_expression Text: CO_errExit("CO_command_init")
|———————Node:identifier Text: CO_errExit
|———————Node:argument_list Text: ("CO_command_init")
|————————Node:( Text: (
|————————Node:string_literal Text: "CO_command_init"
|—————————Node:" Text: "
|—————————Node:string_content Text: CO_command_init
|—————————Node:" Text: "
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:if_statement Text: if(listen(fdSocket, LISTEN_BACKLOG) == -1) {
        CO_errExit("CO_command_init - listen failed");
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: (listen(fdSocket, LISTEN_BACKLOG) == -1)
|—————Node:( Text: (
|—————Node:binary_expression Text: listen(fdSocket, LISTEN_BACKLOG) == -1
|——————Node:call_expression Text: listen(fdSocket, LISTEN_BACKLOG)
|———————Node:identifier Text: listen
|———————Node:argument_list Text: (fdSocket, LISTEN_BACKLOG)
|————————Node:( Text: (
|————————Node:identifier Text: fdSocket
|————————Node:, Text: ,
|————————Node:identifier Text: LISTEN_BACKLOG
|————————Node:) Text: )
|——————Node:== Text: ==
|——————Node:number_literal Text: -1
|—————Node:) Text: )
|————Node:compound_statement Text: {
        CO_errExit("CO_command_init - listen failed");
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: CO_errExit("CO_command_init - listen failed");
|——————Node:call_expression Text: CO_errExit("CO_command_init - listen failed")
|———————Node:identifier Text: CO_errExit
|———————Node:argument_list Text: ("CO_command_init - listen failed")
|————————Node:( Text: (
|————————Node:string_literal Text: "CO_command_init - listen failed"
|—————————Node:" Text: "
|—————————Node:string_content Text: CO_command_init - listen failed
|—————————Node:" Text: "
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment Text: /* Create thread */
|———Node:expression_statement Text: endProgram = 0;
|————Node:assignment_expression Text: endProgram = 0
|—————Node:identifier Text: endProgram
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: pthread_attr_setstacksize(&command_thread_attr, STRING_BUFFER_SIZE * 10);
|————Node:call_expression Text: pthread_attr_setstacksize(&command_thread_attr, STRING_BUFFER_SIZE * 10)
|—————Node:identifier Text: pthread_attr_setstacksize
|—————Node:argument_list Text: (&command_thread_attr, STRING_BUFFER_SIZE * 10)
|——————Node:( Text: (
|——————Node:pointer_expression Text: &command_thread_attr
|———————Node:& Text: &
|———————Node:identifier Text: command_thread_attr
|——————Node:, Text: ,
|——————Node:binary_expression Text: STRING_BUFFER_SIZE * 10
|———————Node:identifier Text: STRING_BUFFER_SIZE
|———————Node:* Text: *
|———————Node:number_literal Text: 10
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if(pthread_create(&command_thread_id, &command_thread_attr, command_thread, NULL) != 0) {
        CO_errExit("CO_command_init - thread creation failed");
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: (pthread_create(&command_thread_id, &command_thread_attr, command_thread, NULL) != 0)
|—————Node:( Text: (
|—————Node:binary_expression Text: pthread_create(&command_thread_id, &command_thread_attr, command_thread, NULL) != 0
|——————Node:call_expression Text: pthread_create(&command_thread_id, &command_thread_attr, command_thread, NULL)
|———————Node:identifier Text: pthread_create
|———————Node:argument_list Text: (&command_thread_id, &command_thread_attr, command_thread, NULL)
|————————Node:( Text: (
|————————Node:pointer_expression Text: &command_thread_id
|—————————Node:& Text: &
|—————————Node:identifier Text: command_thread_id
|————————Node:, Text: ,
|————————Node:pointer_expression Text: &command_thread_attr
|—————————Node:& Text: &
|—————————Node:identifier Text: command_thread_attr
|————————Node:, Text: ,
|————————Node:identifier Text: command_thread
|————————Node:, Text: ,
|————————Node:null Text: NULL
|—————————Node:NULL Text: NULL
|————————Node:) Text: )
|——————Node:!= Text: !=
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {
        CO_errExit("CO_command_init - thread creation failed");
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: CO_errExit("CO_command_init - thread creation failed");
|——————Node:call_expression Text: CO_errExit("CO_command_init - thread creation failed")
|———————Node:identifier Text: CO_errExit
|———————Node:argument_list Text: ("CO_command_init - thread creation failed")
|————————Node:( Text: (
|————————Node:string_literal Text: "CO_command_init - thread creation failed"
|—————————Node:" Text: "
|—————————Node:string_content Text: CO_command_init - thread creation failed
|—————————Node:" Text: "
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return 0;
|————Node:return Text: return
|————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /******************************************************************************/
|—Node:function_definition Text: int CO_command_clear(void) {

    static struct sockaddr_un addr;
    int fd;

    endProgram = 1;

    /* Establish a client socket connection to finish the command_thread. */
    fd = socket(AF_UNIX, SOCK_STREAM, 0);
    if(fd == -1) {
        return -1;
    }

    memset(&addr, 0, sizeof(struct sockaddr_un));
    addr.sun_family = AF_UNIX;
    strncpy(addr.sun_path, CO_command_socketPath, sizeof(addr.sun_path) - 1);

    if(connect(fd, (struct sockaddr *) &addr, sizeof(struct sockaddr_un)) == -1) {
        return -1;
    }

    close(fd);

    /* Wait for thread to finish. */
    if(pthread_join(command_thread_id, NULL) != 0) {
        return -1;
    }

    close(fdSocket);

    /* Remove socket from filesystem. */
    if(remove(CO_command_socketPath) == -1) {
        return -1;
    }

    return 0;
}
|——Node:primitive_type Text: int
|——Node:function_declarator Text: CO_command_clear(void)
|———Node:identifier Text: CO_command_clear
|———Node:parameter_list Text: (void)
|————Node:( Text: (
|————Node:parameter_declaration Text: void
|—————Node:primitive_type Text: void
|————Node:) Text: )
|——Node:compound_statement Text: {

    static struct sockaddr_un addr;
    int fd;

    endProgram = 1;

    /* Establish a client socket connection to finish the command_thread. */
    fd = socket(AF_UNIX, SOCK_STREAM, 0);
    if(fd == -1) {
        return -1;
    }

    memset(&addr, 0, sizeof(struct sockaddr_un));
    addr.sun_family = AF_UNIX;
    strncpy(addr.sun_path, CO_command_socketPath, sizeof(addr.sun_path) - 1);

    if(connect(fd, (struct sockaddr *) &addr, sizeof(struct sockaddr_un)) == -1) {
        return -1;
    }

    close(fd);

    /* Wait for thread to finish. */
    if(pthread_join(command_thread_id, NULL) != 0) {
        return -1;
    }

    close(fdSocket);

    /* Remove socket from filesystem. */
    if(remove(CO_command_socketPath) == -1) {
        return -1;
    }

    return 0;
}
|———Node:{ Text: {
|———Node:declaration Text: static struct sockaddr_un addr;
|————Node:storage_class_specifier Text: static
|—————Node:static Text: static
|————Node:struct_specifier Text: struct sockaddr_un
|—————Node:struct Text: struct
|—————Node:type_identifier Text: sockaddr_un
|————Node:identifier Text: addr
|————Node:; Text: ;
|———Node:declaration Text: int fd;
|————Node:primitive_type Text: int
|————Node:identifier Text: fd
|————Node:; Text: ;
|———Node:expression_statement Text: endProgram = 1;
|————Node:assignment_expression Text: endProgram = 1
|—————Node:identifier Text: endProgram
|—————Node:= Text: =
|—————Node:number_literal Text: 1
|————Node:; Text: ;
|———Node:comment Text: /* Establish a client socket connection to finish the command_thread. */
|———Node:expression_statement Text: fd = socket(AF_UNIX, SOCK_STREAM, 0);
|————Node:assignment_expression Text: fd = socket(AF_UNIX, SOCK_STREAM, 0)
|—————Node:identifier Text: fd
|—————Node:= Text: =
|—————Node:call_expression Text: socket(AF_UNIX, SOCK_STREAM, 0)
|——————Node:identifier Text: socket
|——————Node:argument_list Text: (AF_UNIX, SOCK_STREAM, 0)
|———————Node:( Text: (
|———————Node:identifier Text: AF_UNIX
|———————Node:, Text: ,
|———————Node:identifier Text: SOCK_STREAM
|———————Node:, Text: ,
|———————Node:number_literal Text: 0
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if(fd == -1) {
        return -1;
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: (fd == -1)
|—————Node:( Text: (
|—————Node:binary_expression Text: fd == -1
|——————Node:identifier Text: fd
|——————Node:== Text: ==
|——————Node:number_literal Text: -1
|—————Node:) Text: )
|————Node:compound_statement Text: {
        return -1;
    }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -1;
|——————Node:return Text: return
|——————Node:number_literal Text: -1
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: memset(&addr, 0, sizeof(struct sockaddr_un));
|————Node:call_expression Text: memset(&addr, 0, sizeof(struct sockaddr_un))
|—————Node:identifier Text: memset
|—————Node:argument_list Text: (&addr, 0, sizeof(struct sockaddr_un))
|——————Node:( Text: (
|——————Node:pointer_expression Text: &addr
|———————Node:& Text: &
|———————Node:identifier Text: addr
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:, Text: ,
|——————Node:sizeof_expression Text: sizeof(struct sockaddr_un)
|———————Node:sizeof Text: sizeof
|———————Node:( Text: (
|———————Node:type_descriptor Text: struct sockaddr_un
|————————Node:struct_specifier Text: struct sockaddr_un
|—————————Node:struct Text: struct
|—————————Node:type_identifier Text: sockaddr_un
|———————Node:) Text: )
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: addr.sun_family = AF_UNIX;
|————Node:assignment_expression Text: addr.sun_family = AF_UNIX
|—————Node:field_expression Text: addr.sun_family
|——————Node:identifier Text: addr
|——————Node:. Text: .
|——————Node:field_identifier Text: sun_family
|—————Node:= Text: =
|—————Node:identifier Text: AF_UNIX
|————Node:; Text: ;
|———Node:expression_statement Text: strncpy(addr.sun_path, CO_command_socketPath, sizeof(addr.sun_path) - 1);
|————Node:call_expression Text: strncpy(addr.sun_path, CO_command_socketPath, sizeof(addr.sun_path) - 1)
|—————Node:identifier Text: strncpy
|—————Node:argument_list Text: (addr.sun_path, CO_command_socketPath, sizeof(addr.sun_path) - 1)
|——————Node:( Text: (
|——————Node:field_expression Text: addr.sun_path
|———————Node:identifier Text: addr
|———————Node:. Text: .
|———————Node:field_identifier Text: sun_path
|——————Node:, Text: ,
|——————Node:identifier Text: CO_command_socketPath
|——————Node:, Text: ,
|——————Node:binary_expression Text: sizeof(addr.sun_path) - 1
|———————Node:sizeof_expression Text: sizeof(addr.sun_path)
|————————Node:sizeof Text: sizeof
|————————Node:parenthesized_expression Text: (addr.sun_path)
|—————————Node:( Text: (
|—————————Node:field_expression Text: addr.sun_path
|——————————Node:identifier Text: addr
|——————————Node:. Text: .
|——————————Node:field_identifier Text: sun_path
|—————————Node:) Text: )
|———————Node:- Text: -
|———————Node:number_literal Text: 1
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if(connect(fd, (struct sockaddr *) &addr, sizeof(struct sockaddr_un)) == -1) {
        return -1;
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: (connect(fd, (struct sockaddr *) &addr, sizeof(struct sockaddr_un)) == -1)
|—————Node:( Text: (
|—————Node:binary_expression Text: connect(fd, (struct sockaddr *) &addr, sizeof(struct sockaddr_un)) == -1
|——————Node:call_expression Text: connect(fd, (struct sockaddr *) &addr, sizeof(struct sockaddr_un))
|———————Node:identifier Text: connect
|———————Node:argument_list Text: (fd, (struct sockaddr *) &addr, sizeof(struct sockaddr_un))
|————————Node:( Text: (
|————————Node:identifier Text: fd
|————————Node:, Text: ,
|————————Node:cast_expression Text: (struct sockaddr *) &addr
|—————————Node:( Text: (
|—————————Node:type_descriptor Text: struct sockaddr *
|——————————Node:struct_specifier Text: struct sockaddr
|———————————Node:struct Text: struct
|———————————Node:type_identifier Text: sockaddr
|——————————Node:abstract_pointer_declarator Text: *
|———————————Node:* Text: *
|—————————Node:) Text: )
|—————————Node:pointer_expression Text: &addr
|——————————Node:& Text: &
|——————————Node:identifier Text: addr
|————————Node:, Text: ,
|————————Node:sizeof_expression Text: sizeof(struct sockaddr_un)
|—————————Node:sizeof Text: sizeof
|—————————Node:( Text: (
|—————————Node:type_descriptor Text: struct sockaddr_un
|——————————Node:struct_specifier Text: struct sockaddr_un
|———————————Node:struct Text: struct
|———————————Node:type_identifier Text: sockaddr_un
|—————————Node:) Text: )
|————————Node:) Text: )
|——————Node:== Text: ==
|——————Node:number_literal Text: -1
|—————Node:) Text: )
|————Node:compound_statement Text: {
        return -1;
    }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -1;
|——————Node:return Text: return
|——————Node:number_literal Text: -1
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: close(fd);
|————Node:call_expression Text: close(fd)
|—————Node:identifier Text: close
|—————Node:argument_list Text: (fd)
|——————Node:( Text: (
|——————Node:identifier Text: fd
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment Text: /* Wait for thread to finish. */
|———Node:if_statement Text: if(pthread_join(command_thread_id, NULL) != 0) {
        return -1;
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: (pthread_join(command_thread_id, NULL) != 0)
|—————Node:( Text: (
|—————Node:binary_expression Text: pthread_join(command_thread_id, NULL) != 0
|——————Node:call_expression Text: pthread_join(command_thread_id, NULL)
|———————Node:identifier Text: pthread_join
|———————Node:argument_list Text: (command_thread_id, NULL)
|————————Node:( Text: (
|————————Node:identifier Text: command_thread_id
|————————Node:, Text: ,
|————————Node:null Text: NULL
|—————————Node:NULL Text: NULL
|————————Node:) Text: )
|——————Node:!= Text: !=
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {
        return -1;
    }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -1;
|——————Node:return Text: return
|——————Node:number_literal Text: -1
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: close(fdSocket);
|————Node:call_expression Text: close(fdSocket)
|—————Node:identifier Text: close
|—————Node:argument_list Text: (fdSocket)
|——————Node:( Text: (
|——————Node:identifier Text: fdSocket
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment Text: /* Remove socket from filesystem. */
|———Node:if_statement Text: if(remove(CO_command_socketPath) == -1) {
        return -1;
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: (remove(CO_command_socketPath) == -1)
|—————Node:( Text: (
|—————Node:binary_expression Text: remove(CO_command_socketPath) == -1
|——————Node:call_expression Text: remove(CO_command_socketPath)
|———————Node:identifier Text: remove
|———————Node:argument_list Text: (CO_command_socketPath)
|————————Node:( Text: (
|————————Node:identifier Text: CO_command_socketPath
|————————Node:) Text: )
|——————Node:== Text: ==
|——————Node:number_literal Text: -1
|—————Node:) Text: )
|————Node:compound_statement Text: {
        return -1;
    }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -1;
|——————Node:return Text: return
|——————Node:number_literal Text: -1
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return 0;
|————Node:return Text: return
|————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /******************************************************************************/
|—Node:function_definition Text: static void* command_thread(void* arg) {
    int fd;
    ssize_t n;
    char buf[STRING_BUFFER_SIZE];

    /* Almost endless loop */
    while(endProgram == 0) {

        /* wait for new command */
        fd = accept(fdSocket, NULL, NULL);
        if(fd == -1) {
            CO_error(0x15100000L);
        }

        /* Read command and send answer. */
        while((n = read(fd, buf, sizeof(buf)-1)) > 0) {
            buf[n++] = 0; /* terminate input string */
            command_process(fd, buf, n);
        }

        if(n == -1){
            CO_error(0x15800000L + errno);
        }

        /* close current communication */
        if(close(fd) == -1) {
            CO_error(0x15900000L);
        }
    }

    return NULL;
}
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:primitive_type Text: void
|——Node:pointer_declarator Text: * command_thread(void* arg)
|———Node:* Text: *
|———Node:function_declarator Text: command_thread(void* arg)
|————Node:identifier Text: command_thread
|————Node:parameter_list Text: (void* arg)
|—————Node:( Text: (
|—————Node:parameter_declaration Text: void* arg
|——————Node:primitive_type Text: void
|——————Node:pointer_declarator Text: * arg
|———————Node:* Text: *
|———————Node:identifier Text: arg
|—————Node:) Text: )
|——Node:compound_statement Text: {
    int fd;
    ssize_t n;
    char buf[STRING_BUFFER_SIZE];

    /* Almost endless loop */
    while(endProgram == 0) {

        /* wait for new command */
        fd = accept(fdSocket, NULL, NULL);
        if(fd == -1) {
            CO_error(0x15100000L);
        }

        /* Read command and send answer. */
        while((n = read(fd, buf, sizeof(buf)-1)) > 0) {
            buf[n++] = 0; /* terminate input string */
            command_process(fd, buf, n);
        }

        if(n == -1){
            CO_error(0x15800000L + errno);
        }

        /* close current communication */
        if(close(fd) == -1) {
            CO_error(0x15900000L);
        }
    }

    return NULL;
}
|———Node:{ Text: {
|———Node:declaration Text: int fd;
|————Node:primitive_type Text: int
|————Node:identifier Text: fd
|————Node:; Text: ;
|———Node:declaration Text: ssize_t n;
|————Node:primitive_type Text: ssize_t
|————Node:identifier Text: n
|————Node:; Text: ;
|———Node:declaration Text: char buf[STRING_BUFFER_SIZE];
|————Node:primitive_type Text: char
|————Node:array_declarator Text: buf[STRING_BUFFER_SIZE]
|—————Node:identifier Text: buf
|—————Node:[ Text: [
|—————Node:identifier Text: STRING_BUFFER_SIZE
|—————Node:] Text: ]
|————Node:; Text: ;
|———Node:comment Text: /* Almost endless loop */
|———Node:while_statement Text: while(endProgram == 0) {

        /* wait for new command */
        fd = accept(fdSocket, NULL, NULL);
        if(fd == -1) {
            CO_error(0x15100000L);
        }

        /* Read command and send answer. */
        while((n = read(fd, buf, sizeof(buf)-1)) > 0) {
            buf[n++] = 0; /* terminate input string */
            command_process(fd, buf, n);
        }

        if(n == -1){
            CO_error(0x15800000L + errno);
        }

        /* close current communication */
        if(close(fd) == -1) {
            CO_error(0x15900000L);
        }
    }
|————Node:while Text: while
|————Node:parenthesized_expression Text: (endProgram == 0)
|—————Node:( Text: (
|—————Node:binary_expression Text: endProgram == 0
|——————Node:identifier Text: endProgram
|——————Node:== Text: ==
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {

        /* wait for new command */
        fd = accept(fdSocket, NULL, NULL);
        if(fd == -1) {
            CO_error(0x15100000L);
        }

        /* Read command and send answer. */
        while((n = read(fd, buf, sizeof(buf)-1)) > 0) {
            buf[n++] = 0; /* terminate input string */
            command_process(fd, buf, n);
        }

        if(n == -1){
            CO_error(0x15800000L + errno);
        }

        /* close current communication */
        if(close(fd) == -1) {
            CO_error(0x15900000L);
        }
    }
|—————Node:{ Text: {
|—————Node:comment Text: /* wait for new command */
|—————Node:expression_statement Text: fd = accept(fdSocket, NULL, NULL);
|——————Node:assignment_expression Text: fd = accept(fdSocket, NULL, NULL)
|———————Node:identifier Text: fd
|———————Node:= Text: =
|———————Node:call_expression Text: accept(fdSocket, NULL, NULL)
|————————Node:identifier Text: accept
|————————Node:argument_list Text: (fdSocket, NULL, NULL)
|—————————Node:( Text: (
|—————————Node:identifier Text: fdSocket
|—————————Node:, Text: ,
|—————————Node:null Text: NULL
|——————————Node:NULL Text: NULL
|—————————Node:, Text: ,
|—————————Node:null Text: NULL
|——————————Node:NULL Text: NULL
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if(fd == -1) {
            CO_error(0x15100000L);
        }
|——————Node:if Text: if
|——————Node:parenthesized_expression Text: (fd == -1)
|———————Node:( Text: (
|———————Node:binary_expression Text: fd == -1
|————————Node:identifier Text: fd
|————————Node:== Text: ==
|————————Node:number_literal Text: -1
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            CO_error(0x15100000L);
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: CO_error(0x15100000L);
|————————Node:call_expression Text: CO_error(0x15100000L)
|—————————Node:identifier Text: CO_error
|—————————Node:argument_list Text: (0x15100000L)
|——————————Node:( Text: (
|——————————Node:number_literal Text: 0x15100000L
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:comment Text: /* Read command and send answer. */
|—————Node:while_statement Text: while((n = read(fd, buf, sizeof(buf)-1)) > 0) {
            buf[n++] = 0; /* terminate input string */
            command_process(fd, buf, n);
        }
|——————Node:while Text: while
|——————Node:parenthesized_expression Text: ((n = read(fd, buf, sizeof(buf)-1)) > 0)
|———————Node:( Text: (
|———————Node:binary_expression Text: (n = read(fd, buf, sizeof(buf)-1)) > 0
|————————Node:parenthesized_expression Text: (n = read(fd, buf, sizeof(buf)-1))
|—————————Node:( Text: (
|—————————Node:assignment_expression Text: n = read(fd, buf, sizeof(buf)-1)
|——————————Node:identifier Text: n
|——————————Node:= Text: =
|——————————Node:call_expression Text: read(fd, buf, sizeof(buf)-1)
|———————————Node:identifier Text: read
|———————————Node:argument_list Text: (fd, buf, sizeof(buf)-1)
|————————————Node:( Text: (
|————————————Node:identifier Text: fd
|————————————Node:, Text: ,
|————————————Node:identifier Text: buf
|————————————Node:, Text: ,
|————————————Node:binary_expression Text: sizeof(buf)-1
|—————————————Node:sizeof_expression Text: sizeof(buf)
|——————————————Node:sizeof Text: sizeof
|——————————————Node:parenthesized_expression Text: (buf)
|———————————————Node:( Text: (
|———————————————Node:identifier Text: buf
|———————————————Node:) Text: )
|—————————————Node:- Text: -
|—————————————Node:number_literal Text: 1
|————————————Node:) Text: )
|—————————Node:) Text: )
|————————Node:> Text: >
|————————Node:number_literal Text: 0
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            buf[n++] = 0; /* terminate input string */
            command_process(fd, buf, n);
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: buf[n++] = 0;
|————————Node:assignment_expression Text: buf[n++] = 0
|—————————Node:subscript_expression Text: buf[n++]
|——————————Node:identifier Text: buf
|——————————Node:[ Text: [
|——————————Node:update_expression Text: n++
|———————————Node:identifier Text: n
|———————————Node:++ Text: ++
|——————————Node:] Text: ]
|—————————Node:= Text: =
|—————————Node:number_literal Text: 0
|————————Node:; Text: ;
|———————Node:comment Text: /* terminate input string */
|———————Node:expression_statement Text: command_process(fd, buf, n);
|————————Node:call_expression Text: command_process(fd, buf, n)
|—————————Node:identifier Text: command_process
|—————————Node:argument_list Text: (fd, buf, n)
|——————————Node:( Text: (
|——————————Node:identifier Text: fd
|——————————Node:, Text: ,
|——————————Node:identifier Text: buf
|——————————Node:, Text: ,
|——————————Node:identifier Text: n
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:if_statement Text: if(n == -1){
            CO_error(0x15800000L + errno);
        }
|——————Node:if Text: if
|——————Node:parenthesized_expression Text: (n == -1)
|———————Node:( Text: (
|———————Node:binary_expression Text: n == -1
|————————Node:identifier Text: n
|————————Node:== Text: ==
|————————Node:number_literal Text: -1
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            CO_error(0x15800000L + errno);
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: CO_error(0x15800000L + errno);
|————————Node:call_expression Text: CO_error(0x15800000L + errno)
|—————————Node:identifier Text: CO_error
|—————————Node:argument_list Text: (0x15800000L + errno)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: 0x15800000L + errno
|———————————Node:number_literal Text: 0x15800000L
|———————————Node:+ Text: +
|———————————Node:identifier Text: errno
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:comment Text: /* close current communication */
|—————Node:if_statement Text: if(close(fd) == -1) {
            CO_error(0x15900000L);
        }
|——————Node:if Text: if
|——————Node:parenthesized_expression Text: (close(fd) == -1)
|———————Node:( Text: (
|———————Node:binary_expression Text: close(fd) == -1
|————————Node:call_expression Text: close(fd)
|—————————Node:identifier Text: close
|—————————Node:argument_list Text: (fd)
|——————————Node:( Text: (
|——————————Node:identifier Text: fd
|——————————Node:) Text: )
|————————Node:== Text: ==
|————————Node:number_literal Text: -1
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            CO_error(0x15900000L);
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: CO_error(0x15900000L);
|————————Node:call_expression Text: CO_error(0x15900000L)
|—————————Node:identifier Text: CO_error
|—————————Node:argument_list Text: (0x15900000L)
|——————————Node:( Text: (
|——————————Node:number_literal Text: 0x15900000L
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:return_statement Text: return NULL;
|————Node:return Text: return
|————Node:null Text: NULL
|—————Node:NULL Text: NULL
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /******************************************************************************/
|—Node:function_definition Text: static void command_process(int fd, char* command, size_t commandLength) {
    int err = 0; /* syntax or other error, true or false */
    int emptyLine = 0;
    char *token;
    int i;
    uint32_t ui[3];
    uint8_t comm_node = 0xFF; /* undefined */

    char resp[STRING_BUFFER_SIZE];
    int respLen = 0;
    respErrorCode_t respErrorCode = respErrorNone;

    uint32_t sequence = 0;


    /* parse mandatory token '"["<sequence>"]"' */
    if((token = getTok(command, spaceDelim, &err)) == NULL) {
        /* If empty line, respond with empty line. */
        emptyLine = 1;
    }
    if(err == 0) {
        if(token[0] != '[' || token[strlen(token)-1] != ']') {
            err = 1;
            if(token[0] == '#') {
                /* If comment, respond with empty line. */
                emptyLine = 1;
            }
        }
        else {
            token[strlen(token)-1] = '\0';
            sequence = getU32(token+1, 0, 0xFFFFFFFF, &err);
        }
    }


    /* parse optional tokens '[[<net>] <node>]', both numerical. Then follows
     *  mandatory token <command>, which is not numerical. */
    if(err == 0) {
        for(i=0; i<3; i++) {
            if((token = getTok(NULL, spaceDelim, &err)) == NULL) {
                break;
            }
            if(isdigit(token[0]) == 0) {
                break;
            }
            ui[i] = getU32(token, 0, 0xFFFFFFFF, &err);
        }
    }
    if(err == 0) {
        switch(i) {
        case 0: /* only <command> (pointed by token) */
            comm_node = comm_node_default; /* may be undefined */
            break;
        case 1: /* <node> and <command> tokens */
            if(ui[0] < 0 || ui[0] > 127) {
                err = 1;
                respErrorCode = respErrorUnsupportedNode;
            }
            else {
                comm_node = (uint8_t) ui[0];
            }
            break;
        case 2: /* <net>, <node> and <command> tokens */
            if(ui[0] < 1 || ui[0] > 1) {
                err = 1;
                respErrorCode = respErrorUnsupportedNet;
            }
            else if(ui[1] < 0 || ui[1] > 127) {
                err = 1;
                respErrorCode = respErrorUnsupportedNode;
            }
            else {
                comm_net = (uint16_t) ui[0];
                comm_node = (uint8_t) ui[1];
            }
            break;
        case 3: /* <command> token contains digit */
            err = 1;
            break;
        }
    }

    /* Execute command */
    if(err == 0) {

        /* Upload SDO command - 'r[ead] <index> <subindex> <datatype>' */
        if(strcmp(token, "r") == 0 || strcmp(token, "read") == 0) {
            uint16_t idx;
            uint8_t subidx;
            const dataType_t *datatype; /* optional token */
            int errTokDt = 0;
            int errDt = 0;
            uint32_t SDOabortCode = 1;

            uint8_t dataRx[CO_COMMAND_SDO_BUFFER_SIZE]; /* SDO receive buffer */
            uint32_t dataRxLen;  /* Length of received data */

            token = getTok(NULL, spaceDelim, &err);
            idx = (uint16_t)getU32(token, 0, 0xFFFF, &err);

            token = getTok(NULL, spaceDelim, &err);
            subidx = (uint8_t)getU32(token, 0, 0xFF, &err);

            token = getTok(NULL, spaceDelim, &errTokDt);
            datatype = getDataType(token, &errDt);

            /* Datatype must be correct, if present. */
            if(errTokDt == 0 && errDt != 0) {
                err = 1;
            }

            lastTok(NULL, spaceDelim, &err);

            if(err == 0 && (comm_node < 1 || comm_node > 127)) {
                err = 1;
                if(comm_node == 0xFF) {
                    respErrorCode = respErrorNoDefaultNodeSet;
                } else {
                    respErrorCode = respErrorUnsupportedNode;
                }
            }

            /* Make CANopen SDO transfer */
            if(err == 0) {
                err = sdoClientUpload(
                        CO->SDOclient[0],
                        comm_node,
                        idx,
                        subidx,
                        dataRx,
                        sizeof(dataRx),
                        &dataRxLen,
                        &SDOabortCode,
                        SDOtimeoutTime,
                        blockTransferEnable);

                if(err != 0){
                    respErrorCode = respErrorInternalState;
                }
            }

            /* output result */
            if(err == 0){
                if(SDOabortCode == 0) {
                    respLen = sprintf(resp, "[%d] ", sequence);

                    if(datatype == NULL || (datatype->length != 0 && datatype->length != dataRxLen)) {
                        respLen += dtpHex(resp+respLen, sizeof(resp)-respLen, (char*)dataRx, dataRxLen);
                    }
                    else {
                        respLen += datatype->dataTypePrint(
                                resp+respLen, sizeof(resp)-respLen, (char*)dataRx, dataRxLen);
                    }
                }
                else{
                    respLen = sprintf(resp, "[%d] ERROR: 0x%08X", sequence, SDOabortCode);
                }
            }
        }

        /* Download SDO command - w[rite] <index> <subindex> <datatype> <value> */
        else if(strcmp(token, "w") == 0 || strcmp(token, "write") == 0) {
            uint16_t idx;
            uint8_t subidx;
            const dataType_t *datatype;
            uint32_t SDOabortCode = 1;

            uint8_t dataTx[CO_COMMAND_SDO_BUFFER_SIZE]; /* SDO transmit buffer */
            uint32_t dataTxLen = 0;  /* Length of data to transmit. */

            token = getTok(NULL, spaceDelim, &err);
            idx = (uint16_t)getU32(token, 0, 0xFFFF, &err);

            token = getTok(NULL, spaceDelim, &err);
            subidx = (uint8_t)getU32(token, 0, 0xFF, &err);

            token = getTok(NULL, spaceDelim, &err);
            datatype = getDataType(token, &err);

            if(err == 0) {
                /* take whole string or single token, depending on datatype. Comment may follow. */
                token = getTok(NULL, (datatype->length == 0) ? "\n\r\f" : spaceDelim, &err);
            }

            if(err == 0) {
                dataTxLen = datatype->dataTypeScan((char*)dataTx, sizeof(dataTx), token);

                /* Length must match and must not be zero. */
                if((datatype->length != 0 && datatype->length != dataTxLen) || dataTxLen == 0) {
                    err = 1;
                }
            }

            lastTok(NULL, spaceDelim, &err);

            if(err == 0 && (comm_node < 1 || comm_node > 127)) {
                err = 1;
                if(comm_node == 0xFF) {
                    respErrorCode = respErrorNoDefaultNodeSet;
                } else {
                    respErrorCode = respErrorUnsupportedNode;
                }
            }

            /* Make CANopen SDO transfer */
            if(err == 0) {
                err = sdoClientDownload(
                        CO->SDOclient[0],
                        comm_node,
                        idx,
                        subidx,
                        dataTx,
                        dataTxLen,
                        &SDOabortCode,
                        SDOtimeoutTime,
                        blockTransferEnable);

                if(err != 0){
                    respErrorCode = respErrorInternalState;
                }
            }

            /* output result */
            if(err == 0){
                if(SDOabortCode == 0) {
                    respLen = sprintf(resp, "[%d] OK", sequence);
                }
                else{
                    respLen = sprintf(resp, "[%d] ERROR: 0x%08X", sequence, SDOabortCode);
                }
            }
        }

        /* NMT start node */
        else if(strcmp(token, "start") == 0) {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_OPERATIONAL, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }

        /* NMT stop node */
        else if(strcmp(token, "stop") == 0) {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_STOPPED, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }

        /* NMT Set node to pre-operational */
        else if(strcmp(token, "preop") == 0 || strcmp(token, "preoperational") == 0) {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_PRE_OPERATIONAL, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }

        /* NMT reset (node or communication) */
        else if(strcmp(token, "reset") == 0) {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                if(strcmp(token, "node") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_NODE, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }
                else if(strcmp(token, "comm") == 0 || strcmp(token, "communication") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_COMMUNICATION, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                else {
                    err = 1;
                }
            }
        }

        /* set command - multiple settings */
        else if(strcmp(token, "set") == 0) {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0) {
                /* sdo_timeout <value> */
                if(strcmp(token, "sdo_timeout") == 0) {
                    uint16_t tmout;

                    token = getTok(NULL, spaceDelim, &err);
                    tmout = (uint16_t)getU32(token, 0, 10000, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        SDOtimeoutTime = tmout;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* sdo_block <value> */
                else if(strcmp(token, "sdo_block") == 0) {
                    uint8_t blk;

                    token = getTok(NULL, spaceDelim, &err);
                    blk = (uint8_t)getU32(token, 0, 1, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        blockTransferEnable = blk;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* node <value> */
                else if(strcmp(token, "node") == 0) {
                    uint16_t node;

                    token = getTok(NULL, spaceDelim, &err);
                    node = (uint16_t)getU32(token, 1, 127, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        comm_node_default = node;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* Unknown command */
                else {
                    err = 1;
                }
            }
        }

        /* Unknown command */
        else {
            respErrorCode = respErrorReqNotSupported;
            err = 1;
        }
    }


    /* Generate error response (or leave empty line response) */
    if(err != 0 && emptyLine == 0) {
        if(respErrorCode == respErrorNone) {
            respErrorCode = respErrorSyntax;
        }
        respLen = sprintf(resp, "[%d] ERROR: %d", sequence, respErrorCode);
    }


    /* Terminate string and send response */
    resp[respLen++] = '\r';
    resp[respLen++] = '\n';
    resp[respLen++] = '\0';

    if(write(fd, resp, respLen) != respLen) {
        CO_error(0x15200000L);
    }
}
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:primitive_type Text: void
|——Node:function_declarator Text: command_process(int fd, char* command, size_t commandLength)
|———Node:identifier Text: command_process
|———Node:parameter_list Text: (int fd, char* command, size_t commandLength)
|————Node:( Text: (
|————Node:parameter_declaration Text: int fd
|—————Node:primitive_type Text: int
|—————Node:identifier Text: fd
|————Node:, Text: ,
|————Node:parameter_declaration Text: char* command
|—————Node:primitive_type Text: char
|—————Node:pointer_declarator Text: * command
|——————Node:* Text: *
|——————Node:identifier Text: command
|————Node:, Text: ,
|————Node:parameter_declaration Text: size_t commandLength
|—————Node:primitive_type Text: size_t
|—————Node:identifier Text: commandLength
|————Node:) Text: )
|——Node:compound_statement Text: {
    int err = 0; /* syntax or other error, true or false */
    int emptyLine = 0;
    char *token;
    int i;
    uint32_t ui[3];
    uint8_t comm_node = 0xFF; /* undefined */

    char resp[STRING_BUFFER_SIZE];
    int respLen = 0;
    respErrorCode_t respErrorCode = respErrorNone;

    uint32_t sequence = 0;


    /* parse mandatory token '"["<sequence>"]"' */
    if((token = getTok(command, spaceDelim, &err)) == NULL) {
        /* If empty line, respond with empty line. */
        emptyLine = 1;
    }
    if(err == 0) {
        if(token[0] != '[' || token[strlen(token)-1] != ']') {
            err = 1;
            if(token[0] == '#') {
                /* If comment, respond with empty line. */
                emptyLine = 1;
            }
        }
        else {
            token[strlen(token)-1] = '\0';
            sequence = getU32(token+1, 0, 0xFFFFFFFF, &err);
        }
    }


    /* parse optional tokens '[[<net>] <node>]', both numerical. Then follows
     *  mandatory token <command>, which is not numerical. */
    if(err == 0) {
        for(i=0; i<3; i++) {
            if((token = getTok(NULL, spaceDelim, &err)) == NULL) {
                break;
            }
            if(isdigit(token[0]) == 0) {
                break;
            }
            ui[i] = getU32(token, 0, 0xFFFFFFFF, &err);
        }
    }
    if(err == 0) {
        switch(i) {
        case 0: /* only <command> (pointed by token) */
            comm_node = comm_node_default; /* may be undefined */
            break;
        case 1: /* <node> and <command> tokens */
            if(ui[0] < 0 || ui[0] > 127) {
                err = 1;
                respErrorCode = respErrorUnsupportedNode;
            }
            else {
                comm_node = (uint8_t) ui[0];
            }
            break;
        case 2: /* <net>, <node> and <command> tokens */
            if(ui[0] < 1 || ui[0] > 1) {
                err = 1;
                respErrorCode = respErrorUnsupportedNet;
            }
            else if(ui[1] < 0 || ui[1] > 127) {
                err = 1;
                respErrorCode = respErrorUnsupportedNode;
            }
            else {
                comm_net = (uint16_t) ui[0];
                comm_node = (uint8_t) ui[1];
            }
            break;
        case 3: /* <command> token contains digit */
            err = 1;
            break;
        }
    }

    /* Execute command */
    if(err == 0) {

        /* Upload SDO command - 'r[ead] <index> <subindex> <datatype>' */
        if(strcmp(token, "r") == 0 || strcmp(token, "read") == 0) {
            uint16_t idx;
            uint8_t subidx;
            const dataType_t *datatype; /* optional token */
            int errTokDt = 0;
            int errDt = 0;
            uint32_t SDOabortCode = 1;

            uint8_t dataRx[CO_COMMAND_SDO_BUFFER_SIZE]; /* SDO receive buffer */
            uint32_t dataRxLen;  /* Length of received data */

            token = getTok(NULL, spaceDelim, &err);
            idx = (uint16_t)getU32(token, 0, 0xFFFF, &err);

            token = getTok(NULL, spaceDelim, &err);
            subidx = (uint8_t)getU32(token, 0, 0xFF, &err);

            token = getTok(NULL, spaceDelim, &errTokDt);
            datatype = getDataType(token, &errDt);

            /* Datatype must be correct, if present. */
            if(errTokDt == 0 && errDt != 0) {
                err = 1;
            }

            lastTok(NULL, spaceDelim, &err);

            if(err == 0 && (comm_node < 1 || comm_node > 127)) {
                err = 1;
                if(comm_node == 0xFF) {
                    respErrorCode = respErrorNoDefaultNodeSet;
                } else {
                    respErrorCode = respErrorUnsupportedNode;
                }
            }

            /* Make CANopen SDO transfer */
            if(err == 0) {
                err = sdoClientUpload(
                        CO->SDOclient[0],
                        comm_node,
                        idx,
                        subidx,
                        dataRx,
                        sizeof(dataRx),
                        &dataRxLen,
                        &SDOabortCode,
                        SDOtimeoutTime,
                        blockTransferEnable);

                if(err != 0){
                    respErrorCode = respErrorInternalState;
                }
            }

            /* output result */
            if(err == 0){
                if(SDOabortCode == 0) {
                    respLen = sprintf(resp, "[%d] ", sequence);

                    if(datatype == NULL || (datatype->length != 0 && datatype->length != dataRxLen)) {
                        respLen += dtpHex(resp+respLen, sizeof(resp)-respLen, (char*)dataRx, dataRxLen);
                    }
                    else {
                        respLen += datatype->dataTypePrint(
                                resp+respLen, sizeof(resp)-respLen, (char*)dataRx, dataRxLen);
                    }
                }
                else{
                    respLen = sprintf(resp, "[%d] ERROR: 0x%08X", sequence, SDOabortCode);
                }
            }
        }

        /* Download SDO command - w[rite] <index> <subindex> <datatype> <value> */
        else if(strcmp(token, "w") == 0 || strcmp(token, "write") == 0) {
            uint16_t idx;
            uint8_t subidx;
            const dataType_t *datatype;
            uint32_t SDOabortCode = 1;

            uint8_t dataTx[CO_COMMAND_SDO_BUFFER_SIZE]; /* SDO transmit buffer */
            uint32_t dataTxLen = 0;  /* Length of data to transmit. */

            token = getTok(NULL, spaceDelim, &err);
            idx = (uint16_t)getU32(token, 0, 0xFFFF, &err);

            token = getTok(NULL, spaceDelim, &err);
            subidx = (uint8_t)getU32(token, 0, 0xFF, &err);

            token = getTok(NULL, spaceDelim, &err);
            datatype = getDataType(token, &err);

            if(err == 0) {
                /* take whole string or single token, depending on datatype. Comment may follow. */
                token = getTok(NULL, (datatype->length == 0) ? "\n\r\f" : spaceDelim, &err);
            }

            if(err == 0) {
                dataTxLen = datatype->dataTypeScan((char*)dataTx, sizeof(dataTx), token);

                /* Length must match and must not be zero. */
                if((datatype->length != 0 && datatype->length != dataTxLen) || dataTxLen == 0) {
                    err = 1;
                }
            }

            lastTok(NULL, spaceDelim, &err);

            if(err == 0 && (comm_node < 1 || comm_node > 127)) {
                err = 1;
                if(comm_node == 0xFF) {
                    respErrorCode = respErrorNoDefaultNodeSet;
                } else {
                    respErrorCode = respErrorUnsupportedNode;
                }
            }

            /* Make CANopen SDO transfer */
            if(err == 0) {
                err = sdoClientDownload(
                        CO->SDOclient[0],
                        comm_node,
                        idx,
                        subidx,
                        dataTx,
                        dataTxLen,
                        &SDOabortCode,
                        SDOtimeoutTime,
                        blockTransferEnable);

                if(err != 0){
                    respErrorCode = respErrorInternalState;
                }
            }

            /* output result */
            if(err == 0){
                if(SDOabortCode == 0) {
                    respLen = sprintf(resp, "[%d] OK", sequence);
                }
                else{
                    respLen = sprintf(resp, "[%d] ERROR: 0x%08X", sequence, SDOabortCode);
                }
            }
        }

        /* NMT start node */
        else if(strcmp(token, "start") == 0) {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_OPERATIONAL, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }

        /* NMT stop node */
        else if(strcmp(token, "stop") == 0) {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_STOPPED, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }

        /* NMT Set node to pre-operational */
        else if(strcmp(token, "preop") == 0 || strcmp(token, "preoperational") == 0) {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_PRE_OPERATIONAL, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }

        /* NMT reset (node or communication) */
        else if(strcmp(token, "reset") == 0) {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                if(strcmp(token, "node") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_NODE, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }
                else if(strcmp(token, "comm") == 0 || strcmp(token, "communication") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_COMMUNICATION, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                else {
                    err = 1;
                }
            }
        }

        /* set command - multiple settings */
        else if(strcmp(token, "set") == 0) {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0) {
                /* sdo_timeout <value> */
                if(strcmp(token, "sdo_timeout") == 0) {
                    uint16_t tmout;

                    token = getTok(NULL, spaceDelim, &err);
                    tmout = (uint16_t)getU32(token, 0, 10000, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        SDOtimeoutTime = tmout;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* sdo_block <value> */
                else if(strcmp(token, "sdo_block") == 0) {
                    uint8_t blk;

                    token = getTok(NULL, spaceDelim, &err);
                    blk = (uint8_t)getU32(token, 0, 1, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        blockTransferEnable = blk;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* node <value> */
                else if(strcmp(token, "node") == 0) {
                    uint16_t node;

                    token = getTok(NULL, spaceDelim, &err);
                    node = (uint16_t)getU32(token, 1, 127, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        comm_node_default = node;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* Unknown command */
                else {
                    err = 1;
                }
            }
        }

        /* Unknown command */
        else {
            respErrorCode = respErrorReqNotSupported;
            err = 1;
        }
    }


    /* Generate error response (or leave empty line response) */
    if(err != 0 && emptyLine == 0) {
        if(respErrorCode == respErrorNone) {
            respErrorCode = respErrorSyntax;
        }
        respLen = sprintf(resp, "[%d] ERROR: %d", sequence, respErrorCode);
    }


    /* Terminate string and send response */
    resp[respLen++] = '\r';
    resp[respLen++] = '\n';
    resp[respLen++] = '\0';

    if(write(fd, resp, respLen) != respLen) {
        CO_error(0x15200000L);
    }
}
|———Node:{ Text: {
|———Node:declaration Text: int err = 0;
|————Node:primitive_type Text: int
|————Node:init_declarator Text: err = 0
|—————Node:identifier Text: err
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment Text: /* syntax or other error, true or false */
|———Node:declaration Text: int emptyLine = 0;
|————Node:primitive_type Text: int
|————Node:init_declarator Text: emptyLine = 0
|—————Node:identifier Text: emptyLine
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: char *token;
|————Node:primitive_type Text: char
|————Node:pointer_declarator Text: *token
|—————Node:* Text: *
|—————Node:identifier Text: token
|————Node:; Text: ;
|———Node:declaration Text: int i;
|————Node:primitive_type Text: int
|————Node:identifier Text: i
|————Node:; Text: ;
|———Node:declaration Text: uint32_t ui[3];
|————Node:primitive_type Text: uint32_t
|————Node:array_declarator Text: ui[3]
|—————Node:identifier Text: ui
|—————Node:[ Text: [
|—————Node:number_literal Text: 3
|—————Node:] Text: ]
|————Node:; Text: ;
|———Node:declaration Text: uint8_t comm_node = 0xFF;
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: comm_node = 0xFF
|—————Node:identifier Text: comm_node
|—————Node:= Text: =
|—————Node:number_literal Text: 0xFF
|————Node:; Text: ;
|———Node:comment Text: /* undefined */
|———Node:declaration Text: char resp[STRING_BUFFER_SIZE];
|————Node:primitive_type Text: char
|————Node:array_declarator Text: resp[STRING_BUFFER_SIZE]
|—————Node:identifier Text: resp
|—————Node:[ Text: [
|—————Node:identifier Text: STRING_BUFFER_SIZE
|—————Node:] Text: ]
|————Node:; Text: ;
|———Node:declaration Text: int respLen = 0;
|————Node:primitive_type Text: int
|————Node:init_declarator Text: respLen = 0
|—————Node:identifier Text: respLen
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: respErrorCode_t respErrorCode = respErrorNone;
|————Node:type_identifier Text: respErrorCode_t
|————Node:init_declarator Text: respErrorCode = respErrorNone
|—————Node:identifier Text: respErrorCode
|—————Node:= Text: =
|—————Node:identifier Text: respErrorNone
|————Node:; Text: ;
|———Node:declaration Text: uint32_t sequence = 0;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: sequence = 0
|—————Node:identifier Text: sequence
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment Text: /* parse mandatory token '"["<sequence>"]"' */
|———Node:if_statement Text: if((token = getTok(command, spaceDelim, &err)) == NULL) {
        /* If empty line, respond with empty line. */
        emptyLine = 1;
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: ((token = getTok(command, spaceDelim, &err)) == NULL)
|—————Node:( Text: (
|—————Node:binary_expression Text: (token = getTok(command, spaceDelim, &err)) == NULL
|——————Node:parenthesized_expression Text: (token = getTok(command, spaceDelim, &err))
|———————Node:( Text: (
|———————Node:assignment_expression Text: token = getTok(command, spaceDelim, &err)
|————————Node:identifier Text: token
|————————Node:= Text: =
|————————Node:call_expression Text: getTok(command, spaceDelim, &err)
|—————————Node:identifier Text: getTok
|—————————Node:argument_list Text: (command, spaceDelim, &err)
|——————————Node:( Text: (
|——————————Node:identifier Text: command
|——————————Node:, Text: ,
|——————————Node:identifier Text: spaceDelim
|——————————Node:, Text: ,
|——————————Node:pointer_expression Text: &err
|———————————Node:& Text: &
|———————————Node:identifier Text: err
|——————————Node:) Text: )
|———————Node:) Text: )
|——————Node:== Text: ==
|——————Node:null Text: NULL
|———————Node:NULL Text: NULL
|—————Node:) Text: )
|————Node:compound_statement Text: {
        /* If empty line, respond with empty line. */
        emptyLine = 1;
    }
|—————Node:{ Text: {
|—————Node:comment Text: /* If empty line, respond with empty line. */
|—————Node:expression_statement Text: emptyLine = 1;
|——————Node:assignment_expression Text: emptyLine = 1
|———————Node:identifier Text: emptyLine
|———————Node:= Text: =
|———————Node:number_literal Text: 1
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:if_statement Text: if(err == 0) {
        if(token[0] != '[' || token[strlen(token)-1] != ']') {
            err = 1;
            if(token[0] == '#') {
                /* If comment, respond with empty line. */
                emptyLine = 1;
            }
        }
        else {
            token[strlen(token)-1] = '\0';
            sequence = getU32(token+1, 0, 0xFFFFFFFF, &err);
        }
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: (err == 0)
|—————Node:( Text: (
|—————Node:binary_expression Text: err == 0
|——————Node:identifier Text: err
|——————Node:== Text: ==
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {
        if(token[0] != '[' || token[strlen(token)-1] != ']') {
            err = 1;
            if(token[0] == '#') {
                /* If comment, respond with empty line. */
                emptyLine = 1;
            }
        }
        else {
            token[strlen(token)-1] = '\0';
            sequence = getU32(token+1, 0, 0xFFFFFFFF, &err);
        }
    }
|—————Node:{ Text: {
|—————Node:if_statement Text: if(token[0] != '[' || token[strlen(token)-1] != ']') {
            err = 1;
            if(token[0] == '#') {
                /* If comment, respond with empty line. */
                emptyLine = 1;
            }
        }
        else {
            token[strlen(token)-1] = '\0';
            sequence = getU32(token+1, 0, 0xFFFFFFFF, &err);
        }
|——————Node:if Text: if
|——————Node:parenthesized_expression Text: (token[0] != '[' || token[strlen(token)-1] != ']')
|———————Node:( Text: (
|———————Node:binary_expression Text: token[0] != '[' || token[strlen(token)-1] != ']'
|————————Node:binary_expression Text: token[0] != '['
|—————————Node:subscript_expression Text: token[0]
|——————————Node:identifier Text: token
|——————————Node:[ Text: [
|——————————Node:number_literal Text: 0
|——————————Node:] Text: ]
|—————————Node:!= Text: !=
|—————————Node:char_literal Text: '['
|——————————Node:' Text: '
|——————————Node:character Text: [
|——————————Node:' Text: '
|————————Node:|| Text: ||
|————————Node:binary_expression Text: token[strlen(token)-1] != ']'
|—————————Node:subscript_expression Text: token[strlen(token)-1]
|——————————Node:identifier Text: token
|——————————Node:[ Text: [
|——————————Node:binary_expression Text: strlen(token)-1
|———————————Node:call_expression Text: strlen(token)
|————————————Node:identifier Text: strlen
|————————————Node:argument_list Text: (token)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: token
|—————————————Node:) Text: )
|———————————Node:- Text: -
|———————————Node:number_literal Text: 1
|——————————Node:] Text: ]
|—————————Node:!= Text: !=
|—————————Node:char_literal Text: ']'
|——————————Node:' Text: '
|——————————Node:character Text: ]
|——————————Node:' Text: '
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            err = 1;
            if(token[0] == '#') {
                /* If comment, respond with empty line. */
                emptyLine = 1;
            }
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: err = 1;
|————————Node:assignment_expression Text: err = 1
|—————————Node:identifier Text: err
|—————————Node:= Text: =
|—————————Node:number_literal Text: 1
|————————Node:; Text: ;
|———————Node:if_statement Text: if(token[0] == '#') {
                /* If comment, respond with empty line. */
                emptyLine = 1;
            }
|————————Node:if Text: if
|————————Node:parenthesized_expression Text: (token[0] == '#')
|—————————Node:( Text: (
|—————————Node:binary_expression Text: token[0] == '#'
|——————————Node:subscript_expression Text: token[0]
|———————————Node:identifier Text: token
|———————————Node:[ Text: [
|———————————Node:number_literal Text: 0
|———————————Node:] Text: ]
|——————————Node:== Text: ==
|——————————Node:char_literal Text: '#'
|———————————Node:' Text: '
|———————————Node:character Text: #
|———————————Node:' Text: '
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
                /* If comment, respond with empty line. */
                emptyLine = 1;
            }
|—————————Node:{ Text: {
|—————————Node:comment Text: /* If comment, respond with empty line. */
|—————————Node:expression_statement Text: emptyLine = 1;
|——————————Node:assignment_expression Text: emptyLine = 1
|———————————Node:identifier Text: emptyLine
|———————————Node:= Text: =
|———————————Node:number_literal Text: 1
|——————————Node:; Text: ;
|—————————Node:} Text: }
|———————Node:} Text: }
|——————Node:else_clause Text: else {
            token[strlen(token)-1] = '\0';
            sequence = getU32(token+1, 0, 0xFFFFFFFF, &err);
        }
|———————Node:else Text: else
|———————Node:compound_statement Text: {
            token[strlen(token)-1] = '\0';
            sequence = getU32(token+1, 0, 0xFFFFFFFF, &err);
        }
|————————Node:{ Text: {
|————————Node:expression_statement Text: token[strlen(token)-1] = '\0';
|—————————Node:assignment_expression Text: token[strlen(token)-1] = '\0'
|——————————Node:subscript_expression Text: token[strlen(token)-1]
|———————————Node:identifier Text: token
|———————————Node:[ Text: [
|———————————Node:binary_expression Text: strlen(token)-1
|————————————Node:call_expression Text: strlen(token)
|—————————————Node:identifier Text: strlen
|—————————————Node:argument_list Text: (token)
|——————————————Node:( Text: (
|——————————————Node:identifier Text: token
|——————————————Node:) Text: )
|————————————Node:- Text: -
|————————————Node:number_literal Text: 1
|———————————Node:] Text: ]
|——————————Node:= Text: =
|——————————Node:char_literal Text: '\0'
|———————————Node:' Text: '
|———————————Node:escape_sequence Text: \0
|———————————Node:' Text: '
|—————————Node:; Text: ;
|————————Node:expression_statement Text: sequence = getU32(token+1, 0, 0xFFFFFFFF, &err);
|—————————Node:assignment_expression Text: sequence = getU32(token+1, 0, 0xFFFFFFFF, &err)
|——————————Node:identifier Text: sequence
|——————————Node:= Text: =
|——————————Node:call_expression Text: getU32(token+1, 0, 0xFFFFFFFF, &err)
|———————————Node:identifier Text: getU32
|———————————Node:argument_list Text: (token+1, 0, 0xFFFFFFFF, &err)
|————————————Node:( Text: (
|————————————Node:binary_expression Text: token+1
|—————————————Node:identifier Text: token
|—————————————Node:+ Text: +
|—————————————Node:number_literal Text: 1
|————————————Node:, Text: ,
|————————————Node:number_literal Text: 0
|————————————Node:, Text: ,
|————————————Node:number_literal Text: 0xFFFFFFFF
|————————————Node:, Text: ,
|————————————Node:pointer_expression Text: &err
|—————————————Node:& Text: &
|—————————————Node:identifier Text: err
|————————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:} Text: }
|—————Node:} Text: }
|———Node:comment Text: /* parse optional tokens '[[<net>] <node>]', both numerical. Then follows
     *  mandatory token <command>, which is not numerical. */
|———Node:if_statement Text: if(err == 0) {
        for(i=0; i<3; i++) {
            if((token = getTok(NULL, spaceDelim, &err)) == NULL) {
                break;
            }
            if(isdigit(token[0]) == 0) {
                break;
            }
            ui[i] = getU32(token, 0, 0xFFFFFFFF, &err);
        }
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: (err == 0)
|—————Node:( Text: (
|—————Node:binary_expression Text: err == 0
|——————Node:identifier Text: err
|——————Node:== Text: ==
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {
        for(i=0; i<3; i++) {
            if((token = getTok(NULL, spaceDelim, &err)) == NULL) {
                break;
            }
            if(isdigit(token[0]) == 0) {
                break;
            }
            ui[i] = getU32(token, 0, 0xFFFFFFFF, &err);
        }
    }
|—————Node:{ Text: {
|—————Node:for_statement Text: for(i=0; i<3; i++) {
            if((token = getTok(NULL, spaceDelim, &err)) == NULL) {
                break;
            }
            if(isdigit(token[0]) == 0) {
                break;
            }
            ui[i] = getU32(token, 0, 0xFFFFFFFF, &err);
        }
|——————Node:for Text: for
|——————Node:( Text: (
|——————Node:assignment_expression Text: i=0
|———————Node:identifier Text: i
|———————Node:= Text: =
|———————Node:number_literal Text: 0
|——————Node:; Text: ;
|——————Node:binary_expression Text: i<3
|———————Node:identifier Text: i
|———————Node:< Text: <
|———————Node:number_literal Text: 3
|——————Node:; Text: ;
|——————Node:update_expression Text: i++
|———————Node:identifier Text: i
|———————Node:++ Text: ++
|——————Node:) Text: )
|——————Node:compound_statement Text: {
            if((token = getTok(NULL, spaceDelim, &err)) == NULL) {
                break;
            }
            if(isdigit(token[0]) == 0) {
                break;
            }
            ui[i] = getU32(token, 0, 0xFFFFFFFF, &err);
        }
|———————Node:{ Text: {
|———————Node:if_statement Text: if((token = getTok(NULL, spaceDelim, &err)) == NULL) {
                break;
            }
|————————Node:if Text: if
|————————Node:parenthesized_expression Text: ((token = getTok(NULL, spaceDelim, &err)) == NULL)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: (token = getTok(NULL, spaceDelim, &err)) == NULL
|——————————Node:parenthesized_expression Text: (token = getTok(NULL, spaceDelim, &err))
|———————————Node:( Text: (
|———————————Node:assignment_expression Text: token = getTok(NULL, spaceDelim, &err)
|————————————Node:identifier Text: token
|————————————Node:= Text: =
|————————————Node:call_expression Text: getTok(NULL, spaceDelim, &err)
|—————————————Node:identifier Text: getTok
|—————————————Node:argument_list Text: (NULL, spaceDelim, &err)
|——————————————Node:( Text: (
|——————————————Node:null Text: NULL
|———————————————Node:NULL Text: NULL
|——————————————Node:, Text: ,
|——————————————Node:identifier Text: spaceDelim
|——————————————Node:, Text: ,
|——————————————Node:pointer_expression Text: &err
|———————————————Node:& Text: &
|———————————————Node:identifier Text: err
|——————————————Node:) Text: )
|———————————Node:) Text: )
|——————————Node:== Text: ==
|——————————Node:null Text: NULL
|———————————Node:NULL Text: NULL
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
                break;
            }
|—————————Node:{ Text: {
|—————————Node:break_statement Text: break;
|——————————Node:break Text: break
|——————————Node:; Text: ;
|—————————Node:} Text: }
|———————Node:if_statement Text: if(isdigit(token[0]) == 0) {
                break;
            }
|————————Node:if Text: if
|————————Node:parenthesized_expression Text: (isdigit(token[0]) == 0)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: isdigit(token[0]) == 0
|——————————Node:call_expression Text: isdigit(token[0])
|———————————Node:identifier Text: isdigit
|———————————Node:argument_list Text: (token[0])
|————————————Node:( Text: (
|————————————Node:subscript_expression Text: token[0]
|—————————————Node:identifier Text: token
|—————————————Node:[ Text: [
|—————————————Node:number_literal Text: 0
|—————————————Node:] Text: ]
|————————————Node:) Text: )
|——————————Node:== Text: ==
|——————————Node:number_literal Text: 0
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
                break;
            }
|—————————Node:{ Text: {
|—————————Node:break_statement Text: break;
|——————————Node:break Text: break
|——————————Node:; Text: ;
|—————————Node:} Text: }
|———————Node:expression_statement Text: ui[i] = getU32(token, 0, 0xFFFFFFFF, &err);
|————————Node:assignment_expression Text: ui[i] = getU32(token, 0, 0xFFFFFFFF, &err)
|—————————Node:subscript_expression Text: ui[i]
|——————————Node:identifier Text: ui
|——————————Node:[ Text: [
|——————————Node:identifier Text: i
|——————————Node:] Text: ]
|—————————Node:= Text: =
|—————————Node:call_expression Text: getU32(token, 0, 0xFFFFFFFF, &err)
|——————————Node:identifier Text: getU32
|——————————Node:argument_list Text: (token, 0, 0xFFFFFFFF, &err)
|———————————Node:( Text: (
|———————————Node:identifier Text: token
|———————————Node:, Text: ,
|———————————Node:number_literal Text: 0
|———————————Node:, Text: ,
|———————————Node:number_literal Text: 0xFFFFFFFF
|———————————Node:, Text: ,
|———————————Node:pointer_expression Text: &err
|————————————Node:& Text: &
|————————————Node:identifier Text: err
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:if_statement Text: if(err == 0) {
        switch(i) {
        case 0: /* only <command> (pointed by token) */
            comm_node = comm_node_default; /* may be undefined */
            break;
        case 1: /* <node> and <command> tokens */
            if(ui[0] < 0 || ui[0] > 127) {
                err = 1;
                respErrorCode = respErrorUnsupportedNode;
            }
            else {
                comm_node = (uint8_t) ui[0];
            }
            break;
        case 2: /* <net>, <node> and <command> tokens */
            if(ui[0] < 1 || ui[0] > 1) {
                err = 1;
                respErrorCode = respErrorUnsupportedNet;
            }
            else if(ui[1] < 0 || ui[1] > 127) {
                err = 1;
                respErrorCode = respErrorUnsupportedNode;
            }
            else {
                comm_net = (uint16_t) ui[0];
                comm_node = (uint8_t) ui[1];
            }
            break;
        case 3: /* <command> token contains digit */
            err = 1;
            break;
        }
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: (err == 0)
|—————Node:( Text: (
|—————Node:binary_expression Text: err == 0
|——————Node:identifier Text: err
|——————Node:== Text: ==
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {
        switch(i) {
        case 0: /* only <command> (pointed by token) */
            comm_node = comm_node_default; /* may be undefined */
            break;
        case 1: /* <node> and <command> tokens */
            if(ui[0] < 0 || ui[0] > 127) {
                err = 1;
                respErrorCode = respErrorUnsupportedNode;
            }
            else {
                comm_node = (uint8_t) ui[0];
            }
            break;
        case 2: /* <net>, <node> and <command> tokens */
            if(ui[0] < 1 || ui[0] > 1) {
                err = 1;
                respErrorCode = respErrorUnsupportedNet;
            }
            else if(ui[1] < 0 || ui[1] > 127) {
                err = 1;
                respErrorCode = respErrorUnsupportedNode;
            }
            else {
                comm_net = (uint16_t) ui[0];
                comm_node = (uint8_t) ui[1];
            }
            break;
        case 3: /* <command> token contains digit */
            err = 1;
            break;
        }
    }
|—————Node:{ Text: {
|—————Node:switch_statement Text: switch(i) {
        case 0: /* only <command> (pointed by token) */
            comm_node = comm_node_default; /* may be undefined */
            break;
        case 1: /* <node> and <command> tokens */
            if(ui[0] < 0 || ui[0] > 127) {
                err = 1;
                respErrorCode = respErrorUnsupportedNode;
            }
            else {
                comm_node = (uint8_t) ui[0];
            }
            break;
        case 2: /* <net>, <node> and <command> tokens */
            if(ui[0] < 1 || ui[0] > 1) {
                err = 1;
                respErrorCode = respErrorUnsupportedNet;
            }
            else if(ui[1] < 0 || ui[1] > 127) {
                err = 1;
                respErrorCode = respErrorUnsupportedNode;
            }
            else {
                comm_net = (uint16_t) ui[0];
                comm_node = (uint8_t) ui[1];
            }
            break;
        case 3: /* <command> token contains digit */
            err = 1;
            break;
        }
|——————Node:switch Text: switch
|——————Node:parenthesized_expression Text: (i)
|———————Node:( Text: (
|———————Node:identifier Text: i
|———————Node:) Text: )
|——————Node:compound_statement Text: {
        case 0: /* only <command> (pointed by token) */
            comm_node = comm_node_default; /* may be undefined */
            break;
        case 1: /* <node> and <command> tokens */
            if(ui[0] < 0 || ui[0] > 127) {
                err = 1;
                respErrorCode = respErrorUnsupportedNode;
            }
            else {
                comm_node = (uint8_t) ui[0];
            }
            break;
        case 2: /* <net>, <node> and <command> tokens */
            if(ui[0] < 1 || ui[0] > 1) {
                err = 1;
                respErrorCode = respErrorUnsupportedNet;
            }
            else if(ui[1] < 0 || ui[1] > 127) {
                err = 1;
                respErrorCode = respErrorUnsupportedNode;
            }
            else {
                comm_net = (uint16_t) ui[0];
                comm_node = (uint8_t) ui[1];
            }
            break;
        case 3: /* <command> token contains digit */
            err = 1;
            break;
        }
|———————Node:{ Text: {
|———————Node:case_statement Text: case 0: /* only <command> (pointed by token) */
            comm_node = comm_node_default; /* may be undefined */
            break;
|————————Node:case Text: case
|————————Node:number_literal Text: 0
|————————Node:: Text: :
|————————Node:comment Text: /* only <command> (pointed by token) */
|————————Node:expression_statement Text: comm_node = comm_node_default;
|—————————Node:assignment_expression Text: comm_node = comm_node_default
|——————————Node:identifier Text: comm_node
|——————————Node:= Text: =
|——————————Node:identifier Text: comm_node_default
|—————————Node:; Text: ;
|————————Node:comment Text: /* may be undefined */
|————————Node:break_statement Text: break;
|—————————Node:break Text: break
|—————————Node:; Text: ;
|———————Node:case_statement Text: case 1: /* <node> and <command> tokens */
            if(ui[0] < 0 || ui[0] > 127) {
                err = 1;
                respErrorCode = respErrorUnsupportedNode;
            }
            else {
                comm_node = (uint8_t) ui[0];
            }
            break;
|————————Node:case Text: case
|————————Node:number_literal Text: 1
|————————Node:: Text: :
|————————Node:comment Text: /* <node> and <command> tokens */
|————————Node:if_statement Text: if(ui[0] < 0 || ui[0] > 127) {
                err = 1;
                respErrorCode = respErrorUnsupportedNode;
            }
            else {
                comm_node = (uint8_t) ui[0];
            }
|—————————Node:if Text: if
|—————————Node:parenthesized_expression Text: (ui[0] < 0 || ui[0] > 127)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: ui[0] < 0 || ui[0] > 127
|———————————Node:binary_expression Text: ui[0] < 0
|————————————Node:subscript_expression Text: ui[0]
|—————————————Node:identifier Text: ui
|—————————————Node:[ Text: [
|—————————————Node:number_literal Text: 0
|—————————————Node:] Text: ]
|————————————Node:< Text: <
|————————————Node:number_literal Text: 0
|———————————Node:|| Text: ||
|———————————Node:binary_expression Text: ui[0] > 127
|————————————Node:subscript_expression Text: ui[0]
|—————————————Node:identifier Text: ui
|—————————————Node:[ Text: [
|—————————————Node:number_literal Text: 0
|—————————————Node:] Text: ]
|————————————Node:> Text: >
|————————————Node:number_literal Text: 127
|——————————Node:) Text: )
|—————————Node:compound_statement Text: {
                err = 1;
                respErrorCode = respErrorUnsupportedNode;
            }
|——————————Node:{ Text: {
|——————————Node:expression_statement Text: err = 1;
|———————————Node:assignment_expression Text: err = 1
|————————————Node:identifier Text: err
|————————————Node:= Text: =
|————————————Node:number_literal Text: 1
|———————————Node:; Text: ;
|——————————Node:expression_statement Text: respErrorCode = respErrorUnsupportedNode;
|———————————Node:assignment_expression Text: respErrorCode = respErrorUnsupportedNode
|————————————Node:identifier Text: respErrorCode
|————————————Node:= Text: =
|————————————Node:identifier Text: respErrorUnsupportedNode
|———————————Node:; Text: ;
|——————————Node:} Text: }
|—————————Node:else_clause Text: else {
                comm_node = (uint8_t) ui[0];
            }
|——————————Node:else Text: else
|——————————Node:compound_statement Text: {
                comm_node = (uint8_t) ui[0];
            }
|———————————Node:{ Text: {
|———————————Node:expression_statement Text: comm_node = (uint8_t) ui[0];
|————————————Node:assignment_expression Text: comm_node = (uint8_t) ui[0]
|—————————————Node:identifier Text: comm_node
|—————————————Node:= Text: =
|—————————————Node:cast_expression Text: (uint8_t) ui[0]
|——————————————Node:( Text: (
|——————————————Node:type_descriptor Text: uint8_t
|———————————————Node:primitive_type Text: uint8_t
|——————————————Node:) Text: )
|——————————————Node:subscript_expression Text: ui[0]
|———————————————Node:identifier Text: ui
|———————————————Node:[ Text: [
|———————————————Node:number_literal Text: 0
|———————————————Node:] Text: ]
|————————————Node:; Text: ;
|———————————Node:} Text: }
|————————Node:break_statement Text: break;
|—————————Node:break Text: break
|—————————Node:; Text: ;
|———————Node:case_statement Text: case 2: /* <net>, <node> and <command> tokens */
            if(ui[0] < 1 || ui[0] > 1) {
                err = 1;
                respErrorCode = respErrorUnsupportedNet;
            }
            else if(ui[1] < 0 || ui[1] > 127) {
                err = 1;
                respErrorCode = respErrorUnsupportedNode;
            }
            else {
                comm_net = (uint16_t) ui[0];
                comm_node = (uint8_t) ui[1];
            }
            break;
|————————Node:case Text: case
|————————Node:number_literal Text: 2
|————————Node:: Text: :
|————————Node:comment Text: /* <net>, <node> and <command> tokens */
|————————Node:if_statement Text: if(ui[0] < 1 || ui[0] > 1) {
                err = 1;
                respErrorCode = respErrorUnsupportedNet;
            }
            else if(ui[1] < 0 || ui[1] > 127) {
                err = 1;
                respErrorCode = respErrorUnsupportedNode;
            }
            else {
                comm_net = (uint16_t) ui[0];
                comm_node = (uint8_t) ui[1];
            }
|—————————Node:if Text: if
|—————————Node:parenthesized_expression Text: (ui[0] < 1 || ui[0] > 1)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: ui[0] < 1 || ui[0] > 1
|———————————Node:binary_expression Text: ui[0] < 1
|————————————Node:subscript_expression Text: ui[0]
|—————————————Node:identifier Text: ui
|—————————————Node:[ Text: [
|—————————————Node:number_literal Text: 0
|—————————————Node:] Text: ]
|————————————Node:< Text: <
|————————————Node:number_literal Text: 1
|———————————Node:|| Text: ||
|———————————Node:binary_expression Text: ui[0] > 1
|————————————Node:subscript_expression Text: ui[0]
|—————————————Node:identifier Text: ui
|—————————————Node:[ Text: [
|—————————————Node:number_literal Text: 0
|—————————————Node:] Text: ]
|————————————Node:> Text: >
|————————————Node:number_literal Text: 1
|——————————Node:) Text: )
|—————————Node:compound_statement Text: {
                err = 1;
                respErrorCode = respErrorUnsupportedNet;
            }
|——————————Node:{ Text: {
|——————————Node:expression_statement Text: err = 1;
|———————————Node:assignment_expression Text: err = 1
|————————————Node:identifier Text: err
|————————————Node:= Text: =
|————————————Node:number_literal Text: 1
|———————————Node:; Text: ;
|——————————Node:expression_statement Text: respErrorCode = respErrorUnsupportedNet;
|———————————Node:assignment_expression Text: respErrorCode = respErrorUnsupportedNet
|————————————Node:identifier Text: respErrorCode
|————————————Node:= Text: =
|————————————Node:identifier Text: respErrorUnsupportedNet
|———————————Node:; Text: ;
|——————————Node:} Text: }
|—————————Node:else_clause Text: else if(ui[1] < 0 || ui[1] > 127) {
                err = 1;
                respErrorCode = respErrorUnsupportedNode;
            }
            else {
                comm_net = (uint16_t) ui[0];
                comm_node = (uint8_t) ui[1];
            }
|——————————Node:else Text: else
|——————————Node:if_statement Text: if(ui[1] < 0 || ui[1] > 127) {
                err = 1;
                respErrorCode = respErrorUnsupportedNode;
            }
            else {
                comm_net = (uint16_t) ui[0];
                comm_node = (uint8_t) ui[1];
            }
|———————————Node:if Text: if
|———————————Node:parenthesized_expression Text: (ui[1] < 0 || ui[1] > 127)
|————————————Node:( Text: (
|————————————Node:binary_expression Text: ui[1] < 0 || ui[1] > 127
|—————————————Node:binary_expression Text: ui[1] < 0
|——————————————Node:subscript_expression Text: ui[1]
|———————————————Node:identifier Text: ui
|———————————————Node:[ Text: [
|———————————————Node:number_literal Text: 1
|———————————————Node:] Text: ]
|——————————————Node:< Text: <
|——————————————Node:number_literal Text: 0
|—————————————Node:|| Text: ||
|—————————————Node:binary_expression Text: ui[1] > 127
|——————————————Node:subscript_expression Text: ui[1]
|———————————————Node:identifier Text: ui
|———————————————Node:[ Text: [
|———————————————Node:number_literal Text: 1
|———————————————Node:] Text: ]
|——————————————Node:> Text: >
|——————————————Node:number_literal Text: 127
|————————————Node:) Text: )
|———————————Node:compound_statement Text: {
                err = 1;
                respErrorCode = respErrorUnsupportedNode;
            }
|————————————Node:{ Text: {
|————————————Node:expression_statement Text: err = 1;
|—————————————Node:assignment_expression Text: err = 1
|——————————————Node:identifier Text: err
|——————————————Node:= Text: =
|——————————————Node:number_literal Text: 1
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: respErrorCode = respErrorUnsupportedNode;
|—————————————Node:assignment_expression Text: respErrorCode = respErrorUnsupportedNode
|——————————————Node:identifier Text: respErrorCode
|——————————————Node:= Text: =
|——————————————Node:identifier Text: respErrorUnsupportedNode
|—————————————Node:; Text: ;
|————————————Node:} Text: }
|———————————Node:else_clause Text: else {
                comm_net = (uint16_t) ui[0];
                comm_node = (uint8_t) ui[1];
            }
|————————————Node:else Text: else
|————————————Node:compound_statement Text: {
                comm_net = (uint16_t) ui[0];
                comm_node = (uint8_t) ui[1];
            }
|—————————————Node:{ Text: {
|—————————————Node:expression_statement Text: comm_net = (uint16_t) ui[0];
|——————————————Node:assignment_expression Text: comm_net = (uint16_t) ui[0]
|———————————————Node:identifier Text: comm_net
|———————————————Node:= Text: =
|———————————————Node:cast_expression Text: (uint16_t) ui[0]
|————————————————Node:( Text: (
|————————————————Node:type_descriptor Text: uint16_t
|—————————————————Node:primitive_type Text: uint16_t
|————————————————Node:) Text: )
|————————————————Node:subscript_expression Text: ui[0]
|—————————————————Node:identifier Text: ui
|—————————————————Node:[ Text: [
|—————————————————Node:number_literal Text: 0
|—————————————————Node:] Text: ]
|——————————————Node:; Text: ;
|—————————————Node:expression_statement Text: comm_node = (uint8_t) ui[1];
|——————————————Node:assignment_expression Text: comm_node = (uint8_t) ui[1]
|———————————————Node:identifier Text: comm_node
|———————————————Node:= Text: =
|———————————————Node:cast_expression Text: (uint8_t) ui[1]
|————————————————Node:( Text: (
|————————————————Node:type_descriptor Text: uint8_t
|—————————————————Node:primitive_type Text: uint8_t
|————————————————Node:) Text: )
|————————————————Node:subscript_expression Text: ui[1]
|—————————————————Node:identifier Text: ui
|—————————————————Node:[ Text: [
|—————————————————Node:number_literal Text: 1
|—————————————————Node:] Text: ]
|——————————————Node:; Text: ;
|—————————————Node:} Text: }
|————————Node:break_statement Text: break;
|—————————Node:break Text: break
|—————————Node:; Text: ;
|———————Node:case_statement Text: case 3: /* <command> token contains digit */
            err = 1;
            break;
|————————Node:case Text: case
|————————Node:number_literal Text: 3
|————————Node:: Text: :
|————————Node:comment Text: /* <command> token contains digit */
|————————Node:expression_statement Text: err = 1;
|—————————Node:assignment_expression Text: err = 1
|——————————Node:identifier Text: err
|——————————Node:= Text: =
|——————————Node:number_literal Text: 1
|—————————Node:; Text: ;
|————————Node:break_statement Text: break;
|—————————Node:break Text: break
|—————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:comment Text: /* Execute command */
|———Node:if_statement Text: if(err == 0) {

        /* Upload SDO command - 'r[ead] <index> <subindex> <datatype>' */
        if(strcmp(token, "r") == 0 || strcmp(token, "read") == 0) {
            uint16_t idx;
            uint8_t subidx;
            const dataType_t *datatype; /* optional token */
            int errTokDt = 0;
            int errDt = 0;
            uint32_t SDOabortCode = 1;

            uint8_t dataRx[CO_COMMAND_SDO_BUFFER_SIZE]; /* SDO receive buffer */
            uint32_t dataRxLen;  /* Length of received data */

            token = getTok(NULL, spaceDelim, &err);
            idx = (uint16_t)getU32(token, 0, 0xFFFF, &err);

            token = getTok(NULL, spaceDelim, &err);
            subidx = (uint8_t)getU32(token, 0, 0xFF, &err);

            token = getTok(NULL, spaceDelim, &errTokDt);
            datatype = getDataType(token, &errDt);

            /* Datatype must be correct, if present. */
            if(errTokDt == 0 && errDt != 0) {
                err = 1;
            }

            lastTok(NULL, spaceDelim, &err);

            if(err == 0 && (comm_node < 1 || comm_node > 127)) {
                err = 1;
                if(comm_node == 0xFF) {
                    respErrorCode = respErrorNoDefaultNodeSet;
                } else {
                    respErrorCode = respErrorUnsupportedNode;
                }
            }

            /* Make CANopen SDO transfer */
            if(err == 0) {
                err = sdoClientUpload(
                        CO->SDOclient[0],
                        comm_node,
                        idx,
                        subidx,
                        dataRx,
                        sizeof(dataRx),
                        &dataRxLen,
                        &SDOabortCode,
                        SDOtimeoutTime,
                        blockTransferEnable);

                if(err != 0){
                    respErrorCode = respErrorInternalState;
                }
            }

            /* output result */
            if(err == 0){
                if(SDOabortCode == 0) {
                    respLen = sprintf(resp, "[%d] ", sequence);

                    if(datatype == NULL || (datatype->length != 0 && datatype->length != dataRxLen)) {
                        respLen += dtpHex(resp+respLen, sizeof(resp)-respLen, (char*)dataRx, dataRxLen);
                    }
                    else {
                        respLen += datatype->dataTypePrint(
                                resp+respLen, sizeof(resp)-respLen, (char*)dataRx, dataRxLen);
                    }
                }
                else{
                    respLen = sprintf(resp, "[%d] ERROR: 0x%08X", sequence, SDOabortCode);
                }
            }
        }

        /* Download SDO command - w[rite] <index> <subindex> <datatype> <value> */
        else if(strcmp(token, "w") == 0 || strcmp(token, "write") == 0) {
            uint16_t idx;
            uint8_t subidx;
            const dataType_t *datatype;
            uint32_t SDOabortCode = 1;

            uint8_t dataTx[CO_COMMAND_SDO_BUFFER_SIZE]; /* SDO transmit buffer */
            uint32_t dataTxLen = 0;  /* Length of data to transmit. */

            token = getTok(NULL, spaceDelim, &err);
            idx = (uint16_t)getU32(token, 0, 0xFFFF, &err);

            token = getTok(NULL, spaceDelim, &err);
            subidx = (uint8_t)getU32(token, 0, 0xFF, &err);

            token = getTok(NULL, spaceDelim, &err);
            datatype = getDataType(token, &err);

            if(err == 0) {
                /* take whole string or single token, depending on datatype. Comment may follow. */
                token = getTok(NULL, (datatype->length == 0) ? "\n\r\f" : spaceDelim, &err);
            }

            if(err == 0) {
                dataTxLen = datatype->dataTypeScan((char*)dataTx, sizeof(dataTx), token);

                /* Length must match and must not be zero. */
                if((datatype->length != 0 && datatype->length != dataTxLen) || dataTxLen == 0) {
                    err = 1;
                }
            }

            lastTok(NULL, spaceDelim, &err);

            if(err == 0 && (comm_node < 1 || comm_node > 127)) {
                err = 1;
                if(comm_node == 0xFF) {
                    respErrorCode = respErrorNoDefaultNodeSet;
                } else {
                    respErrorCode = respErrorUnsupportedNode;
                }
            }

            /* Make CANopen SDO transfer */
            if(err == 0) {
                err = sdoClientDownload(
                        CO->SDOclient[0],
                        comm_node,
                        idx,
                        subidx,
                        dataTx,
                        dataTxLen,
                        &SDOabortCode,
                        SDOtimeoutTime,
                        blockTransferEnable);

                if(err != 0){
                    respErrorCode = respErrorInternalState;
                }
            }

            /* output result */
            if(err == 0){
                if(SDOabortCode == 0) {
                    respLen = sprintf(resp, "[%d] OK", sequence);
                }
                else{
                    respLen = sprintf(resp, "[%d] ERROR: 0x%08X", sequence, SDOabortCode);
                }
            }
        }

        /* NMT start node */
        else if(strcmp(token, "start") == 0) {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_OPERATIONAL, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }

        /* NMT stop node */
        else if(strcmp(token, "stop") == 0) {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_STOPPED, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }

        /* NMT Set node to pre-operational */
        else if(strcmp(token, "preop") == 0 || strcmp(token, "preoperational") == 0) {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_PRE_OPERATIONAL, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }

        /* NMT reset (node or communication) */
        else if(strcmp(token, "reset") == 0) {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                if(strcmp(token, "node") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_NODE, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }
                else if(strcmp(token, "comm") == 0 || strcmp(token, "communication") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_COMMUNICATION, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                else {
                    err = 1;
                }
            }
        }

        /* set command - multiple settings */
        else if(strcmp(token, "set") == 0) {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0) {
                /* sdo_timeout <value> */
                if(strcmp(token, "sdo_timeout") == 0) {
                    uint16_t tmout;

                    token = getTok(NULL, spaceDelim, &err);
                    tmout = (uint16_t)getU32(token, 0, 10000, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        SDOtimeoutTime = tmout;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* sdo_block <value> */
                else if(strcmp(token, "sdo_block") == 0) {
                    uint8_t blk;

                    token = getTok(NULL, spaceDelim, &err);
                    blk = (uint8_t)getU32(token, 0, 1, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        blockTransferEnable = blk;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* node <value> */
                else if(strcmp(token, "node") == 0) {
                    uint16_t node;

                    token = getTok(NULL, spaceDelim, &err);
                    node = (uint16_t)getU32(token, 1, 127, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        comm_node_default = node;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* Unknown command */
                else {
                    err = 1;
                }
            }
        }

        /* Unknown command */
        else {
            respErrorCode = respErrorReqNotSupported;
            err = 1;
        }
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: (err == 0)
|—————Node:( Text: (
|—————Node:binary_expression Text: err == 0
|——————Node:identifier Text: err
|——————Node:== Text: ==
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {

        /* Upload SDO command - 'r[ead] <index> <subindex> <datatype>' */
        if(strcmp(token, "r") == 0 || strcmp(token, "read") == 0) {
            uint16_t idx;
            uint8_t subidx;
            const dataType_t *datatype; /* optional token */
            int errTokDt = 0;
            int errDt = 0;
            uint32_t SDOabortCode = 1;

            uint8_t dataRx[CO_COMMAND_SDO_BUFFER_SIZE]; /* SDO receive buffer */
            uint32_t dataRxLen;  /* Length of received data */

            token = getTok(NULL, spaceDelim, &err);
            idx = (uint16_t)getU32(token, 0, 0xFFFF, &err);

            token = getTok(NULL, spaceDelim, &err);
            subidx = (uint8_t)getU32(token, 0, 0xFF, &err);

            token = getTok(NULL, spaceDelim, &errTokDt);
            datatype = getDataType(token, &errDt);

            /* Datatype must be correct, if present. */
            if(errTokDt == 0 && errDt != 0) {
                err = 1;
            }

            lastTok(NULL, spaceDelim, &err);

            if(err == 0 && (comm_node < 1 || comm_node > 127)) {
                err = 1;
                if(comm_node == 0xFF) {
                    respErrorCode = respErrorNoDefaultNodeSet;
                } else {
                    respErrorCode = respErrorUnsupportedNode;
                }
            }

            /* Make CANopen SDO transfer */
            if(err == 0) {
                err = sdoClientUpload(
                        CO->SDOclient[0],
                        comm_node,
                        idx,
                        subidx,
                        dataRx,
                        sizeof(dataRx),
                        &dataRxLen,
                        &SDOabortCode,
                        SDOtimeoutTime,
                        blockTransferEnable);

                if(err != 0){
                    respErrorCode = respErrorInternalState;
                }
            }

            /* output result */
            if(err == 0){
                if(SDOabortCode == 0) {
                    respLen = sprintf(resp, "[%d] ", sequence);

                    if(datatype == NULL || (datatype->length != 0 && datatype->length != dataRxLen)) {
                        respLen += dtpHex(resp+respLen, sizeof(resp)-respLen, (char*)dataRx, dataRxLen);
                    }
                    else {
                        respLen += datatype->dataTypePrint(
                                resp+respLen, sizeof(resp)-respLen, (char*)dataRx, dataRxLen);
                    }
                }
                else{
                    respLen = sprintf(resp, "[%d] ERROR: 0x%08X", sequence, SDOabortCode);
                }
            }
        }

        /* Download SDO command - w[rite] <index> <subindex> <datatype> <value> */
        else if(strcmp(token, "w") == 0 || strcmp(token, "write") == 0) {
            uint16_t idx;
            uint8_t subidx;
            const dataType_t *datatype;
            uint32_t SDOabortCode = 1;

            uint8_t dataTx[CO_COMMAND_SDO_BUFFER_SIZE]; /* SDO transmit buffer */
            uint32_t dataTxLen = 0;  /* Length of data to transmit. */

            token = getTok(NULL, spaceDelim, &err);
            idx = (uint16_t)getU32(token, 0, 0xFFFF, &err);

            token = getTok(NULL, spaceDelim, &err);
            subidx = (uint8_t)getU32(token, 0, 0xFF, &err);

            token = getTok(NULL, spaceDelim, &err);
            datatype = getDataType(token, &err);

            if(err == 0) {
                /* take whole string or single token, depending on datatype. Comment may follow. */
                token = getTok(NULL, (datatype->length == 0) ? "\n\r\f" : spaceDelim, &err);
            }

            if(err == 0) {
                dataTxLen = datatype->dataTypeScan((char*)dataTx, sizeof(dataTx), token);

                /* Length must match and must not be zero. */
                if((datatype->length != 0 && datatype->length != dataTxLen) || dataTxLen == 0) {
                    err = 1;
                }
            }

            lastTok(NULL, spaceDelim, &err);

            if(err == 0 && (comm_node < 1 || comm_node > 127)) {
                err = 1;
                if(comm_node == 0xFF) {
                    respErrorCode = respErrorNoDefaultNodeSet;
                } else {
                    respErrorCode = respErrorUnsupportedNode;
                }
            }

            /* Make CANopen SDO transfer */
            if(err == 0) {
                err = sdoClientDownload(
                        CO->SDOclient[0],
                        comm_node,
                        idx,
                        subidx,
                        dataTx,
                        dataTxLen,
                        &SDOabortCode,
                        SDOtimeoutTime,
                        blockTransferEnable);

                if(err != 0){
                    respErrorCode = respErrorInternalState;
                }
            }

            /* output result */
            if(err == 0){
                if(SDOabortCode == 0) {
                    respLen = sprintf(resp, "[%d] OK", sequence);
                }
                else{
                    respLen = sprintf(resp, "[%d] ERROR: 0x%08X", sequence, SDOabortCode);
                }
            }
        }

        /* NMT start node */
        else if(strcmp(token, "start") == 0) {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_OPERATIONAL, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }

        /* NMT stop node */
        else if(strcmp(token, "stop") == 0) {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_STOPPED, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }

        /* NMT Set node to pre-operational */
        else if(strcmp(token, "preop") == 0 || strcmp(token, "preoperational") == 0) {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_PRE_OPERATIONAL, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }

        /* NMT reset (node or communication) */
        else if(strcmp(token, "reset") == 0) {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                if(strcmp(token, "node") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_NODE, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }
                else if(strcmp(token, "comm") == 0 || strcmp(token, "communication") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_COMMUNICATION, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                else {
                    err = 1;
                }
            }
        }

        /* set command - multiple settings */
        else if(strcmp(token, "set") == 0) {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0) {
                /* sdo_timeout <value> */
                if(strcmp(token, "sdo_timeout") == 0) {
                    uint16_t tmout;

                    token = getTok(NULL, spaceDelim, &err);
                    tmout = (uint16_t)getU32(token, 0, 10000, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        SDOtimeoutTime = tmout;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* sdo_block <value> */
                else if(strcmp(token, "sdo_block") == 0) {
                    uint8_t blk;

                    token = getTok(NULL, spaceDelim, &err);
                    blk = (uint8_t)getU32(token, 0, 1, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        blockTransferEnable = blk;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* node <value> */
                else if(strcmp(token, "node") == 0) {
                    uint16_t node;

                    token = getTok(NULL, spaceDelim, &err);
                    node = (uint16_t)getU32(token, 1, 127, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        comm_node_default = node;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* Unknown command */
                else {
                    err = 1;
                }
            }
        }

        /* Unknown command */
        else {
            respErrorCode = respErrorReqNotSupported;
            err = 1;
        }
    }
|—————Node:{ Text: {
|—————Node:comment Text: /* Upload SDO command - 'r[ead] <index> <subindex> <datatype>' */
|—————Node:if_statement Text: if(strcmp(token, "r") == 0 || strcmp(token, "read") == 0) {
            uint16_t idx;
            uint8_t subidx;
            const dataType_t *datatype; /* optional token */
            int errTokDt = 0;
            int errDt = 0;
            uint32_t SDOabortCode = 1;

            uint8_t dataRx[CO_COMMAND_SDO_BUFFER_SIZE]; /* SDO receive buffer */
            uint32_t dataRxLen;  /* Length of received data */

            token = getTok(NULL, spaceDelim, &err);
            idx = (uint16_t)getU32(token, 0, 0xFFFF, &err);

            token = getTok(NULL, spaceDelim, &err);
            subidx = (uint8_t)getU32(token, 0, 0xFF, &err);

            token = getTok(NULL, spaceDelim, &errTokDt);
            datatype = getDataType(token, &errDt);

            /* Datatype must be correct, if present. */
            if(errTokDt == 0 && errDt != 0) {
                err = 1;
            }

            lastTok(NULL, spaceDelim, &err);

            if(err == 0 && (comm_node < 1 || comm_node > 127)) {
                err = 1;
                if(comm_node == 0xFF) {
                    respErrorCode = respErrorNoDefaultNodeSet;
                } else {
                    respErrorCode = respErrorUnsupportedNode;
                }
            }

            /* Make CANopen SDO transfer */
            if(err == 0) {
                err = sdoClientUpload(
                        CO->SDOclient[0],
                        comm_node,
                        idx,
                        subidx,
                        dataRx,
                        sizeof(dataRx),
                        &dataRxLen,
                        &SDOabortCode,
                        SDOtimeoutTime,
                        blockTransferEnable);

                if(err != 0){
                    respErrorCode = respErrorInternalState;
                }
            }

            /* output result */
            if(err == 0){
                if(SDOabortCode == 0) {
                    respLen = sprintf(resp, "[%d] ", sequence);

                    if(datatype == NULL || (datatype->length != 0 && datatype->length != dataRxLen)) {
                        respLen += dtpHex(resp+respLen, sizeof(resp)-respLen, (char*)dataRx, dataRxLen);
                    }
                    else {
                        respLen += datatype->dataTypePrint(
                                resp+respLen, sizeof(resp)-respLen, (char*)dataRx, dataRxLen);
                    }
                }
                else{
                    respLen = sprintf(resp, "[%d] ERROR: 0x%08X", sequence, SDOabortCode);
                }
            }
        }

        /* Download SDO command - w[rite] <index> <subindex> <datatype> <value> */
        else if(strcmp(token, "w") == 0 || strcmp(token, "write") == 0) {
            uint16_t idx;
            uint8_t subidx;
            const dataType_t *datatype;
            uint32_t SDOabortCode = 1;

            uint8_t dataTx[CO_COMMAND_SDO_BUFFER_SIZE]; /* SDO transmit buffer */
            uint32_t dataTxLen = 0;  /* Length of data to transmit. */

            token = getTok(NULL, spaceDelim, &err);
            idx = (uint16_t)getU32(token, 0, 0xFFFF, &err);

            token = getTok(NULL, spaceDelim, &err);
            subidx = (uint8_t)getU32(token, 0, 0xFF, &err);

            token = getTok(NULL, spaceDelim, &err);
            datatype = getDataType(token, &err);

            if(err == 0) {
                /* take whole string or single token, depending on datatype. Comment may follow. */
                token = getTok(NULL, (datatype->length == 0) ? "\n\r\f" : spaceDelim, &err);
            }

            if(err == 0) {
                dataTxLen = datatype->dataTypeScan((char*)dataTx, sizeof(dataTx), token);

                /* Length must match and must not be zero. */
                if((datatype->length != 0 && datatype->length != dataTxLen) || dataTxLen == 0) {
                    err = 1;
                }
            }

            lastTok(NULL, spaceDelim, &err);

            if(err == 0 && (comm_node < 1 || comm_node > 127)) {
                err = 1;
                if(comm_node == 0xFF) {
                    respErrorCode = respErrorNoDefaultNodeSet;
                } else {
                    respErrorCode = respErrorUnsupportedNode;
                }
            }

            /* Make CANopen SDO transfer */
            if(err == 0) {
                err = sdoClientDownload(
                        CO->SDOclient[0],
                        comm_node,
                        idx,
                        subidx,
                        dataTx,
                        dataTxLen,
                        &SDOabortCode,
                        SDOtimeoutTime,
                        blockTransferEnable);

                if(err != 0){
                    respErrorCode = respErrorInternalState;
                }
            }

            /* output result */
            if(err == 0){
                if(SDOabortCode == 0) {
                    respLen = sprintf(resp, "[%d] OK", sequence);
                }
                else{
                    respLen = sprintf(resp, "[%d] ERROR: 0x%08X", sequence, SDOabortCode);
                }
            }
        }

        /* NMT start node */
        else if(strcmp(token, "start") == 0) {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_OPERATIONAL, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }

        /* NMT stop node */
        else if(strcmp(token, "stop") == 0) {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_STOPPED, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }

        /* NMT Set node to pre-operational */
        else if(strcmp(token, "preop") == 0 || strcmp(token, "preoperational") == 0) {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_PRE_OPERATIONAL, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }

        /* NMT reset (node or communication) */
        else if(strcmp(token, "reset") == 0) {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                if(strcmp(token, "node") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_NODE, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }
                else if(strcmp(token, "comm") == 0 || strcmp(token, "communication") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_COMMUNICATION, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                else {
                    err = 1;
                }
            }
        }

        /* set command - multiple settings */
        else if(strcmp(token, "set") == 0) {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0) {
                /* sdo_timeout <value> */
                if(strcmp(token, "sdo_timeout") == 0) {
                    uint16_t tmout;

                    token = getTok(NULL, spaceDelim, &err);
                    tmout = (uint16_t)getU32(token, 0, 10000, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        SDOtimeoutTime = tmout;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* sdo_block <value> */
                else if(strcmp(token, "sdo_block") == 0) {
                    uint8_t blk;

                    token = getTok(NULL, spaceDelim, &err);
                    blk = (uint8_t)getU32(token, 0, 1, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        blockTransferEnable = blk;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* node <value> */
                else if(strcmp(token, "node") == 0) {
                    uint16_t node;

                    token = getTok(NULL, spaceDelim, &err);
                    node = (uint16_t)getU32(token, 1, 127, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        comm_node_default = node;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* Unknown command */
                else {
                    err = 1;
                }
            }
        }

        /* Unknown command */
        else {
            respErrorCode = respErrorReqNotSupported;
            err = 1;
        }
|——————Node:if Text: if
|——————Node:parenthesized_expression Text: (strcmp(token, "r") == 0 || strcmp(token, "read") == 0)
|———————Node:( Text: (
|———————Node:binary_expression Text: strcmp(token, "r") == 0 || strcmp(token, "read") == 0
|————————Node:binary_expression Text: strcmp(token, "r") == 0
|—————————Node:call_expression Text: strcmp(token, "r")
|——————————Node:identifier Text: strcmp
|——————————Node:argument_list Text: (token, "r")
|———————————Node:( Text: (
|———————————Node:identifier Text: token
|———————————Node:, Text: ,
|———————————Node:string_literal Text: "r"
|————————————Node:" Text: "
|————————————Node:string_content Text: r
|————————————Node:" Text: "
|———————————Node:) Text: )
|—————————Node:== Text: ==
|—————————Node:number_literal Text: 0
|————————Node:|| Text: ||
|————————Node:binary_expression Text: strcmp(token, "read") == 0
|—————————Node:call_expression Text: strcmp(token, "read")
|——————————Node:identifier Text: strcmp
|——————————Node:argument_list Text: (token, "read")
|———————————Node:( Text: (
|———————————Node:identifier Text: token
|———————————Node:, Text: ,
|———————————Node:string_literal Text: "read"
|————————————Node:" Text: "
|————————————Node:string_content Text: read
|————————————Node:" Text: "
|———————————Node:) Text: )
|—————————Node:== Text: ==
|—————————Node:number_literal Text: 0
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            uint16_t idx;
            uint8_t subidx;
            const dataType_t *datatype; /* optional token */
            int errTokDt = 0;
            int errDt = 0;
            uint32_t SDOabortCode = 1;

            uint8_t dataRx[CO_COMMAND_SDO_BUFFER_SIZE]; /* SDO receive buffer */
            uint32_t dataRxLen;  /* Length of received data */

            token = getTok(NULL, spaceDelim, &err);
            idx = (uint16_t)getU32(token, 0, 0xFFFF, &err);

            token = getTok(NULL, spaceDelim, &err);
            subidx = (uint8_t)getU32(token, 0, 0xFF, &err);

            token = getTok(NULL, spaceDelim, &errTokDt);
            datatype = getDataType(token, &errDt);

            /* Datatype must be correct, if present. */
            if(errTokDt == 0 && errDt != 0) {
                err = 1;
            }

            lastTok(NULL, spaceDelim, &err);

            if(err == 0 && (comm_node < 1 || comm_node > 127)) {
                err = 1;
                if(comm_node == 0xFF) {
                    respErrorCode = respErrorNoDefaultNodeSet;
                } else {
                    respErrorCode = respErrorUnsupportedNode;
                }
            }

            /* Make CANopen SDO transfer */
            if(err == 0) {
                err = sdoClientUpload(
                        CO->SDOclient[0],
                        comm_node,
                        idx,
                        subidx,
                        dataRx,
                        sizeof(dataRx),
                        &dataRxLen,
                        &SDOabortCode,
                        SDOtimeoutTime,
                        blockTransferEnable);

                if(err != 0){
                    respErrorCode = respErrorInternalState;
                }
            }

            /* output result */
            if(err == 0){
                if(SDOabortCode == 0) {
                    respLen = sprintf(resp, "[%d] ", sequence);

                    if(datatype == NULL || (datatype->length != 0 && datatype->length != dataRxLen)) {
                        respLen += dtpHex(resp+respLen, sizeof(resp)-respLen, (char*)dataRx, dataRxLen);
                    }
                    else {
                        respLen += datatype->dataTypePrint(
                                resp+respLen, sizeof(resp)-respLen, (char*)dataRx, dataRxLen);
                    }
                }
                else{
                    respLen = sprintf(resp, "[%d] ERROR: 0x%08X", sequence, SDOabortCode);
                }
            }
        }
|———————Node:{ Text: {
|———————Node:declaration Text: uint16_t idx;
|————————Node:primitive_type Text: uint16_t
|————————Node:identifier Text: idx
|————————Node:; Text: ;
|———————Node:declaration Text: uint8_t subidx;
|————————Node:primitive_type Text: uint8_t
|————————Node:identifier Text: subidx
|————————Node:; Text: ;
|———————Node:declaration Text: const dataType_t *datatype;
|————————Node:type_qualifier Text: const
|—————————Node:const Text: const
|————————Node:type_identifier Text: dataType_t
|————————Node:pointer_declarator Text: *datatype
|—————————Node:* Text: *
|—————————Node:identifier Text: datatype
|————————Node:; Text: ;
|———————Node:comment Text: /* optional token */
|———————Node:declaration Text: int errTokDt = 0;
|————————Node:primitive_type Text: int
|————————Node:init_declarator Text: errTokDt = 0
|—————————Node:identifier Text: errTokDt
|—————————Node:= Text: =
|—————————Node:number_literal Text: 0
|————————Node:; Text: ;
|———————Node:declaration Text: int errDt = 0;
|————————Node:primitive_type Text: int
|————————Node:init_declarator Text: errDt = 0
|—————————Node:identifier Text: errDt
|—————————Node:= Text: =
|—————————Node:number_literal Text: 0
|————————Node:; Text: ;
|———————Node:declaration Text: uint32_t SDOabortCode = 1;
|————————Node:primitive_type Text: uint32_t
|————————Node:init_declarator Text: SDOabortCode = 1
|—————————Node:identifier Text: SDOabortCode
|—————————Node:= Text: =
|—————————Node:number_literal Text: 1
|————————Node:; Text: ;
|———————Node:declaration Text: uint8_t dataRx[CO_COMMAND_SDO_BUFFER_SIZE];
|————————Node:primitive_type Text: uint8_t
|————————Node:array_declarator Text: dataRx[CO_COMMAND_SDO_BUFFER_SIZE]
|—————————Node:identifier Text: dataRx
|—————————Node:[ Text: [
|—————————Node:identifier Text: CO_COMMAND_SDO_BUFFER_SIZE
|—————————Node:] Text: ]
|————————Node:; Text: ;
|———————Node:comment Text: /* SDO receive buffer */
|———————Node:declaration Text: uint32_t dataRxLen;
|————————Node:primitive_type Text: uint32_t
|————————Node:identifier Text: dataRxLen
|————————Node:; Text: ;
|———————Node:comment Text: /* Length of received data */
|———————Node:expression_statement Text: token = getTok(NULL, spaceDelim, &err);
|————————Node:assignment_expression Text: token = getTok(NULL, spaceDelim, &err)
|—————————Node:identifier Text: token
|—————————Node:= Text: =
|—————————Node:call_expression Text: getTok(NULL, spaceDelim, &err)
|——————————Node:identifier Text: getTok
|——————————Node:argument_list Text: (NULL, spaceDelim, &err)
|———————————Node:( Text: (
|———————————Node:null Text: NULL
|————————————Node:NULL Text: NULL
|———————————Node:, Text: ,
|———————————Node:identifier Text: spaceDelim
|———————————Node:, Text: ,
|———————————Node:pointer_expression Text: &err
|————————————Node:& Text: &
|————————————Node:identifier Text: err
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: idx = (uint16_t)getU32(token, 0, 0xFFFF, &err);
|————————Node:assignment_expression Text: idx = (uint16_t)getU32(token, 0, 0xFFFF, &err)
|—————————Node:identifier Text: idx
|—————————Node:= Text: =
|—————————Node:cast_expression Text: (uint16_t)getU32(token, 0, 0xFFFF, &err)
|——————————Node:( Text: (
|——————————Node:type_descriptor Text: uint16_t
|———————————Node:primitive_type Text: uint16_t
|——————————Node:) Text: )
|——————————Node:call_expression Text: getU32(token, 0, 0xFFFF, &err)
|———————————Node:identifier Text: getU32
|———————————Node:argument_list Text: (token, 0, 0xFFFF, &err)
|————————————Node:( Text: (
|————————————Node:identifier Text: token
|————————————Node:, Text: ,
|————————————Node:number_literal Text: 0
|————————————Node:, Text: ,
|————————————Node:number_literal Text: 0xFFFF
|————————————Node:, Text: ,
|————————————Node:pointer_expression Text: &err
|—————————————Node:& Text: &
|—————————————Node:identifier Text: err
|————————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: token = getTok(NULL, spaceDelim, &err);
|————————Node:assignment_expression Text: token = getTok(NULL, spaceDelim, &err)
|—————————Node:identifier Text: token
|—————————Node:= Text: =
|—————————Node:call_expression Text: getTok(NULL, spaceDelim, &err)
|——————————Node:identifier Text: getTok
|——————————Node:argument_list Text: (NULL, spaceDelim, &err)
|———————————Node:( Text: (
|———————————Node:null Text: NULL
|————————————Node:NULL Text: NULL
|———————————Node:, Text: ,
|———————————Node:identifier Text: spaceDelim
|———————————Node:, Text: ,
|———————————Node:pointer_expression Text: &err
|————————————Node:& Text: &
|————————————Node:identifier Text: err
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: subidx = (uint8_t)getU32(token, 0, 0xFF, &err);
|————————Node:assignment_expression Text: subidx = (uint8_t)getU32(token, 0, 0xFF, &err)
|—————————Node:identifier Text: subidx
|—————————Node:= Text: =
|—————————Node:cast_expression Text: (uint8_t)getU32(token, 0, 0xFF, &err)
|——————————Node:( Text: (
|——————————Node:type_descriptor Text: uint8_t
|———————————Node:primitive_type Text: uint8_t
|——————————Node:) Text: )
|——————————Node:call_expression Text: getU32(token, 0, 0xFF, &err)
|———————————Node:identifier Text: getU32
|———————————Node:argument_list Text: (token, 0, 0xFF, &err)
|————————————Node:( Text: (
|————————————Node:identifier Text: token
|————————————Node:, Text: ,
|————————————Node:number_literal Text: 0
|————————————Node:, Text: ,
|————————————Node:number_literal Text: 0xFF
|————————————Node:, Text: ,
|————————————Node:pointer_expression Text: &err
|—————————————Node:& Text: &
|—————————————Node:identifier Text: err
|————————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: token = getTok(NULL, spaceDelim, &errTokDt);
|————————Node:assignment_expression Text: token = getTok(NULL, spaceDelim, &errTokDt)
|—————————Node:identifier Text: token
|—————————Node:= Text: =
|—————————Node:call_expression Text: getTok(NULL, spaceDelim, &errTokDt)
|——————————Node:identifier Text: getTok
|——————————Node:argument_list Text: (NULL, spaceDelim, &errTokDt)
|———————————Node:( Text: (
|———————————Node:null Text: NULL
|————————————Node:NULL Text: NULL
|———————————Node:, Text: ,
|———————————Node:identifier Text: spaceDelim
|———————————Node:, Text: ,
|———————————Node:pointer_expression Text: &errTokDt
|————————————Node:& Text: &
|————————————Node:identifier Text: errTokDt
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: datatype = getDataType(token, &errDt);
|————————Node:assignment_expression Text: datatype = getDataType(token, &errDt)
|—————————Node:identifier Text: datatype
|—————————Node:= Text: =
|—————————Node:call_expression Text: getDataType(token, &errDt)
|——————————Node:identifier Text: getDataType
|——————————Node:argument_list Text: (token, &errDt)
|———————————Node:( Text: (
|———————————Node:identifier Text: token
|———————————Node:, Text: ,
|———————————Node:pointer_expression Text: &errDt
|————————————Node:& Text: &
|————————————Node:identifier Text: errDt
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:comment Text: /* Datatype must be correct, if present. */
|———————Node:if_statement Text: if(errTokDt == 0 && errDt != 0) {
                err = 1;
            }
|————————Node:if Text: if
|————————Node:parenthesized_expression Text: (errTokDt == 0 && errDt != 0)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: errTokDt == 0 && errDt != 0
|——————————Node:binary_expression Text: errTokDt == 0
|———————————Node:identifier Text: errTokDt
|———————————Node:== Text: ==
|———————————Node:number_literal Text: 0
|——————————Node:&& Text: &&
|——————————Node:binary_expression Text: errDt != 0
|———————————Node:identifier Text: errDt
|———————————Node:!= Text: !=
|———————————Node:number_literal Text: 0
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
                err = 1;
            }
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: err = 1;
|——————————Node:assignment_expression Text: err = 1
|———————————Node:identifier Text: err
|———————————Node:= Text: =
|———————————Node:number_literal Text: 1
|——————————Node:; Text: ;
|—————————Node:} Text: }
|———————Node:expression_statement Text: lastTok(NULL, spaceDelim, &err);
|————————Node:call_expression Text: lastTok(NULL, spaceDelim, &err)
|—————————Node:identifier Text: lastTok
|—————————Node:argument_list Text: (NULL, spaceDelim, &err)
|——————————Node:( Text: (
|——————————Node:null Text: NULL
|———————————Node:NULL Text: NULL
|——————————Node:, Text: ,
|——————————Node:identifier Text: spaceDelim
|——————————Node:, Text: ,
|——————————Node:pointer_expression Text: &err
|———————————Node:& Text: &
|———————————Node:identifier Text: err
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:if_statement Text: if(err == 0 && (comm_node < 1 || comm_node > 127)) {
                err = 1;
                if(comm_node == 0xFF) {
                    respErrorCode = respErrorNoDefaultNodeSet;
                } else {
                    respErrorCode = respErrorUnsupportedNode;
                }
            }
|————————Node:if Text: if
|————————Node:parenthesized_expression Text: (err == 0 && (comm_node < 1 || comm_node > 127))
|—————————Node:( Text: (
|—————————Node:binary_expression Text: err == 0 && (comm_node < 1 || comm_node > 127)
|——————————Node:binary_expression Text: err == 0
|———————————Node:identifier Text: err
|———————————Node:== Text: ==
|———————————Node:number_literal Text: 0
|——————————Node:&& Text: &&
|——————————Node:parenthesized_expression Text: (comm_node < 1 || comm_node > 127)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: comm_node < 1 || comm_node > 127
|————————————Node:binary_expression Text: comm_node < 1
|—————————————Node:identifier Text: comm_node
|—————————————Node:< Text: <
|—————————————Node:number_literal Text: 1
|————————————Node:|| Text: ||
|————————————Node:binary_expression Text: comm_node > 127
|—————————————Node:identifier Text: comm_node
|—————————————Node:> Text: >
|—————————————Node:number_literal Text: 127
|———————————Node:) Text: )
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
                err = 1;
                if(comm_node == 0xFF) {
                    respErrorCode = respErrorNoDefaultNodeSet;
                } else {
                    respErrorCode = respErrorUnsupportedNode;
                }
            }
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: err = 1;
|——————————Node:assignment_expression Text: err = 1
|———————————Node:identifier Text: err
|———————————Node:= Text: =
|———————————Node:number_literal Text: 1
|——————————Node:; Text: ;
|—————————Node:if_statement Text: if(comm_node == 0xFF) {
                    respErrorCode = respErrorNoDefaultNodeSet;
                } else {
                    respErrorCode = respErrorUnsupportedNode;
                }
|——————————Node:if Text: if
|——————————Node:parenthesized_expression Text: (comm_node == 0xFF)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: comm_node == 0xFF
|————————————Node:identifier Text: comm_node
|————————————Node:== Text: ==
|————————————Node:number_literal Text: 0xFF
|———————————Node:) Text: )
|——————————Node:compound_statement Text: {
                    respErrorCode = respErrorNoDefaultNodeSet;
                }
|———————————Node:{ Text: {
|———————————Node:expression_statement Text: respErrorCode = respErrorNoDefaultNodeSet;
|————————————Node:assignment_expression Text: respErrorCode = respErrorNoDefaultNodeSet
|—————————————Node:identifier Text: respErrorCode
|—————————————Node:= Text: =
|—————————————Node:identifier Text: respErrorNoDefaultNodeSet
|————————————Node:; Text: ;
|———————————Node:} Text: }
|——————————Node:else_clause Text: else {
                    respErrorCode = respErrorUnsupportedNode;
                }
|———————————Node:else Text: else
|———————————Node:compound_statement Text: {
                    respErrorCode = respErrorUnsupportedNode;
                }
|————————————Node:{ Text: {
|————————————Node:expression_statement Text: respErrorCode = respErrorUnsupportedNode;
|—————————————Node:assignment_expression Text: respErrorCode = respErrorUnsupportedNode
|——————————————Node:identifier Text: respErrorCode
|——————————————Node:= Text: =
|——————————————Node:identifier Text: respErrorUnsupportedNode
|—————————————Node:; Text: ;
|————————————Node:} Text: }
|—————————Node:} Text: }
|———————Node:comment Text: /* Make CANopen SDO transfer */
|———————Node:if_statement Text: if(err == 0) {
                err = sdoClientUpload(
                        CO->SDOclient[0],
                        comm_node,
                        idx,
                        subidx,
                        dataRx,
                        sizeof(dataRx),
                        &dataRxLen,
                        &SDOabortCode,
                        SDOtimeoutTime,
                        blockTransferEnable);

                if(err != 0){
                    respErrorCode = respErrorInternalState;
                }
            }
|————————Node:if Text: if
|————————Node:parenthesized_expression Text: (err == 0)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: err == 0
|——————————Node:identifier Text: err
|——————————Node:== Text: ==
|——————————Node:number_literal Text: 0
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
                err = sdoClientUpload(
                        CO->SDOclient[0],
                        comm_node,
                        idx,
                        subidx,
                        dataRx,
                        sizeof(dataRx),
                        &dataRxLen,
                        &SDOabortCode,
                        SDOtimeoutTime,
                        blockTransferEnable);

                if(err != 0){
                    respErrorCode = respErrorInternalState;
                }
            }
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: err = sdoClientUpload(
                        CO->SDOclient[0],
                        comm_node,
                        idx,
                        subidx,
                        dataRx,
                        sizeof(dataRx),
                        &dataRxLen,
                        &SDOabortCode,
                        SDOtimeoutTime,
                        blockTransferEnable);
|——————————Node:assignment_expression Text: err = sdoClientUpload(
                        CO->SDOclient[0],
                        comm_node,
                        idx,
                        subidx,
                        dataRx,
                        sizeof(dataRx),
                        &dataRxLen,
                        &SDOabortCode,
                        SDOtimeoutTime,
                        blockTransferEnable)
|———————————Node:identifier Text: err
|———————————Node:= Text: =
|———————————Node:call_expression Text: sdoClientUpload(
                        CO->SDOclient[0],
                        comm_node,
                        idx,
                        subidx,
                        dataRx,
                        sizeof(dataRx),
                        &dataRxLen,
                        &SDOabortCode,
                        SDOtimeoutTime,
                        blockTransferEnable)
|————————————Node:identifier Text: sdoClientUpload
|————————————Node:argument_list Text: (
                        CO->SDOclient[0],
                        comm_node,
                        idx,
                        subidx,
                        dataRx,
                        sizeof(dataRx),
                        &dataRxLen,
                        &SDOabortCode,
                        SDOtimeoutTime,
                        blockTransferEnable)
|—————————————Node:( Text: (
|—————————————Node:subscript_expression Text: CO->SDOclient[0]
|——————————————Node:field_expression Text: CO->SDOclient
|———————————————Node:identifier Text: CO
|———————————————Node:-> Text: ->
|———————————————Node:field_identifier Text: SDOclient
|——————————————Node:[ Text: [
|——————————————Node:number_literal Text: 0
|——————————————Node:] Text: ]
|—————————————Node:, Text: ,
|—————————————Node:identifier Text: comm_node
|—————————————Node:, Text: ,
|—————————————Node:identifier Text: idx
|—————————————Node:, Text: ,
|—————————————Node:identifier Text: subidx
|—————————————Node:, Text: ,
|—————————————Node:identifier Text: dataRx
|—————————————Node:, Text: ,
|—————————————Node:sizeof_expression Text: sizeof(dataRx)
|——————————————Node:sizeof Text: sizeof
|——————————————Node:parenthesized_expression Text: (dataRx)
|———————————————Node:( Text: (
|———————————————Node:identifier Text: dataRx
|———————————————Node:) Text: )
|—————————————Node:, Text: ,
|—————————————Node:pointer_expression Text: &dataRxLen
|——————————————Node:& Text: &
|——————————————Node:identifier Text: dataRxLen
|—————————————Node:, Text: ,
|—————————————Node:pointer_expression Text: &SDOabortCode
|——————————————Node:& Text: &
|——————————————Node:identifier Text: SDOabortCode
|—————————————Node:, Text: ,
|—————————————Node:identifier Text: SDOtimeoutTime
|—————————————Node:, Text: ,
|—————————————Node:identifier Text: blockTransferEnable
|—————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:if_statement Text: if(err != 0){
                    respErrorCode = respErrorInternalState;
                }
|——————————Node:if Text: if
|——————————Node:parenthesized_expression Text: (err != 0)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: err != 0
|————————————Node:identifier Text: err
|————————————Node:!= Text: !=
|————————————Node:number_literal Text: 0
|———————————Node:) Text: )
|——————————Node:compound_statement Text: {
                    respErrorCode = respErrorInternalState;
                }
|———————————Node:{ Text: {
|———————————Node:expression_statement Text: respErrorCode = respErrorInternalState;
|————————————Node:assignment_expression Text: respErrorCode = respErrorInternalState
|—————————————Node:identifier Text: respErrorCode
|—————————————Node:= Text: =
|—————————————Node:identifier Text: respErrorInternalState
|————————————Node:; Text: ;
|———————————Node:} Text: }
|—————————Node:} Text: }
|———————Node:comment Text: /* output result */
|———————Node:if_statement Text: if(err == 0){
                if(SDOabortCode == 0) {
                    respLen = sprintf(resp, "[%d] ", sequence);

                    if(datatype == NULL || (datatype->length != 0 && datatype->length != dataRxLen)) {
                        respLen += dtpHex(resp+respLen, sizeof(resp)-respLen, (char*)dataRx, dataRxLen);
                    }
                    else {
                        respLen += datatype->dataTypePrint(
                                resp+respLen, sizeof(resp)-respLen, (char*)dataRx, dataRxLen);
                    }
                }
                else{
                    respLen = sprintf(resp, "[%d] ERROR: 0x%08X", sequence, SDOabortCode);
                }
            }
|————————Node:if Text: if
|————————Node:parenthesized_expression Text: (err == 0)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: err == 0
|——————————Node:identifier Text: err
|——————————Node:== Text: ==
|——————————Node:number_literal Text: 0
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
                if(SDOabortCode == 0) {
                    respLen = sprintf(resp, "[%d] ", sequence);

                    if(datatype == NULL || (datatype->length != 0 && datatype->length != dataRxLen)) {
                        respLen += dtpHex(resp+respLen, sizeof(resp)-respLen, (char*)dataRx, dataRxLen);
                    }
                    else {
                        respLen += datatype->dataTypePrint(
                                resp+respLen, sizeof(resp)-respLen, (char*)dataRx, dataRxLen);
                    }
                }
                else{
                    respLen = sprintf(resp, "[%d] ERROR: 0x%08X", sequence, SDOabortCode);
                }
            }
|—————————Node:{ Text: {
|—————————Node:if_statement Text: if(SDOabortCode == 0) {
                    respLen = sprintf(resp, "[%d] ", sequence);

                    if(datatype == NULL || (datatype->length != 0 && datatype->length != dataRxLen)) {
                        respLen += dtpHex(resp+respLen, sizeof(resp)-respLen, (char*)dataRx, dataRxLen);
                    }
                    else {
                        respLen += datatype->dataTypePrint(
                                resp+respLen, sizeof(resp)-respLen, (char*)dataRx, dataRxLen);
                    }
                }
                else{
                    respLen = sprintf(resp, "[%d] ERROR: 0x%08X", sequence, SDOabortCode);
                }
|——————————Node:if Text: if
|——————————Node:parenthesized_expression Text: (SDOabortCode == 0)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: SDOabortCode == 0
|————————————Node:identifier Text: SDOabortCode
|————————————Node:== Text: ==
|————————————Node:number_literal Text: 0
|———————————Node:) Text: )
|——————————Node:compound_statement Text: {
                    respLen = sprintf(resp, "[%d] ", sequence);

                    if(datatype == NULL || (datatype->length != 0 && datatype->length != dataRxLen)) {
                        respLen += dtpHex(resp+respLen, sizeof(resp)-respLen, (char*)dataRx, dataRxLen);
                    }
                    else {
                        respLen += datatype->dataTypePrint(
                                resp+respLen, sizeof(resp)-respLen, (char*)dataRx, dataRxLen);
                    }
                }
|———————————Node:{ Text: {
|———————————Node:expression_statement Text: respLen = sprintf(resp, "[%d] ", sequence);
|————————————Node:assignment_expression Text: respLen = sprintf(resp, "[%d] ", sequence)
|—————————————Node:identifier Text: respLen
|—————————————Node:= Text: =
|—————————————Node:call_expression Text: sprintf(resp, "[%d] ", sequence)
|——————————————Node:identifier Text: sprintf
|——————————————Node:argument_list Text: (resp, "[%d] ", sequence)
|———————————————Node:( Text: (
|———————————————Node:identifier Text: resp
|———————————————Node:, Text: ,
|———————————————Node:string_literal Text: "[%d] "
|————————————————Node:" Text: "
|————————————————Node:string_content Text: [%d] 
|————————————————Node:" Text: "
|———————————————Node:, Text: ,
|———————————————Node:identifier Text: sequence
|———————————————Node:) Text: )
|————————————Node:; Text: ;
|———————————Node:if_statement Text: if(datatype == NULL || (datatype->length != 0 && datatype->length != dataRxLen)) {
                        respLen += dtpHex(resp+respLen, sizeof(resp)-respLen, (char*)dataRx, dataRxLen);
                    }
                    else {
                        respLen += datatype->dataTypePrint(
                                resp+respLen, sizeof(resp)-respLen, (char*)dataRx, dataRxLen);
                    }
|————————————Node:if Text: if
|————————————Node:parenthesized_expression Text: (datatype == NULL || (datatype->length != 0 && datatype->length != dataRxLen))
|—————————————Node:( Text: (
|—————————————Node:binary_expression Text: datatype == NULL || (datatype->length != 0 && datatype->length != dataRxLen)
|——————————————Node:binary_expression Text: datatype == NULL
|———————————————Node:identifier Text: datatype
|———————————————Node:== Text: ==
|———————————————Node:null Text: NULL
|————————————————Node:NULL Text: NULL
|——————————————Node:|| Text: ||
|——————————————Node:parenthesized_expression Text: (datatype->length != 0 && datatype->length != dataRxLen)
|———————————————Node:( Text: (
|———————————————Node:binary_expression Text: datatype->length != 0 && datatype->length != dataRxLen
|————————————————Node:binary_expression Text: datatype->length != 0
|—————————————————Node:field_expression Text: datatype->length
|——————————————————Node:identifier Text: datatype
|——————————————————Node:-> Text: ->
|——————————————————Node:field_identifier Text: length
|—————————————————Node:!= Text: !=
|—————————————————Node:number_literal Text: 0
|————————————————Node:&& Text: &&
|————————————————Node:binary_expression Text: datatype->length != dataRxLen
|—————————————————Node:field_expression Text: datatype->length
|——————————————————Node:identifier Text: datatype
|——————————————————Node:-> Text: ->
|——————————————————Node:field_identifier Text: length
|—————————————————Node:!= Text: !=
|—————————————————Node:identifier Text: dataRxLen
|———————————————Node:) Text: )
|—————————————Node:) Text: )
|————————————Node:compound_statement Text: {
                        respLen += dtpHex(resp+respLen, sizeof(resp)-respLen, (char*)dataRx, dataRxLen);
                    }
|—————————————Node:{ Text: {
|—————————————Node:expression_statement Text: respLen += dtpHex(resp+respLen, sizeof(resp)-respLen, (char*)dataRx, dataRxLen);
|——————————————Node:assignment_expression Text: respLen += dtpHex(resp+respLen, sizeof(resp)-respLen, (char*)dataRx, dataRxLen)
|———————————————Node:identifier Text: respLen
|———————————————Node:+= Text: +=
|———————————————Node:call_expression Text: dtpHex(resp+respLen, sizeof(resp)-respLen, (char*)dataRx, dataRxLen)
|————————————————Node:identifier Text: dtpHex
|————————————————Node:argument_list Text: (resp+respLen, sizeof(resp)-respLen, (char*)dataRx, dataRxLen)
|—————————————————Node:( Text: (
|—————————————————Node:binary_expression Text: resp+respLen
|——————————————————Node:identifier Text: resp
|——————————————————Node:+ Text: +
|——————————————————Node:identifier Text: respLen
|—————————————————Node:, Text: ,
|—————————————————Node:binary_expression Text: sizeof(resp)-respLen
|——————————————————Node:sizeof_expression Text: sizeof(resp)
|———————————————————Node:sizeof Text: sizeof
|———————————————————Node:parenthesized_expression Text: (resp)
|————————————————————Node:( Text: (
|————————————————————Node:identifier Text: resp
|————————————————————Node:) Text: )
|——————————————————Node:- Text: -
|——————————————————Node:identifier Text: respLen
|—————————————————Node:, Text: ,
|—————————————————Node:cast_expression Text: (char*)dataRx
|——————————————————Node:( Text: (
|——————————————————Node:type_descriptor Text: char*
|———————————————————Node:primitive_type Text: char
|———————————————————Node:abstract_pointer_declarator Text: *
|————————————————————Node:* Text: *
|——————————————————Node:) Text: )
|——————————————————Node:identifier Text: dataRx
|—————————————————Node:, Text: ,
|—————————————————Node:identifier Text: dataRxLen
|—————————————————Node:) Text: )
|——————————————Node:; Text: ;
|—————————————Node:} Text: }
|————————————Node:else_clause Text: else {
                        respLen += datatype->dataTypePrint(
                                resp+respLen, sizeof(resp)-respLen, (char*)dataRx, dataRxLen);
                    }
|—————————————Node:else Text: else
|—————————————Node:compound_statement Text: {
                        respLen += datatype->dataTypePrint(
                                resp+respLen, sizeof(resp)-respLen, (char*)dataRx, dataRxLen);
                    }
|——————————————Node:{ Text: {
|——————————————Node:expression_statement Text: respLen += datatype->dataTypePrint(
                                resp+respLen, sizeof(resp)-respLen, (char*)dataRx, dataRxLen);
|———————————————Node:assignment_expression Text: respLen += datatype->dataTypePrint(
                                resp+respLen, sizeof(resp)-respLen, (char*)dataRx, dataRxLen)
|————————————————Node:identifier Text: respLen
|————————————————Node:+= Text: +=
|————————————————Node:call_expression Text: datatype->dataTypePrint(
                                resp+respLen, sizeof(resp)-respLen, (char*)dataRx, dataRxLen)
|—————————————————Node:field_expression Text: datatype->dataTypePrint
|——————————————————Node:identifier Text: datatype
|——————————————————Node:-> Text: ->
|——————————————————Node:field_identifier Text: dataTypePrint
|—————————————————Node:argument_list Text: (
                                resp+respLen, sizeof(resp)-respLen, (char*)dataRx, dataRxLen)
|——————————————————Node:( Text: (
|——————————————————Node:binary_expression Text: resp+respLen
|———————————————————Node:identifier Text: resp
|———————————————————Node:+ Text: +
|———————————————————Node:identifier Text: respLen
|——————————————————Node:, Text: ,
|——————————————————Node:binary_expression Text: sizeof(resp)-respLen
|———————————————————Node:sizeof_expression Text: sizeof(resp)
|————————————————————Node:sizeof Text: sizeof
|————————————————————Node:parenthesized_expression Text: (resp)
|—————————————————————Node:( Text: (
|—————————————————————Node:identifier Text: resp
|—————————————————————Node:) Text: )
|———————————————————Node:- Text: -
|———————————————————Node:identifier Text: respLen
|——————————————————Node:, Text: ,
|——————————————————Node:cast_expression Text: (char*)dataRx
|———————————————————Node:( Text: (
|———————————————————Node:type_descriptor Text: char*
|————————————————————Node:primitive_type Text: char
|————————————————————Node:abstract_pointer_declarator Text: *
|—————————————————————Node:* Text: *
|———————————————————Node:) Text: )
|———————————————————Node:identifier Text: dataRx
|——————————————————Node:, Text: ,
|——————————————————Node:identifier Text: dataRxLen
|——————————————————Node:) Text: )
|———————————————Node:; Text: ;
|——————————————Node:} Text: }
|———————————Node:} Text: }
|——————————Node:else_clause Text: else{
                    respLen = sprintf(resp, "[%d] ERROR: 0x%08X", sequence, SDOabortCode);
                }
|———————————Node:else Text: else
|———————————Node:compound_statement Text: {
                    respLen = sprintf(resp, "[%d] ERROR: 0x%08X", sequence, SDOabortCode);
                }
|————————————Node:{ Text: {
|————————————Node:expression_statement Text: respLen = sprintf(resp, "[%d] ERROR: 0x%08X", sequence, SDOabortCode);
|—————————————Node:assignment_expression Text: respLen = sprintf(resp, "[%d] ERROR: 0x%08X", sequence, SDOabortCode)
|——————————————Node:identifier Text: respLen
|——————————————Node:= Text: =
|——————————————Node:call_expression Text: sprintf(resp, "[%d] ERROR: 0x%08X", sequence, SDOabortCode)
|———————————————Node:identifier Text: sprintf
|———————————————Node:argument_list Text: (resp, "[%d] ERROR: 0x%08X", sequence, SDOabortCode)
|————————————————Node:( Text: (
|————————————————Node:identifier Text: resp
|————————————————Node:, Text: ,
|————————————————Node:string_literal Text: "[%d] ERROR: 0x%08X"
|—————————————————Node:" Text: "
|—————————————————Node:string_content Text: [%d] ERROR: 0x%08X
|—————————————————Node:" Text: "
|————————————————Node:, Text: ,
|————————————————Node:identifier Text: sequence
|————————————————Node:, Text: ,
|————————————————Node:identifier Text: SDOabortCode
|————————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:} Text: }
|—————————Node:} Text: }
|———————Node:} Text: }
|——————Node:comment Text: /* Download SDO command - w[rite] <index> <subindex> <datatype> <value> */
|——————Node:else_clause Text: else if(strcmp(token, "w") == 0 || strcmp(token, "write") == 0) {
            uint16_t idx;
            uint8_t subidx;
            const dataType_t *datatype;
            uint32_t SDOabortCode = 1;

            uint8_t dataTx[CO_COMMAND_SDO_BUFFER_SIZE]; /* SDO transmit buffer */
            uint32_t dataTxLen = 0;  /* Length of data to transmit. */

            token = getTok(NULL, spaceDelim, &err);
            idx = (uint16_t)getU32(token, 0, 0xFFFF, &err);

            token = getTok(NULL, spaceDelim, &err);
            subidx = (uint8_t)getU32(token, 0, 0xFF, &err);

            token = getTok(NULL, spaceDelim, &err);
            datatype = getDataType(token, &err);

            if(err == 0) {
                /* take whole string or single token, depending on datatype. Comment may follow. */
                token = getTok(NULL, (datatype->length == 0) ? "\n\r\f" : spaceDelim, &err);
            }

            if(err == 0) {
                dataTxLen = datatype->dataTypeScan((char*)dataTx, sizeof(dataTx), token);

                /* Length must match and must not be zero. */
                if((datatype->length != 0 && datatype->length != dataTxLen) || dataTxLen == 0) {
                    err = 1;
                }
            }

            lastTok(NULL, spaceDelim, &err);

            if(err == 0 && (comm_node < 1 || comm_node > 127)) {
                err = 1;
                if(comm_node == 0xFF) {
                    respErrorCode = respErrorNoDefaultNodeSet;
                } else {
                    respErrorCode = respErrorUnsupportedNode;
                }
            }

            /* Make CANopen SDO transfer */
            if(err == 0) {
                err = sdoClientDownload(
                        CO->SDOclient[0],
                        comm_node,
                        idx,
                        subidx,
                        dataTx,
                        dataTxLen,
                        &SDOabortCode,
                        SDOtimeoutTime,
                        blockTransferEnable);

                if(err != 0){
                    respErrorCode = respErrorInternalState;
                }
            }

            /* output result */
            if(err == 0){
                if(SDOabortCode == 0) {
                    respLen = sprintf(resp, "[%d] OK", sequence);
                }
                else{
                    respLen = sprintf(resp, "[%d] ERROR: 0x%08X", sequence, SDOabortCode);
                }
            }
        }

        /* NMT start node */
        else if(strcmp(token, "start") == 0) {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_OPERATIONAL, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }

        /* NMT stop node */
        else if(strcmp(token, "stop") == 0) {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_STOPPED, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }

        /* NMT Set node to pre-operational */
        else if(strcmp(token, "preop") == 0 || strcmp(token, "preoperational") == 0) {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_PRE_OPERATIONAL, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }

        /* NMT reset (node or communication) */
        else if(strcmp(token, "reset") == 0) {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                if(strcmp(token, "node") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_NODE, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }
                else if(strcmp(token, "comm") == 0 || strcmp(token, "communication") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_COMMUNICATION, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                else {
                    err = 1;
                }
            }
        }

        /* set command - multiple settings */
        else if(strcmp(token, "set") == 0) {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0) {
                /* sdo_timeout <value> */
                if(strcmp(token, "sdo_timeout") == 0) {
                    uint16_t tmout;

                    token = getTok(NULL, spaceDelim, &err);
                    tmout = (uint16_t)getU32(token, 0, 10000, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        SDOtimeoutTime = tmout;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* sdo_block <value> */
                else if(strcmp(token, "sdo_block") == 0) {
                    uint8_t blk;

                    token = getTok(NULL, spaceDelim, &err);
                    blk = (uint8_t)getU32(token, 0, 1, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        blockTransferEnable = blk;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* node <value> */
                else if(strcmp(token, "node") == 0) {
                    uint16_t node;

                    token = getTok(NULL, spaceDelim, &err);
                    node = (uint16_t)getU32(token, 1, 127, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        comm_node_default = node;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* Unknown command */
                else {
                    err = 1;
                }
            }
        }

        /* Unknown command */
        else {
            respErrorCode = respErrorReqNotSupported;
            err = 1;
        }
|———————Node:else Text: else
|———————Node:if_statement Text: if(strcmp(token, "w") == 0 || strcmp(token, "write") == 0) {
            uint16_t idx;
            uint8_t subidx;
            const dataType_t *datatype;
            uint32_t SDOabortCode = 1;

            uint8_t dataTx[CO_COMMAND_SDO_BUFFER_SIZE]; /* SDO transmit buffer */
            uint32_t dataTxLen = 0;  /* Length of data to transmit. */

            token = getTok(NULL, spaceDelim, &err);
            idx = (uint16_t)getU32(token, 0, 0xFFFF, &err);

            token = getTok(NULL, spaceDelim, &err);
            subidx = (uint8_t)getU32(token, 0, 0xFF, &err);

            token = getTok(NULL, spaceDelim, &err);
            datatype = getDataType(token, &err);

            if(err == 0) {
                /* take whole string or single token, depending on datatype. Comment may follow. */
                token = getTok(NULL, (datatype->length == 0) ? "\n\r\f" : spaceDelim, &err);
            }

            if(err == 0) {
                dataTxLen = datatype->dataTypeScan((char*)dataTx, sizeof(dataTx), token);

                /* Length must match and must not be zero. */
                if((datatype->length != 0 && datatype->length != dataTxLen) || dataTxLen == 0) {
                    err = 1;
                }
            }

            lastTok(NULL, spaceDelim, &err);

            if(err == 0 && (comm_node < 1 || comm_node > 127)) {
                err = 1;
                if(comm_node == 0xFF) {
                    respErrorCode = respErrorNoDefaultNodeSet;
                } else {
                    respErrorCode = respErrorUnsupportedNode;
                }
            }

            /* Make CANopen SDO transfer */
            if(err == 0) {
                err = sdoClientDownload(
                        CO->SDOclient[0],
                        comm_node,
                        idx,
                        subidx,
                        dataTx,
                        dataTxLen,
                        &SDOabortCode,
                        SDOtimeoutTime,
                        blockTransferEnable);

                if(err != 0){
                    respErrorCode = respErrorInternalState;
                }
            }

            /* output result */
            if(err == 0){
                if(SDOabortCode == 0) {
                    respLen = sprintf(resp, "[%d] OK", sequence);
                }
                else{
                    respLen = sprintf(resp, "[%d] ERROR: 0x%08X", sequence, SDOabortCode);
                }
            }
        }

        /* NMT start node */
        else if(strcmp(token, "start") == 0) {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_OPERATIONAL, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }

        /* NMT stop node */
        else if(strcmp(token, "stop") == 0) {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_STOPPED, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }

        /* NMT Set node to pre-operational */
        else if(strcmp(token, "preop") == 0 || strcmp(token, "preoperational") == 0) {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_PRE_OPERATIONAL, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }

        /* NMT reset (node or communication) */
        else if(strcmp(token, "reset") == 0) {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                if(strcmp(token, "node") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_NODE, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }
                else if(strcmp(token, "comm") == 0 || strcmp(token, "communication") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_COMMUNICATION, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                else {
                    err = 1;
                }
            }
        }

        /* set command - multiple settings */
        else if(strcmp(token, "set") == 0) {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0) {
                /* sdo_timeout <value> */
                if(strcmp(token, "sdo_timeout") == 0) {
                    uint16_t tmout;

                    token = getTok(NULL, spaceDelim, &err);
                    tmout = (uint16_t)getU32(token, 0, 10000, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        SDOtimeoutTime = tmout;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* sdo_block <value> */
                else if(strcmp(token, "sdo_block") == 0) {
                    uint8_t blk;

                    token = getTok(NULL, spaceDelim, &err);
                    blk = (uint8_t)getU32(token, 0, 1, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        blockTransferEnable = blk;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* node <value> */
                else if(strcmp(token, "node") == 0) {
                    uint16_t node;

                    token = getTok(NULL, spaceDelim, &err);
                    node = (uint16_t)getU32(token, 1, 127, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        comm_node_default = node;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* Unknown command */
                else {
                    err = 1;
                }
            }
        }

        /* Unknown command */
        else {
            respErrorCode = respErrorReqNotSupported;
            err = 1;
        }
|————————Node:if Text: if
|————————Node:parenthesized_expression Text: (strcmp(token, "w") == 0 || strcmp(token, "write") == 0)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: strcmp(token, "w") == 0 || strcmp(token, "write") == 0
|——————————Node:binary_expression Text: strcmp(token, "w") == 0
|———————————Node:call_expression Text: strcmp(token, "w")
|————————————Node:identifier Text: strcmp
|————————————Node:argument_list Text: (token, "w")
|—————————————Node:( Text: (
|—————————————Node:identifier Text: token
|—————————————Node:, Text: ,
|—————————————Node:string_literal Text: "w"
|——————————————Node:" Text: "
|——————————————Node:string_content Text: w
|——————————————Node:" Text: "
|—————————————Node:) Text: )
|———————————Node:== Text: ==
|———————————Node:number_literal Text: 0
|——————————Node:|| Text: ||
|——————————Node:binary_expression Text: strcmp(token, "write") == 0
|———————————Node:call_expression Text: strcmp(token, "write")
|————————————Node:identifier Text: strcmp
|————————————Node:argument_list Text: (token, "write")
|—————————————Node:( Text: (
|—————————————Node:identifier Text: token
|—————————————Node:, Text: ,
|—————————————Node:string_literal Text: "write"
|——————————————Node:" Text: "
|——————————————Node:string_content Text: write
|——————————————Node:" Text: "
|—————————————Node:) Text: )
|———————————Node:== Text: ==
|———————————Node:number_literal Text: 0
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
            uint16_t idx;
            uint8_t subidx;
            const dataType_t *datatype;
            uint32_t SDOabortCode = 1;

            uint8_t dataTx[CO_COMMAND_SDO_BUFFER_SIZE]; /* SDO transmit buffer */
            uint32_t dataTxLen = 0;  /* Length of data to transmit. */

            token = getTok(NULL, spaceDelim, &err);
            idx = (uint16_t)getU32(token, 0, 0xFFFF, &err);

            token = getTok(NULL, spaceDelim, &err);
            subidx = (uint8_t)getU32(token, 0, 0xFF, &err);

            token = getTok(NULL, spaceDelim, &err);
            datatype = getDataType(token, &err);

            if(err == 0) {
                /* take whole string or single token, depending on datatype. Comment may follow. */
                token = getTok(NULL, (datatype->length == 0) ? "\n\r\f" : spaceDelim, &err);
            }

            if(err == 0) {
                dataTxLen = datatype->dataTypeScan((char*)dataTx, sizeof(dataTx), token);

                /* Length must match and must not be zero. */
                if((datatype->length != 0 && datatype->length != dataTxLen) || dataTxLen == 0) {
                    err = 1;
                }
            }

            lastTok(NULL, spaceDelim, &err);

            if(err == 0 && (comm_node < 1 || comm_node > 127)) {
                err = 1;
                if(comm_node == 0xFF) {
                    respErrorCode = respErrorNoDefaultNodeSet;
                } else {
                    respErrorCode = respErrorUnsupportedNode;
                }
            }

            /* Make CANopen SDO transfer */
            if(err == 0) {
                err = sdoClientDownload(
                        CO->SDOclient[0],
                        comm_node,
                        idx,
                        subidx,
                        dataTx,
                        dataTxLen,
                        &SDOabortCode,
                        SDOtimeoutTime,
                        blockTransferEnable);

                if(err != 0){
                    respErrorCode = respErrorInternalState;
                }
            }

            /* output result */
            if(err == 0){
                if(SDOabortCode == 0) {
                    respLen = sprintf(resp, "[%d] OK", sequence);
                }
                else{
                    respLen = sprintf(resp, "[%d] ERROR: 0x%08X", sequence, SDOabortCode);
                }
            }
        }
|—————————Node:{ Text: {
|—————————Node:declaration Text: uint16_t idx;
|——————————Node:primitive_type Text: uint16_t
|——————————Node:identifier Text: idx
|——————————Node:; Text: ;
|—————————Node:declaration Text: uint8_t subidx;
|——————————Node:primitive_type Text: uint8_t
|——————————Node:identifier Text: subidx
|——————————Node:; Text: ;
|—————————Node:declaration Text: const dataType_t *datatype;
|——————————Node:type_qualifier Text: const
|———————————Node:const Text: const
|——————————Node:type_identifier Text: dataType_t
|——————————Node:pointer_declarator Text: *datatype
|———————————Node:* Text: *
|———————————Node:identifier Text: datatype
|——————————Node:; Text: ;
|—————————Node:declaration Text: uint32_t SDOabortCode = 1;
|——————————Node:primitive_type Text: uint32_t
|——————————Node:init_declarator Text: SDOabortCode = 1
|———————————Node:identifier Text: SDOabortCode
|———————————Node:= Text: =
|———————————Node:number_literal Text: 1
|——————————Node:; Text: ;
|—————————Node:declaration Text: uint8_t dataTx[CO_COMMAND_SDO_BUFFER_SIZE];
|——————————Node:primitive_type Text: uint8_t
|——————————Node:array_declarator Text: dataTx[CO_COMMAND_SDO_BUFFER_SIZE]
|———————————Node:identifier Text: dataTx
|———————————Node:[ Text: [
|———————————Node:identifier Text: CO_COMMAND_SDO_BUFFER_SIZE
|———————————Node:] Text: ]
|——————————Node:; Text: ;
|—————————Node:comment Text: /* SDO transmit buffer */
|—————————Node:declaration Text: uint32_t dataTxLen = 0;
|——————————Node:primitive_type Text: uint32_t
|——————————Node:init_declarator Text: dataTxLen = 0
|———————————Node:identifier Text: dataTxLen
|———————————Node:= Text: =
|———————————Node:number_literal Text: 0
|——————————Node:; Text: ;
|—————————Node:comment Text: /* Length of data to transmit. */
|—————————Node:expression_statement Text: token = getTok(NULL, spaceDelim, &err);
|——————————Node:assignment_expression Text: token = getTok(NULL, spaceDelim, &err)
|———————————Node:identifier Text: token
|———————————Node:= Text: =
|———————————Node:call_expression Text: getTok(NULL, spaceDelim, &err)
|————————————Node:identifier Text: getTok
|————————————Node:argument_list Text: (NULL, spaceDelim, &err)
|—————————————Node:( Text: (
|—————————————Node:null Text: NULL
|——————————————Node:NULL Text: NULL
|—————————————Node:, Text: ,
|—————————————Node:identifier Text: spaceDelim
|—————————————Node:, Text: ,
|—————————————Node:pointer_expression Text: &err
|——————————————Node:& Text: &
|——————————————Node:identifier Text: err
|—————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:expression_statement Text: idx = (uint16_t)getU32(token, 0, 0xFFFF, &err);
|——————————Node:assignment_expression Text: idx = (uint16_t)getU32(token, 0, 0xFFFF, &err)
|———————————Node:identifier Text: idx
|———————————Node:= Text: =
|———————————Node:cast_expression Text: (uint16_t)getU32(token, 0, 0xFFFF, &err)
|————————————Node:( Text: (
|————————————Node:type_descriptor Text: uint16_t
|—————————————Node:primitive_type Text: uint16_t
|————————————Node:) Text: )
|————————————Node:call_expression Text: getU32(token, 0, 0xFFFF, &err)
|—————————————Node:identifier Text: getU32
|—————————————Node:argument_list Text: (token, 0, 0xFFFF, &err)
|——————————————Node:( Text: (
|——————————————Node:identifier Text: token
|——————————————Node:, Text: ,
|——————————————Node:number_literal Text: 0
|——————————————Node:, Text: ,
|——————————————Node:number_literal Text: 0xFFFF
|——————————————Node:, Text: ,
|——————————————Node:pointer_expression Text: &err
|———————————————Node:& Text: &
|———————————————Node:identifier Text: err
|——————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:expression_statement Text: token = getTok(NULL, spaceDelim, &err);
|——————————Node:assignment_expression Text: token = getTok(NULL, spaceDelim, &err)
|———————————Node:identifier Text: token
|———————————Node:= Text: =
|———————————Node:call_expression Text: getTok(NULL, spaceDelim, &err)
|————————————Node:identifier Text: getTok
|————————————Node:argument_list Text: (NULL, spaceDelim, &err)
|—————————————Node:( Text: (
|—————————————Node:null Text: NULL
|——————————————Node:NULL Text: NULL
|—————————————Node:, Text: ,
|—————————————Node:identifier Text: spaceDelim
|—————————————Node:, Text: ,
|—————————————Node:pointer_expression Text: &err
|——————————————Node:& Text: &
|——————————————Node:identifier Text: err
|—————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:expression_statement Text: subidx = (uint8_t)getU32(token, 0, 0xFF, &err);
|——————————Node:assignment_expression Text: subidx = (uint8_t)getU32(token, 0, 0xFF, &err)
|———————————Node:identifier Text: subidx
|———————————Node:= Text: =
|———————————Node:cast_expression Text: (uint8_t)getU32(token, 0, 0xFF, &err)
|————————————Node:( Text: (
|————————————Node:type_descriptor Text: uint8_t
|—————————————Node:primitive_type Text: uint8_t
|————————————Node:) Text: )
|————————————Node:call_expression Text: getU32(token, 0, 0xFF, &err)
|—————————————Node:identifier Text: getU32
|—————————————Node:argument_list Text: (token, 0, 0xFF, &err)
|——————————————Node:( Text: (
|——————————————Node:identifier Text: token
|——————————————Node:, Text: ,
|——————————————Node:number_literal Text: 0
|——————————————Node:, Text: ,
|——————————————Node:number_literal Text: 0xFF
|——————————————Node:, Text: ,
|——————————————Node:pointer_expression Text: &err
|———————————————Node:& Text: &
|———————————————Node:identifier Text: err
|——————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:expression_statement Text: token = getTok(NULL, spaceDelim, &err);
|——————————Node:assignment_expression Text: token = getTok(NULL, spaceDelim, &err)
|———————————Node:identifier Text: token
|———————————Node:= Text: =
|———————————Node:call_expression Text: getTok(NULL, spaceDelim, &err)
|————————————Node:identifier Text: getTok
|————————————Node:argument_list Text: (NULL, spaceDelim, &err)
|—————————————Node:( Text: (
|—————————————Node:null Text: NULL
|——————————————Node:NULL Text: NULL
|—————————————Node:, Text: ,
|—————————————Node:identifier Text: spaceDelim
|—————————————Node:, Text: ,
|—————————————Node:pointer_expression Text: &err
|——————————————Node:& Text: &
|——————————————Node:identifier Text: err
|—————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:expression_statement Text: datatype = getDataType(token, &err);
|——————————Node:assignment_expression Text: datatype = getDataType(token, &err)
|———————————Node:identifier Text: datatype
|———————————Node:= Text: =
|———————————Node:call_expression Text: getDataType(token, &err)
|————————————Node:identifier Text: getDataType
|————————————Node:argument_list Text: (token, &err)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: token
|—————————————Node:, Text: ,
|—————————————Node:pointer_expression Text: &err
|——————————————Node:& Text: &
|——————————————Node:identifier Text: err
|—————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:if_statement Text: if(err == 0) {
                /* take whole string or single token, depending on datatype. Comment may follow. */
                token = getTok(NULL, (datatype->length == 0) ? "\n\r\f" : spaceDelim, &err);
            }
|——————————Node:if Text: if
|——————————Node:parenthesized_expression Text: (err == 0)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: err == 0
|————————————Node:identifier Text: err
|————————————Node:== Text: ==
|————————————Node:number_literal Text: 0
|———————————Node:) Text: )
|——————————Node:compound_statement Text: {
                /* take whole string or single token, depending on datatype. Comment may follow. */
                token = getTok(NULL, (datatype->length == 0) ? "\n\r\f" : spaceDelim, &err);
            }
|———————————Node:{ Text: {
|———————————Node:comment Text: /* take whole string or single token, depending on datatype. Comment may follow. */
|———————————Node:expression_statement Text: token = getTok(NULL, (datatype->length == 0) ? "\n\r\f" : spaceDelim, &err);
|————————————Node:assignment_expression Text: token = getTok(NULL, (datatype->length == 0) ? "\n\r\f" : spaceDelim, &err)
|—————————————Node:identifier Text: token
|—————————————Node:= Text: =
|—————————————Node:call_expression Text: getTok(NULL, (datatype->length == 0) ? "\n\r\f" : spaceDelim, &err)
|——————————————Node:identifier Text: getTok
|——————————————Node:argument_list Text: (NULL, (datatype->length == 0) ? "\n\r\f" : spaceDelim, &err)
|———————————————Node:( Text: (
|———————————————Node:null Text: NULL
|————————————————Node:NULL Text: NULL
|———————————————Node:, Text: ,
|———————————————Node:conditional_expression Text: (datatype->length == 0) ? "\n\r\f" : spaceDelim
|————————————————Node:parenthesized_expression Text: (datatype->length == 0)
|—————————————————Node:( Text: (
|—————————————————Node:binary_expression Text: datatype->length == 0
|——————————————————Node:field_expression Text: datatype->length
|———————————————————Node:identifier Text: datatype
|———————————————————Node:-> Text: ->
|———————————————————Node:field_identifier Text: length
|——————————————————Node:== Text: ==
|——————————————————Node:number_literal Text: 0
|—————————————————Node:) Text: )
|————————————————Node:? Text: ?
|————————————————Node:string_literal Text: "\n\r\f"
|—————————————————Node:" Text: "
|—————————————————Node:escape_sequence Text: \n
|—————————————————Node:escape_sequence Text: \r
|—————————————————Node:escape_sequence Text: \f
|—————————————————Node:" Text: "
|————————————————Node:: Text: :
|————————————————Node:identifier Text: spaceDelim
|———————————————Node:, Text: ,
|———————————————Node:pointer_expression Text: &err
|————————————————Node:& Text: &
|————————————————Node:identifier Text: err
|———————————————Node:) Text: )
|————————————Node:; Text: ;
|———————————Node:} Text: }
|—————————Node:if_statement Text: if(err == 0) {
                dataTxLen = datatype->dataTypeScan((char*)dataTx, sizeof(dataTx), token);

                /* Length must match and must not be zero. */
                if((datatype->length != 0 && datatype->length != dataTxLen) || dataTxLen == 0) {
                    err = 1;
                }
            }
|——————————Node:if Text: if
|——————————Node:parenthesized_expression Text: (err == 0)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: err == 0
|————————————Node:identifier Text: err
|————————————Node:== Text: ==
|————————————Node:number_literal Text: 0
|———————————Node:) Text: )
|——————————Node:compound_statement Text: {
                dataTxLen = datatype->dataTypeScan((char*)dataTx, sizeof(dataTx), token);

                /* Length must match and must not be zero. */
                if((datatype->length != 0 && datatype->length != dataTxLen) || dataTxLen == 0) {
                    err = 1;
                }
            }
|———————————Node:{ Text: {
|———————————Node:expression_statement Text: dataTxLen = datatype->dataTypeScan((char*)dataTx, sizeof(dataTx), token);
|————————————Node:assignment_expression Text: dataTxLen = datatype->dataTypeScan((char*)dataTx, sizeof(dataTx), token)
|—————————————Node:identifier Text: dataTxLen
|—————————————Node:= Text: =
|—————————————Node:call_expression Text: datatype->dataTypeScan((char*)dataTx, sizeof(dataTx), token)
|——————————————Node:field_expression Text: datatype->dataTypeScan
|———————————————Node:identifier Text: datatype
|———————————————Node:-> Text: ->
|———————————————Node:field_identifier Text: dataTypeScan
|——————————————Node:argument_list Text: ((char*)dataTx, sizeof(dataTx), token)
|———————————————Node:( Text: (
|———————————————Node:cast_expression Text: (char*)dataTx
|————————————————Node:( Text: (
|————————————————Node:type_descriptor Text: char*
|—————————————————Node:primitive_type Text: char
|—————————————————Node:abstract_pointer_declarator Text: *
|——————————————————Node:* Text: *
|————————————————Node:) Text: )
|————————————————Node:identifier Text: dataTx
|———————————————Node:, Text: ,
|———————————————Node:sizeof_expression Text: sizeof(dataTx)
|————————————————Node:sizeof Text: sizeof
|————————————————Node:parenthesized_expression Text: (dataTx)
|—————————————————Node:( Text: (
|—————————————————Node:identifier Text: dataTx
|—————————————————Node:) Text: )
|———————————————Node:, Text: ,
|———————————————Node:identifier Text: token
|———————————————Node:) Text: )
|————————————Node:; Text: ;
|———————————Node:comment Text: /* Length must match and must not be zero. */
|———————————Node:if_statement Text: if((datatype->length != 0 && datatype->length != dataTxLen) || dataTxLen == 0) {
                    err = 1;
                }
|————————————Node:if Text: if
|————————————Node:parenthesized_expression Text: ((datatype->length != 0 && datatype->length != dataTxLen) || dataTxLen == 0)
|—————————————Node:( Text: (
|—————————————Node:binary_expression Text: (datatype->length != 0 && datatype->length != dataTxLen) || dataTxLen == 0
|——————————————Node:parenthesized_expression Text: (datatype->length != 0 && datatype->length != dataTxLen)
|———————————————Node:( Text: (
|———————————————Node:binary_expression Text: datatype->length != 0 && datatype->length != dataTxLen
|————————————————Node:binary_expression Text: datatype->length != 0
|—————————————————Node:field_expression Text: datatype->length
|——————————————————Node:identifier Text: datatype
|——————————————————Node:-> Text: ->
|——————————————————Node:field_identifier Text: length
|—————————————————Node:!= Text: !=
|—————————————————Node:number_literal Text: 0
|————————————————Node:&& Text: &&
|————————————————Node:binary_expression Text: datatype->length != dataTxLen
|—————————————————Node:field_expression Text: datatype->length
|——————————————————Node:identifier Text: datatype
|——————————————————Node:-> Text: ->
|——————————————————Node:field_identifier Text: length
|—————————————————Node:!= Text: !=
|—————————————————Node:identifier Text: dataTxLen
|———————————————Node:) Text: )
|——————————————Node:|| Text: ||
|——————————————Node:binary_expression Text: dataTxLen == 0
|———————————————Node:identifier Text: dataTxLen
|———————————————Node:== Text: ==
|———————————————Node:number_literal Text: 0
|—————————————Node:) Text: )
|————————————Node:compound_statement Text: {
                    err = 1;
                }
|—————————————Node:{ Text: {
|—————————————Node:expression_statement Text: err = 1;
|——————————————Node:assignment_expression Text: err = 1
|———————————————Node:identifier Text: err
|———————————————Node:= Text: =
|———————————————Node:number_literal Text: 1
|——————————————Node:; Text: ;
|—————————————Node:} Text: }
|———————————Node:} Text: }
|—————————Node:expression_statement Text: lastTok(NULL, spaceDelim, &err);
|——————————Node:call_expression Text: lastTok(NULL, spaceDelim, &err)
|———————————Node:identifier Text: lastTok
|———————————Node:argument_list Text: (NULL, spaceDelim, &err)
|————————————Node:( Text: (
|————————————Node:null Text: NULL
|—————————————Node:NULL Text: NULL
|————————————Node:, Text: ,
|————————————Node:identifier Text: spaceDelim
|————————————Node:, Text: ,
|————————————Node:pointer_expression Text: &err
|—————————————Node:& Text: &
|—————————————Node:identifier Text: err
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:if_statement Text: if(err == 0 && (comm_node < 1 || comm_node > 127)) {
                err = 1;
                if(comm_node == 0xFF) {
                    respErrorCode = respErrorNoDefaultNodeSet;
                } else {
                    respErrorCode = respErrorUnsupportedNode;
                }
            }
|——————————Node:if Text: if
|——————————Node:parenthesized_expression Text: (err == 0 && (comm_node < 1 || comm_node > 127))
|———————————Node:( Text: (
|———————————Node:binary_expression Text: err == 0 && (comm_node < 1 || comm_node > 127)
|————————————Node:binary_expression Text: err == 0
|—————————————Node:identifier Text: err
|—————————————Node:== Text: ==
|—————————————Node:number_literal Text: 0
|————————————Node:&& Text: &&
|————————————Node:parenthesized_expression Text: (comm_node < 1 || comm_node > 127)
|—————————————Node:( Text: (
|—————————————Node:binary_expression Text: comm_node < 1 || comm_node > 127
|——————————————Node:binary_expression Text: comm_node < 1
|———————————————Node:identifier Text: comm_node
|———————————————Node:< Text: <
|———————————————Node:number_literal Text: 1
|——————————————Node:|| Text: ||
|——————————————Node:binary_expression Text: comm_node > 127
|———————————————Node:identifier Text: comm_node
|———————————————Node:> Text: >
|———————————————Node:number_literal Text: 127
|—————————————Node:) Text: )
|———————————Node:) Text: )
|——————————Node:compound_statement Text: {
                err = 1;
                if(comm_node == 0xFF) {
                    respErrorCode = respErrorNoDefaultNodeSet;
                } else {
                    respErrorCode = respErrorUnsupportedNode;
                }
            }
|———————————Node:{ Text: {
|———————————Node:expression_statement Text: err = 1;
|————————————Node:assignment_expression Text: err = 1
|—————————————Node:identifier Text: err
|—————————————Node:= Text: =
|—————————————Node:number_literal Text: 1
|————————————Node:; Text: ;
|———————————Node:if_statement Text: if(comm_node == 0xFF) {
                    respErrorCode = respErrorNoDefaultNodeSet;
                } else {
                    respErrorCode = respErrorUnsupportedNode;
                }
|————————————Node:if Text: if
|————————————Node:parenthesized_expression Text: (comm_node == 0xFF)
|—————————————Node:( Text: (
|—————————————Node:binary_expression Text: comm_node == 0xFF
|——————————————Node:identifier Text: comm_node
|——————————————Node:== Text: ==
|——————————————Node:number_literal Text: 0xFF
|—————————————Node:) Text: )
|————————————Node:compound_statement Text: {
                    respErrorCode = respErrorNoDefaultNodeSet;
                }
|—————————————Node:{ Text: {
|—————————————Node:expression_statement Text: respErrorCode = respErrorNoDefaultNodeSet;
|——————————————Node:assignment_expression Text: respErrorCode = respErrorNoDefaultNodeSet
|———————————————Node:identifier Text: respErrorCode
|———————————————Node:= Text: =
|———————————————Node:identifier Text: respErrorNoDefaultNodeSet
|——————————————Node:; Text: ;
|—————————————Node:} Text: }
|————————————Node:else_clause Text: else {
                    respErrorCode = respErrorUnsupportedNode;
                }
|—————————————Node:else Text: else
|—————————————Node:compound_statement Text: {
                    respErrorCode = respErrorUnsupportedNode;
                }
|——————————————Node:{ Text: {
|——————————————Node:expression_statement Text: respErrorCode = respErrorUnsupportedNode;
|———————————————Node:assignment_expression Text: respErrorCode = respErrorUnsupportedNode
|————————————————Node:identifier Text: respErrorCode
|————————————————Node:= Text: =
|————————————————Node:identifier Text: respErrorUnsupportedNode
|———————————————Node:; Text: ;
|——————————————Node:} Text: }
|———————————Node:} Text: }
|—————————Node:comment Text: /* Make CANopen SDO transfer */
|—————————Node:if_statement Text: if(err == 0) {
                err = sdoClientDownload(
                        CO->SDOclient[0],
                        comm_node,
                        idx,
                        subidx,
                        dataTx,
                        dataTxLen,
                        &SDOabortCode,
                        SDOtimeoutTime,
                        blockTransferEnable);

                if(err != 0){
                    respErrorCode = respErrorInternalState;
                }
            }
|——————————Node:if Text: if
|——————————Node:parenthesized_expression Text: (err == 0)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: err == 0
|————————————Node:identifier Text: err
|————————————Node:== Text: ==
|————————————Node:number_literal Text: 0
|———————————Node:) Text: )
|——————————Node:compound_statement Text: {
                err = sdoClientDownload(
                        CO->SDOclient[0],
                        comm_node,
                        idx,
                        subidx,
                        dataTx,
                        dataTxLen,
                        &SDOabortCode,
                        SDOtimeoutTime,
                        blockTransferEnable);

                if(err != 0){
                    respErrorCode = respErrorInternalState;
                }
            }
|———————————Node:{ Text: {
|———————————Node:expression_statement Text: err = sdoClientDownload(
                        CO->SDOclient[0],
                        comm_node,
                        idx,
                        subidx,
                        dataTx,
                        dataTxLen,
                        &SDOabortCode,
                        SDOtimeoutTime,
                        blockTransferEnable);
|————————————Node:assignment_expression Text: err = sdoClientDownload(
                        CO->SDOclient[0],
                        comm_node,
                        idx,
                        subidx,
                        dataTx,
                        dataTxLen,
                        &SDOabortCode,
                        SDOtimeoutTime,
                        blockTransferEnable)
|—————————————Node:identifier Text: err
|—————————————Node:= Text: =
|—————————————Node:call_expression Text: sdoClientDownload(
                        CO->SDOclient[0],
                        comm_node,
                        idx,
                        subidx,
                        dataTx,
                        dataTxLen,
                        &SDOabortCode,
                        SDOtimeoutTime,
                        blockTransferEnable)
|——————————————Node:identifier Text: sdoClientDownload
|——————————————Node:argument_list Text: (
                        CO->SDOclient[0],
                        comm_node,
                        idx,
                        subidx,
                        dataTx,
                        dataTxLen,
                        &SDOabortCode,
                        SDOtimeoutTime,
                        blockTransferEnable)
|———————————————Node:( Text: (
|———————————————Node:subscript_expression Text: CO->SDOclient[0]
|————————————————Node:field_expression Text: CO->SDOclient
|—————————————————Node:identifier Text: CO
|—————————————————Node:-> Text: ->
|—————————————————Node:field_identifier Text: SDOclient
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 0
|————————————————Node:] Text: ]
|———————————————Node:, Text: ,
|———————————————Node:identifier Text: comm_node
|———————————————Node:, Text: ,
|———————————————Node:identifier Text: idx
|———————————————Node:, Text: ,
|———————————————Node:identifier Text: subidx
|———————————————Node:, Text: ,
|———————————————Node:identifier Text: dataTx
|———————————————Node:, Text: ,
|———————————————Node:identifier Text: dataTxLen
|———————————————Node:, Text: ,
|———————————————Node:pointer_expression Text: &SDOabortCode
|————————————————Node:& Text: &
|————————————————Node:identifier Text: SDOabortCode
|———————————————Node:, Text: ,
|———————————————Node:identifier Text: SDOtimeoutTime
|———————————————Node:, Text: ,
|———————————————Node:identifier Text: blockTransferEnable
|———————————————Node:) Text: )
|————————————Node:; Text: ;
|———————————Node:if_statement Text: if(err != 0){
                    respErrorCode = respErrorInternalState;
                }
|————————————Node:if Text: if
|————————————Node:parenthesized_expression Text: (err != 0)
|—————————————Node:( Text: (
|—————————————Node:binary_expression Text: err != 0
|——————————————Node:identifier Text: err
|——————————————Node:!= Text: !=
|——————————————Node:number_literal Text: 0
|—————————————Node:) Text: )
|————————————Node:compound_statement Text: {
                    respErrorCode = respErrorInternalState;
                }
|—————————————Node:{ Text: {
|—————————————Node:expression_statement Text: respErrorCode = respErrorInternalState;
|——————————————Node:assignment_expression Text: respErrorCode = respErrorInternalState
|———————————————Node:identifier Text: respErrorCode
|———————————————Node:= Text: =
|———————————————Node:identifier Text: respErrorInternalState
|——————————————Node:; Text: ;
|—————————————Node:} Text: }
|———————————Node:} Text: }
|—————————Node:comment Text: /* output result */
|—————————Node:if_statement Text: if(err == 0){
                if(SDOabortCode == 0) {
                    respLen = sprintf(resp, "[%d] OK", sequence);
                }
                else{
                    respLen = sprintf(resp, "[%d] ERROR: 0x%08X", sequence, SDOabortCode);
                }
            }
|——————————Node:if Text: if
|——————————Node:parenthesized_expression Text: (err == 0)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: err == 0
|————————————Node:identifier Text: err
|————————————Node:== Text: ==
|————————————Node:number_literal Text: 0
|———————————Node:) Text: )
|——————————Node:compound_statement Text: {
                if(SDOabortCode == 0) {
                    respLen = sprintf(resp, "[%d] OK", sequence);
                }
                else{
                    respLen = sprintf(resp, "[%d] ERROR: 0x%08X", sequence, SDOabortCode);
                }
            }
|———————————Node:{ Text: {
|———————————Node:if_statement Text: if(SDOabortCode == 0) {
                    respLen = sprintf(resp, "[%d] OK", sequence);
                }
                else{
                    respLen = sprintf(resp, "[%d] ERROR: 0x%08X", sequence, SDOabortCode);
                }
|————————————Node:if Text: if
|————————————Node:parenthesized_expression Text: (SDOabortCode == 0)
|—————————————Node:( Text: (
|—————————————Node:binary_expression Text: SDOabortCode == 0
|——————————————Node:identifier Text: SDOabortCode
|——————————————Node:== Text: ==
|——————————————Node:number_literal Text: 0
|—————————————Node:) Text: )
|————————————Node:compound_statement Text: {
                    respLen = sprintf(resp, "[%d] OK", sequence);
                }
|—————————————Node:{ Text: {
|—————————————Node:expression_statement Text: respLen = sprintf(resp, "[%d] OK", sequence);
|——————————————Node:assignment_expression Text: respLen = sprintf(resp, "[%d] OK", sequence)
|———————————————Node:identifier Text: respLen
|———————————————Node:= Text: =
|———————————————Node:call_expression Text: sprintf(resp, "[%d] OK", sequence)
|————————————————Node:identifier Text: sprintf
|————————————————Node:argument_list Text: (resp, "[%d] OK", sequence)
|—————————————————Node:( Text: (
|—————————————————Node:identifier Text: resp
|—————————————————Node:, Text: ,
|—————————————————Node:string_literal Text: "[%d] OK"
|——————————————————Node:" Text: "
|——————————————————Node:string_content Text: [%d] OK
|——————————————————Node:" Text: "
|—————————————————Node:, Text: ,
|—————————————————Node:identifier Text: sequence
|—————————————————Node:) Text: )
|——————————————Node:; Text: ;
|—————————————Node:} Text: }
|————————————Node:else_clause Text: else{
                    respLen = sprintf(resp, "[%d] ERROR: 0x%08X", sequence, SDOabortCode);
                }
|—————————————Node:else Text: else
|—————————————Node:compound_statement Text: {
                    respLen = sprintf(resp, "[%d] ERROR: 0x%08X", sequence, SDOabortCode);
                }
|——————————————Node:{ Text: {
|——————————————Node:expression_statement Text: respLen = sprintf(resp, "[%d] ERROR: 0x%08X", sequence, SDOabortCode);
|———————————————Node:assignment_expression Text: respLen = sprintf(resp, "[%d] ERROR: 0x%08X", sequence, SDOabortCode)
|————————————————Node:identifier Text: respLen
|————————————————Node:= Text: =
|————————————————Node:call_expression Text: sprintf(resp, "[%d] ERROR: 0x%08X", sequence, SDOabortCode)
|—————————————————Node:identifier Text: sprintf
|—————————————————Node:argument_list Text: (resp, "[%d] ERROR: 0x%08X", sequence, SDOabortCode)
|——————————————————Node:( Text: (
|——————————————————Node:identifier Text: resp
|——————————————————Node:, Text: ,
|——————————————————Node:string_literal Text: "[%d] ERROR: 0x%08X"
|———————————————————Node:" Text: "
|———————————————————Node:string_content Text: [%d] ERROR: 0x%08X
|———————————————————Node:" Text: "
|——————————————————Node:, Text: ,
|——————————————————Node:identifier Text: sequence
|——————————————————Node:, Text: ,
|——————————————————Node:identifier Text: SDOabortCode
|——————————————————Node:) Text: )
|———————————————Node:; Text: ;
|——————————————Node:} Text: }
|———————————Node:} Text: }
|—————————Node:} Text: }
|————————Node:comment Text: /* NMT start node */
|————————Node:else_clause Text: else if(strcmp(token, "start") == 0) {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_OPERATIONAL, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }

        /* NMT stop node */
        else if(strcmp(token, "stop") == 0) {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_STOPPED, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }

        /* NMT Set node to pre-operational */
        else if(strcmp(token, "preop") == 0 || strcmp(token, "preoperational") == 0) {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_PRE_OPERATIONAL, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }

        /* NMT reset (node or communication) */
        else if(strcmp(token, "reset") == 0) {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                if(strcmp(token, "node") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_NODE, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }
                else if(strcmp(token, "comm") == 0 || strcmp(token, "communication") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_COMMUNICATION, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                else {
                    err = 1;
                }
            }
        }

        /* set command - multiple settings */
        else if(strcmp(token, "set") == 0) {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0) {
                /* sdo_timeout <value> */
                if(strcmp(token, "sdo_timeout") == 0) {
                    uint16_t tmout;

                    token = getTok(NULL, spaceDelim, &err);
                    tmout = (uint16_t)getU32(token, 0, 10000, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        SDOtimeoutTime = tmout;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* sdo_block <value> */
                else if(strcmp(token, "sdo_block") == 0) {
                    uint8_t blk;

                    token = getTok(NULL, spaceDelim, &err);
                    blk = (uint8_t)getU32(token, 0, 1, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        blockTransferEnable = blk;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* node <value> */
                else if(strcmp(token, "node") == 0) {
                    uint16_t node;

                    token = getTok(NULL, spaceDelim, &err);
                    node = (uint16_t)getU32(token, 1, 127, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        comm_node_default = node;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* Unknown command */
                else {
                    err = 1;
                }
            }
        }

        /* Unknown command */
        else {
            respErrorCode = respErrorReqNotSupported;
            err = 1;
        }
|—————————Node:else Text: else
|—————————Node:if_statement Text: if(strcmp(token, "start") == 0) {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_OPERATIONAL, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }

        /* NMT stop node */
        else if(strcmp(token, "stop") == 0) {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_STOPPED, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }

        /* NMT Set node to pre-operational */
        else if(strcmp(token, "preop") == 0 || strcmp(token, "preoperational") == 0) {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_PRE_OPERATIONAL, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }

        /* NMT reset (node or communication) */
        else if(strcmp(token, "reset") == 0) {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                if(strcmp(token, "node") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_NODE, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }
                else if(strcmp(token, "comm") == 0 || strcmp(token, "communication") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_COMMUNICATION, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                else {
                    err = 1;
                }
            }
        }

        /* set command - multiple settings */
        else if(strcmp(token, "set") == 0) {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0) {
                /* sdo_timeout <value> */
                if(strcmp(token, "sdo_timeout") == 0) {
                    uint16_t tmout;

                    token = getTok(NULL, spaceDelim, &err);
                    tmout = (uint16_t)getU32(token, 0, 10000, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        SDOtimeoutTime = tmout;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* sdo_block <value> */
                else if(strcmp(token, "sdo_block") == 0) {
                    uint8_t blk;

                    token = getTok(NULL, spaceDelim, &err);
                    blk = (uint8_t)getU32(token, 0, 1, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        blockTransferEnable = blk;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* node <value> */
                else if(strcmp(token, "node") == 0) {
                    uint16_t node;

                    token = getTok(NULL, spaceDelim, &err);
                    node = (uint16_t)getU32(token, 1, 127, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        comm_node_default = node;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* Unknown command */
                else {
                    err = 1;
                }
            }
        }

        /* Unknown command */
        else {
            respErrorCode = respErrorReqNotSupported;
            err = 1;
        }
|——————————Node:if Text: if
|——————————Node:parenthesized_expression Text: (strcmp(token, "start") == 0)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: strcmp(token, "start") == 0
|————————————Node:call_expression Text: strcmp(token, "start")
|—————————————Node:identifier Text: strcmp
|—————————————Node:argument_list Text: (token, "start")
|——————————————Node:( Text: (
|——————————————Node:identifier Text: token
|——————————————Node:, Text: ,
|——————————————Node:string_literal Text: "start"
|———————————————Node:" Text: "
|———————————————Node:string_content Text: start
|———————————————Node:" Text: "
|——————————————Node:) Text: )
|————————————Node:== Text: ==
|————————————Node:number_literal Text: 0
|———————————Node:) Text: )
|——————————Node:compound_statement Text: {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_OPERATIONAL, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }
|———————————Node:{ Text: {
|———————————Node:expression_statement Text: lastTok(NULL, spaceDelim, &err);
|————————————Node:call_expression Text: lastTok(NULL, spaceDelim, &err)
|—————————————Node:identifier Text: lastTok
|—————————————Node:argument_list Text: (NULL, spaceDelim, &err)
|——————————————Node:( Text: (
|——————————————Node:null Text: NULL
|———————————————Node:NULL Text: NULL
|——————————————Node:, Text: ,
|——————————————Node:identifier Text: spaceDelim
|——————————————Node:, Text: ,
|——————————————Node:pointer_expression Text: &err
|———————————————Node:& Text: &
|———————————————Node:identifier Text: err
|——————————————Node:) Text: )
|————————————Node:; Text: ;
|———————————Node:if_statement Text: if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
|————————————Node:if Text: if
|————————————Node:parenthesized_expression Text: (err == 0 && comm_node > 127)
|—————————————Node:( Text: (
|—————————————Node:binary_expression Text: err == 0 && comm_node > 127
|——————————————Node:binary_expression Text: err == 0
|———————————————Node:identifier Text: err
|———————————————Node:== Text: ==
|———————————————Node:number_literal Text: 0
|——————————————Node:&& Text: &&
|——————————————Node:binary_expression Text: comm_node > 127
|———————————————Node:identifier Text: comm_node
|———————————————Node:> Text: >
|———————————————Node:number_literal Text: 127
|—————————————Node:) Text: )
|————————————Node:compound_statement Text: {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
|—————————————Node:{ Text: {
|—————————————Node:expression_statement Text: err = 1;
|——————————————Node:assignment_expression Text: err = 1
|———————————————Node:identifier Text: err
|———————————————Node:= Text: =
|———————————————Node:number_literal Text: 1
|——————————————Node:; Text: ;
|—————————————Node:expression_statement Text: respErrorCode = respErrorNoDefaultNodeSet;
|——————————————Node:assignment_expression Text: respErrorCode = respErrorNoDefaultNodeSet
|———————————————Node:identifier Text: respErrorCode
|———————————————Node:= Text: =
|———————————————Node:identifier Text: respErrorNoDefaultNodeSet
|——————————————Node:; Text: ;
|—————————————Node:} Text: }
|———————————Node:if_statement Text: if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_OPERATIONAL, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
|————————————Node:if Text: if
|————————————Node:parenthesized_expression Text: (err == 0)
|—————————————Node:( Text: (
|—————————————Node:binary_expression Text: err == 0
|——————————————Node:identifier Text: err
|——————————————Node:== Text: ==
|——————————————Node:number_literal Text: 0
|—————————————Node:) Text: )
|————————————Node:compound_statement Text: {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_OPERATIONAL, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
|—————————————Node:{ Text: {
|—————————————Node:expression_statement Text: err = CO_sendNMTcommand(CO, CO_NMT_ENTER_OPERATIONAL, comm_node) ? 1:0;
|——————————————Node:assignment_expression Text: err = CO_sendNMTcommand(CO, CO_NMT_ENTER_OPERATIONAL, comm_node) ? 1:0
|———————————————Node:identifier Text: err
|———————————————Node:= Text: =
|———————————————Node:conditional_expression Text: CO_sendNMTcommand(CO, CO_NMT_ENTER_OPERATIONAL, comm_node) ? 1:0
|————————————————Node:call_expression Text: CO_sendNMTcommand(CO, CO_NMT_ENTER_OPERATIONAL, comm_node)
|—————————————————Node:identifier Text: CO_sendNMTcommand
|—————————————————Node:argument_list Text: (CO, CO_NMT_ENTER_OPERATIONAL, comm_node)
|——————————————————Node:( Text: (
|——————————————————Node:identifier Text: CO
|——————————————————Node:, Text: ,
|——————————————————Node:identifier Text: CO_NMT_ENTER_OPERATIONAL
|——————————————————Node:, Text: ,
|——————————————————Node:identifier Text: comm_node
|——————————————————Node:) Text: )
|————————————————Node:? Text: ?
|————————————————Node:number_literal Text: 1
|————————————————Node:: Text: :
|————————————————Node:number_literal Text: 0
|——————————————Node:; Text: ;
|—————————————Node:if_statement Text: if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
|——————————————Node:if Text: if
|——————————————Node:parenthesized_expression Text: (err == 0)
|———————————————Node:( Text: (
|———————————————Node:binary_expression Text: err == 0
|————————————————Node:identifier Text: err
|————————————————Node:== Text: ==
|————————————————Node:number_literal Text: 0
|———————————————Node:) Text: )
|——————————————Node:expression_statement Text: respLen = sprintf(resp, "[%d] OK", sequence);
|———————————————Node:assignment_expression Text: respLen = sprintf(resp, "[%d] OK", sequence)
|————————————————Node:identifier Text: respLen
|————————————————Node:= Text: =
|————————————————Node:call_expression Text: sprintf(resp, "[%d] OK", sequence)
|—————————————————Node:identifier Text: sprintf
|—————————————————Node:argument_list Text: (resp, "[%d] OK", sequence)
|——————————————————Node:( Text: (
|——————————————————Node:identifier Text: resp
|——————————————————Node:, Text: ,
|——————————————————Node:string_literal Text: "[%d] OK"
|———————————————————Node:" Text: "
|———————————————————Node:string_content Text: [%d] OK
|———————————————————Node:" Text: "
|——————————————————Node:, Text: ,
|——————————————————Node:identifier Text: sequence
|——————————————————Node:) Text: )
|———————————————Node:; Text: ;
|—————————————Node:} Text: }
|———————————Node:} Text: }
|——————————Node:comment Text: /* NMT stop node */
|——————————Node:else_clause Text: else if(strcmp(token, "stop") == 0) {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_STOPPED, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }

        /* NMT Set node to pre-operational */
        else if(strcmp(token, "preop") == 0 || strcmp(token, "preoperational") == 0) {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_PRE_OPERATIONAL, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }

        /* NMT reset (node or communication) */
        else if(strcmp(token, "reset") == 0) {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                if(strcmp(token, "node") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_NODE, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }
                else if(strcmp(token, "comm") == 0 || strcmp(token, "communication") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_COMMUNICATION, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                else {
                    err = 1;
                }
            }
        }

        /* set command - multiple settings */
        else if(strcmp(token, "set") == 0) {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0) {
                /* sdo_timeout <value> */
                if(strcmp(token, "sdo_timeout") == 0) {
                    uint16_t tmout;

                    token = getTok(NULL, spaceDelim, &err);
                    tmout = (uint16_t)getU32(token, 0, 10000, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        SDOtimeoutTime = tmout;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* sdo_block <value> */
                else if(strcmp(token, "sdo_block") == 0) {
                    uint8_t blk;

                    token = getTok(NULL, spaceDelim, &err);
                    blk = (uint8_t)getU32(token, 0, 1, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        blockTransferEnable = blk;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* node <value> */
                else if(strcmp(token, "node") == 0) {
                    uint16_t node;

                    token = getTok(NULL, spaceDelim, &err);
                    node = (uint16_t)getU32(token, 1, 127, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        comm_node_default = node;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* Unknown command */
                else {
                    err = 1;
                }
            }
        }

        /* Unknown command */
        else {
            respErrorCode = respErrorReqNotSupported;
            err = 1;
        }
|———————————Node:else Text: else
|———————————Node:if_statement Text: if(strcmp(token, "stop") == 0) {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_STOPPED, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }

        /* NMT Set node to pre-operational */
        else if(strcmp(token, "preop") == 0 || strcmp(token, "preoperational") == 0) {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_PRE_OPERATIONAL, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }

        /* NMT reset (node or communication) */
        else if(strcmp(token, "reset") == 0) {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                if(strcmp(token, "node") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_NODE, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }
                else if(strcmp(token, "comm") == 0 || strcmp(token, "communication") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_COMMUNICATION, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                else {
                    err = 1;
                }
            }
        }

        /* set command - multiple settings */
        else if(strcmp(token, "set") == 0) {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0) {
                /* sdo_timeout <value> */
                if(strcmp(token, "sdo_timeout") == 0) {
                    uint16_t tmout;

                    token = getTok(NULL, spaceDelim, &err);
                    tmout = (uint16_t)getU32(token, 0, 10000, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        SDOtimeoutTime = tmout;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* sdo_block <value> */
                else if(strcmp(token, "sdo_block") == 0) {
                    uint8_t blk;

                    token = getTok(NULL, spaceDelim, &err);
                    blk = (uint8_t)getU32(token, 0, 1, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        blockTransferEnable = blk;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* node <value> */
                else if(strcmp(token, "node") == 0) {
                    uint16_t node;

                    token = getTok(NULL, spaceDelim, &err);
                    node = (uint16_t)getU32(token, 1, 127, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        comm_node_default = node;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* Unknown command */
                else {
                    err = 1;
                }
            }
        }

        /* Unknown command */
        else {
            respErrorCode = respErrorReqNotSupported;
            err = 1;
        }
|————————————Node:if Text: if
|————————————Node:parenthesized_expression Text: (strcmp(token, "stop") == 0)
|—————————————Node:( Text: (
|—————————————Node:binary_expression Text: strcmp(token, "stop") == 0
|——————————————Node:call_expression Text: strcmp(token, "stop")
|———————————————Node:identifier Text: strcmp
|———————————————Node:argument_list Text: (token, "stop")
|————————————————Node:( Text: (
|————————————————Node:identifier Text: token
|————————————————Node:, Text: ,
|————————————————Node:string_literal Text: "stop"
|—————————————————Node:" Text: "
|—————————————————Node:string_content Text: stop
|—————————————————Node:" Text: "
|————————————————Node:) Text: )
|——————————————Node:== Text: ==
|——————————————Node:number_literal Text: 0
|—————————————Node:) Text: )
|————————————Node:compound_statement Text: {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_STOPPED, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }
|—————————————Node:{ Text: {
|—————————————Node:expression_statement Text: lastTok(NULL, spaceDelim, &err);
|——————————————Node:call_expression Text: lastTok(NULL, spaceDelim, &err)
|———————————————Node:identifier Text: lastTok
|———————————————Node:argument_list Text: (NULL, spaceDelim, &err)
|————————————————Node:( Text: (
|————————————————Node:null Text: NULL
|—————————————————Node:NULL Text: NULL
|————————————————Node:, Text: ,
|————————————————Node:identifier Text: spaceDelim
|————————————————Node:, Text: ,
|————————————————Node:pointer_expression Text: &err
|—————————————————Node:& Text: &
|—————————————————Node:identifier Text: err
|————————————————Node:) Text: )
|——————————————Node:; Text: ;
|—————————————Node:if_statement Text: if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
|——————————————Node:if Text: if
|——————————————Node:parenthesized_expression Text: (err == 0 && comm_node > 127)
|———————————————Node:( Text: (
|———————————————Node:binary_expression Text: err == 0 && comm_node > 127
|————————————————Node:binary_expression Text: err == 0
|—————————————————Node:identifier Text: err
|—————————————————Node:== Text: ==
|—————————————————Node:number_literal Text: 0
|————————————————Node:&& Text: &&
|————————————————Node:binary_expression Text: comm_node > 127
|—————————————————Node:identifier Text: comm_node
|—————————————————Node:> Text: >
|—————————————————Node:number_literal Text: 127
|———————————————Node:) Text: )
|——————————————Node:compound_statement Text: {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
|———————————————Node:{ Text: {
|———————————————Node:expression_statement Text: err = 1;
|————————————————Node:assignment_expression Text: err = 1
|—————————————————Node:identifier Text: err
|—————————————————Node:= Text: =
|—————————————————Node:number_literal Text: 1
|————————————————Node:; Text: ;
|———————————————Node:expression_statement Text: respErrorCode = respErrorNoDefaultNodeSet;
|————————————————Node:assignment_expression Text: respErrorCode = respErrorNoDefaultNodeSet
|—————————————————Node:identifier Text: respErrorCode
|—————————————————Node:= Text: =
|—————————————————Node:identifier Text: respErrorNoDefaultNodeSet
|————————————————Node:; Text: ;
|———————————————Node:} Text: }
|—————————————Node:if_statement Text: if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_STOPPED, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
|——————————————Node:if Text: if
|——————————————Node:parenthesized_expression Text: (err == 0)
|———————————————Node:( Text: (
|———————————————Node:binary_expression Text: err == 0
|————————————————Node:identifier Text: err
|————————————————Node:== Text: ==
|————————————————Node:number_literal Text: 0
|———————————————Node:) Text: )
|——————————————Node:compound_statement Text: {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_STOPPED, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
|———————————————Node:{ Text: {
|———————————————Node:expression_statement Text: err = CO_sendNMTcommand(CO, CO_NMT_ENTER_STOPPED, comm_node) ? 1:0;
|————————————————Node:assignment_expression Text: err = CO_sendNMTcommand(CO, CO_NMT_ENTER_STOPPED, comm_node) ? 1:0
|—————————————————Node:identifier Text: err
|—————————————————Node:= Text: =
|—————————————————Node:conditional_expression Text: CO_sendNMTcommand(CO, CO_NMT_ENTER_STOPPED, comm_node) ? 1:0
|——————————————————Node:call_expression Text: CO_sendNMTcommand(CO, CO_NMT_ENTER_STOPPED, comm_node)
|———————————————————Node:identifier Text: CO_sendNMTcommand
|———————————————————Node:argument_list Text: (CO, CO_NMT_ENTER_STOPPED, comm_node)
|————————————————————Node:( Text: (
|————————————————————Node:identifier Text: CO
|————————————————————Node:, Text: ,
|————————————————————Node:identifier Text: CO_NMT_ENTER_STOPPED
|————————————————————Node:, Text: ,
|————————————————————Node:identifier Text: comm_node
|————————————————————Node:) Text: )
|——————————————————Node:? Text: ?
|——————————————————Node:number_literal Text: 1
|——————————————————Node:: Text: :
|——————————————————Node:number_literal Text: 0
|————————————————Node:; Text: ;
|———————————————Node:if_statement Text: if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
|————————————————Node:if Text: if
|————————————————Node:parenthesized_expression Text: (err == 0)
|—————————————————Node:( Text: (
|—————————————————Node:binary_expression Text: err == 0
|——————————————————Node:identifier Text: err
|——————————————————Node:== Text: ==
|——————————————————Node:number_literal Text: 0
|—————————————————Node:) Text: )
|————————————————Node:expression_statement Text: respLen = sprintf(resp, "[%d] OK", sequence);
|—————————————————Node:assignment_expression Text: respLen = sprintf(resp, "[%d] OK", sequence)
|——————————————————Node:identifier Text: respLen
|——————————————————Node:= Text: =
|——————————————————Node:call_expression Text: sprintf(resp, "[%d] OK", sequence)
|———————————————————Node:identifier Text: sprintf
|———————————————————Node:argument_list Text: (resp, "[%d] OK", sequence)
|————————————————————Node:( Text: (
|————————————————————Node:identifier Text: resp
|————————————————————Node:, Text: ,
|————————————————————Node:string_literal Text: "[%d] OK"
|—————————————————————Node:" Text: "
|—————————————————————Node:string_content Text: [%d] OK
|—————————————————————Node:" Text: "
|————————————————————Node:, Text: ,
|————————————————————Node:identifier Text: sequence
|————————————————————Node:) Text: )
|—————————————————Node:; Text: ;
|———————————————Node:} Text: }
|—————————————Node:} Text: }
|————————————Node:comment Text: /* NMT Set node to pre-operational */
|————————————Node:else_clause Text: else if(strcmp(token, "preop") == 0 || strcmp(token, "preoperational") == 0) {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_PRE_OPERATIONAL, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }

        /* NMT reset (node or communication) */
        else if(strcmp(token, "reset") == 0) {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                if(strcmp(token, "node") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_NODE, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }
                else if(strcmp(token, "comm") == 0 || strcmp(token, "communication") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_COMMUNICATION, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                else {
                    err = 1;
                }
            }
        }

        /* set command - multiple settings */
        else if(strcmp(token, "set") == 0) {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0) {
                /* sdo_timeout <value> */
                if(strcmp(token, "sdo_timeout") == 0) {
                    uint16_t tmout;

                    token = getTok(NULL, spaceDelim, &err);
                    tmout = (uint16_t)getU32(token, 0, 10000, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        SDOtimeoutTime = tmout;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* sdo_block <value> */
                else if(strcmp(token, "sdo_block") == 0) {
                    uint8_t blk;

                    token = getTok(NULL, spaceDelim, &err);
                    blk = (uint8_t)getU32(token, 0, 1, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        blockTransferEnable = blk;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* node <value> */
                else if(strcmp(token, "node") == 0) {
                    uint16_t node;

                    token = getTok(NULL, spaceDelim, &err);
                    node = (uint16_t)getU32(token, 1, 127, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        comm_node_default = node;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* Unknown command */
                else {
                    err = 1;
                }
            }
        }

        /* Unknown command */
        else {
            respErrorCode = respErrorReqNotSupported;
            err = 1;
        }
|—————————————Node:else Text: else
|—————————————Node:if_statement Text: if(strcmp(token, "preop") == 0 || strcmp(token, "preoperational") == 0) {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_PRE_OPERATIONAL, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }

        /* NMT reset (node or communication) */
        else if(strcmp(token, "reset") == 0) {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                if(strcmp(token, "node") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_NODE, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }
                else if(strcmp(token, "comm") == 0 || strcmp(token, "communication") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_COMMUNICATION, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                else {
                    err = 1;
                }
            }
        }

        /* set command - multiple settings */
        else if(strcmp(token, "set") == 0) {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0) {
                /* sdo_timeout <value> */
                if(strcmp(token, "sdo_timeout") == 0) {
                    uint16_t tmout;

                    token = getTok(NULL, spaceDelim, &err);
                    tmout = (uint16_t)getU32(token, 0, 10000, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        SDOtimeoutTime = tmout;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* sdo_block <value> */
                else if(strcmp(token, "sdo_block") == 0) {
                    uint8_t blk;

                    token = getTok(NULL, spaceDelim, &err);
                    blk = (uint8_t)getU32(token, 0, 1, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        blockTransferEnable = blk;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* node <value> */
                else if(strcmp(token, "node") == 0) {
                    uint16_t node;

                    token = getTok(NULL, spaceDelim, &err);
                    node = (uint16_t)getU32(token, 1, 127, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        comm_node_default = node;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* Unknown command */
                else {
                    err = 1;
                }
            }
        }

        /* Unknown command */
        else {
            respErrorCode = respErrorReqNotSupported;
            err = 1;
        }
|——————————————Node:if Text: if
|——————————————Node:parenthesized_expression Text: (strcmp(token, "preop") == 0 || strcmp(token, "preoperational") == 0)
|———————————————Node:( Text: (
|———————————————Node:binary_expression Text: strcmp(token, "preop") == 0 || strcmp(token, "preoperational") == 0
|————————————————Node:binary_expression Text: strcmp(token, "preop") == 0
|—————————————————Node:call_expression Text: strcmp(token, "preop")
|——————————————————Node:identifier Text: strcmp
|——————————————————Node:argument_list Text: (token, "preop")
|———————————————————Node:( Text: (
|———————————————————Node:identifier Text: token
|———————————————————Node:, Text: ,
|———————————————————Node:string_literal Text: "preop"
|————————————————————Node:" Text: "
|————————————————————Node:string_content Text: preop
|————————————————————Node:" Text: "
|———————————————————Node:) Text: )
|—————————————————Node:== Text: ==
|—————————————————Node:number_literal Text: 0
|————————————————Node:|| Text: ||
|————————————————Node:binary_expression Text: strcmp(token, "preoperational") == 0
|—————————————————Node:call_expression Text: strcmp(token, "preoperational")
|——————————————————Node:identifier Text: strcmp
|——————————————————Node:argument_list Text: (token, "preoperational")
|———————————————————Node:( Text: (
|———————————————————Node:identifier Text: token
|———————————————————Node:, Text: ,
|———————————————————Node:string_literal Text: "preoperational"
|————————————————————Node:" Text: "
|————————————————————Node:string_content Text: preoperational
|————————————————————Node:" Text: "
|———————————————————Node:) Text: )
|—————————————————Node:== Text: ==
|—————————————————Node:number_literal Text: 0
|———————————————Node:) Text: )
|——————————————Node:compound_statement Text: {
            lastTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_PRE_OPERATIONAL, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
        }
|———————————————Node:{ Text: {
|———————————————Node:expression_statement Text: lastTok(NULL, spaceDelim, &err);
|————————————————Node:call_expression Text: lastTok(NULL, spaceDelim, &err)
|—————————————————Node:identifier Text: lastTok
|—————————————————Node:argument_list Text: (NULL, spaceDelim, &err)
|——————————————————Node:( Text: (
|——————————————————Node:null Text: NULL
|———————————————————Node:NULL Text: NULL
|——————————————————Node:, Text: ,
|——————————————————Node:identifier Text: spaceDelim
|——————————————————Node:, Text: ,
|——————————————————Node:pointer_expression Text: &err
|———————————————————Node:& Text: &
|———————————————————Node:identifier Text: err
|——————————————————Node:) Text: )
|————————————————Node:; Text: ;
|———————————————Node:if_statement Text: if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
|————————————————Node:if Text: if
|————————————————Node:parenthesized_expression Text: (err == 0 && comm_node > 127)
|—————————————————Node:( Text: (
|—————————————————Node:binary_expression Text: err == 0 && comm_node > 127
|——————————————————Node:binary_expression Text: err == 0
|———————————————————Node:identifier Text: err
|———————————————————Node:== Text: ==
|———————————————————Node:number_literal Text: 0
|——————————————————Node:&& Text: &&
|——————————————————Node:binary_expression Text: comm_node > 127
|———————————————————Node:identifier Text: comm_node
|———————————————————Node:> Text: >
|———————————————————Node:number_literal Text: 127
|—————————————————Node:) Text: )
|————————————————Node:compound_statement Text: {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
|—————————————————Node:{ Text: {
|—————————————————Node:expression_statement Text: err = 1;
|——————————————————Node:assignment_expression Text: err = 1
|———————————————————Node:identifier Text: err
|———————————————————Node:= Text: =
|———————————————————Node:number_literal Text: 1
|——————————————————Node:; Text: ;
|—————————————————Node:expression_statement Text: respErrorCode = respErrorNoDefaultNodeSet;
|——————————————————Node:assignment_expression Text: respErrorCode = respErrorNoDefaultNodeSet
|———————————————————Node:identifier Text: respErrorCode
|———————————————————Node:= Text: =
|———————————————————Node:identifier Text: respErrorNoDefaultNodeSet
|——————————————————Node:; Text: ;
|—————————————————Node:} Text: }
|———————————————Node:if_statement Text: if(err == 0) {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_PRE_OPERATIONAL, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
|————————————————Node:if Text: if
|————————————————Node:parenthesized_expression Text: (err == 0)
|—————————————————Node:( Text: (
|—————————————————Node:binary_expression Text: err == 0
|——————————————————Node:identifier Text: err
|——————————————————Node:== Text: ==
|——————————————————Node:number_literal Text: 0
|—————————————————Node:) Text: )
|————————————————Node:compound_statement Text: {
                err = CO_sendNMTcommand(CO, CO_NMT_ENTER_PRE_OPERATIONAL, comm_node) ? 1:0;
                if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
            }
|—————————————————Node:{ Text: {
|—————————————————Node:expression_statement Text: err = CO_sendNMTcommand(CO, CO_NMT_ENTER_PRE_OPERATIONAL, comm_node) ? 1:0;
|——————————————————Node:assignment_expression Text: err = CO_sendNMTcommand(CO, CO_NMT_ENTER_PRE_OPERATIONAL, comm_node) ? 1:0
|———————————————————Node:identifier Text: err
|———————————————————Node:= Text: =
|———————————————————Node:conditional_expression Text: CO_sendNMTcommand(CO, CO_NMT_ENTER_PRE_OPERATIONAL, comm_node) ? 1:0
|————————————————————Node:call_expression Text: CO_sendNMTcommand(CO, CO_NMT_ENTER_PRE_OPERATIONAL, comm_node)
|—————————————————————Node:identifier Text: CO_sendNMTcommand
|—————————————————————Node:argument_list Text: (CO, CO_NMT_ENTER_PRE_OPERATIONAL, comm_node)
|——————————————————————Node:( Text: (
|——————————————————————Node:identifier Text: CO
|——————————————————————Node:, Text: ,
|——————————————————————Node:identifier Text: CO_NMT_ENTER_PRE_OPERATIONAL
|——————————————————————Node:, Text: ,
|——————————————————————Node:identifier Text: comm_node
|——————————————————————Node:) Text: )
|————————————————————Node:? Text: ?
|————————————————————Node:number_literal Text: 1
|————————————————————Node:: Text: :
|————————————————————Node:number_literal Text: 0
|——————————————————Node:; Text: ;
|—————————————————Node:if_statement Text: if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
|——————————————————Node:if Text: if
|——————————————————Node:parenthesized_expression Text: (err == 0)
|———————————————————Node:( Text: (
|———————————————————Node:binary_expression Text: err == 0
|————————————————————Node:identifier Text: err
|————————————————————Node:== Text: ==
|————————————————————Node:number_literal Text: 0
|———————————————————Node:) Text: )
|——————————————————Node:expression_statement Text: respLen = sprintf(resp, "[%d] OK", sequence);
|———————————————————Node:assignment_expression Text: respLen = sprintf(resp, "[%d] OK", sequence)
|————————————————————Node:identifier Text: respLen
|————————————————————Node:= Text: =
|————————————————————Node:call_expression Text: sprintf(resp, "[%d] OK", sequence)
|—————————————————————Node:identifier Text: sprintf
|—————————————————————Node:argument_list Text: (resp, "[%d] OK", sequence)
|——————————————————————Node:( Text: (
|——————————————————————Node:identifier Text: resp
|——————————————————————Node:, Text: ,
|——————————————————————Node:string_literal Text: "[%d] OK"
|———————————————————————Node:" Text: "
|———————————————————————Node:string_content Text: [%d] OK
|———————————————————————Node:" Text: "
|——————————————————————Node:, Text: ,
|——————————————————————Node:identifier Text: sequence
|——————————————————————Node:) Text: )
|———————————————————Node:; Text: ;
|—————————————————Node:} Text: }
|———————————————Node:} Text: }
|——————————————Node:comment Text: /* NMT reset (node or communication) */
|——————————————Node:else_clause Text: else if(strcmp(token, "reset") == 0) {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                if(strcmp(token, "node") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_NODE, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }
                else if(strcmp(token, "comm") == 0 || strcmp(token, "communication") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_COMMUNICATION, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                else {
                    err = 1;
                }
            }
        }

        /* set command - multiple settings */
        else if(strcmp(token, "set") == 0) {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0) {
                /* sdo_timeout <value> */
                if(strcmp(token, "sdo_timeout") == 0) {
                    uint16_t tmout;

                    token = getTok(NULL, spaceDelim, &err);
                    tmout = (uint16_t)getU32(token, 0, 10000, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        SDOtimeoutTime = tmout;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* sdo_block <value> */
                else if(strcmp(token, "sdo_block") == 0) {
                    uint8_t blk;

                    token = getTok(NULL, spaceDelim, &err);
                    blk = (uint8_t)getU32(token, 0, 1, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        blockTransferEnable = blk;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* node <value> */
                else if(strcmp(token, "node") == 0) {
                    uint16_t node;

                    token = getTok(NULL, spaceDelim, &err);
                    node = (uint16_t)getU32(token, 1, 127, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        comm_node_default = node;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* Unknown command */
                else {
                    err = 1;
                }
            }
        }

        /* Unknown command */
        else {
            respErrorCode = respErrorReqNotSupported;
            err = 1;
        }
|———————————————Node:else Text: else
|———————————————Node:if_statement Text: if(strcmp(token, "reset") == 0) {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                if(strcmp(token, "node") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_NODE, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }
                else if(strcmp(token, "comm") == 0 || strcmp(token, "communication") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_COMMUNICATION, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                else {
                    err = 1;
                }
            }
        }

        /* set command - multiple settings */
        else if(strcmp(token, "set") == 0) {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0) {
                /* sdo_timeout <value> */
                if(strcmp(token, "sdo_timeout") == 0) {
                    uint16_t tmout;

                    token = getTok(NULL, spaceDelim, &err);
                    tmout = (uint16_t)getU32(token, 0, 10000, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        SDOtimeoutTime = tmout;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* sdo_block <value> */
                else if(strcmp(token, "sdo_block") == 0) {
                    uint8_t blk;

                    token = getTok(NULL, spaceDelim, &err);
                    blk = (uint8_t)getU32(token, 0, 1, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        blockTransferEnable = blk;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* node <value> */
                else if(strcmp(token, "node") == 0) {
                    uint16_t node;

                    token = getTok(NULL, spaceDelim, &err);
                    node = (uint16_t)getU32(token, 1, 127, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        comm_node_default = node;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* Unknown command */
                else {
                    err = 1;
                }
            }
        }

        /* Unknown command */
        else {
            respErrorCode = respErrorReqNotSupported;
            err = 1;
        }
|————————————————Node:if Text: if
|————————————————Node:parenthesized_expression Text: (strcmp(token, "reset") == 0)
|—————————————————Node:( Text: (
|—————————————————Node:binary_expression Text: strcmp(token, "reset") == 0
|——————————————————Node:call_expression Text: strcmp(token, "reset")
|———————————————————Node:identifier Text: strcmp
|———————————————————Node:argument_list Text: (token, "reset")
|————————————————————Node:( Text: (
|————————————————————Node:identifier Text: token
|————————————————————Node:, Text: ,
|————————————————————Node:string_literal Text: "reset"
|—————————————————————Node:" Text: "
|—————————————————————Node:string_content Text: reset
|—————————————————————Node:" Text: "
|————————————————————Node:) Text: )
|——————————————————Node:== Text: ==
|——————————————————Node:number_literal Text: 0
|—————————————————Node:) Text: )
|————————————————Node:compound_statement Text: {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
            if(err == 0) {
                if(strcmp(token, "node") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_NODE, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }
                else if(strcmp(token, "comm") == 0 || strcmp(token, "communication") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_COMMUNICATION, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                else {
                    err = 1;
                }
            }
        }
|—————————————————Node:{ Text: {
|—————————————————Node:expression_statement Text: token = getTok(NULL, spaceDelim, &err);
|——————————————————Node:assignment_expression Text: token = getTok(NULL, spaceDelim, &err)
|———————————————————Node:identifier Text: token
|———————————————————Node:= Text: =
|———————————————————Node:call_expression Text: getTok(NULL, spaceDelim, &err)
|————————————————————Node:identifier Text: getTok
|————————————————————Node:argument_list Text: (NULL, spaceDelim, &err)
|—————————————————————Node:( Text: (
|—————————————————————Node:null Text: NULL
|——————————————————————Node:NULL Text: NULL
|—————————————————————Node:, Text: ,
|—————————————————————Node:identifier Text: spaceDelim
|—————————————————————Node:, Text: ,
|—————————————————————Node:pointer_expression Text: &err
|——————————————————————Node:& Text: &
|——————————————————————Node:identifier Text: err
|—————————————————————Node:) Text: )
|——————————————————Node:; Text: ;
|—————————————————Node:if_statement Text: if(err == 0 && comm_node > 127) {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
|——————————————————Node:if Text: if
|——————————————————Node:parenthesized_expression Text: (err == 0 && comm_node > 127)
|———————————————————Node:( Text: (
|———————————————————Node:binary_expression Text: err == 0 && comm_node > 127
|————————————————————Node:binary_expression Text: err == 0
|—————————————————————Node:identifier Text: err
|—————————————————————Node:== Text: ==
|—————————————————————Node:number_literal Text: 0
|————————————————————Node:&& Text: &&
|————————————————————Node:binary_expression Text: comm_node > 127
|—————————————————————Node:identifier Text: comm_node
|—————————————————————Node:> Text: >
|—————————————————————Node:number_literal Text: 127
|———————————————————Node:) Text: )
|——————————————————Node:compound_statement Text: {
                err = 1;
                respErrorCode = respErrorNoDefaultNodeSet;
            }
|———————————————————Node:{ Text: {
|———————————————————Node:expression_statement Text: err = 1;
|————————————————————Node:assignment_expression Text: err = 1
|—————————————————————Node:identifier Text: err
|—————————————————————Node:= Text: =
|—————————————————————Node:number_literal Text: 1
|————————————————————Node:; Text: ;
|———————————————————Node:expression_statement Text: respErrorCode = respErrorNoDefaultNodeSet;
|————————————————————Node:assignment_expression Text: respErrorCode = respErrorNoDefaultNodeSet
|—————————————————————Node:identifier Text: respErrorCode
|—————————————————————Node:= Text: =
|—————————————————————Node:identifier Text: respErrorNoDefaultNodeSet
|————————————————————Node:; Text: ;
|———————————————————Node:} Text: }
|—————————————————Node:if_statement Text: if(err == 0) {
                if(strcmp(token, "node") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_NODE, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }
                else if(strcmp(token, "comm") == 0 || strcmp(token, "communication") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_COMMUNICATION, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                else {
                    err = 1;
                }
            }
|——————————————————Node:if Text: if
|——————————————————Node:parenthesized_expression Text: (err == 0)
|———————————————————Node:( Text: (
|———————————————————Node:binary_expression Text: err == 0
|————————————————————Node:identifier Text: err
|————————————————————Node:== Text: ==
|————————————————————Node:number_literal Text: 0
|———————————————————Node:) Text: )
|——————————————————Node:compound_statement Text: {
                if(strcmp(token, "node") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_NODE, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }
                else if(strcmp(token, "comm") == 0 || strcmp(token, "communication") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_COMMUNICATION, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                else {
                    err = 1;
                }
            }
|———————————————————Node:{ Text: {
|———————————————————Node:if_statement Text: if(strcmp(token, "node") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_NODE, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }
                else if(strcmp(token, "comm") == 0 || strcmp(token, "communication") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_COMMUNICATION, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                else {
                    err = 1;
                }
|————————————————————Node:if Text: if
|————————————————————Node:parenthesized_expression Text: (strcmp(token, "node") == 0)
|—————————————————————Node:( Text: (
|—————————————————————Node:binary_expression Text: strcmp(token, "node") == 0
|——————————————————————Node:call_expression Text: strcmp(token, "node")
|———————————————————————Node:identifier Text: strcmp
|———————————————————————Node:argument_list Text: (token, "node")
|————————————————————————Node:( Text: (
|————————————————————————Node:identifier Text: token
|————————————————————————Node:, Text: ,
|————————————————————————Node:string_literal Text: "node"
|—————————————————————————Node:" Text: "
|—————————————————————————Node:string_content Text: node
|—————————————————————————Node:" Text: "
|————————————————————————Node:) Text: )
|——————————————————————Node:== Text: ==
|——————————————————————Node:number_literal Text: 0
|—————————————————————Node:) Text: )
|————————————————————Node:compound_statement Text: {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_NODE, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }
|—————————————————————Node:{ Text: {
|—————————————————————Node:expression_statement Text: lastTok(NULL, spaceDelim, &err);
|——————————————————————Node:call_expression Text: lastTok(NULL, spaceDelim, &err)
|———————————————————————Node:identifier Text: lastTok
|———————————————————————Node:argument_list Text: (NULL, spaceDelim, &err)
|————————————————————————Node:( Text: (
|————————————————————————Node:null Text: NULL
|—————————————————————————Node:NULL Text: NULL
|————————————————————————Node:, Text: ,
|————————————————————————Node:identifier Text: spaceDelim
|————————————————————————Node:, Text: ,
|————————————————————————Node:pointer_expression Text: &err
|—————————————————————————Node:& Text: &
|—————————————————————————Node:identifier Text: err
|————————————————————————Node:) Text: )
|——————————————————————Node:; Text: ;
|—————————————————————Node:if_statement Text: if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_NODE, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
|——————————————————————Node:if Text: if
|——————————————————————Node:parenthesized_expression Text: (err == 0)
|———————————————————————Node:( Text: (
|———————————————————————Node:binary_expression Text: err == 0
|————————————————————————Node:identifier Text: err
|————————————————————————Node:== Text: ==
|————————————————————————Node:number_literal Text: 0
|———————————————————————Node:) Text: )
|——————————————————————Node:compound_statement Text: {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_NODE, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
|———————————————————————Node:{ Text: {
|———————————————————————Node:expression_statement Text: err = CO_sendNMTcommand(CO, CO_NMT_RESET_NODE, comm_node) ? 1:0;
|————————————————————————Node:assignment_expression Text: err = CO_sendNMTcommand(CO, CO_NMT_RESET_NODE, comm_node) ? 1:0
|—————————————————————————Node:identifier Text: err
|—————————————————————————Node:= Text: =
|—————————————————————————Node:conditional_expression Text: CO_sendNMTcommand(CO, CO_NMT_RESET_NODE, comm_node) ? 1:0
|——————————————————————————Node:call_expression Text: CO_sendNMTcommand(CO, CO_NMT_RESET_NODE, comm_node)
|———————————————————————————Node:identifier Text: CO_sendNMTcommand
|———————————————————————————Node:argument_list Text: (CO, CO_NMT_RESET_NODE, comm_node)
|————————————————————————————Node:( Text: (
|————————————————————————————Node:identifier Text: CO
|————————————————————————————Node:, Text: ,
|————————————————————————————Node:identifier Text: CO_NMT_RESET_NODE
|————————————————————————————Node:, Text: ,
|————————————————————————————Node:identifier Text: comm_node
|————————————————————————————Node:) Text: )
|——————————————————————————Node:? Text: ?
|——————————————————————————Node:number_literal Text: 1
|——————————————————————————Node:: Text: :
|——————————————————————————Node:number_literal Text: 0
|————————————————————————Node:; Text: ;
|———————————————————————Node:if_statement Text: if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
|————————————————————————Node:if Text: if
|————————————————————————Node:parenthesized_expression Text: (err == 0)
|—————————————————————————Node:( Text: (
|—————————————————————————Node:binary_expression Text: err == 0
|——————————————————————————Node:identifier Text: err
|——————————————————————————Node:== Text: ==
|——————————————————————————Node:number_literal Text: 0
|—————————————————————————Node:) Text: )
|————————————————————————Node:expression_statement Text: respLen = sprintf(resp, "[%d] OK", sequence);
|—————————————————————————Node:assignment_expression Text: respLen = sprintf(resp, "[%d] OK", sequence)
|——————————————————————————Node:identifier Text: respLen
|——————————————————————————Node:= Text: =
|——————————————————————————Node:call_expression Text: sprintf(resp, "[%d] OK", sequence)
|———————————————————————————Node:identifier Text: sprintf
|———————————————————————————Node:argument_list Text: (resp, "[%d] OK", sequence)
|————————————————————————————Node:( Text: (
|————————————————————————————Node:identifier Text: resp
|————————————————————————————Node:, Text: ,
|————————————————————————————Node:string_literal Text: "[%d] OK"
|—————————————————————————————Node:" Text: "
|—————————————————————————————Node:string_content Text: [%d] OK
|—————————————————————————————Node:" Text: "
|————————————————————————————Node:, Text: ,
|————————————————————————————Node:identifier Text: sequence
|————————————————————————————Node:) Text: )
|—————————————————————————Node:; Text: ;
|———————————————————————Node:} Text: }
|—————————————————————Node:} Text: }
|————————————————————Node:else_clause Text: else if(strcmp(token, "comm") == 0 || strcmp(token, "communication") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_COMMUNICATION, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                else {
                    err = 1;
                }
|—————————————————————Node:else Text: else
|—————————————————————Node:if_statement Text: if(strcmp(token, "comm") == 0 || strcmp(token, "communication") == 0) {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_COMMUNICATION, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                else {
                    err = 1;
                }
|——————————————————————Node:if Text: if
|——————————————————————Node:parenthesized_expression Text: (strcmp(token, "comm") == 0 || strcmp(token, "communication") == 0)
|———————————————————————Node:( Text: (
|———————————————————————Node:binary_expression Text: strcmp(token, "comm") == 0 || strcmp(token, "communication") == 0
|————————————————————————Node:binary_expression Text: strcmp(token, "comm") == 0
|—————————————————————————Node:call_expression Text: strcmp(token, "comm")
|——————————————————————————Node:identifier Text: strcmp
|——————————————————————————Node:argument_list Text: (token, "comm")
|———————————————————————————Node:( Text: (
|———————————————————————————Node:identifier Text: token
|———————————————————————————Node:, Text: ,
|———————————————————————————Node:string_literal Text: "comm"
|————————————————————————————Node:" Text: "
|————————————————————————————Node:string_content Text: comm
|————————————————————————————Node:" Text: "
|———————————————————————————Node:) Text: )
|—————————————————————————Node:== Text: ==
|—————————————————————————Node:number_literal Text: 0
|————————————————————————Node:|| Text: ||
|————————————————————————Node:binary_expression Text: strcmp(token, "communication") == 0
|—————————————————————————Node:call_expression Text: strcmp(token, "communication")
|——————————————————————————Node:identifier Text: strcmp
|——————————————————————————Node:argument_list Text: (token, "communication")
|———————————————————————————Node:( Text: (
|———————————————————————————Node:identifier Text: token
|———————————————————————————Node:, Text: ,
|———————————————————————————Node:string_literal Text: "communication"
|————————————————————————————Node:" Text: "
|————————————————————————————Node:string_content Text: communication
|————————————————————————————Node:" Text: "
|———————————————————————————Node:) Text: )
|—————————————————————————Node:== Text: ==
|—————————————————————————Node:number_literal Text: 0
|———————————————————————Node:) Text: )
|——————————————————————Node:compound_statement Text: {
                    lastTok(NULL, spaceDelim, &err);
                    if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_COMMUNICATION, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }
|———————————————————————Node:{ Text: {
|———————————————————————Node:expression_statement Text: lastTok(NULL, spaceDelim, &err);
|————————————————————————Node:call_expression Text: lastTok(NULL, spaceDelim, &err)
|—————————————————————————Node:identifier Text: lastTok
|—————————————————————————Node:argument_list Text: (NULL, spaceDelim, &err)
|——————————————————————————Node:( Text: (
|——————————————————————————Node:null Text: NULL
|———————————————————————————Node:NULL Text: NULL
|——————————————————————————Node:, Text: ,
|——————————————————————————Node:identifier Text: spaceDelim
|——————————————————————————Node:, Text: ,
|——————————————————————————Node:pointer_expression Text: &err
|———————————————————————————Node:& Text: &
|———————————————————————————Node:identifier Text: err
|——————————————————————————Node:) Text: )
|————————————————————————Node:; Text: ;
|———————————————————————Node:if_statement Text: if(err == 0) {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_COMMUNICATION, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
|————————————————————————Node:if Text: if
|————————————————————————Node:parenthesized_expression Text: (err == 0)
|—————————————————————————Node:( Text: (
|—————————————————————————Node:binary_expression Text: err == 0
|——————————————————————————Node:identifier Text: err
|——————————————————————————Node:== Text: ==
|——————————————————————————Node:number_literal Text: 0
|—————————————————————————Node:) Text: )
|————————————————————————Node:compound_statement Text: {
                        err = CO_sendNMTcommand(CO, CO_NMT_RESET_COMMUNICATION, comm_node) ? 1:0;
                        if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
                    }
|—————————————————————————Node:{ Text: {
|—————————————————————————Node:expression_statement Text: err = CO_sendNMTcommand(CO, CO_NMT_RESET_COMMUNICATION, comm_node) ? 1:0;
|——————————————————————————Node:assignment_expression Text: err = CO_sendNMTcommand(CO, CO_NMT_RESET_COMMUNICATION, comm_node) ? 1:0
|———————————————————————————Node:identifier Text: err
|———————————————————————————Node:= Text: =
|———————————————————————————Node:conditional_expression Text: CO_sendNMTcommand(CO, CO_NMT_RESET_COMMUNICATION, comm_node) ? 1:0
|————————————————————————————Node:call_expression Text: CO_sendNMTcommand(CO, CO_NMT_RESET_COMMUNICATION, comm_node)
|—————————————————————————————Node:identifier Text: CO_sendNMTcommand
|—————————————————————————————Node:argument_list Text: (CO, CO_NMT_RESET_COMMUNICATION, comm_node)
|——————————————————————————————Node:( Text: (
|——————————————————————————————Node:identifier Text: CO
|——————————————————————————————Node:, Text: ,
|——————————————————————————————Node:identifier Text: CO_NMT_RESET_COMMUNICATION
|——————————————————————————————Node:, Text: ,
|——————————————————————————————Node:identifier Text: comm_node
|——————————————————————————————Node:) Text: )
|————————————————————————————Node:? Text: ?
|————————————————————————————Node:number_literal Text: 1
|————————————————————————————Node:: Text: :
|————————————————————————————Node:number_literal Text: 0
|——————————————————————————Node:; Text: ;
|—————————————————————————Node:if_statement Text: if(err == 0) respLen = sprintf(resp, "[%d] OK", sequence);
|——————————————————————————Node:if Text: if
|——————————————————————————Node:parenthesized_expression Text: (err == 0)
|———————————————————————————Node:( Text: (
|———————————————————————————Node:binary_expression Text: err == 0
|————————————————————————————Node:identifier Text: err
|————————————————————————————Node:== Text: ==
|————————————————————————————Node:number_literal Text: 0
|———————————————————————————Node:) Text: )
|——————————————————————————Node:expression_statement Text: respLen = sprintf(resp, "[%d] OK", sequence);
|———————————————————————————Node:assignment_expression Text: respLen = sprintf(resp, "[%d] OK", sequence)
|————————————————————————————Node:identifier Text: respLen
|————————————————————————————Node:= Text: =
|————————————————————————————Node:call_expression Text: sprintf(resp, "[%d] OK", sequence)
|—————————————————————————————Node:identifier Text: sprintf
|—————————————————————————————Node:argument_list Text: (resp, "[%d] OK", sequence)
|——————————————————————————————Node:( Text: (
|——————————————————————————————Node:identifier Text: resp
|——————————————————————————————Node:, Text: ,
|——————————————————————————————Node:string_literal Text: "[%d] OK"
|———————————————————————————————Node:" Text: "
|———————————————————————————————Node:string_content Text: [%d] OK
|———————————————————————————————Node:" Text: "
|——————————————————————————————Node:, Text: ,
|——————————————————————————————Node:identifier Text: sequence
|——————————————————————————————Node:) Text: )
|———————————————————————————Node:; Text: ;
|—————————————————————————Node:} Text: }
|———————————————————————Node:} Text: }
|——————————————————————Node:else_clause Text: else {
                    err = 1;
                }
|———————————————————————Node:else Text: else
|———————————————————————Node:compound_statement Text: {
                    err = 1;
                }
|————————————————————————Node:{ Text: {
|————————————————————————Node:expression_statement Text: err = 1;
|—————————————————————————Node:assignment_expression Text: err = 1
|——————————————————————————Node:identifier Text: err
|——————————————————————————Node:= Text: =
|——————————————————————————Node:number_literal Text: 1
|—————————————————————————Node:; Text: ;
|————————————————————————Node:} Text: }
|———————————————————Node:} Text: }
|—————————————————Node:} Text: }
|————————————————Node:comment Text: /* set command - multiple settings */
|————————————————Node:else_clause Text: else if(strcmp(token, "set") == 0) {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0) {
                /* sdo_timeout <value> */
                if(strcmp(token, "sdo_timeout") == 0) {
                    uint16_t tmout;

                    token = getTok(NULL, spaceDelim, &err);
                    tmout = (uint16_t)getU32(token, 0, 10000, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        SDOtimeoutTime = tmout;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* sdo_block <value> */
                else if(strcmp(token, "sdo_block") == 0) {
                    uint8_t blk;

                    token = getTok(NULL, spaceDelim, &err);
                    blk = (uint8_t)getU32(token, 0, 1, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        blockTransferEnable = blk;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* node <value> */
                else if(strcmp(token, "node") == 0) {
                    uint16_t node;

                    token = getTok(NULL, spaceDelim, &err);
                    node = (uint16_t)getU32(token, 1, 127, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        comm_node_default = node;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* Unknown command */
                else {
                    err = 1;
                }
            }
        }

        /* Unknown command */
        else {
            respErrorCode = respErrorReqNotSupported;
            err = 1;
        }
|—————————————————Node:else Text: else
|—————————————————Node:if_statement Text: if(strcmp(token, "set") == 0) {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0) {
                /* sdo_timeout <value> */
                if(strcmp(token, "sdo_timeout") == 0) {
                    uint16_t tmout;

                    token = getTok(NULL, spaceDelim, &err);
                    tmout = (uint16_t)getU32(token, 0, 10000, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        SDOtimeoutTime = tmout;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* sdo_block <value> */
                else if(strcmp(token, "sdo_block") == 0) {
                    uint8_t blk;

                    token = getTok(NULL, spaceDelim, &err);
                    blk = (uint8_t)getU32(token, 0, 1, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        blockTransferEnable = blk;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* node <value> */
                else if(strcmp(token, "node") == 0) {
                    uint16_t node;

                    token = getTok(NULL, spaceDelim, &err);
                    node = (uint16_t)getU32(token, 1, 127, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        comm_node_default = node;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* Unknown command */
                else {
                    err = 1;
                }
            }
        }

        /* Unknown command */
        else {
            respErrorCode = respErrorReqNotSupported;
            err = 1;
        }
|——————————————————Node:if Text: if
|——————————————————Node:parenthesized_expression Text: (strcmp(token, "set") == 0)
|———————————————————Node:( Text: (
|———————————————————Node:binary_expression Text: strcmp(token, "set") == 0
|————————————————————Node:call_expression Text: strcmp(token, "set")
|—————————————————————Node:identifier Text: strcmp
|—————————————————————Node:argument_list Text: (token, "set")
|——————————————————————Node:( Text: (
|——————————————————————Node:identifier Text: token
|——————————————————————Node:, Text: ,
|——————————————————————Node:string_literal Text: "set"
|———————————————————————Node:" Text: "
|———————————————————————Node:string_content Text: set
|———————————————————————Node:" Text: "
|——————————————————————Node:) Text: )
|————————————————————Node:== Text: ==
|————————————————————Node:number_literal Text: 0
|———————————————————Node:) Text: )
|——————————————————Node:compound_statement Text: {

            token = getTok(NULL, spaceDelim, &err);
            if(err == 0) {
                /* sdo_timeout <value> */
                if(strcmp(token, "sdo_timeout") == 0) {
                    uint16_t tmout;

                    token = getTok(NULL, spaceDelim, &err);
                    tmout = (uint16_t)getU32(token, 0, 10000, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        SDOtimeoutTime = tmout;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* sdo_block <value> */
                else if(strcmp(token, "sdo_block") == 0) {
                    uint8_t blk;

                    token = getTok(NULL, spaceDelim, &err);
                    blk = (uint8_t)getU32(token, 0, 1, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        blockTransferEnable = blk;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* node <value> */
                else if(strcmp(token, "node") == 0) {
                    uint16_t node;

                    token = getTok(NULL, spaceDelim, &err);
                    node = (uint16_t)getU32(token, 1, 127, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        comm_node_default = node;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* Unknown command */
                else {
                    err = 1;
                }
            }
        }
|———————————————————Node:{ Text: {
|———————————————————Node:expression_statement Text: token = getTok(NULL, spaceDelim, &err);
|————————————————————Node:assignment_expression Text: token = getTok(NULL, spaceDelim, &err)
|—————————————————————Node:identifier Text: token
|—————————————————————Node:= Text: =
|—————————————————————Node:call_expression Text: getTok(NULL, spaceDelim, &err)
|——————————————————————Node:identifier Text: getTok
|——————————————————————Node:argument_list Text: (NULL, spaceDelim, &err)
|———————————————————————Node:( Text: (
|———————————————————————Node:null Text: NULL
|————————————————————————Node:NULL Text: NULL
|———————————————————————Node:, Text: ,
|———————————————————————Node:identifier Text: spaceDelim
|———————————————————————Node:, Text: ,
|———————————————————————Node:pointer_expression Text: &err
|————————————————————————Node:& Text: &
|————————————————————————Node:identifier Text: err
|———————————————————————Node:) Text: )
|————————————————————Node:; Text: ;
|———————————————————Node:if_statement Text: if(err == 0) {
                /* sdo_timeout <value> */
                if(strcmp(token, "sdo_timeout") == 0) {
                    uint16_t tmout;

                    token = getTok(NULL, spaceDelim, &err);
                    tmout = (uint16_t)getU32(token, 0, 10000, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        SDOtimeoutTime = tmout;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* sdo_block <value> */
                else if(strcmp(token, "sdo_block") == 0) {
                    uint8_t blk;

                    token = getTok(NULL, spaceDelim, &err);
                    blk = (uint8_t)getU32(token, 0, 1, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        blockTransferEnable = blk;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* node <value> */
                else if(strcmp(token, "node") == 0) {
                    uint16_t node;

                    token = getTok(NULL, spaceDelim, &err);
                    node = (uint16_t)getU32(token, 1, 127, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        comm_node_default = node;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* Unknown command */
                else {
                    err = 1;
                }
            }
|————————————————————Node:if Text: if
|————————————————————Node:parenthesized_expression Text: (err == 0)
|—————————————————————Node:( Text: (
|—————————————————————Node:binary_expression Text: err == 0
|——————————————————————Node:identifier Text: err
|——————————————————————Node:== Text: ==
|——————————————————————Node:number_literal Text: 0
|—————————————————————Node:) Text: )
|————————————————————Node:compound_statement Text: {
                /* sdo_timeout <value> */
                if(strcmp(token, "sdo_timeout") == 0) {
                    uint16_t tmout;

                    token = getTok(NULL, spaceDelim, &err);
                    tmout = (uint16_t)getU32(token, 0, 10000, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        SDOtimeoutTime = tmout;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* sdo_block <value> */
                else if(strcmp(token, "sdo_block") == 0) {
                    uint8_t blk;

                    token = getTok(NULL, spaceDelim, &err);
                    blk = (uint8_t)getU32(token, 0, 1, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        blockTransferEnable = blk;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* node <value> */
                else if(strcmp(token, "node") == 0) {
                    uint16_t node;

                    token = getTok(NULL, spaceDelim, &err);
                    node = (uint16_t)getU32(token, 1, 127, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        comm_node_default = node;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* Unknown command */
                else {
                    err = 1;
                }
            }
|—————————————————————Node:{ Text: {
|—————————————————————Node:comment Text: /* sdo_timeout <value> */
|—————————————————————Node:if_statement Text: if(strcmp(token, "sdo_timeout") == 0) {
                    uint16_t tmout;

                    token = getTok(NULL, spaceDelim, &err);
                    tmout = (uint16_t)getU32(token, 0, 10000, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        SDOtimeoutTime = tmout;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* sdo_block <value> */
                else if(strcmp(token, "sdo_block") == 0) {
                    uint8_t blk;

                    token = getTok(NULL, spaceDelim, &err);
                    blk = (uint8_t)getU32(token, 0, 1, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        blockTransferEnable = blk;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* node <value> */
                else if(strcmp(token, "node") == 0) {
                    uint16_t node;

                    token = getTok(NULL, spaceDelim, &err);
                    node = (uint16_t)getU32(token, 1, 127, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        comm_node_default = node;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* Unknown command */
                else {
                    err = 1;
                }
|——————————————————————Node:if Text: if
|——————————————————————Node:parenthesized_expression Text: (strcmp(token, "sdo_timeout") == 0)
|———————————————————————Node:( Text: (
|———————————————————————Node:binary_expression Text: strcmp(token, "sdo_timeout") == 0
|————————————————————————Node:call_expression Text: strcmp(token, "sdo_timeout")
|—————————————————————————Node:identifier Text: strcmp
|—————————————————————————Node:argument_list Text: (token, "sdo_timeout")
|——————————————————————————Node:( Text: (
|——————————————————————————Node:identifier Text: token
|——————————————————————————Node:, Text: ,
|——————————————————————————Node:string_literal Text: "sdo_timeout"
|———————————————————————————Node:" Text: "
|———————————————————————————Node:string_content Text: sdo_timeout
|———————————————————————————Node:" Text: "
|——————————————————————————Node:) Text: )
|————————————————————————Node:== Text: ==
|————————————————————————Node:number_literal Text: 0
|———————————————————————Node:) Text: )
|——————————————————————Node:compound_statement Text: {
                    uint16_t tmout;

                    token = getTok(NULL, spaceDelim, &err);
                    tmout = (uint16_t)getU32(token, 0, 10000, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        SDOtimeoutTime = tmout;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }
|———————————————————————Node:{ Text: {
|———————————————————————Node:declaration Text: uint16_t tmout;
|————————————————————————Node:primitive_type Text: uint16_t
|————————————————————————Node:identifier Text: tmout
|————————————————————————Node:; Text: ;
|———————————————————————Node:expression_statement Text: token = getTok(NULL, spaceDelim, &err);
|————————————————————————Node:assignment_expression Text: token = getTok(NULL, spaceDelim, &err)
|—————————————————————————Node:identifier Text: token
|—————————————————————————Node:= Text: =
|—————————————————————————Node:call_expression Text: getTok(NULL, spaceDelim, &err)
|——————————————————————————Node:identifier Text: getTok
|——————————————————————————Node:argument_list Text: (NULL, spaceDelim, &err)
|———————————————————————————Node:( Text: (
|———————————————————————————Node:null Text: NULL
|————————————————————————————Node:NULL Text: NULL
|———————————————————————————Node:, Text: ,
|———————————————————————————Node:identifier Text: spaceDelim
|———————————————————————————Node:, Text: ,
|———————————————————————————Node:pointer_expression Text: &err
|————————————————————————————Node:& Text: &
|————————————————————————————Node:identifier Text: err
|———————————————————————————Node:) Text: )
|————————————————————————Node:; Text: ;
|———————————————————————Node:expression_statement Text: tmout = (uint16_t)getU32(token, 0, 10000, &err);
|————————————————————————Node:assignment_expression Text: tmout = (uint16_t)getU32(token, 0, 10000, &err)
|—————————————————————————Node:identifier Text: tmout
|—————————————————————————Node:= Text: =
|—————————————————————————Node:cast_expression Text: (uint16_t)getU32(token, 0, 10000, &err)
|——————————————————————————Node:( Text: (
|——————————————————————————Node:type_descriptor Text: uint16_t
|———————————————————————————Node:primitive_type Text: uint16_t
|——————————————————————————Node:) Text: )
|——————————————————————————Node:call_expression Text: getU32(token, 0, 10000, &err)
|———————————————————————————Node:identifier Text: getU32
|———————————————————————————Node:argument_list Text: (token, 0, 10000, &err)
|————————————————————————————Node:( Text: (
|————————————————————————————Node:identifier Text: token
|————————————————————————————Node:, Text: ,
|————————————————————————————Node:number_literal Text: 0
|————————————————————————————Node:, Text: ,
|————————————————————————————Node:number_literal Text: 10000
|————————————————————————————Node:, Text: ,
|————————————————————————————Node:pointer_expression Text: &err
|—————————————————————————————Node:& Text: &
|—————————————————————————————Node:identifier Text: err
|————————————————————————————Node:) Text: )
|————————————————————————Node:; Text: ;
|———————————————————————Node:expression_statement Text: lastTok(NULL, spaceDelim, &err);
|————————————————————————Node:call_expression Text: lastTok(NULL, spaceDelim, &err)
|—————————————————————————Node:identifier Text: lastTok
|—————————————————————————Node:argument_list Text: (NULL, spaceDelim, &err)
|——————————————————————————Node:( Text: (
|——————————————————————————Node:null Text: NULL
|———————————————————————————Node:NULL Text: NULL
|——————————————————————————Node:, Text: ,
|——————————————————————————Node:identifier Text: spaceDelim
|——————————————————————————Node:, Text: ,
|——————————————————————————Node:pointer_expression Text: &err
|———————————————————————————Node:& Text: &
|———————————————————————————Node:identifier Text: err
|——————————————————————————Node:) Text: )
|————————————————————————Node:; Text: ;
|———————————————————————Node:comment Text: /* Write to variable */
|———————————————————————Node:if_statement Text: if(err == 0) {
                        SDOtimeoutTime = tmout;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
|————————————————————————Node:if Text: if
|————————————————————————Node:parenthesized_expression Text: (err == 0)
|—————————————————————————Node:( Text: (
|—————————————————————————Node:binary_expression Text: err == 0
|——————————————————————————Node:identifier Text: err
|——————————————————————————Node:== Text: ==
|——————————————————————————Node:number_literal Text: 0
|—————————————————————————Node:) Text: )
|————————————————————————Node:compound_statement Text: {
                        SDOtimeoutTime = tmout;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
|—————————————————————————Node:{ Text: {
|—————————————————————————Node:expression_statement Text: SDOtimeoutTime = tmout;
|——————————————————————————Node:assignment_expression Text: SDOtimeoutTime = tmout
|———————————————————————————Node:identifier Text: SDOtimeoutTime
|———————————————————————————Node:= Text: =
|———————————————————————————Node:identifier Text: tmout
|——————————————————————————Node:; Text: ;
|—————————————————————————Node:expression_statement Text: respLen = sprintf(resp, "[%d] OK", sequence);
|——————————————————————————Node:assignment_expression Text: respLen = sprintf(resp, "[%d] OK", sequence)
|———————————————————————————Node:identifier Text: respLen
|———————————————————————————Node:= Text: =
|———————————————————————————Node:call_expression Text: sprintf(resp, "[%d] OK", sequence)
|————————————————————————————Node:identifier Text: sprintf
|————————————————————————————Node:argument_list Text: (resp, "[%d] OK", sequence)
|—————————————————————————————Node:( Text: (
|—————————————————————————————Node:identifier Text: resp
|—————————————————————————————Node:, Text: ,
|—————————————————————————————Node:string_literal Text: "[%d] OK"
|——————————————————————————————Node:" Text: "
|——————————————————————————————Node:string_content Text: [%d] OK
|——————————————————————————————Node:" Text: "
|—————————————————————————————Node:, Text: ,
|—————————————————————————————Node:identifier Text: sequence
|—————————————————————————————Node:) Text: )
|——————————————————————————Node:; Text: ;
|—————————————————————————Node:} Text: }
|———————————————————————Node:} Text: }
|——————————————————————Node:comment Text: /* sdo_block <value> */
|——————————————————————Node:else_clause Text: else if(strcmp(token, "sdo_block") == 0) {
                    uint8_t blk;

                    token = getTok(NULL, spaceDelim, &err);
                    blk = (uint8_t)getU32(token, 0, 1, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        blockTransferEnable = blk;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* node <value> */
                else if(strcmp(token, "node") == 0) {
                    uint16_t node;

                    token = getTok(NULL, spaceDelim, &err);
                    node = (uint16_t)getU32(token, 1, 127, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        comm_node_default = node;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* Unknown command */
                else {
                    err = 1;
                }
|———————————————————————Node:else Text: else
|———————————————————————Node:if_statement Text: if(strcmp(token, "sdo_block") == 0) {
                    uint8_t blk;

                    token = getTok(NULL, spaceDelim, &err);
                    blk = (uint8_t)getU32(token, 0, 1, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        blockTransferEnable = blk;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* node <value> */
                else if(strcmp(token, "node") == 0) {
                    uint16_t node;

                    token = getTok(NULL, spaceDelim, &err);
                    node = (uint16_t)getU32(token, 1, 127, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        comm_node_default = node;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* Unknown command */
                else {
                    err = 1;
                }
|————————————————————————Node:if Text: if
|————————————————————————Node:parenthesized_expression Text: (strcmp(token, "sdo_block") == 0)
|—————————————————————————Node:( Text: (
|—————————————————————————Node:binary_expression Text: strcmp(token, "sdo_block") == 0
|——————————————————————————Node:call_expression Text: strcmp(token, "sdo_block")
|———————————————————————————Node:identifier Text: strcmp
|———————————————————————————Node:argument_list Text: (token, "sdo_block")
|————————————————————————————Node:( Text: (
|————————————————————————————Node:identifier Text: token
|————————————————————————————Node:, Text: ,
|————————————————————————————Node:string_literal Text: "sdo_block"
|—————————————————————————————Node:" Text: "
|—————————————————————————————Node:string_content Text: sdo_block
|—————————————————————————————Node:" Text: "
|————————————————————————————Node:) Text: )
|——————————————————————————Node:== Text: ==
|——————————————————————————Node:number_literal Text: 0
|—————————————————————————Node:) Text: )
|————————————————————————Node:compound_statement Text: {
                    uint8_t blk;

                    token = getTok(NULL, spaceDelim, &err);
                    blk = (uint8_t)getU32(token, 0, 1, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        blockTransferEnable = blk;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }
|—————————————————————————Node:{ Text: {
|—————————————————————————Node:declaration Text: uint8_t blk;
|——————————————————————————Node:primitive_type Text: uint8_t
|——————————————————————————Node:identifier Text: blk
|——————————————————————————Node:; Text: ;
|—————————————————————————Node:expression_statement Text: token = getTok(NULL, spaceDelim, &err);
|——————————————————————————Node:assignment_expression Text: token = getTok(NULL, spaceDelim, &err)
|———————————————————————————Node:identifier Text: token
|———————————————————————————Node:= Text: =
|———————————————————————————Node:call_expression Text: getTok(NULL, spaceDelim, &err)
|————————————————————————————Node:identifier Text: getTok
|————————————————————————————Node:argument_list Text: (NULL, spaceDelim, &err)
|—————————————————————————————Node:( Text: (
|—————————————————————————————Node:null Text: NULL
|——————————————————————————————Node:NULL Text: NULL
|—————————————————————————————Node:, Text: ,
|—————————————————————————————Node:identifier Text: spaceDelim
|—————————————————————————————Node:, Text: ,
|—————————————————————————————Node:pointer_expression Text: &err
|——————————————————————————————Node:& Text: &
|——————————————————————————————Node:identifier Text: err
|—————————————————————————————Node:) Text: )
|——————————————————————————Node:; Text: ;
|—————————————————————————Node:expression_statement Text: blk = (uint8_t)getU32(token, 0, 1, &err);
|——————————————————————————Node:assignment_expression Text: blk = (uint8_t)getU32(token, 0, 1, &err)
|———————————————————————————Node:identifier Text: blk
|———————————————————————————Node:= Text: =
|———————————————————————————Node:cast_expression Text: (uint8_t)getU32(token, 0, 1, &err)
|————————————————————————————Node:( Text: (
|————————————————————————————Node:type_descriptor Text: uint8_t
|—————————————————————————————Node:primitive_type Text: uint8_t
|————————————————————————————Node:) Text: )
|————————————————————————————Node:call_expression Text: getU32(token, 0, 1, &err)
|—————————————————————————————Node:identifier Text: getU32
|—————————————————————————————Node:argument_list Text: (token, 0, 1, &err)
|——————————————————————————————Node:( Text: (
|——————————————————————————————Node:identifier Text: token
|——————————————————————————————Node:, Text: ,
|——————————————————————————————Node:number_literal Text: 0
|——————————————————————————————Node:, Text: ,
|——————————————————————————————Node:number_literal Text: 1
|——————————————————————————————Node:, Text: ,
|——————————————————————————————Node:pointer_expression Text: &err
|———————————————————————————————Node:& Text: &
|———————————————————————————————Node:identifier Text: err
|——————————————————————————————Node:) Text: )
|——————————————————————————Node:; Text: ;
|—————————————————————————Node:expression_statement Text: lastTok(NULL, spaceDelim, &err);
|——————————————————————————Node:call_expression Text: lastTok(NULL, spaceDelim, &err)
|———————————————————————————Node:identifier Text: lastTok
|———————————————————————————Node:argument_list Text: (NULL, spaceDelim, &err)
|————————————————————————————Node:( Text: (
|————————————————————————————Node:null Text: NULL
|—————————————————————————————Node:NULL Text: NULL
|————————————————————————————Node:, Text: ,
|————————————————————————————Node:identifier Text: spaceDelim
|————————————————————————————Node:, Text: ,
|————————————————————————————Node:pointer_expression Text: &err
|—————————————————————————————Node:& Text: &
|—————————————————————————————Node:identifier Text: err
|————————————————————————————Node:) Text: )
|——————————————————————————Node:; Text: ;
|—————————————————————————Node:comment Text: /* Write to variable */
|—————————————————————————Node:if_statement Text: if(err == 0) {
                        blockTransferEnable = blk;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
|——————————————————————————Node:if Text: if
|——————————————————————————Node:parenthesized_expression Text: (err == 0)
|———————————————————————————Node:( Text: (
|———————————————————————————Node:binary_expression Text: err == 0
|————————————————————————————Node:identifier Text: err
|————————————————————————————Node:== Text: ==
|————————————————————————————Node:number_literal Text: 0
|———————————————————————————Node:) Text: )
|——————————————————————————Node:compound_statement Text: {
                        blockTransferEnable = blk;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
|———————————————————————————Node:{ Text: {
|———————————————————————————Node:expression_statement Text: blockTransferEnable = blk;
|————————————————————————————Node:assignment_expression Text: blockTransferEnable = blk
|—————————————————————————————Node:identifier Text: blockTransferEnable
|—————————————————————————————Node:= Text: =
|—————————————————————————————Node:identifier Text: blk
|————————————————————————————Node:; Text: ;
|———————————————————————————Node:expression_statement Text: respLen = sprintf(resp, "[%d] OK", sequence);
|————————————————————————————Node:assignment_expression Text: respLen = sprintf(resp, "[%d] OK", sequence)
|—————————————————————————————Node:identifier Text: respLen
|—————————————————————————————Node:= Text: =
|—————————————————————————————Node:call_expression Text: sprintf(resp, "[%d] OK", sequence)
|——————————————————————————————Node:identifier Text: sprintf
|——————————————————————————————Node:argument_list Text: (resp, "[%d] OK", sequence)
|———————————————————————————————Node:( Text: (
|———————————————————————————————Node:identifier Text: resp
|———————————————————————————————Node:, Text: ,
|———————————————————————————————Node:string_literal Text: "[%d] OK"
|————————————————————————————————Node:" Text: "
|————————————————————————————————Node:string_content Text: [%d] OK
|————————————————————————————————Node:" Text: "
|———————————————————————————————Node:, Text: ,
|———————————————————————————————Node:identifier Text: sequence
|———————————————————————————————Node:) Text: )
|————————————————————————————Node:; Text: ;
|———————————————————————————Node:} Text: }
|—————————————————————————Node:} Text: }
|————————————————————————Node:comment Text: /* node <value> */
|————————————————————————Node:else_clause Text: else if(strcmp(token, "node") == 0) {
                    uint16_t node;

                    token = getTok(NULL, spaceDelim, &err);
                    node = (uint16_t)getU32(token, 1, 127, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        comm_node_default = node;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* Unknown command */
                else {
                    err = 1;
                }
|—————————————————————————Node:else Text: else
|—————————————————————————Node:if_statement Text: if(strcmp(token, "node") == 0) {
                    uint16_t node;

                    token = getTok(NULL, spaceDelim, &err);
                    node = (uint16_t)getU32(token, 1, 127, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        comm_node_default = node;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }

                /* Unknown command */
                else {
                    err = 1;
                }
|——————————————————————————Node:if Text: if
|——————————————————————————Node:parenthesized_expression Text: (strcmp(token, "node") == 0)
|———————————————————————————Node:( Text: (
|———————————————————————————Node:binary_expression Text: strcmp(token, "node") == 0
|————————————————————————————Node:call_expression Text: strcmp(token, "node")
|—————————————————————————————Node:identifier Text: strcmp
|—————————————————————————————Node:argument_list Text: (token, "node")
|——————————————————————————————Node:( Text: (
|——————————————————————————————Node:identifier Text: token
|——————————————————————————————Node:, Text: ,
|——————————————————————————————Node:string_literal Text: "node"
|———————————————————————————————Node:" Text: "
|———————————————————————————————Node:string_content Text: node
|———————————————————————————————Node:" Text: "
|——————————————————————————————Node:) Text: )
|————————————————————————————Node:== Text: ==
|————————————————————————————Node:number_literal Text: 0
|———————————————————————————Node:) Text: )
|——————————————————————————Node:compound_statement Text: {
                    uint16_t node;

                    token = getTok(NULL, spaceDelim, &err);
                    node = (uint16_t)getU32(token, 1, 127, &err);

                    lastTok(NULL, spaceDelim, &err);

                    /* Write to variable */
                    if(err == 0) {
                        comm_node_default = node;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
                }
|———————————————————————————Node:{ Text: {
|———————————————————————————Node:declaration Text: uint16_t node;
|————————————————————————————Node:primitive_type Text: uint16_t
|————————————————————————————Node:identifier Text: node
|————————————————————————————Node:; Text: ;
|———————————————————————————Node:expression_statement Text: token = getTok(NULL, spaceDelim, &err);
|————————————————————————————Node:assignment_expression Text: token = getTok(NULL, spaceDelim, &err)
|—————————————————————————————Node:identifier Text: token
|—————————————————————————————Node:= Text: =
|—————————————————————————————Node:call_expression Text: getTok(NULL, spaceDelim, &err)
|——————————————————————————————Node:identifier Text: getTok
|——————————————————————————————Node:argument_list Text: (NULL, spaceDelim, &err)
|———————————————————————————————Node:( Text: (
|———————————————————————————————Node:null Text: NULL
|————————————————————————————————Node:NULL Text: NULL
|———————————————————————————————Node:, Text: ,
|———————————————————————————————Node:identifier Text: spaceDelim
|———————————————————————————————Node:, Text: ,
|———————————————————————————————Node:pointer_expression Text: &err
|————————————————————————————————Node:& Text: &
|————————————————————————————————Node:identifier Text: err
|———————————————————————————————Node:) Text: )
|————————————————————————————Node:; Text: ;
|———————————————————————————Node:expression_statement Text: node = (uint16_t)getU32(token, 1, 127, &err);
|————————————————————————————Node:assignment_expression Text: node = (uint16_t)getU32(token, 1, 127, &err)
|—————————————————————————————Node:identifier Text: node
|—————————————————————————————Node:= Text: =
|—————————————————————————————Node:cast_expression Text: (uint16_t)getU32(token, 1, 127, &err)
|——————————————————————————————Node:( Text: (
|——————————————————————————————Node:type_descriptor Text: uint16_t
|———————————————————————————————Node:primitive_type Text: uint16_t
|——————————————————————————————Node:) Text: )
|——————————————————————————————Node:call_expression Text: getU32(token, 1, 127, &err)
|———————————————————————————————Node:identifier Text: getU32
|———————————————————————————————Node:argument_list Text: (token, 1, 127, &err)
|————————————————————————————————Node:( Text: (
|————————————————————————————————Node:identifier Text: token
|————————————————————————————————Node:, Text: ,
|————————————————————————————————Node:number_literal Text: 1
|————————————————————————————————Node:, Text: ,
|————————————————————————————————Node:number_literal Text: 127
|————————————————————————————————Node:, Text: ,
|————————————————————————————————Node:pointer_expression Text: &err
|—————————————————————————————————Node:& Text: &
|—————————————————————————————————Node:identifier Text: err
|————————————————————————————————Node:) Text: )
|————————————————————————————Node:; Text: ;
|———————————————————————————Node:expression_statement Text: lastTok(NULL, spaceDelim, &err);
|————————————————————————————Node:call_expression Text: lastTok(NULL, spaceDelim, &err)
|—————————————————————————————Node:identifier Text: lastTok
|—————————————————————————————Node:argument_list Text: (NULL, spaceDelim, &err)
|——————————————————————————————Node:( Text: (
|——————————————————————————————Node:null Text: NULL
|———————————————————————————————Node:NULL Text: NULL
|——————————————————————————————Node:, Text: ,
|——————————————————————————————Node:identifier Text: spaceDelim
|——————————————————————————————Node:, Text: ,
|——————————————————————————————Node:pointer_expression Text: &err
|———————————————————————————————Node:& Text: &
|———————————————————————————————Node:identifier Text: err
|——————————————————————————————Node:) Text: )
|————————————————————————————Node:; Text: ;
|———————————————————————————Node:comment Text: /* Write to variable */
|———————————————————————————Node:if_statement Text: if(err == 0) {
                        comm_node_default = node;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
|————————————————————————————Node:if Text: if
|————————————————————————————Node:parenthesized_expression Text: (err == 0)
|—————————————————————————————Node:( Text: (
|—————————————————————————————Node:binary_expression Text: err == 0
|——————————————————————————————Node:identifier Text: err
|——————————————————————————————Node:== Text: ==
|——————————————————————————————Node:number_literal Text: 0
|—————————————————————————————Node:) Text: )
|————————————————————————————Node:compound_statement Text: {
                        comm_node_default = node;
                        respLen = sprintf(resp, "[%d] OK", sequence);
                    }
|—————————————————————————————Node:{ Text: {
|—————————————————————————————Node:expression_statement Text: comm_node_default = node;
|——————————————————————————————Node:assignment_expression Text: comm_node_default = node
|———————————————————————————————Node:identifier Text: comm_node_default
|———————————————————————————————Node:= Text: =
|———————————————————————————————Node:identifier Text: node
|——————————————————————————————Node:; Text: ;
|—————————————————————————————Node:expression_statement Text: respLen = sprintf(resp, "[%d] OK", sequence);
|——————————————————————————————Node:assignment_expression Text: respLen = sprintf(resp, "[%d] OK", sequence)
|———————————————————————————————Node:identifier Text: respLen
|———————————————————————————————Node:= Text: =
|———————————————————————————————Node:call_expression Text: sprintf(resp, "[%d] OK", sequence)
|————————————————————————————————Node:identifier Text: sprintf
|————————————————————————————————Node:argument_list Text: (resp, "[%d] OK", sequence)
|—————————————————————————————————Node:( Text: (
|—————————————————————————————————Node:identifier Text: resp
|—————————————————————————————————Node:, Text: ,
|—————————————————————————————————Node:string_literal Text: "[%d] OK"
|——————————————————————————————————Node:" Text: "
|——————————————————————————————————Node:string_content Text: [%d] OK
|——————————————————————————————————Node:" Text: "
|—————————————————————————————————Node:, Text: ,
|—————————————————————————————————Node:identifier Text: sequence
|—————————————————————————————————Node:) Text: )
|——————————————————————————————Node:; Text: ;
|—————————————————————————————Node:} Text: }
|———————————————————————————Node:} Text: }
|——————————————————————————Node:comment Text: /* Unknown command */
|——————————————————————————Node:else_clause Text: else {
                    err = 1;
                }
|———————————————————————————Node:else Text: else
|———————————————————————————Node:compound_statement Text: {
                    err = 1;
                }
|————————————————————————————Node:{ Text: {
|————————————————————————————Node:expression_statement Text: err = 1;
|—————————————————————————————Node:assignment_expression Text: err = 1
|——————————————————————————————Node:identifier Text: err
|——————————————————————————————Node:= Text: =
|——————————————————————————————Node:number_literal Text: 1
|—————————————————————————————Node:; Text: ;
|————————————————————————————Node:} Text: }
|—————————————————————Node:} Text: }
|———————————————————Node:} Text: }
|——————————————————Node:comment Text: /* Unknown command */
|——————————————————Node:else_clause Text: else {
            respErrorCode = respErrorReqNotSupported;
            err = 1;
        }
|———————————————————Node:else Text: else
|———————————————————Node:compound_statement Text: {
            respErrorCode = respErrorReqNotSupported;
            err = 1;
        }
|————————————————————Node:{ Text: {
|————————————————————Node:expression_statement Text: respErrorCode = respErrorReqNotSupported;
|—————————————————————Node:assignment_expression Text: respErrorCode = respErrorReqNotSupported
|——————————————————————Node:identifier Text: respErrorCode
|——————————————————————Node:= Text: =
|——————————————————————Node:identifier Text: respErrorReqNotSupported
|—————————————————————Node:; Text: ;
|————————————————————Node:expression_statement Text: err = 1;
|—————————————————————Node:assignment_expression Text: err = 1
|——————————————————————Node:identifier Text: err
|——————————————————————Node:= Text: =
|——————————————————————Node:number_literal Text: 1
|—————————————————————Node:; Text: ;
|————————————————————Node:} Text: }
|—————Node:} Text: }
|———Node:comment Text: /* Generate error response (or leave empty line response) */
|———Node:if_statement Text: if(err != 0 && emptyLine == 0) {
        if(respErrorCode == respErrorNone) {
            respErrorCode = respErrorSyntax;
        }
        respLen = sprintf(resp, "[%d] ERROR: %d", sequence, respErrorCode);
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: (err != 0 && emptyLine == 0)
|—————Node:( Text: (
|—————Node:binary_expression Text: err != 0 && emptyLine == 0
|——————Node:binary_expression Text: err != 0
|———————Node:identifier Text: err
|———————Node:!= Text: !=
|———————Node:number_literal Text: 0
|——————Node:&& Text: &&
|——————Node:binary_expression Text: emptyLine == 0
|———————Node:identifier Text: emptyLine
|———————Node:== Text: ==
|———————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {
        if(respErrorCode == respErrorNone) {
            respErrorCode = respErrorSyntax;
        }
        respLen = sprintf(resp, "[%d] ERROR: %d", sequence, respErrorCode);
    }
|—————Node:{ Text: {
|—————Node:if_statement Text: if(respErrorCode == respErrorNone) {
            respErrorCode = respErrorSyntax;
        }
|——————Node:if Text: if
|——————Node:parenthesized_expression Text: (respErrorCode == respErrorNone)
|———————Node:( Text: (
|———————Node:binary_expression Text: respErrorCode == respErrorNone
|————————Node:identifier Text: respErrorCode
|————————Node:== Text: ==
|————————Node:identifier Text: respErrorNone
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            respErrorCode = respErrorSyntax;
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: respErrorCode = respErrorSyntax;
|————————Node:assignment_expression Text: respErrorCode = respErrorSyntax
|—————————Node:identifier Text: respErrorCode
|—————————Node:= Text: =
|—————————Node:identifier Text: respErrorSyntax
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:expression_statement Text: respLen = sprintf(resp, "[%d] ERROR: %d", sequence, respErrorCode);
|——————Node:assignment_expression Text: respLen = sprintf(resp, "[%d] ERROR: %d", sequence, respErrorCode)
|———————Node:identifier Text: respLen
|———————Node:= Text: =
|———————Node:call_expression Text: sprintf(resp, "[%d] ERROR: %d", sequence, respErrorCode)
|————————Node:identifier Text: sprintf
|————————Node:argument_list Text: (resp, "[%d] ERROR: %d", sequence, respErrorCode)
|—————————Node:( Text: (
|—————————Node:identifier Text: resp
|—————————Node:, Text: ,
|—————————Node:string_literal Text: "[%d] ERROR: %d"
|——————————Node:" Text: "
|——————————Node:string_content Text: [%d] ERROR: %d
|——————————Node:" Text: "
|—————————Node:, Text: ,
|—————————Node:identifier Text: sequence
|—————————Node:, Text: ,
|—————————Node:identifier Text: respErrorCode
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment Text: /* Terminate string and send response */
|———Node:expression_statement Text: resp[respLen++] = '\r';
|————Node:assignment_expression Text: resp[respLen++] = '\r'
|—————Node:subscript_expression Text: resp[respLen++]
|——————Node:identifier Text: resp
|——————Node:[ Text: [
|——————Node:update_expression Text: respLen++
|———————Node:identifier Text: respLen
|———————Node:++ Text: ++
|——————Node:] Text: ]
|—————Node:= Text: =
|—————Node:char_literal Text: '\r'
|——————Node:' Text: '
|——————Node:escape_sequence Text: \r
|——————Node:' Text: '
|————Node:; Text: ;
|———Node:expression_statement Text: resp[respLen++] = '\n';
|————Node:assignment_expression Text: resp[respLen++] = '\n'
|—————Node:subscript_expression Text: resp[respLen++]
|——————Node:identifier Text: resp
|——————Node:[ Text: [
|——————Node:update_expression Text: respLen++
|———————Node:identifier Text: respLen
|———————Node:++ Text: ++
|——————Node:] Text: ]
|—————Node:= Text: =
|—————Node:char_literal Text: '\n'
|——————Node:' Text: '
|——————Node:escape_sequence Text: \n
|——————Node:' Text: '
|————Node:; Text: ;
|———Node:expression_statement Text: resp[respLen++] = '\0';
|————Node:assignment_expression Text: resp[respLen++] = '\0'
|—————Node:subscript_expression Text: resp[respLen++]
|——————Node:identifier Text: resp
|——————Node:[ Text: [
|——————Node:update_expression Text: respLen++
|———————Node:identifier Text: respLen
|———————Node:++ Text: ++
|——————Node:] Text: ]
|—————Node:= Text: =
|—————Node:char_literal Text: '\0'
|——————Node:' Text: '
|——————Node:escape_sequence Text: \0
|——————Node:' Text: '
|————Node:; Text: ;
|———Node:if_statement Text: if(write(fd, resp, respLen) != respLen) {
        CO_error(0x15200000L);
    }
|————Node:if Text: if
|————Node:parenthesized_expression Text: (write(fd, resp, respLen) != respLen)
|—————Node:( Text: (
|—————Node:binary_expression Text: write(fd, resp, respLen) != respLen
|——————Node:call_expression Text: write(fd, resp, respLen)
|———————Node:identifier Text: write
|———————Node:argument_list Text: (fd, resp, respLen)
|————————Node:( Text: (
|————————Node:identifier Text: fd
|————————Node:, Text: ,
|————————Node:identifier Text: resp
|————————Node:, Text: ,
|————————Node:identifier Text: respLen
|————————Node:) Text: )
|——————Node:!= Text: !=
|——————Node:identifier Text: respLen
|—————Node:) Text: )
|————Node:compound_statement Text: {
        CO_error(0x15200000L);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: CO_error(0x15200000L);
|——————Node:call_expression Text: CO_error(0x15200000L)
|———————Node:identifier Text: CO_error
|———————Node:argument_list Text: (0x15200000L)
|————————Node:( Text: (
|————————Node:number_literal Text: 0x15200000L
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:} Text: }
