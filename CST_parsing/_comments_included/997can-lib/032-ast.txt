997can-lib-EngineMsmt.cpp

|Node:translation_unit
|—Node:preproc_ifdef Text: #ifndef __AVR_ATmega2560__
#define NO_PRINTLNDATASERIAL
#define NO_CAN_242_245_442
#endif
|——Node:#ifndef Text: #ifndef
|——Node:identifier Text: __AVR_ATmega2560__
|——Node:preproc_def Text: #define NO_PRINTLNDATASERIAL

|———Node:#define Text: #define
|———Node:identifier Text: NO_PRINTLNDATASERIAL
|——Node:preproc_def Text: #define NO_CAN_242_245_442

|———Node:#define Text: #define
|———Node:identifier Text: NO_CAN_242_245_442
|——Node:#endif Text: #endif
|—Node:preproc_include Text: #include <BreitBandLambda.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <BreitBandLambda.h>
|—Node:preproc_include Text: #include "EngineMsmt.h"

|——Node:#include Text: #include
|——Node:string_literal Text: "EngineMsmt.h"
|———Node:" Text: "
|———Node:string_content Text: EngineMsmt.h
|———Node:" Text: "
|—Node:preproc_include Text: #include <PString.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <PString.h>
|—Node:declaration Text: EngineMsmtU Engine;
|——Node:type_identifier Text: EngineMsmtU
|——Node:identifier Text: Engine
|——Node:; Text: ;
|—Node:declaration Text: HeadU Head;
|——Node:type_identifier Text: HeadU
|——Node:identifier Text: Head
|——Node:; Text: ;
|—Node:preproc_function_def Text: #define GENERATE_PROGMEMSTRING(STRING) const char str_##STRING[] PROGMEM ={#STRING};

|——Node:#define Text: #define
|——Node:identifier Text: GENERATE_PROGMEMSTRING
|——Node:preproc_params Text: (STRING)
|———Node:( Text: (
|———Node:identifier Text: STRING
|———Node:) Text: )
|——Node:preproc_arg Text: const char str_##STRING[] PROGMEM ={#STRING};
|—Node:preproc_function_def Text: #define GENERATE_STRINGNAME(STRING)  str_##STRING,

|——Node:#define Text: #define
|——Node:identifier Text: GENERATE_STRINGNAME
|——Node:preproc_params Text: (STRING)
|———Node:( Text: (
|———Node:identifier Text: STRING
|———Node:) Text: )
|——Node:preproc_arg Text: str_##STRING,
|—Node:expression_statement Text: FOREACH_EngineError(GENERATE_PROGMEMSTRING);
|——Node:call_expression Text: FOREACH_EngineError(GENERATE_PROGMEMSTRING)
|———Node:identifier Text: FOREACH_EngineError
|———Node:argument_list Text: (GENERATE_PROGMEMSTRING)
|————Node:( Text: (
|————Node:identifier Text: GENERATE_PROGMEMSTRING
|————Node:) Text: )
|——Node:; Text: ;
|—Node:declaration Text: PGM_P const EngineError_STRING[] PROGMEM = {
	FOREACH_EngineError(GENERATE_STRINGNAME)
};
|——Node:type_identifier Text: PGM_P
|——Node:type_qualifier Text: const
|———Node:const Text: const
|——Node:init_declarator Text: EngineError_STRING[] PROGMEM = {
	FOREACH_EngineError(GENERATE_STRINGNAME)
}
|———Node:array_declarator Text: EngineError_STRING[]
|————Node:identifier Text: EngineError_STRING
|————Node:[ Text: [
|————Node:] Text: ]
|———Node:ERROR Text: PROGMEM
|————Node:identifier Text: PROGMEM
|———Node:= Text: =
|———Node:initializer_list Text: {
	FOREACH_EngineError(GENERATE_STRINGNAME)
}
|————Node:{ Text: {
|————Node:call_expression Text: FOREACH_EngineError(GENERATE_STRINGNAME)
|—————Node:identifier Text: FOREACH_EngineError
|—————Node:argument_list Text: (GENERATE_STRINGNAME)
|——————Node:( Text: (
|——————Node:identifier Text: GENERATE_STRINGNAME
|——————Node:) Text: )
|————Node:} Text: }
|——Node:; Text: ;
|—Node:function_definition Text: float EngOilTemp(byte & Tmot) {
	return 0.75*Tmot - 48;
}
|——Node:primitive_type Text: float
|——Node:function_declarator Text: EngOilTemp(byte & Tmot)
|———Node:identifier Text: EngOilTemp
|———Node:parameter_list Text: (byte & Tmot)
|————Node:( Text: (
|————Node:parameter_declaration Text: byte & Tmot
|—————Node:type_identifier Text: byte
|—————Node:reference_declarator Text: & Tmot
|——————Node:& Text: &
|——————Node:identifier Text: Tmot
|————Node:) Text: )
|——Node:compound_statement Text: {
	return 0.75*Tmot - 48;
}
|———Node:{ Text: {
|———Node:return_statement Text: return 0.75*Tmot - 48;
|————Node:return Text: return
|————Node:binary_expression Text: 0.75*Tmot - 48
|—————Node:binary_expression Text: 0.75*Tmot
|——————Node:number_literal Text: 0.75
|——————Node:* Text: *
|——————Node:identifier Text: Tmot
|—————Node:- Text: -
|—————Node:number_literal Text: 48
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void HeadU_Zero() {

	Head.settings.oilpump = 0;
	Head.settings.vacuumpump = 0;
	Head.settings.waterinjection = 0;
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: HeadU_Zero()
|———Node:identifier Text: HeadU_Zero
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {

	Head.settings.oilpump = 0;
	Head.settings.vacuumpump = 0;
	Head.settings.waterinjection = 0;
}
|———Node:{ Text: {
|———Node:expression_statement Text: Head.settings.oilpump = 0;
|————Node:assignment_expression Text: Head.settings.oilpump = 0
|—————Node:field_expression Text: Head.settings.oilpump
|——————Node:field_expression Text: Head.settings
|———————Node:identifier Text: Head
|———————Node:. Text: .
|———————Node:field_identifier Text: settings
|——————Node:. Text: .
|——————Node:field_identifier Text: oilpump
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: Head.settings.vacuumpump = 0;
|————Node:assignment_expression Text: Head.settings.vacuumpump = 0
|—————Node:field_expression Text: Head.settings.vacuumpump
|——————Node:field_expression Text: Head.settings
|———————Node:identifier Text: Head
|———————Node:. Text: .
|———————Node:field_identifier Text: settings
|——————Node:. Text: .
|——————Node:field_identifier Text: vacuumpump
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: Head.settings.waterinjection = 0;
|————Node:assignment_expression Text: Head.settings.waterinjection = 0
|—————Node:field_expression Text: Head.settings.waterinjection
|——————Node:field_expression Text: Head.settings
|———————Node:identifier Text: Head
|———————Node:. Text: .
|———————Node:field_identifier Text: settings
|——————Node:. Text: .
|——————Node:field_identifier Text: waterinjection
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void EngineMsmtU_Zero() {

	Engine.sensor.egtl = 0;
	Engine.sensor.egtr = 0;
	Engine.sensor.gearboxoilpump = 0;
	Engine.sensor.iatbeforeIC = 0;
	Engine.sensor.iatl = 0;
	Engine.sensor.iatr = 0;
	Engine.sensor.lambdaplus100 = 170;
	Engine.sensor.llambdaplus100 =170;
	Engine.sensor.map = 1013;

}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: EngineMsmtU_Zero()
|———Node:identifier Text: EngineMsmtU_Zero
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {

	Engine.sensor.egtl = 0;
	Engine.sensor.egtr = 0;
	Engine.sensor.gearboxoilpump = 0;
	Engine.sensor.iatbeforeIC = 0;
	Engine.sensor.iatl = 0;
	Engine.sensor.iatr = 0;
	Engine.sensor.lambdaplus100 = 170;
	Engine.sensor.llambdaplus100 =170;
	Engine.sensor.map = 1013;

}
|———Node:{ Text: {
|———Node:expression_statement Text: Engine.sensor.egtl = 0;
|————Node:assignment_expression Text: Engine.sensor.egtl = 0
|—————Node:field_expression Text: Engine.sensor.egtl
|——————Node:field_expression Text: Engine.sensor
|———————Node:identifier Text: Engine
|———————Node:. Text: .
|———————Node:field_identifier Text: sensor
|——————Node:. Text: .
|——————Node:field_identifier Text: egtl
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: Engine.sensor.egtr = 0;
|————Node:assignment_expression Text: Engine.sensor.egtr = 0
|—————Node:field_expression Text: Engine.sensor.egtr
|——————Node:field_expression Text: Engine.sensor
|———————Node:identifier Text: Engine
|———————Node:. Text: .
|———————Node:field_identifier Text: sensor
|——————Node:. Text: .
|——————Node:field_identifier Text: egtr
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: Engine.sensor.gearboxoilpump = 0;
|————Node:assignment_expression Text: Engine.sensor.gearboxoilpump = 0
|—————Node:field_expression Text: Engine.sensor.gearboxoilpump
|——————Node:field_expression Text: Engine.sensor
|———————Node:identifier Text: Engine
|———————Node:. Text: .
|———————Node:field_identifier Text: sensor
|——————Node:. Text: .
|——————Node:field_identifier Text: gearboxoilpump
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: Engine.sensor.iatbeforeIC = 0;
|————Node:assignment_expression Text: Engine.sensor.iatbeforeIC = 0
|—————Node:field_expression Text: Engine.sensor.iatbeforeIC
|——————Node:field_expression Text: Engine.sensor
|———————Node:identifier Text: Engine
|———————Node:. Text: .
|———————Node:field_identifier Text: sensor
|——————Node:. Text: .
|——————Node:field_identifier Text: iatbeforeIC
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: Engine.sensor.iatl = 0;
|————Node:assignment_expression Text: Engine.sensor.iatl = 0
|—————Node:field_expression Text: Engine.sensor.iatl
|——————Node:field_expression Text: Engine.sensor
|———————Node:identifier Text: Engine
|———————Node:. Text: .
|———————Node:field_identifier Text: sensor
|——————Node:. Text: .
|——————Node:field_identifier Text: iatl
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: Engine.sensor.iatr = 0;
|————Node:assignment_expression Text: Engine.sensor.iatr = 0
|—————Node:field_expression Text: Engine.sensor.iatr
|——————Node:field_expression Text: Engine.sensor
|———————Node:identifier Text: Engine
|———————Node:. Text: .
|———————Node:field_identifier Text: sensor
|——————Node:. Text: .
|——————Node:field_identifier Text: iatr
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: Engine.sensor.lambdaplus100 = 170;
|————Node:assignment_expression Text: Engine.sensor.lambdaplus100 = 170
|—————Node:field_expression Text: Engine.sensor.lambdaplus100
|——————Node:field_expression Text: Engine.sensor
|———————Node:identifier Text: Engine
|———————Node:. Text: .
|———————Node:field_identifier Text: sensor
|——————Node:. Text: .
|——————Node:field_identifier Text: lambdaplus100
|—————Node:= Text: =
|—————Node:number_literal Text: 170
|————Node:; Text: ;
|———Node:expression_statement Text: Engine.sensor.llambdaplus100 =170;
|————Node:assignment_expression Text: Engine.sensor.llambdaplus100 =170
|—————Node:field_expression Text: Engine.sensor.llambdaplus100
|——————Node:field_expression Text: Engine.sensor
|———————Node:identifier Text: Engine
|———————Node:. Text: .
|———————Node:field_identifier Text: sensor
|——————Node:. Text: .
|——————Node:field_identifier Text: llambdaplus100
|—————Node:= Text: =
|—————Node:number_literal Text: 170
|————Node:; Text: ;
|———Node:expression_statement Text: Engine.sensor.map = 1013;
|————Node:assignment_expression Text: Engine.sensor.map = 1013
|—————Node:field_expression Text: Engine.sensor.map
|——————Node:field_expression Text: Engine.sensor
|———————Node:identifier Text: Engine
|———————Node:. Text: .
|———————Node:field_identifier Text: sensor
|——————Node:. Text: .
|——————Node:field_identifier Text: map
|—————Node:= Text: =
|—————Node:number_literal Text: 1013
|————Node:; Text: ;
|———Node:} Text: }
|—Node:preproc_ifdef Text: #ifndef NO_PRINTLNDATASERIAL

char _buffer1[196];
PString line1(_buffer1, sizeof(_buffer1));

void PrintlnDataSerial(EngineMsmt &engine, MOTOR_1 &can242, MOTOR_2 & can245) {
	line1.begin();
	if (engine.status != OK) {
		char buf[20];
		strcpy_P(buf, (char*)pgm_read_word(&(EngineError_STRING[engine.status])));
		line1.print(buf);
		//line.print(vvv++);
		line1.print("|");
	}

	line1.print("map:");
	line1.print(engine.map);
	line1.print("|");
	line1.print("air:");
	line1.print(engine.iatbeforeIC);
	line1.print("|");
	line1.print("iatl:");
	line1.print(engine.iatl);
	line1.print("|");
	line1.print("iatr:");
	line1.print(engine.iatr);
	line1.print("|");
	line1.print("egtl:");
	if (engine.EGT_Status_left != MAX31855OK) {
		if (engine.EGT_Status_left == OC) line1.print("OC");
		if (engine.EGT_Status_left == SCV) line1.print("SCV");
		if (engine.EGT_Status_left == SCG) line1.print("SCG");

	}
	else   line1.print(engine.egtl);
	line1.print("|");

	line1.print("egtr:");
	if (engine.EGT_Status_right != MAX31855OK) {
		if (engine.EGT_Status_right == OC) line1.print("OC");
		if (engine.EGT_Status_right == SCV) line1.print("SCV");
		if (engine.EGT_Status_right == SCG) line1.print("SCG");
	}
	else line1.print(engine.egtr);
	line1.print("|");
	line1.print("lambda:");
	if (engine.lambdaplus100 < 100) {
		line1.print("(");
		line1.print(pstr_lambdaErrors(engine.lambdaplus100 - 100));
		line1.print(")");
	}
	else line1.print((float)(engine.lambdaplus100 - 100) / 100.0);

	line1.print("|");
	line1.print("llamb:");
	if (engine.llambdaplus100 < 100) {
		line1.print("(");
		line1.print(pstr_lambdaErrors(engine.llambdaplus100 - 100));
		line1.print(")");
	}
	else line1.print((float)(engine.llambdaplus100 - 100) / 100.0);

	line1.print("|");
	line1.print("nmot:");
	line1.print(can242.nmot / 4);

	line1.print("|");
	line1.print("Tmot:");
	line1.print(EngOilTemp(can245.Tmot));

	line1.print("|");
	line1.print("miist:");
	line1.print(can242.miist*100.0 / 255.0);

	line1.print("|");
	line1.print("Wped_fgr:");
	line1.print(can242.Wped_fgr*100.0 / 254.0);
	line1.print("|");

	line1.print("E_tm:");
	line1.print(can245.E_tm);
	line1.print("|");

	line1.print("B_bremse:");
    line1.print(can245.B_bremse);
	line1.print("|");

	
	//line1.print(",E_bremse=");
	//line1.print(can245.E_bremse);
	//line1.print(",B_ffz=");
	//line1.print(can245.B_ffz);

	line1.print("stat_fgr:");
	line1.print(can245.stat_fgr);
	line1.print("|"); 
	line1.print("mibas:");
	line1.print(can245.mibas);
	line1.print("|");
	line1.print("nstat:");
	line1.print(can245.nstat);
	line1.print("|");
	line1.print("mizwmn:");
	line1.print(can245.mizwmn);
	line1.print("|");
	line1.print("mimax:");
	line1.print(can245.mimax);
	line1.print("|");
	line1.print("misol:");
	line1.print(can245.misol);
	

	Serial.println(line1);

}
#endif
|——Node:#ifndef Text: #ifndef
|——Node:identifier Text: NO_PRINTLNDATASERIAL
|——Node:declaration Text: char _buffer1[196];
|———Node:primitive_type Text: char
|———Node:array_declarator Text: _buffer1[196]
|————Node:identifier Text: _buffer1
|————Node:[ Text: [
|————Node:number_literal Text: 196
|————Node:] Text: ]
|———Node:; Text: ;
|——Node:declaration Text: PString line1(_buffer1, sizeof(_buffer1));
|———Node:type_identifier Text: PString
|———Node:function_declarator Text: line1(_buffer1, sizeof(_buffer1))
|————Node:identifier Text: line1
|————Node:parameter_list Text: (_buffer1, sizeof(_buffer1))
|—————Node:( Text: (
|—————Node:parameter_declaration Text: _buffer1
|——————Node:type_identifier Text: _buffer1
|—————Node:, Text: ,
|—————Node:parameter_declaration Text: sizeof(_buffer1)
|——————Node:type_identifier Text: sizeof
|——————Node:abstract_function_declarator Text: (_buffer1)
|———————Node:parameter_list Text: (_buffer1)
|————————Node:( Text: (
|————————Node:parameter_declaration Text: _buffer1
|—————————Node:type_identifier Text: _buffer1
|————————Node:) Text: )
|—————Node:) Text: )
|———Node:; Text: ;
|——Node:function_definition Text: void PrintlnDataSerial(EngineMsmt &engine, MOTOR_1 &can242, MOTOR_2 & can245) {
	line1.begin();
	if (engine.status != OK) {
		char buf[20];
		strcpy_P(buf, (char*)pgm_read_word(&(EngineError_STRING[engine.status])));
		line1.print(buf);
		//line.print(vvv++);
		line1.print("|");
	}

	line1.print("map:");
	line1.print(engine.map);
	line1.print("|");
	line1.print("air:");
	line1.print(engine.iatbeforeIC);
	line1.print("|");
	line1.print("iatl:");
	line1.print(engine.iatl);
	line1.print("|");
	line1.print("iatr:");
	line1.print(engine.iatr);
	line1.print("|");
	line1.print("egtl:");
	if (engine.EGT_Status_left != MAX31855OK) {
		if (engine.EGT_Status_left == OC) line1.print("OC");
		if (engine.EGT_Status_left == SCV) line1.print("SCV");
		if (engine.EGT_Status_left == SCG) line1.print("SCG");

	}
	else   line1.print(engine.egtl);
	line1.print("|");

	line1.print("egtr:");
	if (engine.EGT_Status_right != MAX31855OK) {
		if (engine.EGT_Status_right == OC) line1.print("OC");
		if (engine.EGT_Status_right == SCV) line1.print("SCV");
		if (engine.EGT_Status_right == SCG) line1.print("SCG");
	}
	else line1.print(engine.egtr);
	line1.print("|");
	line1.print("lambda:");
	if (engine.lambdaplus100 < 100) {
		line1.print("(");
		line1.print(pstr_lambdaErrors(engine.lambdaplus100 - 100));
		line1.print(")");
	}
	else line1.print((float)(engine.lambdaplus100 - 100) / 100.0);

	line1.print("|");
	line1.print("llamb:");
	if (engine.llambdaplus100 < 100) {
		line1.print("(");
		line1.print(pstr_lambdaErrors(engine.llambdaplus100 - 100));
		line1.print(")");
	}
	else line1.print((float)(engine.llambdaplus100 - 100) / 100.0);

	line1.print("|");
	line1.print("nmot:");
	line1.print(can242.nmot / 4);

	line1.print("|");
	line1.print("Tmot:");
	line1.print(EngOilTemp(can245.Tmot));

	line1.print("|");
	line1.print("miist:");
	line1.print(can242.miist*100.0 / 255.0);

	line1.print("|");
	line1.print("Wped_fgr:");
	line1.print(can242.Wped_fgr*100.0 / 254.0);
	line1.print("|");

	line1.print("E_tm:");
	line1.print(can245.E_tm);
	line1.print("|");

	line1.print("B_bremse:");
    line1.print(can245.B_bremse);
	line1.print("|");

	
	//line1.print(",E_bremse=");
	//line1.print(can245.E_bremse);
	//line1.print(",B_ffz=");
	//line1.print(can245.B_ffz);

	line1.print("stat_fgr:");
	line1.print(can245.stat_fgr);
	line1.print("|"); 
	line1.print("mibas:");
	line1.print(can245.mibas);
	line1.print("|");
	line1.print("nstat:");
	line1.print(can245.nstat);
	line1.print("|");
	line1.print("mizwmn:");
	line1.print(can245.mizwmn);
	line1.print("|");
	line1.print("mimax:");
	line1.print(can245.mimax);
	line1.print("|");
	line1.print("misol:");
	line1.print(can245.misol);
	

	Serial.println(line1);

}
|———Node:primitive_type Text: void
|———Node:function_declarator Text: PrintlnDataSerial(EngineMsmt &engine, MOTOR_1 &can242, MOTOR_2 & can245)
|————Node:identifier Text: PrintlnDataSerial
|————Node:parameter_list Text: (EngineMsmt &engine, MOTOR_1 &can242, MOTOR_2 & can245)
|—————Node:( Text: (
|—————Node:parameter_declaration Text: EngineMsmt &engine
|——————Node:type_identifier Text: EngineMsmt
|——————Node:reference_declarator Text: &engine
|———————Node:& Text: &
|———————Node:identifier Text: engine
|—————Node:, Text: ,
|—————Node:parameter_declaration Text: MOTOR_1 &can242
|——————Node:type_identifier Text: MOTOR_1
|——————Node:reference_declarator Text: &can242
|———————Node:& Text: &
|———————Node:identifier Text: can242
|—————Node:, Text: ,
|—————Node:parameter_declaration Text: MOTOR_2 & can245
|——————Node:type_identifier Text: MOTOR_2
|——————Node:reference_declarator Text: & can245
|———————Node:& Text: &
|———————Node:identifier Text: can245
|—————Node:) Text: )
|———Node:compound_statement Text: {
	line1.begin();
	if (engine.status != OK) {
		char buf[20];
		strcpy_P(buf, (char*)pgm_read_word(&(EngineError_STRING[engine.status])));
		line1.print(buf);
		//line.print(vvv++);
		line1.print("|");
	}

	line1.print("map:");
	line1.print(engine.map);
	line1.print("|");
	line1.print("air:");
	line1.print(engine.iatbeforeIC);
	line1.print("|");
	line1.print("iatl:");
	line1.print(engine.iatl);
	line1.print("|");
	line1.print("iatr:");
	line1.print(engine.iatr);
	line1.print("|");
	line1.print("egtl:");
	if (engine.EGT_Status_left != MAX31855OK) {
		if (engine.EGT_Status_left == OC) line1.print("OC");
		if (engine.EGT_Status_left == SCV) line1.print("SCV");
		if (engine.EGT_Status_left == SCG) line1.print("SCG");

	}
	else   line1.print(engine.egtl);
	line1.print("|");

	line1.print("egtr:");
	if (engine.EGT_Status_right != MAX31855OK) {
		if (engine.EGT_Status_right == OC) line1.print("OC");
		if (engine.EGT_Status_right == SCV) line1.print("SCV");
		if (engine.EGT_Status_right == SCG) line1.print("SCG");
	}
	else line1.print(engine.egtr);
	line1.print("|");
	line1.print("lambda:");
	if (engine.lambdaplus100 < 100) {
		line1.print("(");
		line1.print(pstr_lambdaErrors(engine.lambdaplus100 - 100));
		line1.print(")");
	}
	else line1.print((float)(engine.lambdaplus100 - 100) / 100.0);

	line1.print("|");
	line1.print("llamb:");
	if (engine.llambdaplus100 < 100) {
		line1.print("(");
		line1.print(pstr_lambdaErrors(engine.llambdaplus100 - 100));
		line1.print(")");
	}
	else line1.print((float)(engine.llambdaplus100 - 100) / 100.0);

	line1.print("|");
	line1.print("nmot:");
	line1.print(can242.nmot / 4);

	line1.print("|");
	line1.print("Tmot:");
	line1.print(EngOilTemp(can245.Tmot));

	line1.print("|");
	line1.print("miist:");
	line1.print(can242.miist*100.0 / 255.0);

	line1.print("|");
	line1.print("Wped_fgr:");
	line1.print(can242.Wped_fgr*100.0 / 254.0);
	line1.print("|");

	line1.print("E_tm:");
	line1.print(can245.E_tm);
	line1.print("|");

	line1.print("B_bremse:");
    line1.print(can245.B_bremse);
	line1.print("|");

	
	//line1.print(",E_bremse=");
	//line1.print(can245.E_bremse);
	//line1.print(",B_ffz=");
	//line1.print(can245.B_ffz);

	line1.print("stat_fgr:");
	line1.print(can245.stat_fgr);
	line1.print("|"); 
	line1.print("mibas:");
	line1.print(can245.mibas);
	line1.print("|");
	line1.print("nstat:");
	line1.print(can245.nstat);
	line1.print("|");
	line1.print("mizwmn:");
	line1.print(can245.mizwmn);
	line1.print("|");
	line1.print("mimax:");
	line1.print(can245.mimax);
	line1.print("|");
	line1.print("misol:");
	line1.print(can245.misol);
	

	Serial.println(line1);

}
|————Node:{ Text: {
|————Node:expression_statement Text: line1.begin();
|—————Node:call_expression Text: line1.begin()
|——————Node:field_expression Text: line1.begin
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: begin
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:if_statement Text: if (engine.status != OK) {
		char buf[20];
		strcpy_P(buf, (char*)pgm_read_word(&(EngineError_STRING[engine.status])));
		line1.print(buf);
		//line.print(vvv++);
		line1.print("|");
	}
|—————Node:if Text: if
|—————Node:condition_clause Text: (engine.status != OK)
|——————Node:( Text: (
|——————Node:binary_expression Text: engine.status != OK
|———————Node:field_expression Text: engine.status
|————————Node:identifier Text: engine
|————————Node:. Text: .
|————————Node:field_identifier Text: status
|———————Node:!= Text: !=
|———————Node:identifier Text: OK
|——————Node:) Text: )
|—————Node:compound_statement Text: {
		char buf[20];
		strcpy_P(buf, (char*)pgm_read_word(&(EngineError_STRING[engine.status])));
		line1.print(buf);
		//line.print(vvv++);
		line1.print("|");
	}
|——————Node:{ Text: {
|——————Node:declaration Text: char buf[20];
|———————Node:primitive_type Text: char
|———————Node:array_declarator Text: buf[20]
|————————Node:identifier Text: buf
|————————Node:[ Text: [
|————————Node:number_literal Text: 20
|————————Node:] Text: ]
|———————Node:; Text: ;
|——————Node:expression_statement Text: strcpy_P(buf, (char*)pgm_read_word(&(EngineError_STRING[engine.status])));
|———————Node:call_expression Text: strcpy_P(buf, (char*)pgm_read_word(&(EngineError_STRING[engine.status])))
|————————Node:identifier Text: strcpy_P
|————————Node:argument_list Text: (buf, (char*)pgm_read_word(&(EngineError_STRING[engine.status])))
|—————————Node:( Text: (
|—————————Node:identifier Text: buf
|—————————Node:, Text: ,
|—————————Node:cast_expression Text: (char*)pgm_read_word(&(EngineError_STRING[engine.status]))
|——————————Node:( Text: (
|——————————Node:type_descriptor Text: char*
|———————————Node:primitive_type Text: char
|———————————Node:abstract_pointer_declarator Text: *
|————————————Node:* Text: *
|——————————Node:) Text: )
|——————————Node:call_expression Text: pgm_read_word(&(EngineError_STRING[engine.status]))
|———————————Node:identifier Text: pgm_read_word
|———————————Node:argument_list Text: (&(EngineError_STRING[engine.status]))
|————————————Node:( Text: (
|————————————Node:pointer_expression Text: &(EngineError_STRING[engine.status])
|—————————————Node:& Text: &
|—————————————Node:parenthesized_expression Text: (EngineError_STRING[engine.status])
|——————————————Node:( Text: (
|——————————————Node:subscript_expression Text: EngineError_STRING[engine.status]
|———————————————Node:identifier Text: EngineError_STRING
|———————————————Node:subscript_argument_list Text: [engine.status]
|————————————————Node:[ Text: [
|————————————————Node:field_expression Text: engine.status
|—————————————————Node:identifier Text: engine
|—————————————————Node:. Text: .
|—————————————————Node:field_identifier Text: status
|————————————————Node:] Text: ]
|——————————————Node:) Text: )
|————————————Node:) Text: )
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: line1.print(buf);
|———————Node:call_expression Text: line1.print(buf)
|————————Node:field_expression Text: line1.print
|—————————Node:identifier Text: line1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: print
|————————Node:argument_list Text: (buf)
|—————————Node:( Text: (
|—————————Node:identifier Text: buf
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:comment Text: //line.print(vvv++);
|——————Node:expression_statement Text: line1.print("|");
|———————Node:call_expression Text: line1.print("|")
|————————Node:field_expression Text: line1.print
|—————————Node:identifier Text: line1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: print
|————————Node:argument_list Text: ("|")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "|"
|——————————Node:" Text: "
|——————————Node:string_content Text: |
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:} Text: }
|————Node:expression_statement Text: line1.print("map:");
|—————Node:call_expression Text: line1.print("map:")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("map:")
|———————Node:( Text: (
|———————Node:string_literal Text: "map:"
|————————Node:" Text: "
|————————Node:string_content Text: map:
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print(engine.map);
|—————Node:call_expression Text: line1.print(engine.map)
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: (engine.map)
|———————Node:( Text: (
|———————Node:field_expression Text: engine.map
|————————Node:identifier Text: engine
|————————Node:. Text: .
|————————Node:field_identifier Text: map
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print("|");
|—————Node:call_expression Text: line1.print("|")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("|")
|———————Node:( Text: (
|———————Node:string_literal Text: "|"
|————————Node:" Text: "
|————————Node:string_content Text: |
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print("air:");
|—————Node:call_expression Text: line1.print("air:")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("air:")
|———————Node:( Text: (
|———————Node:string_literal Text: "air:"
|————————Node:" Text: "
|————————Node:string_content Text: air:
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print(engine.iatbeforeIC);
|—————Node:call_expression Text: line1.print(engine.iatbeforeIC)
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: (engine.iatbeforeIC)
|———————Node:( Text: (
|———————Node:field_expression Text: engine.iatbeforeIC
|————————Node:identifier Text: engine
|————————Node:. Text: .
|————————Node:field_identifier Text: iatbeforeIC
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print("|");
|—————Node:call_expression Text: line1.print("|")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("|")
|———————Node:( Text: (
|———————Node:string_literal Text: "|"
|————————Node:" Text: "
|————————Node:string_content Text: |
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print("iatl:");
|—————Node:call_expression Text: line1.print("iatl:")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("iatl:")
|———————Node:( Text: (
|———————Node:string_literal Text: "iatl:"
|————————Node:" Text: "
|————————Node:string_content Text: iatl:
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print(engine.iatl);
|—————Node:call_expression Text: line1.print(engine.iatl)
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: (engine.iatl)
|———————Node:( Text: (
|———————Node:field_expression Text: engine.iatl
|————————Node:identifier Text: engine
|————————Node:. Text: .
|————————Node:field_identifier Text: iatl
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print("|");
|—————Node:call_expression Text: line1.print("|")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("|")
|———————Node:( Text: (
|———————Node:string_literal Text: "|"
|————————Node:" Text: "
|————————Node:string_content Text: |
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print("iatr:");
|—————Node:call_expression Text: line1.print("iatr:")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("iatr:")
|———————Node:( Text: (
|———————Node:string_literal Text: "iatr:"
|————————Node:" Text: "
|————————Node:string_content Text: iatr:
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print(engine.iatr);
|—————Node:call_expression Text: line1.print(engine.iatr)
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: (engine.iatr)
|———————Node:( Text: (
|———————Node:field_expression Text: engine.iatr
|————————Node:identifier Text: engine
|————————Node:. Text: .
|————————Node:field_identifier Text: iatr
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print("|");
|—————Node:call_expression Text: line1.print("|")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("|")
|———————Node:( Text: (
|———————Node:string_literal Text: "|"
|————————Node:" Text: "
|————————Node:string_content Text: |
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print("egtl:");
|—————Node:call_expression Text: line1.print("egtl:")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("egtl:")
|———————Node:( Text: (
|———————Node:string_literal Text: "egtl:"
|————————Node:" Text: "
|————————Node:string_content Text: egtl:
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:if_statement Text: if (engine.EGT_Status_left != MAX31855OK) {
		if (engine.EGT_Status_left == OC) line1.print("OC");
		if (engine.EGT_Status_left == SCV) line1.print("SCV");
		if (engine.EGT_Status_left == SCG) line1.print("SCG");

	}
	else   line1.print(engine.egtl);
|—————Node:if Text: if
|—————Node:condition_clause Text: (engine.EGT_Status_left != MAX31855OK)
|——————Node:( Text: (
|——————Node:binary_expression Text: engine.EGT_Status_left != MAX31855OK
|———————Node:field_expression Text: engine.EGT_Status_left
|————————Node:identifier Text: engine
|————————Node:. Text: .
|————————Node:field_identifier Text: EGT_Status_left
|———————Node:!= Text: !=
|———————Node:identifier Text: MAX31855OK
|——————Node:) Text: )
|—————Node:compound_statement Text: {
		if (engine.EGT_Status_left == OC) line1.print("OC");
		if (engine.EGT_Status_left == SCV) line1.print("SCV");
		if (engine.EGT_Status_left == SCG) line1.print("SCG");

	}
|——————Node:{ Text: {
|——————Node:if_statement Text: if (engine.EGT_Status_left == OC) line1.print("OC");
|———————Node:if Text: if
|———————Node:condition_clause Text: (engine.EGT_Status_left == OC)
|————————Node:( Text: (
|————————Node:binary_expression Text: engine.EGT_Status_left == OC
|—————————Node:field_expression Text: engine.EGT_Status_left
|——————————Node:identifier Text: engine
|——————————Node:. Text: .
|——————————Node:field_identifier Text: EGT_Status_left
|—————————Node:== Text: ==
|—————————Node:identifier Text: OC
|————————Node:) Text: )
|———————Node:expression_statement Text: line1.print("OC");
|————————Node:call_expression Text: line1.print("OC")
|—————————Node:field_expression Text: line1.print
|——————————Node:identifier Text: line1
|——————————Node:. Text: .
|——————————Node:field_identifier Text: print
|—————————Node:argument_list Text: ("OC")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "OC"
|———————————Node:" Text: "
|———————————Node:string_content Text: OC
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:; Text: ;
|——————Node:if_statement Text: if (engine.EGT_Status_left == SCV) line1.print("SCV");
|———————Node:if Text: if
|———————Node:condition_clause Text: (engine.EGT_Status_left == SCV)
|————————Node:( Text: (
|————————Node:binary_expression Text: engine.EGT_Status_left == SCV
|—————————Node:field_expression Text: engine.EGT_Status_left
|——————————Node:identifier Text: engine
|——————————Node:. Text: .
|——————————Node:field_identifier Text: EGT_Status_left
|—————————Node:== Text: ==
|—————————Node:identifier Text: SCV
|————————Node:) Text: )
|———————Node:expression_statement Text: line1.print("SCV");
|————————Node:call_expression Text: line1.print("SCV")
|—————————Node:field_expression Text: line1.print
|——————————Node:identifier Text: line1
|——————————Node:. Text: .
|——————————Node:field_identifier Text: print
|—————————Node:argument_list Text: ("SCV")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "SCV"
|———————————Node:" Text: "
|———————————Node:string_content Text: SCV
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:; Text: ;
|——————Node:if_statement Text: if (engine.EGT_Status_left == SCG) line1.print("SCG");
|———————Node:if Text: if
|———————Node:condition_clause Text: (engine.EGT_Status_left == SCG)
|————————Node:( Text: (
|————————Node:binary_expression Text: engine.EGT_Status_left == SCG
|—————————Node:field_expression Text: engine.EGT_Status_left
|——————————Node:identifier Text: engine
|——————————Node:. Text: .
|——————————Node:field_identifier Text: EGT_Status_left
|—————————Node:== Text: ==
|—————————Node:identifier Text: SCG
|————————Node:) Text: )
|———————Node:expression_statement Text: line1.print("SCG");
|————————Node:call_expression Text: line1.print("SCG")
|—————————Node:field_expression Text: line1.print
|——————————Node:identifier Text: line1
|——————————Node:. Text: .
|——————————Node:field_identifier Text: print
|—————————Node:argument_list Text: ("SCG")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "SCG"
|———————————Node:" Text: "
|———————————Node:string_content Text: SCG
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:; Text: ;
|——————Node:} Text: }
|—————Node:else_clause Text: else   line1.print(engine.egtl);
|——————Node:else Text: else
|——————Node:expression_statement Text: line1.print(engine.egtl);
|———————Node:call_expression Text: line1.print(engine.egtl)
|————————Node:field_expression Text: line1.print
|—————————Node:identifier Text: line1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: print
|————————Node:argument_list Text: (engine.egtl)
|—————————Node:( Text: (
|—————————Node:field_expression Text: engine.egtl
|——————————Node:identifier Text: engine
|——————————Node:. Text: .
|——————————Node:field_identifier Text: egtl
|—————————Node:) Text: )
|———————Node:; Text: ;
|————Node:expression_statement Text: line1.print("|");
|—————Node:call_expression Text: line1.print("|")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("|")
|———————Node:( Text: (
|———————Node:string_literal Text: "|"
|————————Node:" Text: "
|————————Node:string_content Text: |
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print("egtr:");
|—————Node:call_expression Text: line1.print("egtr:")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("egtr:")
|———————Node:( Text: (
|———————Node:string_literal Text: "egtr:"
|————————Node:" Text: "
|————————Node:string_content Text: egtr:
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:if_statement Text: if (engine.EGT_Status_right != MAX31855OK) {
		if (engine.EGT_Status_right == OC) line1.print("OC");
		if (engine.EGT_Status_right == SCV) line1.print("SCV");
		if (engine.EGT_Status_right == SCG) line1.print("SCG");
	}
	else line1.print(engine.egtr);
|—————Node:if Text: if
|—————Node:condition_clause Text: (engine.EGT_Status_right != MAX31855OK)
|——————Node:( Text: (
|——————Node:binary_expression Text: engine.EGT_Status_right != MAX31855OK
|———————Node:field_expression Text: engine.EGT_Status_right
|————————Node:identifier Text: engine
|————————Node:. Text: .
|————————Node:field_identifier Text: EGT_Status_right
|———————Node:!= Text: !=
|———————Node:identifier Text: MAX31855OK
|——————Node:) Text: )
|—————Node:compound_statement Text: {
		if (engine.EGT_Status_right == OC) line1.print("OC");
		if (engine.EGT_Status_right == SCV) line1.print("SCV");
		if (engine.EGT_Status_right == SCG) line1.print("SCG");
	}
|——————Node:{ Text: {
|——————Node:if_statement Text: if (engine.EGT_Status_right == OC) line1.print("OC");
|———————Node:if Text: if
|———————Node:condition_clause Text: (engine.EGT_Status_right == OC)
|————————Node:( Text: (
|————————Node:binary_expression Text: engine.EGT_Status_right == OC
|—————————Node:field_expression Text: engine.EGT_Status_right
|——————————Node:identifier Text: engine
|——————————Node:. Text: .
|——————————Node:field_identifier Text: EGT_Status_right
|—————————Node:== Text: ==
|—————————Node:identifier Text: OC
|————————Node:) Text: )
|———————Node:expression_statement Text: line1.print("OC");
|————————Node:call_expression Text: line1.print("OC")
|—————————Node:field_expression Text: line1.print
|——————————Node:identifier Text: line1
|——————————Node:. Text: .
|——————————Node:field_identifier Text: print
|—————————Node:argument_list Text: ("OC")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "OC"
|———————————Node:" Text: "
|———————————Node:string_content Text: OC
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:; Text: ;
|——————Node:if_statement Text: if (engine.EGT_Status_right == SCV) line1.print("SCV");
|———————Node:if Text: if
|———————Node:condition_clause Text: (engine.EGT_Status_right == SCV)
|————————Node:( Text: (
|————————Node:binary_expression Text: engine.EGT_Status_right == SCV
|—————————Node:field_expression Text: engine.EGT_Status_right
|——————————Node:identifier Text: engine
|——————————Node:. Text: .
|——————————Node:field_identifier Text: EGT_Status_right
|—————————Node:== Text: ==
|—————————Node:identifier Text: SCV
|————————Node:) Text: )
|———————Node:expression_statement Text: line1.print("SCV");
|————————Node:call_expression Text: line1.print("SCV")
|—————————Node:field_expression Text: line1.print
|——————————Node:identifier Text: line1
|——————————Node:. Text: .
|——————————Node:field_identifier Text: print
|—————————Node:argument_list Text: ("SCV")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "SCV"
|———————————Node:" Text: "
|———————————Node:string_content Text: SCV
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:; Text: ;
|——————Node:if_statement Text: if (engine.EGT_Status_right == SCG) line1.print("SCG");
|———————Node:if Text: if
|———————Node:condition_clause Text: (engine.EGT_Status_right == SCG)
|————————Node:( Text: (
|————————Node:binary_expression Text: engine.EGT_Status_right == SCG
|—————————Node:field_expression Text: engine.EGT_Status_right
|——————————Node:identifier Text: engine
|——————————Node:. Text: .
|——————————Node:field_identifier Text: EGT_Status_right
|—————————Node:== Text: ==
|—————————Node:identifier Text: SCG
|————————Node:) Text: )
|———————Node:expression_statement Text: line1.print("SCG");
|————————Node:call_expression Text: line1.print("SCG")
|—————————Node:field_expression Text: line1.print
|——————————Node:identifier Text: line1
|——————————Node:. Text: .
|——————————Node:field_identifier Text: print
|—————————Node:argument_list Text: ("SCG")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "SCG"
|———————————Node:" Text: "
|———————————Node:string_content Text: SCG
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:; Text: ;
|——————Node:} Text: }
|—————Node:else_clause Text: else line1.print(engine.egtr);
|——————Node:else Text: else
|——————Node:expression_statement Text: line1.print(engine.egtr);
|———————Node:call_expression Text: line1.print(engine.egtr)
|————————Node:field_expression Text: line1.print
|—————————Node:identifier Text: line1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: print
|————————Node:argument_list Text: (engine.egtr)
|—————————Node:( Text: (
|—————————Node:field_expression Text: engine.egtr
|——————————Node:identifier Text: engine
|——————————Node:. Text: .
|——————————Node:field_identifier Text: egtr
|—————————Node:) Text: )
|———————Node:; Text: ;
|————Node:expression_statement Text: line1.print("|");
|—————Node:call_expression Text: line1.print("|")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("|")
|———————Node:( Text: (
|———————Node:string_literal Text: "|"
|————————Node:" Text: "
|————————Node:string_content Text: |
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print("lambda:");
|—————Node:call_expression Text: line1.print("lambda:")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("lambda:")
|———————Node:( Text: (
|———————Node:string_literal Text: "lambda:"
|————————Node:" Text: "
|————————Node:string_content Text: lambda:
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:if_statement Text: if (engine.lambdaplus100 < 100) {
		line1.print("(");
		line1.print(pstr_lambdaErrors(engine.lambdaplus100 - 100));
		line1.print(")");
	}
	else line1.print((float)(engine.lambdaplus100 - 100) / 100.0);
|—————Node:if Text: if
|—————Node:condition_clause Text: (engine.lambdaplus100 < 100)
|——————Node:( Text: (
|——————Node:binary_expression Text: engine.lambdaplus100 < 100
|———————Node:field_expression Text: engine.lambdaplus100
|————————Node:identifier Text: engine
|————————Node:. Text: .
|————————Node:field_identifier Text: lambdaplus100
|———————Node:< Text: <
|———————Node:number_literal Text: 100
|——————Node:) Text: )
|—————Node:compound_statement Text: {
		line1.print("(");
		line1.print(pstr_lambdaErrors(engine.lambdaplus100 - 100));
		line1.print(")");
	}
|——————Node:{ Text: {
|——————Node:expression_statement Text: line1.print("(");
|———————Node:call_expression Text: line1.print("(")
|————————Node:field_expression Text: line1.print
|—————————Node:identifier Text: line1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: print
|————————Node:argument_list Text: ("(")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "("
|——————————Node:" Text: "
|——————————Node:string_content Text: (
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: line1.print(pstr_lambdaErrors(engine.lambdaplus100 - 100));
|———————Node:call_expression Text: line1.print(pstr_lambdaErrors(engine.lambdaplus100 - 100))
|————————Node:field_expression Text: line1.print
|—————————Node:identifier Text: line1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: print
|————————Node:argument_list Text: (pstr_lambdaErrors(engine.lambdaplus100 - 100))
|—————————Node:( Text: (
|—————————Node:call_expression Text: pstr_lambdaErrors(engine.lambdaplus100 - 100)
|——————————Node:identifier Text: pstr_lambdaErrors
|——————————Node:argument_list Text: (engine.lambdaplus100 - 100)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: engine.lambdaplus100 - 100
|————————————Node:field_expression Text: engine.lambdaplus100
|—————————————Node:identifier Text: engine
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: lambdaplus100
|————————————Node:- Text: -
|————————————Node:number_literal Text: 100
|———————————Node:) Text: )
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: line1.print(")");
|———————Node:call_expression Text: line1.print(")")
|————————Node:field_expression Text: line1.print
|—————————Node:identifier Text: line1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: print
|————————Node:argument_list Text: (")")
|—————————Node:( Text: (
|—————————Node:string_literal Text: ")"
|——————————Node:" Text: "
|——————————Node:string_content Text: )
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:} Text: }
|—————Node:else_clause Text: else line1.print((float)(engine.lambdaplus100 - 100) / 100.0);
|——————Node:else Text: else
|——————Node:expression_statement Text: line1.print((float)(engine.lambdaplus100 - 100) / 100.0);
|———————Node:call_expression Text: line1.print((float)(engine.lambdaplus100 - 100) / 100.0)
|————————Node:field_expression Text: line1.print
|—————————Node:identifier Text: line1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: print
|————————Node:argument_list Text: ((float)(engine.lambdaplus100 - 100) / 100.0)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: (float)(engine.lambdaplus100 - 100) / 100.0
|——————————Node:cast_expression Text: (float)(engine.lambdaplus100 - 100)
|———————————Node:( Text: (
|———————————Node:type_descriptor Text: float
|————————————Node:primitive_type Text: float
|———————————Node:) Text: )
|———————————Node:parenthesized_expression Text: (engine.lambdaplus100 - 100)
|————————————Node:( Text: (
|————————————Node:binary_expression Text: engine.lambdaplus100 - 100
|—————————————Node:field_expression Text: engine.lambdaplus100
|——————————————Node:identifier Text: engine
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: lambdaplus100
|—————————————Node:- Text: -
|—————————————Node:number_literal Text: 100
|————————————Node:) Text: )
|——————————Node:/ Text: /
|——————————Node:number_literal Text: 100.0
|—————————Node:) Text: )
|———————Node:; Text: ;
|————Node:expression_statement Text: line1.print("|");
|—————Node:call_expression Text: line1.print("|")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("|")
|———————Node:( Text: (
|———————Node:string_literal Text: "|"
|————————Node:" Text: "
|————————Node:string_content Text: |
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print("llamb:");
|—————Node:call_expression Text: line1.print("llamb:")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("llamb:")
|———————Node:( Text: (
|———————Node:string_literal Text: "llamb:"
|————————Node:" Text: "
|————————Node:string_content Text: llamb:
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:if_statement Text: if (engine.llambdaplus100 < 100) {
		line1.print("(");
		line1.print(pstr_lambdaErrors(engine.llambdaplus100 - 100));
		line1.print(")");
	}
	else line1.print((float)(engine.llambdaplus100 - 100) / 100.0);
|—————Node:if Text: if
|—————Node:condition_clause Text: (engine.llambdaplus100 < 100)
|——————Node:( Text: (
|——————Node:binary_expression Text: engine.llambdaplus100 < 100
|———————Node:field_expression Text: engine.llambdaplus100
|————————Node:identifier Text: engine
|————————Node:. Text: .
|————————Node:field_identifier Text: llambdaplus100
|———————Node:< Text: <
|———————Node:number_literal Text: 100
|——————Node:) Text: )
|—————Node:compound_statement Text: {
		line1.print("(");
		line1.print(pstr_lambdaErrors(engine.llambdaplus100 - 100));
		line1.print(")");
	}
|——————Node:{ Text: {
|——————Node:expression_statement Text: line1.print("(");
|———————Node:call_expression Text: line1.print("(")
|————————Node:field_expression Text: line1.print
|—————————Node:identifier Text: line1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: print
|————————Node:argument_list Text: ("(")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "("
|——————————Node:" Text: "
|——————————Node:string_content Text: (
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: line1.print(pstr_lambdaErrors(engine.llambdaplus100 - 100));
|———————Node:call_expression Text: line1.print(pstr_lambdaErrors(engine.llambdaplus100 - 100))
|————————Node:field_expression Text: line1.print
|—————————Node:identifier Text: line1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: print
|————————Node:argument_list Text: (pstr_lambdaErrors(engine.llambdaplus100 - 100))
|—————————Node:( Text: (
|—————————Node:call_expression Text: pstr_lambdaErrors(engine.llambdaplus100 - 100)
|——————————Node:identifier Text: pstr_lambdaErrors
|——————————Node:argument_list Text: (engine.llambdaplus100 - 100)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: engine.llambdaplus100 - 100
|————————————Node:field_expression Text: engine.llambdaplus100
|—————————————Node:identifier Text: engine
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: llambdaplus100
|————————————Node:- Text: -
|————————————Node:number_literal Text: 100
|———————————Node:) Text: )
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: line1.print(")");
|———————Node:call_expression Text: line1.print(")")
|————————Node:field_expression Text: line1.print
|—————————Node:identifier Text: line1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: print
|————————Node:argument_list Text: (")")
|—————————Node:( Text: (
|—————————Node:string_literal Text: ")"
|——————————Node:" Text: "
|——————————Node:string_content Text: )
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:} Text: }
|—————Node:else_clause Text: else line1.print((float)(engine.llambdaplus100 - 100) / 100.0);
|——————Node:else Text: else
|——————Node:expression_statement Text: line1.print((float)(engine.llambdaplus100 - 100) / 100.0);
|———————Node:call_expression Text: line1.print((float)(engine.llambdaplus100 - 100) / 100.0)
|————————Node:field_expression Text: line1.print
|—————————Node:identifier Text: line1
|—————————Node:. Text: .
|—————————Node:field_identifier Text: print
|————————Node:argument_list Text: ((float)(engine.llambdaplus100 - 100) / 100.0)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: (float)(engine.llambdaplus100 - 100) / 100.0
|——————————Node:cast_expression Text: (float)(engine.llambdaplus100 - 100)
|———————————Node:( Text: (
|———————————Node:type_descriptor Text: float
|————————————Node:primitive_type Text: float
|———————————Node:) Text: )
|———————————Node:parenthesized_expression Text: (engine.llambdaplus100 - 100)
|————————————Node:( Text: (
|————————————Node:binary_expression Text: engine.llambdaplus100 - 100
|—————————————Node:field_expression Text: engine.llambdaplus100
|——————————————Node:identifier Text: engine
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: llambdaplus100
|—————————————Node:- Text: -
|—————————————Node:number_literal Text: 100
|————————————Node:) Text: )
|——————————Node:/ Text: /
|——————————Node:number_literal Text: 100.0
|—————————Node:) Text: )
|———————Node:; Text: ;
|————Node:expression_statement Text: line1.print("|");
|—————Node:call_expression Text: line1.print("|")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("|")
|———————Node:( Text: (
|———————Node:string_literal Text: "|"
|————————Node:" Text: "
|————————Node:string_content Text: |
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print("nmot:");
|—————Node:call_expression Text: line1.print("nmot:")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("nmot:")
|———————Node:( Text: (
|———————Node:string_literal Text: "nmot:"
|————————Node:" Text: "
|————————Node:string_content Text: nmot:
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print(can242.nmot / 4);
|—————Node:call_expression Text: line1.print(can242.nmot / 4)
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: (can242.nmot / 4)
|———————Node:( Text: (
|———————Node:binary_expression Text: can242.nmot / 4
|————————Node:field_expression Text: can242.nmot
|—————————Node:identifier Text: can242
|—————————Node:. Text: .
|—————————Node:field_identifier Text: nmot
|————————Node:/ Text: /
|————————Node:number_literal Text: 4
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print("|");
|—————Node:call_expression Text: line1.print("|")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("|")
|———————Node:( Text: (
|———————Node:string_literal Text: "|"
|————————Node:" Text: "
|————————Node:string_content Text: |
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print("Tmot:");
|—————Node:call_expression Text: line1.print("Tmot:")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("Tmot:")
|———————Node:( Text: (
|———————Node:string_literal Text: "Tmot:"
|————————Node:" Text: "
|————————Node:string_content Text: Tmot:
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print(EngOilTemp(can245.Tmot));
|—————Node:call_expression Text: line1.print(EngOilTemp(can245.Tmot))
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: (EngOilTemp(can245.Tmot))
|———————Node:( Text: (
|———————Node:call_expression Text: EngOilTemp(can245.Tmot)
|————————Node:identifier Text: EngOilTemp
|————————Node:argument_list Text: (can245.Tmot)
|—————————Node:( Text: (
|—————————Node:field_expression Text: can245.Tmot
|——————————Node:identifier Text: can245
|——————————Node:. Text: .
|——————————Node:field_identifier Text: Tmot
|—————————Node:) Text: )
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print("|");
|—————Node:call_expression Text: line1.print("|")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("|")
|———————Node:( Text: (
|———————Node:string_literal Text: "|"
|————————Node:" Text: "
|————————Node:string_content Text: |
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print("miist:");
|—————Node:call_expression Text: line1.print("miist:")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("miist:")
|———————Node:( Text: (
|———————Node:string_literal Text: "miist:"
|————————Node:" Text: "
|————————Node:string_content Text: miist:
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print(can242.miist*100.0 / 255.0);
|—————Node:call_expression Text: line1.print(can242.miist*100.0 / 255.0)
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: (can242.miist*100.0 / 255.0)
|———————Node:( Text: (
|———————Node:binary_expression Text: can242.miist*100.0 / 255.0
|————————Node:binary_expression Text: can242.miist*100.0
|—————————Node:field_expression Text: can242.miist
|——————————Node:identifier Text: can242
|——————————Node:. Text: .
|——————————Node:field_identifier Text: miist
|—————————Node:* Text: *
|—————————Node:number_literal Text: 100.0
|————————Node:/ Text: /
|————————Node:number_literal Text: 255.0
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print("|");
|—————Node:call_expression Text: line1.print("|")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("|")
|———————Node:( Text: (
|———————Node:string_literal Text: "|"
|————————Node:" Text: "
|————————Node:string_content Text: |
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print("Wped_fgr:");
|—————Node:call_expression Text: line1.print("Wped_fgr:")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("Wped_fgr:")
|———————Node:( Text: (
|———————Node:string_literal Text: "Wped_fgr:"
|————————Node:" Text: "
|————————Node:string_content Text: Wped_fgr:
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print(can242.Wped_fgr*100.0 / 254.0);
|—————Node:call_expression Text: line1.print(can242.Wped_fgr*100.0 / 254.0)
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: (can242.Wped_fgr*100.0 / 254.0)
|———————Node:( Text: (
|———————Node:binary_expression Text: can242.Wped_fgr*100.0 / 254.0
|————————Node:binary_expression Text: can242.Wped_fgr*100.0
|—————————Node:field_expression Text: can242.Wped_fgr
|——————————Node:identifier Text: can242
|——————————Node:. Text: .
|——————————Node:field_identifier Text: Wped_fgr
|—————————Node:* Text: *
|—————————Node:number_literal Text: 100.0
|————————Node:/ Text: /
|————————Node:number_literal Text: 254.0
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print("|");
|—————Node:call_expression Text: line1.print("|")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("|")
|———————Node:( Text: (
|———————Node:string_literal Text: "|"
|————————Node:" Text: "
|————————Node:string_content Text: |
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print("E_tm:");
|—————Node:call_expression Text: line1.print("E_tm:")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("E_tm:")
|———————Node:( Text: (
|———————Node:string_literal Text: "E_tm:"
|————————Node:" Text: "
|————————Node:string_content Text: E_tm:
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print(can245.E_tm);
|—————Node:call_expression Text: line1.print(can245.E_tm)
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: (can245.E_tm)
|———————Node:( Text: (
|———————Node:field_expression Text: can245.E_tm
|————————Node:identifier Text: can245
|————————Node:. Text: .
|————————Node:field_identifier Text: E_tm
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print("|");
|—————Node:call_expression Text: line1.print("|")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("|")
|———————Node:( Text: (
|———————Node:string_literal Text: "|"
|————————Node:" Text: "
|————————Node:string_content Text: |
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print("B_bremse:");
|—————Node:call_expression Text: line1.print("B_bremse:")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("B_bremse:")
|———————Node:( Text: (
|———————Node:string_literal Text: "B_bremse:"
|————————Node:" Text: "
|————————Node:string_content Text: B_bremse:
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print(can245.B_bremse);
|—————Node:call_expression Text: line1.print(can245.B_bremse)
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: (can245.B_bremse)
|———————Node:( Text: (
|———————Node:field_expression Text: can245.B_bremse
|————————Node:identifier Text: can245
|————————Node:. Text: .
|————————Node:field_identifier Text: B_bremse
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print("|");
|—————Node:call_expression Text: line1.print("|")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("|")
|———————Node:( Text: (
|———————Node:string_literal Text: "|"
|————————Node:" Text: "
|————————Node:string_content Text: |
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:comment Text: //line1.print(",E_bremse=");
|————Node:comment Text: //line1.print(can245.E_bremse);
|————Node:comment Text: //line1.print(",B_ffz=");
|————Node:comment Text: //line1.print(can245.B_ffz);
|————Node:expression_statement Text: line1.print("stat_fgr:");
|—————Node:call_expression Text: line1.print("stat_fgr:")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("stat_fgr:")
|———————Node:( Text: (
|———————Node:string_literal Text: "stat_fgr:"
|————————Node:" Text: "
|————————Node:string_content Text: stat_fgr:
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print(can245.stat_fgr);
|—————Node:call_expression Text: line1.print(can245.stat_fgr)
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: (can245.stat_fgr)
|———————Node:( Text: (
|———————Node:field_expression Text: can245.stat_fgr
|————————Node:identifier Text: can245
|————————Node:. Text: .
|————————Node:field_identifier Text: stat_fgr
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print("|");
|—————Node:call_expression Text: line1.print("|")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("|")
|———————Node:( Text: (
|———————Node:string_literal Text: "|"
|————————Node:" Text: "
|————————Node:string_content Text: |
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print("mibas:");
|—————Node:call_expression Text: line1.print("mibas:")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("mibas:")
|———————Node:( Text: (
|———————Node:string_literal Text: "mibas:"
|————————Node:" Text: "
|————————Node:string_content Text: mibas:
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print(can245.mibas);
|—————Node:call_expression Text: line1.print(can245.mibas)
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: (can245.mibas)
|———————Node:( Text: (
|———————Node:field_expression Text: can245.mibas
|————————Node:identifier Text: can245
|————————Node:. Text: .
|————————Node:field_identifier Text: mibas
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print("|");
|—————Node:call_expression Text: line1.print("|")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("|")
|———————Node:( Text: (
|———————Node:string_literal Text: "|"
|————————Node:" Text: "
|————————Node:string_content Text: |
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print("nstat:");
|—————Node:call_expression Text: line1.print("nstat:")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("nstat:")
|———————Node:( Text: (
|———————Node:string_literal Text: "nstat:"
|————————Node:" Text: "
|————————Node:string_content Text: nstat:
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print(can245.nstat);
|—————Node:call_expression Text: line1.print(can245.nstat)
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: (can245.nstat)
|———————Node:( Text: (
|———————Node:field_expression Text: can245.nstat
|————————Node:identifier Text: can245
|————————Node:. Text: .
|————————Node:field_identifier Text: nstat
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print("|");
|—————Node:call_expression Text: line1.print("|")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("|")
|———————Node:( Text: (
|———————Node:string_literal Text: "|"
|————————Node:" Text: "
|————————Node:string_content Text: |
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print("mizwmn:");
|—————Node:call_expression Text: line1.print("mizwmn:")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("mizwmn:")
|———————Node:( Text: (
|———————Node:string_literal Text: "mizwmn:"
|————————Node:" Text: "
|————————Node:string_content Text: mizwmn:
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print(can245.mizwmn);
|—————Node:call_expression Text: line1.print(can245.mizwmn)
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: (can245.mizwmn)
|———————Node:( Text: (
|———————Node:field_expression Text: can245.mizwmn
|————————Node:identifier Text: can245
|————————Node:. Text: .
|————————Node:field_identifier Text: mizwmn
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print("|");
|—————Node:call_expression Text: line1.print("|")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("|")
|———————Node:( Text: (
|———————Node:string_literal Text: "|"
|————————Node:" Text: "
|————————Node:string_content Text: |
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print("mimax:");
|—————Node:call_expression Text: line1.print("mimax:")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("mimax:")
|———————Node:( Text: (
|———————Node:string_literal Text: "mimax:"
|————————Node:" Text: "
|————————Node:string_content Text: mimax:
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print(can245.mimax);
|—————Node:call_expression Text: line1.print(can245.mimax)
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: (can245.mimax)
|———————Node:( Text: (
|———————Node:field_expression Text: can245.mimax
|————————Node:identifier Text: can245
|————————Node:. Text: .
|————————Node:field_identifier Text: mimax
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print("|");
|—————Node:call_expression Text: line1.print("|")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("|")
|———————Node:( Text: (
|———————Node:string_literal Text: "|"
|————————Node:" Text: "
|————————Node:string_content Text: |
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print("misol:");
|—————Node:call_expression Text: line1.print("misol:")
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("misol:")
|———————Node:( Text: (
|———————Node:string_literal Text: "misol:"
|————————Node:" Text: "
|————————Node:string_content Text: misol:
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: line1.print(can245.misol);
|—————Node:call_expression Text: line1.print(can245.misol)
|——————Node:field_expression Text: line1.print
|———————Node:identifier Text: line1
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: (can245.misol)
|———————Node:( Text: (
|———————Node:field_expression Text: can245.misol
|————————Node:identifier Text: can245
|————————Node:. Text: .
|————————Node:field_identifier Text: misol
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: Serial.println(line1);
|—————Node:call_expression Text: Serial.println(line1)
|——————Node:field_expression Text: Serial.println
|———————Node:identifier Text: Serial
|———————Node:. Text: .
|———————Node:field_identifier Text: println
|——————Node:argument_list Text: (line1)
|———————Node:( Text: (
|———————Node:identifier Text: line1
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:} Text: }
|——Node:#endif Text: #endif
