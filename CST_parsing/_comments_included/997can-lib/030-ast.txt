997can-lib-Can997.cpp

|Node:translation_unit
|—Node:preproc_include Text: #include <arduino.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <arduino.h>
|—Node:preproc_include Text: #include <mcp_can_dfs.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <mcp_can_dfs.h>
|—Node:preproc_include Text: #include <mcp_can.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <mcp_can.h>
|—Node:preproc_include Text: #include <EngineMsmt.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <EngineMsmt.h>
|—Node:preproc_include Text: #include "Can997.h"

|——Node:#include Text: #include
|——Node:string_literal Text: "Can997.h"
|———Node:" Text: "
|———Node:string_content Text: Can997.h
|———Node:" Text: "
|—Node:comment Text: //#define DEBUGSERIAL Serial
|—Node:comment Text: //#pragma message("please set TIMEOUTVALUE to 250 in mcp_can_dfs.h")
|—Node:preproc_ifdef Text: #ifdef __AVR_ATmega328P__
#include "DisplayStderr.h"
#define MCP_STDERR STDERR
#define DISPLAY_CAN_SLAVE

#else
#define MCP_STDERR Serial
#endif
|——Node:#ifdef Text: #ifdef
|——Node:identifier Text: __AVR_ATmega328P__
|——Node:preproc_include Text: #include "DisplayStderr.h"

|———Node:#include Text: #include
|———Node:string_literal Text: "DisplayStderr.h"
|————Node:" Text: "
|————Node:string_content Text: DisplayStderr.h
|————Node:" Text: "
|——Node:preproc_def Text: #define MCP_STDERR STDERR

|———Node:#define Text: #define
|———Node:identifier Text: MCP_STDERR
|———Node:preproc_arg Text: STDERR
|——Node:preproc_def Text: #define DISPLAY_CAN_SLAVE

|———Node:#define Text: #define
|———Node:identifier Text: DISPLAY_CAN_SLAVE
|——Node:preproc_else Text: #else
#define MCP_STDERR Serial

|———Node:#else Text: #else
|———Node:preproc_def Text: #define MCP_STDERR Serial

|————Node:#define Text: #define
|————Node:identifier Text: MCP_STDERR
|————Node:preproc_arg Text: Serial
|——Node:#endif Text: #endif
|—Node:declaration Text: unsigned char flagRecv = 0;
|——Node:sized_type_specifier Text: unsigned char
|———Node:unsigned Text: unsigned
|———Node:primitive_type Text: char
|——Node:init_declarator Text: flagRecv = 0
|———Node:identifier Text: flagRecv
|———Node:= Text: =
|———Node:number_literal Text: 0
|——Node:; Text: ;
|—Node:declaration Text: unsigned char len = 0;
|——Node:sized_type_specifier Text: unsigned char
|———Node:unsigned Text: unsigned
|———Node:primitive_type Text: char
|——Node:init_declarator Text: len = 0
|———Node:identifier Text: len
|———Node:= Text: =
|———Node:number_literal Text: 0
|——Node:; Text: ;
|—Node:declaration Text: long unsigned int rxId;
|——Node:sized_type_specifier Text: long unsigned int
|———Node:long Text: long
|———Node:unsigned Text: unsigned
|———Node:primitive_type Text: int
|——Node:identifier Text: rxId
|——Node:; Text: ;
|—Node:declaration Text: byte canbuf[8];
|——Node:type_identifier Text: byte
|——Node:array_declarator Text: canbuf[8]
|———Node:identifier Text: canbuf
|———Node:[ Text: [
|———Node:number_literal Text: 8
|———Node:] Text: ]
|——Node:; Text: ;
|—Node:preproc_ifdef Text: #ifdef DEBUGSERIAL
char msgString[] = "                            ";
#endif
|——Node:#ifdef Text: #ifdef
|——Node:identifier Text: DEBUGSERIAL
|——Node:declaration Text: char msgString[] = "                            ";
|———Node:primitive_type Text: char
|———Node:init_declarator Text: msgString[] = "                            "
|————Node:array_declarator Text: msgString[]
|—————Node:identifier Text: msgString
|—————Node:[ Text: [
|—————Node:] Text: ]
|————Node:= Text: =
|————Node:string_literal Text: "                            "
|—————Node:" Text: "
|—————Node:string_content Text:                             
|—————Node:" Text: "
|———Node:; Text: ;
|——Node:#endif Text: #endif
|—Node:declaration Text: MCP_CAN CAN0(CAN_CS);
|——Node:type_identifier Text: MCP_CAN
|——Node:function_declarator Text: CAN0(CAN_CS)
|———Node:identifier Text: CAN0
|———Node:parameter_list Text: (CAN_CS)
|————Node:( Text: (
|————Node:parameter_declaration Text: CAN_CS
|—————Node:type_identifier Text: CAN_CS
|————Node:) Text: )
|——Node:; Text: ;
|—Node:comment Text: // Set CS to pin 7
|—Node:function_definition Text: void CAN_Spi_UnSelect() {
	digitalWrite(CAN_CS, HIGH);
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: CAN_Spi_UnSelect()
|———Node:identifier Text: CAN_Spi_UnSelect
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
	digitalWrite(CAN_CS, HIGH);
}
|———Node:{ Text: {
|———Node:expression_statement Text: digitalWrite(CAN_CS, HIGH);
|————Node:call_expression Text: digitalWrite(CAN_CS, HIGH)
|—————Node:identifier Text: digitalWrite
|—————Node:argument_list Text: (CAN_CS, HIGH)
|——————Node:( Text: (
|——————Node:identifier Text: CAN_CS
|——————Node:, Text: ,
|——————Node:identifier Text: HIGH
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: INT8U CAN_SendMsg(INT32U id, INT8U len, INT8U* buf) {

	INT8U sndStat = CAN_FAIL;
	sndStat = CAN0.sendMsgBuf(id, len, buf);
#ifdef DEBUGSERIAL
	if (sndStat != CAN_OK) {
		DEBUGSERIAL.print("ERROR: CAN0.sendMsgBuf(");
		DEBUGSERIAL.print(id, HEX);
		if (id & CAN_REMOTEREQUEST) DEBUGSERIAL.print("  CAN_REMOTEREQUEST");
		if (id & CAN_EXTENDED) DEBUGSERIAL.print("  CAN_EXTENDED");
		DEBUGSERIAL.print(")=");
		if (sndStat == CAN_GETTXBFTIMEOUT) DEBUGSERIAL.println("CAN_GETTXBFTIMEOUT");
		else if(sndStat == CAN_SENDMSGTIMEOUT) DEBUGSERIAL.println("CAN_SENDMSGTIMEOUT");
		else DEBUGSERIAL.println(sndStat);
		
	}
#endif
	return sndStat;
}
|——Node:type_identifier Text: INT8U
|——Node:function_declarator Text: CAN_SendMsg(INT32U id, INT8U len, INT8U* buf)
|———Node:identifier Text: CAN_SendMsg
|———Node:parameter_list Text: (INT32U id, INT8U len, INT8U* buf)
|————Node:( Text: (
|————Node:parameter_declaration Text: INT32U id
|—————Node:type_identifier Text: INT32U
|—————Node:identifier Text: id
|————Node:, Text: ,
|————Node:parameter_declaration Text: INT8U len
|—————Node:type_identifier Text: INT8U
|—————Node:identifier Text: len
|————Node:, Text: ,
|————Node:parameter_declaration Text: INT8U* buf
|—————Node:type_identifier Text: INT8U
|—————Node:pointer_declarator Text: * buf
|——————Node:* Text: *
|——————Node:identifier Text: buf
|————Node:) Text: )
|——Node:compound_statement Text: {

	INT8U sndStat = CAN_FAIL;
	sndStat = CAN0.sendMsgBuf(id, len, buf);
#ifdef DEBUGSERIAL
	if (sndStat != CAN_OK) {
		DEBUGSERIAL.print("ERROR: CAN0.sendMsgBuf(");
		DEBUGSERIAL.print(id, HEX);
		if (id & CAN_REMOTEREQUEST) DEBUGSERIAL.print("  CAN_REMOTEREQUEST");
		if (id & CAN_EXTENDED) DEBUGSERIAL.print("  CAN_EXTENDED");
		DEBUGSERIAL.print(")=");
		if (sndStat == CAN_GETTXBFTIMEOUT) DEBUGSERIAL.println("CAN_GETTXBFTIMEOUT");
		else if(sndStat == CAN_SENDMSGTIMEOUT) DEBUGSERIAL.println("CAN_SENDMSGTIMEOUT");
		else DEBUGSERIAL.println(sndStat);
		
	}
#endif
	return sndStat;
}
|———Node:{ Text: {
|———Node:declaration Text: INT8U sndStat = CAN_FAIL;
|————Node:type_identifier Text: INT8U
|————Node:init_declarator Text: sndStat = CAN_FAIL
|—————Node:identifier Text: sndStat
|—————Node:= Text: =
|—————Node:identifier Text: CAN_FAIL
|————Node:; Text: ;
|———Node:expression_statement Text: sndStat = CAN0.sendMsgBuf(id, len, buf);
|————Node:assignment_expression Text: sndStat = CAN0.sendMsgBuf(id, len, buf)
|—————Node:identifier Text: sndStat
|—————Node:= Text: =
|—————Node:call_expression Text: CAN0.sendMsgBuf(id, len, buf)
|——————Node:field_expression Text: CAN0.sendMsgBuf
|———————Node:identifier Text: CAN0
|———————Node:. Text: .
|———————Node:field_identifier Text: sendMsgBuf
|——————Node:argument_list Text: (id, len, buf)
|———————Node:( Text: (
|———————Node:identifier Text: id
|———————Node:, Text: ,
|———————Node:identifier Text: len
|———————Node:, Text: ,
|———————Node:identifier Text: buf
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef DEBUGSERIAL
	if (sndStat != CAN_OK) {
		DEBUGSERIAL.print("ERROR: CAN0.sendMsgBuf(");
		DEBUGSERIAL.print(id, HEX);
		if (id & CAN_REMOTEREQUEST) DEBUGSERIAL.print("  CAN_REMOTEREQUEST");
		if (id & CAN_EXTENDED) DEBUGSERIAL.print("  CAN_EXTENDED");
		DEBUGSERIAL.print(")=");
		if (sndStat == CAN_GETTXBFTIMEOUT) DEBUGSERIAL.println("CAN_GETTXBFTIMEOUT");
		else if(sndStat == CAN_SENDMSGTIMEOUT) DEBUGSERIAL.println("CAN_SENDMSGTIMEOUT");
		else DEBUGSERIAL.println(sndStat);
		
	}
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: DEBUGSERIAL
|————Node:if_statement Text: if (sndStat != CAN_OK) {
		DEBUGSERIAL.print("ERROR: CAN0.sendMsgBuf(");
		DEBUGSERIAL.print(id, HEX);
		if (id & CAN_REMOTEREQUEST) DEBUGSERIAL.print("  CAN_REMOTEREQUEST");
		if (id & CAN_EXTENDED) DEBUGSERIAL.print("  CAN_EXTENDED");
		DEBUGSERIAL.print(")=");
		if (sndStat == CAN_GETTXBFTIMEOUT) DEBUGSERIAL.println("CAN_GETTXBFTIMEOUT");
		else if(sndStat == CAN_SENDMSGTIMEOUT) DEBUGSERIAL.println("CAN_SENDMSGTIMEOUT");
		else DEBUGSERIAL.println(sndStat);
		
	}
|—————Node:if Text: if
|—————Node:condition_clause Text: (sndStat != CAN_OK)
|——————Node:( Text: (
|——————Node:binary_expression Text: sndStat != CAN_OK
|———————Node:identifier Text: sndStat
|———————Node:!= Text: !=
|———————Node:identifier Text: CAN_OK
|——————Node:) Text: )
|—————Node:compound_statement Text: {
		DEBUGSERIAL.print("ERROR: CAN0.sendMsgBuf(");
		DEBUGSERIAL.print(id, HEX);
		if (id & CAN_REMOTEREQUEST) DEBUGSERIAL.print("  CAN_REMOTEREQUEST");
		if (id & CAN_EXTENDED) DEBUGSERIAL.print("  CAN_EXTENDED");
		DEBUGSERIAL.print(")=");
		if (sndStat == CAN_GETTXBFTIMEOUT) DEBUGSERIAL.println("CAN_GETTXBFTIMEOUT");
		else if(sndStat == CAN_SENDMSGTIMEOUT) DEBUGSERIAL.println("CAN_SENDMSGTIMEOUT");
		else DEBUGSERIAL.println(sndStat);
		
	}
|——————Node:{ Text: {
|——————Node:expression_statement Text: DEBUGSERIAL.print("ERROR: CAN0.sendMsgBuf(");
|———————Node:call_expression Text: DEBUGSERIAL.print("ERROR: CAN0.sendMsgBuf(")
|————————Node:field_expression Text: DEBUGSERIAL.print
|—————————Node:identifier Text: DEBUGSERIAL
|—————————Node:. Text: .
|—————————Node:field_identifier Text: print
|————————Node:argument_list Text: ("ERROR: CAN0.sendMsgBuf(")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "ERROR: CAN0.sendMsgBuf("
|——————————Node:" Text: "
|——————————Node:string_content Text: ERROR: CAN0.sendMsgBuf(
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: DEBUGSERIAL.print(id, HEX);
|———————Node:call_expression Text: DEBUGSERIAL.print(id, HEX)
|————————Node:field_expression Text: DEBUGSERIAL.print
|—————————Node:identifier Text: DEBUGSERIAL
|—————————Node:. Text: .
|—————————Node:field_identifier Text: print
|————————Node:argument_list Text: (id, HEX)
|—————————Node:( Text: (
|—————————Node:identifier Text: id
|—————————Node:, Text: ,
|—————————Node:identifier Text: HEX
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:if_statement Text: if (id & CAN_REMOTEREQUEST) DEBUGSERIAL.print("  CAN_REMOTEREQUEST");
|———————Node:if Text: if
|———————Node:condition_clause Text: (id & CAN_REMOTEREQUEST)
|————————Node:( Text: (
|————————Node:binary_expression Text: id & CAN_REMOTEREQUEST
|—————————Node:identifier Text: id
|—————————Node:& Text: &
|—————————Node:identifier Text: CAN_REMOTEREQUEST
|————————Node:) Text: )
|———————Node:expression_statement Text: DEBUGSERIAL.print("  CAN_REMOTEREQUEST");
|————————Node:call_expression Text: DEBUGSERIAL.print("  CAN_REMOTEREQUEST")
|—————————Node:field_expression Text: DEBUGSERIAL.print
|——————————Node:identifier Text: DEBUGSERIAL
|——————————Node:. Text: .
|——————————Node:field_identifier Text: print
|—————————Node:argument_list Text: ("  CAN_REMOTEREQUEST")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "  CAN_REMOTEREQUEST"
|———————————Node:" Text: "
|———————————Node:string_content Text:   CAN_REMOTEREQUEST
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:; Text: ;
|——————Node:if_statement Text: if (id & CAN_EXTENDED) DEBUGSERIAL.print("  CAN_EXTENDED");
|———————Node:if Text: if
|———————Node:condition_clause Text: (id & CAN_EXTENDED)
|————————Node:( Text: (
|————————Node:binary_expression Text: id & CAN_EXTENDED
|—————————Node:identifier Text: id
|—————————Node:& Text: &
|—————————Node:identifier Text: CAN_EXTENDED
|————————Node:) Text: )
|———————Node:expression_statement Text: DEBUGSERIAL.print("  CAN_EXTENDED");
|————————Node:call_expression Text: DEBUGSERIAL.print("  CAN_EXTENDED")
|—————————Node:field_expression Text: DEBUGSERIAL.print
|——————————Node:identifier Text: DEBUGSERIAL
|——————————Node:. Text: .
|——————————Node:field_identifier Text: print
|—————————Node:argument_list Text: ("  CAN_EXTENDED")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "  CAN_EXTENDED"
|———————————Node:" Text: "
|———————————Node:string_content Text:   CAN_EXTENDED
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:; Text: ;
|——————Node:expression_statement Text: DEBUGSERIAL.print(")=");
|———————Node:call_expression Text: DEBUGSERIAL.print(")=")
|————————Node:field_expression Text: DEBUGSERIAL.print
|—————————Node:identifier Text: DEBUGSERIAL
|—————————Node:. Text: .
|—————————Node:field_identifier Text: print
|————————Node:argument_list Text: (")=")
|—————————Node:( Text: (
|—————————Node:string_literal Text: ")="
|——————————Node:" Text: "
|——————————Node:string_content Text: )=
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:if_statement Text: if (sndStat == CAN_GETTXBFTIMEOUT) DEBUGSERIAL.println("CAN_GETTXBFTIMEOUT");
		else if(sndStat == CAN_SENDMSGTIMEOUT) DEBUGSERIAL.println("CAN_SENDMSGTIMEOUT");
		else DEBUGSERIAL.println(sndStat);
|———————Node:if Text: if
|———————Node:condition_clause Text: (sndStat == CAN_GETTXBFTIMEOUT)
|————————Node:( Text: (
|————————Node:binary_expression Text: sndStat == CAN_GETTXBFTIMEOUT
|—————————Node:identifier Text: sndStat
|—————————Node:== Text: ==
|—————————Node:identifier Text: CAN_GETTXBFTIMEOUT
|————————Node:) Text: )
|———————Node:expression_statement Text: DEBUGSERIAL.println("CAN_GETTXBFTIMEOUT");
|————————Node:call_expression Text: DEBUGSERIAL.println("CAN_GETTXBFTIMEOUT")
|—————————Node:field_expression Text: DEBUGSERIAL.println
|——————————Node:identifier Text: DEBUGSERIAL
|——————————Node:. Text: .
|——————————Node:field_identifier Text: println
|—————————Node:argument_list Text: ("CAN_GETTXBFTIMEOUT")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "CAN_GETTXBFTIMEOUT"
|———————————Node:" Text: "
|———————————Node:string_content Text: CAN_GETTXBFTIMEOUT
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:else_clause Text: else if(sndStat == CAN_SENDMSGTIMEOUT) DEBUGSERIAL.println("CAN_SENDMSGTIMEOUT");
		else DEBUGSERIAL.println(sndStat);
|————————Node:else Text: else
|————————Node:if_statement Text: if(sndStat == CAN_SENDMSGTIMEOUT) DEBUGSERIAL.println("CAN_SENDMSGTIMEOUT");
		else DEBUGSERIAL.println(sndStat);
|—————————Node:if Text: if
|—————————Node:condition_clause Text: (sndStat == CAN_SENDMSGTIMEOUT)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: sndStat == CAN_SENDMSGTIMEOUT
|———————————Node:identifier Text: sndStat
|———————————Node:== Text: ==
|———————————Node:identifier Text: CAN_SENDMSGTIMEOUT
|——————————Node:) Text: )
|—————————Node:expression_statement Text: DEBUGSERIAL.println("CAN_SENDMSGTIMEOUT");
|——————————Node:call_expression Text: DEBUGSERIAL.println("CAN_SENDMSGTIMEOUT")
|———————————Node:field_expression Text: DEBUGSERIAL.println
|————————————Node:identifier Text: DEBUGSERIAL
|————————————Node:. Text: .
|————————————Node:field_identifier Text: println
|———————————Node:argument_list Text: ("CAN_SENDMSGTIMEOUT")
|————————————Node:( Text: (
|————————————Node:string_literal Text: "CAN_SENDMSGTIMEOUT"
|—————————————Node:" Text: "
|—————————————Node:string_content Text: CAN_SENDMSGTIMEOUT
|—————————————Node:" Text: "
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:else_clause Text: else DEBUGSERIAL.println(sndStat);
|——————————Node:else Text: else
|——————————Node:expression_statement Text: DEBUGSERIAL.println(sndStat);
|———————————Node:call_expression Text: DEBUGSERIAL.println(sndStat)
|————————————Node:field_expression Text: DEBUGSERIAL.println
|—————————————Node:identifier Text: DEBUGSERIAL
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: println
|————————————Node:argument_list Text: (sndStat)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: sndStat
|—————————————Node:) Text: )
|———————————Node:; Text: ;
|——————Node:} Text: }
|————Node:#endif Text: #endif
|———Node:return_statement Text: return sndStat;
|————Node:return Text: return
|————Node:identifier Text: sndStat
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: INT8U CAN_SetMode(int mode) {
	byte sndStat = CAN_FAIL;
	sndStat = CAN0.setMode(mode);
#ifdef MCP_STDERR
	if (sndStat != CAN_OK) {
		MCP_STDERR.print("Error CAN0.setMode(");
		if (mode == MCP_NORMAL) MCP_STDERR.print("MCP_NORMAL ");
		else if (mode == MCP_LISTENONLY) MCP_STDERR.print("MCP_LISTENONLY ");
		MCP_STDERR.print(") code=");
		MCP_STDERR.println(sndStat);
	}
#endif
	return sndStat;
}
|——Node:type_identifier Text: INT8U
|——Node:function_declarator Text: CAN_SetMode(int mode)
|———Node:identifier Text: CAN_SetMode
|———Node:parameter_list Text: (int mode)
|————Node:( Text: (
|————Node:parameter_declaration Text: int mode
|—————Node:primitive_type Text: int
|—————Node:identifier Text: mode
|————Node:) Text: )
|——Node:compound_statement Text: {
	byte sndStat = CAN_FAIL;
	sndStat = CAN0.setMode(mode);
#ifdef MCP_STDERR
	if (sndStat != CAN_OK) {
		MCP_STDERR.print("Error CAN0.setMode(");
		if (mode == MCP_NORMAL) MCP_STDERR.print("MCP_NORMAL ");
		else if (mode == MCP_LISTENONLY) MCP_STDERR.print("MCP_LISTENONLY ");
		MCP_STDERR.print(") code=");
		MCP_STDERR.println(sndStat);
	}
#endif
	return sndStat;
}
|———Node:{ Text: {
|———Node:declaration Text: byte sndStat = CAN_FAIL;
|————Node:type_identifier Text: byte
|————Node:init_declarator Text: sndStat = CAN_FAIL
|—————Node:identifier Text: sndStat
|—————Node:= Text: =
|—————Node:identifier Text: CAN_FAIL
|————Node:; Text: ;
|———Node:expression_statement Text: sndStat = CAN0.setMode(mode);
|————Node:assignment_expression Text: sndStat = CAN0.setMode(mode)
|—————Node:identifier Text: sndStat
|—————Node:= Text: =
|—————Node:call_expression Text: CAN0.setMode(mode)
|——————Node:field_expression Text: CAN0.setMode
|———————Node:identifier Text: CAN0
|———————Node:. Text: .
|———————Node:field_identifier Text: setMode
|——————Node:argument_list Text: (mode)
|———————Node:( Text: (
|———————Node:identifier Text: mode
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef MCP_STDERR
	if (sndStat != CAN_OK) {
		MCP_STDERR.print("Error CAN0.setMode(");
		if (mode == MCP_NORMAL) MCP_STDERR.print("MCP_NORMAL ");
		else if (mode == MCP_LISTENONLY) MCP_STDERR.print("MCP_LISTENONLY ");
		MCP_STDERR.print(") code=");
		MCP_STDERR.println(sndStat);
	}
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: MCP_STDERR
|————Node:if_statement Text: if (sndStat != CAN_OK) {
		MCP_STDERR.print("Error CAN0.setMode(");
		if (mode == MCP_NORMAL) MCP_STDERR.print("MCP_NORMAL ");
		else if (mode == MCP_LISTENONLY) MCP_STDERR.print("MCP_LISTENONLY ");
		MCP_STDERR.print(") code=");
		MCP_STDERR.println(sndStat);
	}
|—————Node:if Text: if
|—————Node:condition_clause Text: (sndStat != CAN_OK)
|——————Node:( Text: (
|——————Node:binary_expression Text: sndStat != CAN_OK
|———————Node:identifier Text: sndStat
|———————Node:!= Text: !=
|———————Node:identifier Text: CAN_OK
|——————Node:) Text: )
|—————Node:compound_statement Text: {
		MCP_STDERR.print("Error CAN0.setMode(");
		if (mode == MCP_NORMAL) MCP_STDERR.print("MCP_NORMAL ");
		else if (mode == MCP_LISTENONLY) MCP_STDERR.print("MCP_LISTENONLY ");
		MCP_STDERR.print(") code=");
		MCP_STDERR.println(sndStat);
	}
|——————Node:{ Text: {
|——————Node:expression_statement Text: MCP_STDERR.print("Error CAN0.setMode(");
|———————Node:call_expression Text: MCP_STDERR.print("Error CAN0.setMode(")
|————————Node:field_expression Text: MCP_STDERR.print
|—————————Node:identifier Text: MCP_STDERR
|—————————Node:. Text: .
|—————————Node:field_identifier Text: print
|————————Node:argument_list Text: ("Error CAN0.setMode(")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Error CAN0.setMode("
|——————————Node:" Text: "
|——————————Node:string_content Text: Error CAN0.setMode(
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:if_statement Text: if (mode == MCP_NORMAL) MCP_STDERR.print("MCP_NORMAL ");
		else if (mode == MCP_LISTENONLY) MCP_STDERR.print("MCP_LISTENONLY ");
|———————Node:if Text: if
|———————Node:condition_clause Text: (mode == MCP_NORMAL)
|————————Node:( Text: (
|————————Node:binary_expression Text: mode == MCP_NORMAL
|—————————Node:identifier Text: mode
|—————————Node:== Text: ==
|—————————Node:identifier Text: MCP_NORMAL
|————————Node:) Text: )
|———————Node:expression_statement Text: MCP_STDERR.print("MCP_NORMAL ");
|————————Node:call_expression Text: MCP_STDERR.print("MCP_NORMAL ")
|—————————Node:field_expression Text: MCP_STDERR.print
|——————————Node:identifier Text: MCP_STDERR
|——————————Node:. Text: .
|——————————Node:field_identifier Text: print
|—————————Node:argument_list Text: ("MCP_NORMAL ")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "MCP_NORMAL "
|———————————Node:" Text: "
|———————————Node:string_content Text: MCP_NORMAL 
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:else_clause Text: else if (mode == MCP_LISTENONLY) MCP_STDERR.print("MCP_LISTENONLY ");
|————————Node:else Text: else
|————————Node:if_statement Text: if (mode == MCP_LISTENONLY) MCP_STDERR.print("MCP_LISTENONLY ");
|—————————Node:if Text: if
|—————————Node:condition_clause Text: (mode == MCP_LISTENONLY)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: mode == MCP_LISTENONLY
|———————————Node:identifier Text: mode
|———————————Node:== Text: ==
|———————————Node:identifier Text: MCP_LISTENONLY
|——————————Node:) Text: )
|—————————Node:expression_statement Text: MCP_STDERR.print("MCP_LISTENONLY ");
|——————————Node:call_expression Text: MCP_STDERR.print("MCP_LISTENONLY ")
|———————————Node:field_expression Text: MCP_STDERR.print
|————————————Node:identifier Text: MCP_STDERR
|————————————Node:. Text: .
|————————————Node:field_identifier Text: print
|———————————Node:argument_list Text: ("MCP_LISTENONLY ")
|————————————Node:( Text: (
|————————————Node:string_literal Text: "MCP_LISTENONLY "
|—————————————Node:" Text: "
|—————————————Node:string_content Text: MCP_LISTENONLY 
|—————————————Node:" Text: "
|————————————Node:) Text: )
|——————————Node:; Text: ;
|——————Node:expression_statement Text: MCP_STDERR.print(") code=");
|———————Node:call_expression Text: MCP_STDERR.print(") code=")
|————————Node:field_expression Text: MCP_STDERR.print
|—————————Node:identifier Text: MCP_STDERR
|—————————Node:. Text: .
|—————————Node:field_identifier Text: print
|————————Node:argument_list Text: (") code=")
|—————————Node:( Text: (
|—————————Node:string_literal Text: ") code="
|——————————Node:" Text: "
|——————————Node:string_content Text: ) code=
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: MCP_STDERR.println(sndStat);
|———————Node:call_expression Text: MCP_STDERR.println(sndStat)
|————————Node:field_expression Text: MCP_STDERR.println
|—————————Node:identifier Text: MCP_STDERR
|—————————Node:. Text: .
|—————————Node:field_identifier Text: println
|————————Node:argument_list Text: (sndStat)
|—————————Node:( Text: (
|—————————Node:identifier Text: sndStat
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:} Text: }
|————Node:#endif Text: #endif
|———Node:return_statement Text: return sndStat;
|————Node:return Text: return
|————Node:identifier Text: sndStat
|————Node:; Text: ;
|———Node:} Text: }
|—Node:preproc_ifdef Text: #ifdef DISPLAY_CAN_SLAVE


INT8U CAN_BeginSlave() {
	int retries = 1;
	INT8U rv = MCP2515_FAIL;
	for (int r = 0; r < retries; r++) {
		if (CAN0.begin(MCP_STDEXT, CAN_500KBPS, MCP_8MHZ) == CAN_OK) {
			rv = MCP2515_OK;
			break;
		}
		else delay(100);
	}
	if (rv == MCP2515_FAIL) {
#ifdef MCP_STDERR
		MCP_STDERR.println("MCP2515_FAIL");
#endif
#ifdef DEBUGSERIAL
		DEBUGSERIAL.println("MCP2515_FAIL");
#endif
		return rv;
	}
	rv = CAN_SetMode(MCP_NORMAL);

	if (rv != CAN_OK)return rv;
	pinMode(CAN0_INT, INPUT);								// Configuring pin for /INT input
	long mask = ((long)0x7FF) << 16;
	// here we allow EXTENDED IDs CAN_PRIVATE1 and CAN_PRIVATE2 only
	if (CAN_PRIVATE1 & CAN_EXTENDED) { mask = 0x1FFFFFFF; }
	
	rv = CAN0.init_Mask(0, (CAN_PRIVATE1 & CAN_EXTENDED) ? 1 : 0, mask);      // there are 2 mask in mcp2515, you need to set both of them
	if (rv != CAN_OK) {
#ifdef MCP_STDERR
		MCP_STDERR.print("CAN0.init_Mask(0, 0, ((long)0xCAN_PRIVATE1&CAN_ALL_STD) error:");
		MCP_STDERR.println(rv);
#endif
		return rv;
	}
	CAN0.init_Filt(0, (CAN_PRIVATE1 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE1 & CAN_EXTENDED) ? (long)CAN_PRIVATE1 : (long)CAN_PRIVATE1 << 16);
	CAN0.init_Filt(1, (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16);

	CAN0.init_Mask(1, (CAN_PRIVATE1 & CAN_EXTENDED) ? 1 : 0, mask);
	CAN0.init_Filt(2, (CAN_PRIVATE1 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE1 & CAN_EXTENDED) ? (long)CAN_PRIVATE1 : (long)CAN_PRIVATE1 << 16);
	CAN0.init_Filt(3, (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16);
	CAN0.init_Filt(4, (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16);
	CAN0.init_Filt(5, (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16);
	CAN0.init_Filt(6, (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16);
	// there are 6 filter in mcp2515

	return rv;
}


INT8U  getCANDataPrivate(long duration, EngineMsmtU& Engine) {
	INT8U sndStat = CAN_FAIL;
	int bothreached = 0;
	unsigned long privateids[] = { CAN_PRIVATE1 ,CAN_PRIVATE2 };
	long start = millis();
	do {
		if (!digitalRead(CAN0_INT))                         // If CAN0_INT pin is low, read receive buffer
		{
			sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);      // Read data: len = data length, buf = data byte(s)
			if (sndStat != CAN_OK) continue;
#ifdef DEBUGSERIAL
			if (len > 0 && len <= 8) {
				DEBUGSERIAL.print("  rxId=:0x");
				DEBUGSERIAL.print(rxId, HEX);
				DEBUGSERIAL.println("(");
				for (byte i = 0; i < len; i++) {
					sprintf(msgString, " 0x%.2X", canbuf[i]);
					DEBUGSERIAL.print(msgString);
				}
				DEBUGSERIAL.println(")");
			}
#endif
			if (rxId == privateids[0] || rxId == privateids[1]) {
#ifdef DEBUGSERIAL
				if (rxId == CAN_PRIVATE1) DEBUGSERIAL.print("CAN_PRIVATE1");
				else if (rxId == CAN_PRIVATE2) DEBUGSERIAL.print("CAN_PRIVATE2");
				else DEBUGSERIAL.print(rxId, HEX);
				DEBUGSERIAL.print(" (");
				DEBUGSERIAL.print("len=");
				DEBUGSERIAL.print(len);
				DEBUGSERIAL.println(")");
#endif
				if (len < 8) continue;
				if (rxId == CAN_PRIVATE1) {
					Engine.b[0] = canbuf[0];
					Engine.b[1] = canbuf[1];
					Engine.b[2] = canbuf[2];
					Engine.b[3] = canbuf[3];
					Engine.b[4] = canbuf[4];
					Engine.b[5] = canbuf[5];
					Engine.b[6] = canbuf[6];
					Engine.b[7] = canbuf[7];
					bothreached |= 1;
				}
				if (rxId == CAN_PRIVATE2) {
					Engine.b[8] = canbuf[0];
					Engine.b[9] = canbuf[1];
					Engine.b[10] = canbuf[2];
					Engine.b[11] = canbuf[3];
					Engine.b[12] = canbuf[4];
					Engine.b[13] = canbuf[5];
					Engine.b[14] = canbuf[6];
					Engine.b[15] = canbuf[7];
					bothreached |= 2;
				}
			}
		}
		if (bothreached == 3) 	break;
	} while (millis() - start < duration);
	return sndStat;
}

#else
INT8U CAN_BeginMaster() {
	int retries = 1;
	INT8U rv = MCP2515_FAIL;
	for (int r = 0; r < retries; r++) {
		if (CAN0.begin(MCP_STDEXT, CAN_500KBPS, MCP_8MHZ) == CAN_OK) {
			rv = MCP2515_OK;
			break;
		}
		else delay(100);
	}
	if (rv == MCP2515_FAIL) {
#ifdef MCP_STDERR
		MCP_STDERR.println("MCP2515_FAIL");
#endif
#ifdef DEBUGSERIAL
		DEBUGSERIAL.println("MCP2515_FAIL");
#endif
		return rv;
	}
	
	rv = CAN_SetMode(MCP_NORMAL);
	// here we allow only standard Ids CAN_ANTRIEB242 CAN_ANTRIEB245 CAN_ANTRIEB442
	if (rv != CAN_OK)return rv;
	pinMode(CAN0_INT, INPUT);								// Configuring pin for /INT input
	long mask = ((long)0x7FF) << 16;

	rv = CAN0.init_Mask(0, 0, mask);      // there are 2 mask in mcp2515, you need to set both of them
	if (rv != CAN_OK) {
#ifdef MCP_STDERR
		MCP_STDERR.print("CAN0.init_Mask(0, 0, ((long)0x7ff) error:");
		MCP_STDERR.println(rv);
#endif
		return rv;
	}
	CAN0.init_Filt(0, 0, ((long)CAN_ANTRIEB242) << 16);
	CAN0.init_Filt(1, 0, ((long)CAN_ANTRIEB245) << 16);

	CAN0.init_Mask(1, 0, ((long)0x7FF) << 16); // only address containing 0x40 are allowed, 0x640, 0x440, 0x240, 0x241,0x24F,...
	CAN0.init_Filt(2, 0, ((long)CAN_ANTRIEB242) << 16);
	CAN0.init_Filt(3, 0, ((long)CAN_ANTRIEB245) << 16);
	CAN0.init_Filt(4, 0, ((long)CAN_ANTRIEB442) << 16);
	CAN0.init_Filt(5, 0, ((long)CAN_ANTRIEB442) << 16);
	CAN0.init_Filt(6, 0, ((long)CAN_ANTRIEB442) << 16);
	// there are 6 filter in mcp2515
	
	return rv;
}
INT8U send442() {
	byte sndStat = CAN_FAIL;
	//sndStat = CAN_SetMode(MCP_NORMAL);
	canbuf[0] = 0x02;// ACD_1  2 = Normal_Prog_aktiv
	sndStat = CAN0.sendMsgBuf(CAN_ANTRIEB442, 1, canbuf);
	//byte sndStat2 = CAN_SetMode(MCP_LISTENONLY);
	return sndStat; // never sends
}

INT8U sendBothPrivateCan(EngineMsmtU& _Engine) {
	byte sndStat = CAN_FAIL;
	//sndStat = CAN_SetMode(MCP_NORMAL);

	//if (sndStat != CAN_OK) return sndStat;
	// use address CAN_PRIVATE1, must not interfere
	sndStat = CAN_SendMsg(CAN_PRIVATE1, 8, (byte*)&_Engine.b[0]);
	if (sndStat != CAN_OK) return sndStat;
	sndStat = CAN_SendMsg(CAN_PRIVATE2, 8, (byte*)&_Engine.b[8]);
	if (sndStat != CAN_OK) return sndStat;
	//byte sndStat2 = CAN_SetMode(MCP_LISTENONLY);
	return sndStat;
}
uint16_t lastnmot = 0;
int nsame = 0;

INT8U getCan242(long duration, MOTOR_1& can242) {
	INT8U sndStat = CAN_OK;
	sndStat = CAN0.setMode(MCP_LISTENONLY);
	if (sndStat != CAN_OK) return sndStat;
	long start = millis();
	bool receivedintime = false;
	do {
		if (!digitalRead(CAN0_INT))                         // If CAN0_INT pin is low, read receive buffer
		{
			sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);
			if (sndStat != CAN_OK) continue;
			if (rxId == 0x242) {
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("Antrieb(0x242):");
				if (sizeof(MOTOR_1) != 8)DEBUGSERIAL.println("FATAL: MOTOR_1 NOT sizeof(8)");
#endif
				if (len < 8) continue;
				memcpy(&can242, canbuf, 8);
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("miist=");
				DEBUGSERIAL.print(can242.miist * 100.0 / 255.0);
				DEBUGSERIAL.print(",nmot=");
				DEBUGSERIAL.print(can242.nmot * 0.25);
				DEBUGSERIAL.print(",Wped_fgr=");
				DEBUGSERIAL.print(can242.Wped_fgr * 100.0 / 254.0);
				if (can242.E_lm) DEBUGSERIAL.print("E_lm: HFM Error");
				DEBUGSERIAL.println("");
#endif
				receivedintime = true;
				break;
			}
		}
	} while (millis() - start < duration);

	if (can242.nmot == lastnmot) nsame++;
	else nsame = 0;
	lastnmot = can242.nmot;
	sndStat = CAN0.setMode(MCP_NORMAL);
	//CAN_Spi_UnSelect();
	//Serial.println(nsame);
	if (nsame > 7) {
		can242.nmot = 0;
		can242.Wped_fgr = 0;
		can242.miist = 0;
	}
	if (!receivedintime) {
#ifdef	MCP_STDERR
		MCP_STDERR.println("Timout reading CAN_ANTRIEB242");
#endif
	}
	return sndStat;
}

INT8U getCan245(long duration, MOTOR_2& can245) {
	INT8U sndStat = CAN_FAIL;
	sndStat = CAN0.setMode(MCP_LISTENONLY);
	if (sndStat != CAN_OK) return sndStat;
	long start = millis();
	bool receivedintime = false;
	do {
		if (!digitalRead(CAN0_INT))                         // If CAN0_INT pin is low, read receive buffer
		{
			sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);
			if (sndStat != CAN_OK) continue;
			if (rxId == 0x245) {
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("Antrieb(0x245):");
				if (sizeof(MOTOR_2) != 8)DEBUGSERIAL.println("FATAL: MOTOR_1 NOT sizeof(8)");
#endif
				if (len < 8) continue;
				memcpy(&can245, canbuf, 8);

#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("Tmot=");
				DEBUGSERIAL.print(EngOilTemp(can245.Tmot));
				DEBUGSERIAL.print(",E_tm=");
				DEBUGSERIAL.print(can245.E_tm);
				DEBUGSERIAL.print(",B_bremse=");
				DEBUGSERIAL.print(can245.B_bremse);
				DEBUGSERIAL.print(",E_bremse=");
				DEBUGSERIAL.print(can245.E_bremse);
				DEBUGSERIAL.print(",B_ffz=");
				DEBUGSERIAL.print(can245.B_ffz);
				DEBUGSERIAL.print(",stat_fgr=");
				DEBUGSERIAL.print(can245.stat_fgr);
				DEBUGSERIAL.print(",mibas=");
				DEBUGSERIAL.print(can245.mibas);
				DEBUGSERIAL.print(",nstat=");
				DEBUGSERIAL.print(can245.nstat);
				DEBUGSERIAL.print(",mizwmn=");
				DEBUGSERIAL.print(can245.mizwmn);
				DEBUGSERIAL.print(",mimax=");
				DEBUGSERIAL.print(can245.mimax);
				DEBUGSERIAL.print(",misol=");
				DEBUGSERIAL.print(can245.misol);
				DEBUGSERIAL.println("");
#endif
				receivedintime = true;
				break;
			}
		}
	} while (millis() - start < duration);
	sndStat = CAN0.setMode(MCP_NORMAL);
	//CAN_Spi_UnSelect();
	if (!receivedintime) {
#ifdef	MCP_STDERR
		MCP_STDERR.println("Timout reading CAN_ANTRIEB245");
#endif
	}
	return sndStat;
}

#endif
|——Node:#ifdef Text: #ifdef
|——Node:identifier Text: DISPLAY_CAN_SLAVE
|——Node:function_definition Text: INT8U CAN_BeginSlave() {
	int retries = 1;
	INT8U rv = MCP2515_FAIL;
	for (int r = 0; r < retries; r++) {
		if (CAN0.begin(MCP_STDEXT, CAN_500KBPS, MCP_8MHZ) == CAN_OK) {
			rv = MCP2515_OK;
			break;
		}
		else delay(100);
	}
	if (rv == MCP2515_FAIL) {
#ifdef MCP_STDERR
		MCP_STDERR.println("MCP2515_FAIL");
#endif
#ifdef DEBUGSERIAL
		DEBUGSERIAL.println("MCP2515_FAIL");
#endif
		return rv;
	}
	rv = CAN_SetMode(MCP_NORMAL);

	if (rv != CAN_OK)return rv;
	pinMode(CAN0_INT, INPUT);								// Configuring pin for /INT input
	long mask = ((long)0x7FF) << 16;
	// here we allow EXTENDED IDs CAN_PRIVATE1 and CAN_PRIVATE2 only
	if (CAN_PRIVATE1 & CAN_EXTENDED) { mask = 0x1FFFFFFF; }
	
	rv = CAN0.init_Mask(0, (CAN_PRIVATE1 & CAN_EXTENDED) ? 1 : 0, mask);      // there are 2 mask in mcp2515, you need to set both of them
	if (rv != CAN_OK) {
#ifdef MCP_STDERR
		MCP_STDERR.print("CAN0.init_Mask(0, 0, ((long)0xCAN_PRIVATE1&CAN_ALL_STD) error:");
		MCP_STDERR.println(rv);
#endif
		return rv;
	}
	CAN0.init_Filt(0, (CAN_PRIVATE1 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE1 & CAN_EXTENDED) ? (long)CAN_PRIVATE1 : (long)CAN_PRIVATE1 << 16);
	CAN0.init_Filt(1, (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16);

	CAN0.init_Mask(1, (CAN_PRIVATE1 & CAN_EXTENDED) ? 1 : 0, mask);
	CAN0.init_Filt(2, (CAN_PRIVATE1 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE1 & CAN_EXTENDED) ? (long)CAN_PRIVATE1 : (long)CAN_PRIVATE1 << 16);
	CAN0.init_Filt(3, (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16);
	CAN0.init_Filt(4, (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16);
	CAN0.init_Filt(5, (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16);
	CAN0.init_Filt(6, (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16);
	// there are 6 filter in mcp2515

	return rv;
}
|———Node:type_identifier Text: INT8U
|———Node:function_declarator Text: CAN_BeginSlave()
|————Node:identifier Text: CAN_BeginSlave
|————Node:parameter_list Text: ()
|—————Node:( Text: (
|—————Node:) Text: )
|———Node:compound_statement Text: {
	int retries = 1;
	INT8U rv = MCP2515_FAIL;
	for (int r = 0; r < retries; r++) {
		if (CAN0.begin(MCP_STDEXT, CAN_500KBPS, MCP_8MHZ) == CAN_OK) {
			rv = MCP2515_OK;
			break;
		}
		else delay(100);
	}
	if (rv == MCP2515_FAIL) {
#ifdef MCP_STDERR
		MCP_STDERR.println("MCP2515_FAIL");
#endif
#ifdef DEBUGSERIAL
		DEBUGSERIAL.println("MCP2515_FAIL");
#endif
		return rv;
	}
	rv = CAN_SetMode(MCP_NORMAL);

	if (rv != CAN_OK)return rv;
	pinMode(CAN0_INT, INPUT);								// Configuring pin for /INT input
	long mask = ((long)0x7FF) << 16;
	// here we allow EXTENDED IDs CAN_PRIVATE1 and CAN_PRIVATE2 only
	if (CAN_PRIVATE1 & CAN_EXTENDED) { mask = 0x1FFFFFFF; }
	
	rv = CAN0.init_Mask(0, (CAN_PRIVATE1 & CAN_EXTENDED) ? 1 : 0, mask);      // there are 2 mask in mcp2515, you need to set both of them
	if (rv != CAN_OK) {
#ifdef MCP_STDERR
		MCP_STDERR.print("CAN0.init_Mask(0, 0, ((long)0xCAN_PRIVATE1&CAN_ALL_STD) error:");
		MCP_STDERR.println(rv);
#endif
		return rv;
	}
	CAN0.init_Filt(0, (CAN_PRIVATE1 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE1 & CAN_EXTENDED) ? (long)CAN_PRIVATE1 : (long)CAN_PRIVATE1 << 16);
	CAN0.init_Filt(1, (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16);

	CAN0.init_Mask(1, (CAN_PRIVATE1 & CAN_EXTENDED) ? 1 : 0, mask);
	CAN0.init_Filt(2, (CAN_PRIVATE1 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE1 & CAN_EXTENDED) ? (long)CAN_PRIVATE1 : (long)CAN_PRIVATE1 << 16);
	CAN0.init_Filt(3, (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16);
	CAN0.init_Filt(4, (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16);
	CAN0.init_Filt(5, (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16);
	CAN0.init_Filt(6, (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16);
	// there are 6 filter in mcp2515

	return rv;
}
|————Node:{ Text: {
|————Node:declaration Text: int retries = 1;
|—————Node:primitive_type Text: int
|—————Node:init_declarator Text: retries = 1
|——————Node:identifier Text: retries
|——————Node:= Text: =
|——————Node:number_literal Text: 1
|—————Node:; Text: ;
|————Node:declaration Text: INT8U rv = MCP2515_FAIL;
|—————Node:type_identifier Text: INT8U
|—————Node:init_declarator Text: rv = MCP2515_FAIL
|——————Node:identifier Text: rv
|——————Node:= Text: =
|——————Node:identifier Text: MCP2515_FAIL
|—————Node:; Text: ;
|————Node:for_statement Text: for (int r = 0; r < retries; r++) {
		if (CAN0.begin(MCP_STDEXT, CAN_500KBPS, MCP_8MHZ) == CAN_OK) {
			rv = MCP2515_OK;
			break;
		}
		else delay(100);
	}
|—————Node:for Text: for
|—————Node:( Text: (
|—————Node:declaration Text: int r = 0;
|——————Node:primitive_type Text: int
|——————Node:init_declarator Text: r = 0
|———————Node:identifier Text: r
|———————Node:= Text: =
|———————Node:number_literal Text: 0
|——————Node:; Text: ;
|—————Node:binary_expression Text: r < retries
|——————Node:identifier Text: r
|——————Node:< Text: <
|——————Node:identifier Text: retries
|—————Node:; Text: ;
|—————Node:update_expression Text: r++
|——————Node:identifier Text: r
|——————Node:++ Text: ++
|—————Node:) Text: )
|—————Node:compound_statement Text: {
		if (CAN0.begin(MCP_STDEXT, CAN_500KBPS, MCP_8MHZ) == CAN_OK) {
			rv = MCP2515_OK;
			break;
		}
		else delay(100);
	}
|——————Node:{ Text: {
|——————Node:if_statement Text: if (CAN0.begin(MCP_STDEXT, CAN_500KBPS, MCP_8MHZ) == CAN_OK) {
			rv = MCP2515_OK;
			break;
		}
		else delay(100);
|———————Node:if Text: if
|———————Node:condition_clause Text: (CAN0.begin(MCP_STDEXT, CAN_500KBPS, MCP_8MHZ) == CAN_OK)
|————————Node:( Text: (
|————————Node:binary_expression Text: CAN0.begin(MCP_STDEXT, CAN_500KBPS, MCP_8MHZ) == CAN_OK
|—————————Node:call_expression Text: CAN0.begin(MCP_STDEXT, CAN_500KBPS, MCP_8MHZ)
|——————————Node:field_expression Text: CAN0.begin
|———————————Node:identifier Text: CAN0
|———————————Node:. Text: .
|———————————Node:field_identifier Text: begin
|——————————Node:argument_list Text: (MCP_STDEXT, CAN_500KBPS, MCP_8MHZ)
|———————————Node:( Text: (
|———————————Node:identifier Text: MCP_STDEXT
|———————————Node:, Text: ,
|———————————Node:identifier Text: CAN_500KBPS
|———————————Node:, Text: ,
|———————————Node:identifier Text: MCP_8MHZ
|———————————Node:) Text: )
|—————————Node:== Text: ==
|—————————Node:identifier Text: CAN_OK
|————————Node:) Text: )
|———————Node:compound_statement Text: {
			rv = MCP2515_OK;
			break;
		}
|————————Node:{ Text: {
|————————Node:expression_statement Text: rv = MCP2515_OK;
|—————————Node:assignment_expression Text: rv = MCP2515_OK
|——————————Node:identifier Text: rv
|——————————Node:= Text: =
|——————————Node:identifier Text: MCP2515_OK
|—————————Node:; Text: ;
|————————Node:break_statement Text: break;
|—————————Node:break Text: break
|—————————Node:; Text: ;
|————————Node:} Text: }
|———————Node:else_clause Text: else delay(100);
|————————Node:else Text: else
|————————Node:expression_statement Text: delay(100);
|—————————Node:call_expression Text: delay(100)
|——————————Node:identifier Text: delay
|——————————Node:argument_list Text: (100)
|———————————Node:( Text: (
|———————————Node:number_literal Text: 100
|———————————Node:) Text: )
|—————————Node:; Text: ;
|——————Node:} Text: }
|————Node:if_statement Text: if (rv == MCP2515_FAIL) {
#ifdef MCP_STDERR
		MCP_STDERR.println("MCP2515_FAIL");
#endif
#ifdef DEBUGSERIAL
		DEBUGSERIAL.println("MCP2515_FAIL");
#endif
		return rv;
	}
|—————Node:if Text: if
|—————Node:condition_clause Text: (rv == MCP2515_FAIL)
|——————Node:( Text: (
|——————Node:binary_expression Text: rv == MCP2515_FAIL
|———————Node:identifier Text: rv
|———————Node:== Text: ==
|———————Node:identifier Text: MCP2515_FAIL
|——————Node:) Text: )
|—————Node:compound_statement Text: {
#ifdef MCP_STDERR
		MCP_STDERR.println("MCP2515_FAIL");
#endif
#ifdef DEBUGSERIAL
		DEBUGSERIAL.println("MCP2515_FAIL");
#endif
		return rv;
	}
|——————Node:{ Text: {
|——————Node:preproc_ifdef Text: #ifdef MCP_STDERR
		MCP_STDERR.println("MCP2515_FAIL");
#endif
|———————Node:#ifdef Text: #ifdef
|———————Node:identifier Text: MCP_STDERR
|———————Node:expression_statement Text: MCP_STDERR.println("MCP2515_FAIL");
|————————Node:call_expression Text: MCP_STDERR.println("MCP2515_FAIL")
|—————————Node:field_expression Text: MCP_STDERR.println
|——————————Node:identifier Text: MCP_STDERR
|——————————Node:. Text: .
|——————————Node:field_identifier Text: println
|—————————Node:argument_list Text: ("MCP2515_FAIL")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "MCP2515_FAIL"
|———————————Node:" Text: "
|———————————Node:string_content Text: MCP2515_FAIL
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:#endif Text: #endif
|——————Node:preproc_ifdef Text: #ifdef DEBUGSERIAL
		DEBUGSERIAL.println("MCP2515_FAIL");
#endif
|———————Node:#ifdef Text: #ifdef
|———————Node:identifier Text: DEBUGSERIAL
|———————Node:expression_statement Text: DEBUGSERIAL.println("MCP2515_FAIL");
|————————Node:call_expression Text: DEBUGSERIAL.println("MCP2515_FAIL")
|—————————Node:field_expression Text: DEBUGSERIAL.println
|——————————Node:identifier Text: DEBUGSERIAL
|——————————Node:. Text: .
|——————————Node:field_identifier Text: println
|—————————Node:argument_list Text: ("MCP2515_FAIL")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "MCP2515_FAIL"
|———————————Node:" Text: "
|———————————Node:string_content Text: MCP2515_FAIL
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:#endif Text: #endif
|——————Node:return_statement Text: return rv;
|———————Node:return Text: return
|———————Node:identifier Text: rv
|———————Node:; Text: ;
|——————Node:} Text: }
|————Node:expression_statement Text: rv = CAN_SetMode(MCP_NORMAL);
|—————Node:assignment_expression Text: rv = CAN_SetMode(MCP_NORMAL)
|——————Node:identifier Text: rv
|——————Node:= Text: =
|——————Node:call_expression Text: CAN_SetMode(MCP_NORMAL)
|———————Node:identifier Text: CAN_SetMode
|———————Node:argument_list Text: (MCP_NORMAL)
|————————Node:( Text: (
|————————Node:identifier Text: MCP_NORMAL
|————————Node:) Text: )
|—————Node:; Text: ;
|————Node:if_statement Text: if (rv != CAN_OK)return rv;
|—————Node:if Text: if
|—————Node:condition_clause Text: (rv != CAN_OK)
|——————Node:( Text: (
|——————Node:binary_expression Text: rv != CAN_OK
|———————Node:identifier Text: rv
|———————Node:!= Text: !=
|———————Node:identifier Text: CAN_OK
|——————Node:) Text: )
|—————Node:return_statement Text: return rv;
|——————Node:return Text: return
|——————Node:identifier Text: rv
|——————Node:; Text: ;
|————Node:expression_statement Text: pinMode(CAN0_INT, INPUT);
|—————Node:call_expression Text: pinMode(CAN0_INT, INPUT)
|——————Node:identifier Text: pinMode
|——————Node:argument_list Text: (CAN0_INT, INPUT)
|———————Node:( Text: (
|———————Node:identifier Text: CAN0_INT
|———————Node:, Text: ,
|———————Node:identifier Text: INPUT
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:comment Text: // Configuring pin for /INT input
|————Node:declaration Text: long mask = ((long)0x7FF) << 16;
|—————Node:sized_type_specifier Text: long
|——————Node:long Text: long
|—————Node:init_declarator Text: mask = ((long)0x7FF) << 16
|——————Node:identifier Text: mask
|——————Node:= Text: =
|——————Node:binary_expression Text: ((long)0x7FF) << 16
|———————Node:parenthesized_expression Text: ((long)0x7FF)
|————————Node:( Text: (
|————————Node:cast_expression Text: (long)0x7FF
|—————————Node:( Text: (
|—————————Node:type_descriptor Text: long
|——————————Node:sized_type_specifier Text: long
|———————————Node:long Text: long
|—————————Node:) Text: )
|—————————Node:number_literal Text: 0x7FF
|————————Node:) Text: )
|———————Node:<< Text: <<
|———————Node:number_literal Text: 16
|—————Node:; Text: ;
|————Node:comment Text: // here we allow EXTENDED IDs CAN_PRIVATE1 and CAN_PRIVATE2 only
|————Node:if_statement Text: if (CAN_PRIVATE1 & CAN_EXTENDED) { mask = 0x1FFFFFFF; }
|—————Node:if Text: if
|—————Node:condition_clause Text: (CAN_PRIVATE1 & CAN_EXTENDED)
|——————Node:( Text: (
|——————Node:binary_expression Text: CAN_PRIVATE1 & CAN_EXTENDED
|———————Node:identifier Text: CAN_PRIVATE1
|———————Node:& Text: &
|———————Node:identifier Text: CAN_EXTENDED
|——————Node:) Text: )
|—————Node:compound_statement Text: { mask = 0x1FFFFFFF; }
|——————Node:{ Text: {
|——————Node:expression_statement Text: mask = 0x1FFFFFFF;
|———————Node:assignment_expression Text: mask = 0x1FFFFFFF
|————————Node:identifier Text: mask
|————————Node:= Text: =
|————————Node:number_literal Text: 0x1FFFFFFF
|———————Node:; Text: ;
|——————Node:} Text: }
|————Node:expression_statement Text: rv = CAN0.init_Mask(0, (CAN_PRIVATE1 & CAN_EXTENDED) ? 1 : 0, mask);
|—————Node:assignment_expression Text: rv = CAN0.init_Mask(0, (CAN_PRIVATE1 & CAN_EXTENDED) ? 1 : 0, mask)
|——————Node:identifier Text: rv
|——————Node:= Text: =
|——————Node:call_expression Text: CAN0.init_Mask(0, (CAN_PRIVATE1 & CAN_EXTENDED) ? 1 : 0, mask)
|———————Node:field_expression Text: CAN0.init_Mask
|————————Node:identifier Text: CAN0
|————————Node:. Text: .
|————————Node:field_identifier Text: init_Mask
|———————Node:argument_list Text: (0, (CAN_PRIVATE1 & CAN_EXTENDED) ? 1 : 0, mask)
|————————Node:( Text: (
|————————Node:number_literal Text: 0
|————————Node:, Text: ,
|————————Node:conditional_expression Text: (CAN_PRIVATE1 & CAN_EXTENDED) ? 1 : 0
|—————————Node:parenthesized_expression Text: (CAN_PRIVATE1 & CAN_EXTENDED)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: CAN_PRIVATE1 & CAN_EXTENDED
|———————————Node:identifier Text: CAN_PRIVATE1
|———————————Node:& Text: &
|———————————Node:identifier Text: CAN_EXTENDED
|——————————Node:) Text: )
|—————————Node:? Text: ?
|—————————Node:number_literal Text: 1
|—————————Node:: Text: :
|—————————Node:number_literal Text: 0
|————————Node:, Text: ,
|————————Node:identifier Text: mask
|————————Node:) Text: )
|—————Node:; Text: ;
|————Node:comment Text: // there are 2 mask in mcp2515, you need to set both of them
|————Node:if_statement Text: if (rv != CAN_OK) {
#ifdef MCP_STDERR
		MCP_STDERR.print("CAN0.init_Mask(0, 0, ((long)0xCAN_PRIVATE1&CAN_ALL_STD) error:");
		MCP_STDERR.println(rv);
#endif
		return rv;
	}
|—————Node:if Text: if
|—————Node:condition_clause Text: (rv != CAN_OK)
|——————Node:( Text: (
|——————Node:binary_expression Text: rv != CAN_OK
|———————Node:identifier Text: rv
|———————Node:!= Text: !=
|———————Node:identifier Text: CAN_OK
|——————Node:) Text: )
|—————Node:compound_statement Text: {
#ifdef MCP_STDERR
		MCP_STDERR.print("CAN0.init_Mask(0, 0, ((long)0xCAN_PRIVATE1&CAN_ALL_STD) error:");
		MCP_STDERR.println(rv);
#endif
		return rv;
	}
|——————Node:{ Text: {
|——————Node:preproc_ifdef Text: #ifdef MCP_STDERR
		MCP_STDERR.print("CAN0.init_Mask(0, 0, ((long)0xCAN_PRIVATE1&CAN_ALL_STD) error:");
		MCP_STDERR.println(rv);
#endif
|———————Node:#ifdef Text: #ifdef
|———————Node:identifier Text: MCP_STDERR
|———————Node:expression_statement Text: MCP_STDERR.print("CAN0.init_Mask(0, 0, ((long)0xCAN_PRIVATE1&CAN_ALL_STD) error:");
|————————Node:call_expression Text: MCP_STDERR.print("CAN0.init_Mask(0, 0, ((long)0xCAN_PRIVATE1&CAN_ALL_STD) error:")
|—————————Node:field_expression Text: MCP_STDERR.print
|——————————Node:identifier Text: MCP_STDERR
|——————————Node:. Text: .
|——————————Node:field_identifier Text: print
|—————————Node:argument_list Text: ("CAN0.init_Mask(0, 0, ((long)0xCAN_PRIVATE1&CAN_ALL_STD) error:")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "CAN0.init_Mask(0, 0, ((long)0xCAN_PRIVATE1&CAN_ALL_STD) error:"
|———————————Node:" Text: "
|———————————Node:string_content Text: CAN0.init_Mask(0, 0, ((long)0xCAN_PRIVATE1&CAN_ALL_STD) error:
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: MCP_STDERR.println(rv);
|————————Node:call_expression Text: MCP_STDERR.println(rv)
|—————————Node:field_expression Text: MCP_STDERR.println
|——————————Node:identifier Text: MCP_STDERR
|——————————Node:. Text: .
|——————————Node:field_identifier Text: println
|—————————Node:argument_list Text: (rv)
|——————————Node:( Text: (
|——————————Node:identifier Text: rv
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:#endif Text: #endif
|——————Node:return_statement Text: return rv;
|———————Node:return Text: return
|———————Node:identifier Text: rv
|———————Node:; Text: ;
|——————Node:} Text: }
|————Node:expression_statement Text: CAN0.init_Filt(0, (CAN_PRIVATE1 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE1 & CAN_EXTENDED) ? (long)CAN_PRIVATE1 : (long)CAN_PRIVATE1 << 16);
|—————Node:call_expression Text: CAN0.init_Filt(0, (CAN_PRIVATE1 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE1 & CAN_EXTENDED) ? (long)CAN_PRIVATE1 : (long)CAN_PRIVATE1 << 16)
|——————Node:field_expression Text: CAN0.init_Filt
|———————Node:identifier Text: CAN0
|———————Node:. Text: .
|———————Node:field_identifier Text: init_Filt
|——————Node:argument_list Text: (0, (CAN_PRIVATE1 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE1 & CAN_EXTENDED) ? (long)CAN_PRIVATE1 : (long)CAN_PRIVATE1 << 16)
|———————Node:( Text: (
|———————Node:number_literal Text: 0
|———————Node:, Text: ,
|———————Node:conditional_expression Text: (CAN_PRIVATE1 & CAN_EXTENDED) ? 1 : 0
|————————Node:parenthesized_expression Text: (CAN_PRIVATE1 & CAN_EXTENDED)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: CAN_PRIVATE1 & CAN_EXTENDED
|——————————Node:identifier Text: CAN_PRIVATE1
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_EXTENDED
|—————————Node:) Text: )
|————————Node:? Text: ?
|————————Node:number_literal Text: 1
|————————Node:: Text: :
|————————Node:number_literal Text: 0
|———————Node:, Text: ,
|———————Node:conditional_expression Text: (CAN_PRIVATE1 & CAN_EXTENDED) ? (long)CAN_PRIVATE1 : (long)CAN_PRIVATE1 << 16
|————————Node:parenthesized_expression Text: (CAN_PRIVATE1 & CAN_EXTENDED)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: CAN_PRIVATE1 & CAN_EXTENDED
|——————————Node:identifier Text: CAN_PRIVATE1
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_EXTENDED
|—————————Node:) Text: )
|————————Node:? Text: ?
|————————Node:cast_expression Text: (long)CAN_PRIVATE1
|—————————Node:( Text: (
|—————————Node:type_descriptor Text: long
|——————————Node:sized_type_specifier Text: long
|———————————Node:long Text: long
|—————————Node:) Text: )
|—————————Node:identifier Text: CAN_PRIVATE1
|————————Node:: Text: :
|————————Node:binary_expression Text: (long)CAN_PRIVATE1 << 16
|—————————Node:cast_expression Text: (long)CAN_PRIVATE1
|——————————Node:( Text: (
|——————————Node:type_descriptor Text: long
|———————————Node:sized_type_specifier Text: long
|————————————Node:long Text: long
|——————————Node:) Text: )
|——————————Node:identifier Text: CAN_PRIVATE1
|—————————Node:<< Text: <<
|—————————Node:number_literal Text: 16
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: CAN0.init_Filt(1, (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16);
|—————Node:call_expression Text: CAN0.init_Filt(1, (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16)
|——————Node:field_expression Text: CAN0.init_Filt
|———————Node:identifier Text: CAN0
|———————Node:. Text: .
|———————Node:field_identifier Text: init_Filt
|——————Node:argument_list Text: (1, (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16)
|———————Node:( Text: (
|———————Node:number_literal Text: 1
|———————Node:, Text: ,
|———————Node:conditional_expression Text: (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0
|————————Node:parenthesized_expression Text: (CAN_PRIVATE2 & CAN_EXTENDED)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: CAN_PRIVATE2 & CAN_EXTENDED
|——————————Node:identifier Text: CAN_PRIVATE2
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_EXTENDED
|—————————Node:) Text: )
|————————Node:? Text: ?
|————————Node:number_literal Text: 1
|————————Node:: Text: :
|————————Node:number_literal Text: 0
|———————Node:, Text: ,
|———————Node:conditional_expression Text: (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16
|————————Node:parenthesized_expression Text: (CAN_PRIVATE2 & CAN_EXTENDED)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: CAN_PRIVATE2 & CAN_EXTENDED
|——————————Node:identifier Text: CAN_PRIVATE2
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_EXTENDED
|—————————Node:) Text: )
|————————Node:? Text: ?
|————————Node:cast_expression Text: (long)CAN_PRIVATE2
|—————————Node:( Text: (
|—————————Node:type_descriptor Text: long
|——————————Node:sized_type_specifier Text: long
|———————————Node:long Text: long
|—————————Node:) Text: )
|—————————Node:identifier Text: CAN_PRIVATE2
|————————Node:: Text: :
|————————Node:binary_expression Text: (long)CAN_PRIVATE2 << 16
|—————————Node:cast_expression Text: (long)CAN_PRIVATE2
|——————————Node:( Text: (
|——————————Node:type_descriptor Text: long
|———————————Node:sized_type_specifier Text: long
|————————————Node:long Text: long
|——————————Node:) Text: )
|——————————Node:identifier Text: CAN_PRIVATE2
|—————————Node:<< Text: <<
|—————————Node:number_literal Text: 16
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: CAN0.init_Mask(1, (CAN_PRIVATE1 & CAN_EXTENDED) ? 1 : 0, mask);
|—————Node:call_expression Text: CAN0.init_Mask(1, (CAN_PRIVATE1 & CAN_EXTENDED) ? 1 : 0, mask)
|——————Node:field_expression Text: CAN0.init_Mask
|———————Node:identifier Text: CAN0
|———————Node:. Text: .
|———————Node:field_identifier Text: init_Mask
|——————Node:argument_list Text: (1, (CAN_PRIVATE1 & CAN_EXTENDED) ? 1 : 0, mask)
|———————Node:( Text: (
|———————Node:number_literal Text: 1
|———————Node:, Text: ,
|———————Node:conditional_expression Text: (CAN_PRIVATE1 & CAN_EXTENDED) ? 1 : 0
|————————Node:parenthesized_expression Text: (CAN_PRIVATE1 & CAN_EXTENDED)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: CAN_PRIVATE1 & CAN_EXTENDED
|——————————Node:identifier Text: CAN_PRIVATE1
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_EXTENDED
|—————————Node:) Text: )
|————————Node:? Text: ?
|————————Node:number_literal Text: 1
|————————Node:: Text: :
|————————Node:number_literal Text: 0
|———————Node:, Text: ,
|———————Node:identifier Text: mask
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: CAN0.init_Filt(2, (CAN_PRIVATE1 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE1 & CAN_EXTENDED) ? (long)CAN_PRIVATE1 : (long)CAN_PRIVATE1 << 16);
|—————Node:call_expression Text: CAN0.init_Filt(2, (CAN_PRIVATE1 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE1 & CAN_EXTENDED) ? (long)CAN_PRIVATE1 : (long)CAN_PRIVATE1 << 16)
|——————Node:field_expression Text: CAN0.init_Filt
|———————Node:identifier Text: CAN0
|———————Node:. Text: .
|———————Node:field_identifier Text: init_Filt
|——————Node:argument_list Text: (2, (CAN_PRIVATE1 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE1 & CAN_EXTENDED) ? (long)CAN_PRIVATE1 : (long)CAN_PRIVATE1 << 16)
|———————Node:( Text: (
|———————Node:number_literal Text: 2
|———————Node:, Text: ,
|———————Node:conditional_expression Text: (CAN_PRIVATE1 & CAN_EXTENDED) ? 1 : 0
|————————Node:parenthesized_expression Text: (CAN_PRIVATE1 & CAN_EXTENDED)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: CAN_PRIVATE1 & CAN_EXTENDED
|——————————Node:identifier Text: CAN_PRIVATE1
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_EXTENDED
|—————————Node:) Text: )
|————————Node:? Text: ?
|————————Node:number_literal Text: 1
|————————Node:: Text: :
|————————Node:number_literal Text: 0
|———————Node:, Text: ,
|———————Node:conditional_expression Text: (CAN_PRIVATE1 & CAN_EXTENDED) ? (long)CAN_PRIVATE1 : (long)CAN_PRIVATE1 << 16
|————————Node:parenthesized_expression Text: (CAN_PRIVATE1 & CAN_EXTENDED)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: CAN_PRIVATE1 & CAN_EXTENDED
|——————————Node:identifier Text: CAN_PRIVATE1
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_EXTENDED
|—————————Node:) Text: )
|————————Node:? Text: ?
|————————Node:cast_expression Text: (long)CAN_PRIVATE1
|—————————Node:( Text: (
|—————————Node:type_descriptor Text: long
|——————————Node:sized_type_specifier Text: long
|———————————Node:long Text: long
|—————————Node:) Text: )
|—————————Node:identifier Text: CAN_PRIVATE1
|————————Node:: Text: :
|————————Node:binary_expression Text: (long)CAN_PRIVATE1 << 16
|—————————Node:cast_expression Text: (long)CAN_PRIVATE1
|——————————Node:( Text: (
|——————————Node:type_descriptor Text: long
|———————————Node:sized_type_specifier Text: long
|————————————Node:long Text: long
|——————————Node:) Text: )
|——————————Node:identifier Text: CAN_PRIVATE1
|—————————Node:<< Text: <<
|—————————Node:number_literal Text: 16
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: CAN0.init_Filt(3, (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16);
|—————Node:call_expression Text: CAN0.init_Filt(3, (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16)
|——————Node:field_expression Text: CAN0.init_Filt
|———————Node:identifier Text: CAN0
|———————Node:. Text: .
|———————Node:field_identifier Text: init_Filt
|——————Node:argument_list Text: (3, (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16)
|———————Node:( Text: (
|———————Node:number_literal Text: 3
|———————Node:, Text: ,
|———————Node:conditional_expression Text: (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0
|————————Node:parenthesized_expression Text: (CAN_PRIVATE2 & CAN_EXTENDED)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: CAN_PRIVATE2 & CAN_EXTENDED
|——————————Node:identifier Text: CAN_PRIVATE2
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_EXTENDED
|—————————Node:) Text: )
|————————Node:? Text: ?
|————————Node:number_literal Text: 1
|————————Node:: Text: :
|————————Node:number_literal Text: 0
|———————Node:, Text: ,
|———————Node:conditional_expression Text: (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16
|————————Node:parenthesized_expression Text: (CAN_PRIVATE2 & CAN_EXTENDED)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: CAN_PRIVATE2 & CAN_EXTENDED
|——————————Node:identifier Text: CAN_PRIVATE2
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_EXTENDED
|—————————Node:) Text: )
|————————Node:? Text: ?
|————————Node:cast_expression Text: (long)CAN_PRIVATE2
|—————————Node:( Text: (
|—————————Node:type_descriptor Text: long
|——————————Node:sized_type_specifier Text: long
|———————————Node:long Text: long
|—————————Node:) Text: )
|—————————Node:identifier Text: CAN_PRIVATE2
|————————Node:: Text: :
|————————Node:binary_expression Text: (long)CAN_PRIVATE2 << 16
|—————————Node:cast_expression Text: (long)CAN_PRIVATE2
|——————————Node:( Text: (
|——————————Node:type_descriptor Text: long
|———————————Node:sized_type_specifier Text: long
|————————————Node:long Text: long
|——————————Node:) Text: )
|——————————Node:identifier Text: CAN_PRIVATE2
|—————————Node:<< Text: <<
|—————————Node:number_literal Text: 16
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: CAN0.init_Filt(4, (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16);
|—————Node:call_expression Text: CAN0.init_Filt(4, (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16)
|——————Node:field_expression Text: CAN0.init_Filt
|———————Node:identifier Text: CAN0
|———————Node:. Text: .
|———————Node:field_identifier Text: init_Filt
|——————Node:argument_list Text: (4, (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16)
|———————Node:( Text: (
|———————Node:number_literal Text: 4
|———————Node:, Text: ,
|———————Node:conditional_expression Text: (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0
|————————Node:parenthesized_expression Text: (CAN_PRIVATE2 & CAN_EXTENDED)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: CAN_PRIVATE2 & CAN_EXTENDED
|——————————Node:identifier Text: CAN_PRIVATE2
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_EXTENDED
|—————————Node:) Text: )
|————————Node:? Text: ?
|————————Node:number_literal Text: 1
|————————Node:: Text: :
|————————Node:number_literal Text: 0
|———————Node:, Text: ,
|———————Node:conditional_expression Text: (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16
|————————Node:parenthesized_expression Text: (CAN_PRIVATE2 & CAN_EXTENDED)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: CAN_PRIVATE2 & CAN_EXTENDED
|——————————Node:identifier Text: CAN_PRIVATE2
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_EXTENDED
|—————————Node:) Text: )
|————————Node:? Text: ?
|————————Node:cast_expression Text: (long)CAN_PRIVATE2
|—————————Node:( Text: (
|—————————Node:type_descriptor Text: long
|——————————Node:sized_type_specifier Text: long
|———————————Node:long Text: long
|—————————Node:) Text: )
|—————————Node:identifier Text: CAN_PRIVATE2
|————————Node:: Text: :
|————————Node:binary_expression Text: (long)CAN_PRIVATE2 << 16
|—————————Node:cast_expression Text: (long)CAN_PRIVATE2
|——————————Node:( Text: (
|——————————Node:type_descriptor Text: long
|———————————Node:sized_type_specifier Text: long
|————————————Node:long Text: long
|——————————Node:) Text: )
|——————————Node:identifier Text: CAN_PRIVATE2
|—————————Node:<< Text: <<
|—————————Node:number_literal Text: 16
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: CAN0.init_Filt(5, (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16);
|—————Node:call_expression Text: CAN0.init_Filt(5, (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16)
|——————Node:field_expression Text: CAN0.init_Filt
|———————Node:identifier Text: CAN0
|———————Node:. Text: .
|———————Node:field_identifier Text: init_Filt
|——————Node:argument_list Text: (5, (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16)
|———————Node:( Text: (
|———————Node:number_literal Text: 5
|———————Node:, Text: ,
|———————Node:conditional_expression Text: (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0
|————————Node:parenthesized_expression Text: (CAN_PRIVATE2 & CAN_EXTENDED)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: CAN_PRIVATE2 & CAN_EXTENDED
|——————————Node:identifier Text: CAN_PRIVATE2
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_EXTENDED
|—————————Node:) Text: )
|————————Node:? Text: ?
|————————Node:number_literal Text: 1
|————————Node:: Text: :
|————————Node:number_literal Text: 0
|———————Node:, Text: ,
|———————Node:conditional_expression Text: (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16
|————————Node:parenthesized_expression Text: (CAN_PRIVATE2 & CAN_EXTENDED)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: CAN_PRIVATE2 & CAN_EXTENDED
|——————————Node:identifier Text: CAN_PRIVATE2
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_EXTENDED
|—————————Node:) Text: )
|————————Node:? Text: ?
|————————Node:cast_expression Text: (long)CAN_PRIVATE2
|—————————Node:( Text: (
|—————————Node:type_descriptor Text: long
|——————————Node:sized_type_specifier Text: long
|———————————Node:long Text: long
|—————————Node:) Text: )
|—————————Node:identifier Text: CAN_PRIVATE2
|————————Node:: Text: :
|————————Node:binary_expression Text: (long)CAN_PRIVATE2 << 16
|—————————Node:cast_expression Text: (long)CAN_PRIVATE2
|——————————Node:( Text: (
|——————————Node:type_descriptor Text: long
|———————————Node:sized_type_specifier Text: long
|————————————Node:long Text: long
|——————————Node:) Text: )
|——————————Node:identifier Text: CAN_PRIVATE2
|—————————Node:<< Text: <<
|—————————Node:number_literal Text: 16
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: CAN0.init_Filt(6, (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16);
|—————Node:call_expression Text: CAN0.init_Filt(6, (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16)
|——————Node:field_expression Text: CAN0.init_Filt
|———————Node:identifier Text: CAN0
|———————Node:. Text: .
|———————Node:field_identifier Text: init_Filt
|——————Node:argument_list Text: (6, (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0, (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16)
|———————Node:( Text: (
|———————Node:number_literal Text: 6
|———————Node:, Text: ,
|———————Node:conditional_expression Text: (CAN_PRIVATE2 & CAN_EXTENDED) ? 1 : 0
|————————Node:parenthesized_expression Text: (CAN_PRIVATE2 & CAN_EXTENDED)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: CAN_PRIVATE2 & CAN_EXTENDED
|——————————Node:identifier Text: CAN_PRIVATE2
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_EXTENDED
|—————————Node:) Text: )
|————————Node:? Text: ?
|————————Node:number_literal Text: 1
|————————Node:: Text: :
|————————Node:number_literal Text: 0
|———————Node:, Text: ,
|———————Node:conditional_expression Text: (CAN_PRIVATE2 & CAN_EXTENDED) ? (long)CAN_PRIVATE2 : (long)CAN_PRIVATE2 << 16
|————————Node:parenthesized_expression Text: (CAN_PRIVATE2 & CAN_EXTENDED)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: CAN_PRIVATE2 & CAN_EXTENDED
|——————————Node:identifier Text: CAN_PRIVATE2
|——————————Node:& Text: &
|——————————Node:identifier Text: CAN_EXTENDED
|—————————Node:) Text: )
|————————Node:? Text: ?
|————————Node:cast_expression Text: (long)CAN_PRIVATE2
|—————————Node:( Text: (
|—————————Node:type_descriptor Text: long
|——————————Node:sized_type_specifier Text: long
|———————————Node:long Text: long
|—————————Node:) Text: )
|—————————Node:identifier Text: CAN_PRIVATE2
|————————Node:: Text: :
|————————Node:binary_expression Text: (long)CAN_PRIVATE2 << 16
|—————————Node:cast_expression Text: (long)CAN_PRIVATE2
|——————————Node:( Text: (
|——————————Node:type_descriptor Text: long
|———————————Node:sized_type_specifier Text: long
|————————————Node:long Text: long
|——————————Node:) Text: )
|——————————Node:identifier Text: CAN_PRIVATE2
|—————————Node:<< Text: <<
|—————————Node:number_literal Text: 16
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:comment Text: // there are 6 filter in mcp2515
|————Node:return_statement Text: return rv;
|—————Node:return Text: return
|—————Node:identifier Text: rv
|—————Node:; Text: ;
|————Node:} Text: }
|——Node:function_definition Text: INT8U  getCANDataPrivate(long duration, EngineMsmtU& Engine) {
	INT8U sndStat = CAN_FAIL;
	int bothreached = 0;
	unsigned long privateids[] = { CAN_PRIVATE1 ,CAN_PRIVATE2 };
	long start = millis();
	do {
		if (!digitalRead(CAN0_INT))                         // If CAN0_INT pin is low, read receive buffer
		{
			sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);      // Read data: len = data length, buf = data byte(s)
			if (sndStat != CAN_OK) continue;
#ifdef DEBUGSERIAL
			if (len > 0 && len <= 8) {
				DEBUGSERIAL.print("  rxId=:0x");
				DEBUGSERIAL.print(rxId, HEX);
				DEBUGSERIAL.println("(");
				for (byte i = 0; i < len; i++) {
					sprintf(msgString, " 0x%.2X", canbuf[i]);
					DEBUGSERIAL.print(msgString);
				}
				DEBUGSERIAL.println(")");
			}
#endif
			if (rxId == privateids[0] || rxId == privateids[1]) {
#ifdef DEBUGSERIAL
				if (rxId == CAN_PRIVATE1) DEBUGSERIAL.print("CAN_PRIVATE1");
				else if (rxId == CAN_PRIVATE2) DEBUGSERIAL.print("CAN_PRIVATE2");
				else DEBUGSERIAL.print(rxId, HEX);
				DEBUGSERIAL.print(" (");
				DEBUGSERIAL.print("len=");
				DEBUGSERIAL.print(len);
				DEBUGSERIAL.println(")");
#endif
				if (len < 8) continue;
				if (rxId == CAN_PRIVATE1) {
					Engine.b[0] = canbuf[0];
					Engine.b[1] = canbuf[1];
					Engine.b[2] = canbuf[2];
					Engine.b[3] = canbuf[3];
					Engine.b[4] = canbuf[4];
					Engine.b[5] = canbuf[5];
					Engine.b[6] = canbuf[6];
					Engine.b[7] = canbuf[7];
					bothreached |= 1;
				}
				if (rxId == CAN_PRIVATE2) {
					Engine.b[8] = canbuf[0];
					Engine.b[9] = canbuf[1];
					Engine.b[10] = canbuf[2];
					Engine.b[11] = canbuf[3];
					Engine.b[12] = canbuf[4];
					Engine.b[13] = canbuf[5];
					Engine.b[14] = canbuf[6];
					Engine.b[15] = canbuf[7];
					bothreached |= 2;
				}
			}
		}
		if (bothreached == 3) 	break;
	} while (millis() - start < duration);
	return sndStat;
}
|———Node:type_identifier Text: INT8U
|———Node:function_declarator Text: getCANDataPrivate(long duration, EngineMsmtU& Engine)
|————Node:identifier Text: getCANDataPrivate
|————Node:parameter_list Text: (long duration, EngineMsmtU& Engine)
|—————Node:( Text: (
|—————Node:parameter_declaration Text: long duration
|——————Node:sized_type_specifier Text: long
|———————Node:long Text: long
|——————Node:identifier Text: duration
|—————Node:, Text: ,
|—————Node:parameter_declaration Text: EngineMsmtU& Engine
|——————Node:type_identifier Text: EngineMsmtU
|——————Node:reference_declarator Text: & Engine
|———————Node:& Text: &
|———————Node:identifier Text: Engine
|—————Node:) Text: )
|———Node:compound_statement Text: {
	INT8U sndStat = CAN_FAIL;
	int bothreached = 0;
	unsigned long privateids[] = { CAN_PRIVATE1 ,CAN_PRIVATE2 };
	long start = millis();
	do {
		if (!digitalRead(CAN0_INT))                         // If CAN0_INT pin is low, read receive buffer
		{
			sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);      // Read data: len = data length, buf = data byte(s)
			if (sndStat != CAN_OK) continue;
#ifdef DEBUGSERIAL
			if (len > 0 && len <= 8) {
				DEBUGSERIAL.print("  rxId=:0x");
				DEBUGSERIAL.print(rxId, HEX);
				DEBUGSERIAL.println("(");
				for (byte i = 0; i < len; i++) {
					sprintf(msgString, " 0x%.2X", canbuf[i]);
					DEBUGSERIAL.print(msgString);
				}
				DEBUGSERIAL.println(")");
			}
#endif
			if (rxId == privateids[0] || rxId == privateids[1]) {
#ifdef DEBUGSERIAL
				if (rxId == CAN_PRIVATE1) DEBUGSERIAL.print("CAN_PRIVATE1");
				else if (rxId == CAN_PRIVATE2) DEBUGSERIAL.print("CAN_PRIVATE2");
				else DEBUGSERIAL.print(rxId, HEX);
				DEBUGSERIAL.print(" (");
				DEBUGSERIAL.print("len=");
				DEBUGSERIAL.print(len);
				DEBUGSERIAL.println(")");
#endif
				if (len < 8) continue;
				if (rxId == CAN_PRIVATE1) {
					Engine.b[0] = canbuf[0];
					Engine.b[1] = canbuf[1];
					Engine.b[2] = canbuf[2];
					Engine.b[3] = canbuf[3];
					Engine.b[4] = canbuf[4];
					Engine.b[5] = canbuf[5];
					Engine.b[6] = canbuf[6];
					Engine.b[7] = canbuf[7];
					bothreached |= 1;
				}
				if (rxId == CAN_PRIVATE2) {
					Engine.b[8] = canbuf[0];
					Engine.b[9] = canbuf[1];
					Engine.b[10] = canbuf[2];
					Engine.b[11] = canbuf[3];
					Engine.b[12] = canbuf[4];
					Engine.b[13] = canbuf[5];
					Engine.b[14] = canbuf[6];
					Engine.b[15] = canbuf[7];
					bothreached |= 2;
				}
			}
		}
		if (bothreached == 3) 	break;
	} while (millis() - start < duration);
	return sndStat;
}
|————Node:{ Text: {
|————Node:declaration Text: INT8U sndStat = CAN_FAIL;
|—————Node:type_identifier Text: INT8U
|—————Node:init_declarator Text: sndStat = CAN_FAIL
|——————Node:identifier Text: sndStat
|——————Node:= Text: =
|——————Node:identifier Text: CAN_FAIL
|—————Node:; Text: ;
|————Node:declaration Text: int bothreached = 0;
|—————Node:primitive_type Text: int
|—————Node:init_declarator Text: bothreached = 0
|——————Node:identifier Text: bothreached
|——————Node:= Text: =
|——————Node:number_literal Text: 0
|—————Node:; Text: ;
|————Node:declaration Text: unsigned long privateids[] = { CAN_PRIVATE1 ,CAN_PRIVATE2 };
|—————Node:sized_type_specifier Text: unsigned long
|——————Node:unsigned Text: unsigned
|——————Node:long Text: long
|—————Node:init_declarator Text: privateids[] = { CAN_PRIVATE1 ,CAN_PRIVATE2 }
|——————Node:array_declarator Text: privateids[]
|———————Node:identifier Text: privateids
|———————Node:[ Text: [
|———————Node:] Text: ]
|——————Node:= Text: =
|——————Node:initializer_list Text: { CAN_PRIVATE1 ,CAN_PRIVATE2 }
|———————Node:{ Text: {
|———————Node:identifier Text: CAN_PRIVATE1
|———————Node:, Text: ,
|———————Node:identifier Text: CAN_PRIVATE2
|———————Node:} Text: }
|—————Node:; Text: ;
|————Node:declaration Text: long start = millis();
|—————Node:sized_type_specifier Text: long
|——————Node:long Text: long
|—————Node:init_declarator Text: start = millis()
|——————Node:identifier Text: start
|——————Node:= Text: =
|——————Node:call_expression Text: millis()
|———————Node:identifier Text: millis
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|—————Node:; Text: ;
|————Node:do_statement Text: do {
		if (!digitalRead(CAN0_INT))                         // If CAN0_INT pin is low, read receive buffer
		{
			sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);      // Read data: len = data length, buf = data byte(s)
			if (sndStat != CAN_OK) continue;
#ifdef DEBUGSERIAL
			if (len > 0 && len <= 8) {
				DEBUGSERIAL.print("  rxId=:0x");
				DEBUGSERIAL.print(rxId, HEX);
				DEBUGSERIAL.println("(");
				for (byte i = 0; i < len; i++) {
					sprintf(msgString, " 0x%.2X", canbuf[i]);
					DEBUGSERIAL.print(msgString);
				}
				DEBUGSERIAL.println(")");
			}
#endif
			if (rxId == privateids[0] || rxId == privateids[1]) {
#ifdef DEBUGSERIAL
				if (rxId == CAN_PRIVATE1) DEBUGSERIAL.print("CAN_PRIVATE1");
				else if (rxId == CAN_PRIVATE2) DEBUGSERIAL.print("CAN_PRIVATE2");
				else DEBUGSERIAL.print(rxId, HEX);
				DEBUGSERIAL.print(" (");
				DEBUGSERIAL.print("len=");
				DEBUGSERIAL.print(len);
				DEBUGSERIAL.println(")");
#endif
				if (len < 8) continue;
				if (rxId == CAN_PRIVATE1) {
					Engine.b[0] = canbuf[0];
					Engine.b[1] = canbuf[1];
					Engine.b[2] = canbuf[2];
					Engine.b[3] = canbuf[3];
					Engine.b[4] = canbuf[4];
					Engine.b[5] = canbuf[5];
					Engine.b[6] = canbuf[6];
					Engine.b[7] = canbuf[7];
					bothreached |= 1;
				}
				if (rxId == CAN_PRIVATE2) {
					Engine.b[8] = canbuf[0];
					Engine.b[9] = canbuf[1];
					Engine.b[10] = canbuf[2];
					Engine.b[11] = canbuf[3];
					Engine.b[12] = canbuf[4];
					Engine.b[13] = canbuf[5];
					Engine.b[14] = canbuf[6];
					Engine.b[15] = canbuf[7];
					bothreached |= 2;
				}
			}
		}
		if (bothreached == 3) 	break;
	} while (millis() - start < duration);
|—————Node:do Text: do
|—————Node:compound_statement Text: {
		if (!digitalRead(CAN0_INT))                         // If CAN0_INT pin is low, read receive buffer
		{
			sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);      // Read data: len = data length, buf = data byte(s)
			if (sndStat != CAN_OK) continue;
#ifdef DEBUGSERIAL
			if (len > 0 && len <= 8) {
				DEBUGSERIAL.print("  rxId=:0x");
				DEBUGSERIAL.print(rxId, HEX);
				DEBUGSERIAL.println("(");
				for (byte i = 0; i < len; i++) {
					sprintf(msgString, " 0x%.2X", canbuf[i]);
					DEBUGSERIAL.print(msgString);
				}
				DEBUGSERIAL.println(")");
			}
#endif
			if (rxId == privateids[0] || rxId == privateids[1]) {
#ifdef DEBUGSERIAL
				if (rxId == CAN_PRIVATE1) DEBUGSERIAL.print("CAN_PRIVATE1");
				else if (rxId == CAN_PRIVATE2) DEBUGSERIAL.print("CAN_PRIVATE2");
				else DEBUGSERIAL.print(rxId, HEX);
				DEBUGSERIAL.print(" (");
				DEBUGSERIAL.print("len=");
				DEBUGSERIAL.print(len);
				DEBUGSERIAL.println(")");
#endif
				if (len < 8) continue;
				if (rxId == CAN_PRIVATE1) {
					Engine.b[0] = canbuf[0];
					Engine.b[1] = canbuf[1];
					Engine.b[2] = canbuf[2];
					Engine.b[3] = canbuf[3];
					Engine.b[4] = canbuf[4];
					Engine.b[5] = canbuf[5];
					Engine.b[6] = canbuf[6];
					Engine.b[7] = canbuf[7];
					bothreached |= 1;
				}
				if (rxId == CAN_PRIVATE2) {
					Engine.b[8] = canbuf[0];
					Engine.b[9] = canbuf[1];
					Engine.b[10] = canbuf[2];
					Engine.b[11] = canbuf[3];
					Engine.b[12] = canbuf[4];
					Engine.b[13] = canbuf[5];
					Engine.b[14] = canbuf[6];
					Engine.b[15] = canbuf[7];
					bothreached |= 2;
				}
			}
		}
		if (bothreached == 3) 	break;
	}
|——————Node:{ Text: {
|——————Node:if_statement Text: if (!digitalRead(CAN0_INT))                         // If CAN0_INT pin is low, read receive buffer
		{
			sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);      // Read data: len = data length, buf = data byte(s)
			if (sndStat != CAN_OK) continue;
#ifdef DEBUGSERIAL
			if (len > 0 && len <= 8) {
				DEBUGSERIAL.print("  rxId=:0x");
				DEBUGSERIAL.print(rxId, HEX);
				DEBUGSERIAL.println("(");
				for (byte i = 0; i < len; i++) {
					sprintf(msgString, " 0x%.2X", canbuf[i]);
					DEBUGSERIAL.print(msgString);
				}
				DEBUGSERIAL.println(")");
			}
#endif
			if (rxId == privateids[0] || rxId == privateids[1]) {
#ifdef DEBUGSERIAL
				if (rxId == CAN_PRIVATE1) DEBUGSERIAL.print("CAN_PRIVATE1");
				else if (rxId == CAN_PRIVATE2) DEBUGSERIAL.print("CAN_PRIVATE2");
				else DEBUGSERIAL.print(rxId, HEX);
				DEBUGSERIAL.print(" (");
				DEBUGSERIAL.print("len=");
				DEBUGSERIAL.print(len);
				DEBUGSERIAL.println(")");
#endif
				if (len < 8) continue;
				if (rxId == CAN_PRIVATE1) {
					Engine.b[0] = canbuf[0];
					Engine.b[1] = canbuf[1];
					Engine.b[2] = canbuf[2];
					Engine.b[3] = canbuf[3];
					Engine.b[4] = canbuf[4];
					Engine.b[5] = canbuf[5];
					Engine.b[6] = canbuf[6];
					Engine.b[7] = canbuf[7];
					bothreached |= 1;
				}
				if (rxId == CAN_PRIVATE2) {
					Engine.b[8] = canbuf[0];
					Engine.b[9] = canbuf[1];
					Engine.b[10] = canbuf[2];
					Engine.b[11] = canbuf[3];
					Engine.b[12] = canbuf[4];
					Engine.b[13] = canbuf[5];
					Engine.b[14] = canbuf[6];
					Engine.b[15] = canbuf[7];
					bothreached |= 2;
				}
			}
		}
|———————Node:if Text: if
|———————Node:condition_clause Text: (!digitalRead(CAN0_INT))
|————————Node:( Text: (
|————————Node:unary_expression Text: !digitalRead(CAN0_INT)
|—————————Node:! Text: !
|—————————Node:call_expression Text: digitalRead(CAN0_INT)
|——————————Node:identifier Text: digitalRead
|——————————Node:argument_list Text: (CAN0_INT)
|———————————Node:( Text: (
|———————————Node:identifier Text: CAN0_INT
|———————————Node:) Text: )
|————————Node:) Text: )
|———————Node:comment Text: // If CAN0_INT pin is low, read receive buffer
|———————Node:compound_statement Text: {
			sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);      // Read data: len = data length, buf = data byte(s)
			if (sndStat != CAN_OK) continue;
#ifdef DEBUGSERIAL
			if (len > 0 && len <= 8) {
				DEBUGSERIAL.print("  rxId=:0x");
				DEBUGSERIAL.print(rxId, HEX);
				DEBUGSERIAL.println("(");
				for (byte i = 0; i < len; i++) {
					sprintf(msgString, " 0x%.2X", canbuf[i]);
					DEBUGSERIAL.print(msgString);
				}
				DEBUGSERIAL.println(")");
			}
#endif
			if (rxId == privateids[0] || rxId == privateids[1]) {
#ifdef DEBUGSERIAL
				if (rxId == CAN_PRIVATE1) DEBUGSERIAL.print("CAN_PRIVATE1");
				else if (rxId == CAN_PRIVATE2) DEBUGSERIAL.print("CAN_PRIVATE2");
				else DEBUGSERIAL.print(rxId, HEX);
				DEBUGSERIAL.print(" (");
				DEBUGSERIAL.print("len=");
				DEBUGSERIAL.print(len);
				DEBUGSERIAL.println(")");
#endif
				if (len < 8) continue;
				if (rxId == CAN_PRIVATE1) {
					Engine.b[0] = canbuf[0];
					Engine.b[1] = canbuf[1];
					Engine.b[2] = canbuf[2];
					Engine.b[3] = canbuf[3];
					Engine.b[4] = canbuf[4];
					Engine.b[5] = canbuf[5];
					Engine.b[6] = canbuf[6];
					Engine.b[7] = canbuf[7];
					bothreached |= 1;
				}
				if (rxId == CAN_PRIVATE2) {
					Engine.b[8] = canbuf[0];
					Engine.b[9] = canbuf[1];
					Engine.b[10] = canbuf[2];
					Engine.b[11] = canbuf[3];
					Engine.b[12] = canbuf[4];
					Engine.b[13] = canbuf[5];
					Engine.b[14] = canbuf[6];
					Engine.b[15] = canbuf[7];
					bothreached |= 2;
				}
			}
		}
|————————Node:{ Text: {
|————————Node:expression_statement Text: sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);
|—————————Node:assignment_expression Text: sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf)
|——————————Node:identifier Text: sndStat
|——————————Node:= Text: =
|——————————Node:call_expression Text: CAN0.readMsgBuf(&rxId, &len, canbuf)
|———————————Node:field_expression Text: CAN0.readMsgBuf
|————————————Node:identifier Text: CAN0
|————————————Node:. Text: .
|————————————Node:field_identifier Text: readMsgBuf
|———————————Node:argument_list Text: (&rxId, &len, canbuf)
|————————————Node:( Text: (
|————————————Node:pointer_expression Text: &rxId
|—————————————Node:& Text: &
|—————————————Node:identifier Text: rxId
|————————————Node:, Text: ,
|————————————Node:pointer_expression Text: &len
|—————————————Node:& Text: &
|—————————————Node:identifier Text: len
|————————————Node:, Text: ,
|————————————Node:identifier Text: canbuf
|————————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:comment Text: // Read data: len = data length, buf = data byte(s)
|————————Node:if_statement Text: if (sndStat != CAN_OK) continue;
|—————————Node:if Text: if
|—————————Node:condition_clause Text: (sndStat != CAN_OK)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: sndStat != CAN_OK
|———————————Node:identifier Text: sndStat
|———————————Node:!= Text: !=
|———————————Node:identifier Text: CAN_OK
|——————————Node:) Text: )
|—————————Node:continue_statement Text: continue;
|——————————Node:continue Text: continue
|——————————Node:; Text: ;
|————————Node:preproc_ifdef Text: #ifdef DEBUGSERIAL
			if (len > 0 && len <= 8) {
				DEBUGSERIAL.print("  rxId=:0x");
				DEBUGSERIAL.print(rxId, HEX);
				DEBUGSERIAL.println("(");
				for (byte i = 0; i < len; i++) {
					sprintf(msgString, " 0x%.2X", canbuf[i]);
					DEBUGSERIAL.print(msgString);
				}
				DEBUGSERIAL.println(")");
			}
#endif
|—————————Node:#ifdef Text: #ifdef
|—————————Node:identifier Text: DEBUGSERIAL
|—————————Node:if_statement Text: if (len > 0 && len <= 8) {
				DEBUGSERIAL.print("  rxId=:0x");
				DEBUGSERIAL.print(rxId, HEX);
				DEBUGSERIAL.println("(");
				for (byte i = 0; i < len; i++) {
					sprintf(msgString, " 0x%.2X", canbuf[i]);
					DEBUGSERIAL.print(msgString);
				}
				DEBUGSERIAL.println(")");
			}
|——————————Node:if Text: if
|——————————Node:condition_clause Text: (len > 0 && len <= 8)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: len > 0 && len <= 8
|————————————Node:binary_expression Text: len > 0
|—————————————Node:identifier Text: len
|—————————————Node:> Text: >
|—————————————Node:number_literal Text: 0
|————————————Node:&& Text: &&
|————————————Node:binary_expression Text: len <= 8
|—————————————Node:identifier Text: len
|—————————————Node:<= Text: <=
|—————————————Node:number_literal Text: 8
|———————————Node:) Text: )
|——————————Node:compound_statement Text: {
				DEBUGSERIAL.print("  rxId=:0x");
				DEBUGSERIAL.print(rxId, HEX);
				DEBUGSERIAL.println("(");
				for (byte i = 0; i < len; i++) {
					sprintf(msgString, " 0x%.2X", canbuf[i]);
					DEBUGSERIAL.print(msgString);
				}
				DEBUGSERIAL.println(")");
			}
|———————————Node:{ Text: {
|———————————Node:expression_statement Text: DEBUGSERIAL.print("  rxId=:0x");
|————————————Node:call_expression Text: DEBUGSERIAL.print("  rxId=:0x")
|—————————————Node:field_expression Text: DEBUGSERIAL.print
|——————————————Node:identifier Text: DEBUGSERIAL
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: print
|—————————————Node:argument_list Text: ("  rxId=:0x")
|——————————————Node:( Text: (
|——————————————Node:string_literal Text: "  rxId=:0x"
|———————————————Node:" Text: "
|———————————————Node:string_content Text:   rxId=:0x
|———————————————Node:" Text: "
|——————————————Node:) Text: )
|————————————Node:; Text: ;
|———————————Node:expression_statement Text: DEBUGSERIAL.print(rxId, HEX);
|————————————Node:call_expression Text: DEBUGSERIAL.print(rxId, HEX)
|—————————————Node:field_expression Text: DEBUGSERIAL.print
|——————————————Node:identifier Text: DEBUGSERIAL
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: print
|—————————————Node:argument_list Text: (rxId, HEX)
|——————————————Node:( Text: (
|——————————————Node:identifier Text: rxId
|——————————————Node:, Text: ,
|——————————————Node:identifier Text: HEX
|——————————————Node:) Text: )
|————————————Node:; Text: ;
|———————————Node:expression_statement Text: DEBUGSERIAL.println("(");
|————————————Node:call_expression Text: DEBUGSERIAL.println("(")
|—————————————Node:field_expression Text: DEBUGSERIAL.println
|——————————————Node:identifier Text: DEBUGSERIAL
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: println
|—————————————Node:argument_list Text: ("(")
|——————————————Node:( Text: (
|——————————————Node:string_literal Text: "("
|———————————————Node:" Text: "
|———————————————Node:string_content Text: (
|———————————————Node:" Text: "
|——————————————Node:) Text: )
|————————————Node:; Text: ;
|———————————Node:for_statement Text: for (byte i = 0; i < len; i++) {
					sprintf(msgString, " 0x%.2X", canbuf[i]);
					DEBUGSERIAL.print(msgString);
				}
|————————————Node:for Text: for
|————————————Node:( Text: (
|————————————Node:declaration Text: byte i = 0;
|—————————————Node:type_identifier Text: byte
|—————————————Node:init_declarator Text: i = 0
|——————————————Node:identifier Text: i
|——————————————Node:= Text: =
|——————————————Node:number_literal Text: 0
|—————————————Node:; Text: ;
|————————————Node:binary_expression Text: i < len
|—————————————Node:identifier Text: i
|—————————————Node:< Text: <
|—————————————Node:identifier Text: len
|————————————Node:; Text: ;
|————————————Node:update_expression Text: i++
|—————————————Node:identifier Text: i
|—————————————Node:++ Text: ++
|————————————Node:) Text: )
|————————————Node:compound_statement Text: {
					sprintf(msgString, " 0x%.2X", canbuf[i]);
					DEBUGSERIAL.print(msgString);
				}
|—————————————Node:{ Text: {
|—————————————Node:expression_statement Text: sprintf(msgString, " 0x%.2X", canbuf[i]);
|——————————————Node:call_expression Text: sprintf(msgString, " 0x%.2X", canbuf[i])
|———————————————Node:identifier Text: sprintf
|———————————————Node:argument_list Text: (msgString, " 0x%.2X", canbuf[i])
|————————————————Node:( Text: (
|————————————————Node:identifier Text: msgString
|————————————————Node:, Text: ,
|————————————————Node:string_literal Text: " 0x%.2X"
|—————————————————Node:" Text: "
|—————————————————Node:string_content Text:  0x%.2X
|—————————————————Node:" Text: "
|————————————————Node:, Text: ,
|————————————————Node:subscript_expression Text: canbuf[i]
|—————————————————Node:identifier Text: canbuf
|—————————————————Node:subscript_argument_list Text: [i]
|——————————————————Node:[ Text: [
|——————————————————Node:identifier Text: i
|——————————————————Node:] Text: ]
|————————————————Node:) Text: )
|——————————————Node:; Text: ;
|—————————————Node:expression_statement Text: DEBUGSERIAL.print(msgString);
|——————————————Node:call_expression Text: DEBUGSERIAL.print(msgString)
|———————————————Node:field_expression Text: DEBUGSERIAL.print
|————————————————Node:identifier Text: DEBUGSERIAL
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: print
|———————————————Node:argument_list Text: (msgString)
|————————————————Node:( Text: (
|————————————————Node:identifier Text: msgString
|————————————————Node:) Text: )
|——————————————Node:; Text: ;
|—————————————Node:} Text: }
|———————————Node:expression_statement Text: DEBUGSERIAL.println(")");
|————————————Node:call_expression Text: DEBUGSERIAL.println(")")
|—————————————Node:field_expression Text: DEBUGSERIAL.println
|——————————————Node:identifier Text: DEBUGSERIAL
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: println
|—————————————Node:argument_list Text: (")")
|——————————————Node:( Text: (
|——————————————Node:string_literal Text: ")"
|———————————————Node:" Text: "
|———————————————Node:string_content Text: )
|———————————————Node:" Text: "
|——————————————Node:) Text: )
|————————————Node:; Text: ;
|———————————Node:} Text: }
|—————————Node:#endif Text: #endif
|————————Node:if_statement Text: if (rxId == privateids[0] || rxId == privateids[1]) {
#ifdef DEBUGSERIAL
				if (rxId == CAN_PRIVATE1) DEBUGSERIAL.print("CAN_PRIVATE1");
				else if (rxId == CAN_PRIVATE2) DEBUGSERIAL.print("CAN_PRIVATE2");
				else DEBUGSERIAL.print(rxId, HEX);
				DEBUGSERIAL.print(" (");
				DEBUGSERIAL.print("len=");
				DEBUGSERIAL.print(len);
				DEBUGSERIAL.println(")");
#endif
				if (len < 8) continue;
				if (rxId == CAN_PRIVATE1) {
					Engine.b[0] = canbuf[0];
					Engine.b[1] = canbuf[1];
					Engine.b[2] = canbuf[2];
					Engine.b[3] = canbuf[3];
					Engine.b[4] = canbuf[4];
					Engine.b[5] = canbuf[5];
					Engine.b[6] = canbuf[6];
					Engine.b[7] = canbuf[7];
					bothreached |= 1;
				}
				if (rxId == CAN_PRIVATE2) {
					Engine.b[8] = canbuf[0];
					Engine.b[9] = canbuf[1];
					Engine.b[10] = canbuf[2];
					Engine.b[11] = canbuf[3];
					Engine.b[12] = canbuf[4];
					Engine.b[13] = canbuf[5];
					Engine.b[14] = canbuf[6];
					Engine.b[15] = canbuf[7];
					bothreached |= 2;
				}
			}
|—————————Node:if Text: if
|—————————Node:condition_clause Text: (rxId == privateids[0] || rxId == privateids[1])
|——————————Node:( Text: (
|——————————Node:binary_expression Text: rxId == privateids[0] || rxId == privateids[1]
|———————————Node:binary_expression Text: rxId == privateids[0]
|————————————Node:identifier Text: rxId
|————————————Node:== Text: ==
|————————————Node:subscript_expression Text: privateids[0]
|—————————————Node:identifier Text: privateids
|—————————————Node:subscript_argument_list Text: [0]
|——————————————Node:[ Text: [
|——————————————Node:number_literal Text: 0
|——————————————Node:] Text: ]
|———————————Node:|| Text: ||
|———————————Node:binary_expression Text: rxId == privateids[1]
|————————————Node:identifier Text: rxId
|————————————Node:== Text: ==
|————————————Node:subscript_expression Text: privateids[1]
|—————————————Node:identifier Text: privateids
|—————————————Node:subscript_argument_list Text: [1]
|——————————————Node:[ Text: [
|——————————————Node:number_literal Text: 1
|——————————————Node:] Text: ]
|——————————Node:) Text: )
|—————————Node:compound_statement Text: {
#ifdef DEBUGSERIAL
				if (rxId == CAN_PRIVATE1) DEBUGSERIAL.print("CAN_PRIVATE1");
				else if (rxId == CAN_PRIVATE2) DEBUGSERIAL.print("CAN_PRIVATE2");
				else DEBUGSERIAL.print(rxId, HEX);
				DEBUGSERIAL.print(" (");
				DEBUGSERIAL.print("len=");
				DEBUGSERIAL.print(len);
				DEBUGSERIAL.println(")");
#endif
				if (len < 8) continue;
				if (rxId == CAN_PRIVATE1) {
					Engine.b[0] = canbuf[0];
					Engine.b[1] = canbuf[1];
					Engine.b[2] = canbuf[2];
					Engine.b[3] = canbuf[3];
					Engine.b[4] = canbuf[4];
					Engine.b[5] = canbuf[5];
					Engine.b[6] = canbuf[6];
					Engine.b[7] = canbuf[7];
					bothreached |= 1;
				}
				if (rxId == CAN_PRIVATE2) {
					Engine.b[8] = canbuf[0];
					Engine.b[9] = canbuf[1];
					Engine.b[10] = canbuf[2];
					Engine.b[11] = canbuf[3];
					Engine.b[12] = canbuf[4];
					Engine.b[13] = canbuf[5];
					Engine.b[14] = canbuf[6];
					Engine.b[15] = canbuf[7];
					bothreached |= 2;
				}
			}
|——————————Node:{ Text: {
|——————————Node:preproc_ifdef Text: #ifdef DEBUGSERIAL
				if (rxId == CAN_PRIVATE1) DEBUGSERIAL.print("CAN_PRIVATE1");
				else if (rxId == CAN_PRIVATE2) DEBUGSERIAL.print("CAN_PRIVATE2");
				else DEBUGSERIAL.print(rxId, HEX);
				DEBUGSERIAL.print(" (");
				DEBUGSERIAL.print("len=");
				DEBUGSERIAL.print(len);
				DEBUGSERIAL.println(")");
#endif
|———————————Node:#ifdef Text: #ifdef
|———————————Node:identifier Text: DEBUGSERIAL
|———————————Node:if_statement Text: if (rxId == CAN_PRIVATE1) DEBUGSERIAL.print("CAN_PRIVATE1");
				else if (rxId == CAN_PRIVATE2) DEBUGSERIAL.print("CAN_PRIVATE2");
				else DEBUGSERIAL.print(rxId, HEX);
|————————————Node:if Text: if
|————————————Node:condition_clause Text: (rxId == CAN_PRIVATE1)
|—————————————Node:( Text: (
|—————————————Node:binary_expression Text: rxId == CAN_PRIVATE1
|——————————————Node:identifier Text: rxId
|——————————————Node:== Text: ==
|——————————————Node:identifier Text: CAN_PRIVATE1
|—————————————Node:) Text: )
|————————————Node:expression_statement Text: DEBUGSERIAL.print("CAN_PRIVATE1");
|—————————————Node:call_expression Text: DEBUGSERIAL.print("CAN_PRIVATE1")
|——————————————Node:field_expression Text: DEBUGSERIAL.print
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: print
|——————————————Node:argument_list Text: ("CAN_PRIVATE1")
|———————————————Node:( Text: (
|———————————————Node:string_literal Text: "CAN_PRIVATE1"
|————————————————Node:" Text: "
|————————————————Node:string_content Text: CAN_PRIVATE1
|————————————————Node:" Text: "
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:else_clause Text: else if (rxId == CAN_PRIVATE2) DEBUGSERIAL.print("CAN_PRIVATE2");
				else DEBUGSERIAL.print(rxId, HEX);
|—————————————Node:else Text: else
|—————————————Node:if_statement Text: if (rxId == CAN_PRIVATE2) DEBUGSERIAL.print("CAN_PRIVATE2");
				else DEBUGSERIAL.print(rxId, HEX);
|——————————————Node:if Text: if
|——————————————Node:condition_clause Text: (rxId == CAN_PRIVATE2)
|———————————————Node:( Text: (
|———————————————Node:binary_expression Text: rxId == CAN_PRIVATE2
|————————————————Node:identifier Text: rxId
|————————————————Node:== Text: ==
|————————————————Node:identifier Text: CAN_PRIVATE2
|———————————————Node:) Text: )
|——————————————Node:expression_statement Text: DEBUGSERIAL.print("CAN_PRIVATE2");
|———————————————Node:call_expression Text: DEBUGSERIAL.print("CAN_PRIVATE2")
|————————————————Node:field_expression Text: DEBUGSERIAL.print
|—————————————————Node:identifier Text: DEBUGSERIAL
|—————————————————Node:. Text: .
|—————————————————Node:field_identifier Text: print
|————————————————Node:argument_list Text: ("CAN_PRIVATE2")
|—————————————————Node:( Text: (
|—————————————————Node:string_literal Text: "CAN_PRIVATE2"
|——————————————————Node:" Text: "
|——————————————————Node:string_content Text: CAN_PRIVATE2
|——————————————————Node:" Text: "
|—————————————————Node:) Text: )
|———————————————Node:; Text: ;
|——————————————Node:else_clause Text: else DEBUGSERIAL.print(rxId, HEX);
|———————————————Node:else Text: else
|———————————————Node:expression_statement Text: DEBUGSERIAL.print(rxId, HEX);
|————————————————Node:call_expression Text: DEBUGSERIAL.print(rxId, HEX)
|—————————————————Node:field_expression Text: DEBUGSERIAL.print
|——————————————————Node:identifier Text: DEBUGSERIAL
|——————————————————Node:. Text: .
|——————————————————Node:field_identifier Text: print
|—————————————————Node:argument_list Text: (rxId, HEX)
|——————————————————Node:( Text: (
|——————————————————Node:identifier Text: rxId
|——————————————————Node:, Text: ,
|——————————————————Node:identifier Text: HEX
|——————————————————Node:) Text: )
|————————————————Node:; Text: ;
|———————————Node:expression_statement Text: DEBUGSERIAL.print(" (");
|————————————Node:call_expression Text: DEBUGSERIAL.print(" (")
|—————————————Node:field_expression Text: DEBUGSERIAL.print
|——————————————Node:identifier Text: DEBUGSERIAL
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: print
|—————————————Node:argument_list Text: (" (")
|——————————————Node:( Text: (
|——————————————Node:string_literal Text: " ("
|———————————————Node:" Text: "
|———————————————Node:string_content Text:  (
|———————————————Node:" Text: "
|——————————————Node:) Text: )
|————————————Node:; Text: ;
|———————————Node:expression_statement Text: DEBUGSERIAL.print("len=");
|————————————Node:call_expression Text: DEBUGSERIAL.print("len=")
|—————————————Node:field_expression Text: DEBUGSERIAL.print
|——————————————Node:identifier Text: DEBUGSERIAL
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: print
|—————————————Node:argument_list Text: ("len=")
|——————————————Node:( Text: (
|——————————————Node:string_literal Text: "len="
|———————————————Node:" Text: "
|———————————————Node:string_content Text: len=
|———————————————Node:" Text: "
|——————————————Node:) Text: )
|————————————Node:; Text: ;
|———————————Node:expression_statement Text: DEBUGSERIAL.print(len);
|————————————Node:call_expression Text: DEBUGSERIAL.print(len)
|—————————————Node:field_expression Text: DEBUGSERIAL.print
|——————————————Node:identifier Text: DEBUGSERIAL
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: print
|—————————————Node:argument_list Text: (len)
|——————————————Node:( Text: (
|——————————————Node:identifier Text: len
|——————————————Node:) Text: )
|————————————Node:; Text: ;
|———————————Node:expression_statement Text: DEBUGSERIAL.println(")");
|————————————Node:call_expression Text: DEBUGSERIAL.println(")")
|—————————————Node:field_expression Text: DEBUGSERIAL.println
|——————————————Node:identifier Text: DEBUGSERIAL
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: println
|—————————————Node:argument_list Text: (")")
|——————————————Node:( Text: (
|——————————————Node:string_literal Text: ")"
|———————————————Node:" Text: "
|———————————————Node:string_content Text: )
|———————————————Node:" Text: "
|——————————————Node:) Text: )
|————————————Node:; Text: ;
|———————————Node:#endif Text: #endif
|——————————Node:if_statement Text: if (len < 8) continue;
|———————————Node:if Text: if
|———————————Node:condition_clause Text: (len < 8)
|————————————Node:( Text: (
|————————————Node:binary_expression Text: len < 8
|—————————————Node:identifier Text: len
|—————————————Node:< Text: <
|—————————————Node:number_literal Text: 8
|————————————Node:) Text: )
|———————————Node:continue_statement Text: continue;
|————————————Node:continue Text: continue
|————————————Node:; Text: ;
|——————————Node:if_statement Text: if (rxId == CAN_PRIVATE1) {
					Engine.b[0] = canbuf[0];
					Engine.b[1] = canbuf[1];
					Engine.b[2] = canbuf[2];
					Engine.b[3] = canbuf[3];
					Engine.b[4] = canbuf[4];
					Engine.b[5] = canbuf[5];
					Engine.b[6] = canbuf[6];
					Engine.b[7] = canbuf[7];
					bothreached |= 1;
				}
|———————————Node:if Text: if
|———————————Node:condition_clause Text: (rxId == CAN_PRIVATE1)
|————————————Node:( Text: (
|————————————Node:binary_expression Text: rxId == CAN_PRIVATE1
|—————————————Node:identifier Text: rxId
|—————————————Node:== Text: ==
|—————————————Node:identifier Text: CAN_PRIVATE1
|————————————Node:) Text: )
|———————————Node:compound_statement Text: {
					Engine.b[0] = canbuf[0];
					Engine.b[1] = canbuf[1];
					Engine.b[2] = canbuf[2];
					Engine.b[3] = canbuf[3];
					Engine.b[4] = canbuf[4];
					Engine.b[5] = canbuf[5];
					Engine.b[6] = canbuf[6];
					Engine.b[7] = canbuf[7];
					bothreached |= 1;
				}
|————————————Node:{ Text: {
|————————————Node:expression_statement Text: Engine.b[0] = canbuf[0];
|—————————————Node:assignment_expression Text: Engine.b[0] = canbuf[0]
|——————————————Node:subscript_expression Text: Engine.b[0]
|———————————————Node:field_expression Text: Engine.b
|————————————————Node:identifier Text: Engine
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: b
|———————————————Node:subscript_argument_list Text: [0]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 0
|————————————————Node:] Text: ]
|——————————————Node:= Text: =
|——————————————Node:subscript_expression Text: canbuf[0]
|———————————————Node:identifier Text: canbuf
|———————————————Node:subscript_argument_list Text: [0]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 0
|————————————————Node:] Text: ]
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: Engine.b[1] = canbuf[1];
|—————————————Node:assignment_expression Text: Engine.b[1] = canbuf[1]
|——————————————Node:subscript_expression Text: Engine.b[1]
|———————————————Node:field_expression Text: Engine.b
|————————————————Node:identifier Text: Engine
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: b
|———————————————Node:subscript_argument_list Text: [1]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 1
|————————————————Node:] Text: ]
|——————————————Node:= Text: =
|——————————————Node:subscript_expression Text: canbuf[1]
|———————————————Node:identifier Text: canbuf
|———————————————Node:subscript_argument_list Text: [1]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 1
|————————————————Node:] Text: ]
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: Engine.b[2] = canbuf[2];
|—————————————Node:assignment_expression Text: Engine.b[2] = canbuf[2]
|——————————————Node:subscript_expression Text: Engine.b[2]
|———————————————Node:field_expression Text: Engine.b
|————————————————Node:identifier Text: Engine
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: b
|———————————————Node:subscript_argument_list Text: [2]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 2
|————————————————Node:] Text: ]
|——————————————Node:= Text: =
|——————————————Node:subscript_expression Text: canbuf[2]
|———————————————Node:identifier Text: canbuf
|———————————————Node:subscript_argument_list Text: [2]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 2
|————————————————Node:] Text: ]
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: Engine.b[3] = canbuf[3];
|—————————————Node:assignment_expression Text: Engine.b[3] = canbuf[3]
|——————————————Node:subscript_expression Text: Engine.b[3]
|———————————————Node:field_expression Text: Engine.b
|————————————————Node:identifier Text: Engine
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: b
|———————————————Node:subscript_argument_list Text: [3]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 3
|————————————————Node:] Text: ]
|——————————————Node:= Text: =
|——————————————Node:subscript_expression Text: canbuf[3]
|———————————————Node:identifier Text: canbuf
|———————————————Node:subscript_argument_list Text: [3]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 3
|————————————————Node:] Text: ]
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: Engine.b[4] = canbuf[4];
|—————————————Node:assignment_expression Text: Engine.b[4] = canbuf[4]
|——————————————Node:subscript_expression Text: Engine.b[4]
|———————————————Node:field_expression Text: Engine.b
|————————————————Node:identifier Text: Engine
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: b
|———————————————Node:subscript_argument_list Text: [4]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 4
|————————————————Node:] Text: ]
|——————————————Node:= Text: =
|——————————————Node:subscript_expression Text: canbuf[4]
|———————————————Node:identifier Text: canbuf
|———————————————Node:subscript_argument_list Text: [4]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 4
|————————————————Node:] Text: ]
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: Engine.b[5] = canbuf[5];
|—————————————Node:assignment_expression Text: Engine.b[5] = canbuf[5]
|——————————————Node:subscript_expression Text: Engine.b[5]
|———————————————Node:field_expression Text: Engine.b
|————————————————Node:identifier Text: Engine
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: b
|———————————————Node:subscript_argument_list Text: [5]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 5
|————————————————Node:] Text: ]
|——————————————Node:= Text: =
|——————————————Node:subscript_expression Text: canbuf[5]
|———————————————Node:identifier Text: canbuf
|———————————————Node:subscript_argument_list Text: [5]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 5
|————————————————Node:] Text: ]
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: Engine.b[6] = canbuf[6];
|—————————————Node:assignment_expression Text: Engine.b[6] = canbuf[6]
|——————————————Node:subscript_expression Text: Engine.b[6]
|———————————————Node:field_expression Text: Engine.b
|————————————————Node:identifier Text: Engine
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: b
|———————————————Node:subscript_argument_list Text: [6]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 6
|————————————————Node:] Text: ]
|——————————————Node:= Text: =
|——————————————Node:subscript_expression Text: canbuf[6]
|———————————————Node:identifier Text: canbuf
|———————————————Node:subscript_argument_list Text: [6]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 6
|————————————————Node:] Text: ]
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: Engine.b[7] = canbuf[7];
|—————————————Node:assignment_expression Text: Engine.b[7] = canbuf[7]
|——————————————Node:subscript_expression Text: Engine.b[7]
|———————————————Node:field_expression Text: Engine.b
|————————————————Node:identifier Text: Engine
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: b
|———————————————Node:subscript_argument_list Text: [7]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 7
|————————————————Node:] Text: ]
|——————————————Node:= Text: =
|——————————————Node:subscript_expression Text: canbuf[7]
|———————————————Node:identifier Text: canbuf
|———————————————Node:subscript_argument_list Text: [7]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 7
|————————————————Node:] Text: ]
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: bothreached |= 1;
|—————————————Node:assignment_expression Text: bothreached |= 1
|——————————————Node:identifier Text: bothreached
|——————————————Node:|= Text: |=
|——————————————Node:number_literal Text: 1
|—————————————Node:; Text: ;
|————————————Node:} Text: }
|——————————Node:if_statement Text: if (rxId == CAN_PRIVATE2) {
					Engine.b[8] = canbuf[0];
					Engine.b[9] = canbuf[1];
					Engine.b[10] = canbuf[2];
					Engine.b[11] = canbuf[3];
					Engine.b[12] = canbuf[4];
					Engine.b[13] = canbuf[5];
					Engine.b[14] = canbuf[6];
					Engine.b[15] = canbuf[7];
					bothreached |= 2;
				}
|———————————Node:if Text: if
|———————————Node:condition_clause Text: (rxId == CAN_PRIVATE2)
|————————————Node:( Text: (
|————————————Node:binary_expression Text: rxId == CAN_PRIVATE2
|—————————————Node:identifier Text: rxId
|—————————————Node:== Text: ==
|—————————————Node:identifier Text: CAN_PRIVATE2
|————————————Node:) Text: )
|———————————Node:compound_statement Text: {
					Engine.b[8] = canbuf[0];
					Engine.b[9] = canbuf[1];
					Engine.b[10] = canbuf[2];
					Engine.b[11] = canbuf[3];
					Engine.b[12] = canbuf[4];
					Engine.b[13] = canbuf[5];
					Engine.b[14] = canbuf[6];
					Engine.b[15] = canbuf[7];
					bothreached |= 2;
				}
|————————————Node:{ Text: {
|————————————Node:expression_statement Text: Engine.b[8] = canbuf[0];
|—————————————Node:assignment_expression Text: Engine.b[8] = canbuf[0]
|——————————————Node:subscript_expression Text: Engine.b[8]
|———————————————Node:field_expression Text: Engine.b
|————————————————Node:identifier Text: Engine
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: b
|———————————————Node:subscript_argument_list Text: [8]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 8
|————————————————Node:] Text: ]
|——————————————Node:= Text: =
|——————————————Node:subscript_expression Text: canbuf[0]
|———————————————Node:identifier Text: canbuf
|———————————————Node:subscript_argument_list Text: [0]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 0
|————————————————Node:] Text: ]
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: Engine.b[9] = canbuf[1];
|—————————————Node:assignment_expression Text: Engine.b[9] = canbuf[1]
|——————————————Node:subscript_expression Text: Engine.b[9]
|———————————————Node:field_expression Text: Engine.b
|————————————————Node:identifier Text: Engine
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: b
|———————————————Node:subscript_argument_list Text: [9]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 9
|————————————————Node:] Text: ]
|——————————————Node:= Text: =
|——————————————Node:subscript_expression Text: canbuf[1]
|———————————————Node:identifier Text: canbuf
|———————————————Node:subscript_argument_list Text: [1]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 1
|————————————————Node:] Text: ]
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: Engine.b[10] = canbuf[2];
|—————————————Node:assignment_expression Text: Engine.b[10] = canbuf[2]
|——————————————Node:subscript_expression Text: Engine.b[10]
|———————————————Node:field_expression Text: Engine.b
|————————————————Node:identifier Text: Engine
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: b
|———————————————Node:subscript_argument_list Text: [10]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 10
|————————————————Node:] Text: ]
|——————————————Node:= Text: =
|——————————————Node:subscript_expression Text: canbuf[2]
|———————————————Node:identifier Text: canbuf
|———————————————Node:subscript_argument_list Text: [2]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 2
|————————————————Node:] Text: ]
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: Engine.b[11] = canbuf[3];
|—————————————Node:assignment_expression Text: Engine.b[11] = canbuf[3]
|——————————————Node:subscript_expression Text: Engine.b[11]
|———————————————Node:field_expression Text: Engine.b
|————————————————Node:identifier Text: Engine
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: b
|———————————————Node:subscript_argument_list Text: [11]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 11
|————————————————Node:] Text: ]
|——————————————Node:= Text: =
|——————————————Node:subscript_expression Text: canbuf[3]
|———————————————Node:identifier Text: canbuf
|———————————————Node:subscript_argument_list Text: [3]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 3
|————————————————Node:] Text: ]
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: Engine.b[12] = canbuf[4];
|—————————————Node:assignment_expression Text: Engine.b[12] = canbuf[4]
|——————————————Node:subscript_expression Text: Engine.b[12]
|———————————————Node:field_expression Text: Engine.b
|————————————————Node:identifier Text: Engine
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: b
|———————————————Node:subscript_argument_list Text: [12]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 12
|————————————————Node:] Text: ]
|——————————————Node:= Text: =
|——————————————Node:subscript_expression Text: canbuf[4]
|———————————————Node:identifier Text: canbuf
|———————————————Node:subscript_argument_list Text: [4]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 4
|————————————————Node:] Text: ]
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: Engine.b[13] = canbuf[5];
|—————————————Node:assignment_expression Text: Engine.b[13] = canbuf[5]
|——————————————Node:subscript_expression Text: Engine.b[13]
|———————————————Node:field_expression Text: Engine.b
|————————————————Node:identifier Text: Engine
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: b
|———————————————Node:subscript_argument_list Text: [13]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 13
|————————————————Node:] Text: ]
|——————————————Node:= Text: =
|——————————————Node:subscript_expression Text: canbuf[5]
|———————————————Node:identifier Text: canbuf
|———————————————Node:subscript_argument_list Text: [5]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 5
|————————————————Node:] Text: ]
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: Engine.b[14] = canbuf[6];
|—————————————Node:assignment_expression Text: Engine.b[14] = canbuf[6]
|——————————————Node:subscript_expression Text: Engine.b[14]
|———————————————Node:field_expression Text: Engine.b
|————————————————Node:identifier Text: Engine
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: b
|———————————————Node:subscript_argument_list Text: [14]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 14
|————————————————Node:] Text: ]
|——————————————Node:= Text: =
|——————————————Node:subscript_expression Text: canbuf[6]
|———————————————Node:identifier Text: canbuf
|———————————————Node:subscript_argument_list Text: [6]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 6
|————————————————Node:] Text: ]
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: Engine.b[15] = canbuf[7];
|—————————————Node:assignment_expression Text: Engine.b[15] = canbuf[7]
|——————————————Node:subscript_expression Text: Engine.b[15]
|———————————————Node:field_expression Text: Engine.b
|————————————————Node:identifier Text: Engine
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: b
|———————————————Node:subscript_argument_list Text: [15]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 15
|————————————————Node:] Text: ]
|——————————————Node:= Text: =
|——————————————Node:subscript_expression Text: canbuf[7]
|———————————————Node:identifier Text: canbuf
|———————————————Node:subscript_argument_list Text: [7]
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 7
|————————————————Node:] Text: ]
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: bothreached |= 2;
|—————————————Node:assignment_expression Text: bothreached |= 2
|——————————————Node:identifier Text: bothreached
|——————————————Node:|= Text: |=
|——————————————Node:number_literal Text: 2
|—————————————Node:; Text: ;
|————————————Node:} Text: }
|——————————Node:} Text: }
|————————Node:} Text: }
|——————Node:if_statement Text: if (bothreached == 3) 	break;
|———————Node:if Text: if
|———————Node:condition_clause Text: (bothreached == 3)
|————————Node:( Text: (
|————————Node:binary_expression Text: bothreached == 3
|—————————Node:identifier Text: bothreached
|—————————Node:== Text: ==
|—————————Node:number_literal Text: 3
|————————Node:) Text: )
|———————Node:break_statement Text: break;
|————————Node:break Text: break
|————————Node:; Text: ;
|——————Node:} Text: }
|—————Node:while Text: while
|—————Node:parenthesized_expression Text: (millis() - start < duration)
|——————Node:( Text: (
|——————Node:binary_expression Text: millis() - start < duration
|———————Node:binary_expression Text: millis() - start
|————————Node:call_expression Text: millis()
|—————————Node:identifier Text: millis
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:- Text: -
|————————Node:identifier Text: start
|———————Node:< Text: <
|———————Node:identifier Text: duration
|——————Node:) Text: )
|—————Node:; Text: ;
|————Node:return_statement Text: return sndStat;
|—————Node:return Text: return
|—————Node:identifier Text: sndStat
|—————Node:; Text: ;
|————Node:} Text: }
|——Node:preproc_else Text: #else
INT8U CAN_BeginMaster() {
	int retries = 1;
	INT8U rv = MCP2515_FAIL;
	for (int r = 0; r < retries; r++) {
		if (CAN0.begin(MCP_STDEXT, CAN_500KBPS, MCP_8MHZ) == CAN_OK) {
			rv = MCP2515_OK;
			break;
		}
		else delay(100);
	}
	if (rv == MCP2515_FAIL) {
#ifdef MCP_STDERR
		MCP_STDERR.println("MCP2515_FAIL");
#endif
#ifdef DEBUGSERIAL
		DEBUGSERIAL.println("MCP2515_FAIL");
#endif
		return rv;
	}
	
	rv = CAN_SetMode(MCP_NORMAL);
	// here we allow only standard Ids CAN_ANTRIEB242 CAN_ANTRIEB245 CAN_ANTRIEB442
	if (rv != CAN_OK)return rv;
	pinMode(CAN0_INT, INPUT);								// Configuring pin for /INT input
	long mask = ((long)0x7FF) << 16;

	rv = CAN0.init_Mask(0, 0, mask);      // there are 2 mask in mcp2515, you need to set both of them
	if (rv != CAN_OK) {
#ifdef MCP_STDERR
		MCP_STDERR.print("CAN0.init_Mask(0, 0, ((long)0x7ff) error:");
		MCP_STDERR.println(rv);
#endif
		return rv;
	}
	CAN0.init_Filt(0, 0, ((long)CAN_ANTRIEB242) << 16);
	CAN0.init_Filt(1, 0, ((long)CAN_ANTRIEB245) << 16);

	CAN0.init_Mask(1, 0, ((long)0x7FF) << 16); // only address containing 0x40 are allowed, 0x640, 0x440, 0x240, 0x241,0x24F,...
	CAN0.init_Filt(2, 0, ((long)CAN_ANTRIEB242) << 16);
	CAN0.init_Filt(3, 0, ((long)CAN_ANTRIEB245) << 16);
	CAN0.init_Filt(4, 0, ((long)CAN_ANTRIEB442) << 16);
	CAN0.init_Filt(5, 0, ((long)CAN_ANTRIEB442) << 16);
	CAN0.init_Filt(6, 0, ((long)CAN_ANTRIEB442) << 16);
	// there are 6 filter in mcp2515
	
	return rv;
}
INT8U send442() {
	byte sndStat = CAN_FAIL;
	//sndStat = CAN_SetMode(MCP_NORMAL);
	canbuf[0] = 0x02;// ACD_1  2 = Normal_Prog_aktiv
	sndStat = CAN0.sendMsgBuf(CAN_ANTRIEB442, 1, canbuf);
	//byte sndStat2 = CAN_SetMode(MCP_LISTENONLY);
	return sndStat; // never sends
}

INT8U sendBothPrivateCan(EngineMsmtU& _Engine) {
	byte sndStat = CAN_FAIL;
	//sndStat = CAN_SetMode(MCP_NORMAL);

	//if (sndStat != CAN_OK) return sndStat;
	// use address CAN_PRIVATE1, must not interfere
	sndStat = CAN_SendMsg(CAN_PRIVATE1, 8, (byte*)&_Engine.b[0]);
	if (sndStat != CAN_OK) return sndStat;
	sndStat = CAN_SendMsg(CAN_PRIVATE2, 8, (byte*)&_Engine.b[8]);
	if (sndStat != CAN_OK) return sndStat;
	//byte sndStat2 = CAN_SetMode(MCP_LISTENONLY);
	return sndStat;
}
uint16_t lastnmot = 0;
int nsame = 0;

INT8U getCan242(long duration, MOTOR_1& can242) {
	INT8U sndStat = CAN_OK;
	sndStat = CAN0.setMode(MCP_LISTENONLY);
	if (sndStat != CAN_OK) return sndStat;
	long start = millis();
	bool receivedintime = false;
	do {
		if (!digitalRead(CAN0_INT))                         // If CAN0_INT pin is low, read receive buffer
		{
			sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);
			if (sndStat != CAN_OK) continue;
			if (rxId == 0x242) {
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("Antrieb(0x242):");
				if (sizeof(MOTOR_1) != 8)DEBUGSERIAL.println("FATAL: MOTOR_1 NOT sizeof(8)");
#endif
				if (len < 8) continue;
				memcpy(&can242, canbuf, 8);
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("miist=");
				DEBUGSERIAL.print(can242.miist * 100.0 / 255.0);
				DEBUGSERIAL.print(",nmot=");
				DEBUGSERIAL.print(can242.nmot * 0.25);
				DEBUGSERIAL.print(",Wped_fgr=");
				DEBUGSERIAL.print(can242.Wped_fgr * 100.0 / 254.0);
				if (can242.E_lm) DEBUGSERIAL.print("E_lm: HFM Error");
				DEBUGSERIAL.println("");
#endif
				receivedintime = true;
				break;
			}
		}
	} while (millis() - start < duration);

	if (can242.nmot == lastnmot) nsame++;
	else nsame = 0;
	lastnmot = can242.nmot;
	sndStat = CAN0.setMode(MCP_NORMAL);
	//CAN_Spi_UnSelect();
	//Serial.println(nsame);
	if (nsame > 7) {
		can242.nmot = 0;
		can242.Wped_fgr = 0;
		can242.miist = 0;
	}
	if (!receivedintime) {
#ifdef	MCP_STDERR
		MCP_STDERR.println("Timout reading CAN_ANTRIEB242");
#endif
	}
	return sndStat;
}

INT8U getCan245(long duration, MOTOR_2& can245) {
	INT8U sndStat = CAN_FAIL;
	sndStat = CAN0.setMode(MCP_LISTENONLY);
	if (sndStat != CAN_OK) return sndStat;
	long start = millis();
	bool receivedintime = false;
	do {
		if (!digitalRead(CAN0_INT))                         // If CAN0_INT pin is low, read receive buffer
		{
			sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);
			if (sndStat != CAN_OK) continue;
			if (rxId == 0x245) {
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("Antrieb(0x245):");
				if (sizeof(MOTOR_2) != 8)DEBUGSERIAL.println("FATAL: MOTOR_1 NOT sizeof(8)");
#endif
				if (len < 8) continue;
				memcpy(&can245, canbuf, 8);

#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("Tmot=");
				DEBUGSERIAL.print(EngOilTemp(can245.Tmot));
				DEBUGSERIAL.print(",E_tm=");
				DEBUGSERIAL.print(can245.E_tm);
				DEBUGSERIAL.print(",B_bremse=");
				DEBUGSERIAL.print(can245.B_bremse);
				DEBUGSERIAL.print(",E_bremse=");
				DEBUGSERIAL.print(can245.E_bremse);
				DEBUGSERIAL.print(",B_ffz=");
				DEBUGSERIAL.print(can245.B_ffz);
				DEBUGSERIAL.print(",stat_fgr=");
				DEBUGSERIAL.print(can245.stat_fgr);
				DEBUGSERIAL.print(",mibas=");
				DEBUGSERIAL.print(can245.mibas);
				DEBUGSERIAL.print(",nstat=");
				DEBUGSERIAL.print(can245.nstat);
				DEBUGSERIAL.print(",mizwmn=");
				DEBUGSERIAL.print(can245.mizwmn);
				DEBUGSERIAL.print(",mimax=");
				DEBUGSERIAL.print(can245.mimax);
				DEBUGSERIAL.print(",misol=");
				DEBUGSERIAL.print(can245.misol);
				DEBUGSERIAL.println("");
#endif
				receivedintime = true;
				break;
			}
		}
	} while (millis() - start < duration);
	sndStat = CAN0.setMode(MCP_NORMAL);
	//CAN_Spi_UnSelect();
	if (!receivedintime) {
#ifdef	MCP_STDERR
		MCP_STDERR.println("Timout reading CAN_ANTRIEB245");
#endif
	}
	return sndStat;
}
|———Node:#else Text: #else
|———Node:function_definition Text: INT8U CAN_BeginMaster() {
	int retries = 1;
	INT8U rv = MCP2515_FAIL;
	for (int r = 0; r < retries; r++) {
		if (CAN0.begin(MCP_STDEXT, CAN_500KBPS, MCP_8MHZ) == CAN_OK) {
			rv = MCP2515_OK;
			break;
		}
		else delay(100);
	}
	if (rv == MCP2515_FAIL) {
#ifdef MCP_STDERR
		MCP_STDERR.println("MCP2515_FAIL");
#endif
#ifdef DEBUGSERIAL
		DEBUGSERIAL.println("MCP2515_FAIL");
#endif
		return rv;
	}
	
	rv = CAN_SetMode(MCP_NORMAL);
	// here we allow only standard Ids CAN_ANTRIEB242 CAN_ANTRIEB245 CAN_ANTRIEB442
	if (rv != CAN_OK)return rv;
	pinMode(CAN0_INT, INPUT);								// Configuring pin for /INT input
	long mask = ((long)0x7FF) << 16;

	rv = CAN0.init_Mask(0, 0, mask);      // there are 2 mask in mcp2515, you need to set both of them
	if (rv != CAN_OK) {
#ifdef MCP_STDERR
		MCP_STDERR.print("CAN0.init_Mask(0, 0, ((long)0x7ff) error:");
		MCP_STDERR.println(rv);
#endif
		return rv;
	}
	CAN0.init_Filt(0, 0, ((long)CAN_ANTRIEB242) << 16);
	CAN0.init_Filt(1, 0, ((long)CAN_ANTRIEB245) << 16);

	CAN0.init_Mask(1, 0, ((long)0x7FF) << 16); // only address containing 0x40 are allowed, 0x640, 0x440, 0x240, 0x241,0x24F,...
	CAN0.init_Filt(2, 0, ((long)CAN_ANTRIEB242) << 16);
	CAN0.init_Filt(3, 0, ((long)CAN_ANTRIEB245) << 16);
	CAN0.init_Filt(4, 0, ((long)CAN_ANTRIEB442) << 16);
	CAN0.init_Filt(5, 0, ((long)CAN_ANTRIEB442) << 16);
	CAN0.init_Filt(6, 0, ((long)CAN_ANTRIEB442) << 16);
	// there are 6 filter in mcp2515
	
	return rv;
}
|————Node:type_identifier Text: INT8U
|————Node:function_declarator Text: CAN_BeginMaster()
|—————Node:identifier Text: CAN_BeginMaster
|—————Node:parameter_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:compound_statement Text: {
	int retries = 1;
	INT8U rv = MCP2515_FAIL;
	for (int r = 0; r < retries; r++) {
		if (CAN0.begin(MCP_STDEXT, CAN_500KBPS, MCP_8MHZ) == CAN_OK) {
			rv = MCP2515_OK;
			break;
		}
		else delay(100);
	}
	if (rv == MCP2515_FAIL) {
#ifdef MCP_STDERR
		MCP_STDERR.println("MCP2515_FAIL");
#endif
#ifdef DEBUGSERIAL
		DEBUGSERIAL.println("MCP2515_FAIL");
#endif
		return rv;
	}
	
	rv = CAN_SetMode(MCP_NORMAL);
	// here we allow only standard Ids CAN_ANTRIEB242 CAN_ANTRIEB245 CAN_ANTRIEB442
	if (rv != CAN_OK)return rv;
	pinMode(CAN0_INT, INPUT);								// Configuring pin for /INT input
	long mask = ((long)0x7FF) << 16;

	rv = CAN0.init_Mask(0, 0, mask);      // there are 2 mask in mcp2515, you need to set both of them
	if (rv != CAN_OK) {
#ifdef MCP_STDERR
		MCP_STDERR.print("CAN0.init_Mask(0, 0, ((long)0x7ff) error:");
		MCP_STDERR.println(rv);
#endif
		return rv;
	}
	CAN0.init_Filt(0, 0, ((long)CAN_ANTRIEB242) << 16);
	CAN0.init_Filt(1, 0, ((long)CAN_ANTRIEB245) << 16);

	CAN0.init_Mask(1, 0, ((long)0x7FF) << 16); // only address containing 0x40 are allowed, 0x640, 0x440, 0x240, 0x241,0x24F,...
	CAN0.init_Filt(2, 0, ((long)CAN_ANTRIEB242) << 16);
	CAN0.init_Filt(3, 0, ((long)CAN_ANTRIEB245) << 16);
	CAN0.init_Filt(4, 0, ((long)CAN_ANTRIEB442) << 16);
	CAN0.init_Filt(5, 0, ((long)CAN_ANTRIEB442) << 16);
	CAN0.init_Filt(6, 0, ((long)CAN_ANTRIEB442) << 16);
	// there are 6 filter in mcp2515
	
	return rv;
}
|—————Node:{ Text: {
|—————Node:declaration Text: int retries = 1;
|——————Node:primitive_type Text: int
|——————Node:init_declarator Text: retries = 1
|———————Node:identifier Text: retries
|———————Node:= Text: =
|———————Node:number_literal Text: 1
|——————Node:; Text: ;
|—————Node:declaration Text: INT8U rv = MCP2515_FAIL;
|——————Node:type_identifier Text: INT8U
|——————Node:init_declarator Text: rv = MCP2515_FAIL
|———————Node:identifier Text: rv
|———————Node:= Text: =
|———————Node:identifier Text: MCP2515_FAIL
|——————Node:; Text: ;
|—————Node:for_statement Text: for (int r = 0; r < retries; r++) {
		if (CAN0.begin(MCP_STDEXT, CAN_500KBPS, MCP_8MHZ) == CAN_OK) {
			rv = MCP2515_OK;
			break;
		}
		else delay(100);
	}
|——————Node:for Text: for
|——————Node:( Text: (
|——————Node:declaration Text: int r = 0;
|———————Node:primitive_type Text: int
|———————Node:init_declarator Text: r = 0
|————————Node:identifier Text: r
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:binary_expression Text: r < retries
|———————Node:identifier Text: r
|———————Node:< Text: <
|———————Node:identifier Text: retries
|——————Node:; Text: ;
|——————Node:update_expression Text: r++
|———————Node:identifier Text: r
|———————Node:++ Text: ++
|——————Node:) Text: )
|——————Node:compound_statement Text: {
		if (CAN0.begin(MCP_STDEXT, CAN_500KBPS, MCP_8MHZ) == CAN_OK) {
			rv = MCP2515_OK;
			break;
		}
		else delay(100);
	}
|———————Node:{ Text: {
|———————Node:if_statement Text: if (CAN0.begin(MCP_STDEXT, CAN_500KBPS, MCP_8MHZ) == CAN_OK) {
			rv = MCP2515_OK;
			break;
		}
		else delay(100);
|————————Node:if Text: if
|————————Node:condition_clause Text: (CAN0.begin(MCP_STDEXT, CAN_500KBPS, MCP_8MHZ) == CAN_OK)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: CAN0.begin(MCP_STDEXT, CAN_500KBPS, MCP_8MHZ) == CAN_OK
|——————————Node:call_expression Text: CAN0.begin(MCP_STDEXT, CAN_500KBPS, MCP_8MHZ)
|———————————Node:field_expression Text: CAN0.begin
|————————————Node:identifier Text: CAN0
|————————————Node:. Text: .
|————————————Node:field_identifier Text: begin
|———————————Node:argument_list Text: (MCP_STDEXT, CAN_500KBPS, MCP_8MHZ)
|————————————Node:( Text: (
|————————————Node:identifier Text: MCP_STDEXT
|————————————Node:, Text: ,
|————————————Node:identifier Text: CAN_500KBPS
|————————————Node:, Text: ,
|————————————Node:identifier Text: MCP_8MHZ
|————————————Node:) Text: )
|——————————Node:== Text: ==
|——————————Node:identifier Text: CAN_OK
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
			rv = MCP2515_OK;
			break;
		}
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: rv = MCP2515_OK;
|——————————Node:assignment_expression Text: rv = MCP2515_OK
|———————————Node:identifier Text: rv
|———————————Node:= Text: =
|———————————Node:identifier Text: MCP2515_OK
|——————————Node:; Text: ;
|—————————Node:break_statement Text: break;
|——————————Node:break Text: break
|——————————Node:; Text: ;
|—————————Node:} Text: }
|————————Node:else_clause Text: else delay(100);
|—————————Node:else Text: else
|—————————Node:expression_statement Text: delay(100);
|——————————Node:call_expression Text: delay(100)
|———————————Node:identifier Text: delay
|———————————Node:argument_list Text: (100)
|————————————Node:( Text: (
|————————————Node:number_literal Text: 100
|————————————Node:) Text: )
|——————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:if_statement Text: if (rv == MCP2515_FAIL) {
#ifdef MCP_STDERR
		MCP_STDERR.println("MCP2515_FAIL");
#endif
#ifdef DEBUGSERIAL
		DEBUGSERIAL.println("MCP2515_FAIL");
#endif
		return rv;
	}
|——————Node:if Text: if
|——————Node:condition_clause Text: (rv == MCP2515_FAIL)
|———————Node:( Text: (
|———————Node:binary_expression Text: rv == MCP2515_FAIL
|————————Node:identifier Text: rv
|————————Node:== Text: ==
|————————Node:identifier Text: MCP2515_FAIL
|———————Node:) Text: )
|——————Node:compound_statement Text: {
#ifdef MCP_STDERR
		MCP_STDERR.println("MCP2515_FAIL");
#endif
#ifdef DEBUGSERIAL
		DEBUGSERIAL.println("MCP2515_FAIL");
#endif
		return rv;
	}
|———————Node:{ Text: {
|———————Node:preproc_ifdef Text: #ifdef MCP_STDERR
		MCP_STDERR.println("MCP2515_FAIL");
#endif
|————————Node:#ifdef Text: #ifdef
|————————Node:identifier Text: MCP_STDERR
|————————Node:expression_statement Text: MCP_STDERR.println("MCP2515_FAIL");
|—————————Node:call_expression Text: MCP_STDERR.println("MCP2515_FAIL")
|——————————Node:field_expression Text: MCP_STDERR.println
|———————————Node:identifier Text: MCP_STDERR
|———————————Node:. Text: .
|———————————Node:field_identifier Text: println
|——————————Node:argument_list Text: ("MCP2515_FAIL")
|———————————Node:( Text: (
|———————————Node:string_literal Text: "MCP2515_FAIL"
|————————————Node:" Text: "
|————————————Node:string_content Text: MCP2515_FAIL
|————————————Node:" Text: "
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:#endif Text: #endif
|———————Node:preproc_ifdef Text: #ifdef DEBUGSERIAL
		DEBUGSERIAL.println("MCP2515_FAIL");
#endif
|————————Node:#ifdef Text: #ifdef
|————————Node:identifier Text: DEBUGSERIAL
|————————Node:expression_statement Text: DEBUGSERIAL.println("MCP2515_FAIL");
|—————————Node:call_expression Text: DEBUGSERIAL.println("MCP2515_FAIL")
|——————————Node:field_expression Text: DEBUGSERIAL.println
|———————————Node:identifier Text: DEBUGSERIAL
|———————————Node:. Text: .
|———————————Node:field_identifier Text: println
|——————————Node:argument_list Text: ("MCP2515_FAIL")
|———————————Node:( Text: (
|———————————Node:string_literal Text: "MCP2515_FAIL"
|————————————Node:" Text: "
|————————————Node:string_content Text: MCP2515_FAIL
|————————————Node:" Text: "
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:#endif Text: #endif
|———————Node:return_statement Text: return rv;
|————————Node:return Text: return
|————————Node:identifier Text: rv
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:expression_statement Text: rv = CAN_SetMode(MCP_NORMAL);
|——————Node:assignment_expression Text: rv = CAN_SetMode(MCP_NORMAL)
|———————Node:identifier Text: rv
|———————Node:= Text: =
|———————Node:call_expression Text: CAN_SetMode(MCP_NORMAL)
|————————Node:identifier Text: CAN_SetMode
|————————Node:argument_list Text: (MCP_NORMAL)
|—————————Node:( Text: (
|—————————Node:identifier Text: MCP_NORMAL
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment Text: // here we allow only standard Ids CAN_ANTRIEB242 CAN_ANTRIEB245 CAN_ANTRIEB442
|—————Node:if_statement Text: if (rv != CAN_OK)return rv;
|——————Node:if Text: if
|——————Node:condition_clause Text: (rv != CAN_OK)
|———————Node:( Text: (
|———————Node:binary_expression Text: rv != CAN_OK
|————————Node:identifier Text: rv
|————————Node:!= Text: !=
|————————Node:identifier Text: CAN_OK
|———————Node:) Text: )
|——————Node:return_statement Text: return rv;
|———————Node:return Text: return
|———————Node:identifier Text: rv
|———————Node:; Text: ;
|—————Node:expression_statement Text: pinMode(CAN0_INT, INPUT);
|——————Node:call_expression Text: pinMode(CAN0_INT, INPUT)
|———————Node:identifier Text: pinMode
|———————Node:argument_list Text: (CAN0_INT, INPUT)
|————————Node:( Text: (
|————————Node:identifier Text: CAN0_INT
|————————Node:, Text: ,
|————————Node:identifier Text: INPUT
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment Text: // Configuring pin for /INT input
|—————Node:declaration Text: long mask = ((long)0x7FF) << 16;
|——————Node:sized_type_specifier Text: long
|———————Node:long Text: long
|——————Node:init_declarator Text: mask = ((long)0x7FF) << 16
|———————Node:identifier Text: mask
|———————Node:= Text: =
|———————Node:binary_expression Text: ((long)0x7FF) << 16
|————————Node:parenthesized_expression Text: ((long)0x7FF)
|—————————Node:( Text: (
|—————————Node:cast_expression Text: (long)0x7FF
|——————————Node:( Text: (
|——————————Node:type_descriptor Text: long
|———————————Node:sized_type_specifier Text: long
|————————————Node:long Text: long
|——————————Node:) Text: )
|——————————Node:number_literal Text: 0x7FF
|—————————Node:) Text: )
|————————Node:<< Text: <<
|————————Node:number_literal Text: 16
|——————Node:; Text: ;
|—————Node:expression_statement Text: rv = CAN0.init_Mask(0, 0, mask);
|——————Node:assignment_expression Text: rv = CAN0.init_Mask(0, 0, mask)
|———————Node:identifier Text: rv
|———————Node:= Text: =
|———————Node:call_expression Text: CAN0.init_Mask(0, 0, mask)
|————————Node:field_expression Text: CAN0.init_Mask
|—————————Node:identifier Text: CAN0
|—————————Node:. Text: .
|—————————Node:field_identifier Text: init_Mask
|————————Node:argument_list Text: (0, 0, mask)
|—————————Node:( Text: (
|—————————Node:number_literal Text: 0
|—————————Node:, Text: ,
|—————————Node:number_literal Text: 0
|—————————Node:, Text: ,
|—————————Node:identifier Text: mask
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment Text: // there are 2 mask in mcp2515, you need to set both of them
|—————Node:if_statement Text: if (rv != CAN_OK) {
#ifdef MCP_STDERR
		MCP_STDERR.print("CAN0.init_Mask(0, 0, ((long)0x7ff) error:");
		MCP_STDERR.println(rv);
#endif
		return rv;
	}
|——————Node:if Text: if
|——————Node:condition_clause Text: (rv != CAN_OK)
|———————Node:( Text: (
|———————Node:binary_expression Text: rv != CAN_OK
|————————Node:identifier Text: rv
|————————Node:!= Text: !=
|————————Node:identifier Text: CAN_OK
|———————Node:) Text: )
|——————Node:compound_statement Text: {
#ifdef MCP_STDERR
		MCP_STDERR.print("CAN0.init_Mask(0, 0, ((long)0x7ff) error:");
		MCP_STDERR.println(rv);
#endif
		return rv;
	}
|———————Node:{ Text: {
|———————Node:preproc_ifdef Text: #ifdef MCP_STDERR
		MCP_STDERR.print("CAN0.init_Mask(0, 0, ((long)0x7ff) error:");
		MCP_STDERR.println(rv);
#endif
|————————Node:#ifdef Text: #ifdef
|————————Node:identifier Text: MCP_STDERR
|————————Node:expression_statement Text: MCP_STDERR.print("CAN0.init_Mask(0, 0, ((long)0x7ff) error:");
|—————————Node:call_expression Text: MCP_STDERR.print("CAN0.init_Mask(0, 0, ((long)0x7ff) error:")
|——————————Node:field_expression Text: MCP_STDERR.print
|———————————Node:identifier Text: MCP_STDERR
|———————————Node:. Text: .
|———————————Node:field_identifier Text: print
|——————————Node:argument_list Text: ("CAN0.init_Mask(0, 0, ((long)0x7ff) error:")
|———————————Node:( Text: (
|———————————Node:string_literal Text: "CAN0.init_Mask(0, 0, ((long)0x7ff) error:"
|————————————Node:" Text: "
|————————————Node:string_content Text: CAN0.init_Mask(0, 0, ((long)0x7ff) error:
|————————————Node:" Text: "
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: MCP_STDERR.println(rv);
|—————————Node:call_expression Text: MCP_STDERR.println(rv)
|——————————Node:field_expression Text: MCP_STDERR.println
|———————————Node:identifier Text: MCP_STDERR
|———————————Node:. Text: .
|———————————Node:field_identifier Text: println
|——————————Node:argument_list Text: (rv)
|———————————Node:( Text: (
|———————————Node:identifier Text: rv
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:#endif Text: #endif
|———————Node:return_statement Text: return rv;
|————————Node:return Text: return
|————————Node:identifier Text: rv
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:expression_statement Text: CAN0.init_Filt(0, 0, ((long)CAN_ANTRIEB242) << 16);
|——————Node:call_expression Text: CAN0.init_Filt(0, 0, ((long)CAN_ANTRIEB242) << 16)
|———————Node:field_expression Text: CAN0.init_Filt
|————————Node:identifier Text: CAN0
|————————Node:. Text: .
|————————Node:field_identifier Text: init_Filt
|———————Node:argument_list Text: (0, 0, ((long)CAN_ANTRIEB242) << 16)
|————————Node:( Text: (
|————————Node:number_literal Text: 0
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:, Text: ,
|————————Node:binary_expression Text: ((long)CAN_ANTRIEB242) << 16
|—————————Node:parenthesized_expression Text: ((long)CAN_ANTRIEB242)
|——————————Node:( Text: (
|——————————Node:cast_expression Text: (long)CAN_ANTRIEB242
|———————————Node:( Text: (
|———————————Node:type_descriptor Text: long
|————————————Node:sized_type_specifier Text: long
|—————————————Node:long Text: long
|———————————Node:) Text: )
|———————————Node:identifier Text: CAN_ANTRIEB242
|——————————Node:) Text: )
|—————————Node:<< Text: <<
|—————————Node:number_literal Text: 16
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: CAN0.init_Filt(1, 0, ((long)CAN_ANTRIEB245) << 16);
|——————Node:call_expression Text: CAN0.init_Filt(1, 0, ((long)CAN_ANTRIEB245) << 16)
|———————Node:field_expression Text: CAN0.init_Filt
|————————Node:identifier Text: CAN0
|————————Node:. Text: .
|————————Node:field_identifier Text: init_Filt
|———————Node:argument_list Text: (1, 0, ((long)CAN_ANTRIEB245) << 16)
|————————Node:( Text: (
|————————Node:number_literal Text: 1
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:, Text: ,
|————————Node:binary_expression Text: ((long)CAN_ANTRIEB245) << 16
|—————————Node:parenthesized_expression Text: ((long)CAN_ANTRIEB245)
|——————————Node:( Text: (
|——————————Node:cast_expression Text: (long)CAN_ANTRIEB245
|———————————Node:( Text: (
|———————————Node:type_descriptor Text: long
|————————————Node:sized_type_specifier Text: long
|—————————————Node:long Text: long
|———————————Node:) Text: )
|———————————Node:identifier Text: CAN_ANTRIEB245
|——————————Node:) Text: )
|—————————Node:<< Text: <<
|—————————Node:number_literal Text: 16
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: CAN0.init_Mask(1, 0, ((long)0x7FF) << 16);
|——————Node:call_expression Text: CAN0.init_Mask(1, 0, ((long)0x7FF) << 16)
|———————Node:field_expression Text: CAN0.init_Mask
|————————Node:identifier Text: CAN0
|————————Node:. Text: .
|————————Node:field_identifier Text: init_Mask
|———————Node:argument_list Text: (1, 0, ((long)0x7FF) << 16)
|————————Node:( Text: (
|————————Node:number_literal Text: 1
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:, Text: ,
|————————Node:binary_expression Text: ((long)0x7FF) << 16
|—————————Node:parenthesized_expression Text: ((long)0x7FF)
|——————————Node:( Text: (
|——————————Node:cast_expression Text: (long)0x7FF
|———————————Node:( Text: (
|———————————Node:type_descriptor Text: long
|————————————Node:sized_type_specifier Text: long
|—————————————Node:long Text: long
|———————————Node:) Text: )
|———————————Node:number_literal Text: 0x7FF
|——————————Node:) Text: )
|—————————Node:<< Text: <<
|—————————Node:number_literal Text: 16
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment Text: // only address containing 0x40 are allowed, 0x640, 0x440, 0x240, 0x241,0x24F,...
|—————Node:expression_statement Text: CAN0.init_Filt(2, 0, ((long)CAN_ANTRIEB242) << 16);
|——————Node:call_expression Text: CAN0.init_Filt(2, 0, ((long)CAN_ANTRIEB242) << 16)
|———————Node:field_expression Text: CAN0.init_Filt
|————————Node:identifier Text: CAN0
|————————Node:. Text: .
|————————Node:field_identifier Text: init_Filt
|———————Node:argument_list Text: (2, 0, ((long)CAN_ANTRIEB242) << 16)
|————————Node:( Text: (
|————————Node:number_literal Text: 2
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:, Text: ,
|————————Node:binary_expression Text: ((long)CAN_ANTRIEB242) << 16
|—————————Node:parenthesized_expression Text: ((long)CAN_ANTRIEB242)
|——————————Node:( Text: (
|——————————Node:cast_expression Text: (long)CAN_ANTRIEB242
|———————————Node:( Text: (
|———————————Node:type_descriptor Text: long
|————————————Node:sized_type_specifier Text: long
|—————————————Node:long Text: long
|———————————Node:) Text: )
|———————————Node:identifier Text: CAN_ANTRIEB242
|——————————Node:) Text: )
|—————————Node:<< Text: <<
|—————————Node:number_literal Text: 16
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: CAN0.init_Filt(3, 0, ((long)CAN_ANTRIEB245) << 16);
|——————Node:call_expression Text: CAN0.init_Filt(3, 0, ((long)CAN_ANTRIEB245) << 16)
|———————Node:field_expression Text: CAN0.init_Filt
|————————Node:identifier Text: CAN0
|————————Node:. Text: .
|————————Node:field_identifier Text: init_Filt
|———————Node:argument_list Text: (3, 0, ((long)CAN_ANTRIEB245) << 16)
|————————Node:( Text: (
|————————Node:number_literal Text: 3
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:, Text: ,
|————————Node:binary_expression Text: ((long)CAN_ANTRIEB245) << 16
|—————————Node:parenthesized_expression Text: ((long)CAN_ANTRIEB245)
|——————————Node:( Text: (
|——————————Node:cast_expression Text: (long)CAN_ANTRIEB245
|———————————Node:( Text: (
|———————————Node:type_descriptor Text: long
|————————————Node:sized_type_specifier Text: long
|—————————————Node:long Text: long
|———————————Node:) Text: )
|———————————Node:identifier Text: CAN_ANTRIEB245
|——————————Node:) Text: )
|—————————Node:<< Text: <<
|—————————Node:number_literal Text: 16
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: CAN0.init_Filt(4, 0, ((long)CAN_ANTRIEB442) << 16);
|——————Node:call_expression Text: CAN0.init_Filt(4, 0, ((long)CAN_ANTRIEB442) << 16)
|———————Node:field_expression Text: CAN0.init_Filt
|————————Node:identifier Text: CAN0
|————————Node:. Text: .
|————————Node:field_identifier Text: init_Filt
|———————Node:argument_list Text: (4, 0, ((long)CAN_ANTRIEB442) << 16)
|————————Node:( Text: (
|————————Node:number_literal Text: 4
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:, Text: ,
|————————Node:binary_expression Text: ((long)CAN_ANTRIEB442) << 16
|—————————Node:parenthesized_expression Text: ((long)CAN_ANTRIEB442)
|——————————Node:( Text: (
|——————————Node:cast_expression Text: (long)CAN_ANTRIEB442
|———————————Node:( Text: (
|———————————Node:type_descriptor Text: long
|————————————Node:sized_type_specifier Text: long
|—————————————Node:long Text: long
|———————————Node:) Text: )
|———————————Node:identifier Text: CAN_ANTRIEB442
|——————————Node:) Text: )
|—————————Node:<< Text: <<
|—————————Node:number_literal Text: 16
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: CAN0.init_Filt(5, 0, ((long)CAN_ANTRIEB442) << 16);
|——————Node:call_expression Text: CAN0.init_Filt(5, 0, ((long)CAN_ANTRIEB442) << 16)
|———————Node:field_expression Text: CAN0.init_Filt
|————————Node:identifier Text: CAN0
|————————Node:. Text: .
|————————Node:field_identifier Text: init_Filt
|———————Node:argument_list Text: (5, 0, ((long)CAN_ANTRIEB442) << 16)
|————————Node:( Text: (
|————————Node:number_literal Text: 5
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:, Text: ,
|————————Node:binary_expression Text: ((long)CAN_ANTRIEB442) << 16
|—————————Node:parenthesized_expression Text: ((long)CAN_ANTRIEB442)
|——————————Node:( Text: (
|——————————Node:cast_expression Text: (long)CAN_ANTRIEB442
|———————————Node:( Text: (
|———————————Node:type_descriptor Text: long
|————————————Node:sized_type_specifier Text: long
|—————————————Node:long Text: long
|———————————Node:) Text: )
|———————————Node:identifier Text: CAN_ANTRIEB442
|——————————Node:) Text: )
|—————————Node:<< Text: <<
|—————————Node:number_literal Text: 16
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: CAN0.init_Filt(6, 0, ((long)CAN_ANTRIEB442) << 16);
|——————Node:call_expression Text: CAN0.init_Filt(6, 0, ((long)CAN_ANTRIEB442) << 16)
|———————Node:field_expression Text: CAN0.init_Filt
|————————Node:identifier Text: CAN0
|————————Node:. Text: .
|————————Node:field_identifier Text: init_Filt
|———————Node:argument_list Text: (6, 0, ((long)CAN_ANTRIEB442) << 16)
|————————Node:( Text: (
|————————Node:number_literal Text: 6
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:, Text: ,
|————————Node:binary_expression Text: ((long)CAN_ANTRIEB442) << 16
|—————————Node:parenthesized_expression Text: ((long)CAN_ANTRIEB442)
|——————————Node:( Text: (
|——————————Node:cast_expression Text: (long)CAN_ANTRIEB442
|———————————Node:( Text: (
|———————————Node:type_descriptor Text: long
|————————————Node:sized_type_specifier Text: long
|—————————————Node:long Text: long
|———————————Node:) Text: )
|———————————Node:identifier Text: CAN_ANTRIEB442
|——————————Node:) Text: )
|—————————Node:<< Text: <<
|—————————Node:number_literal Text: 16
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment Text: // there are 6 filter in mcp2515
|—————Node:return_statement Text: return rv;
|——————Node:return Text: return
|——————Node:identifier Text: rv
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:function_definition Text: INT8U send442() {
	byte sndStat = CAN_FAIL;
	//sndStat = CAN_SetMode(MCP_NORMAL);
	canbuf[0] = 0x02;// ACD_1  2 = Normal_Prog_aktiv
	sndStat = CAN0.sendMsgBuf(CAN_ANTRIEB442, 1, canbuf);
	//byte sndStat2 = CAN_SetMode(MCP_LISTENONLY);
	return sndStat; // never sends
}
|————Node:type_identifier Text: INT8U
|————Node:function_declarator Text: send442()
|—————Node:identifier Text: send442
|—————Node:parameter_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:compound_statement Text: {
	byte sndStat = CAN_FAIL;
	//sndStat = CAN_SetMode(MCP_NORMAL);
	canbuf[0] = 0x02;// ACD_1  2 = Normal_Prog_aktiv
	sndStat = CAN0.sendMsgBuf(CAN_ANTRIEB442, 1, canbuf);
	//byte sndStat2 = CAN_SetMode(MCP_LISTENONLY);
	return sndStat; // never sends
}
|—————Node:{ Text: {
|—————Node:declaration Text: byte sndStat = CAN_FAIL;
|——————Node:type_identifier Text: byte
|——————Node:init_declarator Text: sndStat = CAN_FAIL
|———————Node:identifier Text: sndStat
|———————Node:= Text: =
|———————Node:identifier Text: CAN_FAIL
|——————Node:; Text: ;
|—————Node:comment Text: //sndStat = CAN_SetMode(MCP_NORMAL);
|—————Node:expression_statement Text: canbuf[0] = 0x02;
|——————Node:assignment_expression Text: canbuf[0] = 0x02
|———————Node:subscript_expression Text: canbuf[0]
|————————Node:identifier Text: canbuf
|————————Node:subscript_argument_list Text: [0]
|—————————Node:[ Text: [
|—————————Node:number_literal Text: 0
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:number_literal Text: 0x02
|——————Node:; Text: ;
|—————Node:comment Text: // ACD_1  2 = Normal_Prog_aktiv
|—————Node:expression_statement Text: sndStat = CAN0.sendMsgBuf(CAN_ANTRIEB442, 1, canbuf);
|——————Node:assignment_expression Text: sndStat = CAN0.sendMsgBuf(CAN_ANTRIEB442, 1, canbuf)
|———————Node:identifier Text: sndStat
|———————Node:= Text: =
|———————Node:call_expression Text: CAN0.sendMsgBuf(CAN_ANTRIEB442, 1, canbuf)
|————————Node:field_expression Text: CAN0.sendMsgBuf
|—————————Node:identifier Text: CAN0
|—————————Node:. Text: .
|—————————Node:field_identifier Text: sendMsgBuf
|————————Node:argument_list Text: (CAN_ANTRIEB442, 1, canbuf)
|—————————Node:( Text: (
|—————————Node:identifier Text: CAN_ANTRIEB442
|—————————Node:, Text: ,
|—————————Node:number_literal Text: 1
|—————————Node:, Text: ,
|—————————Node:identifier Text: canbuf
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment Text: //byte sndStat2 = CAN_SetMode(MCP_LISTENONLY);
|—————Node:return_statement Text: return sndStat;
|——————Node:return Text: return
|——————Node:identifier Text: sndStat
|——————Node:; Text: ;
|—————Node:comment Text: // never sends
|—————Node:} Text: }
|———Node:function_definition Text: INT8U sendBothPrivateCan(EngineMsmtU& _Engine) {
	byte sndStat = CAN_FAIL;
	//sndStat = CAN_SetMode(MCP_NORMAL);

	//if (sndStat != CAN_OK) return sndStat;
	// use address CAN_PRIVATE1, must not interfere
	sndStat = CAN_SendMsg(CAN_PRIVATE1, 8, (byte*)&_Engine.b[0]);
	if (sndStat != CAN_OK) return sndStat;
	sndStat = CAN_SendMsg(CAN_PRIVATE2, 8, (byte*)&_Engine.b[8]);
	if (sndStat != CAN_OK) return sndStat;
	//byte sndStat2 = CAN_SetMode(MCP_LISTENONLY);
	return sndStat;
}
|————Node:type_identifier Text: INT8U
|————Node:function_declarator Text: sendBothPrivateCan(EngineMsmtU& _Engine)
|—————Node:identifier Text: sendBothPrivateCan
|—————Node:parameter_list Text: (EngineMsmtU& _Engine)
|——————Node:( Text: (
|——————Node:parameter_declaration Text: EngineMsmtU& _Engine
|———————Node:type_identifier Text: EngineMsmtU
|———————Node:reference_declarator Text: & _Engine
|————————Node:& Text: &
|————————Node:identifier Text: _Engine
|——————Node:) Text: )
|————Node:compound_statement Text: {
	byte sndStat = CAN_FAIL;
	//sndStat = CAN_SetMode(MCP_NORMAL);

	//if (sndStat != CAN_OK) return sndStat;
	// use address CAN_PRIVATE1, must not interfere
	sndStat = CAN_SendMsg(CAN_PRIVATE1, 8, (byte*)&_Engine.b[0]);
	if (sndStat != CAN_OK) return sndStat;
	sndStat = CAN_SendMsg(CAN_PRIVATE2, 8, (byte*)&_Engine.b[8]);
	if (sndStat != CAN_OK) return sndStat;
	//byte sndStat2 = CAN_SetMode(MCP_LISTENONLY);
	return sndStat;
}
|—————Node:{ Text: {
|—————Node:declaration Text: byte sndStat = CAN_FAIL;
|——————Node:type_identifier Text: byte
|——————Node:init_declarator Text: sndStat = CAN_FAIL
|———————Node:identifier Text: sndStat
|———————Node:= Text: =
|———————Node:identifier Text: CAN_FAIL
|——————Node:; Text: ;
|—————Node:comment Text: //sndStat = CAN_SetMode(MCP_NORMAL);
|—————Node:comment Text: //if (sndStat != CAN_OK) return sndStat;
|—————Node:comment Text: // use address CAN_PRIVATE1, must not interfere
|—————Node:expression_statement Text: sndStat = CAN_SendMsg(CAN_PRIVATE1, 8, (byte*)&_Engine.b[0]);
|——————Node:assignment_expression Text: sndStat = CAN_SendMsg(CAN_PRIVATE1, 8, (byte*)&_Engine.b[0])
|———————Node:identifier Text: sndStat
|———————Node:= Text: =
|———————Node:call_expression Text: CAN_SendMsg(CAN_PRIVATE1, 8, (byte*)&_Engine.b[0])
|————————Node:identifier Text: CAN_SendMsg
|————————Node:argument_list Text: (CAN_PRIVATE1, 8, (byte*)&_Engine.b[0])
|—————————Node:( Text: (
|—————————Node:identifier Text: CAN_PRIVATE1
|—————————Node:, Text: ,
|—————————Node:number_literal Text: 8
|—————————Node:, Text: ,
|—————————Node:cast_expression Text: (byte*)&_Engine.b[0]
|——————————Node:( Text: (
|——————————Node:type_descriptor Text: byte*
|———————————Node:type_identifier Text: byte
|———————————Node:abstract_pointer_declarator Text: *
|————————————Node:* Text: *
|——————————Node:) Text: )
|——————————Node:pointer_expression Text: &_Engine.b[0]
|———————————Node:& Text: &
|———————————Node:subscript_expression Text: _Engine.b[0]
|————————————Node:field_expression Text: _Engine.b
|—————————————Node:identifier Text: _Engine
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: b
|————————————Node:subscript_argument_list Text: [0]
|—————————————Node:[ Text: [
|—————————————Node:number_literal Text: 0
|—————————————Node:] Text: ]
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (sndStat != CAN_OK) return sndStat;
|——————Node:if Text: if
|——————Node:condition_clause Text: (sndStat != CAN_OK)
|———————Node:( Text: (
|———————Node:binary_expression Text: sndStat != CAN_OK
|————————Node:identifier Text: sndStat
|————————Node:!= Text: !=
|————————Node:identifier Text: CAN_OK
|———————Node:) Text: )
|——————Node:return_statement Text: return sndStat;
|———————Node:return Text: return
|———————Node:identifier Text: sndStat
|———————Node:; Text: ;
|—————Node:expression_statement Text: sndStat = CAN_SendMsg(CAN_PRIVATE2, 8, (byte*)&_Engine.b[8]);
|——————Node:assignment_expression Text: sndStat = CAN_SendMsg(CAN_PRIVATE2, 8, (byte*)&_Engine.b[8])
|———————Node:identifier Text: sndStat
|———————Node:= Text: =
|———————Node:call_expression Text: CAN_SendMsg(CAN_PRIVATE2, 8, (byte*)&_Engine.b[8])
|————————Node:identifier Text: CAN_SendMsg
|————————Node:argument_list Text: (CAN_PRIVATE2, 8, (byte*)&_Engine.b[8])
|—————————Node:( Text: (
|—————————Node:identifier Text: CAN_PRIVATE2
|—————————Node:, Text: ,
|—————————Node:number_literal Text: 8
|—————————Node:, Text: ,
|—————————Node:cast_expression Text: (byte*)&_Engine.b[8]
|——————————Node:( Text: (
|——————————Node:type_descriptor Text: byte*
|———————————Node:type_identifier Text: byte
|———————————Node:abstract_pointer_declarator Text: *
|————————————Node:* Text: *
|——————————Node:) Text: )
|——————————Node:pointer_expression Text: &_Engine.b[8]
|———————————Node:& Text: &
|———————————Node:subscript_expression Text: _Engine.b[8]
|————————————Node:field_expression Text: _Engine.b
|—————————————Node:identifier Text: _Engine
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: b
|————————————Node:subscript_argument_list Text: [8]
|—————————————Node:[ Text: [
|—————————————Node:number_literal Text: 8
|—————————————Node:] Text: ]
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (sndStat != CAN_OK) return sndStat;
|——————Node:if Text: if
|——————Node:condition_clause Text: (sndStat != CAN_OK)
|———————Node:( Text: (
|———————Node:binary_expression Text: sndStat != CAN_OK
|————————Node:identifier Text: sndStat
|————————Node:!= Text: !=
|————————Node:identifier Text: CAN_OK
|———————Node:) Text: )
|——————Node:return_statement Text: return sndStat;
|———————Node:return Text: return
|———————Node:identifier Text: sndStat
|———————Node:; Text: ;
|—————Node:comment Text: //byte sndStat2 = CAN_SetMode(MCP_LISTENONLY);
|—————Node:return_statement Text: return sndStat;
|——————Node:return Text: return
|——————Node:identifier Text: sndStat
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:declaration Text: uint16_t lastnmot = 0;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: lastnmot = 0
|—————Node:identifier Text: lastnmot
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: int nsame = 0;
|————Node:primitive_type Text: int
|————Node:init_declarator Text: nsame = 0
|—————Node:identifier Text: nsame
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:function_definition Text: INT8U getCan242(long duration, MOTOR_1& can242) {
	INT8U sndStat = CAN_OK;
	sndStat = CAN0.setMode(MCP_LISTENONLY);
	if (sndStat != CAN_OK) return sndStat;
	long start = millis();
	bool receivedintime = false;
	do {
		if (!digitalRead(CAN0_INT))                         // If CAN0_INT pin is low, read receive buffer
		{
			sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);
			if (sndStat != CAN_OK) continue;
			if (rxId == 0x242) {
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("Antrieb(0x242):");
				if (sizeof(MOTOR_1) != 8)DEBUGSERIAL.println("FATAL: MOTOR_1 NOT sizeof(8)");
#endif
				if (len < 8) continue;
				memcpy(&can242, canbuf, 8);
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("miist=");
				DEBUGSERIAL.print(can242.miist * 100.0 / 255.0);
				DEBUGSERIAL.print(",nmot=");
				DEBUGSERIAL.print(can242.nmot * 0.25);
				DEBUGSERIAL.print(",Wped_fgr=");
				DEBUGSERIAL.print(can242.Wped_fgr * 100.0 / 254.0);
				if (can242.E_lm) DEBUGSERIAL.print("E_lm: HFM Error");
				DEBUGSERIAL.println("");
#endif
				receivedintime = true;
				break;
			}
		}
	} while (millis() - start < duration);

	if (can242.nmot == lastnmot) nsame++;
	else nsame = 0;
	lastnmot = can242.nmot;
	sndStat = CAN0.setMode(MCP_NORMAL);
	//CAN_Spi_UnSelect();
	//Serial.println(nsame);
	if (nsame > 7) {
		can242.nmot = 0;
		can242.Wped_fgr = 0;
		can242.miist = 0;
	}
	if (!receivedintime) {
#ifdef	MCP_STDERR
		MCP_STDERR.println("Timout reading CAN_ANTRIEB242");
#endif
	}
	return sndStat;
}
|————Node:type_identifier Text: INT8U
|————Node:function_declarator Text: getCan242(long duration, MOTOR_1& can242)
|—————Node:identifier Text: getCan242
|—————Node:parameter_list Text: (long duration, MOTOR_1& can242)
|——————Node:( Text: (
|——————Node:parameter_declaration Text: long duration
|———————Node:sized_type_specifier Text: long
|————————Node:long Text: long
|———————Node:identifier Text: duration
|——————Node:, Text: ,
|——————Node:parameter_declaration Text: MOTOR_1& can242
|———————Node:type_identifier Text: MOTOR_1
|———————Node:reference_declarator Text: & can242
|————————Node:& Text: &
|————————Node:identifier Text: can242
|——————Node:) Text: )
|————Node:compound_statement Text: {
	INT8U sndStat = CAN_OK;
	sndStat = CAN0.setMode(MCP_LISTENONLY);
	if (sndStat != CAN_OK) return sndStat;
	long start = millis();
	bool receivedintime = false;
	do {
		if (!digitalRead(CAN0_INT))                         // If CAN0_INT pin is low, read receive buffer
		{
			sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);
			if (sndStat != CAN_OK) continue;
			if (rxId == 0x242) {
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("Antrieb(0x242):");
				if (sizeof(MOTOR_1) != 8)DEBUGSERIAL.println("FATAL: MOTOR_1 NOT sizeof(8)");
#endif
				if (len < 8) continue;
				memcpy(&can242, canbuf, 8);
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("miist=");
				DEBUGSERIAL.print(can242.miist * 100.0 / 255.0);
				DEBUGSERIAL.print(",nmot=");
				DEBUGSERIAL.print(can242.nmot * 0.25);
				DEBUGSERIAL.print(",Wped_fgr=");
				DEBUGSERIAL.print(can242.Wped_fgr * 100.0 / 254.0);
				if (can242.E_lm) DEBUGSERIAL.print("E_lm: HFM Error");
				DEBUGSERIAL.println("");
#endif
				receivedintime = true;
				break;
			}
		}
	} while (millis() - start < duration);

	if (can242.nmot == lastnmot) nsame++;
	else nsame = 0;
	lastnmot = can242.nmot;
	sndStat = CAN0.setMode(MCP_NORMAL);
	//CAN_Spi_UnSelect();
	//Serial.println(nsame);
	if (nsame > 7) {
		can242.nmot = 0;
		can242.Wped_fgr = 0;
		can242.miist = 0;
	}
	if (!receivedintime) {
#ifdef	MCP_STDERR
		MCP_STDERR.println("Timout reading CAN_ANTRIEB242");
#endif
	}
	return sndStat;
}
|—————Node:{ Text: {
|—————Node:declaration Text: INT8U sndStat = CAN_OK;
|——————Node:type_identifier Text: INT8U
|——————Node:init_declarator Text: sndStat = CAN_OK
|———————Node:identifier Text: sndStat
|———————Node:= Text: =
|———————Node:identifier Text: CAN_OK
|——————Node:; Text: ;
|—————Node:expression_statement Text: sndStat = CAN0.setMode(MCP_LISTENONLY);
|——————Node:assignment_expression Text: sndStat = CAN0.setMode(MCP_LISTENONLY)
|———————Node:identifier Text: sndStat
|———————Node:= Text: =
|———————Node:call_expression Text: CAN0.setMode(MCP_LISTENONLY)
|————————Node:field_expression Text: CAN0.setMode
|—————————Node:identifier Text: CAN0
|—————————Node:. Text: .
|—————————Node:field_identifier Text: setMode
|————————Node:argument_list Text: (MCP_LISTENONLY)
|—————————Node:( Text: (
|—————————Node:identifier Text: MCP_LISTENONLY
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (sndStat != CAN_OK) return sndStat;
|——————Node:if Text: if
|——————Node:condition_clause Text: (sndStat != CAN_OK)
|———————Node:( Text: (
|———————Node:binary_expression Text: sndStat != CAN_OK
|————————Node:identifier Text: sndStat
|————————Node:!= Text: !=
|————————Node:identifier Text: CAN_OK
|———————Node:) Text: )
|——————Node:return_statement Text: return sndStat;
|———————Node:return Text: return
|———————Node:identifier Text: sndStat
|———————Node:; Text: ;
|—————Node:declaration Text: long start = millis();
|——————Node:sized_type_specifier Text: long
|———————Node:long Text: long
|——————Node:init_declarator Text: start = millis()
|———————Node:identifier Text: start
|———————Node:= Text: =
|———————Node:call_expression Text: millis()
|————————Node:identifier Text: millis
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:declaration Text: bool receivedintime = false;
|——————Node:primitive_type Text: bool
|——————Node:init_declarator Text: receivedintime = false
|———————Node:identifier Text: receivedintime
|———————Node:= Text: =
|———————Node:false Text: false
|——————Node:; Text: ;
|—————Node:do_statement Text: do {
		if (!digitalRead(CAN0_INT))                         // If CAN0_INT pin is low, read receive buffer
		{
			sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);
			if (sndStat != CAN_OK) continue;
			if (rxId == 0x242) {
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("Antrieb(0x242):");
				if (sizeof(MOTOR_1) != 8)DEBUGSERIAL.println("FATAL: MOTOR_1 NOT sizeof(8)");
#endif
				if (len < 8) continue;
				memcpy(&can242, canbuf, 8);
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("miist=");
				DEBUGSERIAL.print(can242.miist * 100.0 / 255.0);
				DEBUGSERIAL.print(",nmot=");
				DEBUGSERIAL.print(can242.nmot * 0.25);
				DEBUGSERIAL.print(",Wped_fgr=");
				DEBUGSERIAL.print(can242.Wped_fgr * 100.0 / 254.0);
				if (can242.E_lm) DEBUGSERIAL.print("E_lm: HFM Error");
				DEBUGSERIAL.println("");
#endif
				receivedintime = true;
				break;
			}
		}
	} while (millis() - start < duration);
|——————Node:do Text: do
|——————Node:compound_statement Text: {
		if (!digitalRead(CAN0_INT))                         // If CAN0_INT pin is low, read receive buffer
		{
			sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);
			if (sndStat != CAN_OK) continue;
			if (rxId == 0x242) {
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("Antrieb(0x242):");
				if (sizeof(MOTOR_1) != 8)DEBUGSERIAL.println("FATAL: MOTOR_1 NOT sizeof(8)");
#endif
				if (len < 8) continue;
				memcpy(&can242, canbuf, 8);
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("miist=");
				DEBUGSERIAL.print(can242.miist * 100.0 / 255.0);
				DEBUGSERIAL.print(",nmot=");
				DEBUGSERIAL.print(can242.nmot * 0.25);
				DEBUGSERIAL.print(",Wped_fgr=");
				DEBUGSERIAL.print(can242.Wped_fgr * 100.0 / 254.0);
				if (can242.E_lm) DEBUGSERIAL.print("E_lm: HFM Error");
				DEBUGSERIAL.println("");
#endif
				receivedintime = true;
				break;
			}
		}
	}
|———————Node:{ Text: {
|———————Node:if_statement Text: if (!digitalRead(CAN0_INT))                         // If CAN0_INT pin is low, read receive buffer
		{
			sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);
			if (sndStat != CAN_OK) continue;
			if (rxId == 0x242) {
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("Antrieb(0x242):");
				if (sizeof(MOTOR_1) != 8)DEBUGSERIAL.println("FATAL: MOTOR_1 NOT sizeof(8)");
#endif
				if (len < 8) continue;
				memcpy(&can242, canbuf, 8);
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("miist=");
				DEBUGSERIAL.print(can242.miist * 100.0 / 255.0);
				DEBUGSERIAL.print(",nmot=");
				DEBUGSERIAL.print(can242.nmot * 0.25);
				DEBUGSERIAL.print(",Wped_fgr=");
				DEBUGSERIAL.print(can242.Wped_fgr * 100.0 / 254.0);
				if (can242.E_lm) DEBUGSERIAL.print("E_lm: HFM Error");
				DEBUGSERIAL.println("");
#endif
				receivedintime = true;
				break;
			}
		}
|————————Node:if Text: if
|————————Node:condition_clause Text: (!digitalRead(CAN0_INT))
|—————————Node:( Text: (
|—————————Node:unary_expression Text: !digitalRead(CAN0_INT)
|——————————Node:! Text: !
|——————————Node:call_expression Text: digitalRead(CAN0_INT)
|———————————Node:identifier Text: digitalRead
|———————————Node:argument_list Text: (CAN0_INT)
|————————————Node:( Text: (
|————————————Node:identifier Text: CAN0_INT
|————————————Node:) Text: )
|—————————Node:) Text: )
|————————Node:comment Text: // If CAN0_INT pin is low, read receive buffer
|————————Node:compound_statement Text: {
			sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);
			if (sndStat != CAN_OK) continue;
			if (rxId == 0x242) {
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("Antrieb(0x242):");
				if (sizeof(MOTOR_1) != 8)DEBUGSERIAL.println("FATAL: MOTOR_1 NOT sizeof(8)");
#endif
				if (len < 8) continue;
				memcpy(&can242, canbuf, 8);
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("miist=");
				DEBUGSERIAL.print(can242.miist * 100.0 / 255.0);
				DEBUGSERIAL.print(",nmot=");
				DEBUGSERIAL.print(can242.nmot * 0.25);
				DEBUGSERIAL.print(",Wped_fgr=");
				DEBUGSERIAL.print(can242.Wped_fgr * 100.0 / 254.0);
				if (can242.E_lm) DEBUGSERIAL.print("E_lm: HFM Error");
				DEBUGSERIAL.println("");
#endif
				receivedintime = true;
				break;
			}
		}
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);
|——————————Node:assignment_expression Text: sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf)
|———————————Node:identifier Text: sndStat
|———————————Node:= Text: =
|———————————Node:call_expression Text: CAN0.readMsgBuf(&rxId, &len, canbuf)
|————————————Node:field_expression Text: CAN0.readMsgBuf
|—————————————Node:identifier Text: CAN0
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: readMsgBuf
|————————————Node:argument_list Text: (&rxId, &len, canbuf)
|—————————————Node:( Text: (
|—————————————Node:pointer_expression Text: &rxId
|——————————————Node:& Text: &
|——————————————Node:identifier Text: rxId
|—————————————Node:, Text: ,
|—————————————Node:pointer_expression Text: &len
|——————————————Node:& Text: &
|——————————————Node:identifier Text: len
|—————————————Node:, Text: ,
|—————————————Node:identifier Text: canbuf
|—————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:if_statement Text: if (sndStat != CAN_OK) continue;
|——————————Node:if Text: if
|——————————Node:condition_clause Text: (sndStat != CAN_OK)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: sndStat != CAN_OK
|————————————Node:identifier Text: sndStat
|————————————Node:!= Text: !=
|————————————Node:identifier Text: CAN_OK
|———————————Node:) Text: )
|——————————Node:continue_statement Text: continue;
|———————————Node:continue Text: continue
|———————————Node:; Text: ;
|—————————Node:if_statement Text: if (rxId == 0x242) {
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("Antrieb(0x242):");
				if (sizeof(MOTOR_1) != 8)DEBUGSERIAL.println("FATAL: MOTOR_1 NOT sizeof(8)");
#endif
				if (len < 8) continue;
				memcpy(&can242, canbuf, 8);
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("miist=");
				DEBUGSERIAL.print(can242.miist * 100.0 / 255.0);
				DEBUGSERIAL.print(",nmot=");
				DEBUGSERIAL.print(can242.nmot * 0.25);
				DEBUGSERIAL.print(",Wped_fgr=");
				DEBUGSERIAL.print(can242.Wped_fgr * 100.0 / 254.0);
				if (can242.E_lm) DEBUGSERIAL.print("E_lm: HFM Error");
				DEBUGSERIAL.println("");
#endif
				receivedintime = true;
				break;
			}
|——————————Node:if Text: if
|——————————Node:condition_clause Text: (rxId == 0x242)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: rxId == 0x242
|————————————Node:identifier Text: rxId
|————————————Node:== Text: ==
|————————————Node:number_literal Text: 0x242
|———————————Node:) Text: )
|——————————Node:compound_statement Text: {
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("Antrieb(0x242):");
				if (sizeof(MOTOR_1) != 8)DEBUGSERIAL.println("FATAL: MOTOR_1 NOT sizeof(8)");
#endif
				if (len < 8) continue;
				memcpy(&can242, canbuf, 8);
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("miist=");
				DEBUGSERIAL.print(can242.miist * 100.0 / 255.0);
				DEBUGSERIAL.print(",nmot=");
				DEBUGSERIAL.print(can242.nmot * 0.25);
				DEBUGSERIAL.print(",Wped_fgr=");
				DEBUGSERIAL.print(can242.Wped_fgr * 100.0 / 254.0);
				if (can242.E_lm) DEBUGSERIAL.print("E_lm: HFM Error");
				DEBUGSERIAL.println("");
#endif
				receivedintime = true;
				break;
			}
|———————————Node:{ Text: {
|———————————Node:preproc_ifdef Text: #ifdef DEBUGSERIAL
				DEBUGSERIAL.print("Antrieb(0x242):");
				if (sizeof(MOTOR_1) != 8)DEBUGSERIAL.println("FATAL: MOTOR_1 NOT sizeof(8)");
#endif
|————————————Node:#ifdef Text: #ifdef
|————————————Node:identifier Text: DEBUGSERIAL
|————————————Node:expression_statement Text: DEBUGSERIAL.print("Antrieb(0x242):");
|—————————————Node:call_expression Text: DEBUGSERIAL.print("Antrieb(0x242):")
|——————————————Node:field_expression Text: DEBUGSERIAL.print
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: print
|——————————————Node:argument_list Text: ("Antrieb(0x242):")
|———————————————Node:( Text: (
|———————————————Node:string_literal Text: "Antrieb(0x242):"
|————————————————Node:" Text: "
|————————————————Node:string_content Text: Antrieb(0x242):
|————————————————Node:" Text: "
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:if_statement Text: if (sizeof(MOTOR_1) != 8)DEBUGSERIAL.println("FATAL: MOTOR_1 NOT sizeof(8)");
|—————————————Node:if Text: if
|—————————————Node:condition_clause Text: (sizeof(MOTOR_1) != 8)
|——————————————Node:( Text: (
|——————————————Node:binary_expression Text: sizeof(MOTOR_1) != 8
|———————————————Node:sizeof_expression Text: sizeof(MOTOR_1)
|————————————————Node:sizeof Text: sizeof
|————————————————Node:parenthesized_expression Text: (MOTOR_1)
|—————————————————Node:( Text: (
|—————————————————Node:identifier Text: MOTOR_1
|—————————————————Node:) Text: )
|———————————————Node:!= Text: !=
|———————————————Node:number_literal Text: 8
|——————————————Node:) Text: )
|—————————————Node:expression_statement Text: DEBUGSERIAL.println("FATAL: MOTOR_1 NOT sizeof(8)");
|——————————————Node:call_expression Text: DEBUGSERIAL.println("FATAL: MOTOR_1 NOT sizeof(8)")
|———————————————Node:field_expression Text: DEBUGSERIAL.println
|————————————————Node:identifier Text: DEBUGSERIAL
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: println
|———————————————Node:argument_list Text: ("FATAL: MOTOR_1 NOT sizeof(8)")
|————————————————Node:( Text: (
|————————————————Node:string_literal Text: "FATAL: MOTOR_1 NOT sizeof(8)"
|—————————————————Node:" Text: "
|—————————————————Node:string_content Text: FATAL: MOTOR_1 NOT sizeof(8)
|—————————————————Node:" Text: "
|————————————————Node:) Text: )
|——————————————Node:; Text: ;
|————————————Node:#endif Text: #endif
|———————————Node:if_statement Text: if (len < 8) continue;
|————————————Node:if Text: if
|————————————Node:condition_clause Text: (len < 8)
|—————————————Node:( Text: (
|—————————————Node:binary_expression Text: len < 8
|——————————————Node:identifier Text: len
|——————————————Node:< Text: <
|——————————————Node:number_literal Text: 8
|—————————————Node:) Text: )
|————————————Node:continue_statement Text: continue;
|—————————————Node:continue Text: continue
|—————————————Node:; Text: ;
|———————————Node:expression_statement Text: memcpy(&can242, canbuf, 8);
|————————————Node:call_expression Text: memcpy(&can242, canbuf, 8)
|—————————————Node:identifier Text: memcpy
|—————————————Node:argument_list Text: (&can242, canbuf, 8)
|——————————————Node:( Text: (
|——————————————Node:pointer_expression Text: &can242
|———————————————Node:& Text: &
|———————————————Node:identifier Text: can242
|——————————————Node:, Text: ,
|——————————————Node:identifier Text: canbuf
|——————————————Node:, Text: ,
|——————————————Node:number_literal Text: 8
|——————————————Node:) Text: )
|————————————Node:; Text: ;
|———————————Node:preproc_ifdef Text: #ifdef DEBUGSERIAL
				DEBUGSERIAL.print("miist=");
				DEBUGSERIAL.print(can242.miist * 100.0 / 255.0);
				DEBUGSERIAL.print(",nmot=");
				DEBUGSERIAL.print(can242.nmot * 0.25);
				DEBUGSERIAL.print(",Wped_fgr=");
				DEBUGSERIAL.print(can242.Wped_fgr * 100.0 / 254.0);
				if (can242.E_lm) DEBUGSERIAL.print("E_lm: HFM Error");
				DEBUGSERIAL.println("");
#endif
|————————————Node:#ifdef Text: #ifdef
|————————————Node:identifier Text: DEBUGSERIAL
|————————————Node:expression_statement Text: DEBUGSERIAL.print("miist=");
|—————————————Node:call_expression Text: DEBUGSERIAL.print("miist=")
|——————————————Node:field_expression Text: DEBUGSERIAL.print
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: print
|——————————————Node:argument_list Text: ("miist=")
|———————————————Node:( Text: (
|———————————————Node:string_literal Text: "miist="
|————————————————Node:" Text: "
|————————————————Node:string_content Text: miist=
|————————————————Node:" Text: "
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: DEBUGSERIAL.print(can242.miist * 100.0 / 255.0);
|—————————————Node:call_expression Text: DEBUGSERIAL.print(can242.miist * 100.0 / 255.0)
|——————————————Node:field_expression Text: DEBUGSERIAL.print
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: print
|——————————————Node:argument_list Text: (can242.miist * 100.0 / 255.0)
|———————————————Node:( Text: (
|———————————————Node:binary_expression Text: can242.miist * 100.0 / 255.0
|————————————————Node:binary_expression Text: can242.miist * 100.0
|—————————————————Node:field_expression Text: can242.miist
|——————————————————Node:identifier Text: can242
|——————————————————Node:. Text: .
|——————————————————Node:field_identifier Text: miist
|—————————————————Node:* Text: *
|—————————————————Node:number_literal Text: 100.0
|————————————————Node:/ Text: /
|————————————————Node:number_literal Text: 255.0
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: DEBUGSERIAL.print(",nmot=");
|—————————————Node:call_expression Text: DEBUGSERIAL.print(",nmot=")
|——————————————Node:field_expression Text: DEBUGSERIAL.print
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: print
|——————————————Node:argument_list Text: (",nmot=")
|———————————————Node:( Text: (
|———————————————Node:string_literal Text: ",nmot="
|————————————————Node:" Text: "
|————————————————Node:string_content Text: ,nmot=
|————————————————Node:" Text: "
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: DEBUGSERIAL.print(can242.nmot * 0.25);
|—————————————Node:call_expression Text: DEBUGSERIAL.print(can242.nmot * 0.25)
|——————————————Node:field_expression Text: DEBUGSERIAL.print
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: print
|——————————————Node:argument_list Text: (can242.nmot * 0.25)
|———————————————Node:( Text: (
|———————————————Node:binary_expression Text: can242.nmot * 0.25
|————————————————Node:field_expression Text: can242.nmot
|—————————————————Node:identifier Text: can242
|—————————————————Node:. Text: .
|—————————————————Node:field_identifier Text: nmot
|————————————————Node:* Text: *
|————————————————Node:number_literal Text: 0.25
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: DEBUGSERIAL.print(",Wped_fgr=");
|—————————————Node:call_expression Text: DEBUGSERIAL.print(",Wped_fgr=")
|——————————————Node:field_expression Text: DEBUGSERIAL.print
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: print
|——————————————Node:argument_list Text: (",Wped_fgr=")
|———————————————Node:( Text: (
|———————————————Node:string_literal Text: ",Wped_fgr="
|————————————————Node:" Text: "
|————————————————Node:string_content Text: ,Wped_fgr=
|————————————————Node:" Text: "
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: DEBUGSERIAL.print(can242.Wped_fgr * 100.0 / 254.0);
|—————————————Node:call_expression Text: DEBUGSERIAL.print(can242.Wped_fgr * 100.0 / 254.0)
|——————————————Node:field_expression Text: DEBUGSERIAL.print
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: print
|——————————————Node:argument_list Text: (can242.Wped_fgr * 100.0 / 254.0)
|———————————————Node:( Text: (
|———————————————Node:binary_expression Text: can242.Wped_fgr * 100.0 / 254.0
|————————————————Node:binary_expression Text: can242.Wped_fgr * 100.0
|—————————————————Node:field_expression Text: can242.Wped_fgr
|——————————————————Node:identifier Text: can242
|——————————————————Node:. Text: .
|——————————————————Node:field_identifier Text: Wped_fgr
|—————————————————Node:* Text: *
|—————————————————Node:number_literal Text: 100.0
|————————————————Node:/ Text: /
|————————————————Node:number_literal Text: 254.0
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:if_statement Text: if (can242.E_lm) DEBUGSERIAL.print("E_lm: HFM Error");
|—————————————Node:if Text: if
|—————————————Node:condition_clause Text: (can242.E_lm)
|——————————————Node:( Text: (
|——————————————Node:field_expression Text: can242.E_lm
|———————————————Node:identifier Text: can242
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: E_lm
|——————————————Node:) Text: )
|—————————————Node:expression_statement Text: DEBUGSERIAL.print("E_lm: HFM Error");
|——————————————Node:call_expression Text: DEBUGSERIAL.print("E_lm: HFM Error")
|———————————————Node:field_expression Text: DEBUGSERIAL.print
|————————————————Node:identifier Text: DEBUGSERIAL
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: print
|———————————————Node:argument_list Text: ("E_lm: HFM Error")
|————————————————Node:( Text: (
|————————————————Node:string_literal Text: "E_lm: HFM Error"
|—————————————————Node:" Text: "
|—————————————————Node:string_content Text: E_lm: HFM Error
|—————————————————Node:" Text: "
|————————————————Node:) Text: )
|——————————————Node:; Text: ;
|————————————Node:expression_statement Text: DEBUGSERIAL.println("");
|—————————————Node:call_expression Text: DEBUGSERIAL.println("")
|——————————————Node:field_expression Text: DEBUGSERIAL.println
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: println
|——————————————Node:argument_list Text: ("")
|———————————————Node:( Text: (
|———————————————Node:string_literal Text: ""
|————————————————Node:" Text: "
|————————————————Node:" Text: "
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:#endif Text: #endif
|———————————Node:expression_statement Text: receivedintime = true;
|————————————Node:assignment_expression Text: receivedintime = true
|—————————————Node:identifier Text: receivedintime
|—————————————Node:= Text: =
|—————————————Node:true Text: true
|————————————Node:; Text: ;
|———————————Node:break_statement Text: break;
|————————————Node:break Text: break
|————————————Node:; Text: ;
|———————————Node:} Text: }
|—————————Node:} Text: }
|———————Node:} Text: }
|——————Node:while Text: while
|——————Node:parenthesized_expression Text: (millis() - start < duration)
|———————Node:( Text: (
|———————Node:binary_expression Text: millis() - start < duration
|————————Node:binary_expression Text: millis() - start
|—————————Node:call_expression Text: millis()
|——————————Node:identifier Text: millis
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:- Text: -
|—————————Node:identifier Text: start
|————————Node:< Text: <
|————————Node:identifier Text: duration
|———————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (can242.nmot == lastnmot) nsame++;
	else nsame = 0;
|——————Node:if Text: if
|——————Node:condition_clause Text: (can242.nmot == lastnmot)
|———————Node:( Text: (
|———————Node:binary_expression Text: can242.nmot == lastnmot
|————————Node:field_expression Text: can242.nmot
|—————————Node:identifier Text: can242
|—————————Node:. Text: .
|—————————Node:field_identifier Text: nmot
|————————Node:== Text: ==
|————————Node:identifier Text: lastnmot
|———————Node:) Text: )
|——————Node:expression_statement Text: nsame++;
|———————Node:update_expression Text: nsame++
|————————Node:identifier Text: nsame
|————————Node:++ Text: ++
|———————Node:; Text: ;
|——————Node:else_clause Text: else nsame = 0;
|———————Node:else Text: else
|———————Node:expression_statement Text: nsame = 0;
|————————Node:assignment_expression Text: nsame = 0
|—————————Node:identifier Text: nsame
|—————————Node:= Text: =
|—————————Node:number_literal Text: 0
|————————Node:; Text: ;
|—————Node:expression_statement Text: lastnmot = can242.nmot;
|——————Node:assignment_expression Text: lastnmot = can242.nmot
|———————Node:identifier Text: lastnmot
|———————Node:= Text: =
|———————Node:field_expression Text: can242.nmot
|————————Node:identifier Text: can242
|————————Node:. Text: .
|————————Node:field_identifier Text: nmot
|——————Node:; Text: ;
|—————Node:expression_statement Text: sndStat = CAN0.setMode(MCP_NORMAL);
|——————Node:assignment_expression Text: sndStat = CAN0.setMode(MCP_NORMAL)
|———————Node:identifier Text: sndStat
|———————Node:= Text: =
|———————Node:call_expression Text: CAN0.setMode(MCP_NORMAL)
|————————Node:field_expression Text: CAN0.setMode
|—————————Node:identifier Text: CAN0
|—————————Node:. Text: .
|—————————Node:field_identifier Text: setMode
|————————Node:argument_list Text: (MCP_NORMAL)
|—————————Node:( Text: (
|—————————Node:identifier Text: MCP_NORMAL
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment Text: //CAN_Spi_UnSelect();
|—————Node:comment Text: //Serial.println(nsame);
|—————Node:if_statement Text: if (nsame > 7) {
		can242.nmot = 0;
		can242.Wped_fgr = 0;
		can242.miist = 0;
	}
|——————Node:if Text: if
|——————Node:condition_clause Text: (nsame > 7)
|———————Node:( Text: (
|———————Node:binary_expression Text: nsame > 7
|————————Node:identifier Text: nsame
|————————Node:> Text: >
|————————Node:number_literal Text: 7
|———————Node:) Text: )
|——————Node:compound_statement Text: {
		can242.nmot = 0;
		can242.Wped_fgr = 0;
		can242.miist = 0;
	}
|———————Node:{ Text: {
|———————Node:expression_statement Text: can242.nmot = 0;
|————————Node:assignment_expression Text: can242.nmot = 0
|—————————Node:field_expression Text: can242.nmot
|——————————Node:identifier Text: can242
|——————————Node:. Text: .
|——————————Node:field_identifier Text: nmot
|—————————Node:= Text: =
|—————————Node:number_literal Text: 0
|————————Node:; Text: ;
|———————Node:expression_statement Text: can242.Wped_fgr = 0;
|————————Node:assignment_expression Text: can242.Wped_fgr = 0
|—————————Node:field_expression Text: can242.Wped_fgr
|——————————Node:identifier Text: can242
|——————————Node:. Text: .
|——————————Node:field_identifier Text: Wped_fgr
|—————————Node:= Text: =
|—————————Node:number_literal Text: 0
|————————Node:; Text: ;
|———————Node:expression_statement Text: can242.miist = 0;
|————————Node:assignment_expression Text: can242.miist = 0
|—————————Node:field_expression Text: can242.miist
|——————————Node:identifier Text: can242
|——————————Node:. Text: .
|——————————Node:field_identifier Text: miist
|—————————Node:= Text: =
|—————————Node:number_literal Text: 0
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:if_statement Text: if (!receivedintime) {
#ifdef	MCP_STDERR
		MCP_STDERR.println("Timout reading CAN_ANTRIEB242");
#endif
	}
|——————Node:if Text: if
|——————Node:condition_clause Text: (!receivedintime)
|———————Node:( Text: (
|———————Node:unary_expression Text: !receivedintime
|————————Node:! Text: !
|————————Node:identifier Text: receivedintime
|———————Node:) Text: )
|——————Node:compound_statement Text: {
#ifdef	MCP_STDERR
		MCP_STDERR.println("Timout reading CAN_ANTRIEB242");
#endif
	}
|———————Node:{ Text: {
|———————Node:preproc_ifdef Text: #ifdef	MCP_STDERR
		MCP_STDERR.println("Timout reading CAN_ANTRIEB242");
#endif
|————————Node:#ifdef Text: #ifdef
|————————Node:identifier Text: MCP_STDERR
|————————Node:expression_statement Text: MCP_STDERR.println("Timout reading CAN_ANTRIEB242");
|—————————Node:call_expression Text: MCP_STDERR.println("Timout reading CAN_ANTRIEB242")
|——————————Node:field_expression Text: MCP_STDERR.println
|———————————Node:identifier Text: MCP_STDERR
|———————————Node:. Text: .
|———————————Node:field_identifier Text: println
|——————————Node:argument_list Text: ("Timout reading CAN_ANTRIEB242")
|———————————Node:( Text: (
|———————————Node:string_literal Text: "Timout reading CAN_ANTRIEB242"
|————————————Node:" Text: "
|————————————Node:string_content Text: Timout reading CAN_ANTRIEB242
|————————————Node:" Text: "
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:#endif Text: #endif
|———————Node:} Text: }
|—————Node:return_statement Text: return sndStat;
|——————Node:return Text: return
|——————Node:identifier Text: sndStat
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:function_definition Text: INT8U getCan245(long duration, MOTOR_2& can245) {
	INT8U sndStat = CAN_FAIL;
	sndStat = CAN0.setMode(MCP_LISTENONLY);
	if (sndStat != CAN_OK) return sndStat;
	long start = millis();
	bool receivedintime = false;
	do {
		if (!digitalRead(CAN0_INT))                         // If CAN0_INT pin is low, read receive buffer
		{
			sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);
			if (sndStat != CAN_OK) continue;
			if (rxId == 0x245) {
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("Antrieb(0x245):");
				if (sizeof(MOTOR_2) != 8)DEBUGSERIAL.println("FATAL: MOTOR_1 NOT sizeof(8)");
#endif
				if (len < 8) continue;
				memcpy(&can245, canbuf, 8);

#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("Tmot=");
				DEBUGSERIAL.print(EngOilTemp(can245.Tmot));
				DEBUGSERIAL.print(",E_tm=");
				DEBUGSERIAL.print(can245.E_tm);
				DEBUGSERIAL.print(",B_bremse=");
				DEBUGSERIAL.print(can245.B_bremse);
				DEBUGSERIAL.print(",E_bremse=");
				DEBUGSERIAL.print(can245.E_bremse);
				DEBUGSERIAL.print(",B_ffz=");
				DEBUGSERIAL.print(can245.B_ffz);
				DEBUGSERIAL.print(",stat_fgr=");
				DEBUGSERIAL.print(can245.stat_fgr);
				DEBUGSERIAL.print(",mibas=");
				DEBUGSERIAL.print(can245.mibas);
				DEBUGSERIAL.print(",nstat=");
				DEBUGSERIAL.print(can245.nstat);
				DEBUGSERIAL.print(",mizwmn=");
				DEBUGSERIAL.print(can245.mizwmn);
				DEBUGSERIAL.print(",mimax=");
				DEBUGSERIAL.print(can245.mimax);
				DEBUGSERIAL.print(",misol=");
				DEBUGSERIAL.print(can245.misol);
				DEBUGSERIAL.println("");
#endif
				receivedintime = true;
				break;
			}
		}
	} while (millis() - start < duration);
	sndStat = CAN0.setMode(MCP_NORMAL);
	//CAN_Spi_UnSelect();
	if (!receivedintime) {
#ifdef	MCP_STDERR
		MCP_STDERR.println("Timout reading CAN_ANTRIEB245");
#endif
	}
	return sndStat;
}
|————Node:type_identifier Text: INT8U
|————Node:function_declarator Text: getCan245(long duration, MOTOR_2& can245)
|—————Node:identifier Text: getCan245
|—————Node:parameter_list Text: (long duration, MOTOR_2& can245)
|——————Node:( Text: (
|——————Node:parameter_declaration Text: long duration
|———————Node:sized_type_specifier Text: long
|————————Node:long Text: long
|———————Node:identifier Text: duration
|——————Node:, Text: ,
|——————Node:parameter_declaration Text: MOTOR_2& can245
|———————Node:type_identifier Text: MOTOR_2
|———————Node:reference_declarator Text: & can245
|————————Node:& Text: &
|————————Node:identifier Text: can245
|——————Node:) Text: )
|————Node:compound_statement Text: {
	INT8U sndStat = CAN_FAIL;
	sndStat = CAN0.setMode(MCP_LISTENONLY);
	if (sndStat != CAN_OK) return sndStat;
	long start = millis();
	bool receivedintime = false;
	do {
		if (!digitalRead(CAN0_INT))                         // If CAN0_INT pin is low, read receive buffer
		{
			sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);
			if (sndStat != CAN_OK) continue;
			if (rxId == 0x245) {
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("Antrieb(0x245):");
				if (sizeof(MOTOR_2) != 8)DEBUGSERIAL.println("FATAL: MOTOR_1 NOT sizeof(8)");
#endif
				if (len < 8) continue;
				memcpy(&can245, canbuf, 8);

#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("Tmot=");
				DEBUGSERIAL.print(EngOilTemp(can245.Tmot));
				DEBUGSERIAL.print(",E_tm=");
				DEBUGSERIAL.print(can245.E_tm);
				DEBUGSERIAL.print(",B_bremse=");
				DEBUGSERIAL.print(can245.B_bremse);
				DEBUGSERIAL.print(",E_bremse=");
				DEBUGSERIAL.print(can245.E_bremse);
				DEBUGSERIAL.print(",B_ffz=");
				DEBUGSERIAL.print(can245.B_ffz);
				DEBUGSERIAL.print(",stat_fgr=");
				DEBUGSERIAL.print(can245.stat_fgr);
				DEBUGSERIAL.print(",mibas=");
				DEBUGSERIAL.print(can245.mibas);
				DEBUGSERIAL.print(",nstat=");
				DEBUGSERIAL.print(can245.nstat);
				DEBUGSERIAL.print(",mizwmn=");
				DEBUGSERIAL.print(can245.mizwmn);
				DEBUGSERIAL.print(",mimax=");
				DEBUGSERIAL.print(can245.mimax);
				DEBUGSERIAL.print(",misol=");
				DEBUGSERIAL.print(can245.misol);
				DEBUGSERIAL.println("");
#endif
				receivedintime = true;
				break;
			}
		}
	} while (millis() - start < duration);
	sndStat = CAN0.setMode(MCP_NORMAL);
	//CAN_Spi_UnSelect();
	if (!receivedintime) {
#ifdef	MCP_STDERR
		MCP_STDERR.println("Timout reading CAN_ANTRIEB245");
#endif
	}
	return sndStat;
}
|—————Node:{ Text: {
|—————Node:declaration Text: INT8U sndStat = CAN_FAIL;
|——————Node:type_identifier Text: INT8U
|——————Node:init_declarator Text: sndStat = CAN_FAIL
|———————Node:identifier Text: sndStat
|———————Node:= Text: =
|———————Node:identifier Text: CAN_FAIL
|——————Node:; Text: ;
|—————Node:expression_statement Text: sndStat = CAN0.setMode(MCP_LISTENONLY);
|——————Node:assignment_expression Text: sndStat = CAN0.setMode(MCP_LISTENONLY)
|———————Node:identifier Text: sndStat
|———————Node:= Text: =
|———————Node:call_expression Text: CAN0.setMode(MCP_LISTENONLY)
|————————Node:field_expression Text: CAN0.setMode
|—————————Node:identifier Text: CAN0
|—————————Node:. Text: .
|—————————Node:field_identifier Text: setMode
|————————Node:argument_list Text: (MCP_LISTENONLY)
|—————————Node:( Text: (
|—————————Node:identifier Text: MCP_LISTENONLY
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (sndStat != CAN_OK) return sndStat;
|——————Node:if Text: if
|——————Node:condition_clause Text: (sndStat != CAN_OK)
|———————Node:( Text: (
|———————Node:binary_expression Text: sndStat != CAN_OK
|————————Node:identifier Text: sndStat
|————————Node:!= Text: !=
|————————Node:identifier Text: CAN_OK
|———————Node:) Text: )
|——————Node:return_statement Text: return sndStat;
|———————Node:return Text: return
|———————Node:identifier Text: sndStat
|———————Node:; Text: ;
|—————Node:declaration Text: long start = millis();
|——————Node:sized_type_specifier Text: long
|———————Node:long Text: long
|——————Node:init_declarator Text: start = millis()
|———————Node:identifier Text: start
|———————Node:= Text: =
|———————Node:call_expression Text: millis()
|————————Node:identifier Text: millis
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:declaration Text: bool receivedintime = false;
|——————Node:primitive_type Text: bool
|——————Node:init_declarator Text: receivedintime = false
|———————Node:identifier Text: receivedintime
|———————Node:= Text: =
|———————Node:false Text: false
|——————Node:; Text: ;
|—————Node:do_statement Text: do {
		if (!digitalRead(CAN0_INT))                         // If CAN0_INT pin is low, read receive buffer
		{
			sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);
			if (sndStat != CAN_OK) continue;
			if (rxId == 0x245) {
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("Antrieb(0x245):");
				if (sizeof(MOTOR_2) != 8)DEBUGSERIAL.println("FATAL: MOTOR_1 NOT sizeof(8)");
#endif
				if (len < 8) continue;
				memcpy(&can245, canbuf, 8);

#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("Tmot=");
				DEBUGSERIAL.print(EngOilTemp(can245.Tmot));
				DEBUGSERIAL.print(",E_tm=");
				DEBUGSERIAL.print(can245.E_tm);
				DEBUGSERIAL.print(",B_bremse=");
				DEBUGSERIAL.print(can245.B_bremse);
				DEBUGSERIAL.print(",E_bremse=");
				DEBUGSERIAL.print(can245.E_bremse);
				DEBUGSERIAL.print(",B_ffz=");
				DEBUGSERIAL.print(can245.B_ffz);
				DEBUGSERIAL.print(",stat_fgr=");
				DEBUGSERIAL.print(can245.stat_fgr);
				DEBUGSERIAL.print(",mibas=");
				DEBUGSERIAL.print(can245.mibas);
				DEBUGSERIAL.print(",nstat=");
				DEBUGSERIAL.print(can245.nstat);
				DEBUGSERIAL.print(",mizwmn=");
				DEBUGSERIAL.print(can245.mizwmn);
				DEBUGSERIAL.print(",mimax=");
				DEBUGSERIAL.print(can245.mimax);
				DEBUGSERIAL.print(",misol=");
				DEBUGSERIAL.print(can245.misol);
				DEBUGSERIAL.println("");
#endif
				receivedintime = true;
				break;
			}
		}
	} while (millis() - start < duration);
|——————Node:do Text: do
|——————Node:compound_statement Text: {
		if (!digitalRead(CAN0_INT))                         // If CAN0_INT pin is low, read receive buffer
		{
			sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);
			if (sndStat != CAN_OK) continue;
			if (rxId == 0x245) {
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("Antrieb(0x245):");
				if (sizeof(MOTOR_2) != 8)DEBUGSERIAL.println("FATAL: MOTOR_1 NOT sizeof(8)");
#endif
				if (len < 8) continue;
				memcpy(&can245, canbuf, 8);

#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("Tmot=");
				DEBUGSERIAL.print(EngOilTemp(can245.Tmot));
				DEBUGSERIAL.print(",E_tm=");
				DEBUGSERIAL.print(can245.E_tm);
				DEBUGSERIAL.print(",B_bremse=");
				DEBUGSERIAL.print(can245.B_bremse);
				DEBUGSERIAL.print(",E_bremse=");
				DEBUGSERIAL.print(can245.E_bremse);
				DEBUGSERIAL.print(",B_ffz=");
				DEBUGSERIAL.print(can245.B_ffz);
				DEBUGSERIAL.print(",stat_fgr=");
				DEBUGSERIAL.print(can245.stat_fgr);
				DEBUGSERIAL.print(",mibas=");
				DEBUGSERIAL.print(can245.mibas);
				DEBUGSERIAL.print(",nstat=");
				DEBUGSERIAL.print(can245.nstat);
				DEBUGSERIAL.print(",mizwmn=");
				DEBUGSERIAL.print(can245.mizwmn);
				DEBUGSERIAL.print(",mimax=");
				DEBUGSERIAL.print(can245.mimax);
				DEBUGSERIAL.print(",misol=");
				DEBUGSERIAL.print(can245.misol);
				DEBUGSERIAL.println("");
#endif
				receivedintime = true;
				break;
			}
		}
	}
|———————Node:{ Text: {
|———————Node:if_statement Text: if (!digitalRead(CAN0_INT))                         // If CAN0_INT pin is low, read receive buffer
		{
			sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);
			if (sndStat != CAN_OK) continue;
			if (rxId == 0x245) {
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("Antrieb(0x245):");
				if (sizeof(MOTOR_2) != 8)DEBUGSERIAL.println("FATAL: MOTOR_1 NOT sizeof(8)");
#endif
				if (len < 8) continue;
				memcpy(&can245, canbuf, 8);

#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("Tmot=");
				DEBUGSERIAL.print(EngOilTemp(can245.Tmot));
				DEBUGSERIAL.print(",E_tm=");
				DEBUGSERIAL.print(can245.E_tm);
				DEBUGSERIAL.print(",B_bremse=");
				DEBUGSERIAL.print(can245.B_bremse);
				DEBUGSERIAL.print(",E_bremse=");
				DEBUGSERIAL.print(can245.E_bremse);
				DEBUGSERIAL.print(",B_ffz=");
				DEBUGSERIAL.print(can245.B_ffz);
				DEBUGSERIAL.print(",stat_fgr=");
				DEBUGSERIAL.print(can245.stat_fgr);
				DEBUGSERIAL.print(",mibas=");
				DEBUGSERIAL.print(can245.mibas);
				DEBUGSERIAL.print(",nstat=");
				DEBUGSERIAL.print(can245.nstat);
				DEBUGSERIAL.print(",mizwmn=");
				DEBUGSERIAL.print(can245.mizwmn);
				DEBUGSERIAL.print(",mimax=");
				DEBUGSERIAL.print(can245.mimax);
				DEBUGSERIAL.print(",misol=");
				DEBUGSERIAL.print(can245.misol);
				DEBUGSERIAL.println("");
#endif
				receivedintime = true;
				break;
			}
		}
|————————Node:if Text: if
|————————Node:condition_clause Text: (!digitalRead(CAN0_INT))
|—————————Node:( Text: (
|—————————Node:unary_expression Text: !digitalRead(CAN0_INT)
|——————————Node:! Text: !
|——————————Node:call_expression Text: digitalRead(CAN0_INT)
|———————————Node:identifier Text: digitalRead
|———————————Node:argument_list Text: (CAN0_INT)
|————————————Node:( Text: (
|————————————Node:identifier Text: CAN0_INT
|————————————Node:) Text: )
|—————————Node:) Text: )
|————————Node:comment Text: // If CAN0_INT pin is low, read receive buffer
|————————Node:compound_statement Text: {
			sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);
			if (sndStat != CAN_OK) continue;
			if (rxId == 0x245) {
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("Antrieb(0x245):");
				if (sizeof(MOTOR_2) != 8)DEBUGSERIAL.println("FATAL: MOTOR_1 NOT sizeof(8)");
#endif
				if (len < 8) continue;
				memcpy(&can245, canbuf, 8);

#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("Tmot=");
				DEBUGSERIAL.print(EngOilTemp(can245.Tmot));
				DEBUGSERIAL.print(",E_tm=");
				DEBUGSERIAL.print(can245.E_tm);
				DEBUGSERIAL.print(",B_bremse=");
				DEBUGSERIAL.print(can245.B_bremse);
				DEBUGSERIAL.print(",E_bremse=");
				DEBUGSERIAL.print(can245.E_bremse);
				DEBUGSERIAL.print(",B_ffz=");
				DEBUGSERIAL.print(can245.B_ffz);
				DEBUGSERIAL.print(",stat_fgr=");
				DEBUGSERIAL.print(can245.stat_fgr);
				DEBUGSERIAL.print(",mibas=");
				DEBUGSERIAL.print(can245.mibas);
				DEBUGSERIAL.print(",nstat=");
				DEBUGSERIAL.print(can245.nstat);
				DEBUGSERIAL.print(",mizwmn=");
				DEBUGSERIAL.print(can245.mizwmn);
				DEBUGSERIAL.print(",mimax=");
				DEBUGSERIAL.print(can245.mimax);
				DEBUGSERIAL.print(",misol=");
				DEBUGSERIAL.print(can245.misol);
				DEBUGSERIAL.println("");
#endif
				receivedintime = true;
				break;
			}
		}
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);
|——————————Node:assignment_expression Text: sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf)
|———————————Node:identifier Text: sndStat
|———————————Node:= Text: =
|———————————Node:call_expression Text: CAN0.readMsgBuf(&rxId, &len, canbuf)
|————————————Node:field_expression Text: CAN0.readMsgBuf
|—————————————Node:identifier Text: CAN0
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: readMsgBuf
|————————————Node:argument_list Text: (&rxId, &len, canbuf)
|—————————————Node:( Text: (
|—————————————Node:pointer_expression Text: &rxId
|——————————————Node:& Text: &
|——————————————Node:identifier Text: rxId
|—————————————Node:, Text: ,
|—————————————Node:pointer_expression Text: &len
|——————————————Node:& Text: &
|——————————————Node:identifier Text: len
|—————————————Node:, Text: ,
|—————————————Node:identifier Text: canbuf
|—————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:if_statement Text: if (sndStat != CAN_OK) continue;
|——————————Node:if Text: if
|——————————Node:condition_clause Text: (sndStat != CAN_OK)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: sndStat != CAN_OK
|————————————Node:identifier Text: sndStat
|————————————Node:!= Text: !=
|————————————Node:identifier Text: CAN_OK
|———————————Node:) Text: )
|——————————Node:continue_statement Text: continue;
|———————————Node:continue Text: continue
|———————————Node:; Text: ;
|—————————Node:if_statement Text: if (rxId == 0x245) {
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("Antrieb(0x245):");
				if (sizeof(MOTOR_2) != 8)DEBUGSERIAL.println("FATAL: MOTOR_1 NOT sizeof(8)");
#endif
				if (len < 8) continue;
				memcpy(&can245, canbuf, 8);

#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("Tmot=");
				DEBUGSERIAL.print(EngOilTemp(can245.Tmot));
				DEBUGSERIAL.print(",E_tm=");
				DEBUGSERIAL.print(can245.E_tm);
				DEBUGSERIAL.print(",B_bremse=");
				DEBUGSERIAL.print(can245.B_bremse);
				DEBUGSERIAL.print(",E_bremse=");
				DEBUGSERIAL.print(can245.E_bremse);
				DEBUGSERIAL.print(",B_ffz=");
				DEBUGSERIAL.print(can245.B_ffz);
				DEBUGSERIAL.print(",stat_fgr=");
				DEBUGSERIAL.print(can245.stat_fgr);
				DEBUGSERIAL.print(",mibas=");
				DEBUGSERIAL.print(can245.mibas);
				DEBUGSERIAL.print(",nstat=");
				DEBUGSERIAL.print(can245.nstat);
				DEBUGSERIAL.print(",mizwmn=");
				DEBUGSERIAL.print(can245.mizwmn);
				DEBUGSERIAL.print(",mimax=");
				DEBUGSERIAL.print(can245.mimax);
				DEBUGSERIAL.print(",misol=");
				DEBUGSERIAL.print(can245.misol);
				DEBUGSERIAL.println("");
#endif
				receivedintime = true;
				break;
			}
|——————————Node:if Text: if
|——————————Node:condition_clause Text: (rxId == 0x245)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: rxId == 0x245
|————————————Node:identifier Text: rxId
|————————————Node:== Text: ==
|————————————Node:number_literal Text: 0x245
|———————————Node:) Text: )
|——————————Node:compound_statement Text: {
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("Antrieb(0x245):");
				if (sizeof(MOTOR_2) != 8)DEBUGSERIAL.println("FATAL: MOTOR_1 NOT sizeof(8)");
#endif
				if (len < 8) continue;
				memcpy(&can245, canbuf, 8);

#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("Tmot=");
				DEBUGSERIAL.print(EngOilTemp(can245.Tmot));
				DEBUGSERIAL.print(",E_tm=");
				DEBUGSERIAL.print(can245.E_tm);
				DEBUGSERIAL.print(",B_bremse=");
				DEBUGSERIAL.print(can245.B_bremse);
				DEBUGSERIAL.print(",E_bremse=");
				DEBUGSERIAL.print(can245.E_bremse);
				DEBUGSERIAL.print(",B_ffz=");
				DEBUGSERIAL.print(can245.B_ffz);
				DEBUGSERIAL.print(",stat_fgr=");
				DEBUGSERIAL.print(can245.stat_fgr);
				DEBUGSERIAL.print(",mibas=");
				DEBUGSERIAL.print(can245.mibas);
				DEBUGSERIAL.print(",nstat=");
				DEBUGSERIAL.print(can245.nstat);
				DEBUGSERIAL.print(",mizwmn=");
				DEBUGSERIAL.print(can245.mizwmn);
				DEBUGSERIAL.print(",mimax=");
				DEBUGSERIAL.print(can245.mimax);
				DEBUGSERIAL.print(",misol=");
				DEBUGSERIAL.print(can245.misol);
				DEBUGSERIAL.println("");
#endif
				receivedintime = true;
				break;
			}
|———————————Node:{ Text: {
|———————————Node:preproc_ifdef Text: #ifdef DEBUGSERIAL
				DEBUGSERIAL.print("Antrieb(0x245):");
				if (sizeof(MOTOR_2) != 8)DEBUGSERIAL.println("FATAL: MOTOR_1 NOT sizeof(8)");
#endif
|————————————Node:#ifdef Text: #ifdef
|————————————Node:identifier Text: DEBUGSERIAL
|————————————Node:expression_statement Text: DEBUGSERIAL.print("Antrieb(0x245):");
|—————————————Node:call_expression Text: DEBUGSERIAL.print("Antrieb(0x245):")
|——————————————Node:field_expression Text: DEBUGSERIAL.print
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: print
|——————————————Node:argument_list Text: ("Antrieb(0x245):")
|———————————————Node:( Text: (
|———————————————Node:string_literal Text: "Antrieb(0x245):"
|————————————————Node:" Text: "
|————————————————Node:string_content Text: Antrieb(0x245):
|————————————————Node:" Text: "
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:if_statement Text: if (sizeof(MOTOR_2) != 8)DEBUGSERIAL.println("FATAL: MOTOR_1 NOT sizeof(8)");
|—————————————Node:if Text: if
|—————————————Node:condition_clause Text: (sizeof(MOTOR_2) != 8)
|——————————————Node:( Text: (
|——————————————Node:binary_expression Text: sizeof(MOTOR_2) != 8
|———————————————Node:sizeof_expression Text: sizeof(MOTOR_2)
|————————————————Node:sizeof Text: sizeof
|————————————————Node:parenthesized_expression Text: (MOTOR_2)
|—————————————————Node:( Text: (
|—————————————————Node:identifier Text: MOTOR_2
|—————————————————Node:) Text: )
|———————————————Node:!= Text: !=
|———————————————Node:number_literal Text: 8
|——————————————Node:) Text: )
|—————————————Node:expression_statement Text: DEBUGSERIAL.println("FATAL: MOTOR_1 NOT sizeof(8)");
|——————————————Node:call_expression Text: DEBUGSERIAL.println("FATAL: MOTOR_1 NOT sizeof(8)")
|———————————————Node:field_expression Text: DEBUGSERIAL.println
|————————————————Node:identifier Text: DEBUGSERIAL
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: println
|———————————————Node:argument_list Text: ("FATAL: MOTOR_1 NOT sizeof(8)")
|————————————————Node:( Text: (
|————————————————Node:string_literal Text: "FATAL: MOTOR_1 NOT sizeof(8)"
|—————————————————Node:" Text: "
|—————————————————Node:string_content Text: FATAL: MOTOR_1 NOT sizeof(8)
|—————————————————Node:" Text: "
|————————————————Node:) Text: )
|——————————————Node:; Text: ;
|————————————Node:#endif Text: #endif
|———————————Node:if_statement Text: if (len < 8) continue;
|————————————Node:if Text: if
|————————————Node:condition_clause Text: (len < 8)
|—————————————Node:( Text: (
|—————————————Node:binary_expression Text: len < 8
|——————————————Node:identifier Text: len
|——————————————Node:< Text: <
|——————————————Node:number_literal Text: 8
|—————————————Node:) Text: )
|————————————Node:continue_statement Text: continue;
|—————————————Node:continue Text: continue
|—————————————Node:; Text: ;
|———————————Node:expression_statement Text: memcpy(&can245, canbuf, 8);
|————————————Node:call_expression Text: memcpy(&can245, canbuf, 8)
|—————————————Node:identifier Text: memcpy
|—————————————Node:argument_list Text: (&can245, canbuf, 8)
|——————————————Node:( Text: (
|——————————————Node:pointer_expression Text: &can245
|———————————————Node:& Text: &
|———————————————Node:identifier Text: can245
|——————————————Node:, Text: ,
|——————————————Node:identifier Text: canbuf
|——————————————Node:, Text: ,
|——————————————Node:number_literal Text: 8
|——————————————Node:) Text: )
|————————————Node:; Text: ;
|———————————Node:preproc_ifdef Text: #ifdef DEBUGSERIAL
				DEBUGSERIAL.print("Tmot=");
				DEBUGSERIAL.print(EngOilTemp(can245.Tmot));
				DEBUGSERIAL.print(",E_tm=");
				DEBUGSERIAL.print(can245.E_tm);
				DEBUGSERIAL.print(",B_bremse=");
				DEBUGSERIAL.print(can245.B_bremse);
				DEBUGSERIAL.print(",E_bremse=");
				DEBUGSERIAL.print(can245.E_bremse);
				DEBUGSERIAL.print(",B_ffz=");
				DEBUGSERIAL.print(can245.B_ffz);
				DEBUGSERIAL.print(",stat_fgr=");
				DEBUGSERIAL.print(can245.stat_fgr);
				DEBUGSERIAL.print(",mibas=");
				DEBUGSERIAL.print(can245.mibas);
				DEBUGSERIAL.print(",nstat=");
				DEBUGSERIAL.print(can245.nstat);
				DEBUGSERIAL.print(",mizwmn=");
				DEBUGSERIAL.print(can245.mizwmn);
				DEBUGSERIAL.print(",mimax=");
				DEBUGSERIAL.print(can245.mimax);
				DEBUGSERIAL.print(",misol=");
				DEBUGSERIAL.print(can245.misol);
				DEBUGSERIAL.println("");
#endif
|————————————Node:#ifdef Text: #ifdef
|————————————Node:identifier Text: DEBUGSERIAL
|————————————Node:expression_statement Text: DEBUGSERIAL.print("Tmot=");
|—————————————Node:call_expression Text: DEBUGSERIAL.print("Tmot=")
|——————————————Node:field_expression Text: DEBUGSERIAL.print
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: print
|——————————————Node:argument_list Text: ("Tmot=")
|———————————————Node:( Text: (
|———————————————Node:string_literal Text: "Tmot="
|————————————————Node:" Text: "
|————————————————Node:string_content Text: Tmot=
|————————————————Node:" Text: "
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: DEBUGSERIAL.print(EngOilTemp(can245.Tmot));
|—————————————Node:call_expression Text: DEBUGSERIAL.print(EngOilTemp(can245.Tmot))
|——————————————Node:field_expression Text: DEBUGSERIAL.print
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: print
|——————————————Node:argument_list Text: (EngOilTemp(can245.Tmot))
|———————————————Node:( Text: (
|———————————————Node:call_expression Text: EngOilTemp(can245.Tmot)
|————————————————Node:identifier Text: EngOilTemp
|————————————————Node:argument_list Text: (can245.Tmot)
|—————————————————Node:( Text: (
|—————————————————Node:field_expression Text: can245.Tmot
|——————————————————Node:identifier Text: can245
|——————————————————Node:. Text: .
|——————————————————Node:field_identifier Text: Tmot
|—————————————————Node:) Text: )
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: DEBUGSERIAL.print(",E_tm=");
|—————————————Node:call_expression Text: DEBUGSERIAL.print(",E_tm=")
|——————————————Node:field_expression Text: DEBUGSERIAL.print
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: print
|——————————————Node:argument_list Text: (",E_tm=")
|———————————————Node:( Text: (
|———————————————Node:string_literal Text: ",E_tm="
|————————————————Node:" Text: "
|————————————————Node:string_content Text: ,E_tm=
|————————————————Node:" Text: "
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: DEBUGSERIAL.print(can245.E_tm);
|—————————————Node:call_expression Text: DEBUGSERIAL.print(can245.E_tm)
|——————————————Node:field_expression Text: DEBUGSERIAL.print
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: print
|——————————————Node:argument_list Text: (can245.E_tm)
|———————————————Node:( Text: (
|———————————————Node:field_expression Text: can245.E_tm
|————————————————Node:identifier Text: can245
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: E_tm
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: DEBUGSERIAL.print(",B_bremse=");
|—————————————Node:call_expression Text: DEBUGSERIAL.print(",B_bremse=")
|——————————————Node:field_expression Text: DEBUGSERIAL.print
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: print
|——————————————Node:argument_list Text: (",B_bremse=")
|———————————————Node:( Text: (
|———————————————Node:string_literal Text: ",B_bremse="
|————————————————Node:" Text: "
|————————————————Node:string_content Text: ,B_bremse=
|————————————————Node:" Text: "
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: DEBUGSERIAL.print(can245.B_bremse);
|—————————————Node:call_expression Text: DEBUGSERIAL.print(can245.B_bremse)
|——————————————Node:field_expression Text: DEBUGSERIAL.print
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: print
|——————————————Node:argument_list Text: (can245.B_bremse)
|———————————————Node:( Text: (
|———————————————Node:field_expression Text: can245.B_bremse
|————————————————Node:identifier Text: can245
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: B_bremse
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: DEBUGSERIAL.print(",E_bremse=");
|—————————————Node:call_expression Text: DEBUGSERIAL.print(",E_bremse=")
|——————————————Node:field_expression Text: DEBUGSERIAL.print
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: print
|——————————————Node:argument_list Text: (",E_bremse=")
|———————————————Node:( Text: (
|———————————————Node:string_literal Text: ",E_bremse="
|————————————————Node:" Text: "
|————————————————Node:string_content Text: ,E_bremse=
|————————————————Node:" Text: "
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: DEBUGSERIAL.print(can245.E_bremse);
|—————————————Node:call_expression Text: DEBUGSERIAL.print(can245.E_bremse)
|——————————————Node:field_expression Text: DEBUGSERIAL.print
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: print
|——————————————Node:argument_list Text: (can245.E_bremse)
|———————————————Node:( Text: (
|———————————————Node:field_expression Text: can245.E_bremse
|————————————————Node:identifier Text: can245
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: E_bremse
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: DEBUGSERIAL.print(",B_ffz=");
|—————————————Node:call_expression Text: DEBUGSERIAL.print(",B_ffz=")
|——————————————Node:field_expression Text: DEBUGSERIAL.print
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: print
|——————————————Node:argument_list Text: (",B_ffz=")
|———————————————Node:( Text: (
|———————————————Node:string_literal Text: ",B_ffz="
|————————————————Node:" Text: "
|————————————————Node:string_content Text: ,B_ffz=
|————————————————Node:" Text: "
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: DEBUGSERIAL.print(can245.B_ffz);
|—————————————Node:call_expression Text: DEBUGSERIAL.print(can245.B_ffz)
|——————————————Node:field_expression Text: DEBUGSERIAL.print
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: print
|——————————————Node:argument_list Text: (can245.B_ffz)
|———————————————Node:( Text: (
|———————————————Node:field_expression Text: can245.B_ffz
|————————————————Node:identifier Text: can245
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: B_ffz
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: DEBUGSERIAL.print(",stat_fgr=");
|—————————————Node:call_expression Text: DEBUGSERIAL.print(",stat_fgr=")
|——————————————Node:field_expression Text: DEBUGSERIAL.print
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: print
|——————————————Node:argument_list Text: (",stat_fgr=")
|———————————————Node:( Text: (
|———————————————Node:string_literal Text: ",stat_fgr="
|————————————————Node:" Text: "
|————————————————Node:string_content Text: ,stat_fgr=
|————————————————Node:" Text: "
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: DEBUGSERIAL.print(can245.stat_fgr);
|—————————————Node:call_expression Text: DEBUGSERIAL.print(can245.stat_fgr)
|——————————————Node:field_expression Text: DEBUGSERIAL.print
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: print
|——————————————Node:argument_list Text: (can245.stat_fgr)
|———————————————Node:( Text: (
|———————————————Node:field_expression Text: can245.stat_fgr
|————————————————Node:identifier Text: can245
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: stat_fgr
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: DEBUGSERIAL.print(",mibas=");
|—————————————Node:call_expression Text: DEBUGSERIAL.print(",mibas=")
|——————————————Node:field_expression Text: DEBUGSERIAL.print
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: print
|——————————————Node:argument_list Text: (",mibas=")
|———————————————Node:( Text: (
|———————————————Node:string_literal Text: ",mibas="
|————————————————Node:" Text: "
|————————————————Node:string_content Text: ,mibas=
|————————————————Node:" Text: "
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: DEBUGSERIAL.print(can245.mibas);
|—————————————Node:call_expression Text: DEBUGSERIAL.print(can245.mibas)
|——————————————Node:field_expression Text: DEBUGSERIAL.print
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: print
|——————————————Node:argument_list Text: (can245.mibas)
|———————————————Node:( Text: (
|———————————————Node:field_expression Text: can245.mibas
|————————————————Node:identifier Text: can245
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: mibas
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: DEBUGSERIAL.print(",nstat=");
|—————————————Node:call_expression Text: DEBUGSERIAL.print(",nstat=")
|——————————————Node:field_expression Text: DEBUGSERIAL.print
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: print
|——————————————Node:argument_list Text: (",nstat=")
|———————————————Node:( Text: (
|———————————————Node:string_literal Text: ",nstat="
|————————————————Node:" Text: "
|————————————————Node:string_content Text: ,nstat=
|————————————————Node:" Text: "
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: DEBUGSERIAL.print(can245.nstat);
|—————————————Node:call_expression Text: DEBUGSERIAL.print(can245.nstat)
|——————————————Node:field_expression Text: DEBUGSERIAL.print
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: print
|——————————————Node:argument_list Text: (can245.nstat)
|———————————————Node:( Text: (
|———————————————Node:field_expression Text: can245.nstat
|————————————————Node:identifier Text: can245
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: nstat
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: DEBUGSERIAL.print(",mizwmn=");
|—————————————Node:call_expression Text: DEBUGSERIAL.print(",mizwmn=")
|——————————————Node:field_expression Text: DEBUGSERIAL.print
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: print
|——————————————Node:argument_list Text: (",mizwmn=")
|———————————————Node:( Text: (
|———————————————Node:string_literal Text: ",mizwmn="
|————————————————Node:" Text: "
|————————————————Node:string_content Text: ,mizwmn=
|————————————————Node:" Text: "
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: DEBUGSERIAL.print(can245.mizwmn);
|—————————————Node:call_expression Text: DEBUGSERIAL.print(can245.mizwmn)
|——————————————Node:field_expression Text: DEBUGSERIAL.print
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: print
|——————————————Node:argument_list Text: (can245.mizwmn)
|———————————————Node:( Text: (
|———————————————Node:field_expression Text: can245.mizwmn
|————————————————Node:identifier Text: can245
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: mizwmn
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: DEBUGSERIAL.print(",mimax=");
|—————————————Node:call_expression Text: DEBUGSERIAL.print(",mimax=")
|——————————————Node:field_expression Text: DEBUGSERIAL.print
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: print
|——————————————Node:argument_list Text: (",mimax=")
|———————————————Node:( Text: (
|———————————————Node:string_literal Text: ",mimax="
|————————————————Node:" Text: "
|————————————————Node:string_content Text: ,mimax=
|————————————————Node:" Text: "
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: DEBUGSERIAL.print(can245.mimax);
|—————————————Node:call_expression Text: DEBUGSERIAL.print(can245.mimax)
|——————————————Node:field_expression Text: DEBUGSERIAL.print
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: print
|——————————————Node:argument_list Text: (can245.mimax)
|———————————————Node:( Text: (
|———————————————Node:field_expression Text: can245.mimax
|————————————————Node:identifier Text: can245
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: mimax
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: DEBUGSERIAL.print(",misol=");
|—————————————Node:call_expression Text: DEBUGSERIAL.print(",misol=")
|——————————————Node:field_expression Text: DEBUGSERIAL.print
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: print
|——————————————Node:argument_list Text: (",misol=")
|———————————————Node:( Text: (
|———————————————Node:string_literal Text: ",misol="
|————————————————Node:" Text: "
|————————————————Node:string_content Text: ,misol=
|————————————————Node:" Text: "
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: DEBUGSERIAL.print(can245.misol);
|—————————————Node:call_expression Text: DEBUGSERIAL.print(can245.misol)
|——————————————Node:field_expression Text: DEBUGSERIAL.print
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: print
|——————————————Node:argument_list Text: (can245.misol)
|———————————————Node:( Text: (
|———————————————Node:field_expression Text: can245.misol
|————————————————Node:identifier Text: can245
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: misol
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:expression_statement Text: DEBUGSERIAL.println("");
|—————————————Node:call_expression Text: DEBUGSERIAL.println("")
|——————————————Node:field_expression Text: DEBUGSERIAL.println
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: println
|——————————————Node:argument_list Text: ("")
|———————————————Node:( Text: (
|———————————————Node:string_literal Text: ""
|————————————————Node:" Text: "
|————————————————Node:" Text: "
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:#endif Text: #endif
|———————————Node:expression_statement Text: receivedintime = true;
|————————————Node:assignment_expression Text: receivedintime = true
|—————————————Node:identifier Text: receivedintime
|—————————————Node:= Text: =
|—————————————Node:true Text: true
|————————————Node:; Text: ;
|———————————Node:break_statement Text: break;
|————————————Node:break Text: break
|————————————Node:; Text: ;
|———————————Node:} Text: }
|—————————Node:} Text: }
|———————Node:} Text: }
|——————Node:while Text: while
|——————Node:parenthesized_expression Text: (millis() - start < duration)
|———————Node:( Text: (
|———————Node:binary_expression Text: millis() - start < duration
|————————Node:binary_expression Text: millis() - start
|—————————Node:call_expression Text: millis()
|——————————Node:identifier Text: millis
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:- Text: -
|—————————Node:identifier Text: start
|————————Node:< Text: <
|————————Node:identifier Text: duration
|———————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: sndStat = CAN0.setMode(MCP_NORMAL);
|——————Node:assignment_expression Text: sndStat = CAN0.setMode(MCP_NORMAL)
|———————Node:identifier Text: sndStat
|———————Node:= Text: =
|———————Node:call_expression Text: CAN0.setMode(MCP_NORMAL)
|————————Node:field_expression Text: CAN0.setMode
|—————————Node:identifier Text: CAN0
|—————————Node:. Text: .
|—————————Node:field_identifier Text: setMode
|————————Node:argument_list Text: (MCP_NORMAL)
|—————————Node:( Text: (
|—————————Node:identifier Text: MCP_NORMAL
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment Text: //CAN_Spi_UnSelect();
|—————Node:if_statement Text: if (!receivedintime) {
#ifdef	MCP_STDERR
		MCP_STDERR.println("Timout reading CAN_ANTRIEB245");
#endif
	}
|——————Node:if Text: if
|——————Node:condition_clause Text: (!receivedintime)
|———————Node:( Text: (
|———————Node:unary_expression Text: !receivedintime
|————————Node:! Text: !
|————————Node:identifier Text: receivedintime
|———————Node:) Text: )
|——————Node:compound_statement Text: {
#ifdef	MCP_STDERR
		MCP_STDERR.println("Timout reading CAN_ANTRIEB245");
#endif
	}
|———————Node:{ Text: {
|———————Node:preproc_ifdef Text: #ifdef	MCP_STDERR
		MCP_STDERR.println("Timout reading CAN_ANTRIEB245");
#endif
|————————Node:#ifdef Text: #ifdef
|————————Node:identifier Text: MCP_STDERR
|————————Node:expression_statement Text: MCP_STDERR.println("Timout reading CAN_ANTRIEB245");
|—————————Node:call_expression Text: MCP_STDERR.println("Timout reading CAN_ANTRIEB245")
|——————————Node:field_expression Text: MCP_STDERR.println
|———————————Node:identifier Text: MCP_STDERR
|———————————Node:. Text: .
|———————————Node:field_identifier Text: println
|——————————Node:argument_list Text: ("Timout reading CAN_ANTRIEB245")
|———————————Node:( Text: (
|———————————Node:string_literal Text: "Timout reading CAN_ANTRIEB245"
|————————————Node:" Text: "
|————————————Node:string_content Text: Timout reading CAN_ANTRIEB245
|————————————Node:" Text: "
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:#endif Text: #endif
|———————Node:} Text: }
|—————Node:return_statement Text: return sndStat;
|——————Node:return Text: return
|——————Node:identifier Text: sndStat
|——————Node:; Text: ;
|—————Node:} Text: }
|——Node:#endif Text: #endif
|—Node:preproc_ifdef Text: #ifdef FUNCS_CAN_REMOTEREQUEST
INT8U SendRemoteRequest(int txid) {
	INT8U sndStat = CAN_FAIL;
	sndStat = CAN_SetMode(MCP_NORMAL);
	if (sndStat != CAN_OK) return sndStat;
	sndStat = CAN_SendMsg(txid | CAN_REMOTEREQUEST, 8, canbuf);
	return sndStat;
}

INT8U getRemoteRequest(long duration, int txId) {
	INT8U sndStat = CAN_FAIL;
	sndStat = CAN_SetMode(MCP_LISTENONLY);
	if (sndStat != CAN_OK) return sndStat;
	txId |= CAN_REMOTEREQUEST;
	long start = millis();
	bool receivedintime = false;
	do {
		if (!digitalRead(CAN0_INT))                         // If CAN0_INT pin is low, read receive buffer
		{
			sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);
			if (sndStat != CAN_OK) continue;
			if (rxId == txId ) {
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("RECEIVED: CAN_REMOTEREQUEST(0x");
				int realid = rxId ^ CAN_REMOTEREQUEST;
				if(realid==CAN_PRIVATE1)DEBUGSERIAL.print("CAN_PRIVATE1");
				else if(realid == CAN_PRIVATE2) DEBUGSERIAL.print("CAN_PRIVATE1");
				else DEBUGSERIAL.print(realid, HEX);
				DEBUGSERIAL.println(")");
#endif
				receivedintime = true;
				break;
			}
		}
	} while (millis() - start < duration);
	CAN_Spi_UnSelect();

	if (!receivedintime) {
#ifdef	MCP_STDERR
		MCP_STDERR.print("TIMEOUT WAITING FOR REMOTEREQUEST ");
		int realid = rxId ^ CAN_REMOTEREQUEST;
		if (realid == CAN_PRIVATE1)MCP_STDERR.print("CAN_PRIVATE1");
		else if (realid == CAN_PRIVATE2) MCP_STDERR.print("CAN_PRIVATE1");
		else MCP_STDERR.print(realid);
		MCP_STDERR.println(")");
#endif
	}
	return sndStat;
}
#endif
|——Node:#ifdef Text: #ifdef
|——Node:identifier Text: FUNCS_CAN_REMOTEREQUEST
|——Node:function_definition Text: INT8U SendRemoteRequest(int txid) {
	INT8U sndStat = CAN_FAIL;
	sndStat = CAN_SetMode(MCP_NORMAL);
	if (sndStat != CAN_OK) return sndStat;
	sndStat = CAN_SendMsg(txid | CAN_REMOTEREQUEST, 8, canbuf);
	return sndStat;
}
|———Node:type_identifier Text: INT8U
|———Node:function_declarator Text: SendRemoteRequest(int txid)
|————Node:identifier Text: SendRemoteRequest
|————Node:parameter_list Text: (int txid)
|—————Node:( Text: (
|—————Node:parameter_declaration Text: int txid
|——————Node:primitive_type Text: int
|——————Node:identifier Text: txid
|—————Node:) Text: )
|———Node:compound_statement Text: {
	INT8U sndStat = CAN_FAIL;
	sndStat = CAN_SetMode(MCP_NORMAL);
	if (sndStat != CAN_OK) return sndStat;
	sndStat = CAN_SendMsg(txid | CAN_REMOTEREQUEST, 8, canbuf);
	return sndStat;
}
|————Node:{ Text: {
|————Node:declaration Text: INT8U sndStat = CAN_FAIL;
|—————Node:type_identifier Text: INT8U
|—————Node:init_declarator Text: sndStat = CAN_FAIL
|——————Node:identifier Text: sndStat
|——————Node:= Text: =
|——————Node:identifier Text: CAN_FAIL
|—————Node:; Text: ;
|————Node:expression_statement Text: sndStat = CAN_SetMode(MCP_NORMAL);
|—————Node:assignment_expression Text: sndStat = CAN_SetMode(MCP_NORMAL)
|——————Node:identifier Text: sndStat
|——————Node:= Text: =
|——————Node:call_expression Text: CAN_SetMode(MCP_NORMAL)
|———————Node:identifier Text: CAN_SetMode
|———————Node:argument_list Text: (MCP_NORMAL)
|————————Node:( Text: (
|————————Node:identifier Text: MCP_NORMAL
|————————Node:) Text: )
|—————Node:; Text: ;
|————Node:if_statement Text: if (sndStat != CAN_OK) return sndStat;
|—————Node:if Text: if
|—————Node:condition_clause Text: (sndStat != CAN_OK)
|——————Node:( Text: (
|——————Node:binary_expression Text: sndStat != CAN_OK
|———————Node:identifier Text: sndStat
|———————Node:!= Text: !=
|———————Node:identifier Text: CAN_OK
|——————Node:) Text: )
|—————Node:return_statement Text: return sndStat;
|——————Node:return Text: return
|——————Node:identifier Text: sndStat
|——————Node:; Text: ;
|————Node:expression_statement Text: sndStat = CAN_SendMsg(txid | CAN_REMOTEREQUEST, 8, canbuf);
|—————Node:assignment_expression Text: sndStat = CAN_SendMsg(txid | CAN_REMOTEREQUEST, 8, canbuf)
|——————Node:identifier Text: sndStat
|——————Node:= Text: =
|——————Node:call_expression Text: CAN_SendMsg(txid | CAN_REMOTEREQUEST, 8, canbuf)
|———————Node:identifier Text: CAN_SendMsg
|———————Node:argument_list Text: (txid | CAN_REMOTEREQUEST, 8, canbuf)
|————————Node:( Text: (
|————————Node:binary_expression Text: txid | CAN_REMOTEREQUEST
|—————————Node:identifier Text: txid
|—————————Node:| Text: |
|—————————Node:identifier Text: CAN_REMOTEREQUEST
|————————Node:, Text: ,
|————————Node:number_literal Text: 8
|————————Node:, Text: ,
|————————Node:identifier Text: canbuf
|————————Node:) Text: )
|—————Node:; Text: ;
|————Node:return_statement Text: return sndStat;
|—————Node:return Text: return
|—————Node:identifier Text: sndStat
|—————Node:; Text: ;
|————Node:} Text: }
|——Node:function_definition Text: INT8U getRemoteRequest(long duration, int txId) {
	INT8U sndStat = CAN_FAIL;
	sndStat = CAN_SetMode(MCP_LISTENONLY);
	if (sndStat != CAN_OK) return sndStat;
	txId |= CAN_REMOTEREQUEST;
	long start = millis();
	bool receivedintime = false;
	do {
		if (!digitalRead(CAN0_INT))                         // If CAN0_INT pin is low, read receive buffer
		{
			sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);
			if (sndStat != CAN_OK) continue;
			if (rxId == txId ) {
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("RECEIVED: CAN_REMOTEREQUEST(0x");
				int realid = rxId ^ CAN_REMOTEREQUEST;
				if(realid==CAN_PRIVATE1)DEBUGSERIAL.print("CAN_PRIVATE1");
				else if(realid == CAN_PRIVATE2) DEBUGSERIAL.print("CAN_PRIVATE1");
				else DEBUGSERIAL.print(realid, HEX);
				DEBUGSERIAL.println(")");
#endif
				receivedintime = true;
				break;
			}
		}
	} while (millis() - start < duration);
	CAN_Spi_UnSelect();

	if (!receivedintime) {
#ifdef	MCP_STDERR
		MCP_STDERR.print("TIMEOUT WAITING FOR REMOTEREQUEST ");
		int realid = rxId ^ CAN_REMOTEREQUEST;
		if (realid == CAN_PRIVATE1)MCP_STDERR.print("CAN_PRIVATE1");
		else if (realid == CAN_PRIVATE2) MCP_STDERR.print("CAN_PRIVATE1");
		else MCP_STDERR.print(realid);
		MCP_STDERR.println(")");
#endif
	}
	return sndStat;
}
|———Node:type_identifier Text: INT8U
|———Node:function_declarator Text: getRemoteRequest(long duration, int txId)
|————Node:identifier Text: getRemoteRequest
|————Node:parameter_list Text: (long duration, int txId)
|—————Node:( Text: (
|—————Node:parameter_declaration Text: long duration
|——————Node:sized_type_specifier Text: long
|———————Node:long Text: long
|——————Node:identifier Text: duration
|—————Node:, Text: ,
|—————Node:parameter_declaration Text: int txId
|——————Node:primitive_type Text: int
|——————Node:identifier Text: txId
|—————Node:) Text: )
|———Node:compound_statement Text: {
	INT8U sndStat = CAN_FAIL;
	sndStat = CAN_SetMode(MCP_LISTENONLY);
	if (sndStat != CAN_OK) return sndStat;
	txId |= CAN_REMOTEREQUEST;
	long start = millis();
	bool receivedintime = false;
	do {
		if (!digitalRead(CAN0_INT))                         // If CAN0_INT pin is low, read receive buffer
		{
			sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);
			if (sndStat != CAN_OK) continue;
			if (rxId == txId ) {
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("RECEIVED: CAN_REMOTEREQUEST(0x");
				int realid = rxId ^ CAN_REMOTEREQUEST;
				if(realid==CAN_PRIVATE1)DEBUGSERIAL.print("CAN_PRIVATE1");
				else if(realid == CAN_PRIVATE2) DEBUGSERIAL.print("CAN_PRIVATE1");
				else DEBUGSERIAL.print(realid, HEX);
				DEBUGSERIAL.println(")");
#endif
				receivedintime = true;
				break;
			}
		}
	} while (millis() - start < duration);
	CAN_Spi_UnSelect();

	if (!receivedintime) {
#ifdef	MCP_STDERR
		MCP_STDERR.print("TIMEOUT WAITING FOR REMOTEREQUEST ");
		int realid = rxId ^ CAN_REMOTEREQUEST;
		if (realid == CAN_PRIVATE1)MCP_STDERR.print("CAN_PRIVATE1");
		else if (realid == CAN_PRIVATE2) MCP_STDERR.print("CAN_PRIVATE1");
		else MCP_STDERR.print(realid);
		MCP_STDERR.println(")");
#endif
	}
	return sndStat;
}
|————Node:{ Text: {
|————Node:declaration Text: INT8U sndStat = CAN_FAIL;
|—————Node:type_identifier Text: INT8U
|—————Node:init_declarator Text: sndStat = CAN_FAIL
|——————Node:identifier Text: sndStat
|——————Node:= Text: =
|——————Node:identifier Text: CAN_FAIL
|—————Node:; Text: ;
|————Node:expression_statement Text: sndStat = CAN_SetMode(MCP_LISTENONLY);
|—————Node:assignment_expression Text: sndStat = CAN_SetMode(MCP_LISTENONLY)
|——————Node:identifier Text: sndStat
|——————Node:= Text: =
|——————Node:call_expression Text: CAN_SetMode(MCP_LISTENONLY)
|———————Node:identifier Text: CAN_SetMode
|———————Node:argument_list Text: (MCP_LISTENONLY)
|————————Node:( Text: (
|————————Node:identifier Text: MCP_LISTENONLY
|————————Node:) Text: )
|—————Node:; Text: ;
|————Node:if_statement Text: if (sndStat != CAN_OK) return sndStat;
|—————Node:if Text: if
|—————Node:condition_clause Text: (sndStat != CAN_OK)
|——————Node:( Text: (
|——————Node:binary_expression Text: sndStat != CAN_OK
|———————Node:identifier Text: sndStat
|———————Node:!= Text: !=
|———————Node:identifier Text: CAN_OK
|——————Node:) Text: )
|—————Node:return_statement Text: return sndStat;
|——————Node:return Text: return
|——————Node:identifier Text: sndStat
|——————Node:; Text: ;
|————Node:expression_statement Text: txId |= CAN_REMOTEREQUEST;
|—————Node:assignment_expression Text: txId |= CAN_REMOTEREQUEST
|——————Node:identifier Text: txId
|——————Node:|= Text: |=
|——————Node:identifier Text: CAN_REMOTEREQUEST
|—————Node:; Text: ;
|————Node:declaration Text: long start = millis();
|—————Node:sized_type_specifier Text: long
|——————Node:long Text: long
|—————Node:init_declarator Text: start = millis()
|——————Node:identifier Text: start
|——————Node:= Text: =
|——————Node:call_expression Text: millis()
|———————Node:identifier Text: millis
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|—————Node:; Text: ;
|————Node:declaration Text: bool receivedintime = false;
|—————Node:primitive_type Text: bool
|—————Node:init_declarator Text: receivedintime = false
|——————Node:identifier Text: receivedintime
|——————Node:= Text: =
|——————Node:false Text: false
|—————Node:; Text: ;
|————Node:do_statement Text: do {
		if (!digitalRead(CAN0_INT))                         // If CAN0_INT pin is low, read receive buffer
		{
			sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);
			if (sndStat != CAN_OK) continue;
			if (rxId == txId ) {
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("RECEIVED: CAN_REMOTEREQUEST(0x");
				int realid = rxId ^ CAN_REMOTEREQUEST;
				if(realid==CAN_PRIVATE1)DEBUGSERIAL.print("CAN_PRIVATE1");
				else if(realid == CAN_PRIVATE2) DEBUGSERIAL.print("CAN_PRIVATE1");
				else DEBUGSERIAL.print(realid, HEX);
				DEBUGSERIAL.println(")");
#endif
				receivedintime = true;
				break;
			}
		}
	} while (millis() - start < duration);
|—————Node:do Text: do
|—————Node:compound_statement Text: {
		if (!digitalRead(CAN0_INT))                         // If CAN0_INT pin is low, read receive buffer
		{
			sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);
			if (sndStat != CAN_OK) continue;
			if (rxId == txId ) {
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("RECEIVED: CAN_REMOTEREQUEST(0x");
				int realid = rxId ^ CAN_REMOTEREQUEST;
				if(realid==CAN_PRIVATE1)DEBUGSERIAL.print("CAN_PRIVATE1");
				else if(realid == CAN_PRIVATE2) DEBUGSERIAL.print("CAN_PRIVATE1");
				else DEBUGSERIAL.print(realid, HEX);
				DEBUGSERIAL.println(")");
#endif
				receivedintime = true;
				break;
			}
		}
	}
|——————Node:{ Text: {
|——————Node:if_statement Text: if (!digitalRead(CAN0_INT))                         // If CAN0_INT pin is low, read receive buffer
		{
			sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);
			if (sndStat != CAN_OK) continue;
			if (rxId == txId ) {
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("RECEIVED: CAN_REMOTEREQUEST(0x");
				int realid = rxId ^ CAN_REMOTEREQUEST;
				if(realid==CAN_PRIVATE1)DEBUGSERIAL.print("CAN_PRIVATE1");
				else if(realid == CAN_PRIVATE2) DEBUGSERIAL.print("CAN_PRIVATE1");
				else DEBUGSERIAL.print(realid, HEX);
				DEBUGSERIAL.println(")");
#endif
				receivedintime = true;
				break;
			}
		}
|———————Node:if Text: if
|———————Node:condition_clause Text: (!digitalRead(CAN0_INT))
|————————Node:( Text: (
|————————Node:unary_expression Text: !digitalRead(CAN0_INT)
|—————————Node:! Text: !
|—————————Node:call_expression Text: digitalRead(CAN0_INT)
|——————————Node:identifier Text: digitalRead
|——————————Node:argument_list Text: (CAN0_INT)
|———————————Node:( Text: (
|———————————Node:identifier Text: CAN0_INT
|———————————Node:) Text: )
|————————Node:) Text: )
|———————Node:comment Text: // If CAN0_INT pin is low, read receive buffer
|———————Node:compound_statement Text: {
			sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);
			if (sndStat != CAN_OK) continue;
			if (rxId == txId ) {
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("RECEIVED: CAN_REMOTEREQUEST(0x");
				int realid = rxId ^ CAN_REMOTEREQUEST;
				if(realid==CAN_PRIVATE1)DEBUGSERIAL.print("CAN_PRIVATE1");
				else if(realid == CAN_PRIVATE2) DEBUGSERIAL.print("CAN_PRIVATE1");
				else DEBUGSERIAL.print(realid, HEX);
				DEBUGSERIAL.println(")");
#endif
				receivedintime = true;
				break;
			}
		}
|————————Node:{ Text: {
|————————Node:expression_statement Text: sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf);
|—————————Node:assignment_expression Text: sndStat = CAN0.readMsgBuf(&rxId, &len, canbuf)
|——————————Node:identifier Text: sndStat
|——————————Node:= Text: =
|——————————Node:call_expression Text: CAN0.readMsgBuf(&rxId, &len, canbuf)
|———————————Node:field_expression Text: CAN0.readMsgBuf
|————————————Node:identifier Text: CAN0
|————————————Node:. Text: .
|————————————Node:field_identifier Text: readMsgBuf
|———————————Node:argument_list Text: (&rxId, &len, canbuf)
|————————————Node:( Text: (
|————————————Node:pointer_expression Text: &rxId
|—————————————Node:& Text: &
|—————————————Node:identifier Text: rxId
|————————————Node:, Text: ,
|————————————Node:pointer_expression Text: &len
|—————————————Node:& Text: &
|—————————————Node:identifier Text: len
|————————————Node:, Text: ,
|————————————Node:identifier Text: canbuf
|————————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:if_statement Text: if (sndStat != CAN_OK) continue;
|—————————Node:if Text: if
|—————————Node:condition_clause Text: (sndStat != CAN_OK)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: sndStat != CAN_OK
|———————————Node:identifier Text: sndStat
|———————————Node:!= Text: !=
|———————————Node:identifier Text: CAN_OK
|——————————Node:) Text: )
|—————————Node:continue_statement Text: continue;
|——————————Node:continue Text: continue
|——————————Node:; Text: ;
|————————Node:if_statement Text: if (rxId == txId ) {
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("RECEIVED: CAN_REMOTEREQUEST(0x");
				int realid = rxId ^ CAN_REMOTEREQUEST;
				if(realid==CAN_PRIVATE1)DEBUGSERIAL.print("CAN_PRIVATE1");
				else if(realid == CAN_PRIVATE2) DEBUGSERIAL.print("CAN_PRIVATE1");
				else DEBUGSERIAL.print(realid, HEX);
				DEBUGSERIAL.println(")");
#endif
				receivedintime = true;
				break;
			}
|—————————Node:if Text: if
|—————————Node:condition_clause Text: (rxId == txId )
|——————————Node:( Text: (
|——————————Node:binary_expression Text: rxId == txId
|———————————Node:identifier Text: rxId
|———————————Node:== Text: ==
|———————————Node:identifier Text: txId
|——————————Node:) Text: )
|—————————Node:compound_statement Text: {
#ifdef DEBUGSERIAL
				DEBUGSERIAL.print("RECEIVED: CAN_REMOTEREQUEST(0x");
				int realid = rxId ^ CAN_REMOTEREQUEST;
				if(realid==CAN_PRIVATE1)DEBUGSERIAL.print("CAN_PRIVATE1");
				else if(realid == CAN_PRIVATE2) DEBUGSERIAL.print("CAN_PRIVATE1");
				else DEBUGSERIAL.print(realid, HEX);
				DEBUGSERIAL.println(")");
#endif
				receivedintime = true;
				break;
			}
|——————————Node:{ Text: {
|——————————Node:preproc_ifdef Text: #ifdef DEBUGSERIAL
				DEBUGSERIAL.print("RECEIVED: CAN_REMOTEREQUEST(0x");
				int realid = rxId ^ CAN_REMOTEREQUEST;
				if(realid==CAN_PRIVATE1)DEBUGSERIAL.print("CAN_PRIVATE1");
				else if(realid == CAN_PRIVATE2) DEBUGSERIAL.print("CAN_PRIVATE1");
				else DEBUGSERIAL.print(realid, HEX);
				DEBUGSERIAL.println(")");
#endif
|———————————Node:#ifdef Text: #ifdef
|———————————Node:identifier Text: DEBUGSERIAL
|———————————Node:expression_statement Text: DEBUGSERIAL.print("RECEIVED: CAN_REMOTEREQUEST(0x");
|————————————Node:call_expression Text: DEBUGSERIAL.print("RECEIVED: CAN_REMOTEREQUEST(0x")
|—————————————Node:field_expression Text: DEBUGSERIAL.print
|——————————————Node:identifier Text: DEBUGSERIAL
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: print
|—————————————Node:argument_list Text: ("RECEIVED: CAN_REMOTEREQUEST(0x")
|——————————————Node:( Text: (
|——————————————Node:string_literal Text: "RECEIVED: CAN_REMOTEREQUEST(0x"
|———————————————Node:" Text: "
|———————————————Node:string_content Text: RECEIVED: CAN_REMOTEREQUEST(0x
|———————————————Node:" Text: "
|——————————————Node:) Text: )
|————————————Node:; Text: ;
|———————————Node:declaration Text: int realid = rxId ^ CAN_REMOTEREQUEST;
|————————————Node:primitive_type Text: int
|————————————Node:init_declarator Text: realid = rxId ^ CAN_REMOTEREQUEST
|—————————————Node:identifier Text: realid
|—————————————Node:= Text: =
|—————————————Node:binary_expression Text: rxId ^ CAN_REMOTEREQUEST
|——————————————Node:identifier Text: rxId
|——————————————Node:^ Text: ^
|——————————————Node:identifier Text: CAN_REMOTEREQUEST
|————————————Node:; Text: ;
|———————————Node:if_statement Text: if(realid==CAN_PRIVATE1)DEBUGSERIAL.print("CAN_PRIVATE1");
				else if(realid == CAN_PRIVATE2) DEBUGSERIAL.print("CAN_PRIVATE1");
				else DEBUGSERIAL.print(realid, HEX);
|————————————Node:if Text: if
|————————————Node:condition_clause Text: (realid==CAN_PRIVATE1)
|—————————————Node:( Text: (
|—————————————Node:binary_expression Text: realid==CAN_PRIVATE1
|——————————————Node:identifier Text: realid
|——————————————Node:== Text: ==
|——————————————Node:identifier Text: CAN_PRIVATE1
|—————————————Node:) Text: )
|————————————Node:expression_statement Text: DEBUGSERIAL.print("CAN_PRIVATE1");
|—————————————Node:call_expression Text: DEBUGSERIAL.print("CAN_PRIVATE1")
|——————————————Node:field_expression Text: DEBUGSERIAL.print
|———————————————Node:identifier Text: DEBUGSERIAL
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: print
|——————————————Node:argument_list Text: ("CAN_PRIVATE1")
|———————————————Node:( Text: (
|———————————————Node:string_literal Text: "CAN_PRIVATE1"
|————————————————Node:" Text: "
|————————————————Node:string_content Text: CAN_PRIVATE1
|————————————————Node:" Text: "
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:else_clause Text: else if(realid == CAN_PRIVATE2) DEBUGSERIAL.print("CAN_PRIVATE1");
				else DEBUGSERIAL.print(realid, HEX);
|—————————————Node:else Text: else
|—————————————Node:if_statement Text: if(realid == CAN_PRIVATE2) DEBUGSERIAL.print("CAN_PRIVATE1");
				else DEBUGSERIAL.print(realid, HEX);
|——————————————Node:if Text: if
|——————————————Node:condition_clause Text: (realid == CAN_PRIVATE2)
|———————————————Node:( Text: (
|———————————————Node:binary_expression Text: realid == CAN_PRIVATE2
|————————————————Node:identifier Text: realid
|————————————————Node:== Text: ==
|————————————————Node:identifier Text: CAN_PRIVATE2
|———————————————Node:) Text: )
|——————————————Node:expression_statement Text: DEBUGSERIAL.print("CAN_PRIVATE1");
|———————————————Node:call_expression Text: DEBUGSERIAL.print("CAN_PRIVATE1")
|————————————————Node:field_expression Text: DEBUGSERIAL.print
|—————————————————Node:identifier Text: DEBUGSERIAL
|—————————————————Node:. Text: .
|—————————————————Node:field_identifier Text: print
|————————————————Node:argument_list Text: ("CAN_PRIVATE1")
|—————————————————Node:( Text: (
|—————————————————Node:string_literal Text: "CAN_PRIVATE1"
|——————————————————Node:" Text: "
|——————————————————Node:string_content Text: CAN_PRIVATE1
|——————————————————Node:" Text: "
|—————————————————Node:) Text: )
|———————————————Node:; Text: ;
|——————————————Node:else_clause Text: else DEBUGSERIAL.print(realid, HEX);
|———————————————Node:else Text: else
|———————————————Node:expression_statement Text: DEBUGSERIAL.print(realid, HEX);
|————————————————Node:call_expression Text: DEBUGSERIAL.print(realid, HEX)
|—————————————————Node:field_expression Text: DEBUGSERIAL.print
|——————————————————Node:identifier Text: DEBUGSERIAL
|——————————————————Node:. Text: .
|——————————————————Node:field_identifier Text: print
|—————————————————Node:argument_list Text: (realid, HEX)
|——————————————————Node:( Text: (
|——————————————————Node:identifier Text: realid
|——————————————————Node:, Text: ,
|——————————————————Node:identifier Text: HEX
|——————————————————Node:) Text: )
|————————————————Node:; Text: ;
|———————————Node:expression_statement Text: DEBUGSERIAL.println(")");
|————————————Node:call_expression Text: DEBUGSERIAL.println(")")
|—————————————Node:field_expression Text: DEBUGSERIAL.println
|——————————————Node:identifier Text: DEBUGSERIAL
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: println
|—————————————Node:argument_list Text: (")")
|——————————————Node:( Text: (
|——————————————Node:string_literal Text: ")"
|———————————————Node:" Text: "
|———————————————Node:string_content Text: )
|———————————————Node:" Text: "
|——————————————Node:) Text: )
|————————————Node:; Text: ;
|———————————Node:#endif Text: #endif
|——————————Node:expression_statement Text: receivedintime = true;
|———————————Node:assignment_expression Text: receivedintime = true
|————————————Node:identifier Text: receivedintime
|————————————Node:= Text: =
|————————————Node:true Text: true
|———————————Node:; Text: ;
|——————————Node:break_statement Text: break;
|———————————Node:break Text: break
|———————————Node:; Text: ;
|——————————Node:} Text: }
|————————Node:} Text: }
|——————Node:} Text: }
|—————Node:while Text: while
|—————Node:parenthesized_expression Text: (millis() - start < duration)
|——————Node:( Text: (
|——————Node:binary_expression Text: millis() - start < duration
|———————Node:binary_expression Text: millis() - start
|————————Node:call_expression Text: millis()
|—————————Node:identifier Text: millis
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:- Text: -
|————————Node:identifier Text: start
|———————Node:< Text: <
|———————Node:identifier Text: duration
|——————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: CAN_Spi_UnSelect();
|—————Node:call_expression Text: CAN_Spi_UnSelect()
|——————Node:identifier Text: CAN_Spi_UnSelect
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:if_statement Text: if (!receivedintime) {
#ifdef	MCP_STDERR
		MCP_STDERR.print("TIMEOUT WAITING FOR REMOTEREQUEST ");
		int realid = rxId ^ CAN_REMOTEREQUEST;
		if (realid == CAN_PRIVATE1)MCP_STDERR.print("CAN_PRIVATE1");
		else if (realid == CAN_PRIVATE2) MCP_STDERR.print("CAN_PRIVATE1");
		else MCP_STDERR.print(realid);
		MCP_STDERR.println(")");
#endif
	}
|—————Node:if Text: if
|—————Node:condition_clause Text: (!receivedintime)
|——————Node:( Text: (
|——————Node:unary_expression Text: !receivedintime
|———————Node:! Text: !
|———————Node:identifier Text: receivedintime
|——————Node:) Text: )
|—————Node:compound_statement Text: {
#ifdef	MCP_STDERR
		MCP_STDERR.print("TIMEOUT WAITING FOR REMOTEREQUEST ");
		int realid = rxId ^ CAN_REMOTEREQUEST;
		if (realid == CAN_PRIVATE1)MCP_STDERR.print("CAN_PRIVATE1");
		else if (realid == CAN_PRIVATE2) MCP_STDERR.print("CAN_PRIVATE1");
		else MCP_STDERR.print(realid);
		MCP_STDERR.println(")");
#endif
	}
|——————Node:{ Text: {
|——————Node:preproc_ifdef Text: #ifdef	MCP_STDERR
		MCP_STDERR.print("TIMEOUT WAITING FOR REMOTEREQUEST ");
		int realid = rxId ^ CAN_REMOTEREQUEST;
		if (realid == CAN_PRIVATE1)MCP_STDERR.print("CAN_PRIVATE1");
		else if (realid == CAN_PRIVATE2) MCP_STDERR.print("CAN_PRIVATE1");
		else MCP_STDERR.print(realid);
		MCP_STDERR.println(")");
#endif
|———————Node:#ifdef Text: #ifdef
|———————Node:identifier Text: MCP_STDERR
|———————Node:expression_statement Text: MCP_STDERR.print("TIMEOUT WAITING FOR REMOTEREQUEST ");
|————————Node:call_expression Text: MCP_STDERR.print("TIMEOUT WAITING FOR REMOTEREQUEST ")
|—————————Node:field_expression Text: MCP_STDERR.print
|——————————Node:identifier Text: MCP_STDERR
|——————————Node:. Text: .
|——————————Node:field_identifier Text: print
|—————————Node:argument_list Text: ("TIMEOUT WAITING FOR REMOTEREQUEST ")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "TIMEOUT WAITING FOR REMOTEREQUEST "
|———————————Node:" Text: "
|———————————Node:string_content Text: TIMEOUT WAITING FOR REMOTEREQUEST 
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:declaration Text: int realid = rxId ^ CAN_REMOTEREQUEST;
|————————Node:primitive_type Text: int
|————————Node:init_declarator Text: realid = rxId ^ CAN_REMOTEREQUEST
|—————————Node:identifier Text: realid
|—————————Node:= Text: =
|—————————Node:binary_expression Text: rxId ^ CAN_REMOTEREQUEST
|——————————Node:identifier Text: rxId
|——————————Node:^ Text: ^
|——————————Node:identifier Text: CAN_REMOTEREQUEST
|————————Node:; Text: ;
|———————Node:if_statement Text: if (realid == CAN_PRIVATE1)MCP_STDERR.print("CAN_PRIVATE1");
		else if (realid == CAN_PRIVATE2) MCP_STDERR.print("CAN_PRIVATE1");
		else MCP_STDERR.print(realid);
|————————Node:if Text: if
|————————Node:condition_clause Text: (realid == CAN_PRIVATE1)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: realid == CAN_PRIVATE1
|——————————Node:identifier Text: realid
|——————————Node:== Text: ==
|——————————Node:identifier Text: CAN_PRIVATE1
|—————————Node:) Text: )
|————————Node:expression_statement Text: MCP_STDERR.print("CAN_PRIVATE1");
|—————————Node:call_expression Text: MCP_STDERR.print("CAN_PRIVATE1")
|——————————Node:field_expression Text: MCP_STDERR.print
|———————————Node:identifier Text: MCP_STDERR
|———————————Node:. Text: .
|———————————Node:field_identifier Text: print
|——————————Node:argument_list Text: ("CAN_PRIVATE1")
|———————————Node:( Text: (
|———————————Node:string_literal Text: "CAN_PRIVATE1"
|————————————Node:" Text: "
|————————————Node:string_content Text: CAN_PRIVATE1
|————————————Node:" Text: "
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:else_clause Text: else if (realid == CAN_PRIVATE2) MCP_STDERR.print("CAN_PRIVATE1");
		else MCP_STDERR.print(realid);
|—————————Node:else Text: else
|—————————Node:if_statement Text: if (realid == CAN_PRIVATE2) MCP_STDERR.print("CAN_PRIVATE1");
		else MCP_STDERR.print(realid);
|——————————Node:if Text: if
|——————————Node:condition_clause Text: (realid == CAN_PRIVATE2)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: realid == CAN_PRIVATE2
|————————————Node:identifier Text: realid
|————————————Node:== Text: ==
|————————————Node:identifier Text: CAN_PRIVATE2
|———————————Node:) Text: )
|——————————Node:expression_statement Text: MCP_STDERR.print("CAN_PRIVATE1");
|———————————Node:call_expression Text: MCP_STDERR.print("CAN_PRIVATE1")
|————————————Node:field_expression Text: MCP_STDERR.print
|—————————————Node:identifier Text: MCP_STDERR
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: print
|————————————Node:argument_list Text: ("CAN_PRIVATE1")
|—————————————Node:( Text: (
|—————————————Node:string_literal Text: "CAN_PRIVATE1"
|——————————————Node:" Text: "
|——————————————Node:string_content Text: CAN_PRIVATE1
|——————————————Node:" Text: "
|—————————————Node:) Text: )
|———————————Node:; Text: ;
|——————————Node:else_clause Text: else MCP_STDERR.print(realid);
|———————————Node:else Text: else
|———————————Node:expression_statement Text: MCP_STDERR.print(realid);
|————————————Node:call_expression Text: MCP_STDERR.print(realid)
|—————————————Node:field_expression Text: MCP_STDERR.print
|——————————————Node:identifier Text: MCP_STDERR
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: print
|—————————————Node:argument_list Text: (realid)
|——————————————Node:( Text: (
|——————————————Node:identifier Text: realid
|——————————————Node:) Text: )
|————————————Node:; Text: ;
|———————Node:expression_statement Text: MCP_STDERR.println(")");
|————————Node:call_expression Text: MCP_STDERR.println(")")
|—————————Node:field_expression Text: MCP_STDERR.println
|——————————Node:identifier Text: MCP_STDERR
|——————————Node:. Text: .
|——————————Node:field_identifier Text: println
|—————————Node:argument_list Text: (")")
|——————————Node:( Text: (
|——————————Node:string_literal Text: ")"
|———————————Node:" Text: "
|———————————Node:string_content Text: )
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:#endif Text: #endif
|——————Node:} Text: }
|————Node:return_statement Text: return sndStat;
|—————Node:return Text: return
|—————Node:identifier Text: sndStat
|—————Node:; Text: ;
|————Node:} Text: }
|——Node:#endif Text: #endif
