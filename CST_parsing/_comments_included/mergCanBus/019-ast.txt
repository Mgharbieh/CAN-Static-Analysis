mergCanBus-MergCBUS.cpp

|Node:translation_unit
|—Node:preproc_include Text: #include "MergCBUS.h"

|——Node:#include Text: #include
|——Node:string_literal Text: "MergCBUS.h"
|———Node:" Text: "
|———Node:string_content Text: MergCBUS.h
|———Node:" Text: "
|—Node:comment Text: /** \brief
* Constructor
* Create the internal buffers.
* Initiate the memory management and transport object.
*
*/
|—Node:function_definition Text: MergCBUS::MergCBUS(byte num_node_vars,byte num_events,byte num_events_var,byte max_device_numbers)
{
    //ctor
    messageFilter=0;
    bufferIndex=0;
    Can=MCP_CAN();
    msgBuffer=CircularBuffer();
    memory=MergMemoryManagement(num_node_vars,num_events,num_events_var,max_device_numbers);
    nodeId=MergNodeIdentification();
    nodeId.setSuportedEvents(num_events);
    nodeId.setSuportedNodeVariables(num_node_vars);
    nodeId.setSuportedEventsVariables(num_events_var);

    message=Message();
    //skip RESERVED messages
    skipMessage(RESERVED);

    softwareEnum=false;

    //LED vars
    greenLed=255;
    yellowLed=255;
    ledGreenState=HIGH;
    ledYellowState=LOW;
    ledtimer=millis();
    //user handler function var
    userHandler=0;
    //reset function pointer
    resetFunc=0;
    //flag to match if an event is in memory
    eventmatch=false;
    //pusch button vars
    push_button=255;
    pb_state=HIGH;
    std_nn=300;//std node number for a producer
    initMemory();
}
|——Node:function_declarator Text: MergCBUS::MergCBUS(byte num_node_vars,byte num_events,byte num_events_var,byte max_device_numbers)
|———Node:qualified_identifier Text: MergCBUS::MergCBUS
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: MergCBUS
|———Node:parameter_list Text: (byte num_node_vars,byte num_events,byte num_events_var,byte max_device_numbers)
|————Node:( Text: (
|————Node:parameter_declaration Text: byte num_node_vars
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: num_node_vars
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte num_events
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: num_events
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte num_events_var
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: num_events_var
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte max_device_numbers
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: max_device_numbers
|————Node:) Text: )
|——Node:compound_statement Text: {
    //ctor
    messageFilter=0;
    bufferIndex=0;
    Can=MCP_CAN();
    msgBuffer=CircularBuffer();
    memory=MergMemoryManagement(num_node_vars,num_events,num_events_var,max_device_numbers);
    nodeId=MergNodeIdentification();
    nodeId.setSuportedEvents(num_events);
    nodeId.setSuportedNodeVariables(num_node_vars);
    nodeId.setSuportedEventsVariables(num_events_var);

    message=Message();
    //skip RESERVED messages
    skipMessage(RESERVED);

    softwareEnum=false;

    //LED vars
    greenLed=255;
    yellowLed=255;
    ledGreenState=HIGH;
    ledYellowState=LOW;
    ledtimer=millis();
    //user handler function var
    userHandler=0;
    //reset function pointer
    resetFunc=0;
    //flag to match if an event is in memory
    eventmatch=false;
    //pusch button vars
    push_button=255;
    pb_state=HIGH;
    std_nn=300;//std node number for a producer
    initMemory();
}
|———Node:{ Text: {
|———Node:comment Text: //ctor
|———Node:expression_statement Text: messageFilter=0;
|————Node:assignment_expression Text: messageFilter=0
|—————Node:identifier Text: messageFilter
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: bufferIndex=0;
|————Node:assignment_expression Text: bufferIndex=0
|—————Node:identifier Text: bufferIndex
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: Can=MCP_CAN();
|————Node:assignment_expression Text: Can=MCP_CAN()
|—————Node:identifier Text: Can
|—————Node:= Text: =
|—————Node:call_expression Text: MCP_CAN()
|——————Node:identifier Text: MCP_CAN
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: msgBuffer=CircularBuffer();
|————Node:assignment_expression Text: msgBuffer=CircularBuffer()
|—————Node:identifier Text: msgBuffer
|—————Node:= Text: =
|—————Node:call_expression Text: CircularBuffer()
|——————Node:identifier Text: CircularBuffer
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: memory=MergMemoryManagement(num_node_vars,num_events,num_events_var,max_device_numbers);
|————Node:assignment_expression Text: memory=MergMemoryManagement(num_node_vars,num_events,num_events_var,max_device_numbers)
|—————Node:identifier Text: memory
|—————Node:= Text: =
|—————Node:call_expression Text: MergMemoryManagement(num_node_vars,num_events,num_events_var,max_device_numbers)
|——————Node:identifier Text: MergMemoryManagement
|——————Node:argument_list Text: (num_node_vars,num_events,num_events_var,max_device_numbers)
|———————Node:( Text: (
|———————Node:identifier Text: num_node_vars
|———————Node:, Text: ,
|———————Node:identifier Text: num_events
|———————Node:, Text: ,
|———————Node:identifier Text: num_events_var
|———————Node:, Text: ,
|———————Node:identifier Text: max_device_numbers
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: nodeId=MergNodeIdentification();
|————Node:assignment_expression Text: nodeId=MergNodeIdentification()
|—————Node:identifier Text: nodeId
|—————Node:= Text: =
|—————Node:call_expression Text: MergNodeIdentification()
|——————Node:identifier Text: MergNodeIdentification
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: nodeId.setSuportedEvents(num_events);
|————Node:call_expression Text: nodeId.setSuportedEvents(num_events)
|—————Node:field_expression Text: nodeId.setSuportedEvents
|——————Node:identifier Text: nodeId
|——————Node:. Text: .
|——————Node:field_identifier Text: setSuportedEvents
|—————Node:argument_list Text: (num_events)
|——————Node:( Text: (
|——————Node:identifier Text: num_events
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: nodeId.setSuportedNodeVariables(num_node_vars);
|————Node:call_expression Text: nodeId.setSuportedNodeVariables(num_node_vars)
|—————Node:field_expression Text: nodeId.setSuportedNodeVariables
|——————Node:identifier Text: nodeId
|——————Node:. Text: .
|——————Node:field_identifier Text: setSuportedNodeVariables
|—————Node:argument_list Text: (num_node_vars)
|——————Node:( Text: (
|——————Node:identifier Text: num_node_vars
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: nodeId.setSuportedEventsVariables(num_events_var);
|————Node:call_expression Text: nodeId.setSuportedEventsVariables(num_events_var)
|—————Node:field_expression Text: nodeId.setSuportedEventsVariables
|——————Node:identifier Text: nodeId
|——————Node:. Text: .
|——————Node:field_identifier Text: setSuportedEventsVariables
|—————Node:argument_list Text: (num_events_var)
|——————Node:( Text: (
|——————Node:identifier Text: num_events_var
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: message=Message();
|————Node:assignment_expression Text: message=Message()
|—————Node:identifier Text: message
|—————Node:= Text: =
|—————Node:call_expression Text: Message()
|——————Node:identifier Text: Message
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:comment Text: //skip RESERVED messages
|———Node:expression_statement Text: skipMessage(RESERVED);
|————Node:call_expression Text: skipMessage(RESERVED)
|—————Node:identifier Text: skipMessage
|—————Node:argument_list Text: (RESERVED)
|——————Node:( Text: (
|——————Node:identifier Text: RESERVED
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: softwareEnum=false;
|————Node:assignment_expression Text: softwareEnum=false
|—————Node:identifier Text: softwareEnum
|—————Node:= Text: =
|—————Node:false Text: false
|————Node:; Text: ;
|———Node:comment Text: //LED vars
|———Node:expression_statement Text: greenLed=255;
|————Node:assignment_expression Text: greenLed=255
|—————Node:identifier Text: greenLed
|—————Node:= Text: =
|—————Node:number_literal Text: 255
|————Node:; Text: ;
|———Node:expression_statement Text: yellowLed=255;
|————Node:assignment_expression Text: yellowLed=255
|—————Node:identifier Text: yellowLed
|—————Node:= Text: =
|—————Node:number_literal Text: 255
|————Node:; Text: ;
|———Node:expression_statement Text: ledGreenState=HIGH;
|————Node:assignment_expression Text: ledGreenState=HIGH
|—————Node:identifier Text: ledGreenState
|—————Node:= Text: =
|—————Node:identifier Text: HIGH
|————Node:; Text: ;
|———Node:expression_statement Text: ledYellowState=LOW;
|————Node:assignment_expression Text: ledYellowState=LOW
|—————Node:identifier Text: ledYellowState
|—————Node:= Text: =
|—————Node:identifier Text: LOW
|————Node:; Text: ;
|———Node:expression_statement Text: ledtimer=millis();
|————Node:assignment_expression Text: ledtimer=millis()
|—————Node:identifier Text: ledtimer
|—————Node:= Text: =
|—————Node:call_expression Text: millis()
|——————Node:identifier Text: millis
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:comment Text: //user handler function var
|———Node:expression_statement Text: userHandler=0;
|————Node:assignment_expression Text: userHandler=0
|—————Node:identifier Text: userHandler
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment Text: //reset function pointer
|———Node:expression_statement Text: resetFunc=0;
|————Node:assignment_expression Text: resetFunc=0
|—————Node:identifier Text: resetFunc
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment Text: //flag to match if an event is in memory
|———Node:expression_statement Text: eventmatch=false;
|————Node:assignment_expression Text: eventmatch=false
|—————Node:identifier Text: eventmatch
|—————Node:= Text: =
|—————Node:false Text: false
|————Node:; Text: ;
|———Node:comment Text: //pusch button vars
|———Node:expression_statement Text: push_button=255;
|————Node:assignment_expression Text: push_button=255
|—————Node:identifier Text: push_button
|—————Node:= Text: =
|—————Node:number_literal Text: 255
|————Node:; Text: ;
|———Node:expression_statement Text: pb_state=HIGH;
|————Node:assignment_expression Text: pb_state=HIGH
|—————Node:identifier Text: pb_state
|—————Node:= Text: =
|—————Node:identifier Text: HIGH
|————Node:; Text: ;
|———Node:expression_statement Text: std_nn=300;
|————Node:assignment_expression Text: std_nn=300
|—————Node:identifier Text: std_nn
|—————Node:= Text: =
|—————Node:number_literal Text: 300
|————Node:; Text: ;
|———Node:comment Text: //std node number for a producer
|———Node:expression_statement Text: initMemory();
|————Node:call_expression Text: initMemory()
|—————Node:identifier Text: initMemory
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief
* Start the memory reading the EEPROM values
*
*/
|—Node:function_definition Text: void MergCBUS::initMemory(){
    memory.read();
    loadMemory();
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: MergCBUS::initMemory()
|———Node:qualified_identifier Text: MergCBUS::initMemory
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: initMemory
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    memory.read();
    loadMemory();
}
|———Node:{ Text: {
|———Node:expression_statement Text: memory.read();
|————Node:call_expression Text: memory.read()
|—————Node:field_expression Text: memory.read
|——————Node:identifier Text: memory
|——————Node:. Text: .
|——————Node:field_identifier Text: read
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: loadMemory();
|————Node:call_expression Text: loadMemory()
|—————Node:identifier Text: loadMemory
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief
* Load the important EPROM memory data to RAM memory.
*/
|—Node:function_definition Text: void MergCBUS::loadMemory(){
    nodeId.setNodeNumber(memory.getNodeNumber());
    //nodeId.setDeviceNumber(memory.getDeviceNumber());
    nodeId.setCanID(memory.getCanId());
    nodeId.setFlags(memory.getNodeFlag());
    if (nodeId.isSlimMode()){
        node_mode=MTYP_SLIM;
        #ifdef DEBUGDEF
            Serial.println("SLIM mode");
        #endif // DEBUGDEF
    }else{
        node_mode=MTYP_FLIM;
        #ifdef DEBUGDEF
            Serial.println("FLIM mode");
        #endif // DEBUGDEF
    }
    state_mode=NORMAL;
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: MergCBUS::loadMemory()
|———Node:qualified_identifier Text: MergCBUS::loadMemory
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: loadMemory
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    nodeId.setNodeNumber(memory.getNodeNumber());
    //nodeId.setDeviceNumber(memory.getDeviceNumber());
    nodeId.setCanID(memory.getCanId());
    nodeId.setFlags(memory.getNodeFlag());
    if (nodeId.isSlimMode()){
        node_mode=MTYP_SLIM;
        #ifdef DEBUGDEF
            Serial.println("SLIM mode");
        #endif // DEBUGDEF
    }else{
        node_mode=MTYP_FLIM;
        #ifdef DEBUGDEF
            Serial.println("FLIM mode");
        #endif // DEBUGDEF
    }
    state_mode=NORMAL;
}
|———Node:{ Text: {
|———Node:expression_statement Text: nodeId.setNodeNumber(memory.getNodeNumber());
|————Node:call_expression Text: nodeId.setNodeNumber(memory.getNodeNumber())
|—————Node:field_expression Text: nodeId.setNodeNumber
|——————Node:identifier Text: nodeId
|——————Node:. Text: .
|——————Node:field_identifier Text: setNodeNumber
|—————Node:argument_list Text: (memory.getNodeNumber())
|——————Node:( Text: (
|——————Node:call_expression Text: memory.getNodeNumber()
|———————Node:field_expression Text: memory.getNodeNumber
|————————Node:identifier Text: memory
|————————Node:. Text: .
|————————Node:field_identifier Text: getNodeNumber
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment Text: //nodeId.setDeviceNumber(memory.getDeviceNumber());
|———Node:expression_statement Text: nodeId.setCanID(memory.getCanId());
|————Node:call_expression Text: nodeId.setCanID(memory.getCanId())
|—————Node:field_expression Text: nodeId.setCanID
|——————Node:identifier Text: nodeId
|——————Node:. Text: .
|——————Node:field_identifier Text: setCanID
|—————Node:argument_list Text: (memory.getCanId())
|——————Node:( Text: (
|——————Node:call_expression Text: memory.getCanId()
|———————Node:field_expression Text: memory.getCanId
|————————Node:identifier Text: memory
|————————Node:. Text: .
|————————Node:field_identifier Text: getCanId
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: nodeId.setFlags(memory.getNodeFlag());
|————Node:call_expression Text: nodeId.setFlags(memory.getNodeFlag())
|—————Node:field_expression Text: nodeId.setFlags
|——————Node:identifier Text: nodeId
|——————Node:. Text: .
|——————Node:field_identifier Text: setFlags
|—————Node:argument_list Text: (memory.getNodeFlag())
|——————Node:( Text: (
|——————Node:call_expression Text: memory.getNodeFlag()
|———————Node:field_expression Text: memory.getNodeFlag
|————————Node:identifier Text: memory
|————————Node:. Text: .
|————————Node:field_identifier Text: getNodeFlag
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (nodeId.isSlimMode()){
        node_mode=MTYP_SLIM;
        #ifdef DEBUGDEF
            Serial.println("SLIM mode");
        #endif // DEBUGDEF
    }else{
        node_mode=MTYP_FLIM;
        #ifdef DEBUGDEF
            Serial.println("FLIM mode");
        #endif // DEBUGDEF
    }
|————Node:if Text: if
|————Node:condition_clause Text: (nodeId.isSlimMode())
|—————Node:( Text: (
|—————Node:call_expression Text: nodeId.isSlimMode()
|——————Node:field_expression Text: nodeId.isSlimMode
|———————Node:identifier Text: nodeId
|———————Node:. Text: .
|———————Node:field_identifier Text: isSlimMode
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        node_mode=MTYP_SLIM;
        #ifdef DEBUGDEF
            Serial.println("SLIM mode");
        #endif // DEBUGDEF
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: node_mode=MTYP_SLIM;
|——————Node:assignment_expression Text: node_mode=MTYP_SLIM
|———————Node:identifier Text: node_mode
|———————Node:= Text: =
|———————Node:identifier Text: MTYP_SLIM
|——————Node:; Text: ;
|—————Node:preproc_ifdef Text: #ifdef DEBUGDEF
            Serial.println("SLIM mode");
        #endif
|——————Node:#ifdef Text: #ifdef
|——————Node:identifier Text: DEBUGDEF
|——————Node:expression_statement Text: Serial.println("SLIM mode");
|———————Node:call_expression Text: Serial.println("SLIM mode")
|————————Node:field_expression Text: Serial.println
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: println
|————————Node:argument_list Text: ("SLIM mode")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "SLIM mode"
|——————————Node:" Text: "
|——————————Node:string_content Text: SLIM mode
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:#endif Text: #endif
|—————Node:comment Text: // DEBUGDEF
|—————Node:} Text: }
|————Node:else_clause Text: else{
        node_mode=MTYP_FLIM;
        #ifdef DEBUGDEF
            Serial.println("FLIM mode");
        #endif // DEBUGDEF
    }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
        node_mode=MTYP_FLIM;
        #ifdef DEBUGDEF
            Serial.println("FLIM mode");
        #endif // DEBUGDEF
    }
|——————Node:{ Text: {
|——————Node:expression_statement Text: node_mode=MTYP_FLIM;
|———————Node:assignment_expression Text: node_mode=MTYP_FLIM
|————————Node:identifier Text: node_mode
|————————Node:= Text: =
|————————Node:identifier Text: MTYP_FLIM
|———————Node:; Text: ;
|——————Node:preproc_ifdef Text: #ifdef DEBUGDEF
            Serial.println("FLIM mode");
        #endif
|———————Node:#ifdef Text: #ifdef
|———————Node:identifier Text: DEBUGDEF
|———————Node:expression_statement Text: Serial.println("FLIM mode");
|————————Node:call_expression Text: Serial.println("FLIM mode")
|—————————Node:field_expression Text: Serial.println
|——————————Node:identifier Text: Serial
|——————————Node:. Text: .
|——————————Node:field_identifier Text: println
|—————————Node:argument_list Text: ("FLIM mode")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "FLIM mode"
|———————————Node:" Text: "
|———————————Node:string_content Text: FLIM mode
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:#endif Text: #endif
|——————Node:comment Text: // DEBUGDEF
|——————Node:} Text: }
|———Node:expression_statement Text: state_mode=NORMAL;
|————Node:assignment_expression Text: state_mode=NORMAL
|—————Node:identifier Text: state_mode
|—————Node:= Text: =
|—————Node:identifier Text: NORMAL
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: uint16_t MergCBUS::getPromNN(){
    return memory.getNodeNumber();
}
|——Node:primitive_type Text: uint16_t
|——Node:function_declarator Text: MergCBUS::getPromNN()
|———Node:qualified_identifier Text: MergCBUS::getPromNN
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: getPromNN
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    return memory.getNodeNumber();
}
|———Node:{ Text: {
|———Node:return_statement Text: return memory.getNodeNumber();
|————Node:return Text: return
|————Node:call_expression Text: memory.getNodeNumber()
|—————Node:field_expression Text: memory.getNodeNumber
|——————Node:identifier Text: memory
|——————Node:. Text: .
|——————Node:field_identifier Text: getNodeNumber
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: uint16_t MergCBUS::getNN(){
    return nodeId.getNodeNumber();
}
|——Node:primitive_type Text: uint16_t
|——Node:function_declarator Text: MergCBUS::getNN()
|———Node:qualified_identifier Text: MergCBUS::getNN
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: getNN
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    return nodeId.getNodeNumber();
}
|———Node:{ Text: {
|———Node:return_statement Text: return nodeId.getNodeNumber();
|————Node:return Text: return
|————Node:call_expression Text: nodeId.getNodeNumber()
|—————Node:field_expression Text: nodeId.getNodeNumber
|——————Node:identifier Text: nodeId
|——————Node:. Text: .
|——————Node:field_identifier Text: getNodeNumber
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief
* Destructor
* Not used.
*/
|—Node:function_definition Text: MergCBUS::~MergCBUS()
{
    //dtor
}
|——Node:function_declarator Text: MergCBUS::~MergCBUS()
|———Node:qualified_identifier Text: MergCBUS::~MergCBUS
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:destructor_name Text: ~MergCBUS
|—————Node:~ Text: ~
|—————Node:identifier Text: MergCBUS
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    //dtor
}
|———Node:{ Text: {
|———Node:comment Text: //dtor
|———Node:} Text: }
|—Node:comment Text: /** \brief
* Initiate the CanBus layer.
* Set the port number for SPI communication.
* Set the CBUS rate and initiate the transport layer.
* @param port is the the SPI port number.
* @param rate is the can bus rate. The values defined in the can transport layer are
* CAN_5KBPS    1
* CAN_10KBPS   2
* CAN_20KBPS   3
* CAN_31K25BPS 4
* CAN_40KBPS   5
* CAN_50KBPS   6
* CAN_80KBPS   7
* CAN_100KBPS  8
* CAN_125KBPS  9
* CAN_200KBPS  10
* CAN_250KBPS  11
* CAN_500KBPS  12
* CAN_1000KBPS 13
* @param retries is the number of retries to configure the can bus
* @param retryIntervalMilliseconds is the delay in milliseconds between each retry.
*/
|—Node:function_definition Text: bool MergCBUS::initCanBus(uint8_t port,unsigned int rate,unsigned int retries,unsigned int retryIntervalMilliseconds){

    unsigned int r=0;
    Can.set_cs(port);

    do {
        if (CAN_OK==Can.begin(rate)){

            #ifdef DEBUGMSG
                Serial.println("Can rate set");
            #endif // DEBUGDEF
            return true;
        }
        r++;
        delay(retryIntervalMilliseconds);
    }while (r<retries);

    #ifdef DEBUGMSG
                Serial.println("Failed to set Can rate");
    #endif // DEBUGDEF

   return false;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: MergCBUS::initCanBus(uint8_t port,unsigned int rate,unsigned int retries,unsigned int retryIntervalMilliseconds)
|———Node:qualified_identifier Text: MergCBUS::initCanBus
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: initCanBus
|———Node:parameter_list Text: (uint8_t port,unsigned int rate,unsigned int retries,unsigned int retryIntervalMilliseconds)
|————Node:( Text: (
|————Node:parameter_declaration Text: uint8_t port
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: port
|————Node:, Text: ,
|————Node:parameter_declaration Text: unsigned int rate
|—————Node:sized_type_specifier Text: unsigned int
|——————Node:unsigned Text: unsigned
|——————Node:primitive_type Text: int
|—————Node:identifier Text: rate
|————Node:, Text: ,
|————Node:parameter_declaration Text: unsigned int retries
|—————Node:sized_type_specifier Text: unsigned int
|——————Node:unsigned Text: unsigned
|——————Node:primitive_type Text: int
|—————Node:identifier Text: retries
|————Node:, Text: ,
|————Node:parameter_declaration Text: unsigned int retryIntervalMilliseconds
|—————Node:sized_type_specifier Text: unsigned int
|——————Node:unsigned Text: unsigned
|——————Node:primitive_type Text: int
|—————Node:identifier Text: retryIntervalMilliseconds
|————Node:) Text: )
|——Node:compound_statement Text: {

    unsigned int r=0;
    Can.set_cs(port);

    do {
        if (CAN_OK==Can.begin(rate)){

            #ifdef DEBUGMSG
                Serial.println("Can rate set");
            #endif // DEBUGDEF
            return true;
        }
        r++;
        delay(retryIntervalMilliseconds);
    }while (r<retries);

    #ifdef DEBUGMSG
                Serial.println("Failed to set Can rate");
    #endif // DEBUGDEF

   return false;
}
|———Node:{ Text: {
|———Node:declaration Text: unsigned int r=0;
|————Node:sized_type_specifier Text: unsigned int
|—————Node:unsigned Text: unsigned
|—————Node:primitive_type Text: int
|————Node:init_declarator Text: r=0
|—————Node:identifier Text: r
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: Can.set_cs(port);
|————Node:call_expression Text: Can.set_cs(port)
|—————Node:field_expression Text: Can.set_cs
|——————Node:identifier Text: Can
|——————Node:. Text: .
|——————Node:field_identifier Text: set_cs
|—————Node:argument_list Text: (port)
|——————Node:( Text: (
|——————Node:identifier Text: port
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:do_statement Text: do {
        if (CAN_OK==Can.begin(rate)){

            #ifdef DEBUGMSG
                Serial.println("Can rate set");
            #endif // DEBUGDEF
            return true;
        }
        r++;
        delay(retryIntervalMilliseconds);
    }while (r<retries);
|————Node:do Text: do
|————Node:compound_statement Text: {
        if (CAN_OK==Can.begin(rate)){

            #ifdef DEBUGMSG
                Serial.println("Can rate set");
            #endif // DEBUGDEF
            return true;
        }
        r++;
        delay(retryIntervalMilliseconds);
    }
|—————Node:{ Text: {
|—————Node:if_statement Text: if (CAN_OK==Can.begin(rate)){

            #ifdef DEBUGMSG
                Serial.println("Can rate set");
            #endif // DEBUGDEF
            return true;
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (CAN_OK==Can.begin(rate))
|———————Node:( Text: (
|———————Node:binary_expression Text: CAN_OK==Can.begin(rate)
|————————Node:identifier Text: CAN_OK
|————————Node:== Text: ==
|————————Node:call_expression Text: Can.begin(rate)
|—————————Node:field_expression Text: Can.begin
|——————————Node:identifier Text: Can
|——————————Node:. Text: .
|——————————Node:field_identifier Text: begin
|—————————Node:argument_list Text: (rate)
|——————————Node:( Text: (
|——————————Node:identifier Text: rate
|——————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {

            #ifdef DEBUGMSG
                Serial.println("Can rate set");
            #endif // DEBUGDEF
            return true;
        }
|———————Node:{ Text: {
|———————Node:preproc_ifdef Text: #ifdef DEBUGMSG
                Serial.println("Can rate set");
            #endif
|————————Node:#ifdef Text: #ifdef
|————————Node:identifier Text: DEBUGMSG
|————————Node:expression_statement Text: Serial.println("Can rate set");
|—————————Node:call_expression Text: Serial.println("Can rate set")
|——————————Node:field_expression Text: Serial.println
|———————————Node:identifier Text: Serial
|———————————Node:. Text: .
|———————————Node:field_identifier Text: println
|——————————Node:argument_list Text: ("Can rate set")
|———————————Node:( Text: (
|———————————Node:string_literal Text: "Can rate set"
|————————————Node:" Text: "
|————————————Node:string_content Text: Can rate set
|————————————Node:" Text: "
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:#endif Text: #endif
|———————Node:comment Text: // DEBUGDEF
|———————Node:return_statement Text: return true;
|————————Node:return Text: return
|————————Node:true Text: true
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:expression_statement Text: r++;
|——————Node:update_expression Text: r++
|———————Node:identifier Text: r
|———————Node:++ Text: ++
|——————Node:; Text: ;
|—————Node:expression_statement Text: delay(retryIntervalMilliseconds);
|——————Node:call_expression Text: delay(retryIntervalMilliseconds)
|———————Node:identifier Text: delay
|———————Node:argument_list Text: (retryIntervalMilliseconds)
|————————Node:( Text: (
|————————Node:identifier Text: retryIntervalMilliseconds
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:while Text: while
|————Node:parenthesized_expression Text: (r<retries)
|—————Node:( Text: (
|—————Node:binary_expression Text: r<retries
|——————Node:identifier Text: r
|——————Node:< Text: <
|——————Node:identifier Text: retries
|—————Node:) Text: )
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef DEBUGMSG
                Serial.println("Failed to set Can rate");
    #endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: DEBUGMSG
|————Node:expression_statement Text: Serial.println("Failed to set Can rate");
|—————Node:call_expression Text: Serial.println("Failed to set Can rate")
|——————Node:field_expression Text: Serial.println
|———————Node:identifier Text: Serial
|———————Node:. Text: .
|———————Node:field_identifier Text: println
|——————Node:argument_list Text: ("Failed to set Can rate")
|———————Node:( Text: (
|———————Node:string_literal Text: "Failed to set Can rate"
|————————Node:" Text: "
|————————Node:string_content Text: Failed to set Can rate
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:comment Text: // DEBUGDEF
|———Node:return_statement Text: return false;
|————Node:return Text: return
|————Node:false Text: false
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief
* Initiate the CanBus layer with rate 125kps.
* Set the port number for SPI communication.
* @param port is the the SPI port number.
*/
|—Node:function_definition Text: bool MergCBUS::initCanBus(uint8_t port){


    return initCanBus(port,CAN_125KBPS,20,30);
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: MergCBUS::initCanBus(uint8_t port)
|———Node:qualified_identifier Text: MergCBUS::initCanBus
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: initCanBus
|———Node:parameter_list Text: (uint8_t port)
|————Node:( Text: (
|————Node:parameter_declaration Text: uint8_t port
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: port
|————Node:) Text: )
|——Node:compound_statement Text: {


    return initCanBus(port,CAN_125KBPS,20,30);
}
|———Node:{ Text: {
|———Node:return_statement Text: return initCanBus(port,CAN_125KBPS,20,30);
|————Node:return Text: return
|————Node:call_expression Text: initCanBus(port,CAN_125KBPS,20,30)
|—————Node:identifier Text: initCanBus
|—————Node:argument_list Text: (port,CAN_125KBPS,20,30)
|——————Node:( Text: (
|——————Node:identifier Text: port
|——————Node:, Text: ,
|——————Node:identifier Text: CAN_125KBPS
|——————Node:, Text: ,
|——————Node:number_literal Text: 20
|——————Node:, Text: ,
|——————Node:number_literal Text: 30
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief
* Set or unset the bit in the message bit.
* @param pos specifies the bit position @see messageFilter
* @param val if true set bit to 1, else set bit to 0
* @see skipMessage
* @see processMessage
* Internal usage.
*/
|—Node:function_definition Text: void MergCBUS::setBitMessage(byte pos,bool val){
    if (val){
        bitSet(messageFilter,pos);
    }
    else{
        bitClear(messageFilter,pos);
    }
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: MergCBUS::setBitMessage(byte pos,bool val)
|———Node:qualified_identifier Text: MergCBUS::setBitMessage
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: setBitMessage
|———Node:parameter_list Text: (byte pos,bool val)
|————Node:( Text: (
|————Node:parameter_declaration Text: byte pos
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: pos
|————Node:, Text: ,
|————Node:parameter_declaration Text: bool val
|—————Node:primitive_type Text: bool
|—————Node:identifier Text: val
|————Node:) Text: )
|——Node:compound_statement Text: {
    if (val){
        bitSet(messageFilter,pos);
    }
    else{
        bitClear(messageFilter,pos);
    }
}
|———Node:{ Text: {
|———Node:if_statement Text: if (val){
        bitSet(messageFilter,pos);
    }
    else{
        bitClear(messageFilter,pos);
    }
|————Node:if Text: if
|————Node:condition_clause Text: (val)
|—————Node:( Text: (
|—————Node:identifier Text: val
|—————Node:) Text: )
|————Node:compound_statement Text: {
        bitSet(messageFilter,pos);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: bitSet(messageFilter,pos);
|——————Node:call_expression Text: bitSet(messageFilter,pos)
|———————Node:identifier Text: bitSet
|———————Node:argument_list Text: (messageFilter,pos)
|————————Node:( Text: (
|————————Node:identifier Text: messageFilter
|————————Node:, Text: ,
|————————Node:identifier Text: pos
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else{
        bitClear(messageFilter,pos);
    }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
        bitClear(messageFilter,pos);
    }
|——————Node:{ Text: {
|——————Node:expression_statement Text: bitClear(messageFilter,pos);
|———————Node:call_expression Text: bitClear(messageFilter,pos)
|————————Node:identifier Text: bitClear
|————————Node:argument_list Text: (messageFilter,pos)
|—————————Node:( Text: (
|—————————Node:identifier Text: messageFilter
|—————————Node:, Text: ,
|—————————Node:identifier Text: pos
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:} Text: }
|———Node:} Text: }
|—Node:comment Text: /** \brief
* Method that deals with the majority of messages and behavior. Auto enummeration, query requests and config messages.
* If a custom function is set it calls it for every non automatic message.
* @see setUserHandlerFunction
* If the green and yellow leds are set ,it also control the standard their behaviour based on node state.
*/
|—Node:function_definition Text: uint8_t MergCBUS::run(){

    controlLeds();
    controlPushButton();
    uint8_t resp=NO_MESSAGE;
    //unsigned int resp1=NO_MESSAGE;

    if (state_mode==SELF_ENUMERATION){
        unsigned long tdelay=millis()-startTime;
        #ifdef DEBUGDEF
                Serial.println("Processing self ennumeration.");
        #endif // DEBUGDEF

        if (tdelay>SELF_ENUM_TIME){
            #ifdef DEBUGDEF
                Serial.println("Finishing self ennumeration.");
            #endif // DEBUGDEF

            finishSelfEnumeration();
        }
    }

    while (readCanBus()){

        resp=mainProcess();
        if (resp!=OK ){
            if (userHandler!=0){
                userHandler(&message,this);
            }
        }
    }

   /*

    else{
        if (readCanBus(0)==true){
            resp=mainProcess();
        }
        if (readCanBus(1)==true){
           resp1=mainProcess();
        }
        if (resp==OK || resp1==OK){
            return OK;
        }
    }
   */

    return OK;

}
|——Node:primitive_type Text: uint8_t
|——Node:function_declarator Text: MergCBUS::run()
|———Node:qualified_identifier Text: MergCBUS::run
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: run
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {

    controlLeds();
    controlPushButton();
    uint8_t resp=NO_MESSAGE;
    //unsigned int resp1=NO_MESSAGE;

    if (state_mode==SELF_ENUMERATION){
        unsigned long tdelay=millis()-startTime;
        #ifdef DEBUGDEF
                Serial.println("Processing self ennumeration.");
        #endif // DEBUGDEF

        if (tdelay>SELF_ENUM_TIME){
            #ifdef DEBUGDEF
                Serial.println("Finishing self ennumeration.");
            #endif // DEBUGDEF

            finishSelfEnumeration();
        }
    }

    while (readCanBus()){

        resp=mainProcess();
        if (resp!=OK ){
            if (userHandler!=0){
                userHandler(&message,this);
            }
        }
    }

   /*

    else{
        if (readCanBus(0)==true){
            resp=mainProcess();
        }
        if (readCanBus(1)==true){
           resp1=mainProcess();
        }
        if (resp==OK || resp1==OK){
            return OK;
        }
    }
   */

    return OK;

}
|———Node:{ Text: {
|———Node:expression_statement Text: controlLeds();
|————Node:call_expression Text: controlLeds()
|—————Node:identifier Text: controlLeds
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: controlPushButton();
|————Node:call_expression Text: controlPushButton()
|—————Node:identifier Text: controlPushButton
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: uint8_t resp=NO_MESSAGE;
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: resp=NO_MESSAGE
|—————Node:identifier Text: resp
|—————Node:= Text: =
|—————Node:identifier Text: NO_MESSAGE
|————Node:; Text: ;
|———Node:comment Text: //unsigned int resp1=NO_MESSAGE;
|———Node:if_statement Text: if (state_mode==SELF_ENUMERATION){
        unsigned long tdelay=millis()-startTime;
        #ifdef DEBUGDEF
                Serial.println("Processing self ennumeration.");
        #endif // DEBUGDEF

        if (tdelay>SELF_ENUM_TIME){
            #ifdef DEBUGDEF
                Serial.println("Finishing self ennumeration.");
            #endif // DEBUGDEF

            finishSelfEnumeration();
        }
    }
|————Node:if Text: if
|————Node:condition_clause Text: (state_mode==SELF_ENUMERATION)
|—————Node:( Text: (
|—————Node:binary_expression Text: state_mode==SELF_ENUMERATION
|——————Node:identifier Text: state_mode
|——————Node:== Text: ==
|——————Node:identifier Text: SELF_ENUMERATION
|—————Node:) Text: )
|————Node:compound_statement Text: {
        unsigned long tdelay=millis()-startTime;
        #ifdef DEBUGDEF
                Serial.println("Processing self ennumeration.");
        #endif // DEBUGDEF

        if (tdelay>SELF_ENUM_TIME){
            #ifdef DEBUGDEF
                Serial.println("Finishing self ennumeration.");
            #endif // DEBUGDEF

            finishSelfEnumeration();
        }
    }
|—————Node:{ Text: {
|—————Node:declaration Text: unsigned long tdelay=millis()-startTime;
|——————Node:sized_type_specifier Text: unsigned long
|———————Node:unsigned Text: unsigned
|———————Node:long Text: long
|——————Node:init_declarator Text: tdelay=millis()-startTime
|———————Node:identifier Text: tdelay
|———————Node:= Text: =
|———————Node:binary_expression Text: millis()-startTime
|————————Node:call_expression Text: millis()
|—————————Node:identifier Text: millis
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:- Text: -
|————————Node:identifier Text: startTime
|——————Node:; Text: ;
|—————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                Serial.println("Processing self ennumeration.");
        #endif
|——————Node:#ifdef Text: #ifdef
|——————Node:identifier Text: DEBUGDEF
|——————Node:expression_statement Text: Serial.println("Processing self ennumeration.");
|———————Node:call_expression Text: Serial.println("Processing self ennumeration.")
|————————Node:field_expression Text: Serial.println
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: println
|————————Node:argument_list Text: ("Processing self ennumeration.")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Processing self ennumeration."
|——————————Node:" Text: "
|——————————Node:string_content Text: Processing self ennumeration.
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:#endif Text: #endif
|—————Node:comment Text: // DEBUGDEF
|—————Node:if_statement Text: if (tdelay>SELF_ENUM_TIME){
            #ifdef DEBUGDEF
                Serial.println("Finishing self ennumeration.");
            #endif // DEBUGDEF

            finishSelfEnumeration();
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (tdelay>SELF_ENUM_TIME)
|———————Node:( Text: (
|———————Node:binary_expression Text: tdelay>SELF_ENUM_TIME
|————————Node:identifier Text: tdelay
|————————Node:> Text: >
|————————Node:identifier Text: SELF_ENUM_TIME
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            #ifdef DEBUGDEF
                Serial.println("Finishing self ennumeration.");
            #endif // DEBUGDEF

            finishSelfEnumeration();
        }
|———————Node:{ Text: {
|———————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                Serial.println("Finishing self ennumeration.");
            #endif
|————————Node:#ifdef Text: #ifdef
|————————Node:identifier Text: DEBUGDEF
|————————Node:expression_statement Text: Serial.println("Finishing self ennumeration.");
|—————————Node:call_expression Text: Serial.println("Finishing self ennumeration.")
|——————————Node:field_expression Text: Serial.println
|———————————Node:identifier Text: Serial
|———————————Node:. Text: .
|———————————Node:field_identifier Text: println
|——————————Node:argument_list Text: ("Finishing self ennumeration.")
|———————————Node:( Text: (
|———————————Node:string_literal Text: "Finishing self ennumeration."
|————————————Node:" Text: "
|————————————Node:string_content Text: Finishing self ennumeration.
|————————————Node:" Text: "
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:#endif Text: #endif
|———————Node:comment Text: // DEBUGDEF
|———————Node:expression_statement Text: finishSelfEnumeration();
|————————Node:call_expression Text: finishSelfEnumeration()
|—————————Node:identifier Text: finishSelfEnumeration
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:while_statement Text: while (readCanBus()){

        resp=mainProcess();
        if (resp!=OK ){
            if (userHandler!=0){
                userHandler(&message,this);
            }
        }
    }
|————Node:while Text: while
|————Node:condition_clause Text: (readCanBus())
|—————Node:( Text: (
|—————Node:call_expression Text: readCanBus()
|——————Node:identifier Text: readCanBus
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {

        resp=mainProcess();
        if (resp!=OK ){
            if (userHandler!=0){
                userHandler(&message,this);
            }
        }
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: resp=mainProcess();
|——————Node:assignment_expression Text: resp=mainProcess()
|———————Node:identifier Text: resp
|———————Node:= Text: =
|———————Node:call_expression Text: mainProcess()
|————————Node:identifier Text: mainProcess
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (resp!=OK ){
            if (userHandler!=0){
                userHandler(&message,this);
            }
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (resp!=OK )
|———————Node:( Text: (
|———————Node:binary_expression Text: resp!=OK
|————————Node:identifier Text: resp
|————————Node:!= Text: !=
|————————Node:identifier Text: OK
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            if (userHandler!=0){
                userHandler(&message,this);
            }
        }
|———————Node:{ Text: {
|———————Node:if_statement Text: if (userHandler!=0){
                userHandler(&message,this);
            }
|————————Node:if Text: if
|————————Node:condition_clause Text: (userHandler!=0)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: userHandler!=0
|——————————Node:identifier Text: userHandler
|——————————Node:!= Text: !=
|——————————Node:number_literal Text: 0
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
                userHandler(&message,this);
            }
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: userHandler(&message,this);
|——————————Node:call_expression Text: userHandler(&message,this)
|———————————Node:identifier Text: userHandler
|———————————Node:argument_list Text: (&message,this)
|————————————Node:( Text: (
|————————————Node:pointer_expression Text: &message
|—————————————Node:& Text: &
|—————————————Node:identifier Text: message
|————————————Node:, Text: ,
|————————————Node:this Text: this
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:} Text: }
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:comment Text: /*

    else{
        if (readCanBus(0)==true){
            resp=mainProcess();
        }
        if (readCanBus(1)==true){
           resp1=mainProcess();
        }
        if (resp==OK || resp1==OK){
            return OK;
        }
    }
   */
|———Node:return_statement Text: return OK;
|————Node:return Text: return
|————Node:identifier Text: OK
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: uint8_t MergCBUS::mainProcess(){

    if (message.getRTR()){
        //if we are a device with can id
        //we need to answer this message
        #ifdef DEBUGDEF
            Serial.print("RTR message received.");
        #endif // DEBUGDEF

        if (nodeId.getNodeNumber()!=0){
            //create the response message with no data
            #ifdef DEBUGDEF
                Serial.print("RTR message received. Sending can id: ");
                Serial.println(nodeId.getCanID(),HEX);
            #endif // DEBUGDEF

            Can.sendMsgBuf(nodeId.getCanID(),0,0,mergCanData);
            return OK;
        }
    }

    //message for self enumeration
    if (message.getOpc()==OPC_ENUM){

        if (message.getNodeNumber()==nodeId.getNodeNumber()){
            #ifdef DEBUGDEF
                Serial.println("Starting message based self ennumeration.");
            #endif // DEBUGDEF

            doSelfEnnumeration(true);
        }
        return OK;
    }

    //do self enumeration
    //collect the canid from messages with 0 size
    //the state can be a message or manually

    if (state_mode==SELF_ENUMERATION){
        #ifdef DEBUGDEF
            Serial.print("other msg size:");
            Serial.println(message.getCanMessageSize());
        #endif // DEBUGDEF
        if (message.getCanMessageSize()==0){
            #ifdef DEBUGDEF
                Serial.println("Self ennumeration: saving others can id.");
            #endif // DEBUGDEF


            if (bufferIndex<SELF_ENUM_BUFFER_SIZE){
                buffer[bufferIndex]=message.getCanId();
                bufferIndex++;
            }
        }
        return OK;
    }

    if (state_mode==LEARN && node_mode==MTYP_SLIM){
        learnEvent();
        return OK;
    }

    //treat each message individually to interpret the code
        #ifdef DEBUGDEF
            Serial.print("Message type:");
            Serial.print(message.getType());
            Serial.print ("\t OPC:");
            Serial.print(message.getOpc(),HEX);
            Serial.print("\t STATE:");
            Serial.println(state_mode);
        #endif // DEBUGDEF


    switch (message.getType()){
        case (DCC):

            if (dccHandler != 0){
                dccHandler(&message,this);
            }
        break;
        case (ACCESSORY):
             if (nodeId.isConsumerNode()){
                handleACCMessages();
            }
        break;
        case (GENERAL):
             if (nodeId.isConsumerNode()){
                handleGeneralMessages();
            }
        break;
        case (CONFIG):
            return handleConfigMessages();
        break;
        default:
            return UNKNOWN_MSG_TYPE;
    }

    return UNKNOWN_MSG_TYPE;

}
|——Node:primitive_type Text: uint8_t
|——Node:function_declarator Text: MergCBUS::mainProcess()
|———Node:qualified_identifier Text: MergCBUS::mainProcess
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: mainProcess
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {

    if (message.getRTR()){
        //if we are a device with can id
        //we need to answer this message
        #ifdef DEBUGDEF
            Serial.print("RTR message received.");
        #endif // DEBUGDEF

        if (nodeId.getNodeNumber()!=0){
            //create the response message with no data
            #ifdef DEBUGDEF
                Serial.print("RTR message received. Sending can id: ");
                Serial.println(nodeId.getCanID(),HEX);
            #endif // DEBUGDEF

            Can.sendMsgBuf(nodeId.getCanID(),0,0,mergCanData);
            return OK;
        }
    }

    //message for self enumeration
    if (message.getOpc()==OPC_ENUM){

        if (message.getNodeNumber()==nodeId.getNodeNumber()){
            #ifdef DEBUGDEF
                Serial.println("Starting message based self ennumeration.");
            #endif // DEBUGDEF

            doSelfEnnumeration(true);
        }
        return OK;
    }

    //do self enumeration
    //collect the canid from messages with 0 size
    //the state can be a message or manually

    if (state_mode==SELF_ENUMERATION){
        #ifdef DEBUGDEF
            Serial.print("other msg size:");
            Serial.println(message.getCanMessageSize());
        #endif // DEBUGDEF
        if (message.getCanMessageSize()==0){
            #ifdef DEBUGDEF
                Serial.println("Self ennumeration: saving others can id.");
            #endif // DEBUGDEF


            if (bufferIndex<SELF_ENUM_BUFFER_SIZE){
                buffer[bufferIndex]=message.getCanId();
                bufferIndex++;
            }
        }
        return OK;
    }

    if (state_mode==LEARN && node_mode==MTYP_SLIM){
        learnEvent();
        return OK;
    }

    //treat each message individually to interpret the code
        #ifdef DEBUGDEF
            Serial.print("Message type:");
            Serial.print(message.getType());
            Serial.print ("\t OPC:");
            Serial.print(message.getOpc(),HEX);
            Serial.print("\t STATE:");
            Serial.println(state_mode);
        #endif // DEBUGDEF


    switch (message.getType()){
        case (DCC):

            if (dccHandler != 0){
                dccHandler(&message,this);
            }
        break;
        case (ACCESSORY):
             if (nodeId.isConsumerNode()){
                handleACCMessages();
            }
        break;
        case (GENERAL):
             if (nodeId.isConsumerNode()){
                handleGeneralMessages();
            }
        break;
        case (CONFIG):
            return handleConfigMessages();
        break;
        default:
            return UNKNOWN_MSG_TYPE;
    }

    return UNKNOWN_MSG_TYPE;

}
|———Node:{ Text: {
|———Node:if_statement Text: if (message.getRTR()){
        //if we are a device with can id
        //we need to answer this message
        #ifdef DEBUGDEF
            Serial.print("RTR message received.");
        #endif // DEBUGDEF

        if (nodeId.getNodeNumber()!=0){
            //create the response message with no data
            #ifdef DEBUGDEF
                Serial.print("RTR message received. Sending can id: ");
                Serial.println(nodeId.getCanID(),HEX);
            #endif // DEBUGDEF

            Can.sendMsgBuf(nodeId.getCanID(),0,0,mergCanData);
            return OK;
        }
    }
|————Node:if Text: if
|————Node:condition_clause Text: (message.getRTR())
|—————Node:( Text: (
|—————Node:call_expression Text: message.getRTR()
|——————Node:field_expression Text: message.getRTR
|———————Node:identifier Text: message
|———————Node:. Text: .
|———————Node:field_identifier Text: getRTR
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        //if we are a device with can id
        //we need to answer this message
        #ifdef DEBUGDEF
            Serial.print("RTR message received.");
        #endif // DEBUGDEF

        if (nodeId.getNodeNumber()!=0){
            //create the response message with no data
            #ifdef DEBUGDEF
                Serial.print("RTR message received. Sending can id: ");
                Serial.println(nodeId.getCanID(),HEX);
            #endif // DEBUGDEF

            Can.sendMsgBuf(nodeId.getCanID(),0,0,mergCanData);
            return OK;
        }
    }
|—————Node:{ Text: {
|—————Node:comment Text: //if we are a device with can id
|—————Node:comment Text: //we need to answer this message
|—————Node:preproc_ifdef Text: #ifdef DEBUGDEF
            Serial.print("RTR message received.");
        #endif
|——————Node:#ifdef Text: #ifdef
|——————Node:identifier Text: DEBUGDEF
|——————Node:expression_statement Text: Serial.print("RTR message received.");
|———————Node:call_expression Text: Serial.print("RTR message received.")
|————————Node:field_expression Text: Serial.print
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: print
|————————Node:argument_list Text: ("RTR message received.")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "RTR message received."
|——————————Node:" Text: "
|——————————Node:string_content Text: RTR message received.
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:#endif Text: #endif
|—————Node:comment Text: // DEBUGDEF
|—————Node:if_statement Text: if (nodeId.getNodeNumber()!=0){
            //create the response message with no data
            #ifdef DEBUGDEF
                Serial.print("RTR message received. Sending can id: ");
                Serial.println(nodeId.getCanID(),HEX);
            #endif // DEBUGDEF

            Can.sendMsgBuf(nodeId.getCanID(),0,0,mergCanData);
            return OK;
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (nodeId.getNodeNumber()!=0)
|———————Node:( Text: (
|———————Node:binary_expression Text: nodeId.getNodeNumber()!=0
|————————Node:call_expression Text: nodeId.getNodeNumber()
|—————————Node:field_expression Text: nodeId.getNodeNumber
|——————————Node:identifier Text: nodeId
|——————————Node:. Text: .
|——————————Node:field_identifier Text: getNodeNumber
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:!= Text: !=
|————————Node:number_literal Text: 0
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            //create the response message with no data
            #ifdef DEBUGDEF
                Serial.print("RTR message received. Sending can id: ");
                Serial.println(nodeId.getCanID(),HEX);
            #endif // DEBUGDEF

            Can.sendMsgBuf(nodeId.getCanID(),0,0,mergCanData);
            return OK;
        }
|———————Node:{ Text: {
|———————Node:comment Text: //create the response message with no data
|———————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                Serial.print("RTR message received. Sending can id: ");
                Serial.println(nodeId.getCanID(),HEX);
            #endif
|————————Node:#ifdef Text: #ifdef
|————————Node:identifier Text: DEBUGDEF
|————————Node:expression_statement Text: Serial.print("RTR message received. Sending can id: ");
|—————————Node:call_expression Text: Serial.print("RTR message received. Sending can id: ")
|——————————Node:field_expression Text: Serial.print
|———————————Node:identifier Text: Serial
|———————————Node:. Text: .
|———————————Node:field_identifier Text: print
|——————————Node:argument_list Text: ("RTR message received. Sending can id: ")
|———————————Node:( Text: (
|———————————Node:string_literal Text: "RTR message received. Sending can id: "
|————————————Node:" Text: "
|————————————Node:string_content Text: RTR message received. Sending can id: 
|————————————Node:" Text: "
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: Serial.println(nodeId.getCanID(),HEX);
|—————————Node:call_expression Text: Serial.println(nodeId.getCanID(),HEX)
|——————————Node:field_expression Text: Serial.println
|———————————Node:identifier Text: Serial
|———————————Node:. Text: .
|———————————Node:field_identifier Text: println
|——————————Node:argument_list Text: (nodeId.getCanID(),HEX)
|———————————Node:( Text: (
|———————————Node:call_expression Text: nodeId.getCanID()
|————————————Node:field_expression Text: nodeId.getCanID
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getCanID
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:, Text: ,
|———————————Node:identifier Text: HEX
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:#endif Text: #endif
|———————Node:comment Text: // DEBUGDEF
|———————Node:expression_statement Text: Can.sendMsgBuf(nodeId.getCanID(),0,0,mergCanData);
|————————Node:call_expression Text: Can.sendMsgBuf(nodeId.getCanID(),0,0,mergCanData)
|—————————Node:field_expression Text: Can.sendMsgBuf
|——————————Node:identifier Text: Can
|——————————Node:. Text: .
|——————————Node:field_identifier Text: sendMsgBuf
|—————————Node:argument_list Text: (nodeId.getCanID(),0,0,mergCanData)
|——————————Node:( Text: (
|——————————Node:call_expression Text: nodeId.getCanID()
|———————————Node:field_expression Text: nodeId.getCanID
|————————————Node:identifier Text: nodeId
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getCanID
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:, Text: ,
|——————————Node:number_literal Text: 0
|——————————Node:, Text: ,
|——————————Node:number_literal Text: 0
|——————————Node:, Text: ,
|——————————Node:identifier Text: mergCanData
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:return_statement Text: return OK;
|————————Node:return Text: return
|————————Node:identifier Text: OK
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:comment Text: //message for self enumeration
|———Node:if_statement Text: if (message.getOpc()==OPC_ENUM){

        if (message.getNodeNumber()==nodeId.getNodeNumber()){
            #ifdef DEBUGDEF
                Serial.println("Starting message based self ennumeration.");
            #endif // DEBUGDEF

            doSelfEnnumeration(true);
        }
        return OK;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (message.getOpc()==OPC_ENUM)
|—————Node:( Text: (
|—————Node:binary_expression Text: message.getOpc()==OPC_ENUM
|——————Node:call_expression Text: message.getOpc()
|———————Node:field_expression Text: message.getOpc
|————————Node:identifier Text: message
|————————Node:. Text: .
|————————Node:field_identifier Text: getOpc
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:== Text: ==
|——————Node:identifier Text: OPC_ENUM
|—————Node:) Text: )
|————Node:compound_statement Text: {

        if (message.getNodeNumber()==nodeId.getNodeNumber()){
            #ifdef DEBUGDEF
                Serial.println("Starting message based self ennumeration.");
            #endif // DEBUGDEF

            doSelfEnnumeration(true);
        }
        return OK;
    }
|—————Node:{ Text: {
|—————Node:if_statement Text: if (message.getNodeNumber()==nodeId.getNodeNumber()){
            #ifdef DEBUGDEF
                Serial.println("Starting message based self ennumeration.");
            #endif // DEBUGDEF

            doSelfEnnumeration(true);
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (message.getNodeNumber()==nodeId.getNodeNumber())
|———————Node:( Text: (
|———————Node:binary_expression Text: message.getNodeNumber()==nodeId.getNodeNumber()
|————————Node:call_expression Text: message.getNodeNumber()
|—————————Node:field_expression Text: message.getNodeNumber
|——————————Node:identifier Text: message
|——————————Node:. Text: .
|——————————Node:field_identifier Text: getNodeNumber
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:== Text: ==
|————————Node:call_expression Text: nodeId.getNodeNumber()
|—————————Node:field_expression Text: nodeId.getNodeNumber
|——————————Node:identifier Text: nodeId
|——————————Node:. Text: .
|——————————Node:field_identifier Text: getNodeNumber
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            #ifdef DEBUGDEF
                Serial.println("Starting message based self ennumeration.");
            #endif // DEBUGDEF

            doSelfEnnumeration(true);
        }
|———————Node:{ Text: {
|———————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                Serial.println("Starting message based self ennumeration.");
            #endif
|————————Node:#ifdef Text: #ifdef
|————————Node:identifier Text: DEBUGDEF
|————————Node:expression_statement Text: Serial.println("Starting message based self ennumeration.");
|—————————Node:call_expression Text: Serial.println("Starting message based self ennumeration.")
|——————————Node:field_expression Text: Serial.println
|———————————Node:identifier Text: Serial
|———————————Node:. Text: .
|———————————Node:field_identifier Text: println
|——————————Node:argument_list Text: ("Starting message based self ennumeration.")
|———————————Node:( Text: (
|———————————Node:string_literal Text: "Starting message based self ennumeration."
|————————————Node:" Text: "
|————————————Node:string_content Text: Starting message based self ennumeration.
|————————————Node:" Text: "
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:#endif Text: #endif
|———————Node:comment Text: // DEBUGDEF
|———————Node:expression_statement Text: doSelfEnnumeration(true);
|————————Node:call_expression Text: doSelfEnnumeration(true)
|—————————Node:identifier Text: doSelfEnnumeration
|—————————Node:argument_list Text: (true)
|——————————Node:( Text: (
|——————————Node:true Text: true
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:return_statement Text: return OK;
|——————Node:return Text: return
|——————Node:identifier Text: OK
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment Text: //do self enumeration
|———Node:comment Text: //collect the canid from messages with 0 size
|———Node:comment Text: //the state can be a message or manually
|———Node:if_statement Text: if (state_mode==SELF_ENUMERATION){
        #ifdef DEBUGDEF
            Serial.print("other msg size:");
            Serial.println(message.getCanMessageSize());
        #endif // DEBUGDEF
        if (message.getCanMessageSize()==0){
            #ifdef DEBUGDEF
                Serial.println("Self ennumeration: saving others can id.");
            #endif // DEBUGDEF


            if (bufferIndex<SELF_ENUM_BUFFER_SIZE){
                buffer[bufferIndex]=message.getCanId();
                bufferIndex++;
            }
        }
        return OK;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (state_mode==SELF_ENUMERATION)
|—————Node:( Text: (
|—————Node:binary_expression Text: state_mode==SELF_ENUMERATION
|——————Node:identifier Text: state_mode
|——————Node:== Text: ==
|——————Node:identifier Text: SELF_ENUMERATION
|—————Node:) Text: )
|————Node:compound_statement Text: {
        #ifdef DEBUGDEF
            Serial.print("other msg size:");
            Serial.println(message.getCanMessageSize());
        #endif // DEBUGDEF
        if (message.getCanMessageSize()==0){
            #ifdef DEBUGDEF
                Serial.println("Self ennumeration: saving others can id.");
            #endif // DEBUGDEF


            if (bufferIndex<SELF_ENUM_BUFFER_SIZE){
                buffer[bufferIndex]=message.getCanId();
                bufferIndex++;
            }
        }
        return OK;
    }
|—————Node:{ Text: {
|—————Node:preproc_ifdef Text: #ifdef DEBUGDEF
            Serial.print("other msg size:");
            Serial.println(message.getCanMessageSize());
        #endif
|——————Node:#ifdef Text: #ifdef
|——————Node:identifier Text: DEBUGDEF
|——————Node:expression_statement Text: Serial.print("other msg size:");
|———————Node:call_expression Text: Serial.print("other msg size:")
|————————Node:field_expression Text: Serial.print
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: print
|————————Node:argument_list Text: ("other msg size:")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "other msg size:"
|——————————Node:" Text: "
|——————————Node:string_content Text: other msg size:
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: Serial.println(message.getCanMessageSize());
|———————Node:call_expression Text: Serial.println(message.getCanMessageSize())
|————————Node:field_expression Text: Serial.println
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: println
|————————Node:argument_list Text: (message.getCanMessageSize())
|—————————Node:( Text: (
|—————————Node:call_expression Text: message.getCanMessageSize()
|——————————Node:field_expression Text: message.getCanMessageSize
|———————————Node:identifier Text: message
|———————————Node:. Text: .
|———————————Node:field_identifier Text: getCanMessageSize
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:#endif Text: #endif
|—————Node:comment Text: // DEBUGDEF
|—————Node:if_statement Text: if (message.getCanMessageSize()==0){
            #ifdef DEBUGDEF
                Serial.println("Self ennumeration: saving others can id.");
            #endif // DEBUGDEF


            if (bufferIndex<SELF_ENUM_BUFFER_SIZE){
                buffer[bufferIndex]=message.getCanId();
                bufferIndex++;
            }
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (message.getCanMessageSize()==0)
|———————Node:( Text: (
|———————Node:binary_expression Text: message.getCanMessageSize()==0
|————————Node:call_expression Text: message.getCanMessageSize()
|—————————Node:field_expression Text: message.getCanMessageSize
|——————————Node:identifier Text: message
|——————————Node:. Text: .
|——————————Node:field_identifier Text: getCanMessageSize
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:== Text: ==
|————————Node:number_literal Text: 0
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            #ifdef DEBUGDEF
                Serial.println("Self ennumeration: saving others can id.");
            #endif // DEBUGDEF


            if (bufferIndex<SELF_ENUM_BUFFER_SIZE){
                buffer[bufferIndex]=message.getCanId();
                bufferIndex++;
            }
        }
|———————Node:{ Text: {
|———————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                Serial.println("Self ennumeration: saving others can id.");
            #endif
|————————Node:#ifdef Text: #ifdef
|————————Node:identifier Text: DEBUGDEF
|————————Node:expression_statement Text: Serial.println("Self ennumeration: saving others can id.");
|—————————Node:call_expression Text: Serial.println("Self ennumeration: saving others can id.")
|——————————Node:field_expression Text: Serial.println
|———————————Node:identifier Text: Serial
|———————————Node:. Text: .
|———————————Node:field_identifier Text: println
|——————————Node:argument_list Text: ("Self ennumeration: saving others can id.")
|———————————Node:( Text: (
|———————————Node:string_literal Text: "Self ennumeration: saving others can id."
|————————————Node:" Text: "
|————————————Node:string_content Text: Self ennumeration: saving others can id.
|————————————Node:" Text: "
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:#endif Text: #endif
|———————Node:comment Text: // DEBUGDEF
|———————Node:if_statement Text: if (bufferIndex<SELF_ENUM_BUFFER_SIZE){
                buffer[bufferIndex]=message.getCanId();
                bufferIndex++;
            }
|————————Node:if Text: if
|————————Node:condition_clause Text: (bufferIndex<SELF_ENUM_BUFFER_SIZE)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: bufferIndex<SELF_ENUM_BUFFER_SIZE
|——————————Node:identifier Text: bufferIndex
|——————————Node:< Text: <
|——————————Node:identifier Text: SELF_ENUM_BUFFER_SIZE
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
                buffer[bufferIndex]=message.getCanId();
                bufferIndex++;
            }
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: buffer[bufferIndex]=message.getCanId();
|——————————Node:assignment_expression Text: buffer[bufferIndex]=message.getCanId()
|———————————Node:subscript_expression Text: buffer[bufferIndex]
|————————————Node:identifier Text: buffer
|————————————Node:subscript_argument_list Text: [bufferIndex]
|—————————————Node:[ Text: [
|—————————————Node:identifier Text: bufferIndex
|—————————————Node:] Text: ]
|———————————Node:= Text: =
|———————————Node:call_expression Text: message.getCanId()
|————————————Node:field_expression Text: message.getCanId
|—————————————Node:identifier Text: message
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getCanId
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:expression_statement Text: bufferIndex++;
|——————————Node:update_expression Text: bufferIndex++
|———————————Node:identifier Text: bufferIndex
|———————————Node:++ Text: ++
|——————————Node:; Text: ;
|—————————Node:} Text: }
|———————Node:} Text: }
|—————Node:return_statement Text: return OK;
|——————Node:return Text: return
|——————Node:identifier Text: OK
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:if_statement Text: if (state_mode==LEARN && node_mode==MTYP_SLIM){
        learnEvent();
        return OK;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (state_mode==LEARN && node_mode==MTYP_SLIM)
|—————Node:( Text: (
|—————Node:binary_expression Text: state_mode==LEARN && node_mode==MTYP_SLIM
|——————Node:binary_expression Text: state_mode==LEARN
|———————Node:identifier Text: state_mode
|———————Node:== Text: ==
|———————Node:identifier Text: LEARN
|——————Node:&& Text: &&
|——————Node:binary_expression Text: node_mode==MTYP_SLIM
|———————Node:identifier Text: node_mode
|———————Node:== Text: ==
|———————Node:identifier Text: MTYP_SLIM
|—————Node:) Text: )
|————Node:compound_statement Text: {
        learnEvent();
        return OK;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: learnEvent();
|——————Node:call_expression Text: learnEvent()
|———————Node:identifier Text: learnEvent
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return OK;
|——————Node:return Text: return
|——————Node:identifier Text: OK
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment Text: //treat each message individually to interpret the code
|———Node:preproc_ifdef Text: #ifdef DEBUGDEF
            Serial.print("Message type:");
            Serial.print(message.getType());
            Serial.print ("\t OPC:");
            Serial.print(message.getOpc(),HEX);
            Serial.print("\t STATE:");
            Serial.println(state_mode);
        #endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: DEBUGDEF
|————Node:expression_statement Text: Serial.print("Message type:");
|—————Node:call_expression Text: Serial.print("Message type:")
|——————Node:field_expression Text: Serial.print
|———————Node:identifier Text: Serial
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("Message type:")
|———————Node:( Text: (
|———————Node:string_literal Text: "Message type:"
|————————Node:" Text: "
|————————Node:string_content Text: Message type:
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: Serial.print(message.getType());
|—————Node:call_expression Text: Serial.print(message.getType())
|——————Node:field_expression Text: Serial.print
|———————Node:identifier Text: Serial
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: (message.getType())
|———————Node:( Text: (
|———————Node:call_expression Text: message.getType()
|————————Node:field_expression Text: message.getType
|—————————Node:identifier Text: message
|—————————Node:. Text: .
|—————————Node:field_identifier Text: getType
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: Serial.print ("\t OPC:");
|—————Node:call_expression Text: Serial.print ("\t OPC:")
|——————Node:field_expression Text: Serial.print
|———————Node:identifier Text: Serial
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("\t OPC:")
|———————Node:( Text: (
|———————Node:string_literal Text: "\t OPC:"
|————————Node:" Text: "
|————————Node:escape_sequence Text: \t
|————————Node:string_content Text:  OPC:
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: Serial.print(message.getOpc(),HEX);
|—————Node:call_expression Text: Serial.print(message.getOpc(),HEX)
|——————Node:field_expression Text: Serial.print
|———————Node:identifier Text: Serial
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: (message.getOpc(),HEX)
|———————Node:( Text: (
|———————Node:call_expression Text: message.getOpc()
|————————Node:field_expression Text: message.getOpc
|—————————Node:identifier Text: message
|—————————Node:. Text: .
|—————————Node:field_identifier Text: getOpc
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:, Text: ,
|———————Node:identifier Text: HEX
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: Serial.print("\t STATE:");
|—————Node:call_expression Text: Serial.print("\t STATE:")
|——————Node:field_expression Text: Serial.print
|———————Node:identifier Text: Serial
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("\t STATE:")
|———————Node:( Text: (
|———————Node:string_literal Text: "\t STATE:"
|————————Node:" Text: "
|————————Node:escape_sequence Text: \t
|————————Node:string_content Text:  STATE:
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: Serial.println(state_mode);
|—————Node:call_expression Text: Serial.println(state_mode)
|——————Node:field_expression Text: Serial.println
|———————Node:identifier Text: Serial
|———————Node:. Text: .
|———————Node:field_identifier Text: println
|——————Node:argument_list Text: (state_mode)
|———————Node:( Text: (
|———————Node:identifier Text: state_mode
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:comment Text: // DEBUGDEF
|———Node:switch_statement Text: switch (message.getType()){
        case (DCC):

            if (dccHandler != 0){
                dccHandler(&message,this);
            }
        break;
        case (ACCESSORY):
             if (nodeId.isConsumerNode()){
                handleACCMessages();
            }
        break;
        case (GENERAL):
             if (nodeId.isConsumerNode()){
                handleGeneralMessages();
            }
        break;
        case (CONFIG):
            return handleConfigMessages();
        break;
        default:
            return UNKNOWN_MSG_TYPE;
    }
|————Node:switch Text: switch
|————Node:condition_clause Text: (message.getType())
|—————Node:( Text: (
|—————Node:call_expression Text: message.getType()
|——————Node:field_expression Text: message.getType
|———————Node:identifier Text: message
|———————Node:. Text: .
|———————Node:field_identifier Text: getType
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        case (DCC):

            if (dccHandler != 0){
                dccHandler(&message,this);
            }
        break;
        case (ACCESSORY):
             if (nodeId.isConsumerNode()){
                handleACCMessages();
            }
        break;
        case (GENERAL):
             if (nodeId.isConsumerNode()){
                handleGeneralMessages();
            }
        break;
        case (CONFIG):
            return handleConfigMessages();
        break;
        default:
            return UNKNOWN_MSG_TYPE;
    }
|—————Node:{ Text: {
|—————Node:case_statement Text: case (DCC):

            if (dccHandler != 0){
                dccHandler(&message,this);
            }
        break;
|——————Node:case Text: case
|——————Node:parenthesized_expression Text: (DCC)
|———————Node:( Text: (
|———————Node:identifier Text: DCC
|———————Node:) Text: )
|——————Node:: Text: :
|——————Node:if_statement Text: if (dccHandler != 0){
                dccHandler(&message,this);
            }
|———————Node:if Text: if
|———————Node:condition_clause Text: (dccHandler != 0)
|————————Node:( Text: (
|————————Node:binary_expression Text: dccHandler != 0
|—————————Node:identifier Text: dccHandler
|—————————Node:!= Text: !=
|—————————Node:number_literal Text: 0
|————————Node:) Text: )
|———————Node:compound_statement Text: {
                dccHandler(&message,this);
            }
|————————Node:{ Text: {
|————————Node:expression_statement Text: dccHandler(&message,this);
|—————————Node:call_expression Text: dccHandler(&message,this)
|——————————Node:identifier Text: dccHandler
|——————————Node:argument_list Text: (&message,this)
|———————————Node:( Text: (
|———————————Node:pointer_expression Text: &message
|————————————Node:& Text: &
|————————————Node:identifier Text: message
|———————————Node:, Text: ,
|———————————Node:this Text: this
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:} Text: }
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case (ACCESSORY):
             if (nodeId.isConsumerNode()){
                handleACCMessages();
            }
        break;
|——————Node:case Text: case
|——————Node:parenthesized_expression Text: (ACCESSORY)
|———————Node:( Text: (
|———————Node:identifier Text: ACCESSORY
|———————Node:) Text: )
|——————Node:: Text: :
|——————Node:if_statement Text: if (nodeId.isConsumerNode()){
                handleACCMessages();
            }
|———————Node:if Text: if
|———————Node:condition_clause Text: (nodeId.isConsumerNode())
|————————Node:( Text: (
|————————Node:call_expression Text: nodeId.isConsumerNode()
|—————————Node:field_expression Text: nodeId.isConsumerNode
|——————————Node:identifier Text: nodeId
|——————————Node:. Text: .
|——————————Node:field_identifier Text: isConsumerNode
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:) Text: )
|———————Node:compound_statement Text: {
                handleACCMessages();
            }
|————————Node:{ Text: {
|————————Node:expression_statement Text: handleACCMessages();
|—————————Node:call_expression Text: handleACCMessages()
|——————————Node:identifier Text: handleACCMessages
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:} Text: }
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case (GENERAL):
             if (nodeId.isConsumerNode()){
                handleGeneralMessages();
            }
        break;
|——————Node:case Text: case
|——————Node:parenthesized_expression Text: (GENERAL)
|———————Node:( Text: (
|———————Node:identifier Text: GENERAL
|———————Node:) Text: )
|——————Node:: Text: :
|——————Node:if_statement Text: if (nodeId.isConsumerNode()){
                handleGeneralMessages();
            }
|———————Node:if Text: if
|———————Node:condition_clause Text: (nodeId.isConsumerNode())
|————————Node:( Text: (
|————————Node:call_expression Text: nodeId.isConsumerNode()
|—————————Node:field_expression Text: nodeId.isConsumerNode
|——————————Node:identifier Text: nodeId
|——————————Node:. Text: .
|——————————Node:field_identifier Text: isConsumerNode
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:) Text: )
|———————Node:compound_statement Text: {
                handleGeneralMessages();
            }
|————————Node:{ Text: {
|————————Node:expression_statement Text: handleGeneralMessages();
|—————————Node:call_expression Text: handleGeneralMessages()
|——————————Node:identifier Text: handleGeneralMessages
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:} Text: }
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case (CONFIG):
            return handleConfigMessages();
        break;
|——————Node:case Text: case
|——————Node:parenthesized_expression Text: (CONFIG)
|———————Node:( Text: (
|———————Node:identifier Text: CONFIG
|———————Node:) Text: )
|——————Node:: Text: :
|——————Node:return_statement Text: return handleConfigMessages();
|———————Node:return Text: return
|———————Node:call_expression Text: handleConfigMessages()
|————————Node:identifier Text: handleConfigMessages
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: default:
            return UNKNOWN_MSG_TYPE;
|——————Node:default Text: default
|——————Node:: Text: :
|——————Node:return_statement Text: return UNKNOWN_MSG_TYPE;
|———————Node:return Text: return
|———————Node:identifier Text: UNKNOWN_MSG_TYPE
|———————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return UNKNOWN_MSG_TYPE;
|————Node:return Text: return
|————Node:identifier Text: UNKNOWN_MSG_TYPE
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief
* Read the can bus and load the data in the message object.
* @return true if a message in the can bus.
*/
|—Node:function_definition Text: bool MergCBUS::readCanBus(byte buf_num){
    byte len=0;//number of bytes read.
    bool resp;
    byte bufIdxdata=115;//position in the general buffer. data need 8 bytes
    byte bufIdxhead=110;//position in the general buffer. header need 4 bytes
    eventmatch=false;
    resp=readCanBus(&buffer[bufIdxdata],&buffer[bufIdxhead],&len,buf_num);
    if (resp){
        message.clear();
        message.setCanMessageSize(len);
        message.setDataBuffer(&buffer[bufIdxdata]);
        if (Can.isRTMMessage()==0){
            #ifdef DEBUGDEF
                Serial.println("readCanBus - unsetRTM");;
            #endif // DEBUGDEF

            message.unsetRTR();
        }
        else{
            #ifdef DEBUGDEF
                Serial.println("readCanBus - setRTM");
            #endif // DEBUGDEF

            message.setRTR();
        }
        message.setHeaderBuffer(&buffer[bufIdxhead]);
        //eventmatch=memory.hasEvent(buffer[bufIdxdata],buffer[bufIdxdata+1],buffer[bufIdxdata+2],buffer[bufIdxdata+3]);
        eventmatch=hasThisEvent();
     }
    return resp;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: MergCBUS::readCanBus(byte buf_num)
|———Node:qualified_identifier Text: MergCBUS::readCanBus
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: readCanBus
|———Node:parameter_list Text: (byte buf_num)
|————Node:( Text: (
|————Node:parameter_declaration Text: byte buf_num
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: buf_num
|————Node:) Text: )
|——Node:compound_statement Text: {
    byte len=0;//number of bytes read.
    bool resp;
    byte bufIdxdata=115;//position in the general buffer. data need 8 bytes
    byte bufIdxhead=110;//position in the general buffer. header need 4 bytes
    eventmatch=false;
    resp=readCanBus(&buffer[bufIdxdata],&buffer[bufIdxhead],&len,buf_num);
    if (resp){
        message.clear();
        message.setCanMessageSize(len);
        message.setDataBuffer(&buffer[bufIdxdata]);
        if (Can.isRTMMessage()==0){
            #ifdef DEBUGDEF
                Serial.println("readCanBus - unsetRTM");;
            #endif // DEBUGDEF

            message.unsetRTR();
        }
        else{
            #ifdef DEBUGDEF
                Serial.println("readCanBus - setRTM");
            #endif // DEBUGDEF

            message.setRTR();
        }
        message.setHeaderBuffer(&buffer[bufIdxhead]);
        //eventmatch=memory.hasEvent(buffer[bufIdxdata],buffer[bufIdxdata+1],buffer[bufIdxdata+2],buffer[bufIdxdata+3]);
        eventmatch=hasThisEvent();
     }
    return resp;
}
|———Node:{ Text: {
|———Node:declaration Text: byte len=0;
|————Node:type_identifier Text: byte
|————Node:init_declarator Text: len=0
|—————Node:identifier Text: len
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment Text: //number of bytes read.
|———Node:declaration Text: bool resp;
|————Node:primitive_type Text: bool
|————Node:identifier Text: resp
|————Node:; Text: ;
|———Node:declaration Text: byte bufIdxdata=115;
|————Node:type_identifier Text: byte
|————Node:init_declarator Text: bufIdxdata=115
|—————Node:identifier Text: bufIdxdata
|—————Node:= Text: =
|—————Node:number_literal Text: 115
|————Node:; Text: ;
|———Node:comment Text: //position in the general buffer. data need 8 bytes
|———Node:declaration Text: byte bufIdxhead=110;
|————Node:type_identifier Text: byte
|————Node:init_declarator Text: bufIdxhead=110
|—————Node:identifier Text: bufIdxhead
|—————Node:= Text: =
|—————Node:number_literal Text: 110
|————Node:; Text: ;
|———Node:comment Text: //position in the general buffer. header need 4 bytes
|———Node:expression_statement Text: eventmatch=false;
|————Node:assignment_expression Text: eventmatch=false
|—————Node:identifier Text: eventmatch
|—————Node:= Text: =
|—————Node:false Text: false
|————Node:; Text: ;
|———Node:expression_statement Text: resp=readCanBus(&buffer[bufIdxdata],&buffer[bufIdxhead],&len,buf_num);
|————Node:assignment_expression Text: resp=readCanBus(&buffer[bufIdxdata],&buffer[bufIdxhead],&len,buf_num)
|—————Node:identifier Text: resp
|—————Node:= Text: =
|—————Node:call_expression Text: readCanBus(&buffer[bufIdxdata],&buffer[bufIdxhead],&len,buf_num)
|——————Node:identifier Text: readCanBus
|——————Node:argument_list Text: (&buffer[bufIdxdata],&buffer[bufIdxhead],&len,buf_num)
|———————Node:( Text: (
|———————Node:pointer_expression Text: &buffer[bufIdxdata]
|————————Node:& Text: &
|————————Node:subscript_expression Text: buffer[bufIdxdata]
|—————————Node:identifier Text: buffer
|—————————Node:subscript_argument_list Text: [bufIdxdata]
|——————————Node:[ Text: [
|——————————Node:identifier Text: bufIdxdata
|——————————Node:] Text: ]
|———————Node:, Text: ,
|———————Node:pointer_expression Text: &buffer[bufIdxhead]
|————————Node:& Text: &
|————————Node:subscript_expression Text: buffer[bufIdxhead]
|—————————Node:identifier Text: buffer
|—————————Node:subscript_argument_list Text: [bufIdxhead]
|——————————Node:[ Text: [
|——————————Node:identifier Text: bufIdxhead
|——————————Node:] Text: ]
|———————Node:, Text: ,
|———————Node:pointer_expression Text: &len
|————————Node:& Text: &
|————————Node:identifier Text: len
|———————Node:, Text: ,
|———————Node:identifier Text: buf_num
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (resp){
        message.clear();
        message.setCanMessageSize(len);
        message.setDataBuffer(&buffer[bufIdxdata]);
        if (Can.isRTMMessage()==0){
            #ifdef DEBUGDEF
                Serial.println("readCanBus - unsetRTM");;
            #endif // DEBUGDEF

            message.unsetRTR();
        }
        else{
            #ifdef DEBUGDEF
                Serial.println("readCanBus - setRTM");
            #endif // DEBUGDEF

            message.setRTR();
        }
        message.setHeaderBuffer(&buffer[bufIdxhead]);
        //eventmatch=memory.hasEvent(buffer[bufIdxdata],buffer[bufIdxdata+1],buffer[bufIdxdata+2],buffer[bufIdxdata+3]);
        eventmatch=hasThisEvent();
     }
|————Node:if Text: if
|————Node:condition_clause Text: (resp)
|—————Node:( Text: (
|—————Node:identifier Text: resp
|—————Node:) Text: )
|————Node:compound_statement Text: {
        message.clear();
        message.setCanMessageSize(len);
        message.setDataBuffer(&buffer[bufIdxdata]);
        if (Can.isRTMMessage()==0){
            #ifdef DEBUGDEF
                Serial.println("readCanBus - unsetRTM");;
            #endif // DEBUGDEF

            message.unsetRTR();
        }
        else{
            #ifdef DEBUGDEF
                Serial.println("readCanBus - setRTM");
            #endif // DEBUGDEF

            message.setRTR();
        }
        message.setHeaderBuffer(&buffer[bufIdxhead]);
        //eventmatch=memory.hasEvent(buffer[bufIdxdata],buffer[bufIdxdata+1],buffer[bufIdxdata+2],buffer[bufIdxdata+3]);
        eventmatch=hasThisEvent();
     }
|—————Node:{ Text: {
|—————Node:expression_statement Text: message.clear();
|——————Node:call_expression Text: message.clear()
|———————Node:field_expression Text: message.clear
|————————Node:identifier Text: message
|————————Node:. Text: .
|————————Node:field_identifier Text: clear
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: message.setCanMessageSize(len);
|——————Node:call_expression Text: message.setCanMessageSize(len)
|———————Node:field_expression Text: message.setCanMessageSize
|————————Node:identifier Text: message
|————————Node:. Text: .
|————————Node:field_identifier Text: setCanMessageSize
|———————Node:argument_list Text: (len)
|————————Node:( Text: (
|————————Node:identifier Text: len
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: message.setDataBuffer(&buffer[bufIdxdata]);
|——————Node:call_expression Text: message.setDataBuffer(&buffer[bufIdxdata])
|———————Node:field_expression Text: message.setDataBuffer
|————————Node:identifier Text: message
|————————Node:. Text: .
|————————Node:field_identifier Text: setDataBuffer
|———————Node:argument_list Text: (&buffer[bufIdxdata])
|————————Node:( Text: (
|————————Node:pointer_expression Text: &buffer[bufIdxdata]
|—————————Node:& Text: &
|—————————Node:subscript_expression Text: buffer[bufIdxdata]
|——————————Node:identifier Text: buffer
|——————————Node:subscript_argument_list Text: [bufIdxdata]
|———————————Node:[ Text: [
|———————————Node:identifier Text: bufIdxdata
|———————————Node:] Text: ]
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (Can.isRTMMessage()==0){
            #ifdef DEBUGDEF
                Serial.println("readCanBus - unsetRTM");;
            #endif // DEBUGDEF

            message.unsetRTR();
        }
        else{
            #ifdef DEBUGDEF
                Serial.println("readCanBus - setRTM");
            #endif // DEBUGDEF

            message.setRTR();
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (Can.isRTMMessage()==0)
|———————Node:( Text: (
|———————Node:binary_expression Text: Can.isRTMMessage()==0
|————————Node:call_expression Text: Can.isRTMMessage()
|—————————Node:field_expression Text: Can.isRTMMessage
|——————————Node:identifier Text: Can
|——————————Node:. Text: .
|——————————Node:field_identifier Text: isRTMMessage
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:== Text: ==
|————————Node:number_literal Text: 0
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            #ifdef DEBUGDEF
                Serial.println("readCanBus - unsetRTM");;
            #endif // DEBUGDEF

            message.unsetRTR();
        }
|———————Node:{ Text: {
|———————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                Serial.println("readCanBus - unsetRTM");;
            #endif
|————————Node:#ifdef Text: #ifdef
|————————Node:identifier Text: DEBUGDEF
|————————Node:expression_statement Text: Serial.println("readCanBus - unsetRTM");
|—————————Node:call_expression Text: Serial.println("readCanBus - unsetRTM")
|——————————Node:field_expression Text: Serial.println
|———————————Node:identifier Text: Serial
|———————————Node:. Text: .
|———————————Node:field_identifier Text: println
|——————————Node:argument_list Text: ("readCanBus - unsetRTM")
|———————————Node:( Text: (
|———————————Node:string_literal Text: "readCanBus - unsetRTM"
|————————————Node:" Text: "
|————————————Node:string_content Text: readCanBus - unsetRTM
|————————————Node:" Text: "
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: ;
|—————————Node:; Text: ;
|————————Node:#endif Text: #endif
|———————Node:comment Text: // DEBUGDEF
|———————Node:expression_statement Text: message.unsetRTR();
|————————Node:call_expression Text: message.unsetRTR()
|—————————Node:field_expression Text: message.unsetRTR
|——————————Node:identifier Text: message
|——————————Node:. Text: .
|——————————Node:field_identifier Text: unsetRTR
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|——————Node:else_clause Text: else{
            #ifdef DEBUGDEF
                Serial.println("readCanBus - setRTM");
            #endif // DEBUGDEF

            message.setRTR();
        }
|———————Node:else Text: else
|———————Node:compound_statement Text: {
            #ifdef DEBUGDEF
                Serial.println("readCanBus - setRTM");
            #endif // DEBUGDEF

            message.setRTR();
        }
|————————Node:{ Text: {
|————————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                Serial.println("readCanBus - setRTM");
            #endif
|—————————Node:#ifdef Text: #ifdef
|—————————Node:identifier Text: DEBUGDEF
|—————————Node:expression_statement Text: Serial.println("readCanBus - setRTM");
|——————————Node:call_expression Text: Serial.println("readCanBus - setRTM")
|———————————Node:field_expression Text: Serial.println
|————————————Node:identifier Text: Serial
|————————————Node:. Text: .
|————————————Node:field_identifier Text: println
|———————————Node:argument_list Text: ("readCanBus - setRTM")
|————————————Node:( Text: (
|————————————Node:string_literal Text: "readCanBus - setRTM"
|—————————————Node:" Text: "
|—————————————Node:string_content Text: readCanBus - setRTM
|—————————————Node:" Text: "
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:#endif Text: #endif
|————————Node:comment Text: // DEBUGDEF
|————————Node:expression_statement Text: message.setRTR();
|—————————Node:call_expression Text: message.setRTR()
|——————————Node:field_expression Text: message.setRTR
|———————————Node:identifier Text: message
|———————————Node:. Text: .
|———————————Node:field_identifier Text: setRTR
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:} Text: }
|—————Node:expression_statement Text: message.setHeaderBuffer(&buffer[bufIdxhead]);
|——————Node:call_expression Text: message.setHeaderBuffer(&buffer[bufIdxhead])
|———————Node:field_expression Text: message.setHeaderBuffer
|————————Node:identifier Text: message
|————————Node:. Text: .
|————————Node:field_identifier Text: setHeaderBuffer
|———————Node:argument_list Text: (&buffer[bufIdxhead])
|————————Node:( Text: (
|————————Node:pointer_expression Text: &buffer[bufIdxhead]
|—————————Node:& Text: &
|—————————Node:subscript_expression Text: buffer[bufIdxhead]
|——————————Node:identifier Text: buffer
|——————————Node:subscript_argument_list Text: [bufIdxhead]
|———————————Node:[ Text: [
|———————————Node:identifier Text: bufIdxhead
|———————————Node:] Text: ]
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment Text: //eventmatch=memory.hasEvent(buffer[bufIdxdata],buffer[bufIdxdata+1],buffer[bufIdxdata+2],buffer[bufIdxdata+3]);
|—————Node:expression_statement Text: eventmatch=hasThisEvent();
|——————Node:assignment_expression Text: eventmatch=hasThisEvent()
|———————Node:identifier Text: eventmatch
|———————Node:= Text: =
|———————Node:call_expression Text: hasThisEvent()
|————————Node:identifier Text: hasThisEvent
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return resp;
|————Node:return Text: return
|————Node:identifier Text: resp
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief
* Read the can bus from the circular buffer and load the data in the message object.
* @return true if a message in the can bus.
*/
|—Node:function_definition Text: bool MergCBUS::readCanBus(){
    bool resp;
    byte bufidx=90;//position in the general buffer. data need 8 bytes
    eventmatch=false;

    resp=msgBuffer.get(&buffer[bufidx]);
    if (resp){
        message.clear();
        message.setCanMessageSize(buffer[bufidx]);
        message.setHeaderBuffer(&buffer[bufidx+2]);
        message.setDataBuffer(&buffer[bufidx+6]);
        if (buffer[bufidx+1]==0){
            #ifdef DEBUGDEF
                Serial.println("readCanBus - unsetRTM");
            #endif // DEBUGDEF

            message.unsetRTR();
        }
        else{
            #ifdef DEBUGDEF
                Serial.println("readCanBus - setRTM");
            #endif // DEBUGDEF

            message.setRTR();
        }

        //eventmatch=memory.hasEvent(buffer[bufIdxdata],buffer[bufIdxdata+1],buffer[bufIdxdata+2],buffer[bufIdxdata+3]);
        eventmatch=hasThisEvent();
     }
    return resp;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: MergCBUS::readCanBus()
|———Node:qualified_identifier Text: MergCBUS::readCanBus
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: readCanBus
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    bool resp;
    byte bufidx=90;//position in the general buffer. data need 8 bytes
    eventmatch=false;

    resp=msgBuffer.get(&buffer[bufidx]);
    if (resp){
        message.clear();
        message.setCanMessageSize(buffer[bufidx]);
        message.setHeaderBuffer(&buffer[bufidx+2]);
        message.setDataBuffer(&buffer[bufidx+6]);
        if (buffer[bufidx+1]==0){
            #ifdef DEBUGDEF
                Serial.println("readCanBus - unsetRTM");
            #endif // DEBUGDEF

            message.unsetRTR();
        }
        else{
            #ifdef DEBUGDEF
                Serial.println("readCanBus - setRTM");
            #endif // DEBUGDEF

            message.setRTR();
        }

        //eventmatch=memory.hasEvent(buffer[bufIdxdata],buffer[bufIdxdata+1],buffer[bufIdxdata+2],buffer[bufIdxdata+3]);
        eventmatch=hasThisEvent();
     }
    return resp;
}
|———Node:{ Text: {
|———Node:declaration Text: bool resp;
|————Node:primitive_type Text: bool
|————Node:identifier Text: resp
|————Node:; Text: ;
|———Node:declaration Text: byte bufidx=90;
|————Node:type_identifier Text: byte
|————Node:init_declarator Text: bufidx=90
|—————Node:identifier Text: bufidx
|—————Node:= Text: =
|—————Node:number_literal Text: 90
|————Node:; Text: ;
|———Node:comment Text: //position in the general buffer. data need 8 bytes
|———Node:expression_statement Text: eventmatch=false;
|————Node:assignment_expression Text: eventmatch=false
|—————Node:identifier Text: eventmatch
|—————Node:= Text: =
|—————Node:false Text: false
|————Node:; Text: ;
|———Node:expression_statement Text: resp=msgBuffer.get(&buffer[bufidx]);
|————Node:assignment_expression Text: resp=msgBuffer.get(&buffer[bufidx])
|—————Node:identifier Text: resp
|—————Node:= Text: =
|—————Node:call_expression Text: msgBuffer.get(&buffer[bufidx])
|——————Node:field_expression Text: msgBuffer.get
|———————Node:identifier Text: msgBuffer
|———————Node:. Text: .
|———————Node:field_identifier Text: get
|——————Node:argument_list Text: (&buffer[bufidx])
|———————Node:( Text: (
|———————Node:pointer_expression Text: &buffer[bufidx]
|————————Node:& Text: &
|————————Node:subscript_expression Text: buffer[bufidx]
|—————————Node:identifier Text: buffer
|—————————Node:subscript_argument_list Text: [bufidx]
|——————————Node:[ Text: [
|——————————Node:identifier Text: bufidx
|——————————Node:] Text: ]
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (resp){
        message.clear();
        message.setCanMessageSize(buffer[bufidx]);
        message.setHeaderBuffer(&buffer[bufidx+2]);
        message.setDataBuffer(&buffer[bufidx+6]);
        if (buffer[bufidx+1]==0){
            #ifdef DEBUGDEF
                Serial.println("readCanBus - unsetRTM");
            #endif // DEBUGDEF

            message.unsetRTR();
        }
        else{
            #ifdef DEBUGDEF
                Serial.println("readCanBus - setRTM");
            #endif // DEBUGDEF

            message.setRTR();
        }

        //eventmatch=memory.hasEvent(buffer[bufIdxdata],buffer[bufIdxdata+1],buffer[bufIdxdata+2],buffer[bufIdxdata+3]);
        eventmatch=hasThisEvent();
     }
|————Node:if Text: if
|————Node:condition_clause Text: (resp)
|—————Node:( Text: (
|—————Node:identifier Text: resp
|—————Node:) Text: )
|————Node:compound_statement Text: {
        message.clear();
        message.setCanMessageSize(buffer[bufidx]);
        message.setHeaderBuffer(&buffer[bufidx+2]);
        message.setDataBuffer(&buffer[bufidx+6]);
        if (buffer[bufidx+1]==0){
            #ifdef DEBUGDEF
                Serial.println("readCanBus - unsetRTM");
            #endif // DEBUGDEF

            message.unsetRTR();
        }
        else{
            #ifdef DEBUGDEF
                Serial.println("readCanBus - setRTM");
            #endif // DEBUGDEF

            message.setRTR();
        }

        //eventmatch=memory.hasEvent(buffer[bufIdxdata],buffer[bufIdxdata+1],buffer[bufIdxdata+2],buffer[bufIdxdata+3]);
        eventmatch=hasThisEvent();
     }
|—————Node:{ Text: {
|—————Node:expression_statement Text: message.clear();
|——————Node:call_expression Text: message.clear()
|———————Node:field_expression Text: message.clear
|————————Node:identifier Text: message
|————————Node:. Text: .
|————————Node:field_identifier Text: clear
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: message.setCanMessageSize(buffer[bufidx]);
|——————Node:call_expression Text: message.setCanMessageSize(buffer[bufidx])
|———————Node:field_expression Text: message.setCanMessageSize
|————————Node:identifier Text: message
|————————Node:. Text: .
|————————Node:field_identifier Text: setCanMessageSize
|———————Node:argument_list Text: (buffer[bufidx])
|————————Node:( Text: (
|————————Node:subscript_expression Text: buffer[bufidx]
|—————————Node:identifier Text: buffer
|—————————Node:subscript_argument_list Text: [bufidx]
|——————————Node:[ Text: [
|——————————Node:identifier Text: bufidx
|——————————Node:] Text: ]
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: message.setHeaderBuffer(&buffer[bufidx+2]);
|——————Node:call_expression Text: message.setHeaderBuffer(&buffer[bufidx+2])
|———————Node:field_expression Text: message.setHeaderBuffer
|————————Node:identifier Text: message
|————————Node:. Text: .
|————————Node:field_identifier Text: setHeaderBuffer
|———————Node:argument_list Text: (&buffer[bufidx+2])
|————————Node:( Text: (
|————————Node:pointer_expression Text: &buffer[bufidx+2]
|—————————Node:& Text: &
|—————————Node:subscript_expression Text: buffer[bufidx+2]
|——————————Node:identifier Text: buffer
|——————————Node:subscript_argument_list Text: [bufidx+2]
|———————————Node:[ Text: [
|———————————Node:binary_expression Text: bufidx+2
|————————————Node:identifier Text: bufidx
|————————————Node:+ Text: +
|————————————Node:number_literal Text: 2
|———————————Node:] Text: ]
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: message.setDataBuffer(&buffer[bufidx+6]);
|——————Node:call_expression Text: message.setDataBuffer(&buffer[bufidx+6])
|———————Node:field_expression Text: message.setDataBuffer
|————————Node:identifier Text: message
|————————Node:. Text: .
|————————Node:field_identifier Text: setDataBuffer
|———————Node:argument_list Text: (&buffer[bufidx+6])
|————————Node:( Text: (
|————————Node:pointer_expression Text: &buffer[bufidx+6]
|—————————Node:& Text: &
|—————————Node:subscript_expression Text: buffer[bufidx+6]
|——————————Node:identifier Text: buffer
|——————————Node:subscript_argument_list Text: [bufidx+6]
|———————————Node:[ Text: [
|———————————Node:binary_expression Text: bufidx+6
|————————————Node:identifier Text: bufidx
|————————————Node:+ Text: +
|————————————Node:number_literal Text: 6
|———————————Node:] Text: ]
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (buffer[bufidx+1]==0){
            #ifdef DEBUGDEF
                Serial.println("readCanBus - unsetRTM");
            #endif // DEBUGDEF

            message.unsetRTR();
        }
        else{
            #ifdef DEBUGDEF
                Serial.println("readCanBus - setRTM");
            #endif // DEBUGDEF

            message.setRTR();
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (buffer[bufidx+1]==0)
|———————Node:( Text: (
|———————Node:binary_expression Text: buffer[bufidx+1]==0
|————————Node:subscript_expression Text: buffer[bufidx+1]
|—————————Node:identifier Text: buffer
|—————————Node:subscript_argument_list Text: [bufidx+1]
|——————————Node:[ Text: [
|——————————Node:binary_expression Text: bufidx+1
|———————————Node:identifier Text: bufidx
|———————————Node:+ Text: +
|———————————Node:number_literal Text: 1
|——————————Node:] Text: ]
|————————Node:== Text: ==
|————————Node:number_literal Text: 0
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            #ifdef DEBUGDEF
                Serial.println("readCanBus - unsetRTM");
            #endif // DEBUGDEF

            message.unsetRTR();
        }
|———————Node:{ Text: {
|———————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                Serial.println("readCanBus - unsetRTM");
            #endif
|————————Node:#ifdef Text: #ifdef
|————————Node:identifier Text: DEBUGDEF
|————————Node:expression_statement Text: Serial.println("readCanBus - unsetRTM");
|—————————Node:call_expression Text: Serial.println("readCanBus - unsetRTM")
|——————————Node:field_expression Text: Serial.println
|———————————Node:identifier Text: Serial
|———————————Node:. Text: .
|———————————Node:field_identifier Text: println
|——————————Node:argument_list Text: ("readCanBus - unsetRTM")
|———————————Node:( Text: (
|———————————Node:string_literal Text: "readCanBus - unsetRTM"
|————————————Node:" Text: "
|————————————Node:string_content Text: readCanBus - unsetRTM
|————————————Node:" Text: "
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:#endif Text: #endif
|———————Node:comment Text: // DEBUGDEF
|———————Node:expression_statement Text: message.unsetRTR();
|————————Node:call_expression Text: message.unsetRTR()
|—————————Node:field_expression Text: message.unsetRTR
|——————————Node:identifier Text: message
|——————————Node:. Text: .
|——————————Node:field_identifier Text: unsetRTR
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|——————Node:else_clause Text: else{
            #ifdef DEBUGDEF
                Serial.println("readCanBus - setRTM");
            #endif // DEBUGDEF

            message.setRTR();
        }
|———————Node:else Text: else
|———————Node:compound_statement Text: {
            #ifdef DEBUGDEF
                Serial.println("readCanBus - setRTM");
            #endif // DEBUGDEF

            message.setRTR();
        }
|————————Node:{ Text: {
|————————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                Serial.println("readCanBus - setRTM");
            #endif
|—————————Node:#ifdef Text: #ifdef
|—————————Node:identifier Text: DEBUGDEF
|—————————Node:expression_statement Text: Serial.println("readCanBus - setRTM");
|——————————Node:call_expression Text: Serial.println("readCanBus - setRTM")
|———————————Node:field_expression Text: Serial.println
|————————————Node:identifier Text: Serial
|————————————Node:. Text: .
|————————————Node:field_identifier Text: println
|———————————Node:argument_list Text: ("readCanBus - setRTM")
|————————————Node:( Text: (
|————————————Node:string_literal Text: "readCanBus - setRTM"
|—————————————Node:" Text: "
|—————————————Node:string_content Text: readCanBus - setRTM
|—————————————Node:" Text: "
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:#endif Text: #endif
|————————Node:comment Text: // DEBUGDEF
|————————Node:expression_statement Text: message.setRTR();
|—————————Node:call_expression Text: message.setRTR()
|——————————Node:field_expression Text: message.setRTR
|———————————Node:identifier Text: message
|———————————Node:. Text: .
|———————————Node:field_identifier Text: setRTR
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:} Text: }
|—————Node:comment Text: //eventmatch=memory.hasEvent(buffer[bufIdxdata],buffer[bufIdxdata+1],buffer[bufIdxdata+2],buffer[bufIdxdata+3]);
|—————Node:expression_statement Text: eventmatch=hasThisEvent();
|——————Node:assignment_expression Text: eventmatch=hasThisEvent()
|———————Node:identifier Text: eventmatch
|———————Node:= Text: =
|———————Node:call_expression Text: hasThisEvent()
|————————Node:identifier Text: hasThisEvent
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return resp;
|————Node:return Text: return
|————Node:identifier Text: resp
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief
* Read the can bus and return the buffer.
* @return number of bytes read;
*/
|—Node:function_definition Text: bool MergCBUS::readCanBus(byte *data,byte *header,byte *length,byte buf_num){
    byte resp;
    if(CAN_MSGAVAIL == Can.checkReceive()) // check if data coming
    {
        resp=Can.readMsgBuf(length,data,buf_num);
        if (resp==CAN_OK){
            Can.getCanHeader(header);
            return true;
        }
        return false;
    }
    return false;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: MergCBUS::readCanBus(byte *data,byte *header,byte *length,byte buf_num)
|———Node:qualified_identifier Text: MergCBUS::readCanBus
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: readCanBus
|———Node:parameter_list Text: (byte *data,byte *header,byte *length,byte buf_num)
|————Node:( Text: (
|————Node:parameter_declaration Text: byte *data
|—————Node:type_identifier Text: byte
|—————Node:pointer_declarator Text: *data
|——————Node:* Text: *
|——————Node:identifier Text: data
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte *header
|—————Node:type_identifier Text: byte
|—————Node:pointer_declarator Text: *header
|——————Node:* Text: *
|——————Node:identifier Text: header
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte *length
|—————Node:type_identifier Text: byte
|—————Node:pointer_declarator Text: *length
|——————Node:* Text: *
|——————Node:identifier Text: length
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte buf_num
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: buf_num
|————Node:) Text: )
|——Node:compound_statement Text: {
    byte resp;
    if(CAN_MSGAVAIL == Can.checkReceive()) // check if data coming
    {
        resp=Can.readMsgBuf(length,data,buf_num);
        if (resp==CAN_OK){
            Can.getCanHeader(header);
            return true;
        }
        return false;
    }
    return false;
}
|———Node:{ Text: {
|———Node:declaration Text: byte resp;
|————Node:type_identifier Text: byte
|————Node:identifier Text: resp
|————Node:; Text: ;
|———Node:if_statement Text: if(CAN_MSGAVAIL == Can.checkReceive()) // check if data coming
    {
        resp=Can.readMsgBuf(length,data,buf_num);
        if (resp==CAN_OK){
            Can.getCanHeader(header);
            return true;
        }
        return false;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (CAN_MSGAVAIL == Can.checkReceive())
|—————Node:( Text: (
|—————Node:binary_expression Text: CAN_MSGAVAIL == Can.checkReceive()
|——————Node:identifier Text: CAN_MSGAVAIL
|——————Node:== Text: ==
|——————Node:call_expression Text: Can.checkReceive()
|———————Node:field_expression Text: Can.checkReceive
|————————Node:identifier Text: Can
|————————Node:. Text: .
|————————Node:field_identifier Text: checkReceive
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|—————Node:) Text: )
|————Node:comment Text: // check if data coming
|————Node:compound_statement Text: {
        resp=Can.readMsgBuf(length,data,buf_num);
        if (resp==CAN_OK){
            Can.getCanHeader(header);
            return true;
        }
        return false;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: resp=Can.readMsgBuf(length,data,buf_num);
|——————Node:assignment_expression Text: resp=Can.readMsgBuf(length,data,buf_num)
|———————Node:identifier Text: resp
|———————Node:= Text: =
|———————Node:call_expression Text: Can.readMsgBuf(length,data,buf_num)
|————————Node:field_expression Text: Can.readMsgBuf
|—————————Node:identifier Text: Can
|—————————Node:. Text: .
|—————————Node:field_identifier Text: readMsgBuf
|————————Node:argument_list Text: (length,data,buf_num)
|—————————Node:( Text: (
|—————————Node:identifier Text: length
|—————————Node:, Text: ,
|—————————Node:identifier Text: data
|—————————Node:, Text: ,
|—————————Node:identifier Text: buf_num
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (resp==CAN_OK){
            Can.getCanHeader(header);
            return true;
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (resp==CAN_OK)
|———————Node:( Text: (
|———————Node:binary_expression Text: resp==CAN_OK
|————————Node:identifier Text: resp
|————————Node:== Text: ==
|————————Node:identifier Text: CAN_OK
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            Can.getCanHeader(header);
            return true;
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: Can.getCanHeader(header);
|————————Node:call_expression Text: Can.getCanHeader(header)
|—————————Node:field_expression Text: Can.getCanHeader
|——————————Node:identifier Text: Can
|——————————Node:. Text: .
|——————————Node:field_identifier Text: getCanHeader
|—————————Node:argument_list Text: (header)
|——————————Node:( Text: (
|——————————Node:identifier Text: header
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:return_statement Text: return true;
|————————Node:return Text: return
|————————Node:true Text: true
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:return_statement Text: return false;
|——————Node:return Text: return
|——————Node:false Text: false
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return false;
|————Node:return Text: return
|————Node:false Text: false
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief
* Put node in setup mode and send the Request Node Number RQNN
* It is the function that starts the changing from slim to flim
*/
|—Node:function_definition Text: void MergCBUS::doSetup(){

    state_mode=SETUP;
    prepareMessage(OPC_RQNN);
    #ifdef DEBUGDEF
        Serial.println("Doing setup");
        printSentMessage();;
    #endif // DEBUGDEF

    sendCanMessage();
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: MergCBUS::doSetup()
|———Node:qualified_identifier Text: MergCBUS::doSetup
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: doSetup
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {

    state_mode=SETUP;
    prepareMessage(OPC_RQNN);
    #ifdef DEBUGDEF
        Serial.println("Doing setup");
        printSentMessage();;
    #endif // DEBUGDEF

    sendCanMessage();
}
|———Node:{ Text: {
|———Node:expression_statement Text: state_mode=SETUP;
|————Node:assignment_expression Text: state_mode=SETUP
|—————Node:identifier Text: state_mode
|—————Node:= Text: =
|—————Node:identifier Text: SETUP
|————Node:; Text: ;
|———Node:expression_statement Text: prepareMessage(OPC_RQNN);
|————Node:call_expression Text: prepareMessage(OPC_RQNN)
|—————Node:identifier Text: prepareMessage
|—————Node:argument_list Text: (OPC_RQNN)
|——————Node:( Text: (
|——————Node:identifier Text: OPC_RQNN
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef DEBUGDEF
        Serial.println("Doing setup");
        printSentMessage();;
    #endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: DEBUGDEF
|————Node:expression_statement Text: Serial.println("Doing setup");
|—————Node:call_expression Text: Serial.println("Doing setup")
|——————Node:field_expression Text: Serial.println
|———————Node:identifier Text: Serial
|———————Node:. Text: .
|———————Node:field_identifier Text: println
|——————Node:argument_list Text: ("Doing setup")
|———————Node:( Text: (
|———————Node:string_literal Text: "Doing setup"
|————————Node:" Text: "
|————————Node:string_content Text: Doing setup
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: printSentMessage();
|—————Node:call_expression Text: printSentMessage()
|——————Node:identifier Text: printSentMessage
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: ;
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:comment Text: // DEBUGDEF
|———Node:expression_statement Text: sendCanMessage();
|————Node:call_expression Text: sendCanMessage()
|—————Node:identifier Text: sendCanMessage
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief
* Node when going out of service. Send NNREL.
*/
|—Node:function_definition Text: void MergCBUS::doOutOfService(){
    prepareMessage(OPC_NNREL);
    sendCanMessage();
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: MergCBUS::doOutOfService()
|———Node:qualified_identifier Text: MergCBUS::doOutOfService
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: doOutOfService
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    prepareMessage(OPC_NNREL);
    sendCanMessage();
}
|———Node:{ Text: {
|———Node:expression_statement Text: prepareMessage(OPC_NNREL);
|————Node:call_expression Text: prepareMessage(OPC_NNREL)
|—————Node:identifier Text: prepareMessage
|—————Node:argument_list Text: (OPC_NNREL)
|——————Node:( Text: (
|——————Node:identifier Text: OPC_NNREL
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: sendCanMessage();
|————Node:call_expression Text: sendCanMessage()
|—————Node:identifier Text: sendCanMessage
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief
* Initiate the auto enumeration procedure
* Start the timers and send a RTR message.
* @param softEnum True if the self ennumeration started by a software tool by receiving a ENUM message.
*/
|—Node:function_definition Text: void MergCBUS::doSelfEnnumeration(bool softEnum){
    bufferIndex=0;
    softwareEnum=softEnum;
    state_mode=SELF_ENUMERATION;
    Can.setPriority(PRIO_LOW,PRIO_MIN_LOWEST);
    Can.sendRTMMessage(nodeId.getCanID());
    startTime=millis();
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: MergCBUS::doSelfEnnumeration(bool softEnum)
|———Node:qualified_identifier Text: MergCBUS::doSelfEnnumeration
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: doSelfEnnumeration
|———Node:parameter_list Text: (bool softEnum)
|————Node:( Text: (
|————Node:parameter_declaration Text: bool softEnum
|—————Node:primitive_type Text: bool
|—————Node:identifier Text: softEnum
|————Node:) Text: )
|——Node:compound_statement Text: {
    bufferIndex=0;
    softwareEnum=softEnum;
    state_mode=SELF_ENUMERATION;
    Can.setPriority(PRIO_LOW,PRIO_MIN_LOWEST);
    Can.sendRTMMessage(nodeId.getCanID());
    startTime=millis();
}
|———Node:{ Text: {
|———Node:expression_statement Text: bufferIndex=0;
|————Node:assignment_expression Text: bufferIndex=0
|—————Node:identifier Text: bufferIndex
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: softwareEnum=softEnum;
|————Node:assignment_expression Text: softwareEnum=softEnum
|—————Node:identifier Text: softwareEnum
|—————Node:= Text: =
|—————Node:identifier Text: softEnum
|————Node:; Text: ;
|———Node:expression_statement Text: state_mode=SELF_ENUMERATION;
|————Node:assignment_expression Text: state_mode=SELF_ENUMERATION
|—————Node:identifier Text: state_mode
|—————Node:= Text: =
|—————Node:identifier Text: SELF_ENUMERATION
|————Node:; Text: ;
|———Node:expression_statement Text: Can.setPriority(PRIO_LOW,PRIO_MIN_LOWEST);
|————Node:call_expression Text: Can.setPriority(PRIO_LOW,PRIO_MIN_LOWEST)
|—————Node:field_expression Text: Can.setPriority
|——————Node:identifier Text: Can
|——————Node:. Text: .
|——————Node:field_identifier Text: setPriority
|—————Node:argument_list Text: (PRIO_LOW,PRIO_MIN_LOWEST)
|——————Node:( Text: (
|——————Node:identifier Text: PRIO_LOW
|——————Node:, Text: ,
|——————Node:identifier Text: PRIO_MIN_LOWEST
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: Can.sendRTMMessage(nodeId.getCanID());
|————Node:call_expression Text: Can.sendRTMMessage(nodeId.getCanID())
|—————Node:field_expression Text: Can.sendRTMMessage
|——————Node:identifier Text: Can
|——————Node:. Text: .
|——————Node:field_identifier Text: sendRTMMessage
|—————Node:argument_list Text: (nodeId.getCanID())
|——————Node:( Text: (
|——————Node:call_expression Text: nodeId.getCanID()
|———————Node:field_expression Text: nodeId.getCanID
|————————Node:identifier Text: nodeId
|————————Node:. Text: .
|————————Node:field_identifier Text: getCanID
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: startTime=millis();
|————Node:assignment_expression Text: startTime=millis()
|—————Node:identifier Text: startTime
|—————Node:= Text: =
|—————Node:call_expression Text: millis()
|——————Node:identifier Text: millis
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief
* Finish the auto enumeration. Get the lowest available can id and set the Node to NORMAL mode.
* If a software tool started the ennumeration, it return a NNACK message - in revision.
*/
|—Node:function_definition Text: void MergCBUS::finishSelfEnumeration(){
    state_mode=NORMAL;
    sortArray(buffer,bufferIndex);
    //run the buffer and find the lowest can_id
    byte cid=1;
    for (int i=0;i<bufferIndex;i++){
        if (cid<buffer[i]){
            break;
        }
        cid++;
    }
    if (cid>99){
        #ifdef DEBUGDEF
            Serial.println("Self ennumeration: no can id available.");
        #endif // DEBUGDEF

        //send and error message
        if (softwareEnum){
            sendERRMessage(CMDERR_INVALID_EVENT);
        }
        return;
    }
        #ifdef DEBUGDEF
            Serial.print("Self ennumeration: new can id.");
            Serial.println(cid);
        #endif // DEBUGDEF

    memory.setCanId(cid);
    nodeId.setCanID(cid);
    //TODO: check if it is from software

    if (softwareEnum){
        prepareMessageBuff(OPC_NNACK,
                       highByte(nodeId.getNodeNumber()),
                       lowByte(nodeId.getNodeNumber())  );
        Can.sendMsgBuf(nodeId.getCanID(),0,3,mergCanData);
    }

    return;
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: MergCBUS::finishSelfEnumeration()
|———Node:qualified_identifier Text: MergCBUS::finishSelfEnumeration
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: finishSelfEnumeration
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    state_mode=NORMAL;
    sortArray(buffer,bufferIndex);
    //run the buffer and find the lowest can_id
    byte cid=1;
    for (int i=0;i<bufferIndex;i++){
        if (cid<buffer[i]){
            break;
        }
        cid++;
    }
    if (cid>99){
        #ifdef DEBUGDEF
            Serial.println("Self ennumeration: no can id available.");
        #endif // DEBUGDEF

        //send and error message
        if (softwareEnum){
            sendERRMessage(CMDERR_INVALID_EVENT);
        }
        return;
    }
        #ifdef DEBUGDEF
            Serial.print("Self ennumeration: new can id.");
            Serial.println(cid);
        #endif // DEBUGDEF

    memory.setCanId(cid);
    nodeId.setCanID(cid);
    //TODO: check if it is from software

    if (softwareEnum){
        prepareMessageBuff(OPC_NNACK,
                       highByte(nodeId.getNodeNumber()),
                       lowByte(nodeId.getNodeNumber())  );
        Can.sendMsgBuf(nodeId.getCanID(),0,3,mergCanData);
    }

    return;
}
|———Node:{ Text: {
|———Node:expression_statement Text: state_mode=NORMAL;
|————Node:assignment_expression Text: state_mode=NORMAL
|—————Node:identifier Text: state_mode
|—————Node:= Text: =
|—————Node:identifier Text: NORMAL
|————Node:; Text: ;
|———Node:expression_statement Text: sortArray(buffer,bufferIndex);
|————Node:call_expression Text: sortArray(buffer,bufferIndex)
|—————Node:identifier Text: sortArray
|—————Node:argument_list Text: (buffer,bufferIndex)
|——————Node:( Text: (
|——————Node:identifier Text: buffer
|——————Node:, Text: ,
|——————Node:identifier Text: bufferIndex
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment Text: //run the buffer and find the lowest can_id
|———Node:declaration Text: byte cid=1;
|————Node:type_identifier Text: byte
|————Node:init_declarator Text: cid=1
|—————Node:identifier Text: cid
|—————Node:= Text: =
|—————Node:number_literal Text: 1
|————Node:; Text: ;
|———Node:for_statement Text: for (int i=0;i<bufferIndex;i++){
        if (cid<buffer[i]){
            break;
        }
        cid++;
    }
|————Node:for Text: for
|————Node:( Text: (
|————Node:declaration Text: int i=0;
|—————Node:primitive_type Text: int
|—————Node:init_declarator Text: i=0
|——————Node:identifier Text: i
|——————Node:= Text: =
|——————Node:number_literal Text: 0
|—————Node:; Text: ;
|————Node:binary_expression Text: i<bufferIndex
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:identifier Text: bufferIndex
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
        if (cid<buffer[i]){
            break;
        }
        cid++;
    }
|—————Node:{ Text: {
|—————Node:if_statement Text: if (cid<buffer[i]){
            break;
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (cid<buffer[i])
|———————Node:( Text: (
|———————Node:binary_expression Text: cid<buffer[i]
|————————Node:identifier Text: cid
|————————Node:< Text: <
|————————Node:subscript_expression Text: buffer[i]
|—————————Node:identifier Text: buffer
|—————————Node:subscript_argument_list Text: [i]
|——————————Node:[ Text: [
|——————————Node:identifier Text: i
|——————————Node:] Text: ]
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            break;
        }
|———————Node:{ Text: {
|———————Node:break_statement Text: break;
|————————Node:break Text: break
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:expression_statement Text: cid++;
|——————Node:update_expression Text: cid++
|———————Node:identifier Text: cid
|———————Node:++ Text: ++
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:if_statement Text: if (cid>99){
        #ifdef DEBUGDEF
            Serial.println("Self ennumeration: no can id available.");
        #endif // DEBUGDEF

        //send and error message
        if (softwareEnum){
            sendERRMessage(CMDERR_INVALID_EVENT);
        }
        return;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (cid>99)
|—————Node:( Text: (
|—————Node:binary_expression Text: cid>99
|——————Node:identifier Text: cid
|——————Node:> Text: >
|——————Node:number_literal Text: 99
|—————Node:) Text: )
|————Node:compound_statement Text: {
        #ifdef DEBUGDEF
            Serial.println("Self ennumeration: no can id available.");
        #endif // DEBUGDEF

        //send and error message
        if (softwareEnum){
            sendERRMessage(CMDERR_INVALID_EVENT);
        }
        return;
    }
|—————Node:{ Text: {
|—————Node:preproc_ifdef Text: #ifdef DEBUGDEF
            Serial.println("Self ennumeration: no can id available.");
        #endif
|——————Node:#ifdef Text: #ifdef
|——————Node:identifier Text: DEBUGDEF
|——————Node:expression_statement Text: Serial.println("Self ennumeration: no can id available.");
|———————Node:call_expression Text: Serial.println("Self ennumeration: no can id available.")
|————————Node:field_expression Text: Serial.println
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: println
|————————Node:argument_list Text: ("Self ennumeration: no can id available.")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Self ennumeration: no can id available."
|——————————Node:" Text: "
|——————————Node:string_content Text: Self ennumeration: no can id available.
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:#endif Text: #endif
|—————Node:comment Text: // DEBUGDEF
|—————Node:comment Text: //send and error message
|—————Node:if_statement Text: if (softwareEnum){
            sendERRMessage(CMDERR_INVALID_EVENT);
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (softwareEnum)
|———————Node:( Text: (
|———————Node:identifier Text: softwareEnum
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            sendERRMessage(CMDERR_INVALID_EVENT);
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: sendERRMessage(CMDERR_INVALID_EVENT);
|————————Node:call_expression Text: sendERRMessage(CMDERR_INVALID_EVENT)
|—————————Node:identifier Text: sendERRMessage
|—————————Node:argument_list Text: (CMDERR_INVALID_EVENT)
|——————————Node:( Text: (
|——————————Node:identifier Text: CMDERR_INVALID_EVENT
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:return_statement Text: return;
|——————Node:return Text: return
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:preproc_ifdef Text: #ifdef DEBUGDEF
            Serial.print("Self ennumeration: new can id.");
            Serial.println(cid);
        #endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: DEBUGDEF
|————Node:expression_statement Text: Serial.print("Self ennumeration: new can id.");
|—————Node:call_expression Text: Serial.print("Self ennumeration: new can id.")
|——————Node:field_expression Text: Serial.print
|———————Node:identifier Text: Serial
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("Self ennumeration: new can id.")
|———————Node:( Text: (
|———————Node:string_literal Text: "Self ennumeration: new can id."
|————————Node:" Text: "
|————————Node:string_content Text: Self ennumeration: new can id.
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: Serial.println(cid);
|—————Node:call_expression Text: Serial.println(cid)
|——————Node:field_expression Text: Serial.println
|———————Node:identifier Text: Serial
|———————Node:. Text: .
|———————Node:field_identifier Text: println
|——————Node:argument_list Text: (cid)
|———————Node:( Text: (
|———————Node:identifier Text: cid
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:comment Text: // DEBUGDEF
|———Node:expression_statement Text: memory.setCanId(cid);
|————Node:call_expression Text: memory.setCanId(cid)
|—————Node:field_expression Text: memory.setCanId
|——————Node:identifier Text: memory
|——————Node:. Text: .
|——————Node:field_identifier Text: setCanId
|—————Node:argument_list Text: (cid)
|——————Node:( Text: (
|——————Node:identifier Text: cid
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: nodeId.setCanID(cid);
|————Node:call_expression Text: nodeId.setCanID(cid)
|—————Node:field_expression Text: nodeId.setCanID
|——————Node:identifier Text: nodeId
|——————Node:. Text: .
|——————Node:field_identifier Text: setCanID
|—————Node:argument_list Text: (cid)
|——————Node:( Text: (
|——————Node:identifier Text: cid
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment Text: //TODO: check if it is from software
|———Node:if_statement Text: if (softwareEnum){
        prepareMessageBuff(OPC_NNACK,
                       highByte(nodeId.getNodeNumber()),
                       lowByte(nodeId.getNodeNumber())  );
        Can.sendMsgBuf(nodeId.getCanID(),0,3,mergCanData);
    }
|————Node:if Text: if
|————Node:condition_clause Text: (softwareEnum)
|—————Node:( Text: (
|—————Node:identifier Text: softwareEnum
|—————Node:) Text: )
|————Node:compound_statement Text: {
        prepareMessageBuff(OPC_NNACK,
                       highByte(nodeId.getNodeNumber()),
                       lowByte(nodeId.getNodeNumber())  );
        Can.sendMsgBuf(nodeId.getCanID(),0,3,mergCanData);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: prepareMessageBuff(OPC_NNACK,
                       highByte(nodeId.getNodeNumber()),
                       lowByte(nodeId.getNodeNumber())  );
|——————Node:call_expression Text: prepareMessageBuff(OPC_NNACK,
                       highByte(nodeId.getNodeNumber()),
                       lowByte(nodeId.getNodeNumber())  )
|———————Node:identifier Text: prepareMessageBuff
|———————Node:argument_list Text: (OPC_NNACK,
                       highByte(nodeId.getNodeNumber()),
                       lowByte(nodeId.getNodeNumber())  )
|————————Node:( Text: (
|————————Node:identifier Text: OPC_NNACK
|————————Node:, Text: ,
|————————Node:call_expression Text: highByte(nodeId.getNodeNumber())
|—————————Node:identifier Text: highByte
|—————————Node:argument_list Text: (nodeId.getNodeNumber())
|——————————Node:( Text: (
|——————————Node:call_expression Text: nodeId.getNodeNumber()
|———————————Node:field_expression Text: nodeId.getNodeNumber
|————————————Node:identifier Text: nodeId
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getNodeNumber
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:call_expression Text: lowByte(nodeId.getNodeNumber())
|—————————Node:identifier Text: lowByte
|—————————Node:argument_list Text: (nodeId.getNodeNumber())
|——————————Node:( Text: (
|——————————Node:call_expression Text: nodeId.getNodeNumber()
|———————————Node:field_expression Text: nodeId.getNodeNumber
|————————————Node:identifier Text: nodeId
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getNodeNumber
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: Can.sendMsgBuf(nodeId.getCanID(),0,3,mergCanData);
|——————Node:call_expression Text: Can.sendMsgBuf(nodeId.getCanID(),0,3,mergCanData)
|———————Node:field_expression Text: Can.sendMsgBuf
|————————Node:identifier Text: Can
|————————Node:. Text: .
|————————Node:field_identifier Text: sendMsgBuf
|———————Node:argument_list Text: (nodeId.getCanID(),0,3,mergCanData)
|————————Node:( Text: (
|————————Node:call_expression Text: nodeId.getCanID()
|—————————Node:field_expression Text: nodeId.getCanID
|——————————Node:identifier Text: nodeId
|——————————Node:. Text: .
|——————————Node:field_identifier Text: getCanID
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:number_literal Text: 0
|————————Node:, Text: ,
|————————Node:number_literal Text: 3
|————————Node:, Text: ,
|————————Node:identifier Text: mergCanData
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return;
|————Node:return Text: return
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief
* Handle all config messages
* Do the hard work of learning and managing the memory
*/
|—Node:function_definition Text: byte MergCBUS::handleConfigMessages(){

    uint8_t ind,val,evidx,resp;
    unsigned int ev,nn;

    //config messages should be directed to node number or device id
    if (message.getNodeNumber()!=nodeId.getNodeNumber()) {
        #ifdef DEBUGDEF
            Serial.println("handleConfigMessages- NN different from message NN");
        #endif // DEBUGDEF

        if (state_mode==NORMAL || state_mode==SELF_ENUMERATION || state_mode==BOOT){
                #ifdef DEBUGDEF
                    Serial.println("handleConfigMessages- not in setup mode. leaving");
                #endif // DEBUGDEF

                return OK;
        }
    }
    #ifdef DEBUGDEF
         Serial.println("handleConfigMessages- Processing config message");
        Serial.print("handleConfigMessages- state:");
        Serial.println(state_mode);
        printReceivedMessage();
    #endif // DEBUGDEF


    nn=nodeId.getNodeNumber();
    uint8_t opc=message.getOpc();

    switch (opc){

    case OPC_RSTAT:
        //command station
        return OK;
        break;

    case OPC_QNN:
        //response with a OPC_PNN if we have a node ID
        //[<MjPri><MinPri=3><CANID>]<B6><NN Hi><NN Lo><Manuf Id><Module Id><Flags>

        if (nn>0){
            prepareMessage(OPC_PNN);
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_QNN sending OPC_PNN");
                printSentMessage();
            #endif // DEBUGDEF

            return sendCanMessage();
        }
        break;

    case OPC_RQNP:
        //Answer with OPC_PARAMS
        //<0xEF><PARA 1><PARA 2><PARA 3> <PARA 4><PARA 5><PARA 6><PARA 7>
        //The parameters are defined as:
        //Para 1 The manufacturer ID as a HEX numeric (If the manufacturer has a NMRA
        //number this can be used)
        //Para 2 Minor code version as an alphabetic character (ASCII)
        //Para 3 Manufacturer’s module identifier as a HEX numeric
        //Para 4 Number of supported events as a HEX numeric
        //Para 5 Number of Event Variables per event as a HEX numeric
        //Para 6 Number of supported Node Variables as a HEX numeric
        //Para 7 Major version as a HEX numeric. (can be 0 if no major version allocated)
        //Para 8 Node Flags
        if (state_mode==SETUP){
            clearMsgToSend();
            prepareMessage(OPC_PARAMS);
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_RQNP sending OPC_PARAMS");
                printSentMessage();
            #endif // DEBUGDEF

            return sendCanMessage();
        }
        break;

    case OPC_RQMN:
        //Answer with OPC_NAME
        if (state_mode==SETUP){
            prepareMessage(OPC_NAME);
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_RQNN sending OPC_NAME");
                printSentMessage();
            #endif // DEBUGDEF


            return sendCanMessage();
        }else{
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_RQNN and not in setup mode.");
            #endif // DEBUGDEF

            sendERRMessage(CMDERR_NOT_SETUP);
        }
        break;

    case OPC_SNN:
        //set the node number
        //answer with OPC_NNACK
        if (state_mode==SETUP){
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_SNN sending OPC_NNACK");
                //printSentMessage();
            #endif // DEBUGDEF

            nodeId.setNodeNumber(message.getNodeNumber());
            memory.setNodeNumber(nodeId.getNodeNumber());
            prepareMessage(OPC_NNACK);

            state_mode=NORMAL;
            setFlimMode();
            saveNodeFlags();
            return sendCanMessage();
        }else{
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_SNN and not in setup mode.");
                //printSentMessage();
            #endif // DEBUGDEF


            sendERRMessage(CMDERR_NOT_SETUP);
        }
        break;

    case OPC_NNLRN:
        //put the node in the lear mode
        state_mode=LEARN;
        #ifdef DEBUGDEF
                Serial.println("going to LEARN MODE.");
                //printSentMessage();
            #endif // DEBUGDEF

        break;

    case OPC_NNULN:
        //leaving the learn mode
        state_mode=NORMAL;
        #ifdef DEBUGDEF
                Serial.println("going to NORMAL MODE.");
                //printSentMessage();
            #endif // DEBUGDEF

        break;

    case OPC_NNCLR:
        //clear all events from the node
        if (state_mode==LEARN){
            #ifdef DEBUGDEF
                Serial.println("Clear all events.");
                //printSentMessage();
            #endif // DEBUGDEF

            memory.eraseAllEvents();
            return OK;
        }
        break;

    case OPC_NNEVN:
        //read the events available in memory
        prepareMessage(OPC_EVNLF);

        #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_NNEVN sending OPC_EVNLF");
                printSentMessage();
        #endif // DEBUGDEF

        return sendCanMessage();
        break;

    case OPC_NERD:
        //send back all stored events in message OPC_ENRSP
        uint8_t i;
	i = memory.getNumEvents();

        #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_NERD sending OPC_ENRSP");
                Serial.println(i);
                    //printSentMessage();
        #endif // DEBUGDEF


        if (i>0){
            //byte *events=memory.getEvents();
            uint8_t pos=0;
            for (uint8_t j=0;j<i;j++){
                byte *event=memory.getEvent(j);
                prepareMessageBuff(OPC_ENRSP,highByte(nn),lowByte(nn),
                                event[pos],
                                event[pos+1],
                                event[pos+2],
                                event[pos+3],
                                (j+1));
                pos=0;
                ind=sendCanMessage();
            }
        }
        break;

    case OPC_RQEVN:
        //request the number of stored events
        prepareMessage(OPC_NUMEV);
        #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_RQEVN sending OPC_NUMEV");
            printSentMessage();
        #endif // DEBUGDEF

        sendCanMessage();
        break;
    case OPC_BOOT:
        //boot mode. not supported
        return OK;
        break;
    case OPC_ENUM:
        //has to be handled in the automatic procedure
        if (message.getNodeNumber()==nodeId.getNodeNumber()){
            #ifdef DEBUGDEF
                Serial.println("Doing self ennumeration");
            #endif // DEBUGDEF

            doSelfEnnumeration(true);
        }

        break;

    case OPC_NVRD:
        //answer with NVANS
        ind=message.getNodeVariableIndex();

        prepareMessageBuff(OPC_NVANS,highByte(nn),lowByte(nn),ind,memory.getVar(ind-1));//the CBUS index start with 1
        #ifdef DEBUGDEF
            Serial.println("RECEIVED OPC_NVRD sending OPC_NVANS");
            printSentMessage();
        #endif // DEBUGDEF

        sendCanMessage();
        break;

    case OPC_NENRD:
        //Request read of stored events by event index
        clearMsgToSend();
        ind=message.getEventIndex();
        byte *event;
        event=memory.getEvent(ind-1);//the CBUS index start with 1
        prepareMessageBuff(OPC_ENRSP,highByte(nn),lowByte(nn),event[0],event[1],event[2],event[3],ind);

        #ifdef DEBUGDEF
            Serial.println("RECEIVED OPC_NENRD sending OPC_ENRSP");
            printSentMessage();
        #endif // DEBUGDEF

        sendCanMessage();

        break;

    case OPC_RQNPN:
        //Request node parameter. Answer with PARAN
        ind=message.getParaIndex();

        if (ind==0){
            prepareMessageBuff(OPC_PARAN,highByte(nn),lowByte(nn),ind,nodeId.getNumberOfParameters());//the CBUS index start with 1
        }
        else{
            prepareMessageBuff(OPC_PARAN,highByte(nn),lowByte(nn),ind,nodeId.getParameter(ind));
        }
        #ifdef DEBUGDEF
            Serial.println("RECEIVED OPC_RQNPN sending OPC_PARAN");
            printSentMessage();
        #endif // DEBUGDEF

        sendCanMessage();
        break;

    case OPC_CANID:
        //force a new can id
        ind=message.getByte(3);
        nodeId.setCanID(ind);
        memory.setCanId(ind);
        prepareMessage(OPC_NNACK);
        #ifdef DEBUGDEF
            Serial.println("RECEIVED OPC_CANID sending OPC_NNACK");
            printSentMessage();
        #endif // DEBUGDEF

        sendCanMessage();
        break;

    case OPC_EVULN:
        //Unlearn event
        #ifdef DEBUGDEF
            Serial.println("Unlearn event");
            //printSentMessage();
        #endif // DEBUGDEF

        if (state_mode==LEARN){
            ev=message.getEventNumber();
            nn=message.getNodeNumber();
            evidx=memory.getEventIndex(nn,ev);

            if (evidx>nodeId.getSuportedEvents()){
                //Serial.println("Error unlearn event");
                sendERRMessage(CMDERR_INVALID_EVENT);
                break;
            }

            if (memory.eraseEvent(evidx)!=ev){
                //send ack
                prepareMessage(OPC_WRACK);
                sendCanMessage();
            }else{
                //send error
                sendERRMessage(CMDERR_INVALID_EVENT);
            }
        }else{
            sendERRMessage(CMDERR_NOT_LRN);
        }

        break;

    case OPC_NVSET:
        //set a node variable
        ind=message.getNodeVariableIndex()-1;//the CBUS index start with 1
        val=message.getNodeVariable();
        #ifdef DEBUGDEF
            Serial.println("Learning node variable");
            //printSentMessage();
        #endif // DEBUGDEF

        setNodeVariableAuto(ind,val,true);

        break;

    case OPC_REVAL:
        //Request for read of an event variable
        evidx=message.getEventIndex();
        ind=message.getEventVarIndex();
        if (ind>nodeId.getSuportedEventsVariables()){
            //index too big
            sendERRMessage(CMDERR_INV_NV_IDX);
            break;
        }
        val=memory.getEventVar(evidx-1,ind-1);//the CBUS index start with 1
        nn=nodeId.getNodeNumber();

        prepareMessageBuff(OPC_NEVAL,highByte(nn),lowByte(nn),evidx,ind,val);
        #ifdef DEBUGDEF
            Serial.println("RECEIVED OPC_REVAL sending OPC_NEVAL");
            printSentMessage();
        #endif // DEBUGDEF

        sendCanMessage();
        break;

    case OPC_REQEV:
        //Read event variable in learn mode
        if (state_mode==LEARN){
            ev=message.getEventNumber();
            evidx=memory.getEventIndex(nn,ev);
            ind=message.getEventVarIndex();
            val=memory.getEventVar(evidx,ind-1);//the CBUS index start with 1

            prepareMessageBuff(OPC_EVANS,highByte(nn),lowByte(nn),highByte(ev),lowByte(ev),ind,val);

        #ifdef DEBUGDEF
            Serial.println("RECEIVED OPC_REQEV sending OPC_EVANS");
            printSentMessage();
        #endif // DEBUGDEF

            sendCanMessage();
        }else{
            sendERRMessage(CMDERR_NOT_LRN);
        }

        break;

    case OPC_EVLRN:
        //learn event
        if (state_mode==LEARN){
            learnEvent();
        }else{
            sendERRMessage(CMDERR_NOT_LRN);
        }
        break;

    case OPC_EVLRNI:
        //learn event by index. like an update

        if (state_mode==LEARN){

            //TODO: suport device number mode
            #ifdef DEBUGDEF
                 Serial.println("Learning event by index.");
            #endif // DEBUGDEF

            ev=message.getEventNumber();
            nn=message.getNodeNumber();
            ind=message.getEventVarIndex();
            val=message.getEventVar();
            evidx=message.getEventIndex();

            //save event and get the index
            buffer[0]=highByte(nn);
            buffer[1]=lowByte(nn);
            buffer[2]=highByte(ev);
            buffer[3]=lowByte(ev);
            resp=memory.setEvent(buffer,evidx-1);

            if (resp != (evidx-1)){
                //send a message error
                #ifdef DEBUGDEF
                    Serial.println("Error EVLRNI");
                #endif // DEBUGDEF

                sendERRMessage(CMDERR_INV_EV_IDX);
                return OK;
            }

            //save the parameter
            //the CBUS index start with 1

            resp = memory.setEventVar(evidx-1,ind-1,val);

            if (resp != (ind-1)){
                //send a message error
                #ifdef DEBUGDEF
                    Serial.println("Error EVLRNI 2");
                #endif // DEBUGDEF

                sendERRMessage(CMDERR_INV_NV_IDX);
                return OK;
            }

            //send a WRACK back
            prepareMessage(OPC_WRACK);
            sendCanMessage();
        }
	else{
            sendERRMessage(CMDERR_NOT_LRN);
        }

        break;
   }

    return OK;
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: MergCBUS::handleConfigMessages()
|———Node:qualified_identifier Text: MergCBUS::handleConfigMessages
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: handleConfigMessages
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {

    uint8_t ind,val,evidx,resp;
    unsigned int ev,nn;

    //config messages should be directed to node number or device id
    if (message.getNodeNumber()!=nodeId.getNodeNumber()) {
        #ifdef DEBUGDEF
            Serial.println("handleConfigMessages- NN different from message NN");
        #endif // DEBUGDEF

        if (state_mode==NORMAL || state_mode==SELF_ENUMERATION || state_mode==BOOT){
                #ifdef DEBUGDEF
                    Serial.println("handleConfigMessages- not in setup mode. leaving");
                #endif // DEBUGDEF

                return OK;
        }
    }
    #ifdef DEBUGDEF
         Serial.println("handleConfigMessages- Processing config message");
        Serial.print("handleConfigMessages- state:");
        Serial.println(state_mode);
        printReceivedMessage();
    #endif // DEBUGDEF


    nn=nodeId.getNodeNumber();
    uint8_t opc=message.getOpc();

    switch (opc){

    case OPC_RSTAT:
        //command station
        return OK;
        break;

    case OPC_QNN:
        //response with a OPC_PNN if we have a node ID
        //[<MjPri><MinPri=3><CANID>]<B6><NN Hi><NN Lo><Manuf Id><Module Id><Flags>

        if (nn>0){
            prepareMessage(OPC_PNN);
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_QNN sending OPC_PNN");
                printSentMessage();
            #endif // DEBUGDEF

            return sendCanMessage();
        }
        break;

    case OPC_RQNP:
        //Answer with OPC_PARAMS
        //<0xEF><PARA 1><PARA 2><PARA 3> <PARA 4><PARA 5><PARA 6><PARA 7>
        //The parameters are defined as:
        //Para 1 The manufacturer ID as a HEX numeric (If the manufacturer has a NMRA
        //number this can be used)
        //Para 2 Minor code version as an alphabetic character (ASCII)
        //Para 3 Manufacturer’s module identifier as a HEX numeric
        //Para 4 Number of supported events as a HEX numeric
        //Para 5 Number of Event Variables per event as a HEX numeric
        //Para 6 Number of supported Node Variables as a HEX numeric
        //Para 7 Major version as a HEX numeric. (can be 0 if no major version allocated)
        //Para 8 Node Flags
        if (state_mode==SETUP){
            clearMsgToSend();
            prepareMessage(OPC_PARAMS);
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_RQNP sending OPC_PARAMS");
                printSentMessage();
            #endif // DEBUGDEF

            return sendCanMessage();
        }
        break;

    case OPC_RQMN:
        //Answer with OPC_NAME
        if (state_mode==SETUP){
            prepareMessage(OPC_NAME);
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_RQNN sending OPC_NAME");
                printSentMessage();
            #endif // DEBUGDEF


            return sendCanMessage();
        }else{
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_RQNN and not in setup mode.");
            #endif // DEBUGDEF

            sendERRMessage(CMDERR_NOT_SETUP);
        }
        break;

    case OPC_SNN:
        //set the node number
        //answer with OPC_NNACK
        if (state_mode==SETUP){
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_SNN sending OPC_NNACK");
                //printSentMessage();
            #endif // DEBUGDEF

            nodeId.setNodeNumber(message.getNodeNumber());
            memory.setNodeNumber(nodeId.getNodeNumber());
            prepareMessage(OPC_NNACK);

            state_mode=NORMAL;
            setFlimMode();
            saveNodeFlags();
            return sendCanMessage();
        }else{
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_SNN and not in setup mode.");
                //printSentMessage();
            #endif // DEBUGDEF


            sendERRMessage(CMDERR_NOT_SETUP);
        }
        break;

    case OPC_NNLRN:
        //put the node in the lear mode
        state_mode=LEARN;
        #ifdef DEBUGDEF
                Serial.println("going to LEARN MODE.");
                //printSentMessage();
            #endif // DEBUGDEF

        break;

    case OPC_NNULN:
        //leaving the learn mode
        state_mode=NORMAL;
        #ifdef DEBUGDEF
                Serial.println("going to NORMAL MODE.");
                //printSentMessage();
            #endif // DEBUGDEF

        break;

    case OPC_NNCLR:
        //clear all events from the node
        if (state_mode==LEARN){
            #ifdef DEBUGDEF
                Serial.println("Clear all events.");
                //printSentMessage();
            #endif // DEBUGDEF

            memory.eraseAllEvents();
            return OK;
        }
        break;

    case OPC_NNEVN:
        //read the events available in memory
        prepareMessage(OPC_EVNLF);

        #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_NNEVN sending OPC_EVNLF");
                printSentMessage();
        #endif // DEBUGDEF

        return sendCanMessage();
        break;

    case OPC_NERD:
        //send back all stored events in message OPC_ENRSP
        uint8_t i;
	i = memory.getNumEvents();

        #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_NERD sending OPC_ENRSP");
                Serial.println(i);
                    //printSentMessage();
        #endif // DEBUGDEF


        if (i>0){
            //byte *events=memory.getEvents();
            uint8_t pos=0;
            for (uint8_t j=0;j<i;j++){
                byte *event=memory.getEvent(j);
                prepareMessageBuff(OPC_ENRSP,highByte(nn),lowByte(nn),
                                event[pos],
                                event[pos+1],
                                event[pos+2],
                                event[pos+3],
                                (j+1));
                pos=0;
                ind=sendCanMessage();
            }
        }
        break;

    case OPC_RQEVN:
        //request the number of stored events
        prepareMessage(OPC_NUMEV);
        #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_RQEVN sending OPC_NUMEV");
            printSentMessage();
        #endif // DEBUGDEF

        sendCanMessage();
        break;
    case OPC_BOOT:
        //boot mode. not supported
        return OK;
        break;
    case OPC_ENUM:
        //has to be handled in the automatic procedure
        if (message.getNodeNumber()==nodeId.getNodeNumber()){
            #ifdef DEBUGDEF
                Serial.println("Doing self ennumeration");
            #endif // DEBUGDEF

            doSelfEnnumeration(true);
        }

        break;

    case OPC_NVRD:
        //answer with NVANS
        ind=message.getNodeVariableIndex();

        prepareMessageBuff(OPC_NVANS,highByte(nn),lowByte(nn),ind,memory.getVar(ind-1));//the CBUS index start with 1
        #ifdef DEBUGDEF
            Serial.println("RECEIVED OPC_NVRD sending OPC_NVANS");
            printSentMessage();
        #endif // DEBUGDEF

        sendCanMessage();
        break;

    case OPC_NENRD:
        //Request read of stored events by event index
        clearMsgToSend();
        ind=message.getEventIndex();
        byte *event;
        event=memory.getEvent(ind-1);//the CBUS index start with 1
        prepareMessageBuff(OPC_ENRSP,highByte(nn),lowByte(nn),event[0],event[1],event[2],event[3],ind);

        #ifdef DEBUGDEF
            Serial.println("RECEIVED OPC_NENRD sending OPC_ENRSP");
            printSentMessage();
        #endif // DEBUGDEF

        sendCanMessage();

        break;

    case OPC_RQNPN:
        //Request node parameter. Answer with PARAN
        ind=message.getParaIndex();

        if (ind==0){
            prepareMessageBuff(OPC_PARAN,highByte(nn),lowByte(nn),ind,nodeId.getNumberOfParameters());//the CBUS index start with 1
        }
        else{
            prepareMessageBuff(OPC_PARAN,highByte(nn),lowByte(nn),ind,nodeId.getParameter(ind));
        }
        #ifdef DEBUGDEF
            Serial.println("RECEIVED OPC_RQNPN sending OPC_PARAN");
            printSentMessage();
        #endif // DEBUGDEF

        sendCanMessage();
        break;

    case OPC_CANID:
        //force a new can id
        ind=message.getByte(3);
        nodeId.setCanID(ind);
        memory.setCanId(ind);
        prepareMessage(OPC_NNACK);
        #ifdef DEBUGDEF
            Serial.println("RECEIVED OPC_CANID sending OPC_NNACK");
            printSentMessage();
        #endif // DEBUGDEF

        sendCanMessage();
        break;

    case OPC_EVULN:
        //Unlearn event
        #ifdef DEBUGDEF
            Serial.println("Unlearn event");
            //printSentMessage();
        #endif // DEBUGDEF

        if (state_mode==LEARN){
            ev=message.getEventNumber();
            nn=message.getNodeNumber();
            evidx=memory.getEventIndex(nn,ev);

            if (evidx>nodeId.getSuportedEvents()){
                //Serial.println("Error unlearn event");
                sendERRMessage(CMDERR_INVALID_EVENT);
                break;
            }

            if (memory.eraseEvent(evidx)!=ev){
                //send ack
                prepareMessage(OPC_WRACK);
                sendCanMessage();
            }else{
                //send error
                sendERRMessage(CMDERR_INVALID_EVENT);
            }
        }else{
            sendERRMessage(CMDERR_NOT_LRN);
        }

        break;

    case OPC_NVSET:
        //set a node variable
        ind=message.getNodeVariableIndex()-1;//the CBUS index start with 1
        val=message.getNodeVariable();
        #ifdef DEBUGDEF
            Serial.println("Learning node variable");
            //printSentMessage();
        #endif // DEBUGDEF

        setNodeVariableAuto(ind,val,true);

        break;

    case OPC_REVAL:
        //Request for read of an event variable
        evidx=message.getEventIndex();
        ind=message.getEventVarIndex();
        if (ind>nodeId.getSuportedEventsVariables()){
            //index too big
            sendERRMessage(CMDERR_INV_NV_IDX);
            break;
        }
        val=memory.getEventVar(evidx-1,ind-1);//the CBUS index start with 1
        nn=nodeId.getNodeNumber();

        prepareMessageBuff(OPC_NEVAL,highByte(nn),lowByte(nn),evidx,ind,val);
        #ifdef DEBUGDEF
            Serial.println("RECEIVED OPC_REVAL sending OPC_NEVAL");
            printSentMessage();
        #endif // DEBUGDEF

        sendCanMessage();
        break;

    case OPC_REQEV:
        //Read event variable in learn mode
        if (state_mode==LEARN){
            ev=message.getEventNumber();
            evidx=memory.getEventIndex(nn,ev);
            ind=message.getEventVarIndex();
            val=memory.getEventVar(evidx,ind-1);//the CBUS index start with 1

            prepareMessageBuff(OPC_EVANS,highByte(nn),lowByte(nn),highByte(ev),lowByte(ev),ind,val);

        #ifdef DEBUGDEF
            Serial.println("RECEIVED OPC_REQEV sending OPC_EVANS");
            printSentMessage();
        #endif // DEBUGDEF

            sendCanMessage();
        }else{
            sendERRMessage(CMDERR_NOT_LRN);
        }

        break;

    case OPC_EVLRN:
        //learn event
        if (state_mode==LEARN){
            learnEvent();
        }else{
            sendERRMessage(CMDERR_NOT_LRN);
        }
        break;

    case OPC_EVLRNI:
        //learn event by index. like an update

        if (state_mode==LEARN){

            //TODO: suport device number mode
            #ifdef DEBUGDEF
                 Serial.println("Learning event by index.");
            #endif // DEBUGDEF

            ev=message.getEventNumber();
            nn=message.getNodeNumber();
            ind=message.getEventVarIndex();
            val=message.getEventVar();
            evidx=message.getEventIndex();

            //save event and get the index
            buffer[0]=highByte(nn);
            buffer[1]=lowByte(nn);
            buffer[2]=highByte(ev);
            buffer[3]=lowByte(ev);
            resp=memory.setEvent(buffer,evidx-1);

            if (resp != (evidx-1)){
                //send a message error
                #ifdef DEBUGDEF
                    Serial.println("Error EVLRNI");
                #endif // DEBUGDEF

                sendERRMessage(CMDERR_INV_EV_IDX);
                return OK;
            }

            //save the parameter
            //the CBUS index start with 1

            resp = memory.setEventVar(evidx-1,ind-1,val);

            if (resp != (ind-1)){
                //send a message error
                #ifdef DEBUGDEF
                    Serial.println("Error EVLRNI 2");
                #endif // DEBUGDEF

                sendERRMessage(CMDERR_INV_NV_IDX);
                return OK;
            }

            //send a WRACK back
            prepareMessage(OPC_WRACK);
            sendCanMessage();
        }
	else{
            sendERRMessage(CMDERR_NOT_LRN);
        }

        break;
   }

    return OK;
}
|———Node:{ Text: {
|———Node:declaration Text: uint8_t ind,val,evidx,resp;
|————Node:primitive_type Text: uint8_t
|————Node:identifier Text: ind
|————Node:, Text: ,
|————Node:identifier Text: val
|————Node:, Text: ,
|————Node:identifier Text: evidx
|————Node:, Text: ,
|————Node:identifier Text: resp
|————Node:; Text: ;
|———Node:declaration Text: unsigned int ev,nn;
|————Node:sized_type_specifier Text: unsigned int
|—————Node:unsigned Text: unsigned
|—————Node:primitive_type Text: int
|————Node:identifier Text: ev
|————Node:, Text: ,
|————Node:identifier Text: nn
|————Node:; Text: ;
|———Node:comment Text: //config messages should be directed to node number or device id
|———Node:if_statement Text: if (message.getNodeNumber()!=nodeId.getNodeNumber()) {
        #ifdef DEBUGDEF
            Serial.println("handleConfigMessages- NN different from message NN");
        #endif // DEBUGDEF

        if (state_mode==NORMAL || state_mode==SELF_ENUMERATION || state_mode==BOOT){
                #ifdef DEBUGDEF
                    Serial.println("handleConfigMessages- not in setup mode. leaving");
                #endif // DEBUGDEF

                return OK;
        }
    }
|————Node:if Text: if
|————Node:condition_clause Text: (message.getNodeNumber()!=nodeId.getNodeNumber())
|—————Node:( Text: (
|—————Node:binary_expression Text: message.getNodeNumber()!=nodeId.getNodeNumber()
|——————Node:call_expression Text: message.getNodeNumber()
|———————Node:field_expression Text: message.getNodeNumber
|————————Node:identifier Text: message
|————————Node:. Text: .
|————————Node:field_identifier Text: getNodeNumber
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:!= Text: !=
|——————Node:call_expression Text: nodeId.getNodeNumber()
|———————Node:field_expression Text: nodeId.getNodeNumber
|————————Node:identifier Text: nodeId
|————————Node:. Text: .
|————————Node:field_identifier Text: getNodeNumber
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        #ifdef DEBUGDEF
            Serial.println("handleConfigMessages- NN different from message NN");
        #endif // DEBUGDEF

        if (state_mode==NORMAL || state_mode==SELF_ENUMERATION || state_mode==BOOT){
                #ifdef DEBUGDEF
                    Serial.println("handleConfigMessages- not in setup mode. leaving");
                #endif // DEBUGDEF

                return OK;
        }
    }
|—————Node:{ Text: {
|—————Node:preproc_ifdef Text: #ifdef DEBUGDEF
            Serial.println("handleConfigMessages- NN different from message NN");
        #endif
|——————Node:#ifdef Text: #ifdef
|——————Node:identifier Text: DEBUGDEF
|——————Node:expression_statement Text: Serial.println("handleConfigMessages- NN different from message NN");
|———————Node:call_expression Text: Serial.println("handleConfigMessages- NN different from message NN")
|————————Node:field_expression Text: Serial.println
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: println
|————————Node:argument_list Text: ("handleConfigMessages- NN different from message NN")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "handleConfigMessages- NN different from message NN"
|——————————Node:" Text: "
|——————————Node:string_content Text: handleConfigMessages- NN different from message NN
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:#endif Text: #endif
|—————Node:comment Text: // DEBUGDEF
|—————Node:if_statement Text: if (state_mode==NORMAL || state_mode==SELF_ENUMERATION || state_mode==BOOT){
                #ifdef DEBUGDEF
                    Serial.println("handleConfigMessages- not in setup mode. leaving");
                #endif // DEBUGDEF

                return OK;
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (state_mode==NORMAL || state_mode==SELF_ENUMERATION || state_mode==BOOT)
|———————Node:( Text: (
|———————Node:binary_expression Text: state_mode==NORMAL || state_mode==SELF_ENUMERATION || state_mode==BOOT
|————————Node:binary_expression Text: state_mode==NORMAL || state_mode==SELF_ENUMERATION
|—————————Node:binary_expression Text: state_mode==NORMAL
|——————————Node:identifier Text: state_mode
|——————————Node:== Text: ==
|——————————Node:identifier Text: NORMAL
|—————————Node:|| Text: ||
|—————————Node:binary_expression Text: state_mode==SELF_ENUMERATION
|——————————Node:identifier Text: state_mode
|——————————Node:== Text: ==
|——————————Node:identifier Text: SELF_ENUMERATION
|————————Node:|| Text: ||
|————————Node:binary_expression Text: state_mode==BOOT
|—————————Node:identifier Text: state_mode
|—————————Node:== Text: ==
|—————————Node:identifier Text: BOOT
|———————Node:) Text: )
|——————Node:compound_statement Text: {
                #ifdef DEBUGDEF
                    Serial.println("handleConfigMessages- not in setup mode. leaving");
                #endif // DEBUGDEF

                return OK;
        }
|———————Node:{ Text: {
|———————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                    Serial.println("handleConfigMessages- not in setup mode. leaving");
                #endif
|————————Node:#ifdef Text: #ifdef
|————————Node:identifier Text: DEBUGDEF
|————————Node:expression_statement Text: Serial.println("handleConfigMessages- not in setup mode. leaving");
|—————————Node:call_expression Text: Serial.println("handleConfigMessages- not in setup mode. leaving")
|——————————Node:field_expression Text: Serial.println
|———————————Node:identifier Text: Serial
|———————————Node:. Text: .
|———————————Node:field_identifier Text: println
|——————————Node:argument_list Text: ("handleConfigMessages- not in setup mode. leaving")
|———————————Node:( Text: (
|———————————Node:string_literal Text: "handleConfigMessages- not in setup mode. leaving"
|————————————Node:" Text: "
|————————————Node:string_content Text: handleConfigMessages- not in setup mode. leaving
|————————————Node:" Text: "
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:#endif Text: #endif
|———————Node:comment Text: // DEBUGDEF
|———————Node:return_statement Text: return OK;
|————————Node:return Text: return
|————————Node:identifier Text: OK
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:preproc_ifdef Text: #ifdef DEBUGDEF
         Serial.println("handleConfigMessages- Processing config message");
        Serial.print("handleConfigMessages- state:");
        Serial.println(state_mode);
        printReceivedMessage();
    #endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: DEBUGDEF
|————Node:expression_statement Text: Serial.println("handleConfigMessages- Processing config message");
|—————Node:call_expression Text: Serial.println("handleConfigMessages- Processing config message")
|——————Node:field_expression Text: Serial.println
|———————Node:identifier Text: Serial
|———————Node:. Text: .
|———————Node:field_identifier Text: println
|——————Node:argument_list Text: ("handleConfigMessages- Processing config message")
|———————Node:( Text: (
|———————Node:string_literal Text: "handleConfigMessages- Processing config message"
|————————Node:" Text: "
|————————Node:string_content Text: handleConfigMessages- Processing config message
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: Serial.print("handleConfigMessages- state:");
|—————Node:call_expression Text: Serial.print("handleConfigMessages- state:")
|——————Node:field_expression Text: Serial.print
|———————Node:identifier Text: Serial
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("handleConfigMessages- state:")
|———————Node:( Text: (
|———————Node:string_literal Text: "handleConfigMessages- state:"
|————————Node:" Text: "
|————————Node:string_content Text: handleConfigMessages- state:
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: Serial.println(state_mode);
|—————Node:call_expression Text: Serial.println(state_mode)
|——————Node:field_expression Text: Serial.println
|———————Node:identifier Text: Serial
|———————Node:. Text: .
|———————Node:field_identifier Text: println
|——————Node:argument_list Text: (state_mode)
|———————Node:( Text: (
|———————Node:identifier Text: state_mode
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:expression_statement Text: printReceivedMessage();
|—————Node:call_expression Text: printReceivedMessage()
|——————Node:identifier Text: printReceivedMessage
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:comment Text: // DEBUGDEF
|———Node:expression_statement Text: nn=nodeId.getNodeNumber();
|————Node:assignment_expression Text: nn=nodeId.getNodeNumber()
|—————Node:identifier Text: nn
|—————Node:= Text: =
|—————Node:call_expression Text: nodeId.getNodeNumber()
|——————Node:field_expression Text: nodeId.getNodeNumber
|———————Node:identifier Text: nodeId
|———————Node:. Text: .
|———————Node:field_identifier Text: getNodeNumber
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: uint8_t opc=message.getOpc();
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: opc=message.getOpc()
|—————Node:identifier Text: opc
|—————Node:= Text: =
|—————Node:call_expression Text: message.getOpc()
|——————Node:field_expression Text: message.getOpc
|———————Node:identifier Text: message
|———————Node:. Text: .
|———————Node:field_identifier Text: getOpc
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:switch_statement Text: switch (opc){

    case OPC_RSTAT:
        //command station
        return OK;
        break;

    case OPC_QNN:
        //response with a OPC_PNN if we have a node ID
        //[<MjPri><MinPri=3><CANID>]<B6><NN Hi><NN Lo><Manuf Id><Module Id><Flags>

        if (nn>0){
            prepareMessage(OPC_PNN);
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_QNN sending OPC_PNN");
                printSentMessage();
            #endif // DEBUGDEF

            return sendCanMessage();
        }
        break;

    case OPC_RQNP:
        //Answer with OPC_PARAMS
        //<0xEF><PARA 1><PARA 2><PARA 3> <PARA 4><PARA 5><PARA 6><PARA 7>
        //The parameters are defined as:
        //Para 1 The manufacturer ID as a HEX numeric (If the manufacturer has a NMRA
        //number this can be used)
        //Para 2 Minor code version as an alphabetic character (ASCII)
        //Para 3 Manufacturer’s module identifier as a HEX numeric
        //Para 4 Number of supported events as a HEX numeric
        //Para 5 Number of Event Variables per event as a HEX numeric
        //Para 6 Number of supported Node Variables as a HEX numeric
        //Para 7 Major version as a HEX numeric. (can be 0 if no major version allocated)
        //Para 8 Node Flags
        if (state_mode==SETUP){
            clearMsgToSend();
            prepareMessage(OPC_PARAMS);
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_RQNP sending OPC_PARAMS");
                printSentMessage();
            #endif // DEBUGDEF

            return sendCanMessage();
        }
        break;

    case OPC_RQMN:
        //Answer with OPC_NAME
        if (state_mode==SETUP){
            prepareMessage(OPC_NAME);
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_RQNN sending OPC_NAME");
                printSentMessage();
            #endif // DEBUGDEF


            return sendCanMessage();
        }else{
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_RQNN and not in setup mode.");
            #endif // DEBUGDEF

            sendERRMessage(CMDERR_NOT_SETUP);
        }
        break;

    case OPC_SNN:
        //set the node number
        //answer with OPC_NNACK
        if (state_mode==SETUP){
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_SNN sending OPC_NNACK");
                //printSentMessage();
            #endif // DEBUGDEF

            nodeId.setNodeNumber(message.getNodeNumber());
            memory.setNodeNumber(nodeId.getNodeNumber());
            prepareMessage(OPC_NNACK);

            state_mode=NORMAL;
            setFlimMode();
            saveNodeFlags();
            return sendCanMessage();
        }else{
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_SNN and not in setup mode.");
                //printSentMessage();
            #endif // DEBUGDEF


            sendERRMessage(CMDERR_NOT_SETUP);
        }
        break;

    case OPC_NNLRN:
        //put the node in the lear mode
        state_mode=LEARN;
        #ifdef DEBUGDEF
                Serial.println("going to LEARN MODE.");
                //printSentMessage();
            #endif // DEBUGDEF

        break;

    case OPC_NNULN:
        //leaving the learn mode
        state_mode=NORMAL;
        #ifdef DEBUGDEF
                Serial.println("going to NORMAL MODE.");
                //printSentMessage();
            #endif // DEBUGDEF

        break;

    case OPC_NNCLR:
        //clear all events from the node
        if (state_mode==LEARN){
            #ifdef DEBUGDEF
                Serial.println("Clear all events.");
                //printSentMessage();
            #endif // DEBUGDEF

            memory.eraseAllEvents();
            return OK;
        }
        break;

    case OPC_NNEVN:
        //read the events available in memory
        prepareMessage(OPC_EVNLF);

        #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_NNEVN sending OPC_EVNLF");
                printSentMessage();
        #endif // DEBUGDEF

        return sendCanMessage();
        break;

    case OPC_NERD:
        //send back all stored events in message OPC_ENRSP
        uint8_t i;
	i = memory.getNumEvents();

        #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_NERD sending OPC_ENRSP");
                Serial.println(i);
                    //printSentMessage();
        #endif // DEBUGDEF


        if (i>0){
            //byte *events=memory.getEvents();
            uint8_t pos=0;
            for (uint8_t j=0;j<i;j++){
                byte *event=memory.getEvent(j);
                prepareMessageBuff(OPC_ENRSP,highByte(nn),lowByte(nn),
                                event[pos],
                                event[pos+1],
                                event[pos+2],
                                event[pos+3],
                                (j+1));
                pos=0;
                ind=sendCanMessage();
            }
        }
        break;

    case OPC_RQEVN:
        //request the number of stored events
        prepareMessage(OPC_NUMEV);
        #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_RQEVN sending OPC_NUMEV");
            printSentMessage();
        #endif // DEBUGDEF

        sendCanMessage();
        break;
    case OPC_BOOT:
        //boot mode. not supported
        return OK;
        break;
    case OPC_ENUM:
        //has to be handled in the automatic procedure
        if (message.getNodeNumber()==nodeId.getNodeNumber()){
            #ifdef DEBUGDEF
                Serial.println("Doing self ennumeration");
            #endif // DEBUGDEF

            doSelfEnnumeration(true);
        }

        break;

    case OPC_NVRD:
        //answer with NVANS
        ind=message.getNodeVariableIndex();

        prepareMessageBuff(OPC_NVANS,highByte(nn),lowByte(nn),ind,memory.getVar(ind-1));//the CBUS index start with 1
        #ifdef DEBUGDEF
            Serial.println("RECEIVED OPC_NVRD sending OPC_NVANS");
            printSentMessage();
        #endif // DEBUGDEF

        sendCanMessage();
        break;

    case OPC_NENRD:
        //Request read of stored events by event index
        clearMsgToSend();
        ind=message.getEventIndex();
        byte *event;
        event=memory.getEvent(ind-1);//the CBUS index start with 1
        prepareMessageBuff(OPC_ENRSP,highByte(nn),lowByte(nn),event[0],event[1],event[2],event[3],ind);

        #ifdef DEBUGDEF
            Serial.println("RECEIVED OPC_NENRD sending OPC_ENRSP");
            printSentMessage();
        #endif // DEBUGDEF

        sendCanMessage();

        break;

    case OPC_RQNPN:
        //Request node parameter. Answer with PARAN
        ind=message.getParaIndex();

        if (ind==0){
            prepareMessageBuff(OPC_PARAN,highByte(nn),lowByte(nn),ind,nodeId.getNumberOfParameters());//the CBUS index start with 1
        }
        else{
            prepareMessageBuff(OPC_PARAN,highByte(nn),lowByte(nn),ind,nodeId.getParameter(ind));
        }
        #ifdef DEBUGDEF
            Serial.println("RECEIVED OPC_RQNPN sending OPC_PARAN");
            printSentMessage();
        #endif // DEBUGDEF

        sendCanMessage();
        break;

    case OPC_CANID:
        //force a new can id
        ind=message.getByte(3);
        nodeId.setCanID(ind);
        memory.setCanId(ind);
        prepareMessage(OPC_NNACK);
        #ifdef DEBUGDEF
            Serial.println("RECEIVED OPC_CANID sending OPC_NNACK");
            printSentMessage();
        #endif // DEBUGDEF

        sendCanMessage();
        break;

    case OPC_EVULN:
        //Unlearn event
        #ifdef DEBUGDEF
            Serial.println("Unlearn event");
            //printSentMessage();
        #endif // DEBUGDEF

        if (state_mode==LEARN){
            ev=message.getEventNumber();
            nn=message.getNodeNumber();
            evidx=memory.getEventIndex(nn,ev);

            if (evidx>nodeId.getSuportedEvents()){
                //Serial.println("Error unlearn event");
                sendERRMessage(CMDERR_INVALID_EVENT);
                break;
            }

            if (memory.eraseEvent(evidx)!=ev){
                //send ack
                prepareMessage(OPC_WRACK);
                sendCanMessage();
            }else{
                //send error
                sendERRMessage(CMDERR_INVALID_EVENT);
            }
        }else{
            sendERRMessage(CMDERR_NOT_LRN);
        }

        break;

    case OPC_NVSET:
        //set a node variable
        ind=message.getNodeVariableIndex()-1;//the CBUS index start with 1
        val=message.getNodeVariable();
        #ifdef DEBUGDEF
            Serial.println("Learning node variable");
            //printSentMessage();
        #endif // DEBUGDEF

        setNodeVariableAuto(ind,val,true);

        break;

    case OPC_REVAL:
        //Request for read of an event variable
        evidx=message.getEventIndex();
        ind=message.getEventVarIndex();
        if (ind>nodeId.getSuportedEventsVariables()){
            //index too big
            sendERRMessage(CMDERR_INV_NV_IDX);
            break;
        }
        val=memory.getEventVar(evidx-1,ind-1);//the CBUS index start with 1
        nn=nodeId.getNodeNumber();

        prepareMessageBuff(OPC_NEVAL,highByte(nn),lowByte(nn),evidx,ind,val);
        #ifdef DEBUGDEF
            Serial.println("RECEIVED OPC_REVAL sending OPC_NEVAL");
            printSentMessage();
        #endif // DEBUGDEF

        sendCanMessage();
        break;

    case OPC_REQEV:
        //Read event variable in learn mode
        if (state_mode==LEARN){
            ev=message.getEventNumber();
            evidx=memory.getEventIndex(nn,ev);
            ind=message.getEventVarIndex();
            val=memory.getEventVar(evidx,ind-1);//the CBUS index start with 1

            prepareMessageBuff(OPC_EVANS,highByte(nn),lowByte(nn),highByte(ev),lowByte(ev),ind,val);

        #ifdef DEBUGDEF
            Serial.println("RECEIVED OPC_REQEV sending OPC_EVANS");
            printSentMessage();
        #endif // DEBUGDEF

            sendCanMessage();
        }else{
            sendERRMessage(CMDERR_NOT_LRN);
        }

        break;

    case OPC_EVLRN:
        //learn event
        if (state_mode==LEARN){
            learnEvent();
        }else{
            sendERRMessage(CMDERR_NOT_LRN);
        }
        break;

    case OPC_EVLRNI:
        //learn event by index. like an update

        if (state_mode==LEARN){

            //TODO: suport device number mode
            #ifdef DEBUGDEF
                 Serial.println("Learning event by index.");
            #endif // DEBUGDEF

            ev=message.getEventNumber();
            nn=message.getNodeNumber();
            ind=message.getEventVarIndex();
            val=message.getEventVar();
            evidx=message.getEventIndex();

            //save event and get the index
            buffer[0]=highByte(nn);
            buffer[1]=lowByte(nn);
            buffer[2]=highByte(ev);
            buffer[3]=lowByte(ev);
            resp=memory.setEvent(buffer,evidx-1);

            if (resp != (evidx-1)){
                //send a message error
                #ifdef DEBUGDEF
                    Serial.println("Error EVLRNI");
                #endif // DEBUGDEF

                sendERRMessage(CMDERR_INV_EV_IDX);
                return OK;
            }

            //save the parameter
            //the CBUS index start with 1

            resp = memory.setEventVar(evidx-1,ind-1,val);

            if (resp != (ind-1)){
                //send a message error
                #ifdef DEBUGDEF
                    Serial.println("Error EVLRNI 2");
                #endif // DEBUGDEF

                sendERRMessage(CMDERR_INV_NV_IDX);
                return OK;
            }

            //send a WRACK back
            prepareMessage(OPC_WRACK);
            sendCanMessage();
        }
	else{
            sendERRMessage(CMDERR_NOT_LRN);
        }

        break;
   }
|————Node:switch Text: switch
|————Node:condition_clause Text: (opc)
|—————Node:( Text: (
|—————Node:identifier Text: opc
|—————Node:) Text: )
|————Node:compound_statement Text: {

    case OPC_RSTAT:
        //command station
        return OK;
        break;

    case OPC_QNN:
        //response with a OPC_PNN if we have a node ID
        //[<MjPri><MinPri=3><CANID>]<B6><NN Hi><NN Lo><Manuf Id><Module Id><Flags>

        if (nn>0){
            prepareMessage(OPC_PNN);
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_QNN sending OPC_PNN");
                printSentMessage();
            #endif // DEBUGDEF

            return sendCanMessage();
        }
        break;

    case OPC_RQNP:
        //Answer with OPC_PARAMS
        //<0xEF><PARA 1><PARA 2><PARA 3> <PARA 4><PARA 5><PARA 6><PARA 7>
        //The parameters are defined as:
        //Para 1 The manufacturer ID as a HEX numeric (If the manufacturer has a NMRA
        //number this can be used)
        //Para 2 Minor code version as an alphabetic character (ASCII)
        //Para 3 Manufacturer’s module identifier as a HEX numeric
        //Para 4 Number of supported events as a HEX numeric
        //Para 5 Number of Event Variables per event as a HEX numeric
        //Para 6 Number of supported Node Variables as a HEX numeric
        //Para 7 Major version as a HEX numeric. (can be 0 if no major version allocated)
        //Para 8 Node Flags
        if (state_mode==SETUP){
            clearMsgToSend();
            prepareMessage(OPC_PARAMS);
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_RQNP sending OPC_PARAMS");
                printSentMessage();
            #endif // DEBUGDEF

            return sendCanMessage();
        }
        break;

    case OPC_RQMN:
        //Answer with OPC_NAME
        if (state_mode==SETUP){
            prepareMessage(OPC_NAME);
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_RQNN sending OPC_NAME");
                printSentMessage();
            #endif // DEBUGDEF


            return sendCanMessage();
        }else{
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_RQNN and not in setup mode.");
            #endif // DEBUGDEF

            sendERRMessage(CMDERR_NOT_SETUP);
        }
        break;

    case OPC_SNN:
        //set the node number
        //answer with OPC_NNACK
        if (state_mode==SETUP){
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_SNN sending OPC_NNACK");
                //printSentMessage();
            #endif // DEBUGDEF

            nodeId.setNodeNumber(message.getNodeNumber());
            memory.setNodeNumber(nodeId.getNodeNumber());
            prepareMessage(OPC_NNACK);

            state_mode=NORMAL;
            setFlimMode();
            saveNodeFlags();
            return sendCanMessage();
        }else{
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_SNN and not in setup mode.");
                //printSentMessage();
            #endif // DEBUGDEF


            sendERRMessage(CMDERR_NOT_SETUP);
        }
        break;

    case OPC_NNLRN:
        //put the node in the lear mode
        state_mode=LEARN;
        #ifdef DEBUGDEF
                Serial.println("going to LEARN MODE.");
                //printSentMessage();
            #endif // DEBUGDEF

        break;

    case OPC_NNULN:
        //leaving the learn mode
        state_mode=NORMAL;
        #ifdef DEBUGDEF
                Serial.println("going to NORMAL MODE.");
                //printSentMessage();
            #endif // DEBUGDEF

        break;

    case OPC_NNCLR:
        //clear all events from the node
        if (state_mode==LEARN){
            #ifdef DEBUGDEF
                Serial.println("Clear all events.");
                //printSentMessage();
            #endif // DEBUGDEF

            memory.eraseAllEvents();
            return OK;
        }
        break;

    case OPC_NNEVN:
        //read the events available in memory
        prepareMessage(OPC_EVNLF);

        #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_NNEVN sending OPC_EVNLF");
                printSentMessage();
        #endif // DEBUGDEF

        return sendCanMessage();
        break;

    case OPC_NERD:
        //send back all stored events in message OPC_ENRSP
        uint8_t i;
	i = memory.getNumEvents();

        #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_NERD sending OPC_ENRSP");
                Serial.println(i);
                    //printSentMessage();
        #endif // DEBUGDEF


        if (i>0){
            //byte *events=memory.getEvents();
            uint8_t pos=0;
            for (uint8_t j=0;j<i;j++){
                byte *event=memory.getEvent(j);
                prepareMessageBuff(OPC_ENRSP,highByte(nn),lowByte(nn),
                                event[pos],
                                event[pos+1],
                                event[pos+2],
                                event[pos+3],
                                (j+1));
                pos=0;
                ind=sendCanMessage();
            }
        }
        break;

    case OPC_RQEVN:
        //request the number of stored events
        prepareMessage(OPC_NUMEV);
        #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_RQEVN sending OPC_NUMEV");
            printSentMessage();
        #endif // DEBUGDEF

        sendCanMessage();
        break;
    case OPC_BOOT:
        //boot mode. not supported
        return OK;
        break;
    case OPC_ENUM:
        //has to be handled in the automatic procedure
        if (message.getNodeNumber()==nodeId.getNodeNumber()){
            #ifdef DEBUGDEF
                Serial.println("Doing self ennumeration");
            #endif // DEBUGDEF

            doSelfEnnumeration(true);
        }

        break;

    case OPC_NVRD:
        //answer with NVANS
        ind=message.getNodeVariableIndex();

        prepareMessageBuff(OPC_NVANS,highByte(nn),lowByte(nn),ind,memory.getVar(ind-1));//the CBUS index start with 1
        #ifdef DEBUGDEF
            Serial.println("RECEIVED OPC_NVRD sending OPC_NVANS");
            printSentMessage();
        #endif // DEBUGDEF

        sendCanMessage();
        break;

    case OPC_NENRD:
        //Request read of stored events by event index
        clearMsgToSend();
        ind=message.getEventIndex();
        byte *event;
        event=memory.getEvent(ind-1);//the CBUS index start with 1
        prepareMessageBuff(OPC_ENRSP,highByte(nn),lowByte(nn),event[0],event[1],event[2],event[3],ind);

        #ifdef DEBUGDEF
            Serial.println("RECEIVED OPC_NENRD sending OPC_ENRSP");
            printSentMessage();
        #endif // DEBUGDEF

        sendCanMessage();

        break;

    case OPC_RQNPN:
        //Request node parameter. Answer with PARAN
        ind=message.getParaIndex();

        if (ind==0){
            prepareMessageBuff(OPC_PARAN,highByte(nn),lowByte(nn),ind,nodeId.getNumberOfParameters());//the CBUS index start with 1
        }
        else{
            prepareMessageBuff(OPC_PARAN,highByte(nn),lowByte(nn),ind,nodeId.getParameter(ind));
        }
        #ifdef DEBUGDEF
            Serial.println("RECEIVED OPC_RQNPN sending OPC_PARAN");
            printSentMessage();
        #endif // DEBUGDEF

        sendCanMessage();
        break;

    case OPC_CANID:
        //force a new can id
        ind=message.getByte(3);
        nodeId.setCanID(ind);
        memory.setCanId(ind);
        prepareMessage(OPC_NNACK);
        #ifdef DEBUGDEF
            Serial.println("RECEIVED OPC_CANID sending OPC_NNACK");
            printSentMessage();
        #endif // DEBUGDEF

        sendCanMessage();
        break;

    case OPC_EVULN:
        //Unlearn event
        #ifdef DEBUGDEF
            Serial.println("Unlearn event");
            //printSentMessage();
        #endif // DEBUGDEF

        if (state_mode==LEARN){
            ev=message.getEventNumber();
            nn=message.getNodeNumber();
            evidx=memory.getEventIndex(nn,ev);

            if (evidx>nodeId.getSuportedEvents()){
                //Serial.println("Error unlearn event");
                sendERRMessage(CMDERR_INVALID_EVENT);
                break;
            }

            if (memory.eraseEvent(evidx)!=ev){
                //send ack
                prepareMessage(OPC_WRACK);
                sendCanMessage();
            }else{
                //send error
                sendERRMessage(CMDERR_INVALID_EVENT);
            }
        }else{
            sendERRMessage(CMDERR_NOT_LRN);
        }

        break;

    case OPC_NVSET:
        //set a node variable
        ind=message.getNodeVariableIndex()-1;//the CBUS index start with 1
        val=message.getNodeVariable();
        #ifdef DEBUGDEF
            Serial.println("Learning node variable");
            //printSentMessage();
        #endif // DEBUGDEF

        setNodeVariableAuto(ind,val,true);

        break;

    case OPC_REVAL:
        //Request for read of an event variable
        evidx=message.getEventIndex();
        ind=message.getEventVarIndex();
        if (ind>nodeId.getSuportedEventsVariables()){
            //index too big
            sendERRMessage(CMDERR_INV_NV_IDX);
            break;
        }
        val=memory.getEventVar(evidx-1,ind-1);//the CBUS index start with 1
        nn=nodeId.getNodeNumber();

        prepareMessageBuff(OPC_NEVAL,highByte(nn),lowByte(nn),evidx,ind,val);
        #ifdef DEBUGDEF
            Serial.println("RECEIVED OPC_REVAL sending OPC_NEVAL");
            printSentMessage();
        #endif // DEBUGDEF

        sendCanMessage();
        break;

    case OPC_REQEV:
        //Read event variable in learn mode
        if (state_mode==LEARN){
            ev=message.getEventNumber();
            evidx=memory.getEventIndex(nn,ev);
            ind=message.getEventVarIndex();
            val=memory.getEventVar(evidx,ind-1);//the CBUS index start with 1

            prepareMessageBuff(OPC_EVANS,highByte(nn),lowByte(nn),highByte(ev),lowByte(ev),ind,val);

        #ifdef DEBUGDEF
            Serial.println("RECEIVED OPC_REQEV sending OPC_EVANS");
            printSentMessage();
        #endif // DEBUGDEF

            sendCanMessage();
        }else{
            sendERRMessage(CMDERR_NOT_LRN);
        }

        break;

    case OPC_EVLRN:
        //learn event
        if (state_mode==LEARN){
            learnEvent();
        }else{
            sendERRMessage(CMDERR_NOT_LRN);
        }
        break;

    case OPC_EVLRNI:
        //learn event by index. like an update

        if (state_mode==LEARN){

            //TODO: suport device number mode
            #ifdef DEBUGDEF
                 Serial.println("Learning event by index.");
            #endif // DEBUGDEF

            ev=message.getEventNumber();
            nn=message.getNodeNumber();
            ind=message.getEventVarIndex();
            val=message.getEventVar();
            evidx=message.getEventIndex();

            //save event and get the index
            buffer[0]=highByte(nn);
            buffer[1]=lowByte(nn);
            buffer[2]=highByte(ev);
            buffer[3]=lowByte(ev);
            resp=memory.setEvent(buffer,evidx-1);

            if (resp != (evidx-1)){
                //send a message error
                #ifdef DEBUGDEF
                    Serial.println("Error EVLRNI");
                #endif // DEBUGDEF

                sendERRMessage(CMDERR_INV_EV_IDX);
                return OK;
            }

            //save the parameter
            //the CBUS index start with 1

            resp = memory.setEventVar(evidx-1,ind-1,val);

            if (resp != (ind-1)){
                //send a message error
                #ifdef DEBUGDEF
                    Serial.println("Error EVLRNI 2");
                #endif // DEBUGDEF

                sendERRMessage(CMDERR_INV_NV_IDX);
                return OK;
            }

            //send a WRACK back
            prepareMessage(OPC_WRACK);
            sendCanMessage();
        }
	else{
            sendERRMessage(CMDERR_NOT_LRN);
        }

        break;
   }
|—————Node:{ Text: {
|—————Node:case_statement Text: case OPC_RSTAT:
        //command station
        return OK;
        break;
|——————Node:case Text: case
|——————Node:identifier Text: OPC_RSTAT
|——————Node:: Text: :
|——————Node:comment Text: //command station
|——————Node:return_statement Text: return OK;
|———————Node:return Text: return
|———————Node:identifier Text: OK
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case OPC_QNN:
        //response with a OPC_PNN if we have a node ID
        //[<MjPri><MinPri=3><CANID>]<B6><NN Hi><NN Lo><Manuf Id><Module Id><Flags>

        if (nn>0){
            prepareMessage(OPC_PNN);
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_QNN sending OPC_PNN");
                printSentMessage();
            #endif // DEBUGDEF

            return sendCanMessage();
        }
        break;
|——————Node:case Text: case
|——————Node:identifier Text: OPC_QNN
|——————Node:: Text: :
|——————Node:comment Text: //response with a OPC_PNN if we have a node ID
|——————Node:comment Text: //[<MjPri><MinPri=3><CANID>]<B6><NN Hi><NN Lo><Manuf Id><Module Id><Flags>
|——————Node:if_statement Text: if (nn>0){
            prepareMessage(OPC_PNN);
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_QNN sending OPC_PNN");
                printSentMessage();
            #endif // DEBUGDEF

            return sendCanMessage();
        }
|———————Node:if Text: if
|———————Node:condition_clause Text: (nn>0)
|————————Node:( Text: (
|————————Node:binary_expression Text: nn>0
|—————————Node:identifier Text: nn
|—————————Node:> Text: >
|—————————Node:number_literal Text: 0
|————————Node:) Text: )
|———————Node:compound_statement Text: {
            prepareMessage(OPC_PNN);
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_QNN sending OPC_PNN");
                printSentMessage();
            #endif // DEBUGDEF

            return sendCanMessage();
        }
|————————Node:{ Text: {
|————————Node:expression_statement Text: prepareMessage(OPC_PNN);
|—————————Node:call_expression Text: prepareMessage(OPC_PNN)
|——————————Node:identifier Text: prepareMessage
|——————————Node:argument_list Text: (OPC_PNN)
|———————————Node:( Text: (
|———————————Node:identifier Text: OPC_PNN
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_QNN sending OPC_PNN");
                printSentMessage();
            #endif
|—————————Node:#ifdef Text: #ifdef
|—————————Node:identifier Text: DEBUGDEF
|—————————Node:expression_statement Text: Serial.println("RECEIVED OPC_QNN sending OPC_PNN");
|——————————Node:call_expression Text: Serial.println("RECEIVED OPC_QNN sending OPC_PNN")
|———————————Node:field_expression Text: Serial.println
|————————————Node:identifier Text: Serial
|————————————Node:. Text: .
|————————————Node:field_identifier Text: println
|———————————Node:argument_list Text: ("RECEIVED OPC_QNN sending OPC_PNN")
|————————————Node:( Text: (
|————————————Node:string_literal Text: "RECEIVED OPC_QNN sending OPC_PNN"
|—————————————Node:" Text: "
|—————————————Node:string_content Text: RECEIVED OPC_QNN sending OPC_PNN
|—————————————Node:" Text: "
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:expression_statement Text: printSentMessage();
|——————————Node:call_expression Text: printSentMessage()
|———————————Node:identifier Text: printSentMessage
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:#endif Text: #endif
|————————Node:comment Text: // DEBUGDEF
|————————Node:return_statement Text: return sendCanMessage();
|—————————Node:return Text: return
|—————————Node:call_expression Text: sendCanMessage()
|——————————Node:identifier Text: sendCanMessage
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:} Text: }
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case OPC_RQNP:
        //Answer with OPC_PARAMS
        //<0xEF><PARA 1><PARA 2><PARA 3> <PARA 4><PARA 5><PARA 6><PARA 7>
        //The parameters are defined as:
        //Para 1 The manufacturer ID as a HEX numeric (If the manufacturer has a NMRA
        //number this can be used)
        //Para 2 Minor code version as an alphabetic character (ASCII)
        //Para 3 Manufacturer’s module identifier as a HEX numeric
        //Para 4 Number of supported events as a HEX numeric
        //Para 5 Number of Event Variables per event as a HEX numeric
        //Para 6 Number of supported Node Variables as a HEX numeric
        //Para 7 Major version as a HEX numeric. (can be 0 if no major version allocated)
        //Para 8 Node Flags
        if (state_mode==SETUP){
            clearMsgToSend();
            prepareMessage(OPC_PARAMS);
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_RQNP sending OPC_PARAMS");
                printSentMessage();
            #endif // DEBUGDEF

            return sendCanMessage();
        }
        break;
|——————Node:case Text: case
|——————Node:identifier Text: OPC_RQNP
|——————Node:: Text: :
|——————Node:comment Text: //Answer with OPC_PARAMS
|——————Node:comment Text: //<0xEF><PARA 1><PARA 2><PARA 3> <PARA 4><PARA 5><PARA 6><PARA 7>
|——————Node:comment Text: //The parameters are defined as:
|——————Node:comment Text: //Para 1 The manufacturer ID as a HEX numeric (If the manufacturer has a NMRA
|——————Node:comment Text: //number this can be used)
|——————Node:comment Text: //Para 2 Minor code version as an alphabetic character (ASCII)
|——————Node:comment Text: //Para 3 Manufacturer’s module identifier as a HEX numeric
|——————Node:comment Text: //Para 4 Number of supported events as a HEX numeric
|——————Node:comment Text: //Para 5 Number of Event Variables per event as a HEX numeric
|——————Node:comment Text: //Para 6 Number of supported Node Variables as a HEX numeric
|——————Node:comment Text: //Para 7 Major version as a HEX numeric. (can be 0 if no major version allocated)
|——————Node:comment Text: //Para 8 Node Flags
|——————Node:if_statement Text: if (state_mode==SETUP){
            clearMsgToSend();
            prepareMessage(OPC_PARAMS);
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_RQNP sending OPC_PARAMS");
                printSentMessage();
            #endif // DEBUGDEF

            return sendCanMessage();
        }
|———————Node:if Text: if
|———————Node:condition_clause Text: (state_mode==SETUP)
|————————Node:( Text: (
|————————Node:binary_expression Text: state_mode==SETUP
|—————————Node:identifier Text: state_mode
|—————————Node:== Text: ==
|—————————Node:identifier Text: SETUP
|————————Node:) Text: )
|———————Node:compound_statement Text: {
            clearMsgToSend();
            prepareMessage(OPC_PARAMS);
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_RQNP sending OPC_PARAMS");
                printSentMessage();
            #endif // DEBUGDEF

            return sendCanMessage();
        }
|————————Node:{ Text: {
|————————Node:expression_statement Text: clearMsgToSend();
|—————————Node:call_expression Text: clearMsgToSend()
|——————————Node:identifier Text: clearMsgToSend
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: prepareMessage(OPC_PARAMS);
|—————————Node:call_expression Text: prepareMessage(OPC_PARAMS)
|——————————Node:identifier Text: prepareMessage
|——————————Node:argument_list Text: (OPC_PARAMS)
|———————————Node:( Text: (
|———————————Node:identifier Text: OPC_PARAMS
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_RQNP sending OPC_PARAMS");
                printSentMessage();
            #endif
|—————————Node:#ifdef Text: #ifdef
|—————————Node:identifier Text: DEBUGDEF
|—————————Node:expression_statement Text: Serial.println("RECEIVED OPC_RQNP sending OPC_PARAMS");
|——————————Node:call_expression Text: Serial.println("RECEIVED OPC_RQNP sending OPC_PARAMS")
|———————————Node:field_expression Text: Serial.println
|————————————Node:identifier Text: Serial
|————————————Node:. Text: .
|————————————Node:field_identifier Text: println
|———————————Node:argument_list Text: ("RECEIVED OPC_RQNP sending OPC_PARAMS")
|————————————Node:( Text: (
|————————————Node:string_literal Text: "RECEIVED OPC_RQNP sending OPC_PARAMS"
|—————————————Node:" Text: "
|—————————————Node:string_content Text: RECEIVED OPC_RQNP sending OPC_PARAMS
|—————————————Node:" Text: "
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:expression_statement Text: printSentMessage();
|——————————Node:call_expression Text: printSentMessage()
|———————————Node:identifier Text: printSentMessage
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:#endif Text: #endif
|————————Node:comment Text: // DEBUGDEF
|————————Node:return_statement Text: return sendCanMessage();
|—————————Node:return Text: return
|—————————Node:call_expression Text: sendCanMessage()
|——————————Node:identifier Text: sendCanMessage
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:} Text: }
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case OPC_RQMN:
        //Answer with OPC_NAME
        if (state_mode==SETUP){
            prepareMessage(OPC_NAME);
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_RQNN sending OPC_NAME");
                printSentMessage();
            #endif // DEBUGDEF


            return sendCanMessage();
        }else{
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_RQNN and not in setup mode.");
            #endif // DEBUGDEF

            sendERRMessage(CMDERR_NOT_SETUP);
        }
        break;
|——————Node:case Text: case
|——————Node:identifier Text: OPC_RQMN
|——————Node:: Text: :
|——————Node:comment Text: //Answer with OPC_NAME
|——————Node:if_statement Text: if (state_mode==SETUP){
            prepareMessage(OPC_NAME);
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_RQNN sending OPC_NAME");
                printSentMessage();
            #endif // DEBUGDEF


            return sendCanMessage();
        }else{
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_RQNN and not in setup mode.");
            #endif // DEBUGDEF

            sendERRMessage(CMDERR_NOT_SETUP);
        }
|———————Node:if Text: if
|———————Node:condition_clause Text: (state_mode==SETUP)
|————————Node:( Text: (
|————————Node:binary_expression Text: state_mode==SETUP
|—————————Node:identifier Text: state_mode
|—————————Node:== Text: ==
|—————————Node:identifier Text: SETUP
|————————Node:) Text: )
|———————Node:compound_statement Text: {
            prepareMessage(OPC_NAME);
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_RQNN sending OPC_NAME");
                printSentMessage();
            #endif // DEBUGDEF


            return sendCanMessage();
        }
|————————Node:{ Text: {
|————————Node:expression_statement Text: prepareMessage(OPC_NAME);
|—————————Node:call_expression Text: prepareMessage(OPC_NAME)
|——————————Node:identifier Text: prepareMessage
|——————————Node:argument_list Text: (OPC_NAME)
|———————————Node:( Text: (
|———————————Node:identifier Text: OPC_NAME
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_RQNN sending OPC_NAME");
                printSentMessage();
            #endif
|—————————Node:#ifdef Text: #ifdef
|—————————Node:identifier Text: DEBUGDEF
|—————————Node:expression_statement Text: Serial.println("RECEIVED OPC_RQNN sending OPC_NAME");
|——————————Node:call_expression Text: Serial.println("RECEIVED OPC_RQNN sending OPC_NAME")
|———————————Node:field_expression Text: Serial.println
|————————————Node:identifier Text: Serial
|————————————Node:. Text: .
|————————————Node:field_identifier Text: println
|———————————Node:argument_list Text: ("RECEIVED OPC_RQNN sending OPC_NAME")
|————————————Node:( Text: (
|————————————Node:string_literal Text: "RECEIVED OPC_RQNN sending OPC_NAME"
|—————————————Node:" Text: "
|—————————————Node:string_content Text: RECEIVED OPC_RQNN sending OPC_NAME
|—————————————Node:" Text: "
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:expression_statement Text: printSentMessage();
|——————————Node:call_expression Text: printSentMessage()
|———————————Node:identifier Text: printSentMessage
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:#endif Text: #endif
|————————Node:comment Text: // DEBUGDEF
|————————Node:return_statement Text: return sendCanMessage();
|—————————Node:return Text: return
|—————————Node:call_expression Text: sendCanMessage()
|——————————Node:identifier Text: sendCanMessage
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:} Text: }
|———————Node:else_clause Text: else{
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_RQNN and not in setup mode.");
            #endif // DEBUGDEF

            sendERRMessage(CMDERR_NOT_SETUP);
        }
|————————Node:else Text: else
|————————Node:compound_statement Text: {
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_RQNN and not in setup mode.");
            #endif // DEBUGDEF

            sendERRMessage(CMDERR_NOT_SETUP);
        }
|—————————Node:{ Text: {
|—————————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_RQNN and not in setup mode.");
            #endif
|——————————Node:#ifdef Text: #ifdef
|——————————Node:identifier Text: DEBUGDEF
|——————————Node:expression_statement Text: Serial.println("RECEIVED OPC_RQNN and not in setup mode.");
|———————————Node:call_expression Text: Serial.println("RECEIVED OPC_RQNN and not in setup mode.")
|————————————Node:field_expression Text: Serial.println
|—————————————Node:identifier Text: Serial
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: println
|————————————Node:argument_list Text: ("RECEIVED OPC_RQNN and not in setup mode.")
|—————————————Node:( Text: (
|—————————————Node:string_literal Text: "RECEIVED OPC_RQNN and not in setup mode."
|——————————————Node:" Text: "
|——————————————Node:string_content Text: RECEIVED OPC_RQNN and not in setup mode.
|——————————————Node:" Text: "
|—————————————Node:) Text: )
|———————————Node:; Text: ;
|——————————Node:#endif Text: #endif
|—————————Node:comment Text: // DEBUGDEF
|—————————Node:expression_statement Text: sendERRMessage(CMDERR_NOT_SETUP);
|——————————Node:call_expression Text: sendERRMessage(CMDERR_NOT_SETUP)
|———————————Node:identifier Text: sendERRMessage
|———————————Node:argument_list Text: (CMDERR_NOT_SETUP)
|————————————Node:( Text: (
|————————————Node:identifier Text: CMDERR_NOT_SETUP
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:} Text: }
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case OPC_SNN:
        //set the node number
        //answer with OPC_NNACK
        if (state_mode==SETUP){
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_SNN sending OPC_NNACK");
                //printSentMessage();
            #endif // DEBUGDEF

            nodeId.setNodeNumber(message.getNodeNumber());
            memory.setNodeNumber(nodeId.getNodeNumber());
            prepareMessage(OPC_NNACK);

            state_mode=NORMAL;
            setFlimMode();
            saveNodeFlags();
            return sendCanMessage();
        }else{
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_SNN and not in setup mode.");
                //printSentMessage();
            #endif // DEBUGDEF


            sendERRMessage(CMDERR_NOT_SETUP);
        }
        break;
|——————Node:case Text: case
|——————Node:identifier Text: OPC_SNN
|——————Node:: Text: :
|——————Node:comment Text: //set the node number
|——————Node:comment Text: //answer with OPC_NNACK
|——————Node:if_statement Text: if (state_mode==SETUP){
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_SNN sending OPC_NNACK");
                //printSentMessage();
            #endif // DEBUGDEF

            nodeId.setNodeNumber(message.getNodeNumber());
            memory.setNodeNumber(nodeId.getNodeNumber());
            prepareMessage(OPC_NNACK);

            state_mode=NORMAL;
            setFlimMode();
            saveNodeFlags();
            return sendCanMessage();
        }else{
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_SNN and not in setup mode.");
                //printSentMessage();
            #endif // DEBUGDEF


            sendERRMessage(CMDERR_NOT_SETUP);
        }
|———————Node:if Text: if
|———————Node:condition_clause Text: (state_mode==SETUP)
|————————Node:( Text: (
|————————Node:binary_expression Text: state_mode==SETUP
|—————————Node:identifier Text: state_mode
|—————————Node:== Text: ==
|—————————Node:identifier Text: SETUP
|————————Node:) Text: )
|———————Node:compound_statement Text: {
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_SNN sending OPC_NNACK");
                //printSentMessage();
            #endif // DEBUGDEF

            nodeId.setNodeNumber(message.getNodeNumber());
            memory.setNodeNumber(nodeId.getNodeNumber());
            prepareMessage(OPC_NNACK);

            state_mode=NORMAL;
            setFlimMode();
            saveNodeFlags();
            return sendCanMessage();
        }
|————————Node:{ Text: {
|————————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_SNN sending OPC_NNACK");
                //printSentMessage();
            #endif
|—————————Node:#ifdef Text: #ifdef
|—————————Node:identifier Text: DEBUGDEF
|—————————Node:expression_statement Text: Serial.println("RECEIVED OPC_SNN sending OPC_NNACK");
|——————————Node:call_expression Text: Serial.println("RECEIVED OPC_SNN sending OPC_NNACK")
|———————————Node:field_expression Text: Serial.println
|————————————Node:identifier Text: Serial
|————————————Node:. Text: .
|————————————Node:field_identifier Text: println
|———————————Node:argument_list Text: ("RECEIVED OPC_SNN sending OPC_NNACK")
|————————————Node:( Text: (
|————————————Node:string_literal Text: "RECEIVED OPC_SNN sending OPC_NNACK"
|—————————————Node:" Text: "
|—————————————Node:string_content Text: RECEIVED OPC_SNN sending OPC_NNACK
|—————————————Node:" Text: "
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:comment Text: //printSentMessage();
|—————————Node:#endif Text: #endif
|————————Node:comment Text: // DEBUGDEF
|————————Node:expression_statement Text: nodeId.setNodeNumber(message.getNodeNumber());
|—————————Node:call_expression Text: nodeId.setNodeNumber(message.getNodeNumber())
|——————————Node:field_expression Text: nodeId.setNodeNumber
|———————————Node:identifier Text: nodeId
|———————————Node:. Text: .
|———————————Node:field_identifier Text: setNodeNumber
|——————————Node:argument_list Text: (message.getNodeNumber())
|———————————Node:( Text: (
|———————————Node:call_expression Text: message.getNodeNumber()
|————————————Node:field_expression Text: message.getNodeNumber
|—————————————Node:identifier Text: message
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNodeNumber
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: memory.setNodeNumber(nodeId.getNodeNumber());
|—————————Node:call_expression Text: memory.setNodeNumber(nodeId.getNodeNumber())
|——————————Node:field_expression Text: memory.setNodeNumber
|———————————Node:identifier Text: memory
|———————————Node:. Text: .
|———————————Node:field_identifier Text: setNodeNumber
|——————————Node:argument_list Text: (nodeId.getNodeNumber())
|———————————Node:( Text: (
|———————————Node:call_expression Text: nodeId.getNodeNumber()
|————————————Node:field_expression Text: nodeId.getNodeNumber
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNodeNumber
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: prepareMessage(OPC_NNACK);
|—————————Node:call_expression Text: prepareMessage(OPC_NNACK)
|——————————Node:identifier Text: prepareMessage
|——————————Node:argument_list Text: (OPC_NNACK)
|———————————Node:( Text: (
|———————————Node:identifier Text: OPC_NNACK
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: state_mode=NORMAL;
|—————————Node:assignment_expression Text: state_mode=NORMAL
|——————————Node:identifier Text: state_mode
|——————————Node:= Text: =
|——————————Node:identifier Text: NORMAL
|—————————Node:; Text: ;
|————————Node:expression_statement Text: setFlimMode();
|—————————Node:call_expression Text: setFlimMode()
|——————————Node:identifier Text: setFlimMode
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: saveNodeFlags();
|—————————Node:call_expression Text: saveNodeFlags()
|——————————Node:identifier Text: saveNodeFlags
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:return_statement Text: return sendCanMessage();
|—————————Node:return Text: return
|—————————Node:call_expression Text: sendCanMessage()
|——————————Node:identifier Text: sendCanMessage
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:} Text: }
|———————Node:else_clause Text: else{
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_SNN and not in setup mode.");
                //printSentMessage();
            #endif // DEBUGDEF


            sendERRMessage(CMDERR_NOT_SETUP);
        }
|————————Node:else Text: else
|————————Node:compound_statement Text: {
            #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_SNN and not in setup mode.");
                //printSentMessage();
            #endif // DEBUGDEF


            sendERRMessage(CMDERR_NOT_SETUP);
        }
|—————————Node:{ Text: {
|—————————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_SNN and not in setup mode.");
                //printSentMessage();
            #endif
|——————————Node:#ifdef Text: #ifdef
|——————————Node:identifier Text: DEBUGDEF
|——————————Node:expression_statement Text: Serial.println("RECEIVED OPC_SNN and not in setup mode.");
|———————————Node:call_expression Text: Serial.println("RECEIVED OPC_SNN and not in setup mode.")
|————————————Node:field_expression Text: Serial.println
|—————————————Node:identifier Text: Serial
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: println
|————————————Node:argument_list Text: ("RECEIVED OPC_SNN and not in setup mode.")
|—————————————Node:( Text: (
|—————————————Node:string_literal Text: "RECEIVED OPC_SNN and not in setup mode."
|——————————————Node:" Text: "
|——————————————Node:string_content Text: RECEIVED OPC_SNN and not in setup mode.
|——————————————Node:" Text: "
|—————————————Node:) Text: )
|———————————Node:; Text: ;
|——————————Node:comment Text: //printSentMessage();
|——————————Node:#endif Text: #endif
|—————————Node:comment Text: // DEBUGDEF
|—————————Node:expression_statement Text: sendERRMessage(CMDERR_NOT_SETUP);
|——————————Node:call_expression Text: sendERRMessage(CMDERR_NOT_SETUP)
|———————————Node:identifier Text: sendERRMessage
|———————————Node:argument_list Text: (CMDERR_NOT_SETUP)
|————————————Node:( Text: (
|————————————Node:identifier Text: CMDERR_NOT_SETUP
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:} Text: }
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case OPC_NNLRN:
        //put the node in the lear mode
        state_mode=LEARN;
|——————Node:case Text: case
|——————Node:identifier Text: OPC_NNLRN
|——————Node:: Text: :
|——————Node:comment Text: //put the node in the lear mode
|——————Node:expression_statement Text: state_mode=LEARN;
|———————Node:assignment_expression Text: state_mode=LEARN
|————————Node:identifier Text: state_mode
|————————Node:= Text: =
|————————Node:identifier Text: LEARN
|———————Node:; Text: ;
|—————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                Serial.println("going to LEARN MODE.");
                //printSentMessage();
            #endif
|——————Node:#ifdef Text: #ifdef
|——————Node:identifier Text: DEBUGDEF
|——————Node:expression_statement Text: Serial.println("going to LEARN MODE.");
|———————Node:call_expression Text: Serial.println("going to LEARN MODE.")
|————————Node:field_expression Text: Serial.println
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: println
|————————Node:argument_list Text: ("going to LEARN MODE.")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "going to LEARN MODE."
|——————————Node:" Text: "
|——————————Node:string_content Text: going to LEARN MODE.
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:comment Text: //printSentMessage();
|——————Node:#endif Text: #endif
|—————Node:comment Text: // DEBUGDEF
|—————Node:break_statement Text: break;
|——————Node:break Text: break
|——————Node:; Text: ;
|—————Node:case_statement Text: case OPC_NNULN:
        //leaving the learn mode
        state_mode=NORMAL;
|——————Node:case Text: case
|——————Node:identifier Text: OPC_NNULN
|——————Node:: Text: :
|——————Node:comment Text: //leaving the learn mode
|——————Node:expression_statement Text: state_mode=NORMAL;
|———————Node:assignment_expression Text: state_mode=NORMAL
|————————Node:identifier Text: state_mode
|————————Node:= Text: =
|————————Node:identifier Text: NORMAL
|———————Node:; Text: ;
|—————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                Serial.println("going to NORMAL MODE.");
                //printSentMessage();
            #endif
|——————Node:#ifdef Text: #ifdef
|——————Node:identifier Text: DEBUGDEF
|——————Node:expression_statement Text: Serial.println("going to NORMAL MODE.");
|———————Node:call_expression Text: Serial.println("going to NORMAL MODE.")
|————————Node:field_expression Text: Serial.println
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: println
|————————Node:argument_list Text: ("going to NORMAL MODE.")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "going to NORMAL MODE."
|——————————Node:" Text: "
|——————————Node:string_content Text: going to NORMAL MODE.
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:comment Text: //printSentMessage();
|——————Node:#endif Text: #endif
|—————Node:comment Text: // DEBUGDEF
|—————Node:break_statement Text: break;
|——————Node:break Text: break
|——————Node:; Text: ;
|—————Node:case_statement Text: case OPC_NNCLR:
        //clear all events from the node
        if (state_mode==LEARN){
            #ifdef DEBUGDEF
                Serial.println("Clear all events.");
                //printSentMessage();
            #endif // DEBUGDEF

            memory.eraseAllEvents();
            return OK;
        }
        break;
|——————Node:case Text: case
|——————Node:identifier Text: OPC_NNCLR
|——————Node:: Text: :
|——————Node:comment Text: //clear all events from the node
|——————Node:if_statement Text: if (state_mode==LEARN){
            #ifdef DEBUGDEF
                Serial.println("Clear all events.");
                //printSentMessage();
            #endif // DEBUGDEF

            memory.eraseAllEvents();
            return OK;
        }
|———————Node:if Text: if
|———————Node:condition_clause Text: (state_mode==LEARN)
|————————Node:( Text: (
|————————Node:binary_expression Text: state_mode==LEARN
|—————————Node:identifier Text: state_mode
|—————————Node:== Text: ==
|—————————Node:identifier Text: LEARN
|————————Node:) Text: )
|———————Node:compound_statement Text: {
            #ifdef DEBUGDEF
                Serial.println("Clear all events.");
                //printSentMessage();
            #endif // DEBUGDEF

            memory.eraseAllEvents();
            return OK;
        }
|————————Node:{ Text: {
|————————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                Serial.println("Clear all events.");
                //printSentMessage();
            #endif
|—————————Node:#ifdef Text: #ifdef
|—————————Node:identifier Text: DEBUGDEF
|—————————Node:expression_statement Text: Serial.println("Clear all events.");
|——————————Node:call_expression Text: Serial.println("Clear all events.")
|———————————Node:field_expression Text: Serial.println
|————————————Node:identifier Text: Serial
|————————————Node:. Text: .
|————————————Node:field_identifier Text: println
|———————————Node:argument_list Text: ("Clear all events.")
|————————————Node:( Text: (
|————————————Node:string_literal Text: "Clear all events."
|—————————————Node:" Text: "
|—————————————Node:string_content Text: Clear all events.
|—————————————Node:" Text: "
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:comment Text: //printSentMessage();
|—————————Node:#endif Text: #endif
|————————Node:comment Text: // DEBUGDEF
|————————Node:expression_statement Text: memory.eraseAllEvents();
|—————————Node:call_expression Text: memory.eraseAllEvents()
|——————————Node:field_expression Text: memory.eraseAllEvents
|———————————Node:identifier Text: memory
|———————————Node:. Text: .
|———————————Node:field_identifier Text: eraseAllEvents
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:return_statement Text: return OK;
|—————————Node:return Text: return
|—————————Node:identifier Text: OK
|—————————Node:; Text: ;
|————————Node:} Text: }
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case OPC_NNEVN:
        //read the events available in memory
        prepareMessage(OPC_EVNLF);
|——————Node:case Text: case
|——————Node:identifier Text: OPC_NNEVN
|——————Node:: Text: :
|——————Node:comment Text: //read the events available in memory
|——————Node:expression_statement Text: prepareMessage(OPC_EVNLF);
|———————Node:call_expression Text: prepareMessage(OPC_EVNLF)
|————————Node:identifier Text: prepareMessage
|————————Node:argument_list Text: (OPC_EVNLF)
|—————————Node:( Text: (
|—————————Node:identifier Text: OPC_EVNLF
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_NNEVN sending OPC_EVNLF");
                printSentMessage();
        #endif
|——————Node:#ifdef Text: #ifdef
|——————Node:identifier Text: DEBUGDEF
|——————Node:expression_statement Text: Serial.println("RECEIVED OPC_NNEVN sending OPC_EVNLF");
|———————Node:call_expression Text: Serial.println("RECEIVED OPC_NNEVN sending OPC_EVNLF")
|————————Node:field_expression Text: Serial.println
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: println
|————————Node:argument_list Text: ("RECEIVED OPC_NNEVN sending OPC_EVNLF")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "RECEIVED OPC_NNEVN sending OPC_EVNLF"
|——————————Node:" Text: "
|——————————Node:string_content Text: RECEIVED OPC_NNEVN sending OPC_EVNLF
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: printSentMessage();
|———————Node:call_expression Text: printSentMessage()
|————————Node:identifier Text: printSentMessage
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:#endif Text: #endif
|—————Node:comment Text: // DEBUGDEF
|—————Node:return_statement Text: return sendCanMessage();
|——————Node:return Text: return
|——————Node:call_expression Text: sendCanMessage()
|———————Node:identifier Text: sendCanMessage
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:break_statement Text: break;
|——————Node:break Text: break
|——————Node:; Text: ;
|—————Node:case_statement Text: case OPC_NERD:
        //send back all stored events in message OPC_ENRSP
        uint8_t i;
	i = memory.getNumEvents();
|——————Node:case Text: case
|——————Node:identifier Text: OPC_NERD
|——————Node:: Text: :
|——————Node:comment Text: //send back all stored events in message OPC_ENRSP
|——————Node:declaration Text: uint8_t i;
|———————Node:primitive_type Text: uint8_t
|———————Node:identifier Text: i
|———————Node:; Text: ;
|——————Node:expression_statement Text: i = memory.getNumEvents();
|———————Node:assignment_expression Text: i = memory.getNumEvents()
|————————Node:identifier Text: i
|————————Node:= Text: =
|————————Node:call_expression Text: memory.getNumEvents()
|—————————Node:field_expression Text: memory.getNumEvents
|——————————Node:identifier Text: memory
|——————————Node:. Text: .
|——————————Node:field_identifier Text: getNumEvents
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_NERD sending OPC_ENRSP");
                Serial.println(i);
                    //printSentMessage();
        #endif
|——————Node:#ifdef Text: #ifdef
|——————Node:identifier Text: DEBUGDEF
|——————Node:expression_statement Text: Serial.println("RECEIVED OPC_NERD sending OPC_ENRSP");
|———————Node:call_expression Text: Serial.println("RECEIVED OPC_NERD sending OPC_ENRSP")
|————————Node:field_expression Text: Serial.println
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: println
|————————Node:argument_list Text: ("RECEIVED OPC_NERD sending OPC_ENRSP")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "RECEIVED OPC_NERD sending OPC_ENRSP"
|——————————Node:" Text: "
|——————————Node:string_content Text: RECEIVED OPC_NERD sending OPC_ENRSP
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: Serial.println(i);
|———————Node:call_expression Text: Serial.println(i)
|————————Node:field_expression Text: Serial.println
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: println
|————————Node:argument_list Text: (i)
|—————————Node:( Text: (
|—————————Node:identifier Text: i
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:comment Text: //printSentMessage();
|——————Node:#endif Text: #endif
|—————Node:comment Text: // DEBUGDEF
|—————Node:if_statement Text: if (i>0){
            //byte *events=memory.getEvents();
            uint8_t pos=0;
            for (uint8_t j=0;j<i;j++){
                byte *event=memory.getEvent(j);
                prepareMessageBuff(OPC_ENRSP,highByte(nn),lowByte(nn),
                                event[pos],
                                event[pos+1],
                                event[pos+2],
                                event[pos+3],
                                (j+1));
                pos=0;
                ind=sendCanMessage();
            }
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (i>0)
|———————Node:( Text: (
|———————Node:binary_expression Text: i>0
|————————Node:identifier Text: i
|————————Node:> Text: >
|————————Node:number_literal Text: 0
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            //byte *events=memory.getEvents();
            uint8_t pos=0;
            for (uint8_t j=0;j<i;j++){
                byte *event=memory.getEvent(j);
                prepareMessageBuff(OPC_ENRSP,highByte(nn),lowByte(nn),
                                event[pos],
                                event[pos+1],
                                event[pos+2],
                                event[pos+3],
                                (j+1));
                pos=0;
                ind=sendCanMessage();
            }
        }
|———————Node:{ Text: {
|———————Node:comment Text: //byte *events=memory.getEvents();
|———————Node:declaration Text: uint8_t pos=0;
|————————Node:primitive_type Text: uint8_t
|————————Node:init_declarator Text: pos=0
|—————————Node:identifier Text: pos
|—————————Node:= Text: =
|—————————Node:number_literal Text: 0
|————————Node:; Text: ;
|———————Node:for_statement Text: for (uint8_t j=0;j<i;j++){
                byte *event=memory.getEvent(j);
                prepareMessageBuff(OPC_ENRSP,highByte(nn),lowByte(nn),
                                event[pos],
                                event[pos+1],
                                event[pos+2],
                                event[pos+3],
                                (j+1));
                pos=0;
                ind=sendCanMessage();
            }
|————————Node:for Text: for
|————————Node:( Text: (
|————————Node:declaration Text: uint8_t j=0;
|—————————Node:primitive_type Text: uint8_t
|—————————Node:init_declarator Text: j=0
|——————————Node:identifier Text: j
|——————————Node:= Text: =
|——————————Node:number_literal Text: 0
|—————————Node:; Text: ;
|————————Node:binary_expression Text: j<i
|—————————Node:identifier Text: j
|—————————Node:< Text: <
|—————————Node:identifier Text: i
|————————Node:; Text: ;
|————————Node:update_expression Text: j++
|—————————Node:identifier Text: j
|—————————Node:++ Text: ++
|————————Node:) Text: )
|————————Node:compound_statement Text: {
                byte *event=memory.getEvent(j);
                prepareMessageBuff(OPC_ENRSP,highByte(nn),lowByte(nn),
                                event[pos],
                                event[pos+1],
                                event[pos+2],
                                event[pos+3],
                                (j+1));
                pos=0;
                ind=sendCanMessage();
            }
|—————————Node:{ Text: {
|—————————Node:declaration Text: byte *event=memory.getEvent(j);
|——————————Node:type_identifier Text: byte
|——————————Node:init_declarator Text: *event=memory.getEvent(j)
|———————————Node:pointer_declarator Text: *event
|————————————Node:* Text: *
|————————————Node:identifier Text: event
|———————————Node:= Text: =
|———————————Node:call_expression Text: memory.getEvent(j)
|————————————Node:field_expression Text: memory.getEvent
|—————————————Node:identifier Text: memory
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getEvent
|————————————Node:argument_list Text: (j)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: j
|—————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:expression_statement Text: prepareMessageBuff(OPC_ENRSP,highByte(nn),lowByte(nn),
                                event[pos],
                                event[pos+1],
                                event[pos+2],
                                event[pos+3],
                                (j+1));
|——————————Node:call_expression Text: prepareMessageBuff(OPC_ENRSP,highByte(nn),lowByte(nn),
                                event[pos],
                                event[pos+1],
                                event[pos+2],
                                event[pos+3],
                                (j+1))
|———————————Node:identifier Text: prepareMessageBuff
|———————————Node:argument_list Text: (OPC_ENRSP,highByte(nn),lowByte(nn),
                                event[pos],
                                event[pos+1],
                                event[pos+2],
                                event[pos+3],
                                (j+1))
|————————————Node:( Text: (
|————————————Node:identifier Text: OPC_ENRSP
|————————————Node:, Text: ,
|————————————Node:call_expression Text: highByte(nn)
|—————————————Node:identifier Text: highByte
|—————————————Node:argument_list Text: (nn)
|——————————————Node:( Text: (
|——————————————Node:identifier Text: nn
|——————————————Node:) Text: )
|————————————Node:, Text: ,
|————————————Node:call_expression Text: lowByte(nn)
|—————————————Node:identifier Text: lowByte
|—————————————Node:argument_list Text: (nn)
|——————————————Node:( Text: (
|——————————————Node:identifier Text: nn
|——————————————Node:) Text: )
|————————————Node:, Text: ,
|————————————Node:subscript_expression Text: event[pos]
|—————————————Node:identifier Text: event
|—————————————Node:subscript_argument_list Text: [pos]
|——————————————Node:[ Text: [
|——————————————Node:identifier Text: pos
|——————————————Node:] Text: ]
|————————————Node:, Text: ,
|————————————Node:subscript_expression Text: event[pos+1]
|—————————————Node:identifier Text: event
|—————————————Node:subscript_argument_list Text: [pos+1]
|——————————————Node:[ Text: [
|——————————————Node:binary_expression Text: pos+1
|———————————————Node:identifier Text: pos
|———————————————Node:+ Text: +
|———————————————Node:number_literal Text: 1
|——————————————Node:] Text: ]
|————————————Node:, Text: ,
|————————————Node:subscript_expression Text: event[pos+2]
|—————————————Node:identifier Text: event
|—————————————Node:subscript_argument_list Text: [pos+2]
|——————————————Node:[ Text: [
|——————————————Node:binary_expression Text: pos+2
|———————————————Node:identifier Text: pos
|———————————————Node:+ Text: +
|———————————————Node:number_literal Text: 2
|——————————————Node:] Text: ]
|————————————Node:, Text: ,
|————————————Node:subscript_expression Text: event[pos+3]
|—————————————Node:identifier Text: event
|—————————————Node:subscript_argument_list Text: [pos+3]
|——————————————Node:[ Text: [
|——————————————Node:binary_expression Text: pos+3
|———————————————Node:identifier Text: pos
|———————————————Node:+ Text: +
|———————————————Node:number_literal Text: 3
|——————————————Node:] Text: ]
|————————————Node:, Text: ,
|————————————Node:parenthesized_expression Text: (j+1)
|—————————————Node:( Text: (
|—————————————Node:binary_expression Text: j+1
|——————————————Node:identifier Text: j
|——————————————Node:+ Text: +
|——————————————Node:number_literal Text: 1
|—————————————Node:) Text: )
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:expression_statement Text: pos=0;
|——————————Node:assignment_expression Text: pos=0
|———————————Node:identifier Text: pos
|———————————Node:= Text: =
|———————————Node:number_literal Text: 0
|——————————Node:; Text: ;
|—————————Node:expression_statement Text: ind=sendCanMessage();
|——————————Node:assignment_expression Text: ind=sendCanMessage()
|———————————Node:identifier Text: ind
|———————————Node:= Text: =
|———————————Node:call_expression Text: sendCanMessage()
|————————————Node:identifier Text: sendCanMessage
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:} Text: }
|———————Node:} Text: }
|—————Node:break_statement Text: break;
|——————Node:break Text: break
|——————Node:; Text: ;
|—————Node:case_statement Text: case OPC_RQEVN:
        //request the number of stored events
        prepareMessage(OPC_NUMEV);
|——————Node:case Text: case
|——————Node:identifier Text: OPC_RQEVN
|——————Node:: Text: :
|——————Node:comment Text: //request the number of stored events
|——————Node:expression_statement Text: prepareMessage(OPC_NUMEV);
|———————Node:call_expression Text: prepareMessage(OPC_NUMEV)
|————————Node:identifier Text: prepareMessage
|————————Node:argument_list Text: (OPC_NUMEV)
|—————————Node:( Text: (
|—————————Node:identifier Text: OPC_NUMEV
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                Serial.println("RECEIVED OPC_RQEVN sending OPC_NUMEV");
            printSentMessage();
        #endif
|——————Node:#ifdef Text: #ifdef
|——————Node:identifier Text: DEBUGDEF
|——————Node:expression_statement Text: Serial.println("RECEIVED OPC_RQEVN sending OPC_NUMEV");
|———————Node:call_expression Text: Serial.println("RECEIVED OPC_RQEVN sending OPC_NUMEV")
|————————Node:field_expression Text: Serial.println
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: println
|————————Node:argument_list Text: ("RECEIVED OPC_RQEVN sending OPC_NUMEV")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "RECEIVED OPC_RQEVN sending OPC_NUMEV"
|——————————Node:" Text: "
|——————————Node:string_content Text: RECEIVED OPC_RQEVN sending OPC_NUMEV
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: printSentMessage();
|———————Node:call_expression Text: printSentMessage()
|————————Node:identifier Text: printSentMessage
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:#endif Text: #endif
|—————Node:comment Text: // DEBUGDEF
|—————Node:expression_statement Text: sendCanMessage();
|——————Node:call_expression Text: sendCanMessage()
|———————Node:identifier Text: sendCanMessage
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:break_statement Text: break;
|——————Node:break Text: break
|——————Node:; Text: ;
|—————Node:case_statement Text: case OPC_BOOT:
        //boot mode. not supported
        return OK;
        break;
|——————Node:case Text: case
|——————Node:identifier Text: OPC_BOOT
|——————Node:: Text: :
|——————Node:comment Text: //boot mode. not supported
|——————Node:return_statement Text: return OK;
|———————Node:return Text: return
|———————Node:identifier Text: OK
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case OPC_ENUM:
        //has to be handled in the automatic procedure
        if (message.getNodeNumber()==nodeId.getNodeNumber()){
            #ifdef DEBUGDEF
                Serial.println("Doing self ennumeration");
            #endif // DEBUGDEF

            doSelfEnnumeration(true);
        }

        break;
|——————Node:case Text: case
|——————Node:identifier Text: OPC_ENUM
|——————Node:: Text: :
|——————Node:comment Text: //has to be handled in the automatic procedure
|——————Node:if_statement Text: if (message.getNodeNumber()==nodeId.getNodeNumber()){
            #ifdef DEBUGDEF
                Serial.println("Doing self ennumeration");
            #endif // DEBUGDEF

            doSelfEnnumeration(true);
        }
|———————Node:if Text: if
|———————Node:condition_clause Text: (message.getNodeNumber()==nodeId.getNodeNumber())
|————————Node:( Text: (
|————————Node:binary_expression Text: message.getNodeNumber()==nodeId.getNodeNumber()
|—————————Node:call_expression Text: message.getNodeNumber()
|——————————Node:field_expression Text: message.getNodeNumber
|———————————Node:identifier Text: message
|———————————Node:. Text: .
|———————————Node:field_identifier Text: getNodeNumber
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:== Text: ==
|—————————Node:call_expression Text: nodeId.getNodeNumber()
|——————————Node:field_expression Text: nodeId.getNodeNumber
|———————————Node:identifier Text: nodeId
|———————————Node:. Text: .
|———————————Node:field_identifier Text: getNodeNumber
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|————————Node:) Text: )
|———————Node:compound_statement Text: {
            #ifdef DEBUGDEF
                Serial.println("Doing self ennumeration");
            #endif // DEBUGDEF

            doSelfEnnumeration(true);
        }
|————————Node:{ Text: {
|————————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                Serial.println("Doing self ennumeration");
            #endif
|—————————Node:#ifdef Text: #ifdef
|—————————Node:identifier Text: DEBUGDEF
|—————————Node:expression_statement Text: Serial.println("Doing self ennumeration");
|——————————Node:call_expression Text: Serial.println("Doing self ennumeration")
|———————————Node:field_expression Text: Serial.println
|————————————Node:identifier Text: Serial
|————————————Node:. Text: .
|————————————Node:field_identifier Text: println
|———————————Node:argument_list Text: ("Doing self ennumeration")
|————————————Node:( Text: (
|————————————Node:string_literal Text: "Doing self ennumeration"
|—————————————Node:" Text: "
|—————————————Node:string_content Text: Doing self ennumeration
|—————————————Node:" Text: "
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:#endif Text: #endif
|————————Node:comment Text: // DEBUGDEF
|————————Node:expression_statement Text: doSelfEnnumeration(true);
|—————————Node:call_expression Text: doSelfEnnumeration(true)
|——————————Node:identifier Text: doSelfEnnumeration
|——————————Node:argument_list Text: (true)
|———————————Node:( Text: (
|———————————Node:true Text: true
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:} Text: }
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case OPC_NVRD:
        //answer with NVANS
        ind=message.getNodeVariableIndex();

        prepareMessageBuff(OPC_NVANS,highByte(nn),lowByte(nn),ind,memory.getVar(ind-1));
|——————Node:case Text: case
|——————Node:identifier Text: OPC_NVRD
|——————Node:: Text: :
|——————Node:comment Text: //answer with NVANS
|——————Node:expression_statement Text: ind=message.getNodeVariableIndex();
|———————Node:assignment_expression Text: ind=message.getNodeVariableIndex()
|————————Node:identifier Text: ind
|————————Node:= Text: =
|————————Node:call_expression Text: message.getNodeVariableIndex()
|—————————Node:field_expression Text: message.getNodeVariableIndex
|——————————Node:identifier Text: message
|——————————Node:. Text: .
|——————————Node:field_identifier Text: getNodeVariableIndex
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: prepareMessageBuff(OPC_NVANS,highByte(nn),lowByte(nn),ind,memory.getVar(ind-1));
|———————Node:call_expression Text: prepareMessageBuff(OPC_NVANS,highByte(nn),lowByte(nn),ind,memory.getVar(ind-1))
|————————Node:identifier Text: prepareMessageBuff
|————————Node:argument_list Text: (OPC_NVANS,highByte(nn),lowByte(nn),ind,memory.getVar(ind-1))
|—————————Node:( Text: (
|—————————Node:identifier Text: OPC_NVANS
|—————————Node:, Text: ,
|—————————Node:call_expression Text: highByte(nn)
|——————————Node:identifier Text: highByte
|——————————Node:argument_list Text: (nn)
|———————————Node:( Text: (
|———————————Node:identifier Text: nn
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: lowByte(nn)
|——————————Node:identifier Text: lowByte
|——————————Node:argument_list Text: (nn)
|———————————Node:( Text: (
|———————————Node:identifier Text: nn
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:identifier Text: ind
|—————————Node:, Text: ,
|—————————Node:call_expression Text: memory.getVar(ind-1)
|——————————Node:field_expression Text: memory.getVar
|———————————Node:identifier Text: memory
|———————————Node:. Text: .
|———————————Node:field_identifier Text: getVar
|——————————Node:argument_list Text: (ind-1)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: ind-1
|————————————Node:identifier Text: ind
|————————————Node:- Text: -
|————————————Node:number_literal Text: 1
|———————————Node:) Text: )
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:comment Text: //the CBUS index start with 1
|—————Node:preproc_ifdef Text: #ifdef DEBUGDEF
            Serial.println("RECEIVED OPC_NVRD sending OPC_NVANS");
            printSentMessage();
        #endif
|——————Node:#ifdef Text: #ifdef
|——————Node:identifier Text: DEBUGDEF
|——————Node:expression_statement Text: Serial.println("RECEIVED OPC_NVRD sending OPC_NVANS");
|———————Node:call_expression Text: Serial.println("RECEIVED OPC_NVRD sending OPC_NVANS")
|————————Node:field_expression Text: Serial.println
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: println
|————————Node:argument_list Text: ("RECEIVED OPC_NVRD sending OPC_NVANS")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "RECEIVED OPC_NVRD sending OPC_NVANS"
|——————————Node:" Text: "
|——————————Node:string_content Text: RECEIVED OPC_NVRD sending OPC_NVANS
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: printSentMessage();
|———————Node:call_expression Text: printSentMessage()
|————————Node:identifier Text: printSentMessage
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:#endif Text: #endif
|—————Node:comment Text: // DEBUGDEF
|—————Node:expression_statement Text: sendCanMessage();
|——————Node:call_expression Text: sendCanMessage()
|———————Node:identifier Text: sendCanMessage
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:break_statement Text: break;
|——————Node:break Text: break
|——————Node:; Text: ;
|—————Node:case_statement Text: case OPC_NENRD:
        //Request read of stored events by event index
        clearMsgToSend();
        ind=message.getEventIndex();
        byte *event;
        event=memory.getEvent(ind-1);//the CBUS index start with 1
        prepareMessageBuff(OPC_ENRSP,highByte(nn),lowByte(nn),event[0],event[1],event[2],event[3],ind);
|——————Node:case Text: case
|——————Node:identifier Text: OPC_NENRD
|——————Node:: Text: :
|——————Node:comment Text: //Request read of stored events by event index
|——————Node:expression_statement Text: clearMsgToSend();
|———————Node:call_expression Text: clearMsgToSend()
|————————Node:identifier Text: clearMsgToSend
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: ind=message.getEventIndex();
|———————Node:assignment_expression Text: ind=message.getEventIndex()
|————————Node:identifier Text: ind
|————————Node:= Text: =
|————————Node:call_expression Text: message.getEventIndex()
|—————————Node:field_expression Text: message.getEventIndex
|——————————Node:identifier Text: message
|——————————Node:. Text: .
|——————————Node:field_identifier Text: getEventIndex
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:declaration Text: byte *event;
|———————Node:type_identifier Text: byte
|———————Node:pointer_declarator Text: *event
|————————Node:* Text: *
|————————Node:identifier Text: event
|———————Node:; Text: ;
|——————Node:expression_statement Text: event=memory.getEvent(ind-1);
|———————Node:assignment_expression Text: event=memory.getEvent(ind-1)
|————————Node:identifier Text: event
|————————Node:= Text: =
|————————Node:call_expression Text: memory.getEvent(ind-1)
|—————————Node:field_expression Text: memory.getEvent
|——————————Node:identifier Text: memory
|——————————Node:. Text: .
|——————————Node:field_identifier Text: getEvent
|—————————Node:argument_list Text: (ind-1)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: ind-1
|———————————Node:identifier Text: ind
|———————————Node:- Text: -
|———————————Node:number_literal Text: 1
|——————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:comment Text: //the CBUS index start with 1
|——————Node:expression_statement Text: prepareMessageBuff(OPC_ENRSP,highByte(nn),lowByte(nn),event[0],event[1],event[2],event[3],ind);
|———————Node:call_expression Text: prepareMessageBuff(OPC_ENRSP,highByte(nn),lowByte(nn),event[0],event[1],event[2],event[3],ind)
|————————Node:identifier Text: prepareMessageBuff
|————————Node:argument_list Text: (OPC_ENRSP,highByte(nn),lowByte(nn),event[0],event[1],event[2],event[3],ind)
|—————————Node:( Text: (
|—————————Node:identifier Text: OPC_ENRSP
|—————————Node:, Text: ,
|—————————Node:call_expression Text: highByte(nn)
|——————————Node:identifier Text: highByte
|——————————Node:argument_list Text: (nn)
|———————————Node:( Text: (
|———————————Node:identifier Text: nn
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: lowByte(nn)
|——————————Node:identifier Text: lowByte
|——————————Node:argument_list Text: (nn)
|———————————Node:( Text: (
|———————————Node:identifier Text: nn
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:subscript_expression Text: event[0]
|——————————Node:identifier Text: event
|——————————Node:subscript_argument_list Text: [0]
|———————————Node:[ Text: [
|———————————Node:number_literal Text: 0
|———————————Node:] Text: ]
|—————————Node:, Text: ,
|—————————Node:subscript_expression Text: event[1]
|——————————Node:identifier Text: event
|——————————Node:subscript_argument_list Text: [1]
|———————————Node:[ Text: [
|———————————Node:number_literal Text: 1
|———————————Node:] Text: ]
|—————————Node:, Text: ,
|—————————Node:subscript_expression Text: event[2]
|——————————Node:identifier Text: event
|——————————Node:subscript_argument_list Text: [2]
|———————————Node:[ Text: [
|———————————Node:number_literal Text: 2
|———————————Node:] Text: ]
|—————————Node:, Text: ,
|—————————Node:subscript_expression Text: event[3]
|——————————Node:identifier Text: event
|——————————Node:subscript_argument_list Text: [3]
|———————————Node:[ Text: [
|———————————Node:number_literal Text: 3
|———————————Node:] Text: ]
|—————————Node:, Text: ,
|—————————Node:identifier Text: ind
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:preproc_ifdef Text: #ifdef DEBUGDEF
            Serial.println("RECEIVED OPC_NENRD sending OPC_ENRSP");
            printSentMessage();
        #endif
|——————Node:#ifdef Text: #ifdef
|——————Node:identifier Text: DEBUGDEF
|——————Node:expression_statement Text: Serial.println("RECEIVED OPC_NENRD sending OPC_ENRSP");
|———————Node:call_expression Text: Serial.println("RECEIVED OPC_NENRD sending OPC_ENRSP")
|————————Node:field_expression Text: Serial.println
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: println
|————————Node:argument_list Text: ("RECEIVED OPC_NENRD sending OPC_ENRSP")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "RECEIVED OPC_NENRD sending OPC_ENRSP"
|——————————Node:" Text: "
|——————————Node:string_content Text: RECEIVED OPC_NENRD sending OPC_ENRSP
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: printSentMessage();
|———————Node:call_expression Text: printSentMessage()
|————————Node:identifier Text: printSentMessage
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:#endif Text: #endif
|—————Node:comment Text: // DEBUGDEF
|—————Node:expression_statement Text: sendCanMessage();
|——————Node:call_expression Text: sendCanMessage()
|———————Node:identifier Text: sendCanMessage
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:break_statement Text: break;
|——————Node:break Text: break
|——————Node:; Text: ;
|—————Node:case_statement Text: case OPC_RQNPN:
        //Request node parameter. Answer with PARAN
        ind=message.getParaIndex();

        if (ind==0){
            prepareMessageBuff(OPC_PARAN,highByte(nn),lowByte(nn),ind,nodeId.getNumberOfParameters());//the CBUS index start with 1
        }
        else{
            prepareMessageBuff(OPC_PARAN,highByte(nn),lowByte(nn),ind,nodeId.getParameter(ind));
        }
|——————Node:case Text: case
|——————Node:identifier Text: OPC_RQNPN
|——————Node:: Text: :
|——————Node:comment Text: //Request node parameter. Answer with PARAN
|——————Node:expression_statement Text: ind=message.getParaIndex();
|———————Node:assignment_expression Text: ind=message.getParaIndex()
|————————Node:identifier Text: ind
|————————Node:= Text: =
|————————Node:call_expression Text: message.getParaIndex()
|—————————Node:field_expression Text: message.getParaIndex
|——————————Node:identifier Text: message
|——————————Node:. Text: .
|——————————Node:field_identifier Text: getParaIndex
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:if_statement Text: if (ind==0){
            prepareMessageBuff(OPC_PARAN,highByte(nn),lowByte(nn),ind,nodeId.getNumberOfParameters());//the CBUS index start with 1
        }
        else{
            prepareMessageBuff(OPC_PARAN,highByte(nn),lowByte(nn),ind,nodeId.getParameter(ind));
        }
|———————Node:if Text: if
|———————Node:condition_clause Text: (ind==0)
|————————Node:( Text: (
|————————Node:binary_expression Text: ind==0
|—————————Node:identifier Text: ind
|—————————Node:== Text: ==
|—————————Node:number_literal Text: 0
|————————Node:) Text: )
|———————Node:compound_statement Text: {
            prepareMessageBuff(OPC_PARAN,highByte(nn),lowByte(nn),ind,nodeId.getNumberOfParameters());//the CBUS index start with 1
        }
|————————Node:{ Text: {
|————————Node:expression_statement Text: prepareMessageBuff(OPC_PARAN,highByte(nn),lowByte(nn),ind,nodeId.getNumberOfParameters());
|—————————Node:call_expression Text: prepareMessageBuff(OPC_PARAN,highByte(nn),lowByte(nn),ind,nodeId.getNumberOfParameters())
|——————————Node:identifier Text: prepareMessageBuff
|——————————Node:argument_list Text: (OPC_PARAN,highByte(nn),lowByte(nn),ind,nodeId.getNumberOfParameters())
|———————————Node:( Text: (
|———————————Node:identifier Text: OPC_PARAN
|———————————Node:, Text: ,
|———————————Node:call_expression Text: highByte(nn)
|————————————Node:identifier Text: highByte
|————————————Node:argument_list Text: (nn)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: nn
|—————————————Node:) Text: )
|———————————Node:, Text: ,
|———————————Node:call_expression Text: lowByte(nn)
|————————————Node:identifier Text: lowByte
|————————————Node:argument_list Text: (nn)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: nn
|—————————————Node:) Text: )
|———————————Node:, Text: ,
|———————————Node:identifier Text: ind
|———————————Node:, Text: ,
|———————————Node:call_expression Text: nodeId.getNumberOfParameters()
|————————————Node:field_expression Text: nodeId.getNumberOfParameters
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNumberOfParameters
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:comment Text: //the CBUS index start with 1
|————————Node:} Text: }
|———————Node:else_clause Text: else{
            prepareMessageBuff(OPC_PARAN,highByte(nn),lowByte(nn),ind,nodeId.getParameter(ind));
        }
|————————Node:else Text: else
|————————Node:compound_statement Text: {
            prepareMessageBuff(OPC_PARAN,highByte(nn),lowByte(nn),ind,nodeId.getParameter(ind));
        }
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: prepareMessageBuff(OPC_PARAN,highByte(nn),lowByte(nn),ind,nodeId.getParameter(ind));
|——————————Node:call_expression Text: prepareMessageBuff(OPC_PARAN,highByte(nn),lowByte(nn),ind,nodeId.getParameter(ind))
|———————————Node:identifier Text: prepareMessageBuff
|———————————Node:argument_list Text: (OPC_PARAN,highByte(nn),lowByte(nn),ind,nodeId.getParameter(ind))
|————————————Node:( Text: (
|————————————Node:identifier Text: OPC_PARAN
|————————————Node:, Text: ,
|————————————Node:call_expression Text: highByte(nn)
|—————————————Node:identifier Text: highByte
|—————————————Node:argument_list Text: (nn)
|——————————————Node:( Text: (
|——————————————Node:identifier Text: nn
|——————————————Node:) Text: )
|————————————Node:, Text: ,
|————————————Node:call_expression Text: lowByte(nn)
|—————————————Node:identifier Text: lowByte
|—————————————Node:argument_list Text: (nn)
|——————————————Node:( Text: (
|——————————————Node:identifier Text: nn
|——————————————Node:) Text: )
|————————————Node:, Text: ,
|————————————Node:identifier Text: ind
|————————————Node:, Text: ,
|————————————Node:call_expression Text: nodeId.getParameter(ind)
|—————————————Node:field_expression Text: nodeId.getParameter
|——————————————Node:identifier Text: nodeId
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: getParameter
|—————————————Node:argument_list Text: (ind)
|——————————————Node:( Text: (
|——————————————Node:identifier Text: ind
|——————————————Node:) Text: )
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:} Text: }
|—————Node:preproc_ifdef Text: #ifdef DEBUGDEF
            Serial.println("RECEIVED OPC_RQNPN sending OPC_PARAN");
            printSentMessage();
        #endif
|——————Node:#ifdef Text: #ifdef
|——————Node:identifier Text: DEBUGDEF
|——————Node:expression_statement Text: Serial.println("RECEIVED OPC_RQNPN sending OPC_PARAN");
|———————Node:call_expression Text: Serial.println("RECEIVED OPC_RQNPN sending OPC_PARAN")
|————————Node:field_expression Text: Serial.println
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: println
|————————Node:argument_list Text: ("RECEIVED OPC_RQNPN sending OPC_PARAN")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "RECEIVED OPC_RQNPN sending OPC_PARAN"
|——————————Node:" Text: "
|——————————Node:string_content Text: RECEIVED OPC_RQNPN sending OPC_PARAN
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: printSentMessage();
|———————Node:call_expression Text: printSentMessage()
|————————Node:identifier Text: printSentMessage
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:#endif Text: #endif
|—————Node:comment Text: // DEBUGDEF
|—————Node:expression_statement Text: sendCanMessage();
|——————Node:call_expression Text: sendCanMessage()
|———————Node:identifier Text: sendCanMessage
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:break_statement Text: break;
|——————Node:break Text: break
|——————Node:; Text: ;
|—————Node:case_statement Text: case OPC_CANID:
        //force a new can id
        ind=message.getByte(3);
        nodeId.setCanID(ind);
        memory.setCanId(ind);
        prepareMessage(OPC_NNACK);
|——————Node:case Text: case
|——————Node:identifier Text: OPC_CANID
|——————Node:: Text: :
|——————Node:comment Text: //force a new can id
|——————Node:expression_statement Text: ind=message.getByte(3);
|———————Node:assignment_expression Text: ind=message.getByte(3)
|————————Node:identifier Text: ind
|————————Node:= Text: =
|————————Node:call_expression Text: message.getByte(3)
|—————————Node:field_expression Text: message.getByte
|——————————Node:identifier Text: message
|——————————Node:. Text: .
|——————————Node:field_identifier Text: getByte
|—————————Node:argument_list Text: (3)
|——————————Node:( Text: (
|——————————Node:number_literal Text: 3
|——————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: nodeId.setCanID(ind);
|———————Node:call_expression Text: nodeId.setCanID(ind)
|————————Node:field_expression Text: nodeId.setCanID
|—————————Node:identifier Text: nodeId
|—————————Node:. Text: .
|—————————Node:field_identifier Text: setCanID
|————————Node:argument_list Text: (ind)
|—————————Node:( Text: (
|—————————Node:identifier Text: ind
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: memory.setCanId(ind);
|———————Node:call_expression Text: memory.setCanId(ind)
|————————Node:field_expression Text: memory.setCanId
|—————————Node:identifier Text: memory
|—————————Node:. Text: .
|—————————Node:field_identifier Text: setCanId
|————————Node:argument_list Text: (ind)
|—————————Node:( Text: (
|—————————Node:identifier Text: ind
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: prepareMessage(OPC_NNACK);
|———————Node:call_expression Text: prepareMessage(OPC_NNACK)
|————————Node:identifier Text: prepareMessage
|————————Node:argument_list Text: (OPC_NNACK)
|—————————Node:( Text: (
|—————————Node:identifier Text: OPC_NNACK
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:preproc_ifdef Text: #ifdef DEBUGDEF
            Serial.println("RECEIVED OPC_CANID sending OPC_NNACK");
            printSentMessage();
        #endif
|——————Node:#ifdef Text: #ifdef
|——————Node:identifier Text: DEBUGDEF
|——————Node:expression_statement Text: Serial.println("RECEIVED OPC_CANID sending OPC_NNACK");
|———————Node:call_expression Text: Serial.println("RECEIVED OPC_CANID sending OPC_NNACK")
|————————Node:field_expression Text: Serial.println
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: println
|————————Node:argument_list Text: ("RECEIVED OPC_CANID sending OPC_NNACK")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "RECEIVED OPC_CANID sending OPC_NNACK"
|——————————Node:" Text: "
|——————————Node:string_content Text: RECEIVED OPC_CANID sending OPC_NNACK
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: printSentMessage();
|———————Node:call_expression Text: printSentMessage()
|————————Node:identifier Text: printSentMessage
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:#endif Text: #endif
|—————Node:comment Text: // DEBUGDEF
|—————Node:expression_statement Text: sendCanMessage();
|——————Node:call_expression Text: sendCanMessage()
|———————Node:identifier Text: sendCanMessage
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:break_statement Text: break;
|——————Node:break Text: break
|——————Node:; Text: ;
|—————Node:case_statement Text: case OPC_EVULN:
|——————Node:case Text: case
|——————Node:identifier Text: OPC_EVULN
|——————Node:: Text: :
|—————Node:comment Text: //Unlearn event
|—————Node:preproc_ifdef Text: #ifdef DEBUGDEF
            Serial.println("Unlearn event");
            //printSentMessage();
        #endif
|——————Node:#ifdef Text: #ifdef
|——————Node:identifier Text: DEBUGDEF
|——————Node:expression_statement Text: Serial.println("Unlearn event");
|———————Node:call_expression Text: Serial.println("Unlearn event")
|————————Node:field_expression Text: Serial.println
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: println
|————————Node:argument_list Text: ("Unlearn event")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Unlearn event"
|——————————Node:" Text: "
|——————————Node:string_content Text: Unlearn event
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:comment Text: //printSentMessage();
|——————Node:#endif Text: #endif
|—————Node:comment Text: // DEBUGDEF
|—————Node:if_statement Text: if (state_mode==LEARN){
            ev=message.getEventNumber();
            nn=message.getNodeNumber();
            evidx=memory.getEventIndex(nn,ev);

            if (evidx>nodeId.getSuportedEvents()){
                //Serial.println("Error unlearn event");
                sendERRMessage(CMDERR_INVALID_EVENT);
                break;
            }

            if (memory.eraseEvent(evidx)!=ev){
                //send ack
                prepareMessage(OPC_WRACK);
                sendCanMessage();
            }else{
                //send error
                sendERRMessage(CMDERR_INVALID_EVENT);
            }
        }else{
            sendERRMessage(CMDERR_NOT_LRN);
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (state_mode==LEARN)
|———————Node:( Text: (
|———————Node:binary_expression Text: state_mode==LEARN
|————————Node:identifier Text: state_mode
|————————Node:== Text: ==
|————————Node:identifier Text: LEARN
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            ev=message.getEventNumber();
            nn=message.getNodeNumber();
            evidx=memory.getEventIndex(nn,ev);

            if (evidx>nodeId.getSuportedEvents()){
                //Serial.println("Error unlearn event");
                sendERRMessage(CMDERR_INVALID_EVENT);
                break;
            }

            if (memory.eraseEvent(evidx)!=ev){
                //send ack
                prepareMessage(OPC_WRACK);
                sendCanMessage();
            }else{
                //send error
                sendERRMessage(CMDERR_INVALID_EVENT);
            }
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: ev=message.getEventNumber();
|————————Node:assignment_expression Text: ev=message.getEventNumber()
|—————————Node:identifier Text: ev
|—————————Node:= Text: =
|—————————Node:call_expression Text: message.getEventNumber()
|——————————Node:field_expression Text: message.getEventNumber
|———————————Node:identifier Text: message
|———————————Node:. Text: .
|———————————Node:field_identifier Text: getEventNumber
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: nn=message.getNodeNumber();
|————————Node:assignment_expression Text: nn=message.getNodeNumber()
|—————————Node:identifier Text: nn
|—————————Node:= Text: =
|—————————Node:call_expression Text: message.getNodeNumber()
|——————————Node:field_expression Text: message.getNodeNumber
|———————————Node:identifier Text: message
|———————————Node:. Text: .
|———————————Node:field_identifier Text: getNodeNumber
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: evidx=memory.getEventIndex(nn,ev);
|————————Node:assignment_expression Text: evidx=memory.getEventIndex(nn,ev)
|—————————Node:identifier Text: evidx
|—————————Node:= Text: =
|—————————Node:call_expression Text: memory.getEventIndex(nn,ev)
|——————————Node:field_expression Text: memory.getEventIndex
|———————————Node:identifier Text: memory
|———————————Node:. Text: .
|———————————Node:field_identifier Text: getEventIndex
|——————————Node:argument_list Text: (nn,ev)
|———————————Node:( Text: (
|———————————Node:identifier Text: nn
|———————————Node:, Text: ,
|———————————Node:identifier Text: ev
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:if_statement Text: if (evidx>nodeId.getSuportedEvents()){
                //Serial.println("Error unlearn event");
                sendERRMessage(CMDERR_INVALID_EVENT);
                break;
            }
|————————Node:if Text: if
|————————Node:condition_clause Text: (evidx>nodeId.getSuportedEvents())
|—————————Node:( Text: (
|—————————Node:binary_expression Text: evidx>nodeId.getSuportedEvents()
|——————————Node:identifier Text: evidx
|——————————Node:> Text: >
|——————————Node:call_expression Text: nodeId.getSuportedEvents()
|———————————Node:field_expression Text: nodeId.getSuportedEvents
|————————————Node:identifier Text: nodeId
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getSuportedEvents
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
                //Serial.println("Error unlearn event");
                sendERRMessage(CMDERR_INVALID_EVENT);
                break;
            }
|—————————Node:{ Text: {
|—————————Node:comment Text: //Serial.println("Error unlearn event");
|—————————Node:expression_statement Text: sendERRMessage(CMDERR_INVALID_EVENT);
|——————————Node:call_expression Text: sendERRMessage(CMDERR_INVALID_EVENT)
|———————————Node:identifier Text: sendERRMessage
|———————————Node:argument_list Text: (CMDERR_INVALID_EVENT)
|————————————Node:( Text: (
|————————————Node:identifier Text: CMDERR_INVALID_EVENT
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:break_statement Text: break;
|——————————Node:break Text: break
|——————————Node:; Text: ;
|—————————Node:} Text: }
|———————Node:if_statement Text: if (memory.eraseEvent(evidx)!=ev){
                //send ack
                prepareMessage(OPC_WRACK);
                sendCanMessage();
            }else{
                //send error
                sendERRMessage(CMDERR_INVALID_EVENT);
            }
|————————Node:if Text: if
|————————Node:condition_clause Text: (memory.eraseEvent(evidx)!=ev)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: memory.eraseEvent(evidx)!=ev
|——————————Node:call_expression Text: memory.eraseEvent(evidx)
|———————————Node:field_expression Text: memory.eraseEvent
|————————————Node:identifier Text: memory
|————————————Node:. Text: .
|————————————Node:field_identifier Text: eraseEvent
|———————————Node:argument_list Text: (evidx)
|————————————Node:( Text: (
|————————————Node:identifier Text: evidx
|————————————Node:) Text: )
|——————————Node:!= Text: !=
|——————————Node:identifier Text: ev
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
                //send ack
                prepareMessage(OPC_WRACK);
                sendCanMessage();
            }
|—————————Node:{ Text: {
|—————————Node:comment Text: //send ack
|—————————Node:expression_statement Text: prepareMessage(OPC_WRACK);
|——————————Node:call_expression Text: prepareMessage(OPC_WRACK)
|———————————Node:identifier Text: prepareMessage
|———————————Node:argument_list Text: (OPC_WRACK)
|————————————Node:( Text: (
|————————————Node:identifier Text: OPC_WRACK
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:expression_statement Text: sendCanMessage();
|——————————Node:call_expression Text: sendCanMessage()
|———————————Node:identifier Text: sendCanMessage
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:} Text: }
|————————Node:else_clause Text: else{
                //send error
                sendERRMessage(CMDERR_INVALID_EVENT);
            }
|—————————Node:else Text: else
|—————————Node:compound_statement Text: {
                //send error
                sendERRMessage(CMDERR_INVALID_EVENT);
            }
|——————————Node:{ Text: {
|——————————Node:comment Text: //send error
|——————————Node:expression_statement Text: sendERRMessage(CMDERR_INVALID_EVENT);
|———————————Node:call_expression Text: sendERRMessage(CMDERR_INVALID_EVENT)
|————————————Node:identifier Text: sendERRMessage
|————————————Node:argument_list Text: (CMDERR_INVALID_EVENT)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: CMDERR_INVALID_EVENT
|—————————————Node:) Text: )
|———————————Node:; Text: ;
|——————————Node:} Text: }
|———————Node:} Text: }
|——————Node:else_clause Text: else{
            sendERRMessage(CMDERR_NOT_LRN);
        }
|———————Node:else Text: else
|———————Node:compound_statement Text: {
            sendERRMessage(CMDERR_NOT_LRN);
        }
|————————Node:{ Text: {
|————————Node:expression_statement Text: sendERRMessage(CMDERR_NOT_LRN);
|—————————Node:call_expression Text: sendERRMessage(CMDERR_NOT_LRN)
|——————————Node:identifier Text: sendERRMessage
|——————————Node:argument_list Text: (CMDERR_NOT_LRN)
|———————————Node:( Text: (
|———————————Node:identifier Text: CMDERR_NOT_LRN
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:} Text: }
|—————Node:break_statement Text: break;
|——————Node:break Text: break
|——————Node:; Text: ;
|—————Node:case_statement Text: case OPC_NVSET:
        //set a node variable
        ind=message.getNodeVariableIndex()-1;//the CBUS index start with 1
        val=message.getNodeVariable();
|——————Node:case Text: case
|——————Node:identifier Text: OPC_NVSET
|——————Node:: Text: :
|——————Node:comment Text: //set a node variable
|——————Node:expression_statement Text: ind=message.getNodeVariableIndex()-1;
|———————Node:assignment_expression Text: ind=message.getNodeVariableIndex()-1
|————————Node:identifier Text: ind
|————————Node:= Text: =
|————————Node:binary_expression Text: message.getNodeVariableIndex()-1
|—————————Node:call_expression Text: message.getNodeVariableIndex()
|——————————Node:field_expression Text: message.getNodeVariableIndex
|———————————Node:identifier Text: message
|———————————Node:. Text: .
|———————————Node:field_identifier Text: getNodeVariableIndex
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:- Text: -
|—————————Node:number_literal Text: 1
|———————Node:; Text: ;
|——————Node:comment Text: //the CBUS index start with 1
|——————Node:expression_statement Text: val=message.getNodeVariable();
|———————Node:assignment_expression Text: val=message.getNodeVariable()
|————————Node:identifier Text: val
|————————Node:= Text: =
|————————Node:call_expression Text: message.getNodeVariable()
|—————————Node:field_expression Text: message.getNodeVariable
|——————————Node:identifier Text: message
|——————————Node:. Text: .
|——————————Node:field_identifier Text: getNodeVariable
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:preproc_ifdef Text: #ifdef DEBUGDEF
            Serial.println("Learning node variable");
            //printSentMessage();
        #endif
|——————Node:#ifdef Text: #ifdef
|——————Node:identifier Text: DEBUGDEF
|——————Node:expression_statement Text: Serial.println("Learning node variable");
|———————Node:call_expression Text: Serial.println("Learning node variable")
|————————Node:field_expression Text: Serial.println
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: println
|————————Node:argument_list Text: ("Learning node variable")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Learning node variable"
|——————————Node:" Text: "
|——————————Node:string_content Text: Learning node variable
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:comment Text: //printSentMessage();
|——————Node:#endif Text: #endif
|—————Node:comment Text: // DEBUGDEF
|—————Node:expression_statement Text: setNodeVariableAuto(ind,val,true);
|——————Node:call_expression Text: setNodeVariableAuto(ind,val,true)
|———————Node:identifier Text: setNodeVariableAuto
|———————Node:argument_list Text: (ind,val,true)
|————————Node:( Text: (
|————————Node:identifier Text: ind
|————————Node:, Text: ,
|————————Node:identifier Text: val
|————————Node:, Text: ,
|————————Node:true Text: true
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:break_statement Text: break;
|——————Node:break Text: break
|——————Node:; Text: ;
|—————Node:case_statement Text: case OPC_REVAL:
        //Request for read of an event variable
        evidx=message.getEventIndex();
        ind=message.getEventVarIndex();
        if (ind>nodeId.getSuportedEventsVariables()){
            //index too big
            sendERRMessage(CMDERR_INV_NV_IDX);
            break;
        }
        val=memory.getEventVar(evidx-1,ind-1);//the CBUS index start with 1
        nn=nodeId.getNodeNumber();

        prepareMessageBuff(OPC_NEVAL,highByte(nn),lowByte(nn),evidx,ind,val);
|——————Node:case Text: case
|——————Node:identifier Text: OPC_REVAL
|——————Node:: Text: :
|——————Node:comment Text: //Request for read of an event variable
|——————Node:expression_statement Text: evidx=message.getEventIndex();
|———————Node:assignment_expression Text: evidx=message.getEventIndex()
|————————Node:identifier Text: evidx
|————————Node:= Text: =
|————————Node:call_expression Text: message.getEventIndex()
|—————————Node:field_expression Text: message.getEventIndex
|——————————Node:identifier Text: message
|——————————Node:. Text: .
|——————————Node:field_identifier Text: getEventIndex
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: ind=message.getEventVarIndex();
|———————Node:assignment_expression Text: ind=message.getEventVarIndex()
|————————Node:identifier Text: ind
|————————Node:= Text: =
|————————Node:call_expression Text: message.getEventVarIndex()
|—————————Node:field_expression Text: message.getEventVarIndex
|——————————Node:identifier Text: message
|——————————Node:. Text: .
|——————————Node:field_identifier Text: getEventVarIndex
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:if_statement Text: if (ind>nodeId.getSuportedEventsVariables()){
            //index too big
            sendERRMessage(CMDERR_INV_NV_IDX);
            break;
        }
|———————Node:if Text: if
|———————Node:condition_clause Text: (ind>nodeId.getSuportedEventsVariables())
|————————Node:( Text: (
|————————Node:binary_expression Text: ind>nodeId.getSuportedEventsVariables()
|—————————Node:identifier Text: ind
|—————————Node:> Text: >
|—————————Node:call_expression Text: nodeId.getSuportedEventsVariables()
|——————————Node:field_expression Text: nodeId.getSuportedEventsVariables
|———————————Node:identifier Text: nodeId
|———————————Node:. Text: .
|———————————Node:field_identifier Text: getSuportedEventsVariables
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|————————Node:) Text: )
|———————Node:compound_statement Text: {
            //index too big
            sendERRMessage(CMDERR_INV_NV_IDX);
            break;
        }
|————————Node:{ Text: {
|————————Node:comment Text: //index too big
|————————Node:expression_statement Text: sendERRMessage(CMDERR_INV_NV_IDX);
|—————————Node:call_expression Text: sendERRMessage(CMDERR_INV_NV_IDX)
|——————————Node:identifier Text: sendERRMessage
|——————————Node:argument_list Text: (CMDERR_INV_NV_IDX)
|———————————Node:( Text: (
|———————————Node:identifier Text: CMDERR_INV_NV_IDX
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:break_statement Text: break;
|—————————Node:break Text: break
|—————————Node:; Text: ;
|————————Node:} Text: }
|——————Node:expression_statement Text: val=memory.getEventVar(evidx-1,ind-1);
|———————Node:assignment_expression Text: val=memory.getEventVar(evidx-1,ind-1)
|————————Node:identifier Text: val
|————————Node:= Text: =
|————————Node:call_expression Text: memory.getEventVar(evidx-1,ind-1)
|—————————Node:field_expression Text: memory.getEventVar
|——————————Node:identifier Text: memory
|——————————Node:. Text: .
|——————————Node:field_identifier Text: getEventVar
|—————————Node:argument_list Text: (evidx-1,ind-1)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: evidx-1
|———————————Node:identifier Text: evidx
|———————————Node:- Text: -
|———————————Node:number_literal Text: 1
|——————————Node:, Text: ,
|——————————Node:binary_expression Text: ind-1
|———————————Node:identifier Text: ind
|———————————Node:- Text: -
|———————————Node:number_literal Text: 1
|——————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:comment Text: //the CBUS index start with 1
|——————Node:expression_statement Text: nn=nodeId.getNodeNumber();
|———————Node:assignment_expression Text: nn=nodeId.getNodeNumber()
|————————Node:identifier Text: nn
|————————Node:= Text: =
|————————Node:call_expression Text: nodeId.getNodeNumber()
|—————————Node:field_expression Text: nodeId.getNodeNumber
|——————————Node:identifier Text: nodeId
|——————————Node:. Text: .
|——————————Node:field_identifier Text: getNodeNumber
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: prepareMessageBuff(OPC_NEVAL,highByte(nn),lowByte(nn),evidx,ind,val);
|———————Node:call_expression Text: prepareMessageBuff(OPC_NEVAL,highByte(nn),lowByte(nn),evidx,ind,val)
|————————Node:identifier Text: prepareMessageBuff
|————————Node:argument_list Text: (OPC_NEVAL,highByte(nn),lowByte(nn),evidx,ind,val)
|—————————Node:( Text: (
|—————————Node:identifier Text: OPC_NEVAL
|—————————Node:, Text: ,
|—————————Node:call_expression Text: highByte(nn)
|——————————Node:identifier Text: highByte
|——————————Node:argument_list Text: (nn)
|———————————Node:( Text: (
|———————————Node:identifier Text: nn
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: lowByte(nn)
|——————————Node:identifier Text: lowByte
|——————————Node:argument_list Text: (nn)
|———————————Node:( Text: (
|———————————Node:identifier Text: nn
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:identifier Text: evidx
|—————————Node:, Text: ,
|—————————Node:identifier Text: ind
|—————————Node:, Text: ,
|—————————Node:identifier Text: val
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:preproc_ifdef Text: #ifdef DEBUGDEF
            Serial.println("RECEIVED OPC_REVAL sending OPC_NEVAL");
            printSentMessage();
        #endif
|——————Node:#ifdef Text: #ifdef
|——————Node:identifier Text: DEBUGDEF
|——————Node:expression_statement Text: Serial.println("RECEIVED OPC_REVAL sending OPC_NEVAL");
|———————Node:call_expression Text: Serial.println("RECEIVED OPC_REVAL sending OPC_NEVAL")
|————————Node:field_expression Text: Serial.println
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: println
|————————Node:argument_list Text: ("RECEIVED OPC_REVAL sending OPC_NEVAL")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "RECEIVED OPC_REVAL sending OPC_NEVAL"
|——————————Node:" Text: "
|——————————Node:string_content Text: RECEIVED OPC_REVAL sending OPC_NEVAL
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: printSentMessage();
|———————Node:call_expression Text: printSentMessage()
|————————Node:identifier Text: printSentMessage
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:#endif Text: #endif
|—————Node:comment Text: // DEBUGDEF
|—————Node:expression_statement Text: sendCanMessage();
|——————Node:call_expression Text: sendCanMessage()
|———————Node:identifier Text: sendCanMessage
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:break_statement Text: break;
|——————Node:break Text: break
|——————Node:; Text: ;
|—————Node:case_statement Text: case OPC_REQEV:
        //Read event variable in learn mode
        if (state_mode==LEARN){
            ev=message.getEventNumber();
            evidx=memory.getEventIndex(nn,ev);
            ind=message.getEventVarIndex();
            val=memory.getEventVar(evidx,ind-1);//the CBUS index start with 1

            prepareMessageBuff(OPC_EVANS,highByte(nn),lowByte(nn),highByte(ev),lowByte(ev),ind,val);

        #ifdef DEBUGDEF
            Serial.println("RECEIVED OPC_REQEV sending OPC_EVANS");
            printSentMessage();
        #endif // DEBUGDEF

            sendCanMessage();
        }else{
            sendERRMessage(CMDERR_NOT_LRN);
        }

        break;
|——————Node:case Text: case
|——————Node:identifier Text: OPC_REQEV
|——————Node:: Text: :
|——————Node:comment Text: //Read event variable in learn mode
|——————Node:if_statement Text: if (state_mode==LEARN){
            ev=message.getEventNumber();
            evidx=memory.getEventIndex(nn,ev);
            ind=message.getEventVarIndex();
            val=memory.getEventVar(evidx,ind-1);//the CBUS index start with 1

            prepareMessageBuff(OPC_EVANS,highByte(nn),lowByte(nn),highByte(ev),lowByte(ev),ind,val);

        #ifdef DEBUGDEF
            Serial.println("RECEIVED OPC_REQEV sending OPC_EVANS");
            printSentMessage();
        #endif // DEBUGDEF

            sendCanMessage();
        }else{
            sendERRMessage(CMDERR_NOT_LRN);
        }
|———————Node:if Text: if
|———————Node:condition_clause Text: (state_mode==LEARN)
|————————Node:( Text: (
|————————Node:binary_expression Text: state_mode==LEARN
|—————————Node:identifier Text: state_mode
|—————————Node:== Text: ==
|—————————Node:identifier Text: LEARN
|————————Node:) Text: )
|———————Node:compound_statement Text: {
            ev=message.getEventNumber();
            evidx=memory.getEventIndex(nn,ev);
            ind=message.getEventVarIndex();
            val=memory.getEventVar(evidx,ind-1);//the CBUS index start with 1

            prepareMessageBuff(OPC_EVANS,highByte(nn),lowByte(nn),highByte(ev),lowByte(ev),ind,val);

        #ifdef DEBUGDEF
            Serial.println("RECEIVED OPC_REQEV sending OPC_EVANS");
            printSentMessage();
        #endif // DEBUGDEF

            sendCanMessage();
        }
|————————Node:{ Text: {
|————————Node:expression_statement Text: ev=message.getEventNumber();
|—————————Node:assignment_expression Text: ev=message.getEventNumber()
|——————————Node:identifier Text: ev
|——————————Node:= Text: =
|——————————Node:call_expression Text: message.getEventNumber()
|———————————Node:field_expression Text: message.getEventNumber
|————————————Node:identifier Text: message
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getEventNumber
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: evidx=memory.getEventIndex(nn,ev);
|—————————Node:assignment_expression Text: evidx=memory.getEventIndex(nn,ev)
|——————————Node:identifier Text: evidx
|——————————Node:= Text: =
|——————————Node:call_expression Text: memory.getEventIndex(nn,ev)
|———————————Node:field_expression Text: memory.getEventIndex
|————————————Node:identifier Text: memory
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getEventIndex
|———————————Node:argument_list Text: (nn,ev)
|————————————Node:( Text: (
|————————————Node:identifier Text: nn
|————————————Node:, Text: ,
|————————————Node:identifier Text: ev
|————————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: ind=message.getEventVarIndex();
|—————————Node:assignment_expression Text: ind=message.getEventVarIndex()
|——————————Node:identifier Text: ind
|——————————Node:= Text: =
|——————————Node:call_expression Text: message.getEventVarIndex()
|———————————Node:field_expression Text: message.getEventVarIndex
|————————————Node:identifier Text: message
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getEventVarIndex
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: val=memory.getEventVar(evidx,ind-1);
|—————————Node:assignment_expression Text: val=memory.getEventVar(evidx,ind-1)
|——————————Node:identifier Text: val
|——————————Node:= Text: =
|——————————Node:call_expression Text: memory.getEventVar(evidx,ind-1)
|———————————Node:field_expression Text: memory.getEventVar
|————————————Node:identifier Text: memory
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getEventVar
|———————————Node:argument_list Text: (evidx,ind-1)
|————————————Node:( Text: (
|————————————Node:identifier Text: evidx
|————————————Node:, Text: ,
|————————————Node:binary_expression Text: ind-1
|—————————————Node:identifier Text: ind
|—————————————Node:- Text: -
|—————————————Node:number_literal Text: 1
|————————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:comment Text: //the CBUS index start with 1
|————————Node:expression_statement Text: prepareMessageBuff(OPC_EVANS,highByte(nn),lowByte(nn),highByte(ev),lowByte(ev),ind,val);
|—————————Node:call_expression Text: prepareMessageBuff(OPC_EVANS,highByte(nn),lowByte(nn),highByte(ev),lowByte(ev),ind,val)
|——————————Node:identifier Text: prepareMessageBuff
|——————————Node:argument_list Text: (OPC_EVANS,highByte(nn),lowByte(nn),highByte(ev),lowByte(ev),ind,val)
|———————————Node:( Text: (
|———————————Node:identifier Text: OPC_EVANS
|———————————Node:, Text: ,
|———————————Node:call_expression Text: highByte(nn)
|————————————Node:identifier Text: highByte
|————————————Node:argument_list Text: (nn)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: nn
|—————————————Node:) Text: )
|———————————Node:, Text: ,
|———————————Node:call_expression Text: lowByte(nn)
|————————————Node:identifier Text: lowByte
|————————————Node:argument_list Text: (nn)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: nn
|—————————————Node:) Text: )
|———————————Node:, Text: ,
|———————————Node:call_expression Text: highByte(ev)
|————————————Node:identifier Text: highByte
|————————————Node:argument_list Text: (ev)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: ev
|—————————————Node:) Text: )
|———————————Node:, Text: ,
|———————————Node:call_expression Text: lowByte(ev)
|————————————Node:identifier Text: lowByte
|————————————Node:argument_list Text: (ev)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: ev
|—————————————Node:) Text: )
|———————————Node:, Text: ,
|———————————Node:identifier Text: ind
|———————————Node:, Text: ,
|———————————Node:identifier Text: val
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:preproc_ifdef Text: #ifdef DEBUGDEF
            Serial.println("RECEIVED OPC_REQEV sending OPC_EVANS");
            printSentMessage();
        #endif
|—————————Node:#ifdef Text: #ifdef
|—————————Node:identifier Text: DEBUGDEF
|—————————Node:expression_statement Text: Serial.println("RECEIVED OPC_REQEV sending OPC_EVANS");
|——————————Node:call_expression Text: Serial.println("RECEIVED OPC_REQEV sending OPC_EVANS")
|———————————Node:field_expression Text: Serial.println
|————————————Node:identifier Text: Serial
|————————————Node:. Text: .
|————————————Node:field_identifier Text: println
|———————————Node:argument_list Text: ("RECEIVED OPC_REQEV sending OPC_EVANS")
|————————————Node:( Text: (
|————————————Node:string_literal Text: "RECEIVED OPC_REQEV sending OPC_EVANS"
|—————————————Node:" Text: "
|—————————————Node:string_content Text: RECEIVED OPC_REQEV sending OPC_EVANS
|—————————————Node:" Text: "
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:expression_statement Text: printSentMessage();
|——————————Node:call_expression Text: printSentMessage()
|———————————Node:identifier Text: printSentMessage
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:#endif Text: #endif
|————————Node:comment Text: // DEBUGDEF
|————————Node:expression_statement Text: sendCanMessage();
|—————————Node:call_expression Text: sendCanMessage()
|——————————Node:identifier Text: sendCanMessage
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:} Text: }
|———————Node:else_clause Text: else{
            sendERRMessage(CMDERR_NOT_LRN);
        }
|————————Node:else Text: else
|————————Node:compound_statement Text: {
            sendERRMessage(CMDERR_NOT_LRN);
        }
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: sendERRMessage(CMDERR_NOT_LRN);
|——————————Node:call_expression Text: sendERRMessage(CMDERR_NOT_LRN)
|———————————Node:identifier Text: sendERRMessage
|———————————Node:argument_list Text: (CMDERR_NOT_LRN)
|————————————Node:( Text: (
|————————————Node:identifier Text: CMDERR_NOT_LRN
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:} Text: }
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case OPC_EVLRN:
        //learn event
        if (state_mode==LEARN){
            learnEvent();
        }else{
            sendERRMessage(CMDERR_NOT_LRN);
        }
        break;
|——————Node:case Text: case
|——————Node:identifier Text: OPC_EVLRN
|——————Node:: Text: :
|——————Node:comment Text: //learn event
|——————Node:if_statement Text: if (state_mode==LEARN){
            learnEvent();
        }else{
            sendERRMessage(CMDERR_NOT_LRN);
        }
|———————Node:if Text: if
|———————Node:condition_clause Text: (state_mode==LEARN)
|————————Node:( Text: (
|————————Node:binary_expression Text: state_mode==LEARN
|—————————Node:identifier Text: state_mode
|—————————Node:== Text: ==
|—————————Node:identifier Text: LEARN
|————————Node:) Text: )
|———————Node:compound_statement Text: {
            learnEvent();
        }
|————————Node:{ Text: {
|————————Node:expression_statement Text: learnEvent();
|—————————Node:call_expression Text: learnEvent()
|——————————Node:identifier Text: learnEvent
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:} Text: }
|———————Node:else_clause Text: else{
            sendERRMessage(CMDERR_NOT_LRN);
        }
|————————Node:else Text: else
|————————Node:compound_statement Text: {
            sendERRMessage(CMDERR_NOT_LRN);
        }
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: sendERRMessage(CMDERR_NOT_LRN);
|——————————Node:call_expression Text: sendERRMessage(CMDERR_NOT_LRN)
|———————————Node:identifier Text: sendERRMessage
|———————————Node:argument_list Text: (CMDERR_NOT_LRN)
|————————————Node:( Text: (
|————————————Node:identifier Text: CMDERR_NOT_LRN
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:} Text: }
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case OPC_EVLRNI:
        //learn event by index. like an update

        if (state_mode==LEARN){

            //TODO: suport device number mode
            #ifdef DEBUGDEF
                 Serial.println("Learning event by index.");
            #endif // DEBUGDEF

            ev=message.getEventNumber();
            nn=message.getNodeNumber();
            ind=message.getEventVarIndex();
            val=message.getEventVar();
            evidx=message.getEventIndex();

            //save event and get the index
            buffer[0]=highByte(nn);
            buffer[1]=lowByte(nn);
            buffer[2]=highByte(ev);
            buffer[3]=lowByte(ev);
            resp=memory.setEvent(buffer,evidx-1);

            if (resp != (evidx-1)){
                //send a message error
                #ifdef DEBUGDEF
                    Serial.println("Error EVLRNI");
                #endif // DEBUGDEF

                sendERRMessage(CMDERR_INV_EV_IDX);
                return OK;
            }

            //save the parameter
            //the CBUS index start with 1

            resp = memory.setEventVar(evidx-1,ind-1,val);

            if (resp != (ind-1)){
                //send a message error
                #ifdef DEBUGDEF
                    Serial.println("Error EVLRNI 2");
                #endif // DEBUGDEF

                sendERRMessage(CMDERR_INV_NV_IDX);
                return OK;
            }

            //send a WRACK back
            prepareMessage(OPC_WRACK);
            sendCanMessage();
        }
	else{
            sendERRMessage(CMDERR_NOT_LRN);
        }

        break;
|——————Node:case Text: case
|——————Node:identifier Text: OPC_EVLRNI
|——————Node:: Text: :
|——————Node:comment Text: //learn event by index. like an update
|——————Node:if_statement Text: if (state_mode==LEARN){

            //TODO: suport device number mode
            #ifdef DEBUGDEF
                 Serial.println("Learning event by index.");
            #endif // DEBUGDEF

            ev=message.getEventNumber();
            nn=message.getNodeNumber();
            ind=message.getEventVarIndex();
            val=message.getEventVar();
            evidx=message.getEventIndex();

            //save event and get the index
            buffer[0]=highByte(nn);
            buffer[1]=lowByte(nn);
            buffer[2]=highByte(ev);
            buffer[3]=lowByte(ev);
            resp=memory.setEvent(buffer,evidx-1);

            if (resp != (evidx-1)){
                //send a message error
                #ifdef DEBUGDEF
                    Serial.println("Error EVLRNI");
                #endif // DEBUGDEF

                sendERRMessage(CMDERR_INV_EV_IDX);
                return OK;
            }

            //save the parameter
            //the CBUS index start with 1

            resp = memory.setEventVar(evidx-1,ind-1,val);

            if (resp != (ind-1)){
                //send a message error
                #ifdef DEBUGDEF
                    Serial.println("Error EVLRNI 2");
                #endif // DEBUGDEF

                sendERRMessage(CMDERR_INV_NV_IDX);
                return OK;
            }

            //send a WRACK back
            prepareMessage(OPC_WRACK);
            sendCanMessage();
        }
	else{
            sendERRMessage(CMDERR_NOT_LRN);
        }
|———————Node:if Text: if
|———————Node:condition_clause Text: (state_mode==LEARN)
|————————Node:( Text: (
|————————Node:binary_expression Text: state_mode==LEARN
|—————————Node:identifier Text: state_mode
|—————————Node:== Text: ==
|—————————Node:identifier Text: LEARN
|————————Node:) Text: )
|———————Node:compound_statement Text: {

            //TODO: suport device number mode
            #ifdef DEBUGDEF
                 Serial.println("Learning event by index.");
            #endif // DEBUGDEF

            ev=message.getEventNumber();
            nn=message.getNodeNumber();
            ind=message.getEventVarIndex();
            val=message.getEventVar();
            evidx=message.getEventIndex();

            //save event and get the index
            buffer[0]=highByte(nn);
            buffer[1]=lowByte(nn);
            buffer[2]=highByte(ev);
            buffer[3]=lowByte(ev);
            resp=memory.setEvent(buffer,evidx-1);

            if (resp != (evidx-1)){
                //send a message error
                #ifdef DEBUGDEF
                    Serial.println("Error EVLRNI");
                #endif // DEBUGDEF

                sendERRMessage(CMDERR_INV_EV_IDX);
                return OK;
            }

            //save the parameter
            //the CBUS index start with 1

            resp = memory.setEventVar(evidx-1,ind-1,val);

            if (resp != (ind-1)){
                //send a message error
                #ifdef DEBUGDEF
                    Serial.println("Error EVLRNI 2");
                #endif // DEBUGDEF

                sendERRMessage(CMDERR_INV_NV_IDX);
                return OK;
            }

            //send a WRACK back
            prepareMessage(OPC_WRACK);
            sendCanMessage();
        }
|————————Node:{ Text: {
|————————Node:comment Text: //TODO: suport device number mode
|————————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                 Serial.println("Learning event by index.");
            #endif
|—————————Node:#ifdef Text: #ifdef
|—————————Node:identifier Text: DEBUGDEF
|—————————Node:expression_statement Text: Serial.println("Learning event by index.");
|——————————Node:call_expression Text: Serial.println("Learning event by index.")
|———————————Node:field_expression Text: Serial.println
|————————————Node:identifier Text: Serial
|————————————Node:. Text: .
|————————————Node:field_identifier Text: println
|———————————Node:argument_list Text: ("Learning event by index.")
|————————————Node:( Text: (
|————————————Node:string_literal Text: "Learning event by index."
|—————————————Node:" Text: "
|—————————————Node:string_content Text: Learning event by index.
|—————————————Node:" Text: "
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:#endif Text: #endif
|————————Node:comment Text: // DEBUGDEF
|————————Node:expression_statement Text: ev=message.getEventNumber();
|—————————Node:assignment_expression Text: ev=message.getEventNumber()
|——————————Node:identifier Text: ev
|——————————Node:= Text: =
|——————————Node:call_expression Text: message.getEventNumber()
|———————————Node:field_expression Text: message.getEventNumber
|————————————Node:identifier Text: message
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getEventNumber
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: nn=message.getNodeNumber();
|—————————Node:assignment_expression Text: nn=message.getNodeNumber()
|——————————Node:identifier Text: nn
|——————————Node:= Text: =
|——————————Node:call_expression Text: message.getNodeNumber()
|———————————Node:field_expression Text: message.getNodeNumber
|————————————Node:identifier Text: message
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getNodeNumber
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: ind=message.getEventVarIndex();
|—————————Node:assignment_expression Text: ind=message.getEventVarIndex()
|——————————Node:identifier Text: ind
|——————————Node:= Text: =
|——————————Node:call_expression Text: message.getEventVarIndex()
|———————————Node:field_expression Text: message.getEventVarIndex
|————————————Node:identifier Text: message
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getEventVarIndex
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: val=message.getEventVar();
|—————————Node:assignment_expression Text: val=message.getEventVar()
|——————————Node:identifier Text: val
|——————————Node:= Text: =
|——————————Node:call_expression Text: message.getEventVar()
|———————————Node:field_expression Text: message.getEventVar
|————————————Node:identifier Text: message
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getEventVar
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: evidx=message.getEventIndex();
|—————————Node:assignment_expression Text: evidx=message.getEventIndex()
|——————————Node:identifier Text: evidx
|——————————Node:= Text: =
|——————————Node:call_expression Text: message.getEventIndex()
|———————————Node:field_expression Text: message.getEventIndex
|————————————Node:identifier Text: message
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getEventIndex
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:comment Text: //save event and get the index
|————————Node:expression_statement Text: buffer[0]=highByte(nn);
|—————————Node:assignment_expression Text: buffer[0]=highByte(nn)
|——————————Node:subscript_expression Text: buffer[0]
|———————————Node:identifier Text: buffer
|———————————Node:subscript_argument_list Text: [0]
|————————————Node:[ Text: [
|————————————Node:number_literal Text: 0
|————————————Node:] Text: ]
|——————————Node:= Text: =
|——————————Node:call_expression Text: highByte(nn)
|———————————Node:identifier Text: highByte
|———————————Node:argument_list Text: (nn)
|————————————Node:( Text: (
|————————————Node:identifier Text: nn
|————————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: buffer[1]=lowByte(nn);
|—————————Node:assignment_expression Text: buffer[1]=lowByte(nn)
|——————————Node:subscript_expression Text: buffer[1]
|———————————Node:identifier Text: buffer
|———————————Node:subscript_argument_list Text: [1]
|————————————Node:[ Text: [
|————————————Node:number_literal Text: 1
|————————————Node:] Text: ]
|——————————Node:= Text: =
|——————————Node:call_expression Text: lowByte(nn)
|———————————Node:identifier Text: lowByte
|———————————Node:argument_list Text: (nn)
|————————————Node:( Text: (
|————————————Node:identifier Text: nn
|————————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: buffer[2]=highByte(ev);
|—————————Node:assignment_expression Text: buffer[2]=highByte(ev)
|——————————Node:subscript_expression Text: buffer[2]
|———————————Node:identifier Text: buffer
|———————————Node:subscript_argument_list Text: [2]
|————————————Node:[ Text: [
|————————————Node:number_literal Text: 2
|————————————Node:] Text: ]
|——————————Node:= Text: =
|——————————Node:call_expression Text: highByte(ev)
|———————————Node:identifier Text: highByte
|———————————Node:argument_list Text: (ev)
|————————————Node:( Text: (
|————————————Node:identifier Text: ev
|————————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: buffer[3]=lowByte(ev);
|—————————Node:assignment_expression Text: buffer[3]=lowByte(ev)
|——————————Node:subscript_expression Text: buffer[3]
|———————————Node:identifier Text: buffer
|———————————Node:subscript_argument_list Text: [3]
|————————————Node:[ Text: [
|————————————Node:number_literal Text: 3
|————————————Node:] Text: ]
|——————————Node:= Text: =
|——————————Node:call_expression Text: lowByte(ev)
|———————————Node:identifier Text: lowByte
|———————————Node:argument_list Text: (ev)
|————————————Node:( Text: (
|————————————Node:identifier Text: ev
|————————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: resp=memory.setEvent(buffer,evidx-1);
|—————————Node:assignment_expression Text: resp=memory.setEvent(buffer,evidx-1)
|——————————Node:identifier Text: resp
|——————————Node:= Text: =
|——————————Node:call_expression Text: memory.setEvent(buffer,evidx-1)
|———————————Node:field_expression Text: memory.setEvent
|————————————Node:identifier Text: memory
|————————————Node:. Text: .
|————————————Node:field_identifier Text: setEvent
|———————————Node:argument_list Text: (buffer,evidx-1)
|————————————Node:( Text: (
|————————————Node:identifier Text: buffer
|————————————Node:, Text: ,
|————————————Node:binary_expression Text: evidx-1
|—————————————Node:identifier Text: evidx
|—————————————Node:- Text: -
|—————————————Node:number_literal Text: 1
|————————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:if_statement Text: if (resp != (evidx-1)){
                //send a message error
                #ifdef DEBUGDEF
                    Serial.println("Error EVLRNI");
                #endif // DEBUGDEF

                sendERRMessage(CMDERR_INV_EV_IDX);
                return OK;
            }
|—————————Node:if Text: if
|—————————Node:condition_clause Text: (resp != (evidx-1))
|——————————Node:( Text: (
|——————————Node:binary_expression Text: resp != (evidx-1)
|———————————Node:identifier Text: resp
|———————————Node:!= Text: !=
|———————————Node:parenthesized_expression Text: (evidx-1)
|————————————Node:( Text: (
|————————————Node:binary_expression Text: evidx-1
|—————————————Node:identifier Text: evidx
|—————————————Node:- Text: -
|—————————————Node:number_literal Text: 1
|————————————Node:) Text: )
|——————————Node:) Text: )
|—————————Node:compound_statement Text: {
                //send a message error
                #ifdef DEBUGDEF
                    Serial.println("Error EVLRNI");
                #endif // DEBUGDEF

                sendERRMessage(CMDERR_INV_EV_IDX);
                return OK;
            }
|——————————Node:{ Text: {
|——————————Node:comment Text: //send a message error
|——————————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                    Serial.println("Error EVLRNI");
                #endif
|———————————Node:#ifdef Text: #ifdef
|———————————Node:identifier Text: DEBUGDEF
|———————————Node:expression_statement Text: Serial.println("Error EVLRNI");
|————————————Node:call_expression Text: Serial.println("Error EVLRNI")
|—————————————Node:field_expression Text: Serial.println
|——————————————Node:identifier Text: Serial
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: println
|—————————————Node:argument_list Text: ("Error EVLRNI")
|——————————————Node:( Text: (
|——————————————Node:string_literal Text: "Error EVLRNI"
|———————————————Node:" Text: "
|———————————————Node:string_content Text: Error EVLRNI
|———————————————Node:" Text: "
|——————————————Node:) Text: )
|————————————Node:; Text: ;
|———————————Node:#endif Text: #endif
|——————————Node:comment Text: // DEBUGDEF
|——————————Node:expression_statement Text: sendERRMessage(CMDERR_INV_EV_IDX);
|———————————Node:call_expression Text: sendERRMessage(CMDERR_INV_EV_IDX)
|————————————Node:identifier Text: sendERRMessage
|————————————Node:argument_list Text: (CMDERR_INV_EV_IDX)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: CMDERR_INV_EV_IDX
|—————————————Node:) Text: )
|———————————Node:; Text: ;
|——————————Node:return_statement Text: return OK;
|———————————Node:return Text: return
|———————————Node:identifier Text: OK
|———————————Node:; Text: ;
|——————————Node:} Text: }
|————————Node:comment Text: //save the parameter
|————————Node:comment Text: //the CBUS index start with 1
|————————Node:expression_statement Text: resp = memory.setEventVar(evidx-1,ind-1,val);
|—————————Node:assignment_expression Text: resp = memory.setEventVar(evidx-1,ind-1,val)
|——————————Node:identifier Text: resp
|——————————Node:= Text: =
|——————————Node:call_expression Text: memory.setEventVar(evidx-1,ind-1,val)
|———————————Node:field_expression Text: memory.setEventVar
|————————————Node:identifier Text: memory
|————————————Node:. Text: .
|————————————Node:field_identifier Text: setEventVar
|———————————Node:argument_list Text: (evidx-1,ind-1,val)
|————————————Node:( Text: (
|————————————Node:binary_expression Text: evidx-1
|—————————————Node:identifier Text: evidx
|—————————————Node:- Text: -
|—————————————Node:number_literal Text: 1
|————————————Node:, Text: ,
|————————————Node:binary_expression Text: ind-1
|—————————————Node:identifier Text: ind
|—————————————Node:- Text: -
|—————————————Node:number_literal Text: 1
|————————————Node:, Text: ,
|————————————Node:identifier Text: val
|————————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:if_statement Text: if (resp != (ind-1)){
                //send a message error
                #ifdef DEBUGDEF
                    Serial.println("Error EVLRNI 2");
                #endif // DEBUGDEF

                sendERRMessage(CMDERR_INV_NV_IDX);
                return OK;
            }
|—————————Node:if Text: if
|—————————Node:condition_clause Text: (resp != (ind-1))
|——————————Node:( Text: (
|——————————Node:binary_expression Text: resp != (ind-1)
|———————————Node:identifier Text: resp
|———————————Node:!= Text: !=
|———————————Node:parenthesized_expression Text: (ind-1)
|————————————Node:( Text: (
|————————————Node:binary_expression Text: ind-1
|—————————————Node:identifier Text: ind
|—————————————Node:- Text: -
|—————————————Node:number_literal Text: 1
|————————————Node:) Text: )
|——————————Node:) Text: )
|—————————Node:compound_statement Text: {
                //send a message error
                #ifdef DEBUGDEF
                    Serial.println("Error EVLRNI 2");
                #endif // DEBUGDEF

                sendERRMessage(CMDERR_INV_NV_IDX);
                return OK;
            }
|——————————Node:{ Text: {
|——————————Node:comment Text: //send a message error
|——————————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                    Serial.println("Error EVLRNI 2");
                #endif
|———————————Node:#ifdef Text: #ifdef
|———————————Node:identifier Text: DEBUGDEF
|———————————Node:expression_statement Text: Serial.println("Error EVLRNI 2");
|————————————Node:call_expression Text: Serial.println("Error EVLRNI 2")
|—————————————Node:field_expression Text: Serial.println
|——————————————Node:identifier Text: Serial
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: println
|—————————————Node:argument_list Text: ("Error EVLRNI 2")
|——————————————Node:( Text: (
|——————————————Node:string_literal Text: "Error EVLRNI 2"
|———————————————Node:" Text: "
|———————————————Node:string_content Text: Error EVLRNI 2
|———————————————Node:" Text: "
|——————————————Node:) Text: )
|————————————Node:; Text: ;
|———————————Node:#endif Text: #endif
|——————————Node:comment Text: // DEBUGDEF
|——————————Node:expression_statement Text: sendERRMessage(CMDERR_INV_NV_IDX);
|———————————Node:call_expression Text: sendERRMessage(CMDERR_INV_NV_IDX)
|————————————Node:identifier Text: sendERRMessage
|————————————Node:argument_list Text: (CMDERR_INV_NV_IDX)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: CMDERR_INV_NV_IDX
|—————————————Node:) Text: )
|———————————Node:; Text: ;
|——————————Node:return_statement Text: return OK;
|———————————Node:return Text: return
|———————————Node:identifier Text: OK
|———————————Node:; Text: ;
|——————————Node:} Text: }
|————————Node:comment Text: //send a WRACK back
|————————Node:expression_statement Text: prepareMessage(OPC_WRACK);
|—————————Node:call_expression Text: prepareMessage(OPC_WRACK)
|——————————Node:identifier Text: prepareMessage
|——————————Node:argument_list Text: (OPC_WRACK)
|———————————Node:( Text: (
|———————————Node:identifier Text: OPC_WRACK
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: sendCanMessage();
|—————————Node:call_expression Text: sendCanMessage()
|——————————Node:identifier Text: sendCanMessage
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:} Text: }
|———————Node:else_clause Text: else{
            sendERRMessage(CMDERR_NOT_LRN);
        }
|————————Node:else Text: else
|————————Node:compound_statement Text: {
            sendERRMessage(CMDERR_NOT_LRN);
        }
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: sendERRMessage(CMDERR_NOT_LRN);
|——————————Node:call_expression Text: sendERRMessage(CMDERR_NOT_LRN)
|———————————Node:identifier Text: sendERRMessage
|———————————Node:argument_list Text: (CMDERR_NOT_LRN)
|————————————Node:( Text: (
|————————————Node:identifier Text: CMDERR_NOT_LRN
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:} Text: }
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return OK;
|————Node:return Text: return
|————Node:identifier Text: OK
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief
* Set a node variable.
* \param ind The node varialbe index. Starting at 1. It is limited by the user defined node variables.
* \param val The variable value
* \return True if success els return false.
*/
|—Node:function_definition Text: bool MergCBUS::setNodeVariable(byte ind, byte val){
     return setNodeVariableAuto(ind-1,val,false);
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: MergCBUS::setNodeVariable(byte ind, byte val)
|———Node:qualified_identifier Text: MergCBUS::setNodeVariable
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: setNodeVariable
|———Node:parameter_list Text: (byte ind, byte val)
|————Node:( Text: (
|————Node:parameter_declaration Text: byte ind
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: ind
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte val
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: val
|————Node:) Text: )
|——Node:compound_statement Text: {
     return setNodeVariableAuto(ind-1,val,false);
}
|———Node:{ Text: {
|———Node:return_statement Text: return setNodeVariableAuto(ind-1,val,false);
|————Node:return Text: return
|————Node:call_expression Text: setNodeVariableAuto(ind-1,val,false)
|—————Node:identifier Text: setNodeVariableAuto
|—————Node:argument_list Text: (ind-1,val,false)
|——————Node:( Text: (
|——————Node:binary_expression Text: ind-1
|———————Node:identifier Text: ind
|———————Node:- Text: -
|———————Node:number_literal Text: 1
|——————Node:, Text: ,
|——————Node:identifier Text: val
|——————Node:, Text: ,
|——————Node:false Text: false
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief
* Set a internal node variable.
* \param ind The node varialbe index. Starting at 1. It is limited by the user defined node variables.
* \param val The variable value
*/
|—Node:function_definition Text: void MergCBUS::setInternalNodeVariable(byte ind, byte val){
     return memory.setInternalVar(ind-1,val);
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: MergCBUS::setInternalNodeVariable(byte ind, byte val)
|———Node:qualified_identifier Text: MergCBUS::setInternalNodeVariable
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: setInternalNodeVariable
|———Node:parameter_list Text: (byte ind, byte val)
|————Node:( Text: (
|————Node:parameter_declaration Text: byte ind
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: ind
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte val
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: val
|————Node:) Text: )
|——Node:compound_statement Text: {
     return memory.setInternalVar(ind-1,val);
}
|———Node:{ Text: {
|———Node:return_statement Text: return memory.setInternalVar(ind-1,val);
|————Node:return Text: return
|————Node:call_expression Text: memory.setInternalVar(ind-1,val)
|—————Node:field_expression Text: memory.setInternalVar
|——————Node:identifier Text: memory
|——————Node:. Text: .
|——————Node:field_identifier Text: setInternalVar
|—————Node:argument_list Text: (ind-1,val)
|——————Node:( Text: (
|——————Node:binary_expression Text: ind-1
|———————Node:identifier Text: ind
|———————Node:- Text: -
|———————Node:number_literal Text: 1
|——————Node:, Text: ,
|——————Node:identifier Text: val
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief
* Set a node variable with automatic response. This function is used when learning events or receiving FCU messages.
* \param ind The node varialbe index. Starting at 1. It is limited by the user defined node variables.
* \param val The variable value
* \return True if success els return false.
*/
|—Node:function_definition Text: bool MergCBUS::setNodeVariableAuto(byte ind, byte val,bool autoErr){

     if (ind<=nodeId.getSuportedNodeVariables()){
            memory.setVar(ind,val);
            if (autoErr){
                prepareMessage(OPC_WRACK);
                sendCanMessage();
            }
            return true;
     }else{
            //send error
            if (autoErr){
                sendERRMessage(CMDERR_INV_PARAM_IDX);
            }
     }
     return false;

}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: MergCBUS::setNodeVariableAuto(byte ind, byte val,bool autoErr)
|———Node:qualified_identifier Text: MergCBUS::setNodeVariableAuto
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: setNodeVariableAuto
|———Node:parameter_list Text: (byte ind, byte val,bool autoErr)
|————Node:( Text: (
|————Node:parameter_declaration Text: byte ind
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: ind
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte val
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: val
|————Node:, Text: ,
|————Node:parameter_declaration Text: bool autoErr
|—————Node:primitive_type Text: bool
|—————Node:identifier Text: autoErr
|————Node:) Text: )
|——Node:compound_statement Text: {

     if (ind<=nodeId.getSuportedNodeVariables()){
            memory.setVar(ind,val);
            if (autoErr){
                prepareMessage(OPC_WRACK);
                sendCanMessage();
            }
            return true;
     }else{
            //send error
            if (autoErr){
                sendERRMessage(CMDERR_INV_PARAM_IDX);
            }
     }
     return false;

}
|———Node:{ Text: {
|———Node:if_statement Text: if (ind<=nodeId.getSuportedNodeVariables()){
            memory.setVar(ind,val);
            if (autoErr){
                prepareMessage(OPC_WRACK);
                sendCanMessage();
            }
            return true;
     }else{
            //send error
            if (autoErr){
                sendERRMessage(CMDERR_INV_PARAM_IDX);
            }
     }
|————Node:if Text: if
|————Node:condition_clause Text: (ind<=nodeId.getSuportedNodeVariables())
|—————Node:( Text: (
|—————Node:binary_expression Text: ind<=nodeId.getSuportedNodeVariables()
|——————Node:identifier Text: ind
|——————Node:<= Text: <=
|——————Node:call_expression Text: nodeId.getSuportedNodeVariables()
|———————Node:field_expression Text: nodeId.getSuportedNodeVariables
|————————Node:identifier Text: nodeId
|————————Node:. Text: .
|————————Node:field_identifier Text: getSuportedNodeVariables
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
            memory.setVar(ind,val);
            if (autoErr){
                prepareMessage(OPC_WRACK);
                sendCanMessage();
            }
            return true;
     }
|—————Node:{ Text: {
|—————Node:expression_statement Text: memory.setVar(ind,val);
|——————Node:call_expression Text: memory.setVar(ind,val)
|———————Node:field_expression Text: memory.setVar
|————————Node:identifier Text: memory
|————————Node:. Text: .
|————————Node:field_identifier Text: setVar
|———————Node:argument_list Text: (ind,val)
|————————Node:( Text: (
|————————Node:identifier Text: ind
|————————Node:, Text: ,
|————————Node:identifier Text: val
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (autoErr){
                prepareMessage(OPC_WRACK);
                sendCanMessage();
            }
|——————Node:if Text: if
|——————Node:condition_clause Text: (autoErr)
|———————Node:( Text: (
|———————Node:identifier Text: autoErr
|———————Node:) Text: )
|——————Node:compound_statement Text: {
                prepareMessage(OPC_WRACK);
                sendCanMessage();
            }
|———————Node:{ Text: {
|———————Node:expression_statement Text: prepareMessage(OPC_WRACK);
|————————Node:call_expression Text: prepareMessage(OPC_WRACK)
|—————————Node:identifier Text: prepareMessage
|—————————Node:argument_list Text: (OPC_WRACK)
|——————————Node:( Text: (
|——————————Node:identifier Text: OPC_WRACK
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: sendCanMessage();
|————————Node:call_expression Text: sendCanMessage()
|—————————Node:identifier Text: sendCanMessage
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:return_statement Text: return true;
|——————Node:return Text: return
|——————Node:true Text: true
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else{
            //send error
            if (autoErr){
                sendERRMessage(CMDERR_INV_PARAM_IDX);
            }
     }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
            //send error
            if (autoErr){
                sendERRMessage(CMDERR_INV_PARAM_IDX);
            }
     }
|——————Node:{ Text: {
|——————Node:comment Text: //send error
|——————Node:if_statement Text: if (autoErr){
                sendERRMessage(CMDERR_INV_PARAM_IDX);
            }
|———————Node:if Text: if
|———————Node:condition_clause Text: (autoErr)
|————————Node:( Text: (
|————————Node:identifier Text: autoErr
|————————Node:) Text: )
|———————Node:compound_statement Text: {
                sendERRMessage(CMDERR_INV_PARAM_IDX);
            }
|————————Node:{ Text: {
|————————Node:expression_statement Text: sendERRMessage(CMDERR_INV_PARAM_IDX);
|—————————Node:call_expression Text: sendERRMessage(CMDERR_INV_PARAM_IDX)
|——————————Node:identifier Text: sendERRMessage
|——————————Node:argument_list Text: (CMDERR_INV_PARAM_IDX)
|———————————Node:( Text: (
|———————————Node:identifier Text: CMDERR_INV_PARAM_IDX
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:} Text: }
|——————Node:} Text: }
|———Node:return_statement Text: return false;
|————Node:return Text: return
|————Node:false Text: false
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief
* Deals with accessory functions. No automatic response of events once the user function determines the behaviour.
* The accessory messages has to be threated by the user function
* once it is related to the module function
* has to deal with ACON,ACOF,ARON,AROF, AREQ,ASON,ASOF
*/
|—Node:function_definition Text: byte MergCBUS::handleACCMessages(){
    if (userHandler!=0){
        userHandler(&message,this);
    }
    return OK;
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: MergCBUS::handleACCMessages()
|———Node:qualified_identifier Text: MergCBUS::handleACCMessages
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: handleACCMessages
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    if (userHandler!=0){
        userHandler(&message,this);
    }
    return OK;
}
|———Node:{ Text: {
|———Node:if_statement Text: if (userHandler!=0){
        userHandler(&message,this);
    }
|————Node:if Text: if
|————Node:condition_clause Text: (userHandler!=0)
|—————Node:( Text: (
|—————Node:binary_expression Text: userHandler!=0
|——————Node:identifier Text: userHandler
|——————Node:!= Text: !=
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {
        userHandler(&message,this);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: userHandler(&message,this);
|——————Node:call_expression Text: userHandler(&message,this)
|———————Node:identifier Text: userHandler
|———————Node:argument_list Text: (&message,this)
|————————Node:( Text: (
|————————Node:pointer_expression Text: &message
|—————————Node:& Text: &
|—————————Node:identifier Text: message
|————————Node:, Text: ,
|————————Node:this Text: this
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return OK;
|————Node:return Text: return
|————Node:identifier Text: OK
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief
* Handle general messages. No automatic response of events once the user function determines the behaviour..
* Has to handle the EXTC messages
*/
|—Node:function_definition Text: byte MergCBUS::handleGeneralMessages(){

    switch ((uint8_t) message.getOpc()){
    case OPC_ARST:
            //reset arduino
            Reset_AVR();
        break;
    case OPC_RST:
            Reset_AVR();
        break;
    }

    if (userHandler!=0){
        userHandler(&message,this);
    }
    return OK;
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: MergCBUS::handleGeneralMessages()
|———Node:qualified_identifier Text: MergCBUS::handleGeneralMessages
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: handleGeneralMessages
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {

    switch ((uint8_t) message.getOpc()){
    case OPC_ARST:
            //reset arduino
            Reset_AVR();
        break;
    case OPC_RST:
            Reset_AVR();
        break;
    }

    if (userHandler!=0){
        userHandler(&message,this);
    }
    return OK;
}
|———Node:{ Text: {
|———Node:switch_statement Text: switch ((uint8_t) message.getOpc()){
    case OPC_ARST:
            //reset arduino
            Reset_AVR();
        break;
    case OPC_RST:
            Reset_AVR();
        break;
    }
|————Node:switch Text: switch
|————Node:condition_clause Text: ((uint8_t) message.getOpc())
|—————Node:( Text: (
|—————Node:cast_expression Text: (uint8_t) message.getOpc()
|——————Node:( Text: (
|——————Node:type_descriptor Text: uint8_t
|———————Node:primitive_type Text: uint8_t
|——————Node:) Text: )
|——————Node:call_expression Text: message.getOpc()
|———————Node:field_expression Text: message.getOpc
|————————Node:identifier Text: message
|————————Node:. Text: .
|————————Node:field_identifier Text: getOpc
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
    case OPC_ARST:
            //reset arduino
            Reset_AVR();
        break;
    case OPC_RST:
            Reset_AVR();
        break;
    }
|—————Node:{ Text: {
|—————Node:case_statement Text: case OPC_ARST:
            //reset arduino
            Reset_AVR();
        break;
|——————Node:case Text: case
|——————Node:identifier Text: OPC_ARST
|——————Node:: Text: :
|——————Node:comment Text: //reset arduino
|——————Node:expression_statement Text: Reset_AVR();
|———————Node:call_expression Text: Reset_AVR()
|————————Node:identifier Text: Reset_AVR
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case OPC_RST:
            Reset_AVR();
        break;
|——————Node:case Text: case
|——————Node:identifier Text: OPC_RST
|——————Node:: Text: :
|——————Node:expression_statement Text: Reset_AVR();
|———————Node:call_expression Text: Reset_AVR()
|————————Node:identifier Text: Reset_AVR
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:} Text: }
|———Node:if_statement Text: if (userHandler!=0){
        userHandler(&message,this);
    }
|————Node:if Text: if
|————Node:condition_clause Text: (userHandler!=0)
|—————Node:( Text: (
|—————Node:binary_expression Text: userHandler!=0
|——————Node:identifier Text: userHandler
|——————Node:!= Text: !=
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {
        userHandler(&message,this);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: userHandler(&message,this);
|——————Node:call_expression Text: userHandler(&message,this)
|———————Node:identifier Text: userHandler
|———————Node:argument_list Text: (&message,this)
|————————Node:( Text: (
|————————Node:pointer_expression Text: &message
|—————————Node:& Text: &
|—————————Node:identifier Text: message
|————————Node:, Text: ,
|————————Node:this Text: this
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return OK;
|————Node:return Text: return
|————Node:identifier Text: OK
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: // TODO (amauriala#1#): Create the DDC handle
|—Node:comment Text: /** \brief
* Handle DCC messages. Still to TODO.
*/
|—Node:function_definition Text: byte MergCBUS::handleDCCMessages(){
    return 0;
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: MergCBUS::handleDCCMessages()
|———Node:qualified_identifier Text: MergCBUS::handleDCCMessages
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: handleDCCMessages
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    return 0;
}
|———Node:{ Text: {
|———Node:return_statement Text: return 0;
|————Node:return Text: return
|————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief
* Sort a simple array.
*/
|—Node:function_definition Text: void MergCBUS::sortArray(byte *a, byte n){

  for (byte i = 1; i < n; ++i)
  {
    byte j = a[i];
    byte k;
    for (k = i - 1; (k >= 0) && (j < a[k]); k--)
    {
      a[k + 1] = a[k];
    }
    a[k + 1] = j;
  }
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: MergCBUS::sortArray(byte *a, byte n)
|———Node:qualified_identifier Text: MergCBUS::sortArray
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: sortArray
|———Node:parameter_list Text: (byte *a, byte n)
|————Node:( Text: (
|————Node:parameter_declaration Text: byte *a
|—————Node:type_identifier Text: byte
|—————Node:pointer_declarator Text: *a
|——————Node:* Text: *
|——————Node:identifier Text: a
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte n
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: n
|————Node:) Text: )
|——Node:compound_statement Text: {

  for (byte i = 1; i < n; ++i)
  {
    byte j = a[i];
    byte k;
    for (k = i - 1; (k >= 0) && (j < a[k]); k--)
    {
      a[k + 1] = a[k];
    }
    a[k + 1] = j;
  }
}
|———Node:{ Text: {
|———Node:for_statement Text: for (byte i = 1; i < n; ++i)
  {
    byte j = a[i];
    byte k;
    for (k = i - 1; (k >= 0) && (j < a[k]); k--)
    {
      a[k + 1] = a[k];
    }
    a[k + 1] = j;
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:declaration Text: byte i = 1;
|—————Node:type_identifier Text: byte
|—————Node:init_declarator Text: i = 1
|——————Node:identifier Text: i
|——————Node:= Text: =
|——————Node:number_literal Text: 1
|—————Node:; Text: ;
|————Node:binary_expression Text: i < n
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:identifier Text: n
|————Node:; Text: ;
|————Node:update_expression Text: ++i
|—————Node:++ Text: ++
|—————Node:identifier Text: i
|————Node:) Text: )
|————Node:compound_statement Text: {
    byte j = a[i];
    byte k;
    for (k = i - 1; (k >= 0) && (j < a[k]); k--)
    {
      a[k + 1] = a[k];
    }
    a[k + 1] = j;
  }
|—————Node:{ Text: {
|—————Node:declaration Text: byte j = a[i];
|——————Node:type_identifier Text: byte
|——————Node:init_declarator Text: j = a[i]
|———————Node:identifier Text: j
|———————Node:= Text: =
|———————Node:subscript_expression Text: a[i]
|————————Node:identifier Text: a
|————————Node:subscript_argument_list Text: [i]
|—————————Node:[ Text: [
|—————————Node:identifier Text: i
|—————————Node:] Text: ]
|——————Node:; Text: ;
|—————Node:declaration Text: byte k;
|——————Node:type_identifier Text: byte
|——————Node:identifier Text: k
|——————Node:; Text: ;
|—————Node:for_statement Text: for (k = i - 1; (k >= 0) && (j < a[k]); k--)
    {
      a[k + 1] = a[k];
    }
|——————Node:for Text: for
|——————Node:( Text: (
|——————Node:assignment_expression Text: k = i - 1
|———————Node:identifier Text: k
|———————Node:= Text: =
|———————Node:binary_expression Text: i - 1
|————————Node:identifier Text: i
|————————Node:- Text: -
|————————Node:number_literal Text: 1
|——————Node:; Text: ;
|——————Node:binary_expression Text: (k >= 0) && (j < a[k])
|———————Node:parenthesized_expression Text: (k >= 0)
|————————Node:( Text: (
|————————Node:binary_expression Text: k >= 0
|—————————Node:identifier Text: k
|—————————Node:>= Text: >=
|—————————Node:number_literal Text: 0
|————————Node:) Text: )
|———————Node:&& Text: &&
|———————Node:parenthesized_expression Text: (j < a[k])
|————————Node:( Text: (
|————————Node:binary_expression Text: j < a[k]
|—————————Node:identifier Text: j
|—————————Node:< Text: <
|—————————Node:subscript_expression Text: a[k]
|——————————Node:identifier Text: a
|——————————Node:subscript_argument_list Text: [k]
|———————————Node:[ Text: [
|———————————Node:identifier Text: k
|———————————Node:] Text: ]
|————————Node:) Text: )
|——————Node:; Text: ;
|——————Node:update_expression Text: k--
|———————Node:identifier Text: k
|———————Node:-- Text: --
|——————Node:) Text: )
|——————Node:compound_statement Text: {
      a[k + 1] = a[k];
    }
|———————Node:{ Text: {
|———————Node:expression_statement Text: a[k + 1] = a[k];
|————————Node:assignment_expression Text: a[k + 1] = a[k]
|—————————Node:subscript_expression Text: a[k + 1]
|——————————Node:identifier Text: a
|——————————Node:subscript_argument_list Text: [k + 1]
|———————————Node:[ Text: [
|———————————Node:binary_expression Text: k + 1
|————————————Node:identifier Text: k
|————————————Node:+ Text: +
|————————————Node:number_literal Text: 1
|———————————Node:] Text: ]
|—————————Node:= Text: =
|—————————Node:subscript_expression Text: a[k]
|——————————Node:identifier Text: a
|——————————Node:subscript_argument_list Text: [k]
|———————————Node:[ Text: [
|———————————Node:identifier Text: k
|———————————Node:] Text: ]
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:expression_statement Text: a[k + 1] = j;
|——————Node:assignment_expression Text: a[k + 1] = j
|———————Node:subscript_expression Text: a[k + 1]
|————————Node:identifier Text: a
|————————Node:subscript_argument_list Text: [k + 1]
|—————————Node:[ Text: [
|—————————Node:binary_expression Text: k + 1
|——————————Node:identifier Text: k
|——————————Node:+ Text: +
|——————————Node:number_literal Text: 1
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:identifier Text: j
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:} Text: }
|—Node:comment Text: /** \brief
* Clear the message buffer
*/
|—Node:function_definition Text: void MergCBUS::clearMsgToSend(){
    for (uint8_t i=0;i<CANDATA_SIZE;i++){
        mergCanData[i]=0;
    }
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: MergCBUS::clearMsgToSend()
|———Node:qualified_identifier Text: MergCBUS::clearMsgToSend
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: clearMsgToSend
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    for (uint8_t i=0;i<CANDATA_SIZE;i++){
        mergCanData[i]=0;
    }
}
|———Node:{ Text: {
|———Node:for_statement Text: for (uint8_t i=0;i<CANDATA_SIZE;i++){
        mergCanData[i]=0;
    }
|————Node:for Text: for
|————Node:( Text: (
|————Node:declaration Text: uint8_t i=0;
|—————Node:primitive_type Text: uint8_t
|—————Node:init_declarator Text: i=0
|——————Node:identifier Text: i
|——————Node:= Text: =
|——————Node:number_literal Text: 0
|—————Node:; Text: ;
|————Node:binary_expression Text: i<CANDATA_SIZE
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:identifier Text: CANDATA_SIZE
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
        mergCanData[i]=0;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: mergCanData[i]=0;
|——————Node:assignment_expression Text: mergCanData[i]=0
|———————Node:subscript_expression Text: mergCanData[i]
|————————Node:identifier Text: mergCanData
|————————Node:subscript_argument_list Text: [i]
|—————————Node:[ Text: [
|—————————Node:identifier Text: i
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:number_literal Text: 0
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:} Text: }
|—Node:comment Text: /** \brief
* Send the message to can bus. The message is set by @see prepareMessage or @see prepareMessageBuff
* @return OK if no error found, else return error code from the transport layer.
*/
|—Node:function_definition Text: byte MergCBUS::sendCanMessage(){
    byte message_size;
    message_size=getMessageSize(mergCanData[0]);
    Can.setPriority(PRIO_NEXT,PRIO_MIN_NORMAL);

    #ifdef DEBUGMSG
        Serial.print("Send Message: ");
        for (uint8_t j=0;j<7;j++){
            Serial.print (mergCanData[j]);
            Serial.print("\t");
        }
        Serial.println();
    #endif // DEBUGMSG
    byte r=Can.sendMsgBuf(nodeId.getCanID(),0,message_size,mergCanData);
    if (CAN_OK!=r){
        //TODO
         Serial.println("N");
        return r;
    }
    Serial.println("S");
    return OK;
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: MergCBUS::sendCanMessage()
|———Node:qualified_identifier Text: MergCBUS::sendCanMessage
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: sendCanMessage
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    byte message_size;
    message_size=getMessageSize(mergCanData[0]);
    Can.setPriority(PRIO_NEXT,PRIO_MIN_NORMAL);

    #ifdef DEBUGMSG
        Serial.print("Send Message: ");
        for (uint8_t j=0;j<7;j++){
            Serial.print (mergCanData[j]);
            Serial.print("\t");
        }
        Serial.println();
    #endif // DEBUGMSG
    byte r=Can.sendMsgBuf(nodeId.getCanID(),0,message_size,mergCanData);
    if (CAN_OK!=r){
        //TODO
         Serial.println("N");
        return r;
    }
    Serial.println("S");
    return OK;
}
|———Node:{ Text: {
|———Node:declaration Text: byte message_size;
|————Node:type_identifier Text: byte
|————Node:identifier Text: message_size
|————Node:; Text: ;
|———Node:expression_statement Text: message_size=getMessageSize(mergCanData[0]);
|————Node:assignment_expression Text: message_size=getMessageSize(mergCanData[0])
|—————Node:identifier Text: message_size
|—————Node:= Text: =
|—————Node:call_expression Text: getMessageSize(mergCanData[0])
|——————Node:identifier Text: getMessageSize
|——————Node:argument_list Text: (mergCanData[0])
|———————Node:( Text: (
|———————Node:subscript_expression Text: mergCanData[0]
|————————Node:identifier Text: mergCanData
|————————Node:subscript_argument_list Text: [0]
|—————————Node:[ Text: [
|—————————Node:number_literal Text: 0
|—————————Node:] Text: ]
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: Can.setPriority(PRIO_NEXT,PRIO_MIN_NORMAL);
|————Node:call_expression Text: Can.setPriority(PRIO_NEXT,PRIO_MIN_NORMAL)
|—————Node:field_expression Text: Can.setPriority
|——————Node:identifier Text: Can
|——————Node:. Text: .
|——————Node:field_identifier Text: setPriority
|—————Node:argument_list Text: (PRIO_NEXT,PRIO_MIN_NORMAL)
|——————Node:( Text: (
|——————Node:identifier Text: PRIO_NEXT
|——————Node:, Text: ,
|——————Node:identifier Text: PRIO_MIN_NORMAL
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef DEBUGMSG
        Serial.print("Send Message: ");
        for (uint8_t j=0;j<7;j++){
            Serial.print (mergCanData[j]);
            Serial.print("\t");
        }
        Serial.println();
    #endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: DEBUGMSG
|————Node:expression_statement Text: Serial.print("Send Message: ");
|—————Node:call_expression Text: Serial.print("Send Message: ")
|——————Node:field_expression Text: Serial.print
|———————Node:identifier Text: Serial
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("Send Message: ")
|———————Node:( Text: (
|———————Node:string_literal Text: "Send Message: "
|————————Node:" Text: "
|————————Node:string_content Text: Send Message: 
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:for_statement Text: for (uint8_t j=0;j<7;j++){
            Serial.print (mergCanData[j]);
            Serial.print("\t");
        }
|—————Node:for Text: for
|—————Node:( Text: (
|—————Node:declaration Text: uint8_t j=0;
|——————Node:primitive_type Text: uint8_t
|——————Node:init_declarator Text: j=0
|———————Node:identifier Text: j
|———————Node:= Text: =
|———————Node:number_literal Text: 0
|——————Node:; Text: ;
|—————Node:binary_expression Text: j<7
|——————Node:identifier Text: j
|——————Node:< Text: <
|——————Node:number_literal Text: 7
|—————Node:; Text: ;
|—————Node:update_expression Text: j++
|——————Node:identifier Text: j
|——————Node:++ Text: ++
|—————Node:) Text: )
|—————Node:compound_statement Text: {
            Serial.print (mergCanData[j]);
            Serial.print("\t");
        }
|——————Node:{ Text: {
|——————Node:expression_statement Text: Serial.print (mergCanData[j]);
|———————Node:call_expression Text: Serial.print (mergCanData[j])
|————————Node:field_expression Text: Serial.print
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: print
|————————Node:argument_list Text: (mergCanData[j])
|—————————Node:( Text: (
|—————————Node:subscript_expression Text: mergCanData[j]
|——————————Node:identifier Text: mergCanData
|——————————Node:subscript_argument_list Text: [j]
|———————————Node:[ Text: [
|———————————Node:identifier Text: j
|———————————Node:] Text: ]
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: Serial.print("\t");
|———————Node:call_expression Text: Serial.print("\t")
|————————Node:field_expression Text: Serial.print
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: print
|————————Node:argument_list Text: ("\t")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "\t"
|——————————Node:" Text: "
|——————————Node:escape_sequence Text: \t
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:} Text: }
|————Node:expression_statement Text: Serial.println();
|—————Node:call_expression Text: Serial.println()
|——————Node:field_expression Text: Serial.println
|———————Node:identifier Text: Serial
|———————Node:. Text: .
|———————Node:field_identifier Text: println
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:comment Text: // DEBUGMSG
|———Node:declaration Text: byte r=Can.sendMsgBuf(nodeId.getCanID(),0,message_size,mergCanData);
|————Node:type_identifier Text: byte
|————Node:init_declarator Text: r=Can.sendMsgBuf(nodeId.getCanID(),0,message_size,mergCanData)
|—————Node:identifier Text: r
|—————Node:= Text: =
|—————Node:call_expression Text: Can.sendMsgBuf(nodeId.getCanID(),0,message_size,mergCanData)
|——————Node:field_expression Text: Can.sendMsgBuf
|———————Node:identifier Text: Can
|———————Node:. Text: .
|———————Node:field_identifier Text: sendMsgBuf
|——————Node:argument_list Text: (nodeId.getCanID(),0,message_size,mergCanData)
|———————Node:( Text: (
|———————Node:call_expression Text: nodeId.getCanID()
|————————Node:field_expression Text: nodeId.getCanID
|—————————Node:identifier Text: nodeId
|—————————Node:. Text: .
|—————————Node:field_identifier Text: getCanID
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:, Text: ,
|———————Node:number_literal Text: 0
|———————Node:, Text: ,
|———————Node:identifier Text: message_size
|———————Node:, Text: ,
|———————Node:identifier Text: mergCanData
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (CAN_OK!=r){
        //TODO
         Serial.println("N");
        return r;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (CAN_OK!=r)
|—————Node:( Text: (
|—————Node:binary_expression Text: CAN_OK!=r
|——————Node:identifier Text: CAN_OK
|——————Node:!= Text: !=
|——————Node:identifier Text: r
|—————Node:) Text: )
|————Node:compound_statement Text: {
        //TODO
         Serial.println("N");
        return r;
    }
|—————Node:{ Text: {
|—————Node:comment Text: //TODO
|—————Node:expression_statement Text: Serial.println("N");
|——————Node:call_expression Text: Serial.println("N")
|———————Node:field_expression Text: Serial.println
|————————Node:identifier Text: Serial
|————————Node:. Text: .
|————————Node:field_identifier Text: println
|———————Node:argument_list Text: ("N")
|————————Node:( Text: (
|————————Node:string_literal Text: "N"
|—————————Node:" Text: "
|—————————Node:string_content Text: N
|—————————Node:" Text: "
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return r;
|——————Node:return Text: return
|——————Node:identifier Text: r
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: Serial.println("S");
|————Node:call_expression Text: Serial.println("S")
|—————Node:field_expression Text: Serial.println
|——————Node:identifier Text: Serial
|——————Node:. Text: .
|——————Node:field_identifier Text: println
|—————Node:argument_list Text: ("S")
|——————Node:( Text: (
|——————Node:string_literal Text: "S"
|———————Node:" Text: "
|———————Node:string_content Text: S
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return OK;
|————Node:return Text: return
|————Node:identifier Text: OK
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief
* Get the message size using the opc
*/
|—Node:function_definition Text: byte MergCBUS::getMessageSize(byte opc){
    byte a=opc;
    a=a>>5;
    return (a+1);
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: MergCBUS::getMessageSize(byte opc)
|———Node:qualified_identifier Text: MergCBUS::getMessageSize
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: getMessageSize
|———Node:parameter_list Text: (byte opc)
|————Node:( Text: (
|————Node:parameter_declaration Text: byte opc
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: opc
|————Node:) Text: )
|——Node:compound_statement Text: {
    byte a=opc;
    a=a>>5;
    return (a+1);
}
|———Node:{ Text: {
|———Node:declaration Text: byte a=opc;
|————Node:type_identifier Text: byte
|————Node:init_declarator Text: a=opc
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:identifier Text: opc
|————Node:; Text: ;
|———Node:expression_statement Text: a=a>>5;
|————Node:assignment_expression Text: a=a>>5
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:binary_expression Text: a>>5
|——————Node:identifier Text: a
|——————Node:>> Text: >>
|——————Node:number_literal Text: 5
|————Node:; Text: ;
|———Node:return_statement Text: return (a+1);
|————Node:return Text: return
|————Node:parenthesized_expression Text: (a+1)
|—————Node:( Text: (
|—————Node:binary_expression Text: a+1
|——————Node:identifier Text: a
|——————Node:+ Text: +
|——————Node:number_literal Text: 1
|—————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /**\brief
* Save the parameters to the message buffer.
*/
|—Node:function_definition Text: void MergCBUS::prepareMessageBuff(byte data0,byte data1,byte data2,byte data3,byte data4,byte data5,byte data6,byte data7){
    //clearMsgToSend();
    mergCanData[0]=data0;
    mergCanData[1]=data1;
    mergCanData[2]=data2;
    mergCanData[3]=data3;
    mergCanData[4]=data4;
    mergCanData[5]=data5;
    mergCanData[6]=data6;
    mergCanData[7]=data7;
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: MergCBUS::prepareMessageBuff(byte data0,byte data1,byte data2,byte data3,byte data4,byte data5,byte data6,byte data7)
|———Node:qualified_identifier Text: MergCBUS::prepareMessageBuff
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: prepareMessageBuff
|———Node:parameter_list Text: (byte data0,byte data1,byte data2,byte data3,byte data4,byte data5,byte data6,byte data7)
|————Node:( Text: (
|————Node:parameter_declaration Text: byte data0
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: data0
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte data1
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: data1
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte data2
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: data2
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte data3
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: data3
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte data4
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: data4
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte data5
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: data5
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte data6
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: data6
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte data7
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: data7
|————Node:) Text: )
|——Node:compound_statement Text: {
    //clearMsgToSend();
    mergCanData[0]=data0;
    mergCanData[1]=data1;
    mergCanData[2]=data2;
    mergCanData[3]=data3;
    mergCanData[4]=data4;
    mergCanData[5]=data5;
    mergCanData[6]=data6;
    mergCanData[7]=data7;
}
|———Node:{ Text: {
|———Node:comment Text: //clearMsgToSend();
|———Node:expression_statement Text: mergCanData[0]=data0;
|————Node:assignment_expression Text: mergCanData[0]=data0
|—————Node:subscript_expression Text: mergCanData[0]
|——————Node:identifier Text: mergCanData
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:identifier Text: data0
|————Node:; Text: ;
|———Node:expression_statement Text: mergCanData[1]=data1;
|————Node:assignment_expression Text: mergCanData[1]=data1
|—————Node:subscript_expression Text: mergCanData[1]
|——————Node:identifier Text: mergCanData
|——————Node:subscript_argument_list Text: [1]
|———————Node:[ Text: [
|———————Node:number_literal Text: 1
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:identifier Text: data1
|————Node:; Text: ;
|———Node:expression_statement Text: mergCanData[2]=data2;
|————Node:assignment_expression Text: mergCanData[2]=data2
|—————Node:subscript_expression Text: mergCanData[2]
|——————Node:identifier Text: mergCanData
|——————Node:subscript_argument_list Text: [2]
|———————Node:[ Text: [
|———————Node:number_literal Text: 2
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:identifier Text: data2
|————Node:; Text: ;
|———Node:expression_statement Text: mergCanData[3]=data3;
|————Node:assignment_expression Text: mergCanData[3]=data3
|—————Node:subscript_expression Text: mergCanData[3]
|——————Node:identifier Text: mergCanData
|——————Node:subscript_argument_list Text: [3]
|———————Node:[ Text: [
|———————Node:number_literal Text: 3
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:identifier Text: data3
|————Node:; Text: ;
|———Node:expression_statement Text: mergCanData[4]=data4;
|————Node:assignment_expression Text: mergCanData[4]=data4
|—————Node:subscript_expression Text: mergCanData[4]
|——————Node:identifier Text: mergCanData
|——————Node:subscript_argument_list Text: [4]
|———————Node:[ Text: [
|———————Node:number_literal Text: 4
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:identifier Text: data4
|————Node:; Text: ;
|———Node:expression_statement Text: mergCanData[5]=data5;
|————Node:assignment_expression Text: mergCanData[5]=data5
|—————Node:subscript_expression Text: mergCanData[5]
|——————Node:identifier Text: mergCanData
|——————Node:subscript_argument_list Text: [5]
|———————Node:[ Text: [
|———————Node:number_literal Text: 5
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:identifier Text: data5
|————Node:; Text: ;
|———Node:expression_statement Text: mergCanData[6]=data6;
|————Node:assignment_expression Text: mergCanData[6]=data6
|—————Node:subscript_expression Text: mergCanData[6]
|——————Node:identifier Text: mergCanData
|——————Node:subscript_argument_list Text: [6]
|———————Node:[ Text: [
|———————Node:number_literal Text: 6
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:identifier Text: data6
|————Node:; Text: ;
|———Node:expression_statement Text: mergCanData[7]=data7;
|————Node:assignment_expression Text: mergCanData[7]=data7
|—————Node:subscript_expression Text: mergCanData[7]
|——————Node:identifier Text: mergCanData
|——————Node:subscript_argument_list Text: [7]
|———————Node:[ Text: [
|———————Node:number_literal Text: 7
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:identifier Text: data7
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /**\brief
* Prepare the general messages by opc. If the opc is unknow it does nothing.
*/
|—Node:function_definition Text: void MergCBUS::prepareMessage(byte opc){

    //clearMsgToSend();
    switch (opc){
    case OPC_PNN:
        prepareMessageBuff(OPC_PNN,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),
                            nodeId.getManufacturerId(),nodeId.getModuleId(),nodeId.getFlags());

        break;
    case OPC_NAME:
        prepareMessageBuff(OPC_NAME,nodeId.getNodeName()[0],nodeId.getNodeName()[1],
                            nodeId.getNodeName()[2],nodeId.getNodeName()[3],
                            nodeId.getNodeName()[4],nodeId.getNodeName()[5],
                            nodeId.getNodeName()[6]);

        break;
    case OPC_PARAMS:
        prepareMessageBuff(OPC_PARAMS,nodeId.getManufacturerId(),
                           nodeId.getMinCodeVersion(),nodeId.getModuleId(),
                           nodeId.getSuportedEvents(),nodeId.getSuportedEventsVariables(),
                           nodeId.getSuportedNodeVariables(),nodeId.getMaxCodeVersion());

        break;
    case OPC_RQNN:
        prepareMessageBuff(OPC_RQNN,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()));

        break;
    case OPC_NNACK:
        prepareMessageBuff(OPC_NNACK,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()));

        break;

    case OPC_NNREL:
        prepareMessageBuff(OPC_NNREL,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()));

        break;
    case OPC_EVNLF:
        prepareMessageBuff(OPC_EVNLF,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),(nodeId.getSuportedEvents()-memory.getNumEvents()));

        break;
    case OPC_NUMEV:
        prepareMessageBuff(OPC_NUMEV,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),memory.getNumEvents());

        break;
    case OPC_WRACK:
        prepareMessageBuff(OPC_WRACK,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()));

        break;
    }
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: MergCBUS::prepareMessage(byte opc)
|———Node:qualified_identifier Text: MergCBUS::prepareMessage
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: prepareMessage
|———Node:parameter_list Text: (byte opc)
|————Node:( Text: (
|————Node:parameter_declaration Text: byte opc
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: opc
|————Node:) Text: )
|——Node:compound_statement Text: {

    //clearMsgToSend();
    switch (opc){
    case OPC_PNN:
        prepareMessageBuff(OPC_PNN,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),
                            nodeId.getManufacturerId(),nodeId.getModuleId(),nodeId.getFlags());

        break;
    case OPC_NAME:
        prepareMessageBuff(OPC_NAME,nodeId.getNodeName()[0],nodeId.getNodeName()[1],
                            nodeId.getNodeName()[2],nodeId.getNodeName()[3],
                            nodeId.getNodeName()[4],nodeId.getNodeName()[5],
                            nodeId.getNodeName()[6]);

        break;
    case OPC_PARAMS:
        prepareMessageBuff(OPC_PARAMS,nodeId.getManufacturerId(),
                           nodeId.getMinCodeVersion(),nodeId.getModuleId(),
                           nodeId.getSuportedEvents(),nodeId.getSuportedEventsVariables(),
                           nodeId.getSuportedNodeVariables(),nodeId.getMaxCodeVersion());

        break;
    case OPC_RQNN:
        prepareMessageBuff(OPC_RQNN,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()));

        break;
    case OPC_NNACK:
        prepareMessageBuff(OPC_NNACK,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()));

        break;

    case OPC_NNREL:
        prepareMessageBuff(OPC_NNREL,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()));

        break;
    case OPC_EVNLF:
        prepareMessageBuff(OPC_EVNLF,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),(nodeId.getSuportedEvents()-memory.getNumEvents()));

        break;
    case OPC_NUMEV:
        prepareMessageBuff(OPC_NUMEV,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),memory.getNumEvents());

        break;
    case OPC_WRACK:
        prepareMessageBuff(OPC_WRACK,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()));

        break;
    }
}
|———Node:{ Text: {
|———Node:comment Text: //clearMsgToSend();
|———Node:switch_statement Text: switch (opc){
    case OPC_PNN:
        prepareMessageBuff(OPC_PNN,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),
                            nodeId.getManufacturerId(),nodeId.getModuleId(),nodeId.getFlags());

        break;
    case OPC_NAME:
        prepareMessageBuff(OPC_NAME,nodeId.getNodeName()[0],nodeId.getNodeName()[1],
                            nodeId.getNodeName()[2],nodeId.getNodeName()[3],
                            nodeId.getNodeName()[4],nodeId.getNodeName()[5],
                            nodeId.getNodeName()[6]);

        break;
    case OPC_PARAMS:
        prepareMessageBuff(OPC_PARAMS,nodeId.getManufacturerId(),
                           nodeId.getMinCodeVersion(),nodeId.getModuleId(),
                           nodeId.getSuportedEvents(),nodeId.getSuportedEventsVariables(),
                           nodeId.getSuportedNodeVariables(),nodeId.getMaxCodeVersion());

        break;
    case OPC_RQNN:
        prepareMessageBuff(OPC_RQNN,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()));

        break;
    case OPC_NNACK:
        prepareMessageBuff(OPC_NNACK,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()));

        break;

    case OPC_NNREL:
        prepareMessageBuff(OPC_NNREL,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()));

        break;
    case OPC_EVNLF:
        prepareMessageBuff(OPC_EVNLF,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),(nodeId.getSuportedEvents()-memory.getNumEvents()));

        break;
    case OPC_NUMEV:
        prepareMessageBuff(OPC_NUMEV,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),memory.getNumEvents());

        break;
    case OPC_WRACK:
        prepareMessageBuff(OPC_WRACK,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()));

        break;
    }
|————Node:switch Text: switch
|————Node:condition_clause Text: (opc)
|—————Node:( Text: (
|—————Node:identifier Text: opc
|—————Node:) Text: )
|————Node:compound_statement Text: {
    case OPC_PNN:
        prepareMessageBuff(OPC_PNN,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),
                            nodeId.getManufacturerId(),nodeId.getModuleId(),nodeId.getFlags());

        break;
    case OPC_NAME:
        prepareMessageBuff(OPC_NAME,nodeId.getNodeName()[0],nodeId.getNodeName()[1],
                            nodeId.getNodeName()[2],nodeId.getNodeName()[3],
                            nodeId.getNodeName()[4],nodeId.getNodeName()[5],
                            nodeId.getNodeName()[6]);

        break;
    case OPC_PARAMS:
        prepareMessageBuff(OPC_PARAMS,nodeId.getManufacturerId(),
                           nodeId.getMinCodeVersion(),nodeId.getModuleId(),
                           nodeId.getSuportedEvents(),nodeId.getSuportedEventsVariables(),
                           nodeId.getSuportedNodeVariables(),nodeId.getMaxCodeVersion());

        break;
    case OPC_RQNN:
        prepareMessageBuff(OPC_RQNN,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()));

        break;
    case OPC_NNACK:
        prepareMessageBuff(OPC_NNACK,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()));

        break;

    case OPC_NNREL:
        prepareMessageBuff(OPC_NNREL,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()));

        break;
    case OPC_EVNLF:
        prepareMessageBuff(OPC_EVNLF,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),(nodeId.getSuportedEvents()-memory.getNumEvents()));

        break;
    case OPC_NUMEV:
        prepareMessageBuff(OPC_NUMEV,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),memory.getNumEvents());

        break;
    case OPC_WRACK:
        prepareMessageBuff(OPC_WRACK,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()));

        break;
    }
|—————Node:{ Text: {
|—————Node:case_statement Text: case OPC_PNN:
        prepareMessageBuff(OPC_PNN,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),
                            nodeId.getManufacturerId(),nodeId.getModuleId(),nodeId.getFlags());

        break;
|——————Node:case Text: case
|——————Node:identifier Text: OPC_PNN
|——————Node:: Text: :
|——————Node:expression_statement Text: prepareMessageBuff(OPC_PNN,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),
                            nodeId.getManufacturerId(),nodeId.getModuleId(),nodeId.getFlags());
|———————Node:call_expression Text: prepareMessageBuff(OPC_PNN,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),
                            nodeId.getManufacturerId(),nodeId.getModuleId(),nodeId.getFlags())
|————————Node:identifier Text: prepareMessageBuff
|————————Node:argument_list Text: (OPC_PNN,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),
                            nodeId.getManufacturerId(),nodeId.getModuleId(),nodeId.getFlags())
|—————————Node:( Text: (
|—————————Node:identifier Text: OPC_PNN
|—————————Node:, Text: ,
|—————————Node:call_expression Text: highByte(nodeId.getNodeNumber())
|——————————Node:identifier Text: highByte
|——————————Node:argument_list Text: (nodeId.getNodeNumber())
|———————————Node:( Text: (
|———————————Node:call_expression Text: nodeId.getNodeNumber()
|————————————Node:field_expression Text: nodeId.getNodeNumber
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNodeNumber
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: lowByte(nodeId.getNodeNumber())
|——————————Node:identifier Text: lowByte
|——————————Node:argument_list Text: (nodeId.getNodeNumber())
|———————————Node:( Text: (
|———————————Node:call_expression Text: nodeId.getNodeNumber()
|————————————Node:field_expression Text: nodeId.getNodeNumber
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNodeNumber
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: nodeId.getManufacturerId()
|——————————Node:field_expression Text: nodeId.getManufacturerId
|———————————Node:identifier Text: nodeId
|———————————Node:. Text: .
|———————————Node:field_identifier Text: getManufacturerId
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: nodeId.getModuleId()
|——————————Node:field_expression Text: nodeId.getModuleId
|———————————Node:identifier Text: nodeId
|———————————Node:. Text: .
|———————————Node:field_identifier Text: getModuleId
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: nodeId.getFlags()
|——————————Node:field_expression Text: nodeId.getFlags
|———————————Node:identifier Text: nodeId
|———————————Node:. Text: .
|———————————Node:field_identifier Text: getFlags
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case OPC_NAME:
        prepareMessageBuff(OPC_NAME,nodeId.getNodeName()[0],nodeId.getNodeName()[1],
                            nodeId.getNodeName()[2],nodeId.getNodeName()[3],
                            nodeId.getNodeName()[4],nodeId.getNodeName()[5],
                            nodeId.getNodeName()[6]);

        break;
|——————Node:case Text: case
|——————Node:identifier Text: OPC_NAME
|——————Node:: Text: :
|——————Node:expression_statement Text: prepareMessageBuff(OPC_NAME,nodeId.getNodeName()[0],nodeId.getNodeName()[1],
                            nodeId.getNodeName()[2],nodeId.getNodeName()[3],
                            nodeId.getNodeName()[4],nodeId.getNodeName()[5],
                            nodeId.getNodeName()[6]);
|———————Node:call_expression Text: prepareMessageBuff(OPC_NAME,nodeId.getNodeName()[0],nodeId.getNodeName()[1],
                            nodeId.getNodeName()[2],nodeId.getNodeName()[3],
                            nodeId.getNodeName()[4],nodeId.getNodeName()[5],
                            nodeId.getNodeName()[6])
|————————Node:identifier Text: prepareMessageBuff
|————————Node:argument_list Text: (OPC_NAME,nodeId.getNodeName()[0],nodeId.getNodeName()[1],
                            nodeId.getNodeName()[2],nodeId.getNodeName()[3],
                            nodeId.getNodeName()[4],nodeId.getNodeName()[5],
                            nodeId.getNodeName()[6])
|—————————Node:( Text: (
|—————————Node:identifier Text: OPC_NAME
|—————————Node:, Text: ,
|—————————Node:subscript_expression Text: nodeId.getNodeName()[0]
|——————————Node:call_expression Text: nodeId.getNodeName()
|———————————Node:field_expression Text: nodeId.getNodeName
|————————————Node:identifier Text: nodeId
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getNodeName
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:subscript_argument_list Text: [0]
|———————————Node:[ Text: [
|———————————Node:number_literal Text: 0
|———————————Node:] Text: ]
|—————————Node:, Text: ,
|—————————Node:subscript_expression Text: nodeId.getNodeName()[1]
|——————————Node:call_expression Text: nodeId.getNodeName()
|———————————Node:field_expression Text: nodeId.getNodeName
|————————————Node:identifier Text: nodeId
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getNodeName
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:subscript_argument_list Text: [1]
|———————————Node:[ Text: [
|———————————Node:number_literal Text: 1
|———————————Node:] Text: ]
|—————————Node:, Text: ,
|—————————Node:subscript_expression Text: nodeId.getNodeName()[2]
|——————————Node:call_expression Text: nodeId.getNodeName()
|———————————Node:field_expression Text: nodeId.getNodeName
|————————————Node:identifier Text: nodeId
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getNodeName
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:subscript_argument_list Text: [2]
|———————————Node:[ Text: [
|———————————Node:number_literal Text: 2
|———————————Node:] Text: ]
|—————————Node:, Text: ,
|—————————Node:subscript_expression Text: nodeId.getNodeName()[3]
|——————————Node:call_expression Text: nodeId.getNodeName()
|———————————Node:field_expression Text: nodeId.getNodeName
|————————————Node:identifier Text: nodeId
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getNodeName
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:subscript_argument_list Text: [3]
|———————————Node:[ Text: [
|———————————Node:number_literal Text: 3
|———————————Node:] Text: ]
|—————————Node:, Text: ,
|—————————Node:subscript_expression Text: nodeId.getNodeName()[4]
|——————————Node:call_expression Text: nodeId.getNodeName()
|———————————Node:field_expression Text: nodeId.getNodeName
|————————————Node:identifier Text: nodeId
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getNodeName
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:subscript_argument_list Text: [4]
|———————————Node:[ Text: [
|———————————Node:number_literal Text: 4
|———————————Node:] Text: ]
|—————————Node:, Text: ,
|—————————Node:subscript_expression Text: nodeId.getNodeName()[5]
|——————————Node:call_expression Text: nodeId.getNodeName()
|———————————Node:field_expression Text: nodeId.getNodeName
|————————————Node:identifier Text: nodeId
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getNodeName
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:subscript_argument_list Text: [5]
|———————————Node:[ Text: [
|———————————Node:number_literal Text: 5
|———————————Node:] Text: ]
|—————————Node:, Text: ,
|—————————Node:subscript_expression Text: nodeId.getNodeName()[6]
|——————————Node:call_expression Text: nodeId.getNodeName()
|———————————Node:field_expression Text: nodeId.getNodeName
|————————————Node:identifier Text: nodeId
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getNodeName
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:subscript_argument_list Text: [6]
|———————————Node:[ Text: [
|———————————Node:number_literal Text: 6
|———————————Node:] Text: ]
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case OPC_PARAMS:
        prepareMessageBuff(OPC_PARAMS,nodeId.getManufacturerId(),
                           nodeId.getMinCodeVersion(),nodeId.getModuleId(),
                           nodeId.getSuportedEvents(),nodeId.getSuportedEventsVariables(),
                           nodeId.getSuportedNodeVariables(),nodeId.getMaxCodeVersion());

        break;
|——————Node:case Text: case
|——————Node:identifier Text: OPC_PARAMS
|——————Node:: Text: :
|——————Node:expression_statement Text: prepareMessageBuff(OPC_PARAMS,nodeId.getManufacturerId(),
                           nodeId.getMinCodeVersion(),nodeId.getModuleId(),
                           nodeId.getSuportedEvents(),nodeId.getSuportedEventsVariables(),
                           nodeId.getSuportedNodeVariables(),nodeId.getMaxCodeVersion());
|———————Node:call_expression Text: prepareMessageBuff(OPC_PARAMS,nodeId.getManufacturerId(),
                           nodeId.getMinCodeVersion(),nodeId.getModuleId(),
                           nodeId.getSuportedEvents(),nodeId.getSuportedEventsVariables(),
                           nodeId.getSuportedNodeVariables(),nodeId.getMaxCodeVersion())
|————————Node:identifier Text: prepareMessageBuff
|————————Node:argument_list Text: (OPC_PARAMS,nodeId.getManufacturerId(),
                           nodeId.getMinCodeVersion(),nodeId.getModuleId(),
                           nodeId.getSuportedEvents(),nodeId.getSuportedEventsVariables(),
                           nodeId.getSuportedNodeVariables(),nodeId.getMaxCodeVersion())
|—————————Node:( Text: (
|—————————Node:identifier Text: OPC_PARAMS
|—————————Node:, Text: ,
|—————————Node:call_expression Text: nodeId.getManufacturerId()
|——————————Node:field_expression Text: nodeId.getManufacturerId
|———————————Node:identifier Text: nodeId
|———————————Node:. Text: .
|———————————Node:field_identifier Text: getManufacturerId
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: nodeId.getMinCodeVersion()
|——————————Node:field_expression Text: nodeId.getMinCodeVersion
|———————————Node:identifier Text: nodeId
|———————————Node:. Text: .
|———————————Node:field_identifier Text: getMinCodeVersion
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: nodeId.getModuleId()
|——————————Node:field_expression Text: nodeId.getModuleId
|———————————Node:identifier Text: nodeId
|———————————Node:. Text: .
|———————————Node:field_identifier Text: getModuleId
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: nodeId.getSuportedEvents()
|——————————Node:field_expression Text: nodeId.getSuportedEvents
|———————————Node:identifier Text: nodeId
|———————————Node:. Text: .
|———————————Node:field_identifier Text: getSuportedEvents
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: nodeId.getSuportedEventsVariables()
|——————————Node:field_expression Text: nodeId.getSuportedEventsVariables
|———————————Node:identifier Text: nodeId
|———————————Node:. Text: .
|———————————Node:field_identifier Text: getSuportedEventsVariables
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: nodeId.getSuportedNodeVariables()
|——————————Node:field_expression Text: nodeId.getSuportedNodeVariables
|———————————Node:identifier Text: nodeId
|———————————Node:. Text: .
|———————————Node:field_identifier Text: getSuportedNodeVariables
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: nodeId.getMaxCodeVersion()
|——————————Node:field_expression Text: nodeId.getMaxCodeVersion
|———————————Node:identifier Text: nodeId
|———————————Node:. Text: .
|———————————Node:field_identifier Text: getMaxCodeVersion
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case OPC_RQNN:
        prepareMessageBuff(OPC_RQNN,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()));

        break;
|——————Node:case Text: case
|——————Node:identifier Text: OPC_RQNN
|——————Node:: Text: :
|——————Node:expression_statement Text: prepareMessageBuff(OPC_RQNN,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()));
|———————Node:call_expression Text: prepareMessageBuff(OPC_RQNN,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()))
|————————Node:identifier Text: prepareMessageBuff
|————————Node:argument_list Text: (OPC_RQNN,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()))
|—————————Node:( Text: (
|—————————Node:identifier Text: OPC_RQNN
|—————————Node:, Text: ,
|—————————Node:call_expression Text: highByte(nodeId.getNodeNumber())
|——————————Node:identifier Text: highByte
|——————————Node:argument_list Text: (nodeId.getNodeNumber())
|———————————Node:( Text: (
|———————————Node:call_expression Text: nodeId.getNodeNumber()
|————————————Node:field_expression Text: nodeId.getNodeNumber
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNodeNumber
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: lowByte(nodeId.getNodeNumber())
|——————————Node:identifier Text: lowByte
|——————————Node:argument_list Text: (nodeId.getNodeNumber())
|———————————Node:( Text: (
|———————————Node:call_expression Text: nodeId.getNodeNumber()
|————————————Node:field_expression Text: nodeId.getNodeNumber
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNodeNumber
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case OPC_NNACK:
        prepareMessageBuff(OPC_NNACK,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()));

        break;
|——————Node:case Text: case
|——————Node:identifier Text: OPC_NNACK
|——————Node:: Text: :
|——————Node:expression_statement Text: prepareMessageBuff(OPC_NNACK,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()));
|———————Node:call_expression Text: prepareMessageBuff(OPC_NNACK,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()))
|————————Node:identifier Text: prepareMessageBuff
|————————Node:argument_list Text: (OPC_NNACK,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()))
|—————————Node:( Text: (
|—————————Node:identifier Text: OPC_NNACK
|—————————Node:, Text: ,
|—————————Node:call_expression Text: highByte(nodeId.getNodeNumber())
|——————————Node:identifier Text: highByte
|——————————Node:argument_list Text: (nodeId.getNodeNumber())
|———————————Node:( Text: (
|———————————Node:call_expression Text: nodeId.getNodeNumber()
|————————————Node:field_expression Text: nodeId.getNodeNumber
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNodeNumber
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: lowByte(nodeId.getNodeNumber())
|——————————Node:identifier Text: lowByte
|——————————Node:argument_list Text: (nodeId.getNodeNumber())
|———————————Node:( Text: (
|———————————Node:call_expression Text: nodeId.getNodeNumber()
|————————————Node:field_expression Text: nodeId.getNodeNumber
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNodeNumber
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case OPC_NNREL:
        prepareMessageBuff(OPC_NNREL,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()));

        break;
|——————Node:case Text: case
|——————Node:identifier Text: OPC_NNREL
|——————Node:: Text: :
|——————Node:expression_statement Text: prepareMessageBuff(OPC_NNREL,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()));
|———————Node:call_expression Text: prepareMessageBuff(OPC_NNREL,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()))
|————————Node:identifier Text: prepareMessageBuff
|————————Node:argument_list Text: (OPC_NNREL,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()))
|—————————Node:( Text: (
|—————————Node:identifier Text: OPC_NNREL
|—————————Node:, Text: ,
|—————————Node:call_expression Text: highByte(nodeId.getNodeNumber())
|——————————Node:identifier Text: highByte
|——————————Node:argument_list Text: (nodeId.getNodeNumber())
|———————————Node:( Text: (
|———————————Node:call_expression Text: nodeId.getNodeNumber()
|————————————Node:field_expression Text: nodeId.getNodeNumber
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNodeNumber
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: lowByte(nodeId.getNodeNumber())
|——————————Node:identifier Text: lowByte
|——————————Node:argument_list Text: (nodeId.getNodeNumber())
|———————————Node:( Text: (
|———————————Node:call_expression Text: nodeId.getNodeNumber()
|————————————Node:field_expression Text: nodeId.getNodeNumber
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNodeNumber
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case OPC_EVNLF:
        prepareMessageBuff(OPC_EVNLF,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),(nodeId.getSuportedEvents()-memory.getNumEvents()));

        break;
|——————Node:case Text: case
|——————Node:identifier Text: OPC_EVNLF
|——————Node:: Text: :
|——————Node:expression_statement Text: prepareMessageBuff(OPC_EVNLF,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),(nodeId.getSuportedEvents()-memory.getNumEvents()));
|———————Node:call_expression Text: prepareMessageBuff(OPC_EVNLF,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),(nodeId.getSuportedEvents()-memory.getNumEvents()))
|————————Node:identifier Text: prepareMessageBuff
|————————Node:argument_list Text: (OPC_EVNLF,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),(nodeId.getSuportedEvents()-memory.getNumEvents()))
|—————————Node:( Text: (
|—————————Node:identifier Text: OPC_EVNLF
|—————————Node:, Text: ,
|—————————Node:call_expression Text: highByte(nodeId.getNodeNumber())
|——————————Node:identifier Text: highByte
|——————————Node:argument_list Text: (nodeId.getNodeNumber())
|———————————Node:( Text: (
|———————————Node:call_expression Text: nodeId.getNodeNumber()
|————————————Node:field_expression Text: nodeId.getNodeNumber
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNodeNumber
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: lowByte(nodeId.getNodeNumber())
|——————————Node:identifier Text: lowByte
|——————————Node:argument_list Text: (nodeId.getNodeNumber())
|———————————Node:( Text: (
|———————————Node:call_expression Text: nodeId.getNodeNumber()
|————————————Node:field_expression Text: nodeId.getNodeNumber
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNodeNumber
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:parenthesized_expression Text: (nodeId.getSuportedEvents()-memory.getNumEvents())
|——————————Node:( Text: (
|——————————Node:binary_expression Text: nodeId.getSuportedEvents()-memory.getNumEvents()
|———————————Node:call_expression Text: nodeId.getSuportedEvents()
|————————————Node:field_expression Text: nodeId.getSuportedEvents
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getSuportedEvents
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:- Text: -
|———————————Node:call_expression Text: memory.getNumEvents()
|————————————Node:field_expression Text: memory.getNumEvents
|—————————————Node:identifier Text: memory
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNumEvents
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|——————————Node:) Text: )
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case OPC_NUMEV:
        prepareMessageBuff(OPC_NUMEV,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),memory.getNumEvents());

        break;
|——————Node:case Text: case
|——————Node:identifier Text: OPC_NUMEV
|——————Node:: Text: :
|——————Node:expression_statement Text: prepareMessageBuff(OPC_NUMEV,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),memory.getNumEvents());
|———————Node:call_expression Text: prepareMessageBuff(OPC_NUMEV,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),memory.getNumEvents())
|————————Node:identifier Text: prepareMessageBuff
|————————Node:argument_list Text: (OPC_NUMEV,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),memory.getNumEvents())
|—————————Node:( Text: (
|—————————Node:identifier Text: OPC_NUMEV
|—————————Node:, Text: ,
|—————————Node:call_expression Text: highByte(nodeId.getNodeNumber())
|——————————Node:identifier Text: highByte
|——————————Node:argument_list Text: (nodeId.getNodeNumber())
|———————————Node:( Text: (
|———————————Node:call_expression Text: nodeId.getNodeNumber()
|————————————Node:field_expression Text: nodeId.getNodeNumber
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNodeNumber
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: lowByte(nodeId.getNodeNumber())
|——————————Node:identifier Text: lowByte
|——————————Node:argument_list Text: (nodeId.getNodeNumber())
|———————————Node:( Text: (
|———————————Node:call_expression Text: nodeId.getNodeNumber()
|————————————Node:field_expression Text: nodeId.getNodeNumber
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNodeNumber
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: memory.getNumEvents()
|——————————Node:field_expression Text: memory.getNumEvents
|———————————Node:identifier Text: memory
|———————————Node:. Text: .
|———————————Node:field_identifier Text: getNumEvents
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case OPC_WRACK:
        prepareMessageBuff(OPC_WRACK,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()));

        break;
|——————Node:case Text: case
|——————Node:identifier Text: OPC_WRACK
|——————Node:: Text: :
|——————Node:expression_statement Text: prepareMessageBuff(OPC_WRACK,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()));
|———————Node:call_expression Text: prepareMessageBuff(OPC_WRACK,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()))
|————————Node:identifier Text: prepareMessageBuff
|————————Node:argument_list Text: (OPC_WRACK,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()))
|—————————Node:( Text: (
|—————————Node:identifier Text: OPC_WRACK
|—————————Node:, Text: ,
|—————————Node:call_expression Text: highByte(nodeId.getNodeNumber())
|——————————Node:identifier Text: highByte
|——————————Node:argument_list Text: (nodeId.getNodeNumber())
|———————————Node:( Text: (
|———————————Node:call_expression Text: nodeId.getNodeNumber()
|————————————Node:field_expression Text: nodeId.getNodeNumber
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNodeNumber
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: lowByte(nodeId.getNodeNumber())
|——————————Node:identifier Text: lowByte
|——————————Node:argument_list Text: (nodeId.getNodeNumber())
|———————————Node:( Text: (
|———————————Node:call_expression Text: nodeId.getNodeNumber()
|————————————Node:field_expression Text: nodeId.getNodeNumber
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNodeNumber
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:} Text: }
|———Node:} Text: }
|—Node:comment Text: /**\brief
* Send the error message with the code.
* @param code can be:
* 1 Command Not Supported - see note 1.
* 2 Not In Learn Mode
* 3 Not in Setup Mode - see note 1
* 4 Too Many Events
* 5 Reserved
* 6 Invalid Event variable index
* 7 Invalid Event
* 8 Reserved - see note 2
* 9 Invalid Parameter Index
* 10 Invalid Node Variable Index
* 11 Invalid Event Variable Value
* 12 Invalid Node Variable Value

* Note 1: Accessory modules do not return this error
* Note 2: Currently used by code that processes OPC REVAL 0x9C but this code
* should be updated to use codes 6 & 7.
*/
|—Node:function_definition Text: void MergCBUS::sendERRMessage(byte code){
    prepareMessageBuff(OPC_CMDERR,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),code);
    sendCanMessage();
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: MergCBUS::sendERRMessage(byte code)
|———Node:qualified_identifier Text: MergCBUS::sendERRMessage
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: sendERRMessage
|———Node:parameter_list Text: (byte code)
|————Node:( Text: (
|————Node:parameter_declaration Text: byte code
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: code
|————Node:) Text: )
|——Node:compound_statement Text: {
    prepareMessageBuff(OPC_CMDERR,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),code);
    sendCanMessage();
}
|———Node:{ Text: {
|———Node:expression_statement Text: prepareMessageBuff(OPC_CMDERR,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),code);
|————Node:call_expression Text: prepareMessageBuff(OPC_CMDERR,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),code)
|—————Node:identifier Text: prepareMessageBuff
|—————Node:argument_list Text: (OPC_CMDERR,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),code)
|——————Node:( Text: (
|——————Node:identifier Text: OPC_CMDERR
|——————Node:, Text: ,
|——————Node:call_expression Text: highByte(nodeId.getNodeNumber())
|———————Node:identifier Text: highByte
|———————Node:argument_list Text: (nodeId.getNodeNumber())
|————————Node:( Text: (
|————————Node:call_expression Text: nodeId.getNodeNumber()
|—————————Node:field_expression Text: nodeId.getNodeNumber
|——————————Node:identifier Text: nodeId
|——————————Node:. Text: .
|——————————Node:field_identifier Text: getNodeNumber
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:, Text: ,
|——————Node:call_expression Text: lowByte(nodeId.getNodeNumber())
|———————Node:identifier Text: lowByte
|———————Node:argument_list Text: (nodeId.getNodeNumber())
|————————Node:( Text: (
|————————Node:call_expression Text: nodeId.getNodeNumber()
|—————————Node:field_expression Text: nodeId.getNodeNumber
|——————————Node:identifier Text: nodeId
|——————————Node:. Text: .
|——————————Node:field_identifier Text: getNodeNumber
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:, Text: ,
|——————Node:identifier Text: code
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: sendCanMessage();
|————Node:call_expression Text: sendCanMessage()
|—————Node:identifier Text: sendCanMessage
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /**\brief
* Check it the received event is a learned event. For the messages ACONs,ACOFs,ASONs,ASOFs.
* Should be called after reading the can bus.
*/
|—Node:function_definition Text: bool MergCBUS::hasThisEvent(){
    //long events
    if (message.isLongEvent()){
             if (memory.getEventIndex(message.getNodeNumber(),message.getEventNumber())<(memory.getMaxNumEvents()+1)){
                return true;
             }
    }
    //short events has to check the device number
    if (message.isShortEvent()){
            if (memory.getEventIndex(0,message.getDeviceNumber())<(memory.getMaxNumEvents()+1)){
                return true;
             }
    }
    return false;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: MergCBUS::hasThisEvent()
|———Node:qualified_identifier Text: MergCBUS::hasThisEvent
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: hasThisEvent
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    //long events
    if (message.isLongEvent()){
             if (memory.getEventIndex(message.getNodeNumber(),message.getEventNumber())<(memory.getMaxNumEvents()+1)){
                return true;
             }
    }
    //short events has to check the device number
    if (message.isShortEvent()){
            if (memory.getEventIndex(0,message.getDeviceNumber())<(memory.getMaxNumEvents()+1)){
                return true;
             }
    }
    return false;
}
|———Node:{ Text: {
|———Node:comment Text: //long events
|———Node:if_statement Text: if (message.isLongEvent()){
             if (memory.getEventIndex(message.getNodeNumber(),message.getEventNumber())<(memory.getMaxNumEvents()+1)){
                return true;
             }
    }
|————Node:if Text: if
|————Node:condition_clause Text: (message.isLongEvent())
|—————Node:( Text: (
|—————Node:call_expression Text: message.isLongEvent()
|——————Node:field_expression Text: message.isLongEvent
|———————Node:identifier Text: message
|———————Node:. Text: .
|———————Node:field_identifier Text: isLongEvent
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
             if (memory.getEventIndex(message.getNodeNumber(),message.getEventNumber())<(memory.getMaxNumEvents()+1)){
                return true;
             }
    }
|—————Node:{ Text: {
|—————Node:if_statement Text: if (memory.getEventIndex(message.getNodeNumber(),message.getEventNumber())<(memory.getMaxNumEvents()+1)){
                return true;
             }
|——————Node:if Text: if
|——————Node:condition_clause Text: (memory.getEventIndex(message.getNodeNumber(),message.getEventNumber())<(memory.getMaxNumEvents()+1))
|———————Node:( Text: (
|———————Node:binary_expression Text: memory.getEventIndex(message.getNodeNumber(),message.getEventNumber())<(memory.getMaxNumEvents()+1)
|————————Node:call_expression Text: memory.getEventIndex(message.getNodeNumber(),message.getEventNumber())
|—————————Node:field_expression Text: memory.getEventIndex
|——————————Node:identifier Text: memory
|——————————Node:. Text: .
|——————————Node:field_identifier Text: getEventIndex
|—————————Node:argument_list Text: (message.getNodeNumber(),message.getEventNumber())
|——————————Node:( Text: (
|——————————Node:call_expression Text: message.getNodeNumber()
|———————————Node:field_expression Text: message.getNodeNumber
|————————————Node:identifier Text: message
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getNodeNumber
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:, Text: ,
|——————————Node:call_expression Text: message.getEventNumber()
|———————————Node:field_expression Text: message.getEventNumber
|————————————Node:identifier Text: message
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getEventNumber
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:< Text: <
|————————Node:parenthesized_expression Text: (memory.getMaxNumEvents()+1)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: memory.getMaxNumEvents()+1
|——————————Node:call_expression Text: memory.getMaxNumEvents()
|———————————Node:field_expression Text: memory.getMaxNumEvents
|————————————Node:identifier Text: memory
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getMaxNumEvents
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:+ Text: +
|——————————Node:number_literal Text: 1
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {
                return true;
             }
|———————Node:{ Text: {
|———————Node:return_statement Text: return true;
|————————Node:return Text: return
|————————Node:true Text: true
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:comment Text: //short events has to check the device number
|———Node:if_statement Text: if (message.isShortEvent()){
            if (memory.getEventIndex(0,message.getDeviceNumber())<(memory.getMaxNumEvents()+1)){
                return true;
             }
    }
|————Node:if Text: if
|————Node:condition_clause Text: (message.isShortEvent())
|—————Node:( Text: (
|—————Node:call_expression Text: message.isShortEvent()
|——————Node:field_expression Text: message.isShortEvent
|———————Node:identifier Text: message
|———————Node:. Text: .
|———————Node:field_identifier Text: isShortEvent
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
            if (memory.getEventIndex(0,message.getDeviceNumber())<(memory.getMaxNumEvents()+1)){
                return true;
             }
    }
|—————Node:{ Text: {
|—————Node:if_statement Text: if (memory.getEventIndex(0,message.getDeviceNumber())<(memory.getMaxNumEvents()+1)){
                return true;
             }
|——————Node:if Text: if
|——————Node:condition_clause Text: (memory.getEventIndex(0,message.getDeviceNumber())<(memory.getMaxNumEvents()+1))
|———————Node:( Text: (
|———————Node:binary_expression Text: memory.getEventIndex(0,message.getDeviceNumber())<(memory.getMaxNumEvents()+1)
|————————Node:call_expression Text: memory.getEventIndex(0,message.getDeviceNumber())
|—————————Node:field_expression Text: memory.getEventIndex
|——————————Node:identifier Text: memory
|——————————Node:. Text: .
|——————————Node:field_identifier Text: getEventIndex
|—————————Node:argument_list Text: (0,message.getDeviceNumber())
|——————————Node:( Text: (
|——————————Node:number_literal Text: 0
|——————————Node:, Text: ,
|——————————Node:call_expression Text: message.getDeviceNumber()
|———————————Node:field_expression Text: message.getDeviceNumber
|————————————Node:identifier Text: message
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getDeviceNumber
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:< Text: <
|————————Node:parenthesized_expression Text: (memory.getMaxNumEvents()+1)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: memory.getMaxNumEvents()+1
|——————————Node:call_expression Text: memory.getMaxNumEvents()
|———————————Node:field_expression Text: memory.getMaxNumEvents
|————————————Node:identifier Text: memory
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getMaxNumEvents
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:+ Text: +
|——————————Node:number_literal Text: 1
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {
                return true;
             }
|———————Node:{ Text: {
|———————Node:return_statement Text: return true;
|————————Node:return Text: return
|————————Node:true Text: true
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:return_statement Text: return false;
|————Node:return Text: return
|————Node:false Text: false
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /**\brief
* Print the message to be sent to serial. Used for debug.
*/
|—Node:function_definition Text: void MergCBUS::printSentMessage(){
    #ifdef DEBUGDEF
        Serial.print("printSentMessage- message sent: ");
    #endif // DEBUGDEF

    for (uint8_t i=0;i<8;i++){
        Serial.print(mergCanData[i],HEX);
        Serial.print(" ");
    }
    #ifdef DEBUGDEF
        Serial.println("");
    #endif // DEBUGDEF


}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: MergCBUS::printSentMessage()
|———Node:qualified_identifier Text: MergCBUS::printSentMessage
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: printSentMessage
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    #ifdef DEBUGDEF
        Serial.print("printSentMessage- message sent: ");
    #endif // DEBUGDEF

    for (uint8_t i=0;i<8;i++){
        Serial.print(mergCanData[i],HEX);
        Serial.print(" ");
    }
    #ifdef DEBUGDEF
        Serial.println("");
    #endif // DEBUGDEF


}
|———Node:{ Text: {
|———Node:preproc_ifdef Text: #ifdef DEBUGDEF
        Serial.print("printSentMessage- message sent: ");
    #endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: DEBUGDEF
|————Node:expression_statement Text: Serial.print("printSentMessage- message sent: ");
|—————Node:call_expression Text: Serial.print("printSentMessage- message sent: ")
|——————Node:field_expression Text: Serial.print
|———————Node:identifier Text: Serial
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("printSentMessage- message sent: ")
|———————Node:( Text: (
|———————Node:string_literal Text: "printSentMessage- message sent: "
|————————Node:" Text: "
|————————Node:string_content Text: printSentMessage- message sent: 
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:comment Text: // DEBUGDEF
|———Node:for_statement Text: for (uint8_t i=0;i<8;i++){
        Serial.print(mergCanData[i],HEX);
        Serial.print(" ");
    }
|————Node:for Text: for
|————Node:( Text: (
|————Node:declaration Text: uint8_t i=0;
|—————Node:primitive_type Text: uint8_t
|—————Node:init_declarator Text: i=0
|——————Node:identifier Text: i
|——————Node:= Text: =
|——————Node:number_literal Text: 0
|—————Node:; Text: ;
|————Node:binary_expression Text: i<8
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:number_literal Text: 8
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
        Serial.print(mergCanData[i],HEX);
        Serial.print(" ");
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: Serial.print(mergCanData[i],HEX);
|——————Node:call_expression Text: Serial.print(mergCanData[i],HEX)
|———————Node:field_expression Text: Serial.print
|————————Node:identifier Text: Serial
|————————Node:. Text: .
|————————Node:field_identifier Text: print
|———————Node:argument_list Text: (mergCanData[i],HEX)
|————————Node:( Text: (
|————————Node:subscript_expression Text: mergCanData[i]
|—————————Node:identifier Text: mergCanData
|—————————Node:subscript_argument_list Text: [i]
|——————————Node:[ Text: [
|——————————Node:identifier Text: i
|——————————Node:] Text: ]
|————————Node:, Text: ,
|————————Node:identifier Text: HEX
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: Serial.print(" ");
|——————Node:call_expression Text: Serial.print(" ")
|———————Node:field_expression Text: Serial.print
|————————Node:identifier Text: Serial
|————————Node:. Text: .
|————————Node:field_identifier Text: print
|———————Node:argument_list Text: (" ")
|————————Node:( Text: (
|————————Node:string_literal Text: " "
|—————————Node:" Text: "
|—————————Node:string_content Text:  
|—————————Node:" Text: "
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:preproc_ifdef Text: #ifdef DEBUGDEF
        Serial.println("");
    #endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: DEBUGDEF
|————Node:expression_statement Text: Serial.println("");
|—————Node:call_expression Text: Serial.println("")
|——————Node:field_expression Text: Serial.println
|———————Node:identifier Text: Serial
|———————Node:. Text: .
|———————Node:field_identifier Text: println
|——————Node:argument_list Text: ("")
|———————Node:( Text: (
|———————Node:string_literal Text: ""
|————————Node:" Text: "
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:comment Text: // DEBUGDEF
|———Node:} Text: }
|—Node:comment Text: /**\brief
* Print the received message buffer to serial. Used for debug.
*/
|—Node:function_definition Text: void MergCBUS::printReceivedMessage(){

    if (message.getCanMessageSize()<=0){
        return;
    }
    #ifdef DEBUGDEF
        Serial.print("printReceivedMessage- message received: ");
    #endif // DEBUGDEF

    for (uint8_t i=0;i<8;i++){
        Serial.print(message.getByte(i),HEX);
        Serial.print(" ");
    }
    #ifdef DEBUGDEF
        Serial.println("");
    #endif // DEBUGDEF

}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: MergCBUS::printReceivedMessage()
|———Node:qualified_identifier Text: MergCBUS::printReceivedMessage
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: printReceivedMessage
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {

    if (message.getCanMessageSize()<=0){
        return;
    }
    #ifdef DEBUGDEF
        Serial.print("printReceivedMessage- message received: ");
    #endif // DEBUGDEF

    for (uint8_t i=0;i<8;i++){
        Serial.print(message.getByte(i),HEX);
        Serial.print(" ");
    }
    #ifdef DEBUGDEF
        Serial.println("");
    #endif // DEBUGDEF

}
|———Node:{ Text: {
|———Node:if_statement Text: if (message.getCanMessageSize()<=0){
        return;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (message.getCanMessageSize()<=0)
|—————Node:( Text: (
|—————Node:binary_expression Text: message.getCanMessageSize()<=0
|——————Node:call_expression Text: message.getCanMessageSize()
|———————Node:field_expression Text: message.getCanMessageSize
|————————Node:identifier Text: message
|————————Node:. Text: .
|————————Node:field_identifier Text: getCanMessageSize
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:<= Text: <=
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {
        return;
    }
|—————Node:{ Text: {
|—————Node:return_statement Text: return;
|——————Node:return Text: return
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:preproc_ifdef Text: #ifdef DEBUGDEF
        Serial.print("printReceivedMessage- message received: ");
    #endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: DEBUGDEF
|————Node:expression_statement Text: Serial.print("printReceivedMessage- message received: ");
|—————Node:call_expression Text: Serial.print("printReceivedMessage- message received: ")
|——————Node:field_expression Text: Serial.print
|———————Node:identifier Text: Serial
|———————Node:. Text: .
|———————Node:field_identifier Text: print
|——————Node:argument_list Text: ("printReceivedMessage- message received: ")
|———————Node:( Text: (
|———————Node:string_literal Text: "printReceivedMessage- message received: "
|————————Node:" Text: "
|————————Node:string_content Text: printReceivedMessage- message received: 
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:comment Text: // DEBUGDEF
|———Node:for_statement Text: for (uint8_t i=0;i<8;i++){
        Serial.print(message.getByte(i),HEX);
        Serial.print(" ");
    }
|————Node:for Text: for
|————Node:( Text: (
|————Node:declaration Text: uint8_t i=0;
|—————Node:primitive_type Text: uint8_t
|—————Node:init_declarator Text: i=0
|——————Node:identifier Text: i
|——————Node:= Text: =
|——————Node:number_literal Text: 0
|—————Node:; Text: ;
|————Node:binary_expression Text: i<8
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:number_literal Text: 8
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
        Serial.print(message.getByte(i),HEX);
        Serial.print(" ");
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: Serial.print(message.getByte(i),HEX);
|——————Node:call_expression Text: Serial.print(message.getByte(i),HEX)
|———————Node:field_expression Text: Serial.print
|————————Node:identifier Text: Serial
|————————Node:. Text: .
|————————Node:field_identifier Text: print
|———————Node:argument_list Text: (message.getByte(i),HEX)
|————————Node:( Text: (
|————————Node:call_expression Text: message.getByte(i)
|—————————Node:field_expression Text: message.getByte
|——————————Node:identifier Text: message
|——————————Node:. Text: .
|——————————Node:field_identifier Text: getByte
|—————————Node:argument_list Text: (i)
|——————————Node:( Text: (
|——————————Node:identifier Text: i
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:identifier Text: HEX
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: Serial.print(" ");
|——————Node:call_expression Text: Serial.print(" ")
|———————Node:field_expression Text: Serial.print
|————————Node:identifier Text: Serial
|————————Node:. Text: .
|————————Node:field_identifier Text: print
|———————Node:argument_list Text: (" ")
|————————Node:( Text: (
|————————Node:string_literal Text: " "
|—————————Node:" Text: "
|—————————Node:string_content Text:  
|—————————Node:" Text: "
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:preproc_ifdef Text: #ifdef DEBUGDEF
        Serial.println("");
    #endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: DEBUGDEF
|————Node:expression_statement Text: Serial.println("");
|—————Node:call_expression Text: Serial.println("")
|——————Node:field_expression Text: Serial.println
|———————Node:identifier Text: Serial
|———————Node:. Text: .
|———————Node:field_identifier Text: println
|——————Node:argument_list Text: ("")
|———————Node:( Text: (
|———————Node:string_literal Text: ""
|————————Node:" Text: "
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:comment Text: // DEBUGDEF
|———Node:} Text: }
|—Node:comment Text: /**\brief
* Create a new memory set up. Writes the EEPROM with null values. Equivalent to reset the memory.
* Should be done once before setting a new node.
*/
|—Node:function_definition Text: void MergCBUS::setUpNewMemory(){
    memory.setUpNewMemory();
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: MergCBUS::setUpNewMemory()
|———Node:qualified_identifier Text: MergCBUS::setUpNewMemory
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: setUpNewMemory
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    memory.setUpNewMemory();
}
|———Node:{ Text: {
|———Node:expression_statement Text: memory.setUpNewMemory();
|————Node:call_expression Text: memory.setUpNewMemory()
|—————Node:field_expression Text: memory.setUpNewMemory
|——————Node:identifier Text: memory
|——————Node:. Text: .
|——————Node:field_identifier Text: setUpNewMemory
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /**\brief
* Set the pins for green and yello leds.
* @param green Pin for the green led.
* @param yellow Pin for the yellow led.
*/
|—Node:function_definition Text: void MergCBUS::setLeds(byte green,byte yellow){
    greenLed=green;
    yellowLed=yellow;
    pinMode(greenLed,OUTPUT);
    pinMode(yellowLed,OUTPUT);
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: MergCBUS::setLeds(byte green,byte yellow)
|———Node:qualified_identifier Text: MergCBUS::setLeds
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: setLeds
|———Node:parameter_list Text: (byte green,byte yellow)
|————Node:( Text: (
|————Node:parameter_declaration Text: byte green
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: green
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte yellow
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: yellow
|————Node:) Text: )
|——Node:compound_statement Text: {
    greenLed=green;
    yellowLed=yellow;
    pinMode(greenLed,OUTPUT);
    pinMode(yellowLed,OUTPUT);
}
|———Node:{ Text: {
|———Node:expression_statement Text: greenLed=green;
|————Node:assignment_expression Text: greenLed=green
|—————Node:identifier Text: greenLed
|—————Node:= Text: =
|—————Node:identifier Text: green
|————Node:; Text: ;
|———Node:expression_statement Text: yellowLed=yellow;
|————Node:assignment_expression Text: yellowLed=yellow
|—————Node:identifier Text: yellowLed
|—————Node:= Text: =
|—————Node:identifier Text: yellow
|————Node:; Text: ;
|———Node:expression_statement Text: pinMode(greenLed,OUTPUT);
|————Node:call_expression Text: pinMode(greenLed,OUTPUT)
|—————Node:identifier Text: pinMode
|—————Node:argument_list Text: (greenLed,OUTPUT)
|——————Node:( Text: (
|——————Node:identifier Text: greenLed
|——————Node:, Text: ,
|——————Node:identifier Text: OUTPUT
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: pinMode(yellowLed,OUTPUT);
|————Node:call_expression Text: pinMode(yellowLed,OUTPUT)
|—————Node:identifier Text: pinMode
|—————Node:argument_list Text: (yellowLed,OUTPUT)
|——————Node:( Text: (
|——————Node:identifier Text: yellowLed
|——————Node:, Text: ,
|——————Node:identifier Text: OUTPUT
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /**\brief
* Do the automatic led control based on the node status.
* Called in the run() function. If not using the @see run then has to be called manually
*/
|—Node:function_definition Text: void MergCBUS::controlLeds(){

    if (yellowLed==255 && greenLed==255){
        return;
    }
    if ((millis()-ledtimer)<BLINK_RATE){
        return;
    }

    if (state_mode==SETUP){

            if (ledYellowState==HIGH){
            digitalWrite(yellowLed,LOW);
            ledYellowState=LOW;
            }else{
                digitalWrite(yellowLed,HIGH);
                ledYellowState=HIGH;
            }
        }

    else{

        if(node_mode==MTYP_FLIM){
            digitalWrite(greenLed,LOW);
            digitalWrite(yellowLed,HIGH);
        }
        else{
            digitalWrite(greenLed,HIGH);
            digitalWrite(yellowLed,LOW);
        }
    }
    ledtimer=millis();
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: MergCBUS::controlLeds()
|———Node:qualified_identifier Text: MergCBUS::controlLeds
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: controlLeds
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {

    if (yellowLed==255 && greenLed==255){
        return;
    }
    if ((millis()-ledtimer)<BLINK_RATE){
        return;
    }

    if (state_mode==SETUP){

            if (ledYellowState==HIGH){
            digitalWrite(yellowLed,LOW);
            ledYellowState=LOW;
            }else{
                digitalWrite(yellowLed,HIGH);
                ledYellowState=HIGH;
            }
        }

    else{

        if(node_mode==MTYP_FLIM){
            digitalWrite(greenLed,LOW);
            digitalWrite(yellowLed,HIGH);
        }
        else{
            digitalWrite(greenLed,HIGH);
            digitalWrite(yellowLed,LOW);
        }
    }
    ledtimer=millis();
}
|———Node:{ Text: {
|———Node:if_statement Text: if (yellowLed==255 && greenLed==255){
        return;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (yellowLed==255 && greenLed==255)
|—————Node:( Text: (
|—————Node:binary_expression Text: yellowLed==255 && greenLed==255
|——————Node:binary_expression Text: yellowLed==255
|———————Node:identifier Text: yellowLed
|———————Node:== Text: ==
|———————Node:number_literal Text: 255
|——————Node:&& Text: &&
|——————Node:binary_expression Text: greenLed==255
|———————Node:identifier Text: greenLed
|———————Node:== Text: ==
|———————Node:number_literal Text: 255
|—————Node:) Text: )
|————Node:compound_statement Text: {
        return;
    }
|—————Node:{ Text: {
|—————Node:return_statement Text: return;
|——————Node:return Text: return
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:if_statement Text: if ((millis()-ledtimer)<BLINK_RATE){
        return;
    }
|————Node:if Text: if
|————Node:condition_clause Text: ((millis()-ledtimer)<BLINK_RATE)
|—————Node:( Text: (
|—————Node:binary_expression Text: (millis()-ledtimer)<BLINK_RATE
|——————Node:parenthesized_expression Text: (millis()-ledtimer)
|———————Node:( Text: (
|———————Node:binary_expression Text: millis()-ledtimer
|————————Node:call_expression Text: millis()
|—————————Node:identifier Text: millis
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:- Text: -
|————————Node:identifier Text: ledtimer
|———————Node:) Text: )
|——————Node:< Text: <
|——————Node:identifier Text: BLINK_RATE
|—————Node:) Text: )
|————Node:compound_statement Text: {
        return;
    }
|—————Node:{ Text: {
|—————Node:return_statement Text: return;
|——————Node:return Text: return
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:if_statement Text: if (state_mode==SETUP){

            if (ledYellowState==HIGH){
            digitalWrite(yellowLed,LOW);
            ledYellowState=LOW;
            }else{
                digitalWrite(yellowLed,HIGH);
                ledYellowState=HIGH;
            }
        }

    else{

        if(node_mode==MTYP_FLIM){
            digitalWrite(greenLed,LOW);
            digitalWrite(yellowLed,HIGH);
        }
        else{
            digitalWrite(greenLed,HIGH);
            digitalWrite(yellowLed,LOW);
        }
    }
|————Node:if Text: if
|————Node:condition_clause Text: (state_mode==SETUP)
|—————Node:( Text: (
|—————Node:binary_expression Text: state_mode==SETUP
|——————Node:identifier Text: state_mode
|——————Node:== Text: ==
|——————Node:identifier Text: SETUP
|—————Node:) Text: )
|————Node:compound_statement Text: {

            if (ledYellowState==HIGH){
            digitalWrite(yellowLed,LOW);
            ledYellowState=LOW;
            }else{
                digitalWrite(yellowLed,HIGH);
                ledYellowState=HIGH;
            }
        }
|—————Node:{ Text: {
|—————Node:if_statement Text: if (ledYellowState==HIGH){
            digitalWrite(yellowLed,LOW);
            ledYellowState=LOW;
            }else{
                digitalWrite(yellowLed,HIGH);
                ledYellowState=HIGH;
            }
|——————Node:if Text: if
|——————Node:condition_clause Text: (ledYellowState==HIGH)
|———————Node:( Text: (
|———————Node:binary_expression Text: ledYellowState==HIGH
|————————Node:identifier Text: ledYellowState
|————————Node:== Text: ==
|————————Node:identifier Text: HIGH
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            digitalWrite(yellowLed,LOW);
            ledYellowState=LOW;
            }
|———————Node:{ Text: {
|———————Node:expression_statement Text: digitalWrite(yellowLed,LOW);
|————————Node:call_expression Text: digitalWrite(yellowLed,LOW)
|—————————Node:identifier Text: digitalWrite
|—————————Node:argument_list Text: (yellowLed,LOW)
|——————————Node:( Text: (
|——————————Node:identifier Text: yellowLed
|——————————Node:, Text: ,
|——————————Node:identifier Text: LOW
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: ledYellowState=LOW;
|————————Node:assignment_expression Text: ledYellowState=LOW
|—————————Node:identifier Text: ledYellowState
|—————————Node:= Text: =
|—————————Node:identifier Text: LOW
|————————Node:; Text: ;
|———————Node:} Text: }
|——————Node:else_clause Text: else{
                digitalWrite(yellowLed,HIGH);
                ledYellowState=HIGH;
            }
|———————Node:else Text: else
|———————Node:compound_statement Text: {
                digitalWrite(yellowLed,HIGH);
                ledYellowState=HIGH;
            }
|————————Node:{ Text: {
|————————Node:expression_statement Text: digitalWrite(yellowLed,HIGH);
|—————————Node:call_expression Text: digitalWrite(yellowLed,HIGH)
|——————————Node:identifier Text: digitalWrite
|——————————Node:argument_list Text: (yellowLed,HIGH)
|———————————Node:( Text: (
|———————————Node:identifier Text: yellowLed
|———————————Node:, Text: ,
|———————————Node:identifier Text: HIGH
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: ledYellowState=HIGH;
|—————————Node:assignment_expression Text: ledYellowState=HIGH
|——————————Node:identifier Text: ledYellowState
|——————————Node:= Text: =
|——————————Node:identifier Text: HIGH
|—————————Node:; Text: ;
|————————Node:} Text: }
|—————Node:} Text: }
|————Node:else_clause Text: else{

        if(node_mode==MTYP_FLIM){
            digitalWrite(greenLed,LOW);
            digitalWrite(yellowLed,HIGH);
        }
        else{
            digitalWrite(greenLed,HIGH);
            digitalWrite(yellowLed,LOW);
        }
    }
|—————Node:else Text: else
|—————Node:compound_statement Text: {

        if(node_mode==MTYP_FLIM){
            digitalWrite(greenLed,LOW);
            digitalWrite(yellowLed,HIGH);
        }
        else{
            digitalWrite(greenLed,HIGH);
            digitalWrite(yellowLed,LOW);
        }
    }
|——————Node:{ Text: {
|——————Node:if_statement Text: if(node_mode==MTYP_FLIM){
            digitalWrite(greenLed,LOW);
            digitalWrite(yellowLed,HIGH);
        }
        else{
            digitalWrite(greenLed,HIGH);
            digitalWrite(yellowLed,LOW);
        }
|———————Node:if Text: if
|———————Node:condition_clause Text: (node_mode==MTYP_FLIM)
|————————Node:( Text: (
|————————Node:binary_expression Text: node_mode==MTYP_FLIM
|—————————Node:identifier Text: node_mode
|—————————Node:== Text: ==
|—————————Node:identifier Text: MTYP_FLIM
|————————Node:) Text: )
|———————Node:compound_statement Text: {
            digitalWrite(greenLed,LOW);
            digitalWrite(yellowLed,HIGH);
        }
|————————Node:{ Text: {
|————————Node:expression_statement Text: digitalWrite(greenLed,LOW);
|—————————Node:call_expression Text: digitalWrite(greenLed,LOW)
|——————————Node:identifier Text: digitalWrite
|——————————Node:argument_list Text: (greenLed,LOW)
|———————————Node:( Text: (
|———————————Node:identifier Text: greenLed
|———————————Node:, Text: ,
|———————————Node:identifier Text: LOW
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: digitalWrite(yellowLed,HIGH);
|—————————Node:call_expression Text: digitalWrite(yellowLed,HIGH)
|——————————Node:identifier Text: digitalWrite
|——————————Node:argument_list Text: (yellowLed,HIGH)
|———————————Node:( Text: (
|———————————Node:identifier Text: yellowLed
|———————————Node:, Text: ,
|———————————Node:identifier Text: HIGH
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:} Text: }
|———————Node:else_clause Text: else{
            digitalWrite(greenLed,HIGH);
            digitalWrite(yellowLed,LOW);
        }
|————————Node:else Text: else
|————————Node:compound_statement Text: {
            digitalWrite(greenLed,HIGH);
            digitalWrite(yellowLed,LOW);
        }
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: digitalWrite(greenLed,HIGH);
|——————————Node:call_expression Text: digitalWrite(greenLed,HIGH)
|———————————Node:identifier Text: digitalWrite
|———————————Node:argument_list Text: (greenLed,HIGH)
|————————————Node:( Text: (
|————————————Node:identifier Text: greenLed
|————————————Node:, Text: ,
|————————————Node:identifier Text: HIGH
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:expression_statement Text: digitalWrite(yellowLed,LOW);
|——————————Node:call_expression Text: digitalWrite(yellowLed,LOW)
|———————————Node:identifier Text: digitalWrite
|———————————Node:argument_list Text: (yellowLed,LOW)
|————————————Node:( Text: (
|————————————Node:identifier Text: yellowLed
|————————————Node:, Text: ,
|————————————Node:identifier Text: LOW
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:} Text: }
|——————Node:} Text: }
|———Node:expression_statement Text: ledtimer=millis();
|————Node:assignment_expression Text: ledtimer=millis()
|—————Node:identifier Text: ledtimer
|—————Node:= Text: =
|—————Node:call_expression Text: millis()
|——————Node:identifier Text: millis
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /**\brief
* Return true if the node is in self enumeration mode
*/
|—Node:function_definition Text: bool MergCBUS::isSelfEnumMode(){

    if (state_mode==SELF_ENUMERATION){return true;}
    return false;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: MergCBUS::isSelfEnumMode()
|———Node:qualified_identifier Text: MergCBUS::isSelfEnumMode
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: isSelfEnumMode
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {

    if (state_mode==SELF_ENUMERATION){return true;}
    return false;
}
|———Node:{ Text: {
|———Node:if_statement Text: if (state_mode==SELF_ENUMERATION){return true;}
|————Node:if Text: if
|————Node:condition_clause Text: (state_mode==SELF_ENUMERATION)
|—————Node:( Text: (
|—————Node:binary_expression Text: state_mode==SELF_ENUMERATION
|——————Node:identifier Text: state_mode
|——————Node:== Text: ==
|——————Node:identifier Text: SELF_ENUMERATION
|—————Node:) Text: )
|————Node:compound_statement Text: {return true;}
|—————Node:{ Text: {
|—————Node:return_statement Text: return true;
|——————Node:return Text: return
|——————Node:true Text: true
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return false;
|————Node:return Text: return
|————Node:false Text: false
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /**
* Check the if it is an ON message. Major event in CBUS.
* @return True if is and On event, false if not
*/
|—Node:function_definition Text: bool MergCBUS::isAccOn(){
    return message.isAccOn();
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: MergCBUS::isAccOn()
|———Node:qualified_identifier Text: MergCBUS::isAccOn
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: isAccOn
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    return message.isAccOn();
}
|———Node:{ Text: {
|———Node:return_statement Text: return message.isAccOn();
|————Node:return Text: return
|————Node:call_expression Text: message.isAccOn()
|—————Node:field_expression Text: message.isAccOn
|——————Node:identifier Text: message
|——————Node:. Text: .
|——————Node:field_identifier Text: isAccOn
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /**
* Check the if it is an OFF message. Major event in CBUS.
* @return True if is and OFF event, false if not
*/
|—Node:function_definition Text: bool MergCBUS::isAccOff(){
    return message.isAccOff();
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: MergCBUS::isAccOff()
|———Node:qualified_identifier Text: MergCBUS::isAccOff
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: isAccOff
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    return message.isAccOff();
}
|———Node:{ Text: {
|———Node:return_statement Text: return message.isAccOff();
|————Node:return Text: return
|————Node:call_expression Text: message.isAccOff()
|—————Node:field_expression Text: message.isAccOff
|——————Node:identifier Text: message
|——————Node:. Text: .
|——————Node:field_identifier Text: isAccOff
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /**
* Return how many bytes of extra data has the ON event.
* @return The number of extra bytes depending on the message type. ACON,ACOF=0 ; ACON1,ACOF1=1; ACON2,ACOF2=2; ACON3,ACOF1=3
*/
|—Node:function_definition Text: byte MergCBUS::accExtraData(){
    return message.accExtraData();

}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: MergCBUS::accExtraData()
|———Node:qualified_identifier Text: MergCBUS::accExtraData
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: accExtraData
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    return message.accExtraData();

}
|———Node:{ Text: {
|———Node:return_statement Text: return message.accExtraData();
|————Node:return Text: return
|————Node:call_expression Text: message.accExtraData()
|—————Node:field_expression Text: message.accExtraData
|——————Node:identifier Text: message
|——————Node:. Text: .
|——————Node:field_identifier Text: accExtraData
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /**
* Get the extra data byte on an ON or OFF event.
* @return Return the extra byte. The index is between 1 and 3
*/
|—Node:function_definition Text: byte MergCBUS::getAccExtraData(byte idx){
    return message.getAccExtraData(idx);
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: MergCBUS::getAccExtraData(byte idx)
|———Node:qualified_identifier Text: MergCBUS::getAccExtraData
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: getAccExtraData
|———Node:parameter_list Text: (byte idx)
|————Node:( Text: (
|————Node:parameter_declaration Text: byte idx
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: idx
|————Node:) Text: )
|——Node:compound_statement Text: {
    return message.getAccExtraData(idx);
}
|———Node:{ Text: {
|———Node:return_statement Text: return message.getAccExtraData(idx);
|————Node:return Text: return
|————Node:call_expression Text: message.getAccExtraData(idx)
|—————Node:field_expression Text: message.getAccExtraData
|——————Node:identifier Text: message
|——————Node:. Text: .
|——————Node:field_identifier Text: getAccExtraData
|—————Node:argument_list Text: (idx)
|——————Node:( Text: (
|——————Node:identifier Text: idx
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /**
* Set the node to Slim mode
*/
|—Node:function_definition Text: void MergCBUS::setSlimMode(){
    #ifdef DEBUGDEF
        Serial.println("Setting SLIM mode");
    #endif // DEBUGDEF

    node_mode=MTYP_SLIM;
    nodeId.setSlimMode();
    saveNodeFlags();
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: MergCBUS::setSlimMode()
|———Node:qualified_identifier Text: MergCBUS::setSlimMode
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: setSlimMode
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    #ifdef DEBUGDEF
        Serial.println("Setting SLIM mode");
    #endif // DEBUGDEF

    node_mode=MTYP_SLIM;
    nodeId.setSlimMode();
    saveNodeFlags();
}
|———Node:{ Text: {
|———Node:preproc_ifdef Text: #ifdef DEBUGDEF
        Serial.println("Setting SLIM mode");
    #endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: DEBUGDEF
|————Node:expression_statement Text: Serial.println("Setting SLIM mode");
|—————Node:call_expression Text: Serial.println("Setting SLIM mode")
|——————Node:field_expression Text: Serial.println
|———————Node:identifier Text: Serial
|———————Node:. Text: .
|———————Node:field_identifier Text: println
|——————Node:argument_list Text: ("Setting SLIM mode")
|———————Node:( Text: (
|———————Node:string_literal Text: "Setting SLIM mode"
|————————Node:" Text: "
|————————Node:string_content Text: Setting SLIM mode
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:comment Text: // DEBUGDEF
|———Node:expression_statement Text: node_mode=MTYP_SLIM;
|————Node:assignment_expression Text: node_mode=MTYP_SLIM
|—————Node:identifier Text: node_mode
|—————Node:= Text: =
|—————Node:identifier Text: MTYP_SLIM
|————Node:; Text: ;
|———Node:expression_statement Text: nodeId.setSlimMode();
|————Node:call_expression Text: nodeId.setSlimMode()
|—————Node:field_expression Text: nodeId.setSlimMode
|——————Node:identifier Text: nodeId
|——————Node:. Text: .
|——————Node:field_identifier Text: setSlimMode
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: saveNodeFlags();
|————Node:call_expression Text: saveNodeFlags()
|—————Node:identifier Text: saveNodeFlags
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /**
* Set the node to Flim mode
*/
|—Node:function_definition Text: void MergCBUS::setFlimMode(){
    #ifdef DEBUGDEF
        Serial.println("Setting FLIM mode");
    #endif // DEBUGDEF
    node_mode=MTYP_FLIM;
    nodeId.setFlimMode();
    saveNodeFlags();
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: MergCBUS::setFlimMode()
|———Node:qualified_identifier Text: MergCBUS::setFlimMode
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: setFlimMode
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    #ifdef DEBUGDEF
        Serial.println("Setting FLIM mode");
    #endif // DEBUGDEF
    node_mode=MTYP_FLIM;
    nodeId.setFlimMode();
    saveNodeFlags();
}
|———Node:{ Text: {
|———Node:preproc_ifdef Text: #ifdef DEBUGDEF
        Serial.println("Setting FLIM mode");
    #endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: DEBUGDEF
|————Node:expression_statement Text: Serial.println("Setting FLIM mode");
|—————Node:call_expression Text: Serial.println("Setting FLIM mode")
|——————Node:field_expression Text: Serial.println
|———————Node:identifier Text: Serial
|———————Node:. Text: .
|———————Node:field_identifier Text: println
|——————Node:argument_list Text: ("Setting FLIM mode")
|———————Node:( Text: (
|———————Node:string_literal Text: "Setting FLIM mode"
|————————Node:" Text: "
|————————Node:string_content Text: Setting FLIM mode
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:comment Text: // DEBUGDEF
|———Node:expression_statement Text: node_mode=MTYP_FLIM;
|————Node:assignment_expression Text: node_mode=MTYP_FLIM
|—————Node:identifier Text: node_mode
|—————Node:= Text: =
|—————Node:identifier Text: MTYP_FLIM
|————Node:; Text: ;
|———Node:expression_statement Text: nodeId.setFlimMode();
|————Node:call_expression Text: nodeId.setFlimMode()
|—————Node:field_expression Text: nodeId.setFlimMode
|——————Node:identifier Text: nodeId
|——————Node:. Text: .
|——————Node:field_identifier Text: setFlimMode
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: saveNodeFlags();
|————Node:call_expression Text: saveNodeFlags()
|—————Node:identifier Text: saveNodeFlags
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /**
* Save the node Flags
*/
|—Node:function_definition Text: void MergCBUS::saveNodeFlags(){
    memory.setNodeFlag(nodeId.getFlags());
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: MergCBUS::saveNodeFlags()
|———Node:qualified_identifier Text: MergCBUS::saveNodeFlags
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: saveNodeFlags
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    memory.setNodeFlag(nodeId.getFlags());
}
|———Node:{ Text: {
|———Node:expression_statement Text: memory.setNodeFlag(nodeId.getFlags());
|————Node:call_expression Text: memory.setNodeFlag(nodeId.getFlags())
|—————Node:field_expression Text: memory.setNodeFlag
|——————Node:identifier Text: memory
|——————Node:. Text: .
|——————Node:field_identifier Text: setNodeFlag
|—————Node:argument_list Text: (nodeId.getFlags())
|——————Node:( Text: (
|——————Node:call_expression Text: nodeId.getFlags()
|———————Node:field_expression Text: nodeId.getFlags
|————————Node:identifier Text: nodeId
|————————Node:. Text: .
|————————Node:field_identifier Text: getFlags
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /**
* Learn the event present in the message and send ACK if all went well or send ERROR if it fails.
*/
|—Node:function_definition Text: void MergCBUS::learnEvent(){
    unsigned int ev,nn,resp;
    byte ind,val,evidx;
         #ifdef DEBUGDEF
            Serial.println("Learning event.");
            //printSentMessage();
        #endif // DEBUGDEF

        if (message.getType()==CONFIG){
            if (message.getOpc()!=OPC_EVLRN && message.getOpc()!=OPC_EVLRNI){
                handleConfigMessages();
                return;
            }
        }
        ev=message.getEventNumber();
        nn=message.getNodeNumber();

        //get the device number in case of short event
        //TODO:for producers. Test
//        if (nn==0){
//            //check if the node support device number
//            if (nodeId.isProducerNode() && memory.getNumDeviceNumber()>0){
//                ind=message.getEventVarIndex();
//                val=message.getEventVar();
//
//                if (ind>0){
//                    ind=ind-1;//internal buffers start at position 0
//                }
//                memory.setDeviceNumber(ev,ind);
//                //in case of setting device number there may be customized rules for that
////                if (userHandler!=0){
////                    userHandler(&message,this);
////                }
//            }
//
//        }


        //save event and get the index
        buffer[0]=highByte(nn);
        buffer[1]=lowByte(nn);
        buffer[2]=highByte(ev);
        buffer[3]=lowByte(ev);
        evidx=memory.setEvent(buffer);

        if (evidx>nodeId.getSuportedEvents()){
            //send a message error
            sendERRMessage(CMDERR_TOO_MANY_EVENTS);
            return;
        }

        //save the parameter
        //the CBUS index start with 1
        if (message.getOpc()==OPC_EVLRN || message.getOpc()==OPC_EVLRNI){
            ind=message.getEventVarIndex();
            val=message.getEventVar();
            #ifdef DEBUGDEF
                    Serial.print("Saving event var ");
                    Serial.print(ind);
                    Serial.print(" value ");
                    Serial.print(val);
                    Serial. print(" of event ");
                    Serial.println(evidx);
                    Serial.print("max events: ");
                    Serial.println(memory.getNumEvents());
                    Serial.print("max events vars: ");
                    Serial.println(memory.getNumEventVars());
            #endif // DEBUGDEF


            resp=memory.setEventVar(evidx,ind-1,val);

            #ifdef DEBUGDEF
                    Serial.print("Saving event var resp ");
                    Serial.println(resp);
            #endif


            if (resp!=(ind-1)){
                //send a message error
                #ifdef DEBUGDEF
                    Serial.println("Error lear event");
                #endif
                sendERRMessage(CMDERR_INV_NV_IDX);
                return;
            }
        }


        //send a WRACK back
        prepareMessage(OPC_WRACK);
        sendCanMessage();
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: MergCBUS::learnEvent()
|———Node:qualified_identifier Text: MergCBUS::learnEvent
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: learnEvent
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    unsigned int ev,nn,resp;
    byte ind,val,evidx;
         #ifdef DEBUGDEF
            Serial.println("Learning event.");
            //printSentMessage();
        #endif // DEBUGDEF

        if (message.getType()==CONFIG){
            if (message.getOpc()!=OPC_EVLRN && message.getOpc()!=OPC_EVLRNI){
                handleConfigMessages();
                return;
            }
        }
        ev=message.getEventNumber();
        nn=message.getNodeNumber();

        //get the device number in case of short event
        //TODO:for producers. Test
//        if (nn==0){
//            //check if the node support device number
//            if (nodeId.isProducerNode() && memory.getNumDeviceNumber()>0){
//                ind=message.getEventVarIndex();
//                val=message.getEventVar();
//
//                if (ind>0){
//                    ind=ind-1;//internal buffers start at position 0
//                }
//                memory.setDeviceNumber(ev,ind);
//                //in case of setting device number there may be customized rules for that
////                if (userHandler!=0){
////                    userHandler(&message,this);
////                }
//            }
//
//        }


        //save event and get the index
        buffer[0]=highByte(nn);
        buffer[1]=lowByte(nn);
        buffer[2]=highByte(ev);
        buffer[3]=lowByte(ev);
        evidx=memory.setEvent(buffer);

        if (evidx>nodeId.getSuportedEvents()){
            //send a message error
            sendERRMessage(CMDERR_TOO_MANY_EVENTS);
            return;
        }

        //save the parameter
        //the CBUS index start with 1
        if (message.getOpc()==OPC_EVLRN || message.getOpc()==OPC_EVLRNI){
            ind=message.getEventVarIndex();
            val=message.getEventVar();
            #ifdef DEBUGDEF
                    Serial.print("Saving event var ");
                    Serial.print(ind);
                    Serial.print(" value ");
                    Serial.print(val);
                    Serial. print(" of event ");
                    Serial.println(evidx);
                    Serial.print("max events: ");
                    Serial.println(memory.getNumEvents());
                    Serial.print("max events vars: ");
                    Serial.println(memory.getNumEventVars());
            #endif // DEBUGDEF


            resp=memory.setEventVar(evidx,ind-1,val);

            #ifdef DEBUGDEF
                    Serial.print("Saving event var resp ");
                    Serial.println(resp);
            #endif


            if (resp!=(ind-1)){
                //send a message error
                #ifdef DEBUGDEF
                    Serial.println("Error lear event");
                #endif
                sendERRMessage(CMDERR_INV_NV_IDX);
                return;
            }
        }


        //send a WRACK back
        prepareMessage(OPC_WRACK);
        sendCanMessage();
}
|———Node:{ Text: {
|———Node:declaration Text: unsigned int ev,nn,resp;
|————Node:sized_type_specifier Text: unsigned int
|—————Node:unsigned Text: unsigned
|—————Node:primitive_type Text: int
|————Node:identifier Text: ev
|————Node:, Text: ,
|————Node:identifier Text: nn
|————Node:, Text: ,
|————Node:identifier Text: resp
|————Node:; Text: ;
|———Node:declaration Text: byte ind,val,evidx;
|————Node:type_identifier Text: byte
|————Node:identifier Text: ind
|————Node:, Text: ,
|————Node:identifier Text: val
|————Node:, Text: ,
|————Node:identifier Text: evidx
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef DEBUGDEF
            Serial.println("Learning event.");
            //printSentMessage();
        #endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: DEBUGDEF
|————Node:expression_statement Text: Serial.println("Learning event.");
|—————Node:call_expression Text: Serial.println("Learning event.")
|——————Node:field_expression Text: Serial.println
|———————Node:identifier Text: Serial
|———————Node:. Text: .
|———————Node:field_identifier Text: println
|——————Node:argument_list Text: ("Learning event.")
|———————Node:( Text: (
|———————Node:string_literal Text: "Learning event."
|————————Node:" Text: "
|————————Node:string_content Text: Learning event.
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:comment Text: //printSentMessage();
|————Node:#endif Text: #endif
|———Node:comment Text: // DEBUGDEF
|———Node:if_statement Text: if (message.getType()==CONFIG){
            if (message.getOpc()!=OPC_EVLRN && message.getOpc()!=OPC_EVLRNI){
                handleConfigMessages();
                return;
            }
        }
|————Node:if Text: if
|————Node:condition_clause Text: (message.getType()==CONFIG)
|—————Node:( Text: (
|—————Node:binary_expression Text: message.getType()==CONFIG
|——————Node:call_expression Text: message.getType()
|———————Node:field_expression Text: message.getType
|————————Node:identifier Text: message
|————————Node:. Text: .
|————————Node:field_identifier Text: getType
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:== Text: ==
|——————Node:identifier Text: CONFIG
|—————Node:) Text: )
|————Node:compound_statement Text: {
            if (message.getOpc()!=OPC_EVLRN && message.getOpc()!=OPC_EVLRNI){
                handleConfigMessages();
                return;
            }
        }
|—————Node:{ Text: {
|—————Node:if_statement Text: if (message.getOpc()!=OPC_EVLRN && message.getOpc()!=OPC_EVLRNI){
                handleConfigMessages();
                return;
            }
|——————Node:if Text: if
|——————Node:condition_clause Text: (message.getOpc()!=OPC_EVLRN && message.getOpc()!=OPC_EVLRNI)
|———————Node:( Text: (
|———————Node:binary_expression Text: message.getOpc()!=OPC_EVLRN && message.getOpc()!=OPC_EVLRNI
|————————Node:binary_expression Text: message.getOpc()!=OPC_EVLRN
|—————————Node:call_expression Text: message.getOpc()
|——————————Node:field_expression Text: message.getOpc
|———————————Node:identifier Text: message
|———————————Node:. Text: .
|———————————Node:field_identifier Text: getOpc
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:!= Text: !=
|—————————Node:identifier Text: OPC_EVLRN
|————————Node:&& Text: &&
|————————Node:binary_expression Text: message.getOpc()!=OPC_EVLRNI
|—————————Node:call_expression Text: message.getOpc()
|——————————Node:field_expression Text: message.getOpc
|———————————Node:identifier Text: message
|———————————Node:. Text: .
|———————————Node:field_identifier Text: getOpc
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:!= Text: !=
|—————————Node:identifier Text: OPC_EVLRNI
|———————Node:) Text: )
|——————Node:compound_statement Text: {
                handleConfigMessages();
                return;
            }
|———————Node:{ Text: {
|———————Node:expression_statement Text: handleConfigMessages();
|————————Node:call_expression Text: handleConfigMessages()
|—————————Node:identifier Text: handleConfigMessages
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:return_statement Text: return;
|————————Node:return Text: return
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:expression_statement Text: ev=message.getEventNumber();
|————Node:assignment_expression Text: ev=message.getEventNumber()
|—————Node:identifier Text: ev
|—————Node:= Text: =
|—————Node:call_expression Text: message.getEventNumber()
|——————Node:field_expression Text: message.getEventNumber
|———————Node:identifier Text: message
|———————Node:. Text: .
|———————Node:field_identifier Text: getEventNumber
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: nn=message.getNodeNumber();
|————Node:assignment_expression Text: nn=message.getNodeNumber()
|—————Node:identifier Text: nn
|—————Node:= Text: =
|—————Node:call_expression Text: message.getNodeNumber()
|——————Node:field_expression Text: message.getNodeNumber
|———————Node:identifier Text: message
|———————Node:. Text: .
|———————Node:field_identifier Text: getNodeNumber
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:comment Text: //get the device number in case of short event
|———Node:comment Text: //TODO:for producers. Test
|———Node:comment Text: //        if (nn==0){
|———Node:comment Text: //            //check if the node support device number
|———Node:comment Text: //            if (nodeId.isProducerNode() && memory.getNumDeviceNumber()>0){
|———Node:comment Text: //                ind=message.getEventVarIndex();
|———Node:comment Text: //                val=message.getEventVar();
|———Node:comment Text: //
|———Node:comment Text: //                if (ind>0){
|———Node:comment Text: //                    ind=ind-1;//internal buffers start at position 0
|———Node:comment Text: //                }
|———Node:comment Text: //                memory.setDeviceNumber(ev,ind);
|———Node:comment Text: //                //in case of setting device number there may be customized rules for that
|———Node:comment Text: ////                if (userHandler!=0){
|———Node:comment Text: ////                    userHandler(&message,this);
|———Node:comment Text: ////                }
|———Node:comment Text: //            }
|———Node:comment Text: //
|———Node:comment Text: //        }
|———Node:comment Text: //save event and get the index
|———Node:expression_statement Text: buffer[0]=highByte(nn);
|————Node:assignment_expression Text: buffer[0]=highByte(nn)
|—————Node:subscript_expression Text: buffer[0]
|——————Node:identifier Text: buffer
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:call_expression Text: highByte(nn)
|——————Node:identifier Text: highByte
|——————Node:argument_list Text: (nn)
|———————Node:( Text: (
|———————Node:identifier Text: nn
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: buffer[1]=lowByte(nn);
|————Node:assignment_expression Text: buffer[1]=lowByte(nn)
|—————Node:subscript_expression Text: buffer[1]
|——————Node:identifier Text: buffer
|——————Node:subscript_argument_list Text: [1]
|———————Node:[ Text: [
|———————Node:number_literal Text: 1
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:call_expression Text: lowByte(nn)
|——————Node:identifier Text: lowByte
|——————Node:argument_list Text: (nn)
|———————Node:( Text: (
|———————Node:identifier Text: nn
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: buffer[2]=highByte(ev);
|————Node:assignment_expression Text: buffer[2]=highByte(ev)
|—————Node:subscript_expression Text: buffer[2]
|——————Node:identifier Text: buffer
|——————Node:subscript_argument_list Text: [2]
|———————Node:[ Text: [
|———————Node:number_literal Text: 2
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:call_expression Text: highByte(ev)
|——————Node:identifier Text: highByte
|——————Node:argument_list Text: (ev)
|———————Node:( Text: (
|———————Node:identifier Text: ev
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: buffer[3]=lowByte(ev);
|————Node:assignment_expression Text: buffer[3]=lowByte(ev)
|—————Node:subscript_expression Text: buffer[3]
|——————Node:identifier Text: buffer
|——————Node:subscript_argument_list Text: [3]
|———————Node:[ Text: [
|———————Node:number_literal Text: 3
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:call_expression Text: lowByte(ev)
|——————Node:identifier Text: lowByte
|——————Node:argument_list Text: (ev)
|———————Node:( Text: (
|———————Node:identifier Text: ev
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: evidx=memory.setEvent(buffer);
|————Node:assignment_expression Text: evidx=memory.setEvent(buffer)
|—————Node:identifier Text: evidx
|—————Node:= Text: =
|—————Node:call_expression Text: memory.setEvent(buffer)
|——————Node:field_expression Text: memory.setEvent
|———————Node:identifier Text: memory
|———————Node:. Text: .
|———————Node:field_identifier Text: setEvent
|——————Node:argument_list Text: (buffer)
|———————Node:( Text: (
|———————Node:identifier Text: buffer
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (evidx>nodeId.getSuportedEvents()){
            //send a message error
            sendERRMessage(CMDERR_TOO_MANY_EVENTS);
            return;
        }
|————Node:if Text: if
|————Node:condition_clause Text: (evidx>nodeId.getSuportedEvents())
|—————Node:( Text: (
|—————Node:binary_expression Text: evidx>nodeId.getSuportedEvents()
|——————Node:identifier Text: evidx
|——————Node:> Text: >
|——————Node:call_expression Text: nodeId.getSuportedEvents()
|———————Node:field_expression Text: nodeId.getSuportedEvents
|————————Node:identifier Text: nodeId
|————————Node:. Text: .
|————————Node:field_identifier Text: getSuportedEvents
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
            //send a message error
            sendERRMessage(CMDERR_TOO_MANY_EVENTS);
            return;
        }
|—————Node:{ Text: {
|—————Node:comment Text: //send a message error
|—————Node:expression_statement Text: sendERRMessage(CMDERR_TOO_MANY_EVENTS);
|——————Node:call_expression Text: sendERRMessage(CMDERR_TOO_MANY_EVENTS)
|———————Node:identifier Text: sendERRMessage
|———————Node:argument_list Text: (CMDERR_TOO_MANY_EVENTS)
|————————Node:( Text: (
|————————Node:identifier Text: CMDERR_TOO_MANY_EVENTS
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return;
|——————Node:return Text: return
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment Text: //save the parameter
|———Node:comment Text: //the CBUS index start with 1
|———Node:if_statement Text: if (message.getOpc()==OPC_EVLRN || message.getOpc()==OPC_EVLRNI){
            ind=message.getEventVarIndex();
            val=message.getEventVar();
            #ifdef DEBUGDEF
                    Serial.print("Saving event var ");
                    Serial.print(ind);
                    Serial.print(" value ");
                    Serial.print(val);
                    Serial. print(" of event ");
                    Serial.println(evidx);
                    Serial.print("max events: ");
                    Serial.println(memory.getNumEvents());
                    Serial.print("max events vars: ");
                    Serial.println(memory.getNumEventVars());
            #endif // DEBUGDEF


            resp=memory.setEventVar(evidx,ind-1,val);

            #ifdef DEBUGDEF
                    Serial.print("Saving event var resp ");
                    Serial.println(resp);
            #endif


            if (resp!=(ind-1)){
                //send a message error
                #ifdef DEBUGDEF
                    Serial.println("Error lear event");
                #endif
                sendERRMessage(CMDERR_INV_NV_IDX);
                return;
            }
        }
|————Node:if Text: if
|————Node:condition_clause Text: (message.getOpc()==OPC_EVLRN || message.getOpc()==OPC_EVLRNI)
|—————Node:( Text: (
|—————Node:binary_expression Text: message.getOpc()==OPC_EVLRN || message.getOpc()==OPC_EVLRNI
|——————Node:binary_expression Text: message.getOpc()==OPC_EVLRN
|———————Node:call_expression Text: message.getOpc()
|————————Node:field_expression Text: message.getOpc
|—————————Node:identifier Text: message
|—————————Node:. Text: .
|—————————Node:field_identifier Text: getOpc
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:== Text: ==
|———————Node:identifier Text: OPC_EVLRN
|——————Node:|| Text: ||
|——————Node:binary_expression Text: message.getOpc()==OPC_EVLRNI
|———————Node:call_expression Text: message.getOpc()
|————————Node:field_expression Text: message.getOpc
|—————————Node:identifier Text: message
|—————————Node:. Text: .
|—————————Node:field_identifier Text: getOpc
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:== Text: ==
|———————Node:identifier Text: OPC_EVLRNI
|—————Node:) Text: )
|————Node:compound_statement Text: {
            ind=message.getEventVarIndex();
            val=message.getEventVar();
            #ifdef DEBUGDEF
                    Serial.print("Saving event var ");
                    Serial.print(ind);
                    Serial.print(" value ");
                    Serial.print(val);
                    Serial. print(" of event ");
                    Serial.println(evidx);
                    Serial.print("max events: ");
                    Serial.println(memory.getNumEvents());
                    Serial.print("max events vars: ");
                    Serial.println(memory.getNumEventVars());
            #endif // DEBUGDEF


            resp=memory.setEventVar(evidx,ind-1,val);

            #ifdef DEBUGDEF
                    Serial.print("Saving event var resp ");
                    Serial.println(resp);
            #endif


            if (resp!=(ind-1)){
                //send a message error
                #ifdef DEBUGDEF
                    Serial.println("Error lear event");
                #endif
                sendERRMessage(CMDERR_INV_NV_IDX);
                return;
            }
        }
|—————Node:{ Text: {
|—————Node:expression_statement Text: ind=message.getEventVarIndex();
|——————Node:assignment_expression Text: ind=message.getEventVarIndex()
|———————Node:identifier Text: ind
|———————Node:= Text: =
|———————Node:call_expression Text: message.getEventVarIndex()
|————————Node:field_expression Text: message.getEventVarIndex
|—————————Node:identifier Text: message
|—————————Node:. Text: .
|—————————Node:field_identifier Text: getEventVarIndex
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: val=message.getEventVar();
|——————Node:assignment_expression Text: val=message.getEventVar()
|———————Node:identifier Text: val
|———————Node:= Text: =
|———————Node:call_expression Text: message.getEventVar()
|————————Node:field_expression Text: message.getEventVar
|—————————Node:identifier Text: message
|—————————Node:. Text: .
|—————————Node:field_identifier Text: getEventVar
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                    Serial.print("Saving event var ");
                    Serial.print(ind);
                    Serial.print(" value ");
                    Serial.print(val);
                    Serial. print(" of event ");
                    Serial.println(evidx);
                    Serial.print("max events: ");
                    Serial.println(memory.getNumEvents());
                    Serial.print("max events vars: ");
                    Serial.println(memory.getNumEventVars());
            #endif
|——————Node:#ifdef Text: #ifdef
|——————Node:identifier Text: DEBUGDEF
|——————Node:expression_statement Text: Serial.print("Saving event var ");
|———————Node:call_expression Text: Serial.print("Saving event var ")
|————————Node:field_expression Text: Serial.print
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: print
|————————Node:argument_list Text: ("Saving event var ")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Saving event var "
|——————————Node:" Text: "
|——————————Node:string_content Text: Saving event var 
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: Serial.print(ind);
|———————Node:call_expression Text: Serial.print(ind)
|————————Node:field_expression Text: Serial.print
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: print
|————————Node:argument_list Text: (ind)
|—————————Node:( Text: (
|—————————Node:identifier Text: ind
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: Serial.print(" value ");
|———————Node:call_expression Text: Serial.print(" value ")
|————————Node:field_expression Text: Serial.print
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: print
|————————Node:argument_list Text: (" value ")
|—————————Node:( Text: (
|—————————Node:string_literal Text: " value "
|——————————Node:" Text: "
|——————————Node:string_content Text:  value 
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: Serial.print(val);
|———————Node:call_expression Text: Serial.print(val)
|————————Node:field_expression Text: Serial.print
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: print
|————————Node:argument_list Text: (val)
|—————————Node:( Text: (
|—————————Node:identifier Text: val
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: Serial. print(" of event ");
|———————Node:call_expression Text: Serial. print(" of event ")
|————————Node:field_expression Text: Serial. print
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: print
|————————Node:argument_list Text: (" of event ")
|—————————Node:( Text: (
|—————————Node:string_literal Text: " of event "
|——————————Node:" Text: "
|——————————Node:string_content Text:  of event 
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: Serial.println(evidx);
|———————Node:call_expression Text: Serial.println(evidx)
|————————Node:field_expression Text: Serial.println
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: println
|————————Node:argument_list Text: (evidx)
|—————————Node:( Text: (
|—————————Node:identifier Text: evidx
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: Serial.print("max events: ");
|———————Node:call_expression Text: Serial.print("max events: ")
|————————Node:field_expression Text: Serial.print
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: print
|————————Node:argument_list Text: ("max events: ")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "max events: "
|——————————Node:" Text: "
|——————————Node:string_content Text: max events: 
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: Serial.println(memory.getNumEvents());
|———————Node:call_expression Text: Serial.println(memory.getNumEvents())
|————————Node:field_expression Text: Serial.println
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: println
|————————Node:argument_list Text: (memory.getNumEvents())
|—————————Node:( Text: (
|—————————Node:call_expression Text: memory.getNumEvents()
|——————————Node:field_expression Text: memory.getNumEvents
|———————————Node:identifier Text: memory
|———————————Node:. Text: .
|———————————Node:field_identifier Text: getNumEvents
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: Serial.print("max events vars: ");
|———————Node:call_expression Text: Serial.print("max events vars: ")
|————————Node:field_expression Text: Serial.print
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: print
|————————Node:argument_list Text: ("max events vars: ")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "max events vars: "
|——————————Node:" Text: "
|——————————Node:string_content Text: max events vars: 
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: Serial.println(memory.getNumEventVars());
|———————Node:call_expression Text: Serial.println(memory.getNumEventVars())
|————————Node:field_expression Text: Serial.println
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: println
|————————Node:argument_list Text: (memory.getNumEventVars())
|—————————Node:( Text: (
|—————————Node:call_expression Text: memory.getNumEventVars()
|——————————Node:field_expression Text: memory.getNumEventVars
|———————————Node:identifier Text: memory
|———————————Node:. Text: .
|———————————Node:field_identifier Text: getNumEventVars
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:#endif Text: #endif
|—————Node:comment Text: // DEBUGDEF
|—————Node:expression_statement Text: resp=memory.setEventVar(evidx,ind-1,val);
|——————Node:assignment_expression Text: resp=memory.setEventVar(evidx,ind-1,val)
|———————Node:identifier Text: resp
|———————Node:= Text: =
|———————Node:call_expression Text: memory.setEventVar(evidx,ind-1,val)
|————————Node:field_expression Text: memory.setEventVar
|—————————Node:identifier Text: memory
|—————————Node:. Text: .
|—————————Node:field_identifier Text: setEventVar
|————————Node:argument_list Text: (evidx,ind-1,val)
|—————————Node:( Text: (
|—————————Node:identifier Text: evidx
|—————————Node:, Text: ,
|—————————Node:binary_expression Text: ind-1
|——————————Node:identifier Text: ind
|——————————Node:- Text: -
|——————————Node:number_literal Text: 1
|—————————Node:, Text: ,
|—————————Node:identifier Text: val
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                    Serial.print("Saving event var resp ");
                    Serial.println(resp);
            #endif
|——————Node:#ifdef Text: #ifdef
|——————Node:identifier Text: DEBUGDEF
|——————Node:expression_statement Text: Serial.print("Saving event var resp ");
|———————Node:call_expression Text: Serial.print("Saving event var resp ")
|————————Node:field_expression Text: Serial.print
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: print
|————————Node:argument_list Text: ("Saving event var resp ")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Saving event var resp "
|——————————Node:" Text: "
|——————————Node:string_content Text: Saving event var resp 
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: Serial.println(resp);
|———————Node:call_expression Text: Serial.println(resp)
|————————Node:field_expression Text: Serial.println
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: println
|————————Node:argument_list Text: (resp)
|—————————Node:( Text: (
|—————————Node:identifier Text: resp
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:#endif Text: #endif
|—————Node:if_statement Text: if (resp!=(ind-1)){
                //send a message error
                #ifdef DEBUGDEF
                    Serial.println("Error lear event");
                #endif
                sendERRMessage(CMDERR_INV_NV_IDX);
                return;
            }
|——————Node:if Text: if
|——————Node:condition_clause Text: (resp!=(ind-1))
|———————Node:( Text: (
|———————Node:binary_expression Text: resp!=(ind-1)
|————————Node:identifier Text: resp
|————————Node:!= Text: !=
|————————Node:parenthesized_expression Text: (ind-1)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: ind-1
|——————————Node:identifier Text: ind
|——————————Node:- Text: -
|——————————Node:number_literal Text: 1
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {
                //send a message error
                #ifdef DEBUGDEF
                    Serial.println("Error lear event");
                #endif
                sendERRMessage(CMDERR_INV_NV_IDX);
                return;
            }
|———————Node:{ Text: {
|———————Node:comment Text: //send a message error
|———————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                    Serial.println("Error lear event");
                #endif
|————————Node:#ifdef Text: #ifdef
|————————Node:identifier Text: DEBUGDEF
|————————Node:expression_statement Text: Serial.println("Error lear event");
|—————————Node:call_expression Text: Serial.println("Error lear event")
|——————————Node:field_expression Text: Serial.println
|———————————Node:identifier Text: Serial
|———————————Node:. Text: .
|———————————Node:field_identifier Text: println
|——————————Node:argument_list Text: ("Error lear event")
|———————————Node:( Text: (
|———————————Node:string_literal Text: "Error lear event"
|————————————Node:" Text: "
|————————————Node:string_content Text: Error lear event
|————————————Node:" Text: "
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:#endif Text: #endif
|———————Node:expression_statement Text: sendERRMessage(CMDERR_INV_NV_IDX);
|————————Node:call_expression Text: sendERRMessage(CMDERR_INV_NV_IDX)
|—————————Node:identifier Text: sendERRMessage
|—————————Node:argument_list Text: (CMDERR_INV_NV_IDX)
|——————————Node:( Text: (
|——————————Node:identifier Text: CMDERR_INV_NV_IDX
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:return_statement Text: return;
|————————Node:return Text: return
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:comment Text: //send a WRACK back
|———Node:expression_statement Text: prepareMessage(OPC_WRACK);
|————Node:call_expression Text: prepareMessage(OPC_WRACK)
|—————Node:identifier Text: prepareMessage
|—————Node:argument_list Text: (OPC_WRACK)
|——————Node:( Text: (
|——————Node:identifier Text: OPC_WRACK
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: sendCanMessage();
|————Node:call_expression Text: sendCanMessage()
|—————Node:identifier Text: sendCanMessage
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /**
* Automatically control the push button default behaviour defined to MERG modules.
* Between 3 and 8 seconds the node requests another node number.
* Press the button for more than 8 seconds to change from Slim to Flim and vice-versa
* The Slim node number is defined by the default node number.
*/
|—Node:function_definition Text: void MergCBUS::controlPushButton(){
    if (push_button==255){ return;}

    //LOW means pressed
    //HIGH is released

    if (digitalRead(push_button)==LOW){
        //start the timer
        #ifdef DEBUGDEF
            Serial.println("Button pressed");
        #endif // DEBUGDEF
        if (pb_state==HIGH){
            startTime=millis();
            pb_state=LOW;
            #ifdef DEBUGDEF
                Serial.println("Start timer");
            #endif // DEBUGDEF

        }
    }
    else {
        //user had pressed it before and now released
        if (pb_state==LOW){
             #ifdef DEBUGDEF
                Serial.println("Button released");
             #endif // DEBUGDEF

            pb_state=HIGH;

            //check the timer to define what to do next
            //between 3 and 8 secs is just to get another node number
            //more than 8 secs is to change from slim to flim or vice-versa
            unsigned long tdelay=millis()-startTime;
            #ifdef DEBUGDEF
                Serial.println(tdelay);
             #endif // DEBUGDEF

            if (tdelay>1000 && tdelay<6000){
                //request a new node number
                //request node number
                if (node_mode==MTYP_FLIM){
                        if (state_mode==SETUP){
                            //back to normal
                            state_mode=NORMAL;
                        }else{
                            #ifdef DEBUGDEF
                                Serial.println("Mode FLIM. Request NN");
                            #endif // DEBUGDEF

                            doSetup();
                        }
                }
                else{
                    if (state_mode==SETUP){
                        state_mode=NORMAL;
                        return;
                    }
                }

            } else if (tdelay>6000){
                //change from flim to slim
                if (node_mode==MTYP_SLIM){
                    if (state_mode==SETUP){
                        state_mode=NORMAL;
                        return;
                    }
                    #ifdef DEBUGDEF
                                Serial.println("Mode SLIM. Changing to FLIM");
                    #endif // DEBUGDEF

                    //turn the green led down
                    digitalWrite(greenLed,LOW);
                    //start self ennumeration
                    doSelfEnnumeration(false);
                    //wait until the self enum is node
                    while (state_mode==SELF_ENUMERATION){
                        run();
                    }
                    //request node number
                    doSetup();
                } else{
                    //back to SLIM mode
                    #ifdef DEBUGDEF
                                Serial.println("Mode FLIM. Changing to SLIM");
                    #endif // DEBUGDEF

                    node_mode=MTYP_SLIM;
                    nodeId.setSlimMode();
                    saveNodeFlags();
                    //memory.setNodeFlag(nodeId.getFlags());
                    //get standard node number
                    if (nodeId.isProducerNode()){
                        nodeId.setNodeNumber(std_nn);
                        memory.setNodeNumber(std_nn);
                    }
                    else{
                        nodeId.setNodeNumber(0);
                        memory.setNodeNumber(0);
                    }

                }
            }
        }

    }

}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: MergCBUS::controlPushButton()
|———Node:qualified_identifier Text: MergCBUS::controlPushButton
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: controlPushButton
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    if (push_button==255){ return;}

    //LOW means pressed
    //HIGH is released

    if (digitalRead(push_button)==LOW){
        //start the timer
        #ifdef DEBUGDEF
            Serial.println("Button pressed");
        #endif // DEBUGDEF
        if (pb_state==HIGH){
            startTime=millis();
            pb_state=LOW;
            #ifdef DEBUGDEF
                Serial.println("Start timer");
            #endif // DEBUGDEF

        }
    }
    else {
        //user had pressed it before and now released
        if (pb_state==LOW){
             #ifdef DEBUGDEF
                Serial.println("Button released");
             #endif // DEBUGDEF

            pb_state=HIGH;

            //check the timer to define what to do next
            //between 3 and 8 secs is just to get another node number
            //more than 8 secs is to change from slim to flim or vice-versa
            unsigned long tdelay=millis()-startTime;
            #ifdef DEBUGDEF
                Serial.println(tdelay);
             #endif // DEBUGDEF

            if (tdelay>1000 && tdelay<6000){
                //request a new node number
                //request node number
                if (node_mode==MTYP_FLIM){
                        if (state_mode==SETUP){
                            //back to normal
                            state_mode=NORMAL;
                        }else{
                            #ifdef DEBUGDEF
                                Serial.println("Mode FLIM. Request NN");
                            #endif // DEBUGDEF

                            doSetup();
                        }
                }
                else{
                    if (state_mode==SETUP){
                        state_mode=NORMAL;
                        return;
                    }
                }

            } else if (tdelay>6000){
                //change from flim to slim
                if (node_mode==MTYP_SLIM){
                    if (state_mode==SETUP){
                        state_mode=NORMAL;
                        return;
                    }
                    #ifdef DEBUGDEF
                                Serial.println("Mode SLIM. Changing to FLIM");
                    #endif // DEBUGDEF

                    //turn the green led down
                    digitalWrite(greenLed,LOW);
                    //start self ennumeration
                    doSelfEnnumeration(false);
                    //wait until the self enum is node
                    while (state_mode==SELF_ENUMERATION){
                        run();
                    }
                    //request node number
                    doSetup();
                } else{
                    //back to SLIM mode
                    #ifdef DEBUGDEF
                                Serial.println("Mode FLIM. Changing to SLIM");
                    #endif // DEBUGDEF

                    node_mode=MTYP_SLIM;
                    nodeId.setSlimMode();
                    saveNodeFlags();
                    //memory.setNodeFlag(nodeId.getFlags());
                    //get standard node number
                    if (nodeId.isProducerNode()){
                        nodeId.setNodeNumber(std_nn);
                        memory.setNodeNumber(std_nn);
                    }
                    else{
                        nodeId.setNodeNumber(0);
                        memory.setNodeNumber(0);
                    }

                }
            }
        }

    }

}
|———Node:{ Text: {
|———Node:if_statement Text: if (push_button==255){ return;}
|————Node:if Text: if
|————Node:condition_clause Text: (push_button==255)
|—————Node:( Text: (
|—————Node:binary_expression Text: push_button==255
|——————Node:identifier Text: push_button
|——————Node:== Text: ==
|——————Node:number_literal Text: 255
|—————Node:) Text: )
|————Node:compound_statement Text: { return;}
|—————Node:{ Text: {
|—————Node:return_statement Text: return;
|——————Node:return Text: return
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment Text: //LOW means pressed
|———Node:comment Text: //HIGH is released
|———Node:if_statement Text: if (digitalRead(push_button)==LOW){
        //start the timer
        #ifdef DEBUGDEF
            Serial.println("Button pressed");
        #endif // DEBUGDEF
        if (pb_state==HIGH){
            startTime=millis();
            pb_state=LOW;
            #ifdef DEBUGDEF
                Serial.println("Start timer");
            #endif // DEBUGDEF

        }
    }
    else {
        //user had pressed it before and now released
        if (pb_state==LOW){
             #ifdef DEBUGDEF
                Serial.println("Button released");
             #endif // DEBUGDEF

            pb_state=HIGH;

            //check the timer to define what to do next
            //between 3 and 8 secs is just to get another node number
            //more than 8 secs is to change from slim to flim or vice-versa
            unsigned long tdelay=millis()-startTime;
            #ifdef DEBUGDEF
                Serial.println(tdelay);
             #endif // DEBUGDEF

            if (tdelay>1000 && tdelay<6000){
                //request a new node number
                //request node number
                if (node_mode==MTYP_FLIM){
                        if (state_mode==SETUP){
                            //back to normal
                            state_mode=NORMAL;
                        }else{
                            #ifdef DEBUGDEF
                                Serial.println("Mode FLIM. Request NN");
                            #endif // DEBUGDEF

                            doSetup();
                        }
                }
                else{
                    if (state_mode==SETUP){
                        state_mode=NORMAL;
                        return;
                    }
                }

            } else if (tdelay>6000){
                //change from flim to slim
                if (node_mode==MTYP_SLIM){
                    if (state_mode==SETUP){
                        state_mode=NORMAL;
                        return;
                    }
                    #ifdef DEBUGDEF
                                Serial.println("Mode SLIM. Changing to FLIM");
                    #endif // DEBUGDEF

                    //turn the green led down
                    digitalWrite(greenLed,LOW);
                    //start self ennumeration
                    doSelfEnnumeration(false);
                    //wait until the self enum is node
                    while (state_mode==SELF_ENUMERATION){
                        run();
                    }
                    //request node number
                    doSetup();
                } else{
                    //back to SLIM mode
                    #ifdef DEBUGDEF
                                Serial.println("Mode FLIM. Changing to SLIM");
                    #endif // DEBUGDEF

                    node_mode=MTYP_SLIM;
                    nodeId.setSlimMode();
                    saveNodeFlags();
                    //memory.setNodeFlag(nodeId.getFlags());
                    //get standard node number
                    if (nodeId.isProducerNode()){
                        nodeId.setNodeNumber(std_nn);
                        memory.setNodeNumber(std_nn);
                    }
                    else{
                        nodeId.setNodeNumber(0);
                        memory.setNodeNumber(0);
                    }

                }
            }
        }

    }
|————Node:if Text: if
|————Node:condition_clause Text: (digitalRead(push_button)==LOW)
|—————Node:( Text: (
|—————Node:binary_expression Text: digitalRead(push_button)==LOW
|——————Node:call_expression Text: digitalRead(push_button)
|———————Node:identifier Text: digitalRead
|———————Node:argument_list Text: (push_button)
|————————Node:( Text: (
|————————Node:identifier Text: push_button
|————————Node:) Text: )
|——————Node:== Text: ==
|——————Node:identifier Text: LOW
|—————Node:) Text: )
|————Node:compound_statement Text: {
        //start the timer
        #ifdef DEBUGDEF
            Serial.println("Button pressed");
        #endif // DEBUGDEF
        if (pb_state==HIGH){
            startTime=millis();
            pb_state=LOW;
            #ifdef DEBUGDEF
                Serial.println("Start timer");
            #endif // DEBUGDEF

        }
    }
|—————Node:{ Text: {
|—————Node:comment Text: //start the timer
|—————Node:preproc_ifdef Text: #ifdef DEBUGDEF
            Serial.println("Button pressed");
        #endif
|——————Node:#ifdef Text: #ifdef
|——————Node:identifier Text: DEBUGDEF
|——————Node:expression_statement Text: Serial.println("Button pressed");
|———————Node:call_expression Text: Serial.println("Button pressed")
|————————Node:field_expression Text: Serial.println
|—————————Node:identifier Text: Serial
|—————————Node:. Text: .
|—————————Node:field_identifier Text: println
|————————Node:argument_list Text: ("Button pressed")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Button pressed"
|——————————Node:" Text: "
|——————————Node:string_content Text: Button pressed
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:#endif Text: #endif
|—————Node:comment Text: // DEBUGDEF
|—————Node:if_statement Text: if (pb_state==HIGH){
            startTime=millis();
            pb_state=LOW;
            #ifdef DEBUGDEF
                Serial.println("Start timer");
            #endif // DEBUGDEF

        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (pb_state==HIGH)
|———————Node:( Text: (
|———————Node:binary_expression Text: pb_state==HIGH
|————————Node:identifier Text: pb_state
|————————Node:== Text: ==
|————————Node:identifier Text: HIGH
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            startTime=millis();
            pb_state=LOW;
            #ifdef DEBUGDEF
                Serial.println("Start timer");
            #endif // DEBUGDEF

        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: startTime=millis();
|————————Node:assignment_expression Text: startTime=millis()
|—————————Node:identifier Text: startTime
|—————————Node:= Text: =
|—————————Node:call_expression Text: millis()
|——————————Node:identifier Text: millis
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: pb_state=LOW;
|————————Node:assignment_expression Text: pb_state=LOW
|—————————Node:identifier Text: pb_state
|—————————Node:= Text: =
|—————————Node:identifier Text: LOW
|————————Node:; Text: ;
|———————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                Serial.println("Start timer");
            #endif
|————————Node:#ifdef Text: #ifdef
|————————Node:identifier Text: DEBUGDEF
|————————Node:expression_statement Text: Serial.println("Start timer");
|—————————Node:call_expression Text: Serial.println("Start timer")
|——————————Node:field_expression Text: Serial.println
|———————————Node:identifier Text: Serial
|———————————Node:. Text: .
|———————————Node:field_identifier Text: println
|——————————Node:argument_list Text: ("Start timer")
|———————————Node:( Text: (
|———————————Node:string_literal Text: "Start timer"
|————————————Node:" Text: "
|————————————Node:string_content Text: Start timer
|————————————Node:" Text: "
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:#endif Text: #endif
|———————Node:comment Text: // DEBUGDEF
|———————Node:} Text: }
|—————Node:} Text: }
|————Node:else_clause Text: else {
        //user had pressed it before and now released
        if (pb_state==LOW){
             #ifdef DEBUGDEF
                Serial.println("Button released");
             #endif // DEBUGDEF

            pb_state=HIGH;

            //check the timer to define what to do next
            //between 3 and 8 secs is just to get another node number
            //more than 8 secs is to change from slim to flim or vice-versa
            unsigned long tdelay=millis()-startTime;
            #ifdef DEBUGDEF
                Serial.println(tdelay);
             #endif // DEBUGDEF

            if (tdelay>1000 && tdelay<6000){
                //request a new node number
                //request node number
                if (node_mode==MTYP_FLIM){
                        if (state_mode==SETUP){
                            //back to normal
                            state_mode=NORMAL;
                        }else{
                            #ifdef DEBUGDEF
                                Serial.println("Mode FLIM. Request NN");
                            #endif // DEBUGDEF

                            doSetup();
                        }
                }
                else{
                    if (state_mode==SETUP){
                        state_mode=NORMAL;
                        return;
                    }
                }

            } else if (tdelay>6000){
                //change from flim to slim
                if (node_mode==MTYP_SLIM){
                    if (state_mode==SETUP){
                        state_mode=NORMAL;
                        return;
                    }
                    #ifdef DEBUGDEF
                                Serial.println("Mode SLIM. Changing to FLIM");
                    #endif // DEBUGDEF

                    //turn the green led down
                    digitalWrite(greenLed,LOW);
                    //start self ennumeration
                    doSelfEnnumeration(false);
                    //wait until the self enum is node
                    while (state_mode==SELF_ENUMERATION){
                        run();
                    }
                    //request node number
                    doSetup();
                } else{
                    //back to SLIM mode
                    #ifdef DEBUGDEF
                                Serial.println("Mode FLIM. Changing to SLIM");
                    #endif // DEBUGDEF

                    node_mode=MTYP_SLIM;
                    nodeId.setSlimMode();
                    saveNodeFlags();
                    //memory.setNodeFlag(nodeId.getFlags());
                    //get standard node number
                    if (nodeId.isProducerNode()){
                        nodeId.setNodeNumber(std_nn);
                        memory.setNodeNumber(std_nn);
                    }
                    else{
                        nodeId.setNodeNumber(0);
                        memory.setNodeNumber(0);
                    }

                }
            }
        }

    }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
        //user had pressed it before and now released
        if (pb_state==LOW){
             #ifdef DEBUGDEF
                Serial.println("Button released");
             #endif // DEBUGDEF

            pb_state=HIGH;

            //check the timer to define what to do next
            //between 3 and 8 secs is just to get another node number
            //more than 8 secs is to change from slim to flim or vice-versa
            unsigned long tdelay=millis()-startTime;
            #ifdef DEBUGDEF
                Serial.println(tdelay);
             #endif // DEBUGDEF

            if (tdelay>1000 && tdelay<6000){
                //request a new node number
                //request node number
                if (node_mode==MTYP_FLIM){
                        if (state_mode==SETUP){
                            //back to normal
                            state_mode=NORMAL;
                        }else{
                            #ifdef DEBUGDEF
                                Serial.println("Mode FLIM. Request NN");
                            #endif // DEBUGDEF

                            doSetup();
                        }
                }
                else{
                    if (state_mode==SETUP){
                        state_mode=NORMAL;
                        return;
                    }
                }

            } else if (tdelay>6000){
                //change from flim to slim
                if (node_mode==MTYP_SLIM){
                    if (state_mode==SETUP){
                        state_mode=NORMAL;
                        return;
                    }
                    #ifdef DEBUGDEF
                                Serial.println("Mode SLIM. Changing to FLIM");
                    #endif // DEBUGDEF

                    //turn the green led down
                    digitalWrite(greenLed,LOW);
                    //start self ennumeration
                    doSelfEnnumeration(false);
                    //wait until the self enum is node
                    while (state_mode==SELF_ENUMERATION){
                        run();
                    }
                    //request node number
                    doSetup();
                } else{
                    //back to SLIM mode
                    #ifdef DEBUGDEF
                                Serial.println("Mode FLIM. Changing to SLIM");
                    #endif // DEBUGDEF

                    node_mode=MTYP_SLIM;
                    nodeId.setSlimMode();
                    saveNodeFlags();
                    //memory.setNodeFlag(nodeId.getFlags());
                    //get standard node number
                    if (nodeId.isProducerNode()){
                        nodeId.setNodeNumber(std_nn);
                        memory.setNodeNumber(std_nn);
                    }
                    else{
                        nodeId.setNodeNumber(0);
                        memory.setNodeNumber(0);
                    }

                }
            }
        }

    }
|——————Node:{ Text: {
|——————Node:comment Text: //user had pressed it before and now released
|——————Node:if_statement Text: if (pb_state==LOW){
             #ifdef DEBUGDEF
                Serial.println("Button released");
             #endif // DEBUGDEF

            pb_state=HIGH;

            //check the timer to define what to do next
            //between 3 and 8 secs is just to get another node number
            //more than 8 secs is to change from slim to flim or vice-versa
            unsigned long tdelay=millis()-startTime;
            #ifdef DEBUGDEF
                Serial.println(tdelay);
             #endif // DEBUGDEF

            if (tdelay>1000 && tdelay<6000){
                //request a new node number
                //request node number
                if (node_mode==MTYP_FLIM){
                        if (state_mode==SETUP){
                            //back to normal
                            state_mode=NORMAL;
                        }else{
                            #ifdef DEBUGDEF
                                Serial.println("Mode FLIM. Request NN");
                            #endif // DEBUGDEF

                            doSetup();
                        }
                }
                else{
                    if (state_mode==SETUP){
                        state_mode=NORMAL;
                        return;
                    }
                }

            } else if (tdelay>6000){
                //change from flim to slim
                if (node_mode==MTYP_SLIM){
                    if (state_mode==SETUP){
                        state_mode=NORMAL;
                        return;
                    }
                    #ifdef DEBUGDEF
                                Serial.println("Mode SLIM. Changing to FLIM");
                    #endif // DEBUGDEF

                    //turn the green led down
                    digitalWrite(greenLed,LOW);
                    //start self ennumeration
                    doSelfEnnumeration(false);
                    //wait until the self enum is node
                    while (state_mode==SELF_ENUMERATION){
                        run();
                    }
                    //request node number
                    doSetup();
                } else{
                    //back to SLIM mode
                    #ifdef DEBUGDEF
                                Serial.println("Mode FLIM. Changing to SLIM");
                    #endif // DEBUGDEF

                    node_mode=MTYP_SLIM;
                    nodeId.setSlimMode();
                    saveNodeFlags();
                    //memory.setNodeFlag(nodeId.getFlags());
                    //get standard node number
                    if (nodeId.isProducerNode()){
                        nodeId.setNodeNumber(std_nn);
                        memory.setNodeNumber(std_nn);
                    }
                    else{
                        nodeId.setNodeNumber(0);
                        memory.setNodeNumber(0);
                    }

                }
            }
        }
|———————Node:if Text: if
|———————Node:condition_clause Text: (pb_state==LOW)
|————————Node:( Text: (
|————————Node:binary_expression Text: pb_state==LOW
|—————————Node:identifier Text: pb_state
|—————————Node:== Text: ==
|—————————Node:identifier Text: LOW
|————————Node:) Text: )
|———————Node:compound_statement Text: {
             #ifdef DEBUGDEF
                Serial.println("Button released");
             #endif // DEBUGDEF

            pb_state=HIGH;

            //check the timer to define what to do next
            //between 3 and 8 secs is just to get another node number
            //more than 8 secs is to change from slim to flim or vice-versa
            unsigned long tdelay=millis()-startTime;
            #ifdef DEBUGDEF
                Serial.println(tdelay);
             #endif // DEBUGDEF

            if (tdelay>1000 && tdelay<6000){
                //request a new node number
                //request node number
                if (node_mode==MTYP_FLIM){
                        if (state_mode==SETUP){
                            //back to normal
                            state_mode=NORMAL;
                        }else{
                            #ifdef DEBUGDEF
                                Serial.println("Mode FLIM. Request NN");
                            #endif // DEBUGDEF

                            doSetup();
                        }
                }
                else{
                    if (state_mode==SETUP){
                        state_mode=NORMAL;
                        return;
                    }
                }

            } else if (tdelay>6000){
                //change from flim to slim
                if (node_mode==MTYP_SLIM){
                    if (state_mode==SETUP){
                        state_mode=NORMAL;
                        return;
                    }
                    #ifdef DEBUGDEF
                                Serial.println("Mode SLIM. Changing to FLIM");
                    #endif // DEBUGDEF

                    //turn the green led down
                    digitalWrite(greenLed,LOW);
                    //start self ennumeration
                    doSelfEnnumeration(false);
                    //wait until the self enum is node
                    while (state_mode==SELF_ENUMERATION){
                        run();
                    }
                    //request node number
                    doSetup();
                } else{
                    //back to SLIM mode
                    #ifdef DEBUGDEF
                                Serial.println("Mode FLIM. Changing to SLIM");
                    #endif // DEBUGDEF

                    node_mode=MTYP_SLIM;
                    nodeId.setSlimMode();
                    saveNodeFlags();
                    //memory.setNodeFlag(nodeId.getFlags());
                    //get standard node number
                    if (nodeId.isProducerNode()){
                        nodeId.setNodeNumber(std_nn);
                        memory.setNodeNumber(std_nn);
                    }
                    else{
                        nodeId.setNodeNumber(0);
                        memory.setNodeNumber(0);
                    }

                }
            }
        }
|————————Node:{ Text: {
|————————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                Serial.println("Button released");
             #endif
|—————————Node:#ifdef Text: #ifdef
|—————————Node:identifier Text: DEBUGDEF
|—————————Node:expression_statement Text: Serial.println("Button released");
|——————————Node:call_expression Text: Serial.println("Button released")
|———————————Node:field_expression Text: Serial.println
|————————————Node:identifier Text: Serial
|————————————Node:. Text: .
|————————————Node:field_identifier Text: println
|———————————Node:argument_list Text: ("Button released")
|————————————Node:( Text: (
|————————————Node:string_literal Text: "Button released"
|—————————————Node:" Text: "
|—————————————Node:string_content Text: Button released
|—————————————Node:" Text: "
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:#endif Text: #endif
|————————Node:comment Text: // DEBUGDEF
|————————Node:expression_statement Text: pb_state=HIGH;
|—————————Node:assignment_expression Text: pb_state=HIGH
|——————————Node:identifier Text: pb_state
|——————————Node:= Text: =
|——————————Node:identifier Text: HIGH
|—————————Node:; Text: ;
|————————Node:comment Text: //check the timer to define what to do next
|————————Node:comment Text: //between 3 and 8 secs is just to get another node number
|————————Node:comment Text: //more than 8 secs is to change from slim to flim or vice-versa
|————————Node:declaration Text: unsigned long tdelay=millis()-startTime;
|—————————Node:sized_type_specifier Text: unsigned long
|——————————Node:unsigned Text: unsigned
|——————————Node:long Text: long
|—————————Node:init_declarator Text: tdelay=millis()-startTime
|——————————Node:identifier Text: tdelay
|——————————Node:= Text: =
|——————————Node:binary_expression Text: millis()-startTime
|———————————Node:call_expression Text: millis()
|————————————Node:identifier Text: millis
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:- Text: -
|———————————Node:identifier Text: startTime
|—————————Node:; Text: ;
|————————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                Serial.println(tdelay);
             #endif
|—————————Node:#ifdef Text: #ifdef
|—————————Node:identifier Text: DEBUGDEF
|—————————Node:expression_statement Text: Serial.println(tdelay);
|——————————Node:call_expression Text: Serial.println(tdelay)
|———————————Node:field_expression Text: Serial.println
|————————————Node:identifier Text: Serial
|————————————Node:. Text: .
|————————————Node:field_identifier Text: println
|———————————Node:argument_list Text: (tdelay)
|————————————Node:( Text: (
|————————————Node:identifier Text: tdelay
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:#endif Text: #endif
|————————Node:comment Text: // DEBUGDEF
|————————Node:if_statement Text: if (tdelay>1000 && tdelay<6000){
                //request a new node number
                //request node number
                if (node_mode==MTYP_FLIM){
                        if (state_mode==SETUP){
                            //back to normal
                            state_mode=NORMAL;
                        }else{
                            #ifdef DEBUGDEF
                                Serial.println("Mode FLIM. Request NN");
                            #endif // DEBUGDEF

                            doSetup();
                        }
                }
                else{
                    if (state_mode==SETUP){
                        state_mode=NORMAL;
                        return;
                    }
                }

            } else if (tdelay>6000){
                //change from flim to slim
                if (node_mode==MTYP_SLIM){
                    if (state_mode==SETUP){
                        state_mode=NORMAL;
                        return;
                    }
                    #ifdef DEBUGDEF
                                Serial.println("Mode SLIM. Changing to FLIM");
                    #endif // DEBUGDEF

                    //turn the green led down
                    digitalWrite(greenLed,LOW);
                    //start self ennumeration
                    doSelfEnnumeration(false);
                    //wait until the self enum is node
                    while (state_mode==SELF_ENUMERATION){
                        run();
                    }
                    //request node number
                    doSetup();
                } else{
                    //back to SLIM mode
                    #ifdef DEBUGDEF
                                Serial.println("Mode FLIM. Changing to SLIM");
                    #endif // DEBUGDEF

                    node_mode=MTYP_SLIM;
                    nodeId.setSlimMode();
                    saveNodeFlags();
                    //memory.setNodeFlag(nodeId.getFlags());
                    //get standard node number
                    if (nodeId.isProducerNode()){
                        nodeId.setNodeNumber(std_nn);
                        memory.setNodeNumber(std_nn);
                    }
                    else{
                        nodeId.setNodeNumber(0);
                        memory.setNodeNumber(0);
                    }

                }
            }
|—————————Node:if Text: if
|—————————Node:condition_clause Text: (tdelay>1000 && tdelay<6000)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: tdelay>1000 && tdelay<6000
|———————————Node:binary_expression Text: tdelay>1000
|————————————Node:identifier Text: tdelay
|————————————Node:> Text: >
|————————————Node:number_literal Text: 1000
|———————————Node:&& Text: &&
|———————————Node:binary_expression Text: tdelay<6000
|————————————Node:identifier Text: tdelay
|————————————Node:< Text: <
|————————————Node:number_literal Text: 6000
|——————————Node:) Text: )
|—————————Node:compound_statement Text: {
                //request a new node number
                //request node number
                if (node_mode==MTYP_FLIM){
                        if (state_mode==SETUP){
                            //back to normal
                            state_mode=NORMAL;
                        }else{
                            #ifdef DEBUGDEF
                                Serial.println("Mode FLIM. Request NN");
                            #endif // DEBUGDEF

                            doSetup();
                        }
                }
                else{
                    if (state_mode==SETUP){
                        state_mode=NORMAL;
                        return;
                    }
                }

            }
|——————————Node:{ Text: {
|——————————Node:comment Text: //request a new node number
|——————————Node:comment Text: //request node number
|——————————Node:if_statement Text: if (node_mode==MTYP_FLIM){
                        if (state_mode==SETUP){
                            //back to normal
                            state_mode=NORMAL;
                        }else{
                            #ifdef DEBUGDEF
                                Serial.println("Mode FLIM. Request NN");
                            #endif // DEBUGDEF

                            doSetup();
                        }
                }
                else{
                    if (state_mode==SETUP){
                        state_mode=NORMAL;
                        return;
                    }
                }
|———————————Node:if Text: if
|———————————Node:condition_clause Text: (node_mode==MTYP_FLIM)
|————————————Node:( Text: (
|————————————Node:binary_expression Text: node_mode==MTYP_FLIM
|—————————————Node:identifier Text: node_mode
|—————————————Node:== Text: ==
|—————————————Node:identifier Text: MTYP_FLIM
|————————————Node:) Text: )
|———————————Node:compound_statement Text: {
                        if (state_mode==SETUP){
                            //back to normal
                            state_mode=NORMAL;
                        }else{
                            #ifdef DEBUGDEF
                                Serial.println("Mode FLIM. Request NN");
                            #endif // DEBUGDEF

                            doSetup();
                        }
                }
|————————————Node:{ Text: {
|————————————Node:if_statement Text: if (state_mode==SETUP){
                            //back to normal
                            state_mode=NORMAL;
                        }else{
                            #ifdef DEBUGDEF
                                Serial.println("Mode FLIM. Request NN");
                            #endif // DEBUGDEF

                            doSetup();
                        }
|—————————————Node:if Text: if
|—————————————Node:condition_clause Text: (state_mode==SETUP)
|——————————————Node:( Text: (
|——————————————Node:binary_expression Text: state_mode==SETUP
|———————————————Node:identifier Text: state_mode
|———————————————Node:== Text: ==
|———————————————Node:identifier Text: SETUP
|——————————————Node:) Text: )
|—————————————Node:compound_statement Text: {
                            //back to normal
                            state_mode=NORMAL;
                        }
|——————————————Node:{ Text: {
|——————————————Node:comment Text: //back to normal
|——————————————Node:expression_statement Text: state_mode=NORMAL;
|———————————————Node:assignment_expression Text: state_mode=NORMAL
|————————————————Node:identifier Text: state_mode
|————————————————Node:= Text: =
|————————————————Node:identifier Text: NORMAL
|———————————————Node:; Text: ;
|——————————————Node:} Text: }
|—————————————Node:else_clause Text: else{
                            #ifdef DEBUGDEF
                                Serial.println("Mode FLIM. Request NN");
                            #endif // DEBUGDEF

                            doSetup();
                        }
|——————————————Node:else Text: else
|——————————————Node:compound_statement Text: {
                            #ifdef DEBUGDEF
                                Serial.println("Mode FLIM. Request NN");
                            #endif // DEBUGDEF

                            doSetup();
                        }
|———————————————Node:{ Text: {
|———————————————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                                Serial.println("Mode FLIM. Request NN");
                            #endif
|————————————————Node:#ifdef Text: #ifdef
|————————————————Node:identifier Text: DEBUGDEF
|————————————————Node:expression_statement Text: Serial.println("Mode FLIM. Request NN");
|—————————————————Node:call_expression Text: Serial.println("Mode FLIM. Request NN")
|——————————————————Node:field_expression Text: Serial.println
|———————————————————Node:identifier Text: Serial
|———————————————————Node:. Text: .
|———————————————————Node:field_identifier Text: println
|——————————————————Node:argument_list Text: ("Mode FLIM. Request NN")
|———————————————————Node:( Text: (
|———————————————————Node:string_literal Text: "Mode FLIM. Request NN"
|————————————————————Node:" Text: "
|————————————————————Node:string_content Text: Mode FLIM. Request NN
|————————————————————Node:" Text: "
|———————————————————Node:) Text: )
|—————————————————Node:; Text: ;
|————————————————Node:#endif Text: #endif
|———————————————Node:comment Text: // DEBUGDEF
|———————————————Node:expression_statement Text: doSetup();
|————————————————Node:call_expression Text: doSetup()
|—————————————————Node:identifier Text: doSetup
|—————————————————Node:argument_list Text: ()
|——————————————————Node:( Text: (
|——————————————————Node:) Text: )
|————————————————Node:; Text: ;
|———————————————Node:} Text: }
|————————————Node:} Text: }
|———————————Node:else_clause Text: else{
                    if (state_mode==SETUP){
                        state_mode=NORMAL;
                        return;
                    }
                }
|————————————Node:else Text: else
|————————————Node:compound_statement Text: {
                    if (state_mode==SETUP){
                        state_mode=NORMAL;
                        return;
                    }
                }
|—————————————Node:{ Text: {
|—————————————Node:if_statement Text: if (state_mode==SETUP){
                        state_mode=NORMAL;
                        return;
                    }
|——————————————Node:if Text: if
|——————————————Node:condition_clause Text: (state_mode==SETUP)
|———————————————Node:( Text: (
|———————————————Node:binary_expression Text: state_mode==SETUP
|————————————————Node:identifier Text: state_mode
|————————————————Node:== Text: ==
|————————————————Node:identifier Text: SETUP
|———————————————Node:) Text: )
|——————————————Node:compound_statement Text: {
                        state_mode=NORMAL;
                        return;
                    }
|———————————————Node:{ Text: {
|———————————————Node:expression_statement Text: state_mode=NORMAL;
|————————————————Node:assignment_expression Text: state_mode=NORMAL
|—————————————————Node:identifier Text: state_mode
|—————————————————Node:= Text: =
|—————————————————Node:identifier Text: NORMAL
|————————————————Node:; Text: ;
|———————————————Node:return_statement Text: return;
|————————————————Node:return Text: return
|————————————————Node:; Text: ;
|———————————————Node:} Text: }
|—————————————Node:} Text: }
|——————————Node:} Text: }
|—————————Node:else_clause Text: else if (tdelay>6000){
                //change from flim to slim
                if (node_mode==MTYP_SLIM){
                    if (state_mode==SETUP){
                        state_mode=NORMAL;
                        return;
                    }
                    #ifdef DEBUGDEF
                                Serial.println("Mode SLIM. Changing to FLIM");
                    #endif // DEBUGDEF

                    //turn the green led down
                    digitalWrite(greenLed,LOW);
                    //start self ennumeration
                    doSelfEnnumeration(false);
                    //wait until the self enum is node
                    while (state_mode==SELF_ENUMERATION){
                        run();
                    }
                    //request node number
                    doSetup();
                } else{
                    //back to SLIM mode
                    #ifdef DEBUGDEF
                                Serial.println("Mode FLIM. Changing to SLIM");
                    #endif // DEBUGDEF

                    node_mode=MTYP_SLIM;
                    nodeId.setSlimMode();
                    saveNodeFlags();
                    //memory.setNodeFlag(nodeId.getFlags());
                    //get standard node number
                    if (nodeId.isProducerNode()){
                        nodeId.setNodeNumber(std_nn);
                        memory.setNodeNumber(std_nn);
                    }
                    else{
                        nodeId.setNodeNumber(0);
                        memory.setNodeNumber(0);
                    }

                }
            }
|——————————Node:else Text: else
|——————————Node:if_statement Text: if (tdelay>6000){
                //change from flim to slim
                if (node_mode==MTYP_SLIM){
                    if (state_mode==SETUP){
                        state_mode=NORMAL;
                        return;
                    }
                    #ifdef DEBUGDEF
                                Serial.println("Mode SLIM. Changing to FLIM");
                    #endif // DEBUGDEF

                    //turn the green led down
                    digitalWrite(greenLed,LOW);
                    //start self ennumeration
                    doSelfEnnumeration(false);
                    //wait until the self enum is node
                    while (state_mode==SELF_ENUMERATION){
                        run();
                    }
                    //request node number
                    doSetup();
                } else{
                    //back to SLIM mode
                    #ifdef DEBUGDEF
                                Serial.println("Mode FLIM. Changing to SLIM");
                    #endif // DEBUGDEF

                    node_mode=MTYP_SLIM;
                    nodeId.setSlimMode();
                    saveNodeFlags();
                    //memory.setNodeFlag(nodeId.getFlags());
                    //get standard node number
                    if (nodeId.isProducerNode()){
                        nodeId.setNodeNumber(std_nn);
                        memory.setNodeNumber(std_nn);
                    }
                    else{
                        nodeId.setNodeNumber(0);
                        memory.setNodeNumber(0);
                    }

                }
            }
|———————————Node:if Text: if
|———————————Node:condition_clause Text: (tdelay>6000)
|————————————Node:( Text: (
|————————————Node:binary_expression Text: tdelay>6000
|—————————————Node:identifier Text: tdelay
|—————————————Node:> Text: >
|—————————————Node:number_literal Text: 6000
|————————————Node:) Text: )
|———————————Node:compound_statement Text: {
                //change from flim to slim
                if (node_mode==MTYP_SLIM){
                    if (state_mode==SETUP){
                        state_mode=NORMAL;
                        return;
                    }
                    #ifdef DEBUGDEF
                                Serial.println("Mode SLIM. Changing to FLIM");
                    #endif // DEBUGDEF

                    //turn the green led down
                    digitalWrite(greenLed,LOW);
                    //start self ennumeration
                    doSelfEnnumeration(false);
                    //wait until the self enum is node
                    while (state_mode==SELF_ENUMERATION){
                        run();
                    }
                    //request node number
                    doSetup();
                } else{
                    //back to SLIM mode
                    #ifdef DEBUGDEF
                                Serial.println("Mode FLIM. Changing to SLIM");
                    #endif // DEBUGDEF

                    node_mode=MTYP_SLIM;
                    nodeId.setSlimMode();
                    saveNodeFlags();
                    //memory.setNodeFlag(nodeId.getFlags());
                    //get standard node number
                    if (nodeId.isProducerNode()){
                        nodeId.setNodeNumber(std_nn);
                        memory.setNodeNumber(std_nn);
                    }
                    else{
                        nodeId.setNodeNumber(0);
                        memory.setNodeNumber(0);
                    }

                }
            }
|————————————Node:{ Text: {
|————————————Node:comment Text: //change from flim to slim
|————————————Node:if_statement Text: if (node_mode==MTYP_SLIM){
                    if (state_mode==SETUP){
                        state_mode=NORMAL;
                        return;
                    }
                    #ifdef DEBUGDEF
                                Serial.println("Mode SLIM. Changing to FLIM");
                    #endif // DEBUGDEF

                    //turn the green led down
                    digitalWrite(greenLed,LOW);
                    //start self ennumeration
                    doSelfEnnumeration(false);
                    //wait until the self enum is node
                    while (state_mode==SELF_ENUMERATION){
                        run();
                    }
                    //request node number
                    doSetup();
                } else{
                    //back to SLIM mode
                    #ifdef DEBUGDEF
                                Serial.println("Mode FLIM. Changing to SLIM");
                    #endif // DEBUGDEF

                    node_mode=MTYP_SLIM;
                    nodeId.setSlimMode();
                    saveNodeFlags();
                    //memory.setNodeFlag(nodeId.getFlags());
                    //get standard node number
                    if (nodeId.isProducerNode()){
                        nodeId.setNodeNumber(std_nn);
                        memory.setNodeNumber(std_nn);
                    }
                    else{
                        nodeId.setNodeNumber(0);
                        memory.setNodeNumber(0);
                    }

                }
|—————————————Node:if Text: if
|—————————————Node:condition_clause Text: (node_mode==MTYP_SLIM)
|——————————————Node:( Text: (
|——————————————Node:binary_expression Text: node_mode==MTYP_SLIM
|———————————————Node:identifier Text: node_mode
|———————————————Node:== Text: ==
|———————————————Node:identifier Text: MTYP_SLIM
|——————————————Node:) Text: )
|—————————————Node:compound_statement Text: {
                    if (state_mode==SETUP){
                        state_mode=NORMAL;
                        return;
                    }
                    #ifdef DEBUGDEF
                                Serial.println("Mode SLIM. Changing to FLIM");
                    #endif // DEBUGDEF

                    //turn the green led down
                    digitalWrite(greenLed,LOW);
                    //start self ennumeration
                    doSelfEnnumeration(false);
                    //wait until the self enum is node
                    while (state_mode==SELF_ENUMERATION){
                        run();
                    }
                    //request node number
                    doSetup();
                }
|——————————————Node:{ Text: {
|——————————————Node:if_statement Text: if (state_mode==SETUP){
                        state_mode=NORMAL;
                        return;
                    }
|———————————————Node:if Text: if
|———————————————Node:condition_clause Text: (state_mode==SETUP)
|————————————————Node:( Text: (
|————————————————Node:binary_expression Text: state_mode==SETUP
|—————————————————Node:identifier Text: state_mode
|—————————————————Node:== Text: ==
|—————————————————Node:identifier Text: SETUP
|————————————————Node:) Text: )
|———————————————Node:compound_statement Text: {
                        state_mode=NORMAL;
                        return;
                    }
|————————————————Node:{ Text: {
|————————————————Node:expression_statement Text: state_mode=NORMAL;
|—————————————————Node:assignment_expression Text: state_mode=NORMAL
|——————————————————Node:identifier Text: state_mode
|——————————————————Node:= Text: =
|——————————————————Node:identifier Text: NORMAL
|—————————————————Node:; Text: ;
|————————————————Node:return_statement Text: return;
|—————————————————Node:return Text: return
|—————————————————Node:; Text: ;
|————————————————Node:} Text: }
|——————————————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                                Serial.println("Mode SLIM. Changing to FLIM");
                    #endif
|———————————————Node:#ifdef Text: #ifdef
|———————————————Node:identifier Text: DEBUGDEF
|———————————————Node:expression_statement Text: Serial.println("Mode SLIM. Changing to FLIM");
|————————————————Node:call_expression Text: Serial.println("Mode SLIM. Changing to FLIM")
|—————————————————Node:field_expression Text: Serial.println
|——————————————————Node:identifier Text: Serial
|——————————————————Node:. Text: .
|——————————————————Node:field_identifier Text: println
|—————————————————Node:argument_list Text: ("Mode SLIM. Changing to FLIM")
|——————————————————Node:( Text: (
|——————————————————Node:string_literal Text: "Mode SLIM. Changing to FLIM"
|———————————————————Node:" Text: "
|———————————————————Node:string_content Text: Mode SLIM. Changing to FLIM
|———————————————————Node:" Text: "
|——————————————————Node:) Text: )
|————————————————Node:; Text: ;
|———————————————Node:#endif Text: #endif
|——————————————Node:comment Text: // DEBUGDEF
|——————————————Node:comment Text: //turn the green led down
|——————————————Node:expression_statement Text: digitalWrite(greenLed,LOW);
|———————————————Node:call_expression Text: digitalWrite(greenLed,LOW)
|————————————————Node:identifier Text: digitalWrite
|————————————————Node:argument_list Text: (greenLed,LOW)
|—————————————————Node:( Text: (
|—————————————————Node:identifier Text: greenLed
|—————————————————Node:, Text: ,
|—————————————————Node:identifier Text: LOW
|—————————————————Node:) Text: )
|———————————————Node:; Text: ;
|——————————————Node:comment Text: //start self ennumeration
|——————————————Node:expression_statement Text: doSelfEnnumeration(false);
|———————————————Node:call_expression Text: doSelfEnnumeration(false)
|————————————————Node:identifier Text: doSelfEnnumeration
|————————————————Node:argument_list Text: (false)
|—————————————————Node:( Text: (
|—————————————————Node:false Text: false
|—————————————————Node:) Text: )
|———————————————Node:; Text: ;
|——————————————Node:comment Text: //wait until the self enum is node
|——————————————Node:while_statement Text: while (state_mode==SELF_ENUMERATION){
                        run();
                    }
|———————————————Node:while Text: while
|———————————————Node:condition_clause Text: (state_mode==SELF_ENUMERATION)
|————————————————Node:( Text: (
|————————————————Node:binary_expression Text: state_mode==SELF_ENUMERATION
|—————————————————Node:identifier Text: state_mode
|—————————————————Node:== Text: ==
|—————————————————Node:identifier Text: SELF_ENUMERATION
|————————————————Node:) Text: )
|———————————————Node:compound_statement Text: {
                        run();
                    }
|————————————————Node:{ Text: {
|————————————————Node:expression_statement Text: run();
|—————————————————Node:call_expression Text: run()
|——————————————————Node:identifier Text: run
|——————————————————Node:argument_list Text: ()
|———————————————————Node:( Text: (
|———————————————————Node:) Text: )
|—————————————————Node:; Text: ;
|————————————————Node:} Text: }
|——————————————Node:comment Text: //request node number
|——————————————Node:expression_statement Text: doSetup();
|———————————————Node:call_expression Text: doSetup()
|————————————————Node:identifier Text: doSetup
|————————————————Node:argument_list Text: ()
|—————————————————Node:( Text: (
|—————————————————Node:) Text: )
|———————————————Node:; Text: ;
|——————————————Node:} Text: }
|—————————————Node:else_clause Text: else{
                    //back to SLIM mode
                    #ifdef DEBUGDEF
                                Serial.println("Mode FLIM. Changing to SLIM");
                    #endif // DEBUGDEF

                    node_mode=MTYP_SLIM;
                    nodeId.setSlimMode();
                    saveNodeFlags();
                    //memory.setNodeFlag(nodeId.getFlags());
                    //get standard node number
                    if (nodeId.isProducerNode()){
                        nodeId.setNodeNumber(std_nn);
                        memory.setNodeNumber(std_nn);
                    }
                    else{
                        nodeId.setNodeNumber(0);
                        memory.setNodeNumber(0);
                    }

                }
|——————————————Node:else Text: else
|——————————————Node:compound_statement Text: {
                    //back to SLIM mode
                    #ifdef DEBUGDEF
                                Serial.println("Mode FLIM. Changing to SLIM");
                    #endif // DEBUGDEF

                    node_mode=MTYP_SLIM;
                    nodeId.setSlimMode();
                    saveNodeFlags();
                    //memory.setNodeFlag(nodeId.getFlags());
                    //get standard node number
                    if (nodeId.isProducerNode()){
                        nodeId.setNodeNumber(std_nn);
                        memory.setNodeNumber(std_nn);
                    }
                    else{
                        nodeId.setNodeNumber(0);
                        memory.setNodeNumber(0);
                    }

                }
|———————————————Node:{ Text: {
|———————————————Node:comment Text: //back to SLIM mode
|———————————————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                                Serial.println("Mode FLIM. Changing to SLIM");
                    #endif
|————————————————Node:#ifdef Text: #ifdef
|————————————————Node:identifier Text: DEBUGDEF
|————————————————Node:expression_statement Text: Serial.println("Mode FLIM. Changing to SLIM");
|—————————————————Node:call_expression Text: Serial.println("Mode FLIM. Changing to SLIM")
|——————————————————Node:field_expression Text: Serial.println
|———————————————————Node:identifier Text: Serial
|———————————————————Node:. Text: .
|———————————————————Node:field_identifier Text: println
|——————————————————Node:argument_list Text: ("Mode FLIM. Changing to SLIM")
|———————————————————Node:( Text: (
|———————————————————Node:string_literal Text: "Mode FLIM. Changing to SLIM"
|————————————————————Node:" Text: "
|————————————————————Node:string_content Text: Mode FLIM. Changing to SLIM
|————————————————————Node:" Text: "
|———————————————————Node:) Text: )
|—————————————————Node:; Text: ;
|————————————————Node:#endif Text: #endif
|———————————————Node:comment Text: // DEBUGDEF
|———————————————Node:expression_statement Text: node_mode=MTYP_SLIM;
|————————————————Node:assignment_expression Text: node_mode=MTYP_SLIM
|—————————————————Node:identifier Text: node_mode
|—————————————————Node:= Text: =
|—————————————————Node:identifier Text: MTYP_SLIM
|————————————————Node:; Text: ;
|———————————————Node:expression_statement Text: nodeId.setSlimMode();
|————————————————Node:call_expression Text: nodeId.setSlimMode()
|—————————————————Node:field_expression Text: nodeId.setSlimMode
|——————————————————Node:identifier Text: nodeId
|——————————————————Node:. Text: .
|——————————————————Node:field_identifier Text: setSlimMode
|—————————————————Node:argument_list Text: ()
|——————————————————Node:( Text: (
|——————————————————Node:) Text: )
|————————————————Node:; Text: ;
|———————————————Node:expression_statement Text: saveNodeFlags();
|————————————————Node:call_expression Text: saveNodeFlags()
|—————————————————Node:identifier Text: saveNodeFlags
|—————————————————Node:argument_list Text: ()
|——————————————————Node:( Text: (
|——————————————————Node:) Text: )
|————————————————Node:; Text: ;
|———————————————Node:comment Text: //memory.setNodeFlag(nodeId.getFlags());
|———————————————Node:comment Text: //get standard node number
|———————————————Node:if_statement Text: if (nodeId.isProducerNode()){
                        nodeId.setNodeNumber(std_nn);
                        memory.setNodeNumber(std_nn);
                    }
                    else{
                        nodeId.setNodeNumber(0);
                        memory.setNodeNumber(0);
                    }
|————————————————Node:if Text: if
|————————————————Node:condition_clause Text: (nodeId.isProducerNode())
|—————————————————Node:( Text: (
|—————————————————Node:call_expression Text: nodeId.isProducerNode()
|——————————————————Node:field_expression Text: nodeId.isProducerNode
|———————————————————Node:identifier Text: nodeId
|———————————————————Node:. Text: .
|———————————————————Node:field_identifier Text: isProducerNode
|——————————————————Node:argument_list Text: ()
|———————————————————Node:( Text: (
|———————————————————Node:) Text: )
|—————————————————Node:) Text: )
|————————————————Node:compound_statement Text: {
                        nodeId.setNodeNumber(std_nn);
                        memory.setNodeNumber(std_nn);
                    }
|—————————————————Node:{ Text: {
|—————————————————Node:expression_statement Text: nodeId.setNodeNumber(std_nn);
|——————————————————Node:call_expression Text: nodeId.setNodeNumber(std_nn)
|———————————————————Node:field_expression Text: nodeId.setNodeNumber
|————————————————————Node:identifier Text: nodeId
|————————————————————Node:. Text: .
|————————————————————Node:field_identifier Text: setNodeNumber
|———————————————————Node:argument_list Text: (std_nn)
|————————————————————Node:( Text: (
|————————————————————Node:identifier Text: std_nn
|————————————————————Node:) Text: )
|——————————————————Node:; Text: ;
|—————————————————Node:expression_statement Text: memory.setNodeNumber(std_nn);
|——————————————————Node:call_expression Text: memory.setNodeNumber(std_nn)
|———————————————————Node:field_expression Text: memory.setNodeNumber
|————————————————————Node:identifier Text: memory
|————————————————————Node:. Text: .
|————————————————————Node:field_identifier Text: setNodeNumber
|———————————————————Node:argument_list Text: (std_nn)
|————————————————————Node:( Text: (
|————————————————————Node:identifier Text: std_nn
|————————————————————Node:) Text: )
|——————————————————Node:; Text: ;
|—————————————————Node:} Text: }
|————————————————Node:else_clause Text: else{
                        nodeId.setNodeNumber(0);
                        memory.setNodeNumber(0);
                    }
|—————————————————Node:else Text: else
|—————————————————Node:compound_statement Text: {
                        nodeId.setNodeNumber(0);
                        memory.setNodeNumber(0);
                    }
|——————————————————Node:{ Text: {
|——————————————————Node:expression_statement Text: nodeId.setNodeNumber(0);
|———————————————————Node:call_expression Text: nodeId.setNodeNumber(0)
|————————————————————Node:field_expression Text: nodeId.setNodeNumber
|—————————————————————Node:identifier Text: nodeId
|—————————————————————Node:. Text: .
|—————————————————————Node:field_identifier Text: setNodeNumber
|————————————————————Node:argument_list Text: (0)
|—————————————————————Node:( Text: (
|—————————————————————Node:number_literal Text: 0
|—————————————————————Node:) Text: )
|———————————————————Node:; Text: ;
|——————————————————Node:expression_statement Text: memory.setNodeNumber(0);
|———————————————————Node:call_expression Text: memory.setNodeNumber(0)
|————————————————————Node:field_expression Text: memory.setNodeNumber
|—————————————————————Node:identifier Text: memory
|—————————————————————Node:. Text: .
|—————————————————————Node:field_identifier Text: setNodeNumber
|————————————————————Node:argument_list Text: (0)
|—————————————————————Node:( Text: (
|—————————————————————Node:number_literal Text: 0
|—————————————————————Node:) Text: )
|———————————————————Node:; Text: ;
|——————————————————Node:} Text: }
|———————————————Node:} Text: }
|————————————Node:} Text: }
|————————Node:} Text: }
|——————Node:} Text: }
|———Node:} Text: }
|—Node:comment Text: /**
* Sends a can message
* \param msg Buffer to message. The size is 8 bytes.
*/
|—Node:function_definition Text: void MergCBUS::sendMessage(Message *msg){
    for (uint8_t i=0;i<CANDATA_SIZE;i++){
        mergCanData[i]=msg->getDataBuffer()[i];
    }
    sendCanMessage();
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: MergCBUS::sendMessage(Message *msg)
|———Node:qualified_identifier Text: MergCBUS::sendMessage
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: sendMessage
|———Node:parameter_list Text: (Message *msg)
|————Node:( Text: (
|————Node:parameter_declaration Text: Message *msg
|—————Node:type_identifier Text: Message
|—————Node:pointer_declarator Text: *msg
|——————Node:* Text: *
|——————Node:identifier Text: msg
|————Node:) Text: )
|——Node:compound_statement Text: {
    for (uint8_t i=0;i<CANDATA_SIZE;i++){
        mergCanData[i]=msg->getDataBuffer()[i];
    }
    sendCanMessage();
}
|———Node:{ Text: {
|———Node:for_statement Text: for (uint8_t i=0;i<CANDATA_SIZE;i++){
        mergCanData[i]=msg->getDataBuffer()[i];
    }
|————Node:for Text: for
|————Node:( Text: (
|————Node:declaration Text: uint8_t i=0;
|—————Node:primitive_type Text: uint8_t
|—————Node:init_declarator Text: i=0
|——————Node:identifier Text: i
|——————Node:= Text: =
|——————Node:number_literal Text: 0
|—————Node:; Text: ;
|————Node:binary_expression Text: i<CANDATA_SIZE
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:identifier Text: CANDATA_SIZE
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
        mergCanData[i]=msg->getDataBuffer()[i];
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: mergCanData[i]=msg->getDataBuffer()[i];
|——————Node:assignment_expression Text: mergCanData[i]=msg->getDataBuffer()[i]
|———————Node:subscript_expression Text: mergCanData[i]
|————————Node:identifier Text: mergCanData
|————————Node:subscript_argument_list Text: [i]
|—————————Node:[ Text: [
|—————————Node:identifier Text: i
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:subscript_expression Text: msg->getDataBuffer()[i]
|————————Node:call_expression Text: msg->getDataBuffer()
|—————————Node:field_expression Text: msg->getDataBuffer
|——————————Node:identifier Text: msg
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: getDataBuffer
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:subscript_argument_list Text: [i]
|—————————Node:[ Text: [
|—————————Node:identifier Text: i
|—————————Node:] Text: ]
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: sendCanMessage();
|————Node:call_expression Text: sendCanMessage()
|—————Node:identifier Text: sendCanMessage
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief Get the Index in memory of an event
 *
 * \param msg Pointer to a received message. It will use the node number and the event number from the msg *
 * \return Returns the index of the event in memory
 *
 */
|—Node:function_definition Text: uint8_t MergCBUS::getEventIndex(Message *msg){
    return memory.getEventIndex(msg->getNodeNumber(),msg->getEventNumber());
}
|——Node:primitive_type Text: uint8_t
|——Node:function_declarator Text: MergCBUS::getEventIndex(Message *msg)
|———Node:qualified_identifier Text: MergCBUS::getEventIndex
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: getEventIndex
|———Node:parameter_list Text: (Message *msg)
|————Node:( Text: (
|————Node:parameter_declaration Text: Message *msg
|—————Node:type_identifier Text: Message
|—————Node:pointer_declarator Text: *msg
|——————Node:* Text: *
|——————Node:identifier Text: msg
|————Node:) Text: )
|——Node:compound_statement Text: {
    return memory.getEventIndex(msg->getNodeNumber(),msg->getEventNumber());
}
|———Node:{ Text: {
|———Node:return_statement Text: return memory.getEventIndex(msg->getNodeNumber(),msg->getEventNumber());
|————Node:return Text: return
|————Node:call_expression Text: memory.getEventIndex(msg->getNodeNumber(),msg->getEventNumber())
|—————Node:field_expression Text: memory.getEventIndex
|——————Node:identifier Text: memory
|——————Node:. Text: .
|——————Node:field_identifier Text: getEventIndex
|—————Node:argument_list Text: (msg->getNodeNumber(),msg->getEventNumber())
|——————Node:( Text: (
|——————Node:call_expression Text: msg->getNodeNumber()
|———————Node:field_expression Text: msg->getNodeNumber
|————————Node:identifier Text: msg
|————————Node:-> Text: ->
|————————Node:field_identifier Text: getNodeNumber
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:, Text: ,
|——————Node:call_expression Text: msg->getEventNumber()
|———————Node:field_expression Text: msg->getEventNumber
|————————Node:identifier Text: msg
|————————Node:-> Text: ->
|————————Node:field_identifier Text: getEventNumber
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief Get node variable by index
 *
 * \param varIndex index of the variable
 * \return Returns the variable. One byte
 *
 */
|—Node:function_definition Text: byte MergCBUS::getNodeVar(byte varIndex){
    //the cbus index starts with 1
    return memory.getVar(varIndex-1);
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: MergCBUS::getNodeVar(byte varIndex)
|———Node:qualified_identifier Text: MergCBUS::getNodeVar
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: getNodeVar
|———Node:parameter_list Text: (byte varIndex)
|————Node:( Text: (
|————Node:parameter_declaration Text: byte varIndex
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: varIndex
|————Node:) Text: )
|——Node:compound_statement Text: {
    //the cbus index starts with 1
    return memory.getVar(varIndex-1);
}
|———Node:{ Text: {
|———Node:comment Text: //the cbus index starts with 1
|———Node:return_statement Text: return memory.getVar(varIndex-1);
|————Node:return Text: return
|————Node:call_expression Text: memory.getVar(varIndex-1)
|—————Node:field_expression Text: memory.getVar
|——————Node:identifier Text: memory
|——————Node:. Text: .
|——————Node:field_identifier Text: getVar
|—————Node:argument_list Text: (varIndex-1)
|——————Node:( Text: (
|——————Node:binary_expression Text: varIndex-1
|———————Node:identifier Text: varIndex
|———————Node:- Text: -
|———————Node:number_literal Text: 1
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief Get internal node variable by index
 *
 * \param varIndex index of the variable
 * \return Returns the variable. One byte
 *
 */
|—Node:function_definition Text: byte MergCBUS::getInternalNodeVar(byte varIndex){
    //the cbus index starts with 1
    return memory.getInternalVar(varIndex-1);
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: MergCBUS::getInternalNodeVar(byte varIndex)
|———Node:qualified_identifier Text: MergCBUS::getInternalNodeVar
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: getInternalNodeVar
|———Node:parameter_list Text: (byte varIndex)
|————Node:( Text: (
|————Node:parameter_declaration Text: byte varIndex
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: varIndex
|————Node:) Text: )
|——Node:compound_statement Text: {
    //the cbus index starts with 1
    return memory.getInternalVar(varIndex-1);
}
|———Node:{ Text: {
|———Node:comment Text: //the cbus index starts with 1
|———Node:return_statement Text: return memory.getInternalVar(varIndex-1);
|————Node:return Text: return
|————Node:call_expression Text: memory.getInternalVar(varIndex-1)
|—————Node:field_expression Text: memory.getInternalVar
|——————Node:identifier Text: memory
|——————Node:. Text: .
|——————Node:field_identifier Text: getInternalVar
|—————Node:argument_list Text: (varIndex-1)
|——————Node:( Text: (
|——————Node:binary_expression Text: varIndex-1
|———————Node:identifier Text: varIndex
|———————Node:- Text: -
|———————Node:number_literal Text: 1
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief Get the variable of a learned event
 *
 * \param msg Pointer to a received message. It will use the node number and the event number from the msg *
 * \param varIndex the index in the variable to be retrieved starting on 1.
 * \return Returns the variable value.
 *
 */
|—Node:function_definition Text: byte MergCBUS::getEventVar(Message *msg,byte varIndex){
    uint8_t idx;
    byte vidx;

    if (msg->isShortEvent()){
        idx=memory.getEventIndex(0,msg->getDeviceNumber());
    }
    else{
        idx=memory.getEventIndex(msg->getNodeNumber(),msg->getEventNumber());
    }

    if (varIndex>0){
        vidx=varIndex-1;
    }
    else {
        vidx=0;
    }

    if (idx<nodeId.getSuportedEvents()){
        return memory.getEventVar(idx,vidx);
    }
    return 0x00;

}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: MergCBUS::getEventVar(Message *msg,byte varIndex)
|———Node:qualified_identifier Text: MergCBUS::getEventVar
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: getEventVar
|———Node:parameter_list Text: (Message *msg,byte varIndex)
|————Node:( Text: (
|————Node:parameter_declaration Text: Message *msg
|—————Node:type_identifier Text: Message
|—————Node:pointer_declarator Text: *msg
|——————Node:* Text: *
|——————Node:identifier Text: msg
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte varIndex
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: varIndex
|————Node:) Text: )
|——Node:compound_statement Text: {
    uint8_t idx;
    byte vidx;

    if (msg->isShortEvent()){
        idx=memory.getEventIndex(0,msg->getDeviceNumber());
    }
    else{
        idx=memory.getEventIndex(msg->getNodeNumber(),msg->getEventNumber());
    }

    if (varIndex>0){
        vidx=varIndex-1;
    }
    else {
        vidx=0;
    }

    if (idx<nodeId.getSuportedEvents()){
        return memory.getEventVar(idx,vidx);
    }
    return 0x00;

}
|———Node:{ Text: {
|———Node:declaration Text: uint8_t idx;
|————Node:primitive_type Text: uint8_t
|————Node:identifier Text: idx
|————Node:; Text: ;
|———Node:declaration Text: byte vidx;
|————Node:type_identifier Text: byte
|————Node:identifier Text: vidx
|————Node:; Text: ;
|———Node:if_statement Text: if (msg->isShortEvent()){
        idx=memory.getEventIndex(0,msg->getDeviceNumber());
    }
    else{
        idx=memory.getEventIndex(msg->getNodeNumber(),msg->getEventNumber());
    }
|————Node:if Text: if
|————Node:condition_clause Text: (msg->isShortEvent())
|—————Node:( Text: (
|—————Node:call_expression Text: msg->isShortEvent()
|——————Node:field_expression Text: msg->isShortEvent
|———————Node:identifier Text: msg
|———————Node:-> Text: ->
|———————Node:field_identifier Text: isShortEvent
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        idx=memory.getEventIndex(0,msg->getDeviceNumber());
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: idx=memory.getEventIndex(0,msg->getDeviceNumber());
|——————Node:assignment_expression Text: idx=memory.getEventIndex(0,msg->getDeviceNumber())
|———————Node:identifier Text: idx
|———————Node:= Text: =
|———————Node:call_expression Text: memory.getEventIndex(0,msg->getDeviceNumber())
|————————Node:field_expression Text: memory.getEventIndex
|—————————Node:identifier Text: memory
|—————————Node:. Text: .
|—————————Node:field_identifier Text: getEventIndex
|————————Node:argument_list Text: (0,msg->getDeviceNumber())
|—————————Node:( Text: (
|—————————Node:number_literal Text: 0
|—————————Node:, Text: ,
|—————————Node:call_expression Text: msg->getDeviceNumber()
|——————————Node:field_expression Text: msg->getDeviceNumber
|———————————Node:identifier Text: msg
|———————————Node:-> Text: ->
|———————————Node:field_identifier Text: getDeviceNumber
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else{
        idx=memory.getEventIndex(msg->getNodeNumber(),msg->getEventNumber());
    }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
        idx=memory.getEventIndex(msg->getNodeNumber(),msg->getEventNumber());
    }
|——————Node:{ Text: {
|——————Node:expression_statement Text: idx=memory.getEventIndex(msg->getNodeNumber(),msg->getEventNumber());
|———————Node:assignment_expression Text: idx=memory.getEventIndex(msg->getNodeNumber(),msg->getEventNumber())
|————————Node:identifier Text: idx
|————————Node:= Text: =
|————————Node:call_expression Text: memory.getEventIndex(msg->getNodeNumber(),msg->getEventNumber())
|—————————Node:field_expression Text: memory.getEventIndex
|——————————Node:identifier Text: memory
|——————————Node:. Text: .
|——————————Node:field_identifier Text: getEventIndex
|—————————Node:argument_list Text: (msg->getNodeNumber(),msg->getEventNumber())
|——————————Node:( Text: (
|——————————Node:call_expression Text: msg->getNodeNumber()
|———————————Node:field_expression Text: msg->getNodeNumber
|————————————Node:identifier Text: msg
|————————————Node:-> Text: ->
|————————————Node:field_identifier Text: getNodeNumber
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:, Text: ,
|——————————Node:call_expression Text: msg->getEventNumber()
|———————————Node:field_expression Text: msg->getEventNumber
|————————————Node:identifier Text: msg
|————————————Node:-> Text: ->
|————————————Node:field_identifier Text: getEventNumber
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:} Text: }
|———Node:if_statement Text: if (varIndex>0){
        vidx=varIndex-1;
    }
    else {
        vidx=0;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (varIndex>0)
|—————Node:( Text: (
|—————Node:binary_expression Text: varIndex>0
|——————Node:identifier Text: varIndex
|——————Node:> Text: >
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {
        vidx=varIndex-1;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: vidx=varIndex-1;
|——————Node:assignment_expression Text: vidx=varIndex-1
|———————Node:identifier Text: vidx
|———————Node:= Text: =
|———————Node:binary_expression Text: varIndex-1
|————————Node:identifier Text: varIndex
|————————Node:- Text: -
|————————Node:number_literal Text: 1
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else {
        vidx=0;
    }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
        vidx=0;
    }
|——————Node:{ Text: {
|——————Node:expression_statement Text: vidx=0;
|———————Node:assignment_expression Text: vidx=0
|————————Node:identifier Text: vidx
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:} Text: }
|———Node:if_statement Text: if (idx<nodeId.getSuportedEvents()){
        return memory.getEventVar(idx,vidx);
    }
|————Node:if Text: if
|————Node:condition_clause Text: (idx<nodeId.getSuportedEvents())
|—————Node:( Text: (
|—————Node:binary_expression Text: idx<nodeId.getSuportedEvents()
|——————Node:identifier Text: idx
|——————Node:< Text: <
|——————Node:call_expression Text: nodeId.getSuportedEvents()
|———————Node:field_expression Text: nodeId.getSuportedEvents
|————————Node:identifier Text: nodeId
|————————Node:. Text: .
|————————Node:field_identifier Text: getSuportedEvents
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        return memory.getEventVar(idx,vidx);
    }
|—————Node:{ Text: {
|—————Node:return_statement Text: return memory.getEventVar(idx,vidx);
|——————Node:return Text: return
|——————Node:call_expression Text: memory.getEventVar(idx,vidx)
|———————Node:field_expression Text: memory.getEventVar
|————————Node:identifier Text: memory
|————————Node:. Text: .
|————————Node:field_identifier Text: getEventVar
|———————Node:argument_list Text: (idx,vidx)
|————————Node:( Text: (
|————————Node:identifier Text: idx
|————————Node:, Text: ,
|————————Node:identifier Text: vidx
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return 0x00;
|————Node:return Text: return
|————Node:number_literal Text: 0x00
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief Set the device number for a specific port
 *
 * \param val The device number
 * \param port Port assigned to the device number
 *
 */
|—Node:function_definition Text: void MergCBUS::setDeviceNumber(unsigned int val,byte port){
    memory.setDeviceNumber(val,port);
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: MergCBUS::setDeviceNumber(unsigned int val,byte port)
|———Node:qualified_identifier Text: MergCBUS::setDeviceNumber
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: setDeviceNumber
|———Node:parameter_list Text: (unsigned int val,byte port)
|————Node:( Text: (
|————Node:parameter_declaration Text: unsigned int val
|—————Node:sized_type_specifier Text: unsigned int
|——————Node:unsigned Text: unsigned
|——————Node:primitive_type Text: int
|—————Node:identifier Text: val
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte port
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: port
|————Node:) Text: )
|——Node:compound_statement Text: {
    memory.setDeviceNumber(val,port);
}
|———Node:{ Text: {
|———Node:expression_statement Text: memory.setDeviceNumber(val,port);
|————Node:call_expression Text: memory.setDeviceNumber(val,port)
|—————Node:field_expression Text: memory.setDeviceNumber
|——————Node:identifier Text: memory
|——————Node:. Text: .
|——————Node:field_identifier Text: setDeviceNumber
|—————Node:argument_list Text: (val,port)
|——————Node:( Text: (
|——————Node:identifier Text: val
|——————Node:, Text: ,
|——————Node:identifier Text: port
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief Get the device number for a specific port
 *
 * \param port Port assigned to the device number
 * \return The device number for the port or 0 if the index is out of bounds
 *
 */
|—Node:function_definition Text: unsigned int MergCBUS::getDeviceNumber(byte port){
    return memory.getDeviceNumber(port);
}
|——Node:sized_type_specifier Text: unsigned int
|———Node:unsigned Text: unsigned
|———Node:primitive_type Text: int
|——Node:function_declarator Text: MergCBUS::getDeviceNumber(byte port)
|———Node:qualified_identifier Text: MergCBUS::getDeviceNumber
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: getDeviceNumber
|———Node:parameter_list Text: (byte port)
|————Node:( Text: (
|————Node:parameter_declaration Text: byte port
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: port
|————Node:) Text: )
|——Node:compound_statement Text: {
    return memory.getDeviceNumber(port);
}
|———Node:{ Text: {
|———Node:return_statement Text: return memory.getDeviceNumber(port);
|————Node:return Text: return
|————Node:call_expression Text: memory.getDeviceNumber(port)
|—————Node:field_expression Text: memory.getDeviceNumber
|——————Node:identifier Text: memory
|——————Node:. Text: .
|——————Node:field_identifier Text: getDeviceNumber
|—————Node:argument_list Text: (port)
|——————Node:( Text: (
|——————Node:identifier Text: port
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief Send an On event, short or long
 *
 * \param longEvent True if it is a long On Event, otherwise sends a short event
 * \param event The event number
 * \return The result of the sendCanMessage()
 *
 */
|—Node:function_definition Text: byte MergCBUS::sendOnEvent(bool longEvent,unsigned int event){
    if (longEvent){
        prepareMessageBuff(OPC_ACON,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event));
    }
    else{
        prepareMessageBuff(OPC_ASON,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event));
    }
    return sendCanMessage();
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: MergCBUS::sendOnEvent(bool longEvent,unsigned int event)
|———Node:qualified_identifier Text: MergCBUS::sendOnEvent
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: sendOnEvent
|———Node:parameter_list Text: (bool longEvent,unsigned int event)
|————Node:( Text: (
|————Node:parameter_declaration Text: bool longEvent
|—————Node:primitive_type Text: bool
|—————Node:identifier Text: longEvent
|————Node:, Text: ,
|————Node:parameter_declaration Text: unsigned int event
|—————Node:sized_type_specifier Text: unsigned int
|——————Node:unsigned Text: unsigned
|——————Node:primitive_type Text: int
|—————Node:identifier Text: event
|————Node:) Text: )
|——Node:compound_statement Text: {
    if (longEvent){
        prepareMessageBuff(OPC_ACON,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event));
    }
    else{
        prepareMessageBuff(OPC_ASON,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event));
    }
    return sendCanMessage();
}
|———Node:{ Text: {
|———Node:if_statement Text: if (longEvent){
        prepareMessageBuff(OPC_ACON,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event));
    }
    else{
        prepareMessageBuff(OPC_ASON,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event));
    }
|————Node:if Text: if
|————Node:condition_clause Text: (longEvent)
|—————Node:( Text: (
|—————Node:identifier Text: longEvent
|—————Node:) Text: )
|————Node:compound_statement Text: {
        prepareMessageBuff(OPC_ACON,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event));
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: prepareMessageBuff(OPC_ACON,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event));
|——————Node:call_expression Text: prepareMessageBuff(OPC_ACON,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event))
|———————Node:identifier Text: prepareMessageBuff
|———————Node:argument_list Text: (OPC_ACON,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event))
|————————Node:( Text: (
|————————Node:identifier Text: OPC_ACON
|————————Node:, Text: ,
|————————Node:call_expression Text: highByte(nodeId.getNodeNumber())
|—————————Node:identifier Text: highByte
|—————————Node:argument_list Text: (nodeId.getNodeNumber())
|——————————Node:( Text: (
|——————————Node:call_expression Text: nodeId.getNodeNumber()
|———————————Node:field_expression Text: nodeId.getNodeNumber
|————————————Node:identifier Text: nodeId
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getNodeNumber
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:call_expression Text: lowByte(nodeId.getNodeNumber())
|—————————Node:identifier Text: lowByte
|—————————Node:argument_list Text: (nodeId.getNodeNumber())
|——————————Node:( Text: (
|——————————Node:call_expression Text: nodeId.getNodeNumber()
|———————————Node:field_expression Text: nodeId.getNodeNumber
|————————————Node:identifier Text: nodeId
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getNodeNumber
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:call_expression Text: highByte(event)
|—————————Node:identifier Text: highByte
|—————————Node:argument_list Text: (event)
|——————————Node:( Text: (
|——————————Node:identifier Text: event
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:call_expression Text: lowByte(event)
|—————————Node:identifier Text: lowByte
|—————————Node:argument_list Text: (event)
|——————————Node:( Text: (
|——————————Node:identifier Text: event
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else{
        prepareMessageBuff(OPC_ASON,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event));
    }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
        prepareMessageBuff(OPC_ASON,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event));
    }
|——————Node:{ Text: {
|——————Node:expression_statement Text: prepareMessageBuff(OPC_ASON,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event));
|———————Node:call_expression Text: prepareMessageBuff(OPC_ASON,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event))
|————————Node:identifier Text: prepareMessageBuff
|————————Node:argument_list Text: (OPC_ASON,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event))
|—————————Node:( Text: (
|—————————Node:identifier Text: OPC_ASON
|—————————Node:, Text: ,
|—————————Node:call_expression Text: highByte(nodeId.getNodeNumber())
|——————————Node:identifier Text: highByte
|——————————Node:argument_list Text: (nodeId.getNodeNumber())
|———————————Node:( Text: (
|———————————Node:call_expression Text: nodeId.getNodeNumber()
|————————————Node:field_expression Text: nodeId.getNodeNumber
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNodeNumber
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: lowByte(nodeId.getNodeNumber())
|——————————Node:identifier Text: lowByte
|——————————Node:argument_list Text: (nodeId.getNodeNumber())
|———————————Node:( Text: (
|———————————Node:call_expression Text: nodeId.getNodeNumber()
|————————————Node:field_expression Text: nodeId.getNodeNumber
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNodeNumber
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: highByte(event)
|——————————Node:identifier Text: highByte
|——————————Node:argument_list Text: (event)
|———————————Node:( Text: (
|———————————Node:identifier Text: event
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: lowByte(event)
|——————————Node:identifier Text: lowByte
|——————————Node:argument_list Text: (event)
|———————————Node:( Text: (
|———————————Node:identifier Text: event
|———————————Node:) Text: )
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:} Text: }
|———Node:return_statement Text: return sendCanMessage();
|————Node:return Text: return
|————Node:call_expression Text: sendCanMessage()
|—————Node:identifier Text: sendCanMessage
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief Send an Off event, short or long
 *
 * \param longEvent True if it is a long Off Event, otherwise sends a short event
 * \param event The event number
 * \return The result of the sendCanMessage()
 *
 */
|—Node:function_definition Text: byte MergCBUS::sendOffEvent(bool longEvent,unsigned int event){
    if (longEvent){
        prepareMessageBuff(OPC_ACOF,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event));
    }
    else{
        prepareMessageBuff(OPC_ASOF,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event));
    }
    return sendCanMessage();
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: MergCBUS::sendOffEvent(bool longEvent,unsigned int event)
|———Node:qualified_identifier Text: MergCBUS::sendOffEvent
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: sendOffEvent
|———Node:parameter_list Text: (bool longEvent,unsigned int event)
|————Node:( Text: (
|————Node:parameter_declaration Text: bool longEvent
|—————Node:primitive_type Text: bool
|—————Node:identifier Text: longEvent
|————Node:, Text: ,
|————Node:parameter_declaration Text: unsigned int event
|—————Node:sized_type_specifier Text: unsigned int
|——————Node:unsigned Text: unsigned
|——————Node:primitive_type Text: int
|—————Node:identifier Text: event
|————Node:) Text: )
|——Node:compound_statement Text: {
    if (longEvent){
        prepareMessageBuff(OPC_ACOF,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event));
    }
    else{
        prepareMessageBuff(OPC_ASOF,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event));
    }
    return sendCanMessage();
}
|———Node:{ Text: {
|———Node:if_statement Text: if (longEvent){
        prepareMessageBuff(OPC_ACOF,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event));
    }
    else{
        prepareMessageBuff(OPC_ASOF,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event));
    }
|————Node:if Text: if
|————Node:condition_clause Text: (longEvent)
|—————Node:( Text: (
|—————Node:identifier Text: longEvent
|—————Node:) Text: )
|————Node:compound_statement Text: {
        prepareMessageBuff(OPC_ACOF,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event));
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: prepareMessageBuff(OPC_ACOF,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event));
|——————Node:call_expression Text: prepareMessageBuff(OPC_ACOF,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event))
|———————Node:identifier Text: prepareMessageBuff
|———————Node:argument_list Text: (OPC_ACOF,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event))
|————————Node:( Text: (
|————————Node:identifier Text: OPC_ACOF
|————————Node:, Text: ,
|————————Node:call_expression Text: highByte(nodeId.getNodeNumber())
|—————————Node:identifier Text: highByte
|—————————Node:argument_list Text: (nodeId.getNodeNumber())
|——————————Node:( Text: (
|——————————Node:call_expression Text: nodeId.getNodeNumber()
|———————————Node:field_expression Text: nodeId.getNodeNumber
|————————————Node:identifier Text: nodeId
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getNodeNumber
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:call_expression Text: lowByte(nodeId.getNodeNumber())
|—————————Node:identifier Text: lowByte
|—————————Node:argument_list Text: (nodeId.getNodeNumber())
|——————————Node:( Text: (
|——————————Node:call_expression Text: nodeId.getNodeNumber()
|———————————Node:field_expression Text: nodeId.getNodeNumber
|————————————Node:identifier Text: nodeId
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getNodeNumber
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:call_expression Text: highByte(event)
|—————————Node:identifier Text: highByte
|—————————Node:argument_list Text: (event)
|——————————Node:( Text: (
|——————————Node:identifier Text: event
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:call_expression Text: lowByte(event)
|—————————Node:identifier Text: lowByte
|—————————Node:argument_list Text: (event)
|——————————Node:( Text: (
|——————————Node:identifier Text: event
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else{
        prepareMessageBuff(OPC_ASOF,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event));
    }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
        prepareMessageBuff(OPC_ASOF,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event));
    }
|——————Node:{ Text: {
|——————Node:expression_statement Text: prepareMessageBuff(OPC_ASOF,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event));
|———————Node:call_expression Text: prepareMessageBuff(OPC_ASOF,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event))
|————————Node:identifier Text: prepareMessageBuff
|————————Node:argument_list Text: (OPC_ASOF,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event))
|—————————Node:( Text: (
|—————————Node:identifier Text: OPC_ASOF
|—————————Node:, Text: ,
|—————————Node:call_expression Text: highByte(nodeId.getNodeNumber())
|——————————Node:identifier Text: highByte
|——————————Node:argument_list Text: (nodeId.getNodeNumber())
|———————————Node:( Text: (
|———————————Node:call_expression Text: nodeId.getNodeNumber()
|————————————Node:field_expression Text: nodeId.getNodeNumber
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNodeNumber
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: lowByte(nodeId.getNodeNumber())
|——————————Node:identifier Text: lowByte
|——————————Node:argument_list Text: (nodeId.getNodeNumber())
|———————————Node:( Text: (
|———————————Node:call_expression Text: nodeId.getNodeNumber()
|————————————Node:field_expression Text: nodeId.getNodeNumber
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNodeNumber
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: highByte(event)
|——————————Node:identifier Text: highByte
|——————————Node:argument_list Text: (event)
|———————————Node:( Text: (
|———————————Node:identifier Text: event
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: lowByte(event)
|——————————Node:identifier Text: lowByte
|——————————Node:argument_list Text: (event)
|———————————Node:( Text: (
|———————————Node:identifier Text: event
|———————————Node:) Text: )
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:} Text: }
|———Node:return_statement Text: return sendCanMessage();
|————Node:return Text: return
|————Node:call_expression Text: sendCanMessage()
|—————Node:identifier Text: sendCanMessage
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief Send an On event, short or long with one parameter
 *
 * \param longEvent True if it is a long On Event, otherwise sends a short event
 * \param event The event number
 * \param var1 The first parameter
 * \return The result of the sendCanMessage()
 *
 */
|—Node:function_definition Text: byte MergCBUS::sendOnEvent1(bool longEvent,unsigned int event,byte var1){
    if (longEvent){
        prepareMessageBuff(OPC_ACON1,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1);
    }
    else{
        prepareMessageBuff(OPC_ASON1,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1);
    }
    return sendCanMessage();
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: MergCBUS::sendOnEvent1(bool longEvent,unsigned int event,byte var1)
|———Node:qualified_identifier Text: MergCBUS::sendOnEvent1
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: sendOnEvent1
|———Node:parameter_list Text: (bool longEvent,unsigned int event,byte var1)
|————Node:( Text: (
|————Node:parameter_declaration Text: bool longEvent
|—————Node:primitive_type Text: bool
|—————Node:identifier Text: longEvent
|————Node:, Text: ,
|————Node:parameter_declaration Text: unsigned int event
|—————Node:sized_type_specifier Text: unsigned int
|——————Node:unsigned Text: unsigned
|——————Node:primitive_type Text: int
|—————Node:identifier Text: event
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte var1
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: var1
|————Node:) Text: )
|——Node:compound_statement Text: {
    if (longEvent){
        prepareMessageBuff(OPC_ACON1,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1);
    }
    else{
        prepareMessageBuff(OPC_ASON1,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1);
    }
    return sendCanMessage();
}
|———Node:{ Text: {
|———Node:if_statement Text: if (longEvent){
        prepareMessageBuff(OPC_ACON1,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1);
    }
    else{
        prepareMessageBuff(OPC_ASON1,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1);
    }
|————Node:if Text: if
|————Node:condition_clause Text: (longEvent)
|—————Node:( Text: (
|—————Node:identifier Text: longEvent
|—————Node:) Text: )
|————Node:compound_statement Text: {
        prepareMessageBuff(OPC_ACON1,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: prepareMessageBuff(OPC_ACON1,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1);
|——————Node:call_expression Text: prepareMessageBuff(OPC_ACON1,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1)
|———————Node:identifier Text: prepareMessageBuff
|———————Node:argument_list Text: (OPC_ACON1,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1)
|————————Node:( Text: (
|————————Node:identifier Text: OPC_ACON1
|————————Node:, Text: ,
|————————Node:call_expression Text: highByte(nodeId.getNodeNumber())
|—————————Node:identifier Text: highByte
|—————————Node:argument_list Text: (nodeId.getNodeNumber())
|——————————Node:( Text: (
|——————————Node:call_expression Text: nodeId.getNodeNumber()
|———————————Node:field_expression Text: nodeId.getNodeNumber
|————————————Node:identifier Text: nodeId
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getNodeNumber
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:call_expression Text: lowByte(nodeId.getNodeNumber())
|—————————Node:identifier Text: lowByte
|—————————Node:argument_list Text: (nodeId.getNodeNumber())
|——————————Node:( Text: (
|——————————Node:call_expression Text: nodeId.getNodeNumber()
|———————————Node:field_expression Text: nodeId.getNodeNumber
|————————————Node:identifier Text: nodeId
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getNodeNumber
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:call_expression Text: highByte(event)
|—————————Node:identifier Text: highByte
|—————————Node:argument_list Text: (event)
|——————————Node:( Text: (
|——————————Node:identifier Text: event
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:call_expression Text: lowByte(event)
|—————————Node:identifier Text: lowByte
|—————————Node:argument_list Text: (event)
|——————————Node:( Text: (
|——————————Node:identifier Text: event
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:identifier Text: var1
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else{
        prepareMessageBuff(OPC_ASON1,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1);
    }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
        prepareMessageBuff(OPC_ASON1,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1);
    }
|——————Node:{ Text: {
|——————Node:expression_statement Text: prepareMessageBuff(OPC_ASON1,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1);
|———————Node:call_expression Text: prepareMessageBuff(OPC_ASON1,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1)
|————————Node:identifier Text: prepareMessageBuff
|————————Node:argument_list Text: (OPC_ASON1,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1)
|—————————Node:( Text: (
|—————————Node:identifier Text: OPC_ASON1
|—————————Node:, Text: ,
|—————————Node:call_expression Text: highByte(nodeId.getNodeNumber())
|——————————Node:identifier Text: highByte
|——————————Node:argument_list Text: (nodeId.getNodeNumber())
|———————————Node:( Text: (
|———————————Node:call_expression Text: nodeId.getNodeNumber()
|————————————Node:field_expression Text: nodeId.getNodeNumber
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNodeNumber
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: lowByte(nodeId.getNodeNumber())
|——————————Node:identifier Text: lowByte
|——————————Node:argument_list Text: (nodeId.getNodeNumber())
|———————————Node:( Text: (
|———————————Node:call_expression Text: nodeId.getNodeNumber()
|————————————Node:field_expression Text: nodeId.getNodeNumber
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNodeNumber
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: highByte(event)
|——————————Node:identifier Text: highByte
|——————————Node:argument_list Text: (event)
|———————————Node:( Text: (
|———————————Node:identifier Text: event
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: lowByte(event)
|——————————Node:identifier Text: lowByte
|——————————Node:argument_list Text: (event)
|———————————Node:( Text: (
|———————————Node:identifier Text: event
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:identifier Text: var1
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:} Text: }
|———Node:return_statement Text: return sendCanMessage();
|————Node:return Text: return
|————Node:call_expression Text: sendCanMessage()
|—————Node:identifier Text: sendCanMessage
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief Send an Off event, short or long with one parameter
 *
 * \param longEvent True if it is a long Off Event, otherwise sends a short event
 * \param event The event number
 * \param var1 The first parameter
 * \return The result of the sendCanMessage()
 *
 */
|—Node:function_definition Text: byte MergCBUS::sendOffEvent1(bool longEvent,unsigned int event,byte var1){
    if (longEvent){
        prepareMessageBuff(OPC_ACOF1,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1);
    }
    else{
        prepareMessageBuff(OPC_ASOF1,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1);
    }
    return sendCanMessage();
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: MergCBUS::sendOffEvent1(bool longEvent,unsigned int event,byte var1)
|———Node:qualified_identifier Text: MergCBUS::sendOffEvent1
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: sendOffEvent1
|———Node:parameter_list Text: (bool longEvent,unsigned int event,byte var1)
|————Node:( Text: (
|————Node:parameter_declaration Text: bool longEvent
|—————Node:primitive_type Text: bool
|—————Node:identifier Text: longEvent
|————Node:, Text: ,
|————Node:parameter_declaration Text: unsigned int event
|—————Node:sized_type_specifier Text: unsigned int
|——————Node:unsigned Text: unsigned
|——————Node:primitive_type Text: int
|—————Node:identifier Text: event
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte var1
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: var1
|————Node:) Text: )
|——Node:compound_statement Text: {
    if (longEvent){
        prepareMessageBuff(OPC_ACOF1,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1);
    }
    else{
        prepareMessageBuff(OPC_ASOF1,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1);
    }
    return sendCanMessage();
}
|———Node:{ Text: {
|———Node:if_statement Text: if (longEvent){
        prepareMessageBuff(OPC_ACOF1,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1);
    }
    else{
        prepareMessageBuff(OPC_ASOF1,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1);
    }
|————Node:if Text: if
|————Node:condition_clause Text: (longEvent)
|—————Node:( Text: (
|—————Node:identifier Text: longEvent
|—————Node:) Text: )
|————Node:compound_statement Text: {
        prepareMessageBuff(OPC_ACOF1,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: prepareMessageBuff(OPC_ACOF1,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1);
|——————Node:call_expression Text: prepareMessageBuff(OPC_ACOF1,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1)
|———————Node:identifier Text: prepareMessageBuff
|———————Node:argument_list Text: (OPC_ACOF1,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1)
|————————Node:( Text: (
|————————Node:identifier Text: OPC_ACOF1
|————————Node:, Text: ,
|————————Node:call_expression Text: highByte(nodeId.getNodeNumber())
|—————————Node:identifier Text: highByte
|—————————Node:argument_list Text: (nodeId.getNodeNumber())
|——————————Node:( Text: (
|——————————Node:call_expression Text: nodeId.getNodeNumber()
|———————————Node:field_expression Text: nodeId.getNodeNumber
|————————————Node:identifier Text: nodeId
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getNodeNumber
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:call_expression Text: lowByte(nodeId.getNodeNumber())
|—————————Node:identifier Text: lowByte
|—————————Node:argument_list Text: (nodeId.getNodeNumber())
|——————————Node:( Text: (
|——————————Node:call_expression Text: nodeId.getNodeNumber()
|———————————Node:field_expression Text: nodeId.getNodeNumber
|————————————Node:identifier Text: nodeId
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getNodeNumber
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:call_expression Text: highByte(event)
|—————————Node:identifier Text: highByte
|—————————Node:argument_list Text: (event)
|——————————Node:( Text: (
|——————————Node:identifier Text: event
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:call_expression Text: lowByte(event)
|—————————Node:identifier Text: lowByte
|—————————Node:argument_list Text: (event)
|——————————Node:( Text: (
|——————————Node:identifier Text: event
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:identifier Text: var1
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else{
        prepareMessageBuff(OPC_ASOF1,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1);
    }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
        prepareMessageBuff(OPC_ASOF1,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1);
    }
|——————Node:{ Text: {
|——————Node:expression_statement Text: prepareMessageBuff(OPC_ASOF1,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1);
|———————Node:call_expression Text: prepareMessageBuff(OPC_ASOF1,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1)
|————————Node:identifier Text: prepareMessageBuff
|————————Node:argument_list Text: (OPC_ASOF1,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1)
|—————————Node:( Text: (
|—————————Node:identifier Text: OPC_ASOF1
|—————————Node:, Text: ,
|—————————Node:call_expression Text: highByte(nodeId.getNodeNumber())
|——————————Node:identifier Text: highByte
|——————————Node:argument_list Text: (nodeId.getNodeNumber())
|———————————Node:( Text: (
|———————————Node:call_expression Text: nodeId.getNodeNumber()
|————————————Node:field_expression Text: nodeId.getNodeNumber
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNodeNumber
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: lowByte(nodeId.getNodeNumber())
|——————————Node:identifier Text: lowByte
|——————————Node:argument_list Text: (nodeId.getNodeNumber())
|———————————Node:( Text: (
|———————————Node:call_expression Text: nodeId.getNodeNumber()
|————————————Node:field_expression Text: nodeId.getNodeNumber
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNodeNumber
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: highByte(event)
|——————————Node:identifier Text: highByte
|——————————Node:argument_list Text: (event)
|———————————Node:( Text: (
|———————————Node:identifier Text: event
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: lowByte(event)
|——————————Node:identifier Text: lowByte
|——————————Node:argument_list Text: (event)
|———————————Node:( Text: (
|———————————Node:identifier Text: event
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:identifier Text: var1
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:} Text: }
|———Node:return_statement Text: return sendCanMessage();
|————Node:return Text: return
|————Node:call_expression Text: sendCanMessage()
|—————Node:identifier Text: sendCanMessage
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief Send an On event, short or long with two parameters
 *
 * \param longEvent True if it is a long On Event, otherwise sends a short event
 * \param event The event number
 * \param var1 The first parameter
 * \param var2 The second parameter
 * \return The result of the sendCanMessage()
 *
 */
|—Node:function_definition Text: byte MergCBUS::sendOnEvent2(bool longEvent,unsigned int event,byte var1,byte var2){
    if (longEvent){
        prepareMessageBuff(OPC_ACON2,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2);
    }
    else{
        prepareMessageBuff(OPC_ASON2,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2);
    }

    return sendCanMessage();
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: MergCBUS::sendOnEvent2(bool longEvent,unsigned int event,byte var1,byte var2)
|———Node:qualified_identifier Text: MergCBUS::sendOnEvent2
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: sendOnEvent2
|———Node:parameter_list Text: (bool longEvent,unsigned int event,byte var1,byte var2)
|————Node:( Text: (
|————Node:parameter_declaration Text: bool longEvent
|—————Node:primitive_type Text: bool
|—————Node:identifier Text: longEvent
|————Node:, Text: ,
|————Node:parameter_declaration Text: unsigned int event
|—————Node:sized_type_specifier Text: unsigned int
|——————Node:unsigned Text: unsigned
|——————Node:primitive_type Text: int
|—————Node:identifier Text: event
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte var1
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: var1
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte var2
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: var2
|————Node:) Text: )
|——Node:compound_statement Text: {
    if (longEvent){
        prepareMessageBuff(OPC_ACON2,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2);
    }
    else{
        prepareMessageBuff(OPC_ASON2,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2);
    }

    return sendCanMessage();
}
|———Node:{ Text: {
|———Node:if_statement Text: if (longEvent){
        prepareMessageBuff(OPC_ACON2,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2);
    }
    else{
        prepareMessageBuff(OPC_ASON2,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2);
    }
|————Node:if Text: if
|————Node:condition_clause Text: (longEvent)
|—————Node:( Text: (
|—————Node:identifier Text: longEvent
|—————Node:) Text: )
|————Node:compound_statement Text: {
        prepareMessageBuff(OPC_ACON2,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: prepareMessageBuff(OPC_ACON2,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2);
|——————Node:call_expression Text: prepareMessageBuff(OPC_ACON2,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2)
|———————Node:identifier Text: prepareMessageBuff
|———————Node:argument_list Text: (OPC_ACON2,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2)
|————————Node:( Text: (
|————————Node:identifier Text: OPC_ACON2
|————————Node:, Text: ,
|————————Node:call_expression Text: highByte(nodeId.getNodeNumber())
|—————————Node:identifier Text: highByte
|—————————Node:argument_list Text: (nodeId.getNodeNumber())
|——————————Node:( Text: (
|——————————Node:call_expression Text: nodeId.getNodeNumber()
|———————————Node:field_expression Text: nodeId.getNodeNumber
|————————————Node:identifier Text: nodeId
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getNodeNumber
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:call_expression Text: lowByte(nodeId.getNodeNumber())
|—————————Node:identifier Text: lowByte
|—————————Node:argument_list Text: (nodeId.getNodeNumber())
|——————————Node:( Text: (
|——————————Node:call_expression Text: nodeId.getNodeNumber()
|———————————Node:field_expression Text: nodeId.getNodeNumber
|————————————Node:identifier Text: nodeId
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getNodeNumber
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:call_expression Text: highByte(event)
|—————————Node:identifier Text: highByte
|—————————Node:argument_list Text: (event)
|——————————Node:( Text: (
|——————————Node:identifier Text: event
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:call_expression Text: lowByte(event)
|—————————Node:identifier Text: lowByte
|—————————Node:argument_list Text: (event)
|——————————Node:( Text: (
|——————————Node:identifier Text: event
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:identifier Text: var1
|————————Node:, Text: ,
|————————Node:identifier Text: var2
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else{
        prepareMessageBuff(OPC_ASON2,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2);
    }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
        prepareMessageBuff(OPC_ASON2,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2);
    }
|——————Node:{ Text: {
|——————Node:expression_statement Text: prepareMessageBuff(OPC_ASON2,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2);
|———————Node:call_expression Text: prepareMessageBuff(OPC_ASON2,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2)
|————————Node:identifier Text: prepareMessageBuff
|————————Node:argument_list Text: (OPC_ASON2,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2)
|—————————Node:( Text: (
|—————————Node:identifier Text: OPC_ASON2
|—————————Node:, Text: ,
|—————————Node:call_expression Text: highByte(nodeId.getNodeNumber())
|——————————Node:identifier Text: highByte
|——————————Node:argument_list Text: (nodeId.getNodeNumber())
|———————————Node:( Text: (
|———————————Node:call_expression Text: nodeId.getNodeNumber()
|————————————Node:field_expression Text: nodeId.getNodeNumber
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNodeNumber
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: lowByte(nodeId.getNodeNumber())
|——————————Node:identifier Text: lowByte
|——————————Node:argument_list Text: (nodeId.getNodeNumber())
|———————————Node:( Text: (
|———————————Node:call_expression Text: nodeId.getNodeNumber()
|————————————Node:field_expression Text: nodeId.getNodeNumber
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNodeNumber
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: highByte(event)
|——————————Node:identifier Text: highByte
|——————————Node:argument_list Text: (event)
|———————————Node:( Text: (
|———————————Node:identifier Text: event
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: lowByte(event)
|——————————Node:identifier Text: lowByte
|——————————Node:argument_list Text: (event)
|———————————Node:( Text: (
|———————————Node:identifier Text: event
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:identifier Text: var1
|—————————Node:, Text: ,
|—————————Node:identifier Text: var2
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:} Text: }
|———Node:return_statement Text: return sendCanMessage();
|————Node:return Text: return
|————Node:call_expression Text: sendCanMessage()
|—————Node:identifier Text: sendCanMessage
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief Send an Off event, short or long with two parameters
 *
 * \param longEvent True if it is a long Off Event, otherwise sends a short event
 * \param event The event number
 * \param var1 The first parameter
 * \param var2 The second parameter
 * \return The result of the sendCanMessage()
 *
 */
|—Node:function_definition Text: byte MergCBUS::sendOffEvent2(bool longEvent,unsigned int event,byte var1,byte var2){
    if (longEvent){
        prepareMessageBuff(OPC_ACOF2,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2);
    }
    else{
        prepareMessageBuff(OPC_ASOF2,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2);
    }
    return sendCanMessage();
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: MergCBUS::sendOffEvent2(bool longEvent,unsigned int event,byte var1,byte var2)
|———Node:qualified_identifier Text: MergCBUS::sendOffEvent2
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: sendOffEvent2
|———Node:parameter_list Text: (bool longEvent,unsigned int event,byte var1,byte var2)
|————Node:( Text: (
|————Node:parameter_declaration Text: bool longEvent
|—————Node:primitive_type Text: bool
|—————Node:identifier Text: longEvent
|————Node:, Text: ,
|————Node:parameter_declaration Text: unsigned int event
|—————Node:sized_type_specifier Text: unsigned int
|——————Node:unsigned Text: unsigned
|——————Node:primitive_type Text: int
|—————Node:identifier Text: event
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte var1
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: var1
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte var2
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: var2
|————Node:) Text: )
|——Node:compound_statement Text: {
    if (longEvent){
        prepareMessageBuff(OPC_ACOF2,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2);
    }
    else{
        prepareMessageBuff(OPC_ASOF2,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2);
    }
    return sendCanMessage();
}
|———Node:{ Text: {
|———Node:if_statement Text: if (longEvent){
        prepareMessageBuff(OPC_ACOF2,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2);
    }
    else{
        prepareMessageBuff(OPC_ASOF2,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2);
    }
|————Node:if Text: if
|————Node:condition_clause Text: (longEvent)
|—————Node:( Text: (
|—————Node:identifier Text: longEvent
|—————Node:) Text: )
|————Node:compound_statement Text: {
        prepareMessageBuff(OPC_ACOF2,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: prepareMessageBuff(OPC_ACOF2,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2);
|——————Node:call_expression Text: prepareMessageBuff(OPC_ACOF2,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2)
|———————Node:identifier Text: prepareMessageBuff
|———————Node:argument_list Text: (OPC_ACOF2,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2)
|————————Node:( Text: (
|————————Node:identifier Text: OPC_ACOF2
|————————Node:, Text: ,
|————————Node:call_expression Text: highByte(nodeId.getNodeNumber())
|—————————Node:identifier Text: highByte
|—————————Node:argument_list Text: (nodeId.getNodeNumber())
|——————————Node:( Text: (
|——————————Node:call_expression Text: nodeId.getNodeNumber()
|———————————Node:field_expression Text: nodeId.getNodeNumber
|————————————Node:identifier Text: nodeId
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getNodeNumber
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:call_expression Text: lowByte(nodeId.getNodeNumber())
|—————————Node:identifier Text: lowByte
|—————————Node:argument_list Text: (nodeId.getNodeNumber())
|——————————Node:( Text: (
|——————————Node:call_expression Text: nodeId.getNodeNumber()
|———————————Node:field_expression Text: nodeId.getNodeNumber
|————————————Node:identifier Text: nodeId
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getNodeNumber
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:call_expression Text: highByte(event)
|—————————Node:identifier Text: highByte
|—————————Node:argument_list Text: (event)
|——————————Node:( Text: (
|——————————Node:identifier Text: event
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:call_expression Text: lowByte(event)
|—————————Node:identifier Text: lowByte
|—————————Node:argument_list Text: (event)
|——————————Node:( Text: (
|——————————Node:identifier Text: event
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:identifier Text: var1
|————————Node:, Text: ,
|————————Node:identifier Text: var2
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else{
        prepareMessageBuff(OPC_ASOF2,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2);
    }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
        prepareMessageBuff(OPC_ASOF2,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2);
    }
|——————Node:{ Text: {
|——————Node:expression_statement Text: prepareMessageBuff(OPC_ASOF2,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2);
|———————Node:call_expression Text: prepareMessageBuff(OPC_ASOF2,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2)
|————————Node:identifier Text: prepareMessageBuff
|————————Node:argument_list Text: (OPC_ASOF2,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2)
|—————————Node:( Text: (
|—————————Node:identifier Text: OPC_ASOF2
|—————————Node:, Text: ,
|—————————Node:call_expression Text: highByte(nodeId.getNodeNumber())
|——————————Node:identifier Text: highByte
|——————————Node:argument_list Text: (nodeId.getNodeNumber())
|———————————Node:( Text: (
|———————————Node:call_expression Text: nodeId.getNodeNumber()
|————————————Node:field_expression Text: nodeId.getNodeNumber
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNodeNumber
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: lowByte(nodeId.getNodeNumber())
|——————————Node:identifier Text: lowByte
|——————————Node:argument_list Text: (nodeId.getNodeNumber())
|———————————Node:( Text: (
|———————————Node:call_expression Text: nodeId.getNodeNumber()
|————————————Node:field_expression Text: nodeId.getNodeNumber
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNodeNumber
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: highByte(event)
|——————————Node:identifier Text: highByte
|——————————Node:argument_list Text: (event)
|———————————Node:( Text: (
|———————————Node:identifier Text: event
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: lowByte(event)
|——————————Node:identifier Text: lowByte
|——————————Node:argument_list Text: (event)
|———————————Node:( Text: (
|———————————Node:identifier Text: event
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:identifier Text: var1
|—————————Node:, Text: ,
|—————————Node:identifier Text: var2
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:} Text: }
|———Node:return_statement Text: return sendCanMessage();
|————Node:return Text: return
|————Node:call_expression Text: sendCanMessage()
|—————Node:identifier Text: sendCanMessage
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief Send an On event, short or long with three parameters
 *
 * \param longEvent True if it is a long On Event, otherwise sends a short event
 * \param event The event number
 * \param var1 The first parameter
 * \param var2 The second parameter
 * \param var3 The third parameter
 * \return The result of the sendCanMessage()
 *
 */
|—Node:function_definition Text: byte MergCBUS::sendOnEvent3(bool longEvent,unsigned int event,byte var1,byte var2,byte var3){
    if (longEvent){
        prepareMessageBuff(OPC_ACON3,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2,var3);
    }
    else{
        prepareMessageBuff(OPC_ASON3,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2,var3);
    }

    return sendCanMessage();
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: MergCBUS::sendOnEvent3(bool longEvent,unsigned int event,byte var1,byte var2,byte var3)
|———Node:qualified_identifier Text: MergCBUS::sendOnEvent3
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: sendOnEvent3
|———Node:parameter_list Text: (bool longEvent,unsigned int event,byte var1,byte var2,byte var3)
|————Node:( Text: (
|————Node:parameter_declaration Text: bool longEvent
|—————Node:primitive_type Text: bool
|—————Node:identifier Text: longEvent
|————Node:, Text: ,
|————Node:parameter_declaration Text: unsigned int event
|—————Node:sized_type_specifier Text: unsigned int
|——————Node:unsigned Text: unsigned
|——————Node:primitive_type Text: int
|—————Node:identifier Text: event
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte var1
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: var1
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte var2
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: var2
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte var3
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: var3
|————Node:) Text: )
|——Node:compound_statement Text: {
    if (longEvent){
        prepareMessageBuff(OPC_ACON3,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2,var3);
    }
    else{
        prepareMessageBuff(OPC_ASON3,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2,var3);
    }

    return sendCanMessage();
}
|———Node:{ Text: {
|———Node:if_statement Text: if (longEvent){
        prepareMessageBuff(OPC_ACON3,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2,var3);
    }
    else{
        prepareMessageBuff(OPC_ASON3,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2,var3);
    }
|————Node:if Text: if
|————Node:condition_clause Text: (longEvent)
|—————Node:( Text: (
|—————Node:identifier Text: longEvent
|—————Node:) Text: )
|————Node:compound_statement Text: {
        prepareMessageBuff(OPC_ACON3,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2,var3);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: prepareMessageBuff(OPC_ACON3,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2,var3);
|——————Node:call_expression Text: prepareMessageBuff(OPC_ACON3,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2,var3)
|———————Node:identifier Text: prepareMessageBuff
|———————Node:argument_list Text: (OPC_ACON3,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2,var3)
|————————Node:( Text: (
|————————Node:identifier Text: OPC_ACON3
|————————Node:, Text: ,
|————————Node:call_expression Text: highByte(nodeId.getNodeNumber())
|—————————Node:identifier Text: highByte
|—————————Node:argument_list Text: (nodeId.getNodeNumber())
|——————————Node:( Text: (
|——————————Node:call_expression Text: nodeId.getNodeNumber()
|———————————Node:field_expression Text: nodeId.getNodeNumber
|————————————Node:identifier Text: nodeId
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getNodeNumber
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:call_expression Text: lowByte(nodeId.getNodeNumber())
|—————————Node:identifier Text: lowByte
|—————————Node:argument_list Text: (nodeId.getNodeNumber())
|——————————Node:( Text: (
|——————————Node:call_expression Text: nodeId.getNodeNumber()
|———————————Node:field_expression Text: nodeId.getNodeNumber
|————————————Node:identifier Text: nodeId
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getNodeNumber
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:call_expression Text: highByte(event)
|—————————Node:identifier Text: highByte
|—————————Node:argument_list Text: (event)
|——————————Node:( Text: (
|——————————Node:identifier Text: event
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:call_expression Text: lowByte(event)
|—————————Node:identifier Text: lowByte
|—————————Node:argument_list Text: (event)
|——————————Node:( Text: (
|——————————Node:identifier Text: event
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:identifier Text: var1
|————————Node:, Text: ,
|————————Node:identifier Text: var2
|————————Node:, Text: ,
|————————Node:identifier Text: var3
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else{
        prepareMessageBuff(OPC_ASON3,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2,var3);
    }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
        prepareMessageBuff(OPC_ASON3,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2,var3);
    }
|——————Node:{ Text: {
|——————Node:expression_statement Text: prepareMessageBuff(OPC_ASON3,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2,var3);
|———————Node:call_expression Text: prepareMessageBuff(OPC_ASON3,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2,var3)
|————————Node:identifier Text: prepareMessageBuff
|————————Node:argument_list Text: (OPC_ASON3,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2,var3)
|—————————Node:( Text: (
|—————————Node:identifier Text: OPC_ASON3
|—————————Node:, Text: ,
|—————————Node:call_expression Text: highByte(nodeId.getNodeNumber())
|——————————Node:identifier Text: highByte
|——————————Node:argument_list Text: (nodeId.getNodeNumber())
|———————————Node:( Text: (
|———————————Node:call_expression Text: nodeId.getNodeNumber()
|————————————Node:field_expression Text: nodeId.getNodeNumber
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNodeNumber
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: lowByte(nodeId.getNodeNumber())
|——————————Node:identifier Text: lowByte
|——————————Node:argument_list Text: (nodeId.getNodeNumber())
|———————————Node:( Text: (
|———————————Node:call_expression Text: nodeId.getNodeNumber()
|————————————Node:field_expression Text: nodeId.getNodeNumber
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNodeNumber
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: highByte(event)
|——————————Node:identifier Text: highByte
|——————————Node:argument_list Text: (event)
|———————————Node:( Text: (
|———————————Node:identifier Text: event
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: lowByte(event)
|——————————Node:identifier Text: lowByte
|——————————Node:argument_list Text: (event)
|———————————Node:( Text: (
|———————————Node:identifier Text: event
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:identifier Text: var1
|—————————Node:, Text: ,
|—————————Node:identifier Text: var2
|—————————Node:, Text: ,
|—————————Node:identifier Text: var3
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:} Text: }
|———Node:return_statement Text: return sendCanMessage();
|————Node:return Text: return
|————Node:call_expression Text: sendCanMessage()
|—————Node:identifier Text: sendCanMessage
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief Send an Off event, short or long with three parameters
 *
 * \param longEvent True if it is a long Off Event, otherwise sends a short event
 * \param event The event number
 * \param var1 The first parameter
 * \param var2 The second parameter
 * \param var3 The third parameter
 * \return The result of the sendCanMessage()
 *
 */
|—Node:function_definition Text: byte MergCBUS::sendOffEvent3(bool longEvent,unsigned int event,byte var1,byte var2,byte var3){
    if (longEvent){
        prepareMessageBuff(OPC_ACOF3,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2,var3);
    }
    else{
        prepareMessageBuff(OPC_ASOF3,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2,var3);
    }
    return sendCanMessage();
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: MergCBUS::sendOffEvent3(bool longEvent,unsigned int event,byte var1,byte var2,byte var3)
|———Node:qualified_identifier Text: MergCBUS::sendOffEvent3
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: sendOffEvent3
|———Node:parameter_list Text: (bool longEvent,unsigned int event,byte var1,byte var2,byte var3)
|————Node:( Text: (
|————Node:parameter_declaration Text: bool longEvent
|—————Node:primitive_type Text: bool
|—————Node:identifier Text: longEvent
|————Node:, Text: ,
|————Node:parameter_declaration Text: unsigned int event
|—————Node:sized_type_specifier Text: unsigned int
|——————Node:unsigned Text: unsigned
|——————Node:primitive_type Text: int
|—————Node:identifier Text: event
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte var1
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: var1
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte var2
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: var2
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte var3
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: var3
|————Node:) Text: )
|——Node:compound_statement Text: {
    if (longEvent){
        prepareMessageBuff(OPC_ACOF3,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2,var3);
    }
    else{
        prepareMessageBuff(OPC_ASOF3,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2,var3);
    }
    return sendCanMessage();
}
|———Node:{ Text: {
|———Node:if_statement Text: if (longEvent){
        prepareMessageBuff(OPC_ACOF3,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2,var3);
    }
    else{
        prepareMessageBuff(OPC_ASOF3,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2,var3);
    }
|————Node:if Text: if
|————Node:condition_clause Text: (longEvent)
|—————Node:( Text: (
|—————Node:identifier Text: longEvent
|—————Node:) Text: )
|————Node:compound_statement Text: {
        prepareMessageBuff(OPC_ACOF3,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2,var3);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: prepareMessageBuff(OPC_ACOF3,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2,var3);
|——————Node:call_expression Text: prepareMessageBuff(OPC_ACOF3,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2,var3)
|———————Node:identifier Text: prepareMessageBuff
|———————Node:argument_list Text: (OPC_ACOF3,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2,var3)
|————————Node:( Text: (
|————————Node:identifier Text: OPC_ACOF3
|————————Node:, Text: ,
|————————Node:call_expression Text: highByte(nodeId.getNodeNumber())
|—————————Node:identifier Text: highByte
|—————————Node:argument_list Text: (nodeId.getNodeNumber())
|——————————Node:( Text: (
|——————————Node:call_expression Text: nodeId.getNodeNumber()
|———————————Node:field_expression Text: nodeId.getNodeNumber
|————————————Node:identifier Text: nodeId
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getNodeNumber
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:call_expression Text: lowByte(nodeId.getNodeNumber())
|—————————Node:identifier Text: lowByte
|—————————Node:argument_list Text: (nodeId.getNodeNumber())
|——————————Node:( Text: (
|——————————Node:call_expression Text: nodeId.getNodeNumber()
|———————————Node:field_expression Text: nodeId.getNodeNumber
|————————————Node:identifier Text: nodeId
|————————————Node:. Text: .
|————————————Node:field_identifier Text: getNodeNumber
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:call_expression Text: highByte(event)
|—————————Node:identifier Text: highByte
|—————————Node:argument_list Text: (event)
|——————————Node:( Text: (
|——————————Node:identifier Text: event
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:call_expression Text: lowByte(event)
|—————————Node:identifier Text: lowByte
|—————————Node:argument_list Text: (event)
|——————————Node:( Text: (
|——————————Node:identifier Text: event
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:identifier Text: var1
|————————Node:, Text: ,
|————————Node:identifier Text: var2
|————————Node:, Text: ,
|————————Node:identifier Text: var3
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else{
        prepareMessageBuff(OPC_ASOF3,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2,var3);
    }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
        prepareMessageBuff(OPC_ASOF3,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2,var3);
    }
|——————Node:{ Text: {
|——————Node:expression_statement Text: prepareMessageBuff(OPC_ASOF3,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2,var3);
|———————Node:call_expression Text: prepareMessageBuff(OPC_ASOF3,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2,var3)
|————————Node:identifier Text: prepareMessageBuff
|————————Node:argument_list Text: (OPC_ASOF3,highByte(nodeId.getNodeNumber()),lowByte(nodeId.getNodeNumber()),highByte(event),lowByte(event),var1,var2,var3)
|—————————Node:( Text: (
|—————————Node:identifier Text: OPC_ASOF3
|—————————Node:, Text: ,
|—————————Node:call_expression Text: highByte(nodeId.getNodeNumber())
|——————————Node:identifier Text: highByte
|——————————Node:argument_list Text: (nodeId.getNodeNumber())
|———————————Node:( Text: (
|———————————Node:call_expression Text: nodeId.getNodeNumber()
|————————————Node:field_expression Text: nodeId.getNodeNumber
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNodeNumber
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: lowByte(nodeId.getNodeNumber())
|——————————Node:identifier Text: lowByte
|——————————Node:argument_list Text: (nodeId.getNodeNumber())
|———————————Node:( Text: (
|———————————Node:call_expression Text: nodeId.getNodeNumber()
|————————————Node:field_expression Text: nodeId.getNodeNumber
|—————————————Node:identifier Text: nodeId
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: getNodeNumber
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: highByte(event)
|——————————Node:identifier Text: highByte
|——————————Node:argument_list Text: (event)
|———————————Node:( Text: (
|———————————Node:identifier Text: event
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:call_expression Text: lowByte(event)
|——————————Node:identifier Text: lowByte
|——————————Node:argument_list Text: (event)
|———————————Node:( Text: (
|———————————Node:identifier Text: event
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:identifier Text: var1
|—————————Node:, Text: ,
|—————————Node:identifier Text: var2
|—————————Node:, Text: ,
|—————————Node:identifier Text: var3
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:} Text: }
|———Node:return_statement Text: return sendCanMessage();
|————Node:return Text: return
|————Node:call_expression Text: sendCanMessage()
|—————Node:identifier Text: sendCanMessage
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief Sends a request session
 *
 * \param loco The DCC long or short address of a decoder
 * \return The result of the sendCanMessage()
 *
 */
|—Node:function_definition Text: byte MergCBUS::sendGetSession(uint16_t loco){
    byte H,L;
    //Serial.print("loco:");
    //Serial.print(loco);
    //Serial.print("\t");

    if (loco<=127){
        H=0;
        L=loco;
    }
    else if (loco <= 10239) {
        H=(loco>>8) | (0xA0);
        L=loco<<8;
    }
    else {
        return 255;
    }

    //Serial.print(H);
    //Serial.print("\t");
    //Serial.println(L);

    prepareMessageBuff(OPC_RLOC,H,L);

    return sendCanMessage();
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: MergCBUS::sendGetSession(uint16_t loco)
|———Node:qualified_identifier Text: MergCBUS::sendGetSession
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: sendGetSession
|———Node:parameter_list Text: (uint16_t loco)
|————Node:( Text: (
|————Node:parameter_declaration Text: uint16_t loco
|—————Node:primitive_type Text: uint16_t
|—————Node:identifier Text: loco
|————Node:) Text: )
|——Node:compound_statement Text: {
    byte H,L;
    //Serial.print("loco:");
    //Serial.print(loco);
    //Serial.print("\t");

    if (loco<=127){
        H=0;
        L=loco;
    }
    else if (loco <= 10239) {
        H=(loco>>8) | (0xA0);
        L=loco<<8;
    }
    else {
        return 255;
    }

    //Serial.print(H);
    //Serial.print("\t");
    //Serial.println(L);

    prepareMessageBuff(OPC_RLOC,H,L);

    return sendCanMessage();
}
|———Node:{ Text: {
|———Node:declaration Text: byte H,L;
|————Node:type_identifier Text: byte
|————Node:identifier Text: H
|————Node:, Text: ,
|————Node:identifier Text: L
|————Node:; Text: ;
|———Node:comment Text: //Serial.print("loco:");
|———Node:comment Text: //Serial.print(loco);
|———Node:comment Text: //Serial.print("\t");
|———Node:if_statement Text: if (loco<=127){
        H=0;
        L=loco;
    }
    else if (loco <= 10239) {
        H=(loco>>8) | (0xA0);
        L=loco<<8;
    }
    else {
        return 255;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (loco<=127)
|—————Node:( Text: (
|—————Node:binary_expression Text: loco<=127
|——————Node:identifier Text: loco
|——————Node:<= Text: <=
|——————Node:number_literal Text: 127
|—————Node:) Text: )
|————Node:compound_statement Text: {
        H=0;
        L=loco;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: H=0;
|——————Node:assignment_expression Text: H=0
|———————Node:identifier Text: H
|———————Node:= Text: =
|———————Node:number_literal Text: 0
|——————Node:; Text: ;
|—————Node:expression_statement Text: L=loco;
|——————Node:assignment_expression Text: L=loco
|———————Node:identifier Text: L
|———————Node:= Text: =
|———————Node:identifier Text: loco
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else if (loco <= 10239) {
        H=(loco>>8) | (0xA0);
        L=loco<<8;
    }
    else {
        return 255;
    }
|—————Node:else Text: else
|—————Node:if_statement Text: if (loco <= 10239) {
        H=(loco>>8) | (0xA0);
        L=loco<<8;
    }
    else {
        return 255;
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: (loco <= 10239)
|———————Node:( Text: (
|———————Node:binary_expression Text: loco <= 10239
|————————Node:identifier Text: loco
|————————Node:<= Text: <=
|————————Node:number_literal Text: 10239
|———————Node:) Text: )
|——————Node:compound_statement Text: {
        H=(loco>>8) | (0xA0);
        L=loco<<8;
    }
|———————Node:{ Text: {
|———————Node:expression_statement Text: H=(loco>>8) | (0xA0);
|————————Node:assignment_expression Text: H=(loco>>8) | (0xA0)
|—————————Node:identifier Text: H
|—————————Node:= Text: =
|—————————Node:binary_expression Text: (loco>>8) | (0xA0)
|——————————Node:parenthesized_expression Text: (loco>>8)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: loco>>8
|————————————Node:identifier Text: loco
|————————————Node:>> Text: >>
|————————————Node:number_literal Text: 8
|———————————Node:) Text: )
|——————————Node:| Text: |
|——————————Node:parenthesized_expression Text: (0xA0)
|———————————Node:( Text: (
|———————————Node:number_literal Text: 0xA0
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: L=loco<<8;
|————————Node:assignment_expression Text: L=loco<<8
|—————————Node:identifier Text: L
|—————————Node:= Text: =
|—————————Node:binary_expression Text: loco<<8
|——————————Node:identifier Text: loco
|——————————Node:<< Text: <<
|——————————Node:number_literal Text: 8
|————————Node:; Text: ;
|———————Node:} Text: }
|——————Node:else_clause Text: else {
        return 255;
    }
|———————Node:else Text: else
|———————Node:compound_statement Text: {
        return 255;
    }
|————————Node:{ Text: {
|————————Node:return_statement Text: return 255;
|—————————Node:return Text: return
|—————————Node:number_literal Text: 255
|—————————Node:; Text: ;
|————————Node:} Text: }
|———Node:comment Text: //Serial.print(H);
|———Node:comment Text: //Serial.print("\t");
|———Node:comment Text: //Serial.println(L);
|———Node:expression_statement Text: prepareMessageBuff(OPC_RLOC,H,L);
|————Node:call_expression Text: prepareMessageBuff(OPC_RLOC,H,L)
|—————Node:identifier Text: prepareMessageBuff
|—————Node:argument_list Text: (OPC_RLOC,H,L)
|——————Node:( Text: (
|——————Node:identifier Text: OPC_RLOC
|——————Node:, Text: ,
|——————Node:identifier Text: H
|——————Node:, Text: ,
|——————Node:identifier Text: L
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return sendCanMessage();
|————Node:return Text: return
|————Node:call_expression Text: sendCanMessage()
|—————Node:identifier Text: sendCanMessage
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief Sends a release session
 *
 * Used to dispatch or terminate a session in the DCC station.
 * \param locsession The session number alocated previously
 * \return The result of the sendCanMessage()
 *
 */
|—Node:function_definition Text: byte MergCBUS::sendReleaseSession(uint8_t locsession){

    prepareMessageBuff(OPC_KLOC,locsession);

    return sendCanMessage();
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: MergCBUS::sendReleaseSession(uint8_t locsession)
|———Node:qualified_identifier Text: MergCBUS::sendReleaseSession
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: sendReleaseSession
|———Node:parameter_list Text: (uint8_t locsession)
|————Node:( Text: (
|————Node:parameter_declaration Text: uint8_t locsession
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: locsession
|————Node:) Text: )
|——Node:compound_statement Text: {

    prepareMessageBuff(OPC_KLOC,locsession);

    return sendCanMessage();
}
|———Node:{ Text: {
|———Node:expression_statement Text: prepareMessageBuff(OPC_KLOC,locsession);
|————Node:call_expression Text: prepareMessageBuff(OPC_KLOC,locsession)
|—————Node:identifier Text: prepareMessageBuff
|—————Node:argument_list Text: (OPC_KLOC,locsession)
|——————Node:( Text: (
|——————Node:identifier Text: OPC_KLOC
|——————Node:, Text: ,
|——————Node:identifier Text: locsession
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return sendCanMessage();
|————Node:return Text: return
|————Node:call_expression Text: sendCanMessage()
|—————Node:identifier Text: sendCanMessage
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief Sends a keep alive message
 *
 * Once a session is allocated, the DCC station requires a keep alive each 2 seconds.
 * \param locsession The session number alocated previously
 * \return The result of the sendCanMessage()
 *
 */
|—Node:function_definition Text: byte MergCBUS::sendKeepAliveSession(uint8_t locsession){

    prepareMessageBuff(OPC_DKEEP,locsession);

    return sendCanMessage();
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: MergCBUS::sendKeepAliveSession(uint8_t locsession)
|———Node:qualified_identifier Text: MergCBUS::sendKeepAliveSession
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: sendKeepAliveSession
|———Node:parameter_list Text: (uint8_t locsession)
|————Node:( Text: (
|————Node:parameter_declaration Text: uint8_t locsession
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: locsession
|————Node:) Text: )
|——Node:compound_statement Text: {

    prepareMessageBuff(OPC_DKEEP,locsession);

    return sendCanMessage();
}
|———Node:{ Text: {
|———Node:expression_statement Text: prepareMessageBuff(OPC_DKEEP,locsession);
|————Node:call_expression Text: prepareMessageBuff(OPC_DKEEP,locsession)
|—————Node:identifier Text: prepareMessageBuff
|—————Node:argument_list Text: (OPC_DKEEP,locsession)
|——————Node:( Text: (
|——————Node:identifier Text: OPC_DKEEP
|——————Node:, Text: ,
|——————Node:identifier Text: locsession
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return sendCanMessage();
|————Node:return Text: return
|————Node:call_expression Text: sendCanMessage()
|—————Node:identifier Text: sendCanMessage
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief Set a speed and/or direction of a session
 *
 * Once a session is allocated, one can control the speed and the direction of
 * a locomotive by sending this message
 * \param locsession The session number alocated previously
 * \param speed The speed to set
 * \param dforward True if forward
 * \return The result of the sendCanMessage()
 *
 */
|—Node:function_definition Text: byte MergCBUS::sendSpeedDir(uint8_t locsession,uint8_t speed,bool dforward){

    byte dspd;
    dspd=speed & 0x7F;
    bitSet(dspd,7);
    if (!dforward){
        bitClear(dspd,7);
    }
    prepareMessageBuff(OPC_DSPD,locsession,dspd);

    return sendCanMessage();
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: MergCBUS::sendSpeedDir(uint8_t locsession,uint8_t speed,bool dforward)
|———Node:qualified_identifier Text: MergCBUS::sendSpeedDir
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: sendSpeedDir
|———Node:parameter_list Text: (uint8_t locsession,uint8_t speed,bool dforward)
|————Node:( Text: (
|————Node:parameter_declaration Text: uint8_t locsession
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: locsession
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint8_t speed
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: speed
|————Node:, Text: ,
|————Node:parameter_declaration Text: bool dforward
|—————Node:primitive_type Text: bool
|—————Node:identifier Text: dforward
|————Node:) Text: )
|——Node:compound_statement Text: {

    byte dspd;
    dspd=speed & 0x7F;
    bitSet(dspd,7);
    if (!dforward){
        bitClear(dspd,7);
    }
    prepareMessageBuff(OPC_DSPD,locsession,dspd);

    return sendCanMessage();
}
|———Node:{ Text: {
|———Node:declaration Text: byte dspd;
|————Node:type_identifier Text: byte
|————Node:identifier Text: dspd
|————Node:; Text: ;
|———Node:expression_statement Text: dspd=speed & 0x7F;
|————Node:assignment_expression Text: dspd=speed & 0x7F
|—————Node:identifier Text: dspd
|—————Node:= Text: =
|—————Node:binary_expression Text: speed & 0x7F
|——————Node:identifier Text: speed
|——————Node:& Text: &
|——————Node:number_literal Text: 0x7F
|————Node:; Text: ;
|———Node:expression_statement Text: bitSet(dspd,7);
|————Node:call_expression Text: bitSet(dspd,7)
|—————Node:identifier Text: bitSet
|—————Node:argument_list Text: (dspd,7)
|——————Node:( Text: (
|——————Node:identifier Text: dspd
|——————Node:, Text: ,
|——————Node:number_literal Text: 7
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (!dforward){
        bitClear(dspd,7);
    }
|————Node:if Text: if
|————Node:condition_clause Text: (!dforward)
|—————Node:( Text: (
|—————Node:unary_expression Text: !dforward
|——————Node:! Text: !
|——————Node:identifier Text: dforward
|—————Node:) Text: )
|————Node:compound_statement Text: {
        bitClear(dspd,7);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: bitClear(dspd,7);
|——————Node:call_expression Text: bitClear(dspd,7)
|———————Node:identifier Text: bitClear
|———————Node:argument_list Text: (dspd,7)
|————————Node:( Text: (
|————————Node:identifier Text: dspd
|————————Node:, Text: ,
|————————Node:number_literal Text: 7
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: prepareMessageBuff(OPC_DSPD,locsession,dspd);
|————Node:call_expression Text: prepareMessageBuff(OPC_DSPD,locsession,dspd)
|—————Node:identifier Text: prepareMessageBuff
|—————Node:argument_list Text: (OPC_DSPD,locsession,dspd)
|——————Node:( Text: (
|——————Node:identifier Text: OPC_DSPD
|——————Node:, Text: ,
|——————Node:identifier Text: locsession
|——————Node:, Text: ,
|——————Node:identifier Text: dspd
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return sendCanMessage();
|————Node:return Text: return
|————Node:call_expression Text: sendCanMessage()
|—————Node:identifier Text: sendCanMessage
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief Set a speed step mode
 *
 * Once a session is allocated, one can set the steps of how the speed will be set. The default is normally 128
 * \param locsession The session number alocated previously
 * \param mode The speed mode. See the developer guide for the possible values
 * \return The result of the sendCanMessage()
 *
 */
|—Node:function_definition Text: byte MergCBUS::sendSpeedMode(uint8_t locsession,uint8_t mode){
    prepareMessageBuff(OPC_STMOD,locsession,mode);
    return sendCanMessage();
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: MergCBUS::sendSpeedMode(uint8_t locsession,uint8_t mode)
|———Node:qualified_identifier Text: MergCBUS::sendSpeedMode
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: sendSpeedMode
|———Node:parameter_list Text: (uint8_t locsession,uint8_t mode)
|————Node:( Text: (
|————Node:parameter_declaration Text: uint8_t locsession
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: locsession
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint8_t mode
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: mode
|————Node:) Text: )
|——Node:compound_statement Text: {
    prepareMessageBuff(OPC_STMOD,locsession,mode);
    return sendCanMessage();
}
|———Node:{ Text: {
|———Node:expression_statement Text: prepareMessageBuff(OPC_STMOD,locsession,mode);
|————Node:call_expression Text: prepareMessageBuff(OPC_STMOD,locsession,mode)
|—————Node:identifier Text: prepareMessageBuff
|—————Node:argument_list Text: (OPC_STMOD,locsession,mode)
|——————Node:( Text: (
|——————Node:identifier Text: OPC_STMOD
|——————Node:, Text: ,
|——————Node:identifier Text: locsession
|——————Node:, Text: ,
|——————Node:identifier Text: mode
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return sendCanMessage();
|————Node:return Text: return
|————Node:call_expression Text: sendCanMessage()
|—————Node:identifier Text: sendCanMessage
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: byte MergCBUS::sendShareSession(uint16_t loco){
    return sendShareStealSession(loco,2);
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: MergCBUS::sendShareSession(uint16_t loco)
|———Node:qualified_identifier Text: MergCBUS::sendShareSession
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: sendShareSession
|———Node:parameter_list Text: (uint16_t loco)
|————Node:( Text: (
|————Node:parameter_declaration Text: uint16_t loco
|—————Node:primitive_type Text: uint16_t
|—————Node:identifier Text: loco
|————Node:) Text: )
|——Node:compound_statement Text: {
    return sendShareStealSession(loco,2);
}
|———Node:{ Text: {
|———Node:return_statement Text: return sendShareStealSession(loco,2);
|————Node:return Text: return
|————Node:call_expression Text: sendShareStealSession(loco,2)
|—————Node:identifier Text: sendShareStealSession
|—————Node:argument_list Text: (loco,2)
|——————Node:( Text: (
|——————Node:identifier Text: loco
|——————Node:, Text: ,
|——————Node:number_literal Text: 2
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: byte MergCBUS::sendStealSession(uint16_t loco){
    return sendShareStealSession(loco,1);
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: MergCBUS::sendStealSession(uint16_t loco)
|———Node:qualified_identifier Text: MergCBUS::sendStealSession
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: sendStealSession
|———Node:parameter_list Text: (uint16_t loco)
|————Node:( Text: (
|————Node:parameter_declaration Text: uint16_t loco
|—————Node:primitive_type Text: uint16_t
|—————Node:identifier Text: loco
|————Node:) Text: )
|——Node:compound_statement Text: {
    return sendShareStealSession(loco,1);
}
|———Node:{ Text: {
|———Node:return_statement Text: return sendShareStealSession(loco,1);
|————Node:return Text: return
|————Node:call_expression Text: sendShareStealSession(loco,1)
|—————Node:identifier Text: sendShareStealSession
|—————Node:argument_list Text: (loco,1)
|——————Node:( Text: (
|——————Node:identifier Text: loco
|——————Node:, Text: ,
|——————Node:number_literal Text: 1
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: byte MergCBUS::sendShareStealSession(uint16_t loco,uint8_t mode){
    byte H,L;

    if (loco<=127){
        H=0;
        L=loco<<8;
    }
    else if (loco <= 10239) {
        H=(loco>>8) | (0xA0);
        L=loco<<8;
    }
    else {
        return 255;
    }
    prepareMessageBuff(OPC_GLOC,H,L,mode);

    return sendCanMessage();

}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: MergCBUS::sendShareStealSession(uint16_t loco,uint8_t mode)
|———Node:qualified_identifier Text: MergCBUS::sendShareStealSession
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: sendShareStealSession
|———Node:parameter_list Text: (uint16_t loco,uint8_t mode)
|————Node:( Text: (
|————Node:parameter_declaration Text: uint16_t loco
|—————Node:primitive_type Text: uint16_t
|—————Node:identifier Text: loco
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint8_t mode
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: mode
|————Node:) Text: )
|——Node:compound_statement Text: {
    byte H,L;

    if (loco<=127){
        H=0;
        L=loco<<8;
    }
    else if (loco <= 10239) {
        H=(loco>>8) | (0xA0);
        L=loco<<8;
    }
    else {
        return 255;
    }
    prepareMessageBuff(OPC_GLOC,H,L,mode);

    return sendCanMessage();

}
|———Node:{ Text: {
|———Node:declaration Text: byte H,L;
|————Node:type_identifier Text: byte
|————Node:identifier Text: H
|————Node:, Text: ,
|————Node:identifier Text: L
|————Node:; Text: ;
|———Node:if_statement Text: if (loco<=127){
        H=0;
        L=loco<<8;
    }
    else if (loco <= 10239) {
        H=(loco>>8) | (0xA0);
        L=loco<<8;
    }
    else {
        return 255;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (loco<=127)
|—————Node:( Text: (
|—————Node:binary_expression Text: loco<=127
|——————Node:identifier Text: loco
|——————Node:<= Text: <=
|——————Node:number_literal Text: 127
|—————Node:) Text: )
|————Node:compound_statement Text: {
        H=0;
        L=loco<<8;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: H=0;
|——————Node:assignment_expression Text: H=0
|———————Node:identifier Text: H
|———————Node:= Text: =
|———————Node:number_literal Text: 0
|——————Node:; Text: ;
|—————Node:expression_statement Text: L=loco<<8;
|——————Node:assignment_expression Text: L=loco<<8
|———————Node:identifier Text: L
|———————Node:= Text: =
|———————Node:binary_expression Text: loco<<8
|————————Node:identifier Text: loco
|————————Node:<< Text: <<
|————————Node:number_literal Text: 8
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else if (loco <= 10239) {
        H=(loco>>8) | (0xA0);
        L=loco<<8;
    }
    else {
        return 255;
    }
|—————Node:else Text: else
|—————Node:if_statement Text: if (loco <= 10239) {
        H=(loco>>8) | (0xA0);
        L=loco<<8;
    }
    else {
        return 255;
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: (loco <= 10239)
|———————Node:( Text: (
|———————Node:binary_expression Text: loco <= 10239
|————————Node:identifier Text: loco
|————————Node:<= Text: <=
|————————Node:number_literal Text: 10239
|———————Node:) Text: )
|——————Node:compound_statement Text: {
        H=(loco>>8) | (0xA0);
        L=loco<<8;
    }
|———————Node:{ Text: {
|———————Node:expression_statement Text: H=(loco>>8) | (0xA0);
|————————Node:assignment_expression Text: H=(loco>>8) | (0xA0)
|—————————Node:identifier Text: H
|—————————Node:= Text: =
|—————————Node:binary_expression Text: (loco>>8) | (0xA0)
|——————————Node:parenthesized_expression Text: (loco>>8)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: loco>>8
|————————————Node:identifier Text: loco
|————————————Node:>> Text: >>
|————————————Node:number_literal Text: 8
|———————————Node:) Text: )
|——————————Node:| Text: |
|——————————Node:parenthesized_expression Text: (0xA0)
|———————————Node:( Text: (
|———————————Node:number_literal Text: 0xA0
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: L=loco<<8;
|————————Node:assignment_expression Text: L=loco<<8
|—————————Node:identifier Text: L
|—————————Node:= Text: =
|—————————Node:binary_expression Text: loco<<8
|——————————Node:identifier Text: loco
|——————————Node:<< Text: <<
|——————————Node:number_literal Text: 8
|————————Node:; Text: ;
|———————Node:} Text: }
|——————Node:else_clause Text: else {
        return 255;
    }
|———————Node:else Text: else
|———————Node:compound_statement Text: {
        return 255;
    }
|————————Node:{ Text: {
|————————Node:return_statement Text: return 255;
|—————————Node:return Text: return
|—————————Node:number_literal Text: 255
|—————————Node:; Text: ;
|————————Node:} Text: }
|———Node:expression_statement Text: prepareMessageBuff(OPC_GLOC,H,L,mode);
|————Node:call_expression Text: prepareMessageBuff(OPC_GLOC,H,L,mode)
|—————Node:identifier Text: prepareMessageBuff
|—————Node:argument_list Text: (OPC_GLOC,H,L,mode)
|——————Node:( Text: (
|——————Node:identifier Text: OPC_GLOC
|——————Node:, Text: ,
|——————Node:identifier Text: H
|——————Node:, Text: ,
|——————Node:identifier Text: L
|——————Node:, Text: ,
|——————Node:identifier Text: mode
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return sendCanMessage();
|————Node:return Text: return
|————Node:call_expression Text: sendCanMessage()
|—————Node:identifier Text: sendCanMessage
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief Set a Fn function to On
 *
 * Once a session is allocated, one can turn on and turn off the decoder functions (up to 28)
 * \param locsession The session number alocated previously
 * \param fn The function number
 * \return The result of the sendCanMessage()
 *
 */
|—Node:function_definition Text: byte MergCBUS::sendSetFun(uint8_t locsession,uint8_t fn){

    if (fn>28){
        return 255;
    }
    prepareMessageBuff(OPC_DFNON,locsession,fn);
    return sendCanMessage();
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: MergCBUS::sendSetFun(uint8_t locsession,uint8_t fn)
|———Node:qualified_identifier Text: MergCBUS::sendSetFun
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: sendSetFun
|———Node:parameter_list Text: (uint8_t locsession,uint8_t fn)
|————Node:( Text: (
|————Node:parameter_declaration Text: uint8_t locsession
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: locsession
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint8_t fn
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: fn
|————Node:) Text: )
|——Node:compound_statement Text: {

    if (fn>28){
        return 255;
    }
    prepareMessageBuff(OPC_DFNON,locsession,fn);
    return sendCanMessage();
}
|———Node:{ Text: {
|———Node:if_statement Text: if (fn>28){
        return 255;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (fn>28)
|—————Node:( Text: (
|—————Node:binary_expression Text: fn>28
|——————Node:identifier Text: fn
|——————Node:> Text: >
|——————Node:number_literal Text: 28
|—————Node:) Text: )
|————Node:compound_statement Text: {
        return 255;
    }
|—————Node:{ Text: {
|—————Node:return_statement Text: return 255;
|——————Node:return Text: return
|——————Node:number_literal Text: 255
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: prepareMessageBuff(OPC_DFNON,locsession,fn);
|————Node:call_expression Text: prepareMessageBuff(OPC_DFNON,locsession,fn)
|—————Node:identifier Text: prepareMessageBuff
|—————Node:argument_list Text: (OPC_DFNON,locsession,fn)
|——————Node:( Text: (
|——————Node:identifier Text: OPC_DFNON
|——————Node:, Text: ,
|——————Node:identifier Text: locsession
|——————Node:, Text: ,
|——————Node:identifier Text: fn
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return sendCanMessage();
|————Node:return Text: return
|————Node:call_expression Text: sendCanMessage()
|—————Node:identifier Text: sendCanMessage
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief Set a Fn function to Off
 *
 * Once a session is allocated, one can turn on and turn off the decoder functions (up to 28)
 * \param locsession The session number alocated previously
 * \param fn The function number
 * \return The result of the sendCanMessage()
 *
 */
|—Node:function_definition Text: byte MergCBUS::sendUnsetFun(uint8_t locsession,uint8_t fn){

    if (fn>28){
        return 255;
    }
    prepareMessageBuff(OPC_DFNOF,locsession,fn);
    return sendCanMessage();
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: MergCBUS::sendUnsetFun(uint8_t locsession,uint8_t fn)
|———Node:qualified_identifier Text: MergCBUS::sendUnsetFun
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: sendUnsetFun
|———Node:parameter_list Text: (uint8_t locsession,uint8_t fn)
|————Node:( Text: (
|————Node:parameter_declaration Text: uint8_t locsession
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: locsession
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint8_t fn
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: fn
|————Node:) Text: )
|——Node:compound_statement Text: {

    if (fn>28){
        return 255;
    }
    prepareMessageBuff(OPC_DFNOF,locsession,fn);
    return sendCanMessage();
}
|———Node:{ Text: {
|———Node:if_statement Text: if (fn>28){
        return 255;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (fn>28)
|—————Node:( Text: (
|—————Node:binary_expression Text: fn>28
|——————Node:identifier Text: fn
|——————Node:> Text: >
|——————Node:number_literal Text: 28
|—————Node:) Text: )
|————Node:compound_statement Text: {
        return 255;
    }
|—————Node:{ Text: {
|—————Node:return_statement Text: return 255;
|——————Node:return Text: return
|——————Node:number_literal Text: 255
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: prepareMessageBuff(OPC_DFNOF,locsession,fn);
|————Node:call_expression Text: prepareMessageBuff(OPC_DFNOF,locsession,fn)
|—————Node:identifier Text: prepareMessageBuff
|—————Node:argument_list Text: (OPC_DFNOF,locsession,fn)
|——————Node:( Text: (
|——————Node:identifier Text: OPC_DFNOF
|——————Node:, Text: ,
|——————Node:identifier Text: locsession
|——————Node:, Text: ,
|——————Node:identifier Text: fn
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return sendCanMessage();
|————Node:return Text: return
|————Node:call_expression Text: sendCanMessage()
|—————Node:identifier Text: sendCanMessage
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment Text: /** \brief
* Read the can bus message and  put in circular buffer.
* Used by the timer
* the buffer is 1 byte for the message size.1 byte for RTR, 4 bytes for header. 8 bytes to max message
* @return true if a message in the can bus.
*/
|—Node:function_definition Text: void MergCBUS::cbusRead(){
    byte len=0;//number of bytes read.
    byte bufIdx=110;//1 byte for the message size.1 byte for RTR, 4 bytes for header. 8 bytes to max message

    bool resp;
    //read buffer 0 and buffer 1
    for (uint8_t i=0;i<2;i++){
        resp=readCanBus(&buffer[bufIdx+6],&buffer[bufIdx+2],&len,i);
        if (resp){
            buffer[bufIdx]=len;

           #ifdef DEBUGMSG
            // print message
                int j=0;

                Serial.print("Message: ");
                for (j=0;j<len;j++){
                    Serial.print (buffer[bufIdx+6+j]);
                    Serial.print("\t");
                }
                Serial.print("Header: ");
                for (j=0;j<4;j++){
                    Serial.print (buffer[bufIdx+2+j]);
                    Serial.print("\t");
                }
                Serial.println();
            #endif // DEBUGDEF

            if (Can.isRTMMessage()==0){
                 #ifdef DEBUGDEF
                                Serial.println("readCanBus - unsetRTM");
                    #endif // DEBUGDEF

                buffer[bufIdx+1]=0;
            }
            else{
                #ifdef DEBUGDEF
                                Serial.println("readCanBus - setRTM");
                    #endif // DEBUGDEF
                buffer[bufIdx+1]=1;
            }
            msgBuffer.put(&buffer[bufIdx]);
          }
    }
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: MergCBUS::cbusRead()
|———Node:qualified_identifier Text: MergCBUS::cbusRead
|————Node:namespace_identifier Text: MergCBUS
|————Node::: Text: ::
|————Node:identifier Text: cbusRead
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    byte len=0;//number of bytes read.
    byte bufIdx=110;//1 byte for the message size.1 byte for RTR, 4 bytes for header. 8 bytes to max message

    bool resp;
    //read buffer 0 and buffer 1
    for (uint8_t i=0;i<2;i++){
        resp=readCanBus(&buffer[bufIdx+6],&buffer[bufIdx+2],&len,i);
        if (resp){
            buffer[bufIdx]=len;

           #ifdef DEBUGMSG
            // print message
                int j=0;

                Serial.print("Message: ");
                for (j=0;j<len;j++){
                    Serial.print (buffer[bufIdx+6+j]);
                    Serial.print("\t");
                }
                Serial.print("Header: ");
                for (j=0;j<4;j++){
                    Serial.print (buffer[bufIdx+2+j]);
                    Serial.print("\t");
                }
                Serial.println();
            #endif // DEBUGDEF

            if (Can.isRTMMessage()==0){
                 #ifdef DEBUGDEF
                                Serial.println("readCanBus - unsetRTM");
                    #endif // DEBUGDEF

                buffer[bufIdx+1]=0;
            }
            else{
                #ifdef DEBUGDEF
                                Serial.println("readCanBus - setRTM");
                    #endif // DEBUGDEF
                buffer[bufIdx+1]=1;
            }
            msgBuffer.put(&buffer[bufIdx]);
          }
    }
}
|———Node:{ Text: {
|———Node:declaration Text: byte len=0;
|————Node:type_identifier Text: byte
|————Node:init_declarator Text: len=0
|—————Node:identifier Text: len
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment Text: //number of bytes read.
|———Node:declaration Text: byte bufIdx=110;
|————Node:type_identifier Text: byte
|————Node:init_declarator Text: bufIdx=110
|—————Node:identifier Text: bufIdx
|—————Node:= Text: =
|—————Node:number_literal Text: 110
|————Node:; Text: ;
|———Node:comment Text: //1 byte for the message size.1 byte for RTR, 4 bytes for header. 8 bytes to max message
|———Node:declaration Text: bool resp;
|————Node:primitive_type Text: bool
|————Node:identifier Text: resp
|————Node:; Text: ;
|———Node:comment Text: //read buffer 0 and buffer 1
|———Node:for_statement Text: for (uint8_t i=0;i<2;i++){
        resp=readCanBus(&buffer[bufIdx+6],&buffer[bufIdx+2],&len,i);
        if (resp){
            buffer[bufIdx]=len;

           #ifdef DEBUGMSG
            // print message
                int j=0;

                Serial.print("Message: ");
                for (j=0;j<len;j++){
                    Serial.print (buffer[bufIdx+6+j]);
                    Serial.print("\t");
                }
                Serial.print("Header: ");
                for (j=0;j<4;j++){
                    Serial.print (buffer[bufIdx+2+j]);
                    Serial.print("\t");
                }
                Serial.println();
            #endif // DEBUGDEF

            if (Can.isRTMMessage()==0){
                 #ifdef DEBUGDEF
                                Serial.println("readCanBus - unsetRTM");
                    #endif // DEBUGDEF

                buffer[bufIdx+1]=0;
            }
            else{
                #ifdef DEBUGDEF
                                Serial.println("readCanBus - setRTM");
                    #endif // DEBUGDEF
                buffer[bufIdx+1]=1;
            }
            msgBuffer.put(&buffer[bufIdx]);
          }
    }
|————Node:for Text: for
|————Node:( Text: (
|————Node:declaration Text: uint8_t i=0;
|—————Node:primitive_type Text: uint8_t
|—————Node:init_declarator Text: i=0
|——————Node:identifier Text: i
|——————Node:= Text: =
|——————Node:number_literal Text: 0
|—————Node:; Text: ;
|————Node:binary_expression Text: i<2
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:number_literal Text: 2
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
        resp=readCanBus(&buffer[bufIdx+6],&buffer[bufIdx+2],&len,i);
        if (resp){
            buffer[bufIdx]=len;

           #ifdef DEBUGMSG
            // print message
                int j=0;

                Serial.print("Message: ");
                for (j=0;j<len;j++){
                    Serial.print (buffer[bufIdx+6+j]);
                    Serial.print("\t");
                }
                Serial.print("Header: ");
                for (j=0;j<4;j++){
                    Serial.print (buffer[bufIdx+2+j]);
                    Serial.print("\t");
                }
                Serial.println();
            #endif // DEBUGDEF

            if (Can.isRTMMessage()==0){
                 #ifdef DEBUGDEF
                                Serial.println("readCanBus - unsetRTM");
                    #endif // DEBUGDEF

                buffer[bufIdx+1]=0;
            }
            else{
                #ifdef DEBUGDEF
                                Serial.println("readCanBus - setRTM");
                    #endif // DEBUGDEF
                buffer[bufIdx+1]=1;
            }
            msgBuffer.put(&buffer[bufIdx]);
          }
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: resp=readCanBus(&buffer[bufIdx+6],&buffer[bufIdx+2],&len,i);
|——————Node:assignment_expression Text: resp=readCanBus(&buffer[bufIdx+6],&buffer[bufIdx+2],&len,i)
|———————Node:identifier Text: resp
|———————Node:= Text: =
|———————Node:call_expression Text: readCanBus(&buffer[bufIdx+6],&buffer[bufIdx+2],&len,i)
|————————Node:identifier Text: readCanBus
|————————Node:argument_list Text: (&buffer[bufIdx+6],&buffer[bufIdx+2],&len,i)
|—————————Node:( Text: (
|—————————Node:pointer_expression Text: &buffer[bufIdx+6]
|——————————Node:& Text: &
|——————————Node:subscript_expression Text: buffer[bufIdx+6]
|———————————Node:identifier Text: buffer
|———————————Node:subscript_argument_list Text: [bufIdx+6]
|————————————Node:[ Text: [
|————————————Node:binary_expression Text: bufIdx+6
|—————————————Node:identifier Text: bufIdx
|—————————————Node:+ Text: +
|—————————————Node:number_literal Text: 6
|————————————Node:] Text: ]
|—————————Node:, Text: ,
|—————————Node:pointer_expression Text: &buffer[bufIdx+2]
|——————————Node:& Text: &
|——————————Node:subscript_expression Text: buffer[bufIdx+2]
|———————————Node:identifier Text: buffer
|———————————Node:subscript_argument_list Text: [bufIdx+2]
|————————————Node:[ Text: [
|————————————Node:binary_expression Text: bufIdx+2
|—————————————Node:identifier Text: bufIdx
|—————————————Node:+ Text: +
|—————————————Node:number_literal Text: 2
|————————————Node:] Text: ]
|—————————Node:, Text: ,
|—————————Node:pointer_expression Text: &len
|——————————Node:& Text: &
|——————————Node:identifier Text: len
|—————————Node:, Text: ,
|—————————Node:identifier Text: i
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (resp){
            buffer[bufIdx]=len;

           #ifdef DEBUGMSG
            // print message
                int j=0;

                Serial.print("Message: ");
                for (j=0;j<len;j++){
                    Serial.print (buffer[bufIdx+6+j]);
                    Serial.print("\t");
                }
                Serial.print("Header: ");
                for (j=0;j<4;j++){
                    Serial.print (buffer[bufIdx+2+j]);
                    Serial.print("\t");
                }
                Serial.println();
            #endif // DEBUGDEF

            if (Can.isRTMMessage()==0){
                 #ifdef DEBUGDEF
                                Serial.println("readCanBus - unsetRTM");
                    #endif // DEBUGDEF

                buffer[bufIdx+1]=0;
            }
            else{
                #ifdef DEBUGDEF
                                Serial.println("readCanBus - setRTM");
                    #endif // DEBUGDEF
                buffer[bufIdx+1]=1;
            }
            msgBuffer.put(&buffer[bufIdx]);
          }
|——————Node:if Text: if
|——————Node:condition_clause Text: (resp)
|———————Node:( Text: (
|———————Node:identifier Text: resp
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            buffer[bufIdx]=len;

           #ifdef DEBUGMSG
            // print message
                int j=0;

                Serial.print("Message: ");
                for (j=0;j<len;j++){
                    Serial.print (buffer[bufIdx+6+j]);
                    Serial.print("\t");
                }
                Serial.print("Header: ");
                for (j=0;j<4;j++){
                    Serial.print (buffer[bufIdx+2+j]);
                    Serial.print("\t");
                }
                Serial.println();
            #endif // DEBUGDEF

            if (Can.isRTMMessage()==0){
                 #ifdef DEBUGDEF
                                Serial.println("readCanBus - unsetRTM");
                    #endif // DEBUGDEF

                buffer[bufIdx+1]=0;
            }
            else{
                #ifdef DEBUGDEF
                                Serial.println("readCanBus - setRTM");
                    #endif // DEBUGDEF
                buffer[bufIdx+1]=1;
            }
            msgBuffer.put(&buffer[bufIdx]);
          }
|———————Node:{ Text: {
|———————Node:expression_statement Text: buffer[bufIdx]=len;
|————————Node:assignment_expression Text: buffer[bufIdx]=len
|—————————Node:subscript_expression Text: buffer[bufIdx]
|——————————Node:identifier Text: buffer
|——————————Node:subscript_argument_list Text: [bufIdx]
|———————————Node:[ Text: [
|———————————Node:identifier Text: bufIdx
|———————————Node:] Text: ]
|—————————Node:= Text: =
|—————————Node:identifier Text: len
|————————Node:; Text: ;
|———————Node:preproc_ifdef Text: #ifdef DEBUGMSG
            // print message
                int j=0;

                Serial.print("Message: ");
                for (j=0;j<len;j++){
                    Serial.print (buffer[bufIdx+6+j]);
                    Serial.print("\t");
                }
                Serial.print("Header: ");
                for (j=0;j<4;j++){
                    Serial.print (buffer[bufIdx+2+j]);
                    Serial.print("\t");
                }
                Serial.println();
            #endif
|————————Node:#ifdef Text: #ifdef
|————————Node:identifier Text: DEBUGMSG
|————————Node:comment Text: // print message
|————————Node:declaration Text: int j=0;
|—————————Node:primitive_type Text: int
|—————————Node:init_declarator Text: j=0
|——————————Node:identifier Text: j
|——————————Node:= Text: =
|——————————Node:number_literal Text: 0
|—————————Node:; Text: ;
|————————Node:expression_statement Text: Serial.print("Message: ");
|—————————Node:call_expression Text: Serial.print("Message: ")
|——————————Node:field_expression Text: Serial.print
|———————————Node:identifier Text: Serial
|———————————Node:. Text: .
|———————————Node:field_identifier Text: print
|——————————Node:argument_list Text: ("Message: ")
|———————————Node:( Text: (
|———————————Node:string_literal Text: "Message: "
|————————————Node:" Text: "
|————————————Node:string_content Text: Message: 
|————————————Node:" Text: "
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:for_statement Text: for (j=0;j<len;j++){
                    Serial.print (buffer[bufIdx+6+j]);
                    Serial.print("\t");
                }
|—————————Node:for Text: for
|—————————Node:( Text: (
|—————————Node:assignment_expression Text: j=0
|——————————Node:identifier Text: j
|——————————Node:= Text: =
|——————————Node:number_literal Text: 0
|—————————Node:; Text: ;
|—————————Node:binary_expression Text: j<len
|——————————Node:identifier Text: j
|——————————Node:< Text: <
|——————————Node:identifier Text: len
|—————————Node:; Text: ;
|—————————Node:update_expression Text: j++
|——————————Node:identifier Text: j
|——————————Node:++ Text: ++
|—————————Node:) Text: )
|—————————Node:compound_statement Text: {
                    Serial.print (buffer[bufIdx+6+j]);
                    Serial.print("\t");
                }
|——————————Node:{ Text: {
|——————————Node:expression_statement Text: Serial.print (buffer[bufIdx+6+j]);
|———————————Node:call_expression Text: Serial.print (buffer[bufIdx+6+j])
|————————————Node:field_expression Text: Serial.print
|—————————————Node:identifier Text: Serial
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: print
|————————————Node:argument_list Text: (buffer[bufIdx+6+j])
|—————————————Node:( Text: (
|—————————————Node:subscript_expression Text: buffer[bufIdx+6+j]
|——————————————Node:identifier Text: buffer
|——————————————Node:subscript_argument_list Text: [bufIdx+6+j]
|———————————————Node:[ Text: [
|———————————————Node:binary_expression Text: bufIdx+6+j
|————————————————Node:binary_expression Text: bufIdx+6
|—————————————————Node:identifier Text: bufIdx
|—————————————————Node:+ Text: +
|—————————————————Node:number_literal Text: 6
|————————————————Node:+ Text: +
|————————————————Node:identifier Text: j
|———————————————Node:] Text: ]
|—————————————Node:) Text: )
|———————————Node:; Text: ;
|——————————Node:expression_statement Text: Serial.print("\t");
|———————————Node:call_expression Text: Serial.print("\t")
|————————————Node:field_expression Text: Serial.print
|—————————————Node:identifier Text: Serial
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: print
|————————————Node:argument_list Text: ("\t")
|—————————————Node:( Text: (
|—————————————Node:string_literal Text: "\t"
|——————————————Node:" Text: "
|——————————————Node:escape_sequence Text: \t
|——————————————Node:" Text: "
|—————————————Node:) Text: )
|———————————Node:; Text: ;
|——————————Node:} Text: }
|————————Node:expression_statement Text: Serial.print("Header: ");
|—————————Node:call_expression Text: Serial.print("Header: ")
|——————————Node:field_expression Text: Serial.print
|———————————Node:identifier Text: Serial
|———————————Node:. Text: .
|———————————Node:field_identifier Text: print
|——————————Node:argument_list Text: ("Header: ")
|———————————Node:( Text: (
|———————————Node:string_literal Text: "Header: "
|————————————Node:" Text: "
|————————————Node:string_content Text: Header: 
|————————————Node:" Text: "
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:for_statement Text: for (j=0;j<4;j++){
                    Serial.print (buffer[bufIdx+2+j]);
                    Serial.print("\t");
                }
|—————————Node:for Text: for
|—————————Node:( Text: (
|—————————Node:assignment_expression Text: j=0
|——————————Node:identifier Text: j
|——————————Node:= Text: =
|——————————Node:number_literal Text: 0
|—————————Node:; Text: ;
|—————————Node:binary_expression Text: j<4
|——————————Node:identifier Text: j
|——————————Node:< Text: <
|——————————Node:number_literal Text: 4
|—————————Node:; Text: ;
|—————————Node:update_expression Text: j++
|——————————Node:identifier Text: j
|——————————Node:++ Text: ++
|—————————Node:) Text: )
|—————————Node:compound_statement Text: {
                    Serial.print (buffer[bufIdx+2+j]);
                    Serial.print("\t");
                }
|——————————Node:{ Text: {
|——————————Node:expression_statement Text: Serial.print (buffer[bufIdx+2+j]);
|———————————Node:call_expression Text: Serial.print (buffer[bufIdx+2+j])
|————————————Node:field_expression Text: Serial.print
|—————————————Node:identifier Text: Serial
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: print
|————————————Node:argument_list Text: (buffer[bufIdx+2+j])
|—————————————Node:( Text: (
|—————————————Node:subscript_expression Text: buffer[bufIdx+2+j]
|——————————————Node:identifier Text: buffer
|——————————————Node:subscript_argument_list Text: [bufIdx+2+j]
|———————————————Node:[ Text: [
|———————————————Node:binary_expression Text: bufIdx+2+j
|————————————————Node:binary_expression Text: bufIdx+2
|—————————————————Node:identifier Text: bufIdx
|—————————————————Node:+ Text: +
|—————————————————Node:number_literal Text: 2
|————————————————Node:+ Text: +
|————————————————Node:identifier Text: j
|———————————————Node:] Text: ]
|—————————————Node:) Text: )
|———————————Node:; Text: ;
|——————————Node:expression_statement Text: Serial.print("\t");
|———————————Node:call_expression Text: Serial.print("\t")
|————————————Node:field_expression Text: Serial.print
|—————————————Node:identifier Text: Serial
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: print
|————————————Node:argument_list Text: ("\t")
|—————————————Node:( Text: (
|—————————————Node:string_literal Text: "\t"
|——————————————Node:" Text: "
|——————————————Node:escape_sequence Text: \t
|——————————————Node:" Text: "
|—————————————Node:) Text: )
|———————————Node:; Text: ;
|——————————Node:} Text: }
|————————Node:expression_statement Text: Serial.println();
|—————————Node:call_expression Text: Serial.println()
|——————————Node:field_expression Text: Serial.println
|———————————Node:identifier Text: Serial
|———————————Node:. Text: .
|———————————Node:field_identifier Text: println
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:#endif Text: #endif
|———————Node:comment Text: // DEBUGDEF
|———————Node:if_statement Text: if (Can.isRTMMessage()==0){
                 #ifdef DEBUGDEF
                                Serial.println("readCanBus - unsetRTM");
                    #endif // DEBUGDEF

                buffer[bufIdx+1]=0;
            }
            else{
                #ifdef DEBUGDEF
                                Serial.println("readCanBus - setRTM");
                    #endif // DEBUGDEF
                buffer[bufIdx+1]=1;
            }
|————————Node:if Text: if
|————————Node:condition_clause Text: (Can.isRTMMessage()==0)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: Can.isRTMMessage()==0
|——————————Node:call_expression Text: Can.isRTMMessage()
|———————————Node:field_expression Text: Can.isRTMMessage
|————————————Node:identifier Text: Can
|————————————Node:. Text: .
|————————————Node:field_identifier Text: isRTMMessage
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:== Text: ==
|——————————Node:number_literal Text: 0
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
                 #ifdef DEBUGDEF
                                Serial.println("readCanBus - unsetRTM");
                    #endif // DEBUGDEF

                buffer[bufIdx+1]=0;
            }
|—————————Node:{ Text: {
|—————————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                                Serial.println("readCanBus - unsetRTM");
                    #endif
|——————————Node:#ifdef Text: #ifdef
|——————————Node:identifier Text: DEBUGDEF
|——————————Node:expression_statement Text: Serial.println("readCanBus - unsetRTM");
|———————————Node:call_expression Text: Serial.println("readCanBus - unsetRTM")
|————————————Node:field_expression Text: Serial.println
|—————————————Node:identifier Text: Serial
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: println
|————————————Node:argument_list Text: ("readCanBus - unsetRTM")
|—————————————Node:( Text: (
|—————————————Node:string_literal Text: "readCanBus - unsetRTM"
|——————————————Node:" Text: "
|——————————————Node:string_content Text: readCanBus - unsetRTM
|——————————————Node:" Text: "
|—————————————Node:) Text: )
|———————————Node:; Text: ;
|——————————Node:#endif Text: #endif
|—————————Node:comment Text: // DEBUGDEF
|—————————Node:expression_statement Text: buffer[bufIdx+1]=0;
|——————————Node:assignment_expression Text: buffer[bufIdx+1]=0
|———————————Node:subscript_expression Text: buffer[bufIdx+1]
|————————————Node:identifier Text: buffer
|————————————Node:subscript_argument_list Text: [bufIdx+1]
|—————————————Node:[ Text: [
|—————————————Node:binary_expression Text: bufIdx+1
|——————————————Node:identifier Text: bufIdx
|——————————————Node:+ Text: +
|——————————————Node:number_literal Text: 1
|—————————————Node:] Text: ]
|———————————Node:= Text: =
|———————————Node:number_literal Text: 0
|——————————Node:; Text: ;
|—————————Node:} Text: }
|————————Node:else_clause Text: else{
                #ifdef DEBUGDEF
                                Serial.println("readCanBus - setRTM");
                    #endif // DEBUGDEF
                buffer[bufIdx+1]=1;
            }
|—————————Node:else Text: else
|—————————Node:compound_statement Text: {
                #ifdef DEBUGDEF
                                Serial.println("readCanBus - setRTM");
                    #endif // DEBUGDEF
                buffer[bufIdx+1]=1;
            }
|——————————Node:{ Text: {
|——————————Node:preproc_ifdef Text: #ifdef DEBUGDEF
                                Serial.println("readCanBus - setRTM");
                    #endif
|———————————Node:#ifdef Text: #ifdef
|———————————Node:identifier Text: DEBUGDEF
|———————————Node:expression_statement Text: Serial.println("readCanBus - setRTM");
|————————————Node:call_expression Text: Serial.println("readCanBus - setRTM")
|—————————————Node:field_expression Text: Serial.println
|——————————————Node:identifier Text: Serial
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: println
|—————————————Node:argument_list Text: ("readCanBus - setRTM")
|——————————————Node:( Text: (
|——————————————Node:string_literal Text: "readCanBus - setRTM"
|———————————————Node:" Text: "
|———————————————Node:string_content Text: readCanBus - setRTM
|———————————————Node:" Text: "
|——————————————Node:) Text: )
|————————————Node:; Text: ;
|———————————Node:#endif Text: #endif
|——————————Node:comment Text: // DEBUGDEF
|——————————Node:expression_statement Text: buffer[bufIdx+1]=1;
|———————————Node:assignment_expression Text: buffer[bufIdx+1]=1
|————————————Node:subscript_expression Text: buffer[bufIdx+1]
|—————————————Node:identifier Text: buffer
|—————————————Node:subscript_argument_list Text: [bufIdx+1]
|——————————————Node:[ Text: [
|——————————————Node:binary_expression Text: bufIdx+1
|———————————————Node:identifier Text: bufIdx
|———————————————Node:+ Text: +
|———————————————Node:number_literal Text: 1
|——————————————Node:] Text: ]
|————————————Node:= Text: =
|————————————Node:number_literal Text: 1
|———————————Node:; Text: ;
|——————————Node:} Text: }
|———————Node:expression_statement Text: msgBuffer.put(&buffer[bufIdx]);
|————————Node:call_expression Text: msgBuffer.put(&buffer[bufIdx])
|—————————Node:field_expression Text: msgBuffer.put
|——————————Node:identifier Text: msgBuffer
|——————————Node:. Text: .
|——————————Node:field_identifier Text: put
|—————————Node:argument_list Text: (&buffer[bufIdx])
|——————————Node:( Text: (
|——————————Node:pointer_expression Text: &buffer[bufIdx]
|———————————Node:& Text: &
|———————————Node:subscript_expression Text: buffer[bufIdx]
|————————————Node:identifier Text: buffer
|————————————Node:subscript_argument_list Text: [bufIdx]
|—————————————Node:[ Text: [
|—————————————Node:identifier Text: bufIdx
|—————————————Node:] Text: ]
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:} Text: }
