qtserialbus-src\plugins\canbus\peakcan\peakcanbackend.cpp

|Node:translation_unit
|—Node:comment
|—Node:preproc_include Text: #include "peakcanbackend.h"

|——Node:#include Text: #include
|——Node:string_literal Text: "peakcanbackend.h"
|———Node:" Text: "
|———Node:string_content Text: peakcanbackend.h
|———Node:" Text: "
|—Node:preproc_include Text: #include "peakcanbackend_p.h"

|——Node:#include Text: #include
|——Node:string_literal Text: "peakcanbackend_p.h"
|———Node:" Text: "
|———Node:string_content Text: peakcanbackend_p.h
|———Node:" Text: "
|—Node:preproc_include Text: #include "peakcan_symbols_p.h"

|——Node:#include Text: #include
|——Node:string_literal Text: "peakcan_symbols_p.h"
|———Node:" Text: "
|———Node:string_content Text: peakcan_symbols_p.h
|———Node:" Text: "
|—Node:preproc_include Text: #include <QtSerialBus/qcanbusdevice.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <QtSerialBus/qcanbusdevice.h>
|—Node:preproc_include Text: #include <QtCore/qtimer.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <QtCore/qtimer.h>
|—Node:preproc_include Text: #include <QtCore/qcoreevent.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <QtCore/qcoreevent.h>
|—Node:preproc_include Text: #include <QtCore/qloggingcategory.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <QtCore/qloggingcategory.h>
|—Node:preproc_include Text: #include <algorithm>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <algorithm>
|—Node:preproc_include Text: #include <vector>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <vector>
|—Node:preproc_ifdef Text: #ifdef Q_OS_WIN32
#   include <QtCore/qwineventnotifier.h>
#else
#   include <QtCore/qsocketnotifier.h>
#endif
|——Node:#ifdef Text: #ifdef
|——Node:identifier Text: Q_OS_WIN32
|——Node:preproc_include Text: #   include <QtCore/qwineventnotifier.h>

|———Node:#include Text: #   include
|———Node:system_lib_string Text: <QtCore/qwineventnotifier.h>
|——Node:preproc_else Text: #else
#   include <QtCore/qsocketnotifier.h>

|———Node:#else Text: #else
|———Node:preproc_include Text: #   include <QtCore/qsocketnotifier.h>

|————Node:#include Text: #   include
|————Node:system_lib_string Text: <QtCore/qsocketnotifier.h>
|——Node:#endif Text: #endif
|—Node:declaration Text: QT_BEGIN_NAMESPACE

Q_DECLARE_LOGGING_CATEGORY(QT_CANBUS_PLUGINS_PEAKCAN)
|——Node:type_identifier Text: QT_BEGIN_NAMESPACE
|——Node:init_declarator Text: Q_DECLARE_LOGGING_CATEGORY(QT_CANBUS_PLUGINS_PEAKCAN)
|———Node:identifier Text: Q_DECLARE_LOGGING_CATEGORY
|———Node:argument_list Text: (QT_CANBUS_PLUGINS_PEAKCAN)
|————Node:( Text: (
|————Node:identifier Text: QT_CANBUS_PLUGINS_PEAKCAN
|————Node:) Text: )
|——Node:; Text: 
|—Node:preproc_ifdef Text: #ifndef LINK_LIBPCANBASIC
Q_GLOBAL_STATIC(QLibrary, pcanLibrary)
#endif
|——Node:#ifndef Text: #ifndef
|——Node:identifier Text: LINK_LIBPCANBASIC
|——Node:expression_statement Text: Q_GLOBAL_STATIC(QLibrary, pcanLibrary)
|———Node:call_expression Text: Q_GLOBAL_STATIC(QLibrary, pcanLibrary)
|————Node:identifier Text: Q_GLOBAL_STATIC
|————Node:argument_list Text: (QLibrary, pcanLibrary)
|—————Node:( Text: (
|—————Node:identifier Text: QLibrary
|—————Node:, Text: ,
|—————Node:identifier Text: pcanLibrary
|—————Node:) Text: )
|———Node:; Text: 
|——Node:#endif Text: #endif
|—Node:function_definition Text: bool PeakCanBackend::canCreate(QString *errorReason)
{
#ifdef LINK_LIBPCANBASIC
    Q_UNUSED(errorReason);
#else
    static bool symbolsResolved = resolvePeakCanSymbols(pcanLibrary());
    if (Q_UNLIKELY(!symbolsResolved)) {
        qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot load library: %ls",
                qUtf16Printable(pcanLibrary()->errorString()));
        *errorReason = pcanLibrary()->errorString();
        return false;
    }
#endif

    char apiVersion[32];
    TPCANStatus stat = CAN_GetValue(PCAN_NONEBUS, PCAN_API_VERSION, apiVersion, sizeof(apiVersion));
    if (Q_UNLIKELY(stat != PCAN_ERROR_OK)) {
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot resolve PCAN-API version!");
        return false;
    }
    qCInfo(QT_CANBUS_PLUGINS_PEAKCAN, "Using PCAN-API version: %s", apiVersion);

    return true;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: PeakCanBackend::canCreate(QString *errorReason)
|———Node:qualified_identifier Text: PeakCanBackend::canCreate
|————Node:namespace_identifier Text: PeakCanBackend
|————Node::: Text: ::
|————Node:identifier Text: canCreate
|———Node:parameter_list Text: (QString *errorReason)
|————Node:( Text: (
|————Node:parameter_declaration Text: QString *errorReason
|—————Node:type_identifier Text: QString
|—————Node:pointer_declarator Text: *errorReason
|——————Node:* Text: *
|——————Node:identifier Text: errorReason
|————Node:) Text: )
|——Node:compound_statement Text: {
#ifdef LINK_LIBPCANBASIC
    Q_UNUSED(errorReason);
#else
    static bool symbolsResolved = resolvePeakCanSymbols(pcanLibrary());
    if (Q_UNLIKELY(!symbolsResolved)) {
        qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot load library: %ls",
                qUtf16Printable(pcanLibrary()->errorString()));
        *errorReason = pcanLibrary()->errorString();
        return false;
    }
#endif

    char apiVersion[32];
    TPCANStatus stat = CAN_GetValue(PCAN_NONEBUS, PCAN_API_VERSION, apiVersion, sizeof(apiVersion));
    if (Q_UNLIKELY(stat != PCAN_ERROR_OK)) {
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot resolve PCAN-API version!");
        return false;
    }
    qCInfo(QT_CANBUS_PLUGINS_PEAKCAN, "Using PCAN-API version: %s", apiVersion);

    return true;
}
|———Node:{ Text: {
|———Node:preproc_ifdef Text: #ifdef LINK_LIBPCANBASIC
    Q_UNUSED(errorReason);
#else
    static bool symbolsResolved = resolvePeakCanSymbols(pcanLibrary());
    if (Q_UNLIKELY(!symbolsResolved)) {
        qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot load library: %ls",
                qUtf16Printable(pcanLibrary()->errorString()));
        *errorReason = pcanLibrary()->errorString();
        return false;
    }
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: LINK_LIBPCANBASIC
|————Node:expression_statement Text: Q_UNUSED(errorReason);
|—————Node:call_expression Text: Q_UNUSED(errorReason)
|——————Node:identifier Text: Q_UNUSED
|——————Node:argument_list Text: (errorReason)
|———————Node:( Text: (
|———————Node:identifier Text: errorReason
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:preproc_else Text: #else
    static bool symbolsResolved = resolvePeakCanSymbols(pcanLibrary());
    if (Q_UNLIKELY(!symbolsResolved)) {
        qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot load library: %ls",
                qUtf16Printable(pcanLibrary()->errorString()));
        *errorReason = pcanLibrary()->errorString();
        return false;
    }
|—————Node:#else Text: #else
|—————Node:declaration Text: static bool symbolsResolved = resolvePeakCanSymbols(pcanLibrary());
|——————Node:storage_class_specifier Text: static
|———————Node:static Text: static
|——————Node:primitive_type Text: bool
|——————Node:init_declarator Text: symbolsResolved = resolvePeakCanSymbols(pcanLibrary())
|———————Node:identifier Text: symbolsResolved
|———————Node:= Text: =
|———————Node:call_expression Text: resolvePeakCanSymbols(pcanLibrary())
|————————Node:identifier Text: resolvePeakCanSymbols
|————————Node:argument_list Text: (pcanLibrary())
|—————————Node:( Text: (
|—————————Node:call_expression Text: pcanLibrary()
|——————————Node:identifier Text: pcanLibrary
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (Q_UNLIKELY(!symbolsResolved)) {
        qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot load library: %ls",
                qUtf16Printable(pcanLibrary()->errorString()));
        *errorReason = pcanLibrary()->errorString();
        return false;
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: (Q_UNLIKELY(!symbolsResolved))
|———————Node:( Text: (
|———————Node:call_expression Text: Q_UNLIKELY(!symbolsResolved)
|————————Node:identifier Text: Q_UNLIKELY
|————————Node:argument_list Text: (!symbolsResolved)
|—————————Node:( Text: (
|—————————Node:unary_expression Text: !symbolsResolved
|——————————Node:! Text: !
|——————————Node:identifier Text: symbolsResolved
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {
        qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot load library: %ls",
                qUtf16Printable(pcanLibrary()->errorString()));
        *errorReason = pcanLibrary()->errorString();
        return false;
    }
|———————Node:{ Text: {
|———————Node:expression_statement Text: qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot load library: %ls",
                qUtf16Printable(pcanLibrary()->errorString()));
|————————Node:call_expression Text: qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot load library: %ls",
                qUtf16Printable(pcanLibrary()->errorString()))
|—————————Node:identifier Text: qCCritical
|—————————Node:argument_list Text: (QT_CANBUS_PLUGINS_PEAKCAN, "Cannot load library: %ls",
                qUtf16Printable(pcanLibrary()->errorString()))
|——————————Node:( Text: (
|——————————Node:identifier Text: QT_CANBUS_PLUGINS_PEAKCAN
|——————————Node:, Text: ,
|——————————Node:string_literal Text: "Cannot load library: %ls"
|———————————Node:" Text: "
|———————————Node:string_content Text: Cannot load library: %ls
|———————————Node:" Text: "
|——————————Node:, Text: ,
|——————————Node:call_expression Text: qUtf16Printable(pcanLibrary()->errorString())
|———————————Node:identifier Text: qUtf16Printable
|———————————Node:argument_list Text: (pcanLibrary()->errorString())
|————————————Node:( Text: (
|————————————Node:call_expression Text: pcanLibrary()->errorString()
|—————————————Node:field_expression Text: pcanLibrary()->errorString
|——————————————Node:call_expression Text: pcanLibrary()
|———————————————Node:identifier Text: pcanLibrary
|———————————————Node:argument_list Text: ()
|————————————————Node:( Text: (
|————————————————Node:) Text: )
|——————————————Node:-> Text: ->
|——————————————Node:field_identifier Text: errorString
|—————————————Node:argument_list Text: ()
|——————————————Node:( Text: (
|——————————————Node:) Text: )
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: *errorReason = pcanLibrary()->errorString();
|————————Node:assignment_expression Text: *errorReason = pcanLibrary()->errorString()
|—————————Node:pointer_expression Text: *errorReason
|——————————Node:* Text: *
|——————————Node:identifier Text: errorReason
|—————————Node:= Text: =
|—————————Node:call_expression Text: pcanLibrary()->errorString()
|——————————Node:field_expression Text: pcanLibrary()->errorString
|———————————Node:call_expression Text: pcanLibrary()
|————————————Node:identifier Text: pcanLibrary
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:-> Text: ->
|———————————Node:field_identifier Text: errorString
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:return_statement Text: return false;
|————————Node:return Text: return
|————————Node:false Text: false
|————————Node:; Text: ;
|———————Node:} Text: }
|————Node:#endif Text: #endif
|———Node:declaration Text: char apiVersion[32];
|————Node:primitive_type Text: char
|————Node:array_declarator Text: apiVersion[32]
|—————Node:identifier Text: apiVersion
|—————Node:[ Text: [
|—————Node:number_literal Text: 32
|—————Node:] Text: ]
|————Node:; Text: ;
|———Node:declaration Text: TPCANStatus stat = CAN_GetValue(PCAN_NONEBUS, PCAN_API_VERSION, apiVersion, sizeof(apiVersion));
|————Node:type_identifier Text: TPCANStatus
|————Node:init_declarator Text: stat = CAN_GetValue(PCAN_NONEBUS, PCAN_API_VERSION, apiVersion, sizeof(apiVersion))
|—————Node:identifier Text: stat
|—————Node:= Text: =
|—————Node:call_expression Text: CAN_GetValue(PCAN_NONEBUS, PCAN_API_VERSION, apiVersion, sizeof(apiVersion))
|——————Node:identifier Text: CAN_GetValue
|——————Node:argument_list Text: (PCAN_NONEBUS, PCAN_API_VERSION, apiVersion, sizeof(apiVersion))
|———————Node:( Text: (
|———————Node:identifier Text: PCAN_NONEBUS
|———————Node:, Text: ,
|———————Node:identifier Text: PCAN_API_VERSION
|———————Node:, Text: ,
|———————Node:identifier Text: apiVersion
|———————Node:, Text: ,
|———————Node:sizeof_expression Text: sizeof(apiVersion)
|————————Node:sizeof Text: sizeof
|————————Node:parenthesized_expression Text: (apiVersion)
|—————————Node:( Text: (
|—————————Node:identifier Text: apiVersion
|—————————Node:) Text: )
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(stat != PCAN_ERROR_OK)) {
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot resolve PCAN-API version!");
        return false;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(stat != PCAN_ERROR_OK))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(stat != PCAN_ERROR_OK)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (stat != PCAN_ERROR_OK)
|———————Node:( Text: (
|———————Node:binary_expression Text: stat != PCAN_ERROR_OK
|————————Node:identifier Text: stat
|————————Node:!= Text: !=
|————————Node:identifier Text: PCAN_ERROR_OK
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot resolve PCAN-API version!");
        return false;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot resolve PCAN-API version!");
|——————Node:call_expression Text: qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot resolve PCAN-API version!")
|———————Node:identifier Text: qCWarning
|———————Node:argument_list Text: (QT_CANBUS_PLUGINS_PEAKCAN, "Cannot resolve PCAN-API version!")
|————————Node:( Text: (
|————————Node:identifier Text: QT_CANBUS_PLUGINS_PEAKCAN
|————————Node:, Text: ,
|————————Node:string_literal Text: "Cannot resolve PCAN-API version!"
|—————————Node:" Text: "
|—————————Node:string_content Text: Cannot resolve PCAN-API version!
|—————————Node:" Text: "
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return false;
|——————Node:return Text: return
|——————Node:false Text: false
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: qCInfo(QT_CANBUS_PLUGINS_PEAKCAN, "Using PCAN-API version: %s", apiVersion);
|————Node:call_expression Text: qCInfo(QT_CANBUS_PLUGINS_PEAKCAN, "Using PCAN-API version: %s", apiVersion)
|—————Node:identifier Text: qCInfo
|—————Node:argument_list Text: (QT_CANBUS_PLUGINS_PEAKCAN, "Using PCAN-API version: %s", apiVersion)
|——————Node:( Text: (
|——————Node:identifier Text: QT_CANBUS_PLUGINS_PEAKCAN
|——————Node:, Text: ,
|——————Node:string_literal Text: "Using PCAN-API version: %s"
|———————Node:" Text: "
|———————Node:string_content Text: Using PCAN-API version: %s
|———————Node:" Text: "
|——————Node:, Text: ,
|——————Node:identifier Text: apiVersion
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return true;
|————Node:return Text: return
|————Node:true Text: true
|————Node:; Text: ;
|———Node:} Text: }
|—Node:struct_specifier Text: struct PcanChannel{
    char        name[6];
    TPCANHandle index;
}
|——Node:struct Text: struct
|——Node:type_identifier Text: PcanChannel
|——Node:field_declaration_list Text: {
    char        name[6];
    TPCANHandle index;
}
|———Node:{ Text: {
|———Node:field_declaration Text: char        name[6];
|————Node:primitive_type Text: char
|————Node:array_declarator Text: name[6]
|—————Node:field_identifier Text: name
|—————Node:[ Text: [
|—————Node:number_literal Text: 6
|—————Node:] Text: ]
|————Node:; Text: ;
|———Node:field_declaration Text: TPCANHandle index;
|————Node:type_identifier Text: TPCANHandle
|————Node:field_identifier Text: index
|————Node:; Text: ;
|———Node:} Text: }
|—Node:; Text: ;
|—Node:declaration Text: static const PcanChannel pcanChannels[] = {
    { "usb0",  PCAN_USBBUS1  },
    { "usb1",  PCAN_USBBUS2  },
    { "usb2",  PCAN_USBBUS3  },
    { "usb3",  PCAN_USBBUS4  },
    { "usb4",  PCAN_USBBUS5  },
    { "usb5",  PCAN_USBBUS6  },
    { "usb6",  PCAN_USBBUS7  },
    { "usb7",  PCAN_USBBUS8  },
    { "usb8",  PCAN_USBBUS9  },
    { "usb9",  PCAN_USBBUS10 },
    { "usb10", PCAN_USBBUS11 },
    { "usb11", PCAN_USBBUS12 },
    { "usb12", PCAN_USBBUS13 },
    { "usb13", PCAN_USBBUS14 },
    { "usb14", PCAN_USBBUS15 },
    { "usb15", PCAN_USBBUS16 },
    { "pci0",  PCAN_PCIBUS1  },
    { "pci1",  PCAN_PCIBUS2  },
    { "pci2",  PCAN_PCIBUS3  },
    { "pci3",  PCAN_PCIBUS4  },
    { "pci4",  PCAN_PCIBUS5  },
    { "pci5",  PCAN_PCIBUS6  },
    { "pci6",  PCAN_PCIBUS7  },
    { "pci7",  PCAN_PCIBUS8  },
    { "pci8",  PCAN_PCIBUS9  },
    { "pci9",  PCAN_PCIBUS10 },
    { "pci10", PCAN_PCIBUS11 },
    { "pci11", PCAN_PCIBUS12 },
    { "pci12", PCAN_PCIBUS13 },
    { "pci13", PCAN_PCIBUS14 },
    { "pci14", PCAN_PCIBUS15 },
    { "pci15", PCAN_PCIBUS16 },
    { "none",  PCAN_NONEBUS  }
};
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_qualifier Text: const
|———Node:const Text: const
|——Node:type_identifier Text: PcanChannel
|——Node:init_declarator Text: pcanChannels[] = {
    { "usb0",  PCAN_USBBUS1  },
    { "usb1",  PCAN_USBBUS2  },
    { "usb2",  PCAN_USBBUS3  },
    { "usb3",  PCAN_USBBUS4  },
    { "usb4",  PCAN_USBBUS5  },
    { "usb5",  PCAN_USBBUS6  },
    { "usb6",  PCAN_USBBUS7  },
    { "usb7",  PCAN_USBBUS8  },
    { "usb8",  PCAN_USBBUS9  },
    { "usb9",  PCAN_USBBUS10 },
    { "usb10", PCAN_USBBUS11 },
    { "usb11", PCAN_USBBUS12 },
    { "usb12", PCAN_USBBUS13 },
    { "usb13", PCAN_USBBUS14 },
    { "usb14", PCAN_USBBUS15 },
    { "usb15", PCAN_USBBUS16 },
    { "pci0",  PCAN_PCIBUS1  },
    { "pci1",  PCAN_PCIBUS2  },
    { "pci2",  PCAN_PCIBUS3  },
    { "pci3",  PCAN_PCIBUS4  },
    { "pci4",  PCAN_PCIBUS5  },
    { "pci5",  PCAN_PCIBUS6  },
    { "pci6",  PCAN_PCIBUS7  },
    { "pci7",  PCAN_PCIBUS8  },
    { "pci8",  PCAN_PCIBUS9  },
    { "pci9",  PCAN_PCIBUS10 },
    { "pci10", PCAN_PCIBUS11 },
    { "pci11", PCAN_PCIBUS12 },
    { "pci12", PCAN_PCIBUS13 },
    { "pci13", PCAN_PCIBUS14 },
    { "pci14", PCAN_PCIBUS15 },
    { "pci15", PCAN_PCIBUS16 },
    { "none",  PCAN_NONEBUS  }
}
|———Node:array_declarator Text: pcanChannels[]
|————Node:identifier Text: pcanChannels
|————Node:[ Text: [
|————Node:] Text: ]
|———Node:= Text: =
|———Node:initializer_list Text: {
    { "usb0",  PCAN_USBBUS1  },
    { "usb1",  PCAN_USBBUS2  },
    { "usb2",  PCAN_USBBUS3  },
    { "usb3",  PCAN_USBBUS4  },
    { "usb4",  PCAN_USBBUS5  },
    { "usb5",  PCAN_USBBUS6  },
    { "usb6",  PCAN_USBBUS7  },
    { "usb7",  PCAN_USBBUS8  },
    { "usb8",  PCAN_USBBUS9  },
    { "usb9",  PCAN_USBBUS10 },
    { "usb10", PCAN_USBBUS11 },
    { "usb11", PCAN_USBBUS12 },
    { "usb12", PCAN_USBBUS13 },
    { "usb13", PCAN_USBBUS14 },
    { "usb14", PCAN_USBBUS15 },
    { "usb15", PCAN_USBBUS16 },
    { "pci0",  PCAN_PCIBUS1  },
    { "pci1",  PCAN_PCIBUS2  },
    { "pci2",  PCAN_PCIBUS3  },
    { "pci3",  PCAN_PCIBUS4  },
    { "pci4",  PCAN_PCIBUS5  },
    { "pci5",  PCAN_PCIBUS6  },
    { "pci6",  PCAN_PCIBUS7  },
    { "pci7",  PCAN_PCIBUS8  },
    { "pci8",  PCAN_PCIBUS9  },
    { "pci9",  PCAN_PCIBUS10 },
    { "pci10", PCAN_PCIBUS11 },
    { "pci11", PCAN_PCIBUS12 },
    { "pci12", PCAN_PCIBUS13 },
    { "pci13", PCAN_PCIBUS14 },
    { "pci14", PCAN_PCIBUS15 },
    { "pci15", PCAN_PCIBUS16 },
    { "none",  PCAN_NONEBUS  }
}
|————Node:{ Text: {
|————Node:initializer_list Text: { "usb0",  PCAN_USBBUS1  }
|—————Node:{ Text: {
|—————Node:string_literal Text: "usb0"
|——————Node:" Text: "
|——————Node:string_content Text: usb0
|——————Node:" Text: "
|—————Node:, Text: ,
|—————Node:identifier Text: PCAN_USBBUS1
|—————Node:} Text: }
|————Node:, Text: ,
|————Node:initializer_list Text: { "usb1",  PCAN_USBBUS2  }
|—————Node:{ Text: {
|—————Node:string_literal Text: "usb1"
|——————Node:" Text: "
|——————Node:string_content Text: usb1
|——————Node:" Text: "
|—————Node:, Text: ,
|—————Node:identifier Text: PCAN_USBBUS2
|—————Node:} Text: }
|————Node:, Text: ,
|————Node:initializer_list Text: { "usb2",  PCAN_USBBUS3  }
|—————Node:{ Text: {
|—————Node:string_literal Text: "usb2"
|——————Node:" Text: "
|——————Node:string_content Text: usb2
|——————Node:" Text: "
|—————Node:, Text: ,
|—————Node:identifier Text: PCAN_USBBUS3
|—————Node:} Text: }
|————Node:, Text: ,
|————Node:initializer_list Text: { "usb3",  PCAN_USBBUS4  }
|—————Node:{ Text: {
|—————Node:string_literal Text: "usb3"
|——————Node:" Text: "
|——————Node:string_content Text: usb3
|——————Node:" Text: "
|—————Node:, Text: ,
|—————Node:identifier Text: PCAN_USBBUS4
|—————Node:} Text: }
|————Node:, Text: ,
|————Node:initializer_list Text: { "usb4",  PCAN_USBBUS5  }
|—————Node:{ Text: {
|—————Node:string_literal Text: "usb4"
|——————Node:" Text: "
|——————Node:string_content Text: usb4
|——————Node:" Text: "
|—————Node:, Text: ,
|—————Node:identifier Text: PCAN_USBBUS5
|—————Node:} Text: }
|————Node:, Text: ,
|————Node:initializer_list Text: { "usb5",  PCAN_USBBUS6  }
|—————Node:{ Text: {
|—————Node:string_literal Text: "usb5"
|——————Node:" Text: "
|——————Node:string_content Text: usb5
|——————Node:" Text: "
|—————Node:, Text: ,
|—————Node:identifier Text: PCAN_USBBUS6
|—————Node:} Text: }
|————Node:, Text: ,
|————Node:initializer_list Text: { "usb6",  PCAN_USBBUS7  }
|—————Node:{ Text: {
|—————Node:string_literal Text: "usb6"
|——————Node:" Text: "
|——————Node:string_content Text: usb6
|——————Node:" Text: "
|—————Node:, Text: ,
|—————Node:identifier Text: PCAN_USBBUS7
|—————Node:} Text: }
|————Node:, Text: ,
|————Node:initializer_list Text: { "usb7",  PCAN_USBBUS8  }
|—————Node:{ Text: {
|—————Node:string_literal Text: "usb7"
|——————Node:" Text: "
|——————Node:string_content Text: usb7
|——————Node:" Text: "
|—————Node:, Text: ,
|—————Node:identifier Text: PCAN_USBBUS8
|—————Node:} Text: }
|————Node:, Text: ,
|————Node:initializer_list Text: { "usb8",  PCAN_USBBUS9  }
|—————Node:{ Text: {
|—————Node:string_literal Text: "usb8"
|——————Node:" Text: "
|——————Node:string_content Text: usb8
|——————Node:" Text: "
|—————Node:, Text: ,
|—————Node:identifier Text: PCAN_USBBUS9
|—————Node:} Text: }
|————Node:, Text: ,
|————Node:initializer_list Text: { "usb9",  PCAN_USBBUS10 }
|—————Node:{ Text: {
|—————Node:string_literal Text: "usb9"
|——————Node:" Text: "
|——————Node:string_content Text: usb9
|——————Node:" Text: "
|—————Node:, Text: ,
|—————Node:identifier Text: PCAN_USBBUS10
|—————Node:} Text: }
|————Node:, Text: ,
|————Node:initializer_list Text: { "usb10", PCAN_USBBUS11 }
|—————Node:{ Text: {
|—————Node:string_literal Text: "usb10"
|——————Node:" Text: "
|——————Node:string_content Text: usb10
|——————Node:" Text: "
|—————Node:, Text: ,
|—————Node:identifier Text: PCAN_USBBUS11
|—————Node:} Text: }
|————Node:, Text: ,
|————Node:initializer_list Text: { "usb11", PCAN_USBBUS12 }
|—————Node:{ Text: {
|—————Node:string_literal Text: "usb11"
|——————Node:" Text: "
|——————Node:string_content Text: usb11
|——————Node:" Text: "
|—————Node:, Text: ,
|—————Node:identifier Text: PCAN_USBBUS12
|—————Node:} Text: }
|————Node:, Text: ,
|————Node:initializer_list Text: { "usb12", PCAN_USBBUS13 }
|—————Node:{ Text: {
|—————Node:string_literal Text: "usb12"
|——————Node:" Text: "
|——————Node:string_content Text: usb12
|——————Node:" Text: "
|—————Node:, Text: ,
|—————Node:identifier Text: PCAN_USBBUS13
|—————Node:} Text: }
|————Node:, Text: ,
|————Node:initializer_list Text: { "usb13", PCAN_USBBUS14 }
|—————Node:{ Text: {
|—————Node:string_literal Text: "usb13"
|——————Node:" Text: "
|——————Node:string_content Text: usb13
|——————Node:" Text: "
|—————Node:, Text: ,
|—————Node:identifier Text: PCAN_USBBUS14
|—————Node:} Text: }
|————Node:, Text: ,
|————Node:initializer_list Text: { "usb14", PCAN_USBBUS15 }
|—————Node:{ Text: {
|—————Node:string_literal Text: "usb14"
|——————Node:" Text: "
|——————Node:string_content Text: usb14
|——————Node:" Text: "
|—————Node:, Text: ,
|—————Node:identifier Text: PCAN_USBBUS15
|—————Node:} Text: }
|————Node:, Text: ,
|————Node:initializer_list Text: { "usb15", PCAN_USBBUS16 }
|—————Node:{ Text: {
|—————Node:string_literal Text: "usb15"
|——————Node:" Text: "
|——————Node:string_content Text: usb15
|——————Node:" Text: "
|—————Node:, Text: ,
|—————Node:identifier Text: PCAN_USBBUS16
|—————Node:} Text: }
|————Node:, Text: ,
|————Node:initializer_list Text: { "pci0",  PCAN_PCIBUS1  }
|—————Node:{ Text: {
|—————Node:string_literal Text: "pci0"
|——————Node:" Text: "
|——————Node:string_content Text: pci0
|——————Node:" Text: "
|—————Node:, Text: ,
|—————Node:identifier Text: PCAN_PCIBUS1
|—————Node:} Text: }
|————Node:, Text: ,
|————Node:initializer_list Text: { "pci1",  PCAN_PCIBUS2  }
|—————Node:{ Text: {
|—————Node:string_literal Text: "pci1"
|——————Node:" Text: "
|——————Node:string_content Text: pci1
|——————Node:" Text: "
|—————Node:, Text: ,
|—————Node:identifier Text: PCAN_PCIBUS2
|—————Node:} Text: }
|————Node:, Text: ,
|————Node:initializer_list Text: { "pci2",  PCAN_PCIBUS3  }
|—————Node:{ Text: {
|—————Node:string_literal Text: "pci2"
|——————Node:" Text: "
|——————Node:string_content Text: pci2
|——————Node:" Text: "
|—————Node:, Text: ,
|—————Node:identifier Text: PCAN_PCIBUS3
|—————Node:} Text: }
|————Node:, Text: ,
|————Node:initializer_list Text: { "pci3",  PCAN_PCIBUS4  }
|—————Node:{ Text: {
|—————Node:string_literal Text: "pci3"
|——————Node:" Text: "
|——————Node:string_content Text: pci3
|——————Node:" Text: "
|—————Node:, Text: ,
|—————Node:identifier Text: PCAN_PCIBUS4
|—————Node:} Text: }
|————Node:, Text: ,
|————Node:initializer_list Text: { "pci4",  PCAN_PCIBUS5  }
|—————Node:{ Text: {
|—————Node:string_literal Text: "pci4"
|——————Node:" Text: "
|——————Node:string_content Text: pci4
|——————Node:" Text: "
|—————Node:, Text: ,
|—————Node:identifier Text: PCAN_PCIBUS5
|—————Node:} Text: }
|————Node:, Text: ,
|————Node:initializer_list Text: { "pci5",  PCAN_PCIBUS6  }
|—————Node:{ Text: {
|—————Node:string_literal Text: "pci5"
|——————Node:" Text: "
|——————Node:string_content Text: pci5
|——————Node:" Text: "
|—————Node:, Text: ,
|—————Node:identifier Text: PCAN_PCIBUS6
|—————Node:} Text: }
|————Node:, Text: ,
|————Node:initializer_list Text: { "pci6",  PCAN_PCIBUS7  }
|—————Node:{ Text: {
|—————Node:string_literal Text: "pci6"
|——————Node:" Text: "
|——————Node:string_content Text: pci6
|——————Node:" Text: "
|—————Node:, Text: ,
|—————Node:identifier Text: PCAN_PCIBUS7
|—————Node:} Text: }
|————Node:, Text: ,
|————Node:initializer_list Text: { "pci7",  PCAN_PCIBUS8  }
|—————Node:{ Text: {
|—————Node:string_literal Text: "pci7"
|——————Node:" Text: "
|——————Node:string_content Text: pci7
|——————Node:" Text: "
|—————Node:, Text: ,
|—————Node:identifier Text: PCAN_PCIBUS8
|—————Node:} Text: }
|————Node:, Text: ,
|————Node:initializer_list Text: { "pci8",  PCAN_PCIBUS9  }
|—————Node:{ Text: {
|—————Node:string_literal Text: "pci8"
|——————Node:" Text: "
|——————Node:string_content Text: pci8
|——————Node:" Text: "
|—————Node:, Text: ,
|—————Node:identifier Text: PCAN_PCIBUS9
|—————Node:} Text: }
|————Node:, Text: ,
|————Node:initializer_list Text: { "pci9",  PCAN_PCIBUS10 }
|—————Node:{ Text: {
|—————Node:string_literal Text: "pci9"
|——————Node:" Text: "
|——————Node:string_content Text: pci9
|——————Node:" Text: "
|—————Node:, Text: ,
|—————Node:identifier Text: PCAN_PCIBUS10
|—————Node:} Text: }
|————Node:, Text: ,
|————Node:initializer_list Text: { "pci10", PCAN_PCIBUS11 }
|—————Node:{ Text: {
|—————Node:string_literal Text: "pci10"
|——————Node:" Text: "
|——————Node:string_content Text: pci10
|——————Node:" Text: "
|—————Node:, Text: ,
|—————Node:identifier Text: PCAN_PCIBUS11
|—————Node:} Text: }
|————Node:, Text: ,
|————Node:initializer_list Text: { "pci11", PCAN_PCIBUS12 }
|—————Node:{ Text: {
|—————Node:string_literal Text: "pci11"
|——————Node:" Text: "
|——————Node:string_content Text: pci11
|——————Node:" Text: "
|—————Node:, Text: ,
|—————Node:identifier Text: PCAN_PCIBUS12
|—————Node:} Text: }
|————Node:, Text: ,
|————Node:initializer_list Text: { "pci12", PCAN_PCIBUS13 }
|—————Node:{ Text: {
|—————Node:string_literal Text: "pci12"
|——————Node:" Text: "
|——————Node:string_content Text: pci12
|——————Node:" Text: "
|—————Node:, Text: ,
|—————Node:identifier Text: PCAN_PCIBUS13
|—————Node:} Text: }
|————Node:, Text: ,
|————Node:initializer_list Text: { "pci13", PCAN_PCIBUS14 }
|—————Node:{ Text: {
|—————Node:string_literal Text: "pci13"
|——————Node:" Text: "
|——————Node:string_content Text: pci13
|——————Node:" Text: "
|—————Node:, Text: ,
|—————Node:identifier Text: PCAN_PCIBUS14
|—————Node:} Text: }
|————Node:, Text: ,
|————Node:initializer_list Text: { "pci14", PCAN_PCIBUS15 }
|—————Node:{ Text: {
|—————Node:string_literal Text: "pci14"
|——————Node:" Text: "
|——————Node:string_content Text: pci14
|——————Node:" Text: "
|—————Node:, Text: ,
|—————Node:identifier Text: PCAN_PCIBUS15
|—————Node:} Text: }
|————Node:, Text: ,
|————Node:initializer_list Text: { "pci15", PCAN_PCIBUS16 }
|—————Node:{ Text: {
|—————Node:string_literal Text: "pci15"
|——————Node:" Text: "
|——————Node:string_content Text: pci15
|——————Node:" Text: "
|—————Node:, Text: ,
|—————Node:identifier Text: PCAN_PCIBUS16
|—————Node:} Text: }
|————Node:, Text: ,
|————Node:initializer_list Text: { "none",  PCAN_NONEBUS  }
|—————Node:{ Text: {
|—————Node:string_literal Text: "none"
|——————Node:" Text: "
|——————Node:string_content Text: none
|——————Node:" Text: "
|—————Node:, Text: ,
|—————Node:identifier Text: PCAN_NONEBUS
|—————Node:} Text: }
|————Node:} Text: }
|——Node:; Text: ;
|—Node:function_definition Text: QList<QCanBusDeviceInfo> PeakCanBackend::interfacesByChannelCondition()
{
    QList<QCanBusDeviceInfo> result;

    for (int i = 0; pcanChannels[i].index != PCAN_NONEBUS; ++i) {
        uint value = 0;
        const TPCANHandle index = pcanChannels[i].index;
        const TPCANStatus stat = ::CAN_GetValue(index, PCAN_CHANNEL_CONDITION,
                                                &value, sizeof(value));
        if ((stat == PCAN_ERROR_OK) && (value & PCAN_CHANNEL_AVAILABLE)) {
            const TPCANStatus fdStat = ::CAN_GetValue(index, PCAN_CHANNEL_FEATURES,
                                                      &value, sizeof(value));
            const bool isFd = (fdStat == PCAN_ERROR_OK) && (value & FEATURE_FD_CAPABLE);

            char description[256] = {0};
            const TPCANStatus descStat = ::CAN_GetValue(index, PCAN_HARDWARE_NAME,
                                                        description, sizeof(description));
            if (descStat != PCAN_ERROR_OK)
                description[0] = 0;

            int channel = 0;
            const TPCANStatus chnStat = ::CAN_GetValue(index, PCAN_CONTROLLER_NUMBER,
                                                       &channel, sizeof(channel));
            if (chnStat != PCAN_ERROR_OK)
                channel = 0;

            QString alias;
            quint32 deviceId = 0;
            const TPCANStatus idStat = ::CAN_GetValue(index, PCAN_DEVICE_ID,
                                                      &deviceId, sizeof(deviceId));
            if (idStat == PCAN_ERROR_OK)
                alias = QString::number(deviceId);

            result.append(std::move(createDeviceInfo(QLatin1String(pcanChannels[i].name),
                                                     QString(), QLatin1String(description),
                                                     alias, channel, false, isFd)));
        }
    }

    return result;
}
|——Node:template_type Text: QList<QCanBusDeviceInfo>
|———Node:type_identifier Text: QList
|———Node:template_argument_list Text: <QCanBusDeviceInfo>
|————Node:< Text: <
|————Node:type_descriptor Text: QCanBusDeviceInfo
|—————Node:type_identifier Text: QCanBusDeviceInfo
|————Node:> Text: >
|——Node:function_declarator Text: PeakCanBackend::interfacesByChannelCondition()
|———Node:qualified_identifier Text: PeakCanBackend::interfacesByChannelCondition
|————Node:namespace_identifier Text: PeakCanBackend
|————Node::: Text: ::
|————Node:identifier Text: interfacesByChannelCondition
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    QList<QCanBusDeviceInfo> result;

    for (int i = 0; pcanChannels[i].index != PCAN_NONEBUS; ++i) {
        uint value = 0;
        const TPCANHandle index = pcanChannels[i].index;
        const TPCANStatus stat = ::CAN_GetValue(index, PCAN_CHANNEL_CONDITION,
                                                &value, sizeof(value));
        if ((stat == PCAN_ERROR_OK) && (value & PCAN_CHANNEL_AVAILABLE)) {
            const TPCANStatus fdStat = ::CAN_GetValue(index, PCAN_CHANNEL_FEATURES,
                                                      &value, sizeof(value));
            const bool isFd = (fdStat == PCAN_ERROR_OK) && (value & FEATURE_FD_CAPABLE);

            char description[256] = {0};
            const TPCANStatus descStat = ::CAN_GetValue(index, PCAN_HARDWARE_NAME,
                                                        description, sizeof(description));
            if (descStat != PCAN_ERROR_OK)
                description[0] = 0;

            int channel = 0;
            const TPCANStatus chnStat = ::CAN_GetValue(index, PCAN_CONTROLLER_NUMBER,
                                                       &channel, sizeof(channel));
            if (chnStat != PCAN_ERROR_OK)
                channel = 0;

            QString alias;
            quint32 deviceId = 0;
            const TPCANStatus idStat = ::CAN_GetValue(index, PCAN_DEVICE_ID,
                                                      &deviceId, sizeof(deviceId));
            if (idStat == PCAN_ERROR_OK)
                alias = QString::number(deviceId);

            result.append(std::move(createDeviceInfo(QLatin1String(pcanChannels[i].name),
                                                     QString(), QLatin1String(description),
                                                     alias, channel, false, isFd)));
        }
    }

    return result;
}
|———Node:{ Text: {
|———Node:declaration Text: QList<QCanBusDeviceInfo> result;
|————Node:template_type Text: QList<QCanBusDeviceInfo>
|—————Node:type_identifier Text: QList
|—————Node:template_argument_list Text: <QCanBusDeviceInfo>
|——————Node:< Text: <
|——————Node:type_descriptor Text: QCanBusDeviceInfo
|———————Node:type_identifier Text: QCanBusDeviceInfo
|——————Node:> Text: >
|————Node:identifier Text: result
|————Node:; Text: ;
|———Node:for_statement Text: for (int i = 0; pcanChannels[i].index != PCAN_NONEBUS; ++i) {
        uint value = 0;
        const TPCANHandle index = pcanChannels[i].index;
        const TPCANStatus stat = ::CAN_GetValue(index, PCAN_CHANNEL_CONDITION,
                                                &value, sizeof(value));
        if ((stat == PCAN_ERROR_OK) && (value & PCAN_CHANNEL_AVAILABLE)) {
            const TPCANStatus fdStat = ::CAN_GetValue(index, PCAN_CHANNEL_FEATURES,
                                                      &value, sizeof(value));
            const bool isFd = (fdStat == PCAN_ERROR_OK) && (value & FEATURE_FD_CAPABLE);

            char description[256] = {0};
            const TPCANStatus descStat = ::CAN_GetValue(index, PCAN_HARDWARE_NAME,
                                                        description, sizeof(description));
            if (descStat != PCAN_ERROR_OK)
                description[0] = 0;

            int channel = 0;
            const TPCANStatus chnStat = ::CAN_GetValue(index, PCAN_CONTROLLER_NUMBER,
                                                       &channel, sizeof(channel));
            if (chnStat != PCAN_ERROR_OK)
                channel = 0;

            QString alias;
            quint32 deviceId = 0;
            const TPCANStatus idStat = ::CAN_GetValue(index, PCAN_DEVICE_ID,
                                                      &deviceId, sizeof(deviceId));
            if (idStat == PCAN_ERROR_OK)
                alias = QString::number(deviceId);

            result.append(std::move(createDeviceInfo(QLatin1String(pcanChannels[i].name),
                                                     QString(), QLatin1String(description),
                                                     alias, channel, false, isFd)));
        }
    }
|————Node:for Text: for
|————Node:( Text: (
|————Node:declaration Text: int i = 0;
|—————Node:primitive_type Text: int
|—————Node:init_declarator Text: i = 0
|——————Node:identifier Text: i
|——————Node:= Text: =
|——————Node:number_literal Text: 0
|—————Node:; Text: ;
|————Node:binary_expression Text: pcanChannels[i].index != PCAN_NONEBUS
|—————Node:field_expression Text: pcanChannels[i].index
|——————Node:subscript_expression Text: pcanChannels[i]
|———————Node:identifier Text: pcanChannels
|———————Node:subscript_argument_list Text: [i]
|————————Node:[ Text: [
|————————Node:identifier Text: i
|————————Node:] Text: ]
|——————Node:. Text: .
|——————Node:field_identifier Text: index
|—————Node:!= Text: !=
|—————Node:identifier Text: PCAN_NONEBUS
|————Node:; Text: ;
|————Node:update_expression Text: ++i
|—————Node:++ Text: ++
|—————Node:identifier Text: i
|————Node:) Text: )
|————Node:compound_statement Text: {
        uint value = 0;
        const TPCANHandle index = pcanChannels[i].index;
        const TPCANStatus stat = ::CAN_GetValue(index, PCAN_CHANNEL_CONDITION,
                                                &value, sizeof(value));
        if ((stat == PCAN_ERROR_OK) && (value & PCAN_CHANNEL_AVAILABLE)) {
            const TPCANStatus fdStat = ::CAN_GetValue(index, PCAN_CHANNEL_FEATURES,
                                                      &value, sizeof(value));
            const bool isFd = (fdStat == PCAN_ERROR_OK) && (value & FEATURE_FD_CAPABLE);

            char description[256] = {0};
            const TPCANStatus descStat = ::CAN_GetValue(index, PCAN_HARDWARE_NAME,
                                                        description, sizeof(description));
            if (descStat != PCAN_ERROR_OK)
                description[0] = 0;

            int channel = 0;
            const TPCANStatus chnStat = ::CAN_GetValue(index, PCAN_CONTROLLER_NUMBER,
                                                       &channel, sizeof(channel));
            if (chnStat != PCAN_ERROR_OK)
                channel = 0;

            QString alias;
            quint32 deviceId = 0;
            const TPCANStatus idStat = ::CAN_GetValue(index, PCAN_DEVICE_ID,
                                                      &deviceId, sizeof(deviceId));
            if (idStat == PCAN_ERROR_OK)
                alias = QString::number(deviceId);

            result.append(std::move(createDeviceInfo(QLatin1String(pcanChannels[i].name),
                                                     QString(), QLatin1String(description),
                                                     alias, channel, false, isFd)));
        }
    }
|—————Node:{ Text: {
|—————Node:declaration Text: uint value = 0;
|——————Node:type_identifier Text: uint
|——————Node:init_declarator Text: value = 0
|———————Node:identifier Text: value
|———————Node:= Text: =
|———————Node:number_literal Text: 0
|——————Node:; Text: ;
|—————Node:declaration Text: const TPCANHandle index = pcanChannels[i].index;
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:type_identifier Text: TPCANHandle
|——————Node:init_declarator Text: index = pcanChannels[i].index
|———————Node:identifier Text: index
|———————Node:= Text: =
|———————Node:field_expression Text: pcanChannels[i].index
|————————Node:subscript_expression Text: pcanChannels[i]
|—————————Node:identifier Text: pcanChannels
|—————————Node:subscript_argument_list Text: [i]
|——————————Node:[ Text: [
|——————————Node:identifier Text: i
|——————————Node:] Text: ]
|————————Node:. Text: .
|————————Node:field_identifier Text: index
|——————Node:; Text: ;
|—————Node:declaration Text: const TPCANStatus stat = ::CAN_GetValue(index, PCAN_CHANNEL_CONDITION,
                                                &value, sizeof(value));
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:type_identifier Text: TPCANStatus
|——————Node:init_declarator Text: stat = ::CAN_GetValue(index, PCAN_CHANNEL_CONDITION,
                                                &value, sizeof(value))
|———————Node:identifier Text: stat
|———————Node:= Text: =
|———————Node:call_expression Text: ::CAN_GetValue(index, PCAN_CHANNEL_CONDITION,
                                                &value, sizeof(value))
|————————Node:qualified_identifier Text: ::CAN_GetValue
|—————————Node::: Text: ::
|—————————Node:identifier Text: CAN_GetValue
|————————Node:argument_list Text: (index, PCAN_CHANNEL_CONDITION,
                                                &value, sizeof(value))
|—————————Node:( Text: (
|—————————Node:identifier Text: index
|—————————Node:, Text: ,
|—————————Node:identifier Text: PCAN_CHANNEL_CONDITION
|—————————Node:, Text: ,
|—————————Node:pointer_expression Text: &value
|——————————Node:& Text: &
|——————————Node:identifier Text: value
|—————————Node:, Text: ,
|—————————Node:sizeof_expression Text: sizeof(value)
|——————————Node:sizeof Text: sizeof
|——————————Node:parenthesized_expression Text: (value)
|———————————Node:( Text: (
|———————————Node:identifier Text: value
|———————————Node:) Text: )
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if ((stat == PCAN_ERROR_OK) && (value & PCAN_CHANNEL_AVAILABLE)) {
            const TPCANStatus fdStat = ::CAN_GetValue(index, PCAN_CHANNEL_FEATURES,
                                                      &value, sizeof(value));
            const bool isFd = (fdStat == PCAN_ERROR_OK) && (value & FEATURE_FD_CAPABLE);

            char description[256] = {0};
            const TPCANStatus descStat = ::CAN_GetValue(index, PCAN_HARDWARE_NAME,
                                                        description, sizeof(description));
            if (descStat != PCAN_ERROR_OK)
                description[0] = 0;

            int channel = 0;
            const TPCANStatus chnStat = ::CAN_GetValue(index, PCAN_CONTROLLER_NUMBER,
                                                       &channel, sizeof(channel));
            if (chnStat != PCAN_ERROR_OK)
                channel = 0;

            QString alias;
            quint32 deviceId = 0;
            const TPCANStatus idStat = ::CAN_GetValue(index, PCAN_DEVICE_ID,
                                                      &deviceId, sizeof(deviceId));
            if (idStat == PCAN_ERROR_OK)
                alias = QString::number(deviceId);

            result.append(std::move(createDeviceInfo(QLatin1String(pcanChannels[i].name),
                                                     QString(), QLatin1String(description),
                                                     alias, channel, false, isFd)));
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: ((stat == PCAN_ERROR_OK) && (value & PCAN_CHANNEL_AVAILABLE))
|———————Node:( Text: (
|———————Node:binary_expression Text: (stat == PCAN_ERROR_OK) && (value & PCAN_CHANNEL_AVAILABLE)
|————————Node:parenthesized_expression Text: (stat == PCAN_ERROR_OK)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: stat == PCAN_ERROR_OK
|——————————Node:identifier Text: stat
|——————————Node:== Text: ==
|——————————Node:identifier Text: PCAN_ERROR_OK
|—————————Node:) Text: )
|————————Node:&& Text: &&
|————————Node:parenthesized_expression Text: (value & PCAN_CHANNEL_AVAILABLE)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: value & PCAN_CHANNEL_AVAILABLE
|——————————Node:identifier Text: value
|——————————Node:& Text: &
|——————————Node:identifier Text: PCAN_CHANNEL_AVAILABLE
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            const TPCANStatus fdStat = ::CAN_GetValue(index, PCAN_CHANNEL_FEATURES,
                                                      &value, sizeof(value));
            const bool isFd = (fdStat == PCAN_ERROR_OK) && (value & FEATURE_FD_CAPABLE);

            char description[256] = {0};
            const TPCANStatus descStat = ::CAN_GetValue(index, PCAN_HARDWARE_NAME,
                                                        description, sizeof(description));
            if (descStat != PCAN_ERROR_OK)
                description[0] = 0;

            int channel = 0;
            const TPCANStatus chnStat = ::CAN_GetValue(index, PCAN_CONTROLLER_NUMBER,
                                                       &channel, sizeof(channel));
            if (chnStat != PCAN_ERROR_OK)
                channel = 0;

            QString alias;
            quint32 deviceId = 0;
            const TPCANStatus idStat = ::CAN_GetValue(index, PCAN_DEVICE_ID,
                                                      &deviceId, sizeof(deviceId));
            if (idStat == PCAN_ERROR_OK)
                alias = QString::number(deviceId);

            result.append(std::move(createDeviceInfo(QLatin1String(pcanChannels[i].name),
                                                     QString(), QLatin1String(description),
                                                     alias, channel, false, isFd)));
        }
|———————Node:{ Text: {
|———————Node:declaration Text: const TPCANStatus fdStat = ::CAN_GetValue(index, PCAN_CHANNEL_FEATURES,
                                                      &value, sizeof(value));
|————————Node:type_qualifier Text: const
|—————————Node:const Text: const
|————————Node:type_identifier Text: TPCANStatus
|————————Node:init_declarator Text: fdStat = ::CAN_GetValue(index, PCAN_CHANNEL_FEATURES,
                                                      &value, sizeof(value))
|—————————Node:identifier Text: fdStat
|—————————Node:= Text: =
|—————————Node:call_expression Text: ::CAN_GetValue(index, PCAN_CHANNEL_FEATURES,
                                                      &value, sizeof(value))
|——————————Node:qualified_identifier Text: ::CAN_GetValue
|———————————Node::: Text: ::
|———————————Node:identifier Text: CAN_GetValue
|——————————Node:argument_list Text: (index, PCAN_CHANNEL_FEATURES,
                                                      &value, sizeof(value))
|———————————Node:( Text: (
|———————————Node:identifier Text: index
|———————————Node:, Text: ,
|———————————Node:identifier Text: PCAN_CHANNEL_FEATURES
|———————————Node:, Text: ,
|———————————Node:pointer_expression Text: &value
|————————————Node:& Text: &
|————————————Node:identifier Text: value
|———————————Node:, Text: ,
|———————————Node:sizeof_expression Text: sizeof(value)
|————————————Node:sizeof Text: sizeof
|————————————Node:parenthesized_expression Text: (value)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: value
|—————————————Node:) Text: )
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:declaration Text: const bool isFd = (fdStat == PCAN_ERROR_OK) && (value & FEATURE_FD_CAPABLE);
|————————Node:type_qualifier Text: const
|—————————Node:const Text: const
|————————Node:primitive_type Text: bool
|————————Node:init_declarator Text: isFd = (fdStat == PCAN_ERROR_OK) && (value & FEATURE_FD_CAPABLE)
|—————————Node:identifier Text: isFd
|—————————Node:= Text: =
|—————————Node:binary_expression Text: (fdStat == PCAN_ERROR_OK) && (value & FEATURE_FD_CAPABLE)
|——————————Node:parenthesized_expression Text: (fdStat == PCAN_ERROR_OK)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: fdStat == PCAN_ERROR_OK
|————————————Node:identifier Text: fdStat
|————————————Node:== Text: ==
|————————————Node:identifier Text: PCAN_ERROR_OK
|———————————Node:) Text: )
|——————————Node:&& Text: &&
|——————————Node:parenthesized_expression Text: (value & FEATURE_FD_CAPABLE)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: value & FEATURE_FD_CAPABLE
|————————————Node:identifier Text: value
|————————————Node:& Text: &
|————————————Node:identifier Text: FEATURE_FD_CAPABLE
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:declaration Text: char description[256] = {0};
|————————Node:primitive_type Text: char
|————————Node:init_declarator Text: description[256] = {0}
|—————————Node:array_declarator Text: description[256]
|——————————Node:identifier Text: description
|——————————Node:[ Text: [
|——————————Node:number_literal Text: 256
|——————————Node:] Text: ]
|—————————Node:= Text: =
|—————————Node:initializer_list Text: {0}
|——————————Node:{ Text: {
|——————————Node:number_literal Text: 0
|——————————Node:} Text: }
|————————Node:; Text: ;
|———————Node:declaration Text: const TPCANStatus descStat = ::CAN_GetValue(index, PCAN_HARDWARE_NAME,
                                                        description, sizeof(description));
|————————Node:type_qualifier Text: const
|—————————Node:const Text: const
|————————Node:type_identifier Text: TPCANStatus
|————————Node:init_declarator Text: descStat = ::CAN_GetValue(index, PCAN_HARDWARE_NAME,
                                                        description, sizeof(description))
|—————————Node:identifier Text: descStat
|—————————Node:= Text: =
|—————————Node:call_expression Text: ::CAN_GetValue(index, PCAN_HARDWARE_NAME,
                                                        description, sizeof(description))
|——————————Node:qualified_identifier Text: ::CAN_GetValue
|———————————Node::: Text: ::
|———————————Node:identifier Text: CAN_GetValue
|——————————Node:argument_list Text: (index, PCAN_HARDWARE_NAME,
                                                        description, sizeof(description))
|———————————Node:( Text: (
|———————————Node:identifier Text: index
|———————————Node:, Text: ,
|———————————Node:identifier Text: PCAN_HARDWARE_NAME
|———————————Node:, Text: ,
|———————————Node:identifier Text: description
|———————————Node:, Text: ,
|———————————Node:sizeof_expression Text: sizeof(description)
|————————————Node:sizeof Text: sizeof
|————————————Node:parenthesized_expression Text: (description)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: description
|—————————————Node:) Text: )
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:if_statement Text: if (descStat != PCAN_ERROR_OK)
                description[0] = 0;
|————————Node:if Text: if
|————————Node:condition_clause Text: (descStat != PCAN_ERROR_OK)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: descStat != PCAN_ERROR_OK
|——————————Node:identifier Text: descStat
|——————————Node:!= Text: !=
|——————————Node:identifier Text: PCAN_ERROR_OK
|—————————Node:) Text: )
|————————Node:expression_statement Text: description[0] = 0;
|—————————Node:assignment_expression Text: description[0] = 0
|——————————Node:subscript_expression Text: description[0]
|———————————Node:identifier Text: description
|———————————Node:subscript_argument_list Text: [0]
|————————————Node:[ Text: [
|————————————Node:number_literal Text: 0
|————————————Node:] Text: ]
|——————————Node:= Text: =
|——————————Node:number_literal Text: 0
|—————————Node:; Text: ;
|———————Node:declaration Text: int channel = 0;
|————————Node:primitive_type Text: int
|————————Node:init_declarator Text: channel = 0
|—————————Node:identifier Text: channel
|—————————Node:= Text: =
|—————————Node:number_literal Text: 0
|————————Node:; Text: ;
|———————Node:declaration Text: const TPCANStatus chnStat = ::CAN_GetValue(index, PCAN_CONTROLLER_NUMBER,
                                                       &channel, sizeof(channel));
|————————Node:type_qualifier Text: const
|—————————Node:const Text: const
|————————Node:type_identifier Text: TPCANStatus
|————————Node:init_declarator Text: chnStat = ::CAN_GetValue(index, PCAN_CONTROLLER_NUMBER,
                                                       &channel, sizeof(channel))
|—————————Node:identifier Text: chnStat
|—————————Node:= Text: =
|—————————Node:call_expression Text: ::CAN_GetValue(index, PCAN_CONTROLLER_NUMBER,
                                                       &channel, sizeof(channel))
|——————————Node:qualified_identifier Text: ::CAN_GetValue
|———————————Node::: Text: ::
|———————————Node:identifier Text: CAN_GetValue
|——————————Node:argument_list Text: (index, PCAN_CONTROLLER_NUMBER,
                                                       &channel, sizeof(channel))
|———————————Node:( Text: (
|———————————Node:identifier Text: index
|———————————Node:, Text: ,
|———————————Node:identifier Text: PCAN_CONTROLLER_NUMBER
|———————————Node:, Text: ,
|———————————Node:pointer_expression Text: &channel
|————————————Node:& Text: &
|————————————Node:identifier Text: channel
|———————————Node:, Text: ,
|———————————Node:sizeof_expression Text: sizeof(channel)
|————————————Node:sizeof Text: sizeof
|————————————Node:parenthesized_expression Text: (channel)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: channel
|—————————————Node:) Text: )
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:if_statement Text: if (chnStat != PCAN_ERROR_OK)
                channel = 0;
|————————Node:if Text: if
|————————Node:condition_clause Text: (chnStat != PCAN_ERROR_OK)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: chnStat != PCAN_ERROR_OK
|——————————Node:identifier Text: chnStat
|——————————Node:!= Text: !=
|——————————Node:identifier Text: PCAN_ERROR_OK
|—————————Node:) Text: )
|————————Node:expression_statement Text: channel = 0;
|—————————Node:assignment_expression Text: channel = 0
|——————————Node:identifier Text: channel
|——————————Node:= Text: =
|——————————Node:number_literal Text: 0
|—————————Node:; Text: ;
|———————Node:declaration Text: QString alias;
|————————Node:type_identifier Text: QString
|————————Node:identifier Text: alias
|————————Node:; Text: ;
|———————Node:declaration Text: quint32 deviceId = 0;
|————————Node:type_identifier Text: quint32
|————————Node:init_declarator Text: deviceId = 0
|—————————Node:identifier Text: deviceId
|—————————Node:= Text: =
|—————————Node:number_literal Text: 0
|————————Node:; Text: ;
|———————Node:declaration Text: const TPCANStatus idStat = ::CAN_GetValue(index, PCAN_DEVICE_ID,
                                                      &deviceId, sizeof(deviceId));
|————————Node:type_qualifier Text: const
|—————————Node:const Text: const
|————————Node:type_identifier Text: TPCANStatus
|————————Node:init_declarator Text: idStat = ::CAN_GetValue(index, PCAN_DEVICE_ID,
                                                      &deviceId, sizeof(deviceId))
|—————————Node:identifier Text: idStat
|—————————Node:= Text: =
|—————————Node:call_expression Text: ::CAN_GetValue(index, PCAN_DEVICE_ID,
                                                      &deviceId, sizeof(deviceId))
|——————————Node:qualified_identifier Text: ::CAN_GetValue
|———————————Node::: Text: ::
|———————————Node:identifier Text: CAN_GetValue
|——————————Node:argument_list Text: (index, PCAN_DEVICE_ID,
                                                      &deviceId, sizeof(deviceId))
|———————————Node:( Text: (
|———————————Node:identifier Text: index
|———————————Node:, Text: ,
|———————————Node:identifier Text: PCAN_DEVICE_ID
|———————————Node:, Text: ,
|———————————Node:pointer_expression Text: &deviceId
|————————————Node:& Text: &
|————————————Node:identifier Text: deviceId
|———————————Node:, Text: ,
|———————————Node:sizeof_expression Text: sizeof(deviceId)
|————————————Node:sizeof Text: sizeof
|————————————Node:parenthesized_expression Text: (deviceId)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: deviceId
|—————————————Node:) Text: )
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:if_statement Text: if (idStat == PCAN_ERROR_OK)
                alias = QString::number(deviceId);
|————————Node:if Text: if
|————————Node:condition_clause Text: (idStat == PCAN_ERROR_OK)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: idStat == PCAN_ERROR_OK
|——————————Node:identifier Text: idStat
|——————————Node:== Text: ==
|——————————Node:identifier Text: PCAN_ERROR_OK
|—————————Node:) Text: )
|————————Node:expression_statement Text: alias = QString::number(deviceId);
|—————————Node:assignment_expression Text: alias = QString::number(deviceId)
|——————————Node:identifier Text: alias
|——————————Node:= Text: =
|——————————Node:call_expression Text: QString::number(deviceId)
|———————————Node:qualified_identifier Text: QString::number
|————————————Node:namespace_identifier Text: QString
|————————————Node::: Text: ::
|————————————Node:identifier Text: number
|———————————Node:argument_list Text: (deviceId)
|————————————Node:( Text: (
|————————————Node:identifier Text: deviceId
|————————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:expression_statement Text: result.append(std::move(createDeviceInfo(QLatin1String(pcanChannels[i].name),
                                                     QString(), QLatin1String(description),
                                                     alias, channel, false, isFd)));
|————————Node:call_expression Text: result.append(std::move(createDeviceInfo(QLatin1String(pcanChannels[i].name),
                                                     QString(), QLatin1String(description),
                                                     alias, channel, false, isFd)))
|—————————Node:field_expression Text: result.append
|——————————Node:identifier Text: result
|——————————Node:. Text: .
|——————————Node:field_identifier Text: append
|—————————Node:argument_list Text: (std::move(createDeviceInfo(QLatin1String(pcanChannels[i].name),
                                                     QString(), QLatin1String(description),
                                                     alias, channel, false, isFd)))
|——————————Node:( Text: (
|——————————Node:call_expression Text: std::move(createDeviceInfo(QLatin1String(pcanChannels[i].name),
                                                     QString(), QLatin1String(description),
                                                     alias, channel, false, isFd))
|———————————Node:qualified_identifier Text: std::move
|————————————Node:namespace_identifier Text: std
|————————————Node::: Text: ::
|————————————Node:identifier Text: move
|———————————Node:argument_list Text: (createDeviceInfo(QLatin1String(pcanChannels[i].name),
                                                     QString(), QLatin1String(description),
                                                     alias, channel, false, isFd))
|————————————Node:( Text: (
|————————————Node:call_expression Text: createDeviceInfo(QLatin1String(pcanChannels[i].name),
                                                     QString(), QLatin1String(description),
                                                     alias, channel, false, isFd)
|—————————————Node:identifier Text: createDeviceInfo
|—————————————Node:argument_list Text: (QLatin1String(pcanChannels[i].name),
                                                     QString(), QLatin1String(description),
                                                     alias, channel, false, isFd)
|——————————————Node:( Text: (
|——————————————Node:call_expression Text: QLatin1String(pcanChannels[i].name)
|———————————————Node:identifier Text: QLatin1String
|———————————————Node:argument_list Text: (pcanChannels[i].name)
|————————————————Node:( Text: (
|————————————————Node:field_expression Text: pcanChannels[i].name
|—————————————————Node:subscript_expression Text: pcanChannels[i]
|——————————————————Node:identifier Text: pcanChannels
|——————————————————Node:subscript_argument_list Text: [i]
|———————————————————Node:[ Text: [
|———————————————————Node:identifier Text: i
|———————————————————Node:] Text: ]
|—————————————————Node:. Text: .
|—————————————————Node:field_identifier Text: name
|————————————————Node:) Text: )
|——————————————Node:, Text: ,
|——————————————Node:call_expression Text: QString()
|———————————————Node:identifier Text: QString
|———————————————Node:argument_list Text: ()
|————————————————Node:( Text: (
|————————————————Node:) Text: )
|——————————————Node:, Text: ,
|——————————————Node:call_expression Text: QLatin1String(description)
|———————————————Node:identifier Text: QLatin1String
|———————————————Node:argument_list Text: (description)
|————————————————Node:( Text: (
|————————————————Node:identifier Text: description
|————————————————Node:) Text: )
|——————————————Node:, Text: ,
|——————————————Node:identifier Text: alias
|——————————————Node:, Text: ,
|——————————————Node:identifier Text: channel
|——————————————Node:, Text: ,
|——————————————Node:false Text: false
|——————————————Node:, Text: ,
|——————————————Node:identifier Text: isFd
|——————————————Node:) Text: )
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:return_statement Text: return result;
|————Node:return Text: return
|————Node:identifier Text: result
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: QList<QCanBusDeviceInfo> PeakCanBackend::interfacesByAttachedChannels(bool *ok)
{
    *ok = true;
    quint32 count = 0;
    const TPCANStatus countStat = ::CAN_GetValue(0, PCAN_ATTACHED_CHANNELS_COUNT,
                                                 &count, sizeof(count));
    if (Q_UNLIKELY(countStat != PCAN_ERROR_OK)) {
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot query PCAN_ATTACHED_CHANNELS_COUNT.");
        *ok = false;
        return {};
    }
    if (count == 0)
        return {};

    std::vector<TPCANChannelInformation> infos(count);
    const TPCANStatus infosStat = ::CAN_GetValue(0, PCAN_ATTACHED_CHANNELS, infos.data(),
                                                 quint32(infos.size() * sizeof(TPCANChannelInformation)));
    if (Q_UNLIKELY(infosStat != PCAN_ERROR_OK)) {
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot query PCAN_ATTACHED_CHANNELS.");
        *ok = false;
        return {};
    }

    QList<QCanBusDeviceInfo> result;
    for (quint32 i = 0; i < count; ++i) {
        auto info = infos[i];
        if (info.channel_condition & PCAN_CHANNEL_AVAILABLE) {
            const quint32 deviceId = info.channel_handle;
            const auto pcanChannel = std::find_if(std::begin(pcanChannels), std::end(pcanChannels),
                                                  [deviceId](PcanChannel channel) {
                return channel.index == deviceId;
            });
            const QString name = pcanChannel->name;
            const QString description = info.device_name;
            const QString alias = QString::number(info.device_id);
            const int channel = info.controller_number;
            const bool isCanFd = (info.device_features & FEATURE_FD_CAPABLE);

            result.append(std::move(createDeviceInfo(name, QString(), description, alias,
                                                     channel, false, isCanFd)));
        }
    }

    return result;
}
|——Node:template_type Text: QList<QCanBusDeviceInfo>
|———Node:type_identifier Text: QList
|———Node:template_argument_list Text: <QCanBusDeviceInfo>
|————Node:< Text: <
|————Node:type_descriptor Text: QCanBusDeviceInfo
|—————Node:type_identifier Text: QCanBusDeviceInfo
|————Node:> Text: >
|——Node:function_declarator Text: PeakCanBackend::interfacesByAttachedChannels(bool *ok)
|———Node:qualified_identifier Text: PeakCanBackend::interfacesByAttachedChannels
|————Node:namespace_identifier Text: PeakCanBackend
|————Node::: Text: ::
|————Node:identifier Text: interfacesByAttachedChannels
|———Node:parameter_list Text: (bool *ok)
|————Node:( Text: (
|————Node:parameter_declaration Text: bool *ok
|—————Node:primitive_type Text: bool
|—————Node:pointer_declarator Text: *ok
|——————Node:* Text: *
|——————Node:identifier Text: ok
|————Node:) Text: )
|——Node:compound_statement Text: {
    *ok = true;
    quint32 count = 0;
    const TPCANStatus countStat = ::CAN_GetValue(0, PCAN_ATTACHED_CHANNELS_COUNT,
                                                 &count, sizeof(count));
    if (Q_UNLIKELY(countStat != PCAN_ERROR_OK)) {
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot query PCAN_ATTACHED_CHANNELS_COUNT.");
        *ok = false;
        return {};
    }
    if (count == 0)
        return {};

    std::vector<TPCANChannelInformation> infos(count);
    const TPCANStatus infosStat = ::CAN_GetValue(0, PCAN_ATTACHED_CHANNELS, infos.data(),
                                                 quint32(infos.size() * sizeof(TPCANChannelInformation)));
    if (Q_UNLIKELY(infosStat != PCAN_ERROR_OK)) {
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot query PCAN_ATTACHED_CHANNELS.");
        *ok = false;
        return {};
    }

    QList<QCanBusDeviceInfo> result;
    for (quint32 i = 0; i < count; ++i) {
        auto info = infos[i];
        if (info.channel_condition & PCAN_CHANNEL_AVAILABLE) {
            const quint32 deviceId = info.channel_handle;
            const auto pcanChannel = std::find_if(std::begin(pcanChannels), std::end(pcanChannels),
                                                  [deviceId](PcanChannel channel) {
                return channel.index == deviceId;
            });
            const QString name = pcanChannel->name;
            const QString description = info.device_name;
            const QString alias = QString::number(info.device_id);
            const int channel = info.controller_number;
            const bool isCanFd = (info.device_features & FEATURE_FD_CAPABLE);

            result.append(std::move(createDeviceInfo(name, QString(), description, alias,
                                                     channel, false, isCanFd)));
        }
    }

    return result;
}
|———Node:{ Text: {
|———Node:expression_statement Text: *ok = true;
|————Node:assignment_expression Text: *ok = true
|—————Node:pointer_expression Text: *ok
|——————Node:* Text: *
|——————Node:identifier Text: ok
|—————Node:= Text: =
|—————Node:true Text: true
|————Node:; Text: ;
|———Node:declaration Text: quint32 count = 0;
|————Node:type_identifier Text: quint32
|————Node:init_declarator Text: count = 0
|—————Node:identifier Text: count
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: const TPCANStatus countStat = ::CAN_GetValue(0, PCAN_ATTACHED_CHANNELS_COUNT,
                                                 &count, sizeof(count));
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: TPCANStatus
|————Node:init_declarator Text: countStat = ::CAN_GetValue(0, PCAN_ATTACHED_CHANNELS_COUNT,
                                                 &count, sizeof(count))
|—————Node:identifier Text: countStat
|—————Node:= Text: =
|—————Node:call_expression Text: ::CAN_GetValue(0, PCAN_ATTACHED_CHANNELS_COUNT,
                                                 &count, sizeof(count))
|——————Node:qualified_identifier Text: ::CAN_GetValue
|———————Node::: Text: ::
|———————Node:identifier Text: CAN_GetValue
|——————Node:argument_list Text: (0, PCAN_ATTACHED_CHANNELS_COUNT,
                                                 &count, sizeof(count))
|———————Node:( Text: (
|———————Node:number_literal Text: 0
|———————Node:, Text: ,
|———————Node:identifier Text: PCAN_ATTACHED_CHANNELS_COUNT
|———————Node:, Text: ,
|———————Node:pointer_expression Text: &count
|————————Node:& Text: &
|————————Node:identifier Text: count
|———————Node:, Text: ,
|———————Node:sizeof_expression Text: sizeof(count)
|————————Node:sizeof Text: sizeof
|————————Node:parenthesized_expression Text: (count)
|—————————Node:( Text: (
|—————————Node:identifier Text: count
|—————————Node:) Text: )
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(countStat != PCAN_ERROR_OK)) {
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot query PCAN_ATTACHED_CHANNELS_COUNT.");
        *ok = false;
        return {};
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(countStat != PCAN_ERROR_OK))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(countStat != PCAN_ERROR_OK)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (countStat != PCAN_ERROR_OK)
|———————Node:( Text: (
|———————Node:binary_expression Text: countStat != PCAN_ERROR_OK
|————————Node:identifier Text: countStat
|————————Node:!= Text: !=
|————————Node:identifier Text: PCAN_ERROR_OK
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot query PCAN_ATTACHED_CHANNELS_COUNT.");
        *ok = false;
        return {};
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot query PCAN_ATTACHED_CHANNELS_COUNT.");
|——————Node:call_expression Text: qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot query PCAN_ATTACHED_CHANNELS_COUNT.")
|———————Node:identifier Text: qCWarning
|———————Node:argument_list Text: (QT_CANBUS_PLUGINS_PEAKCAN, "Cannot query PCAN_ATTACHED_CHANNELS_COUNT.")
|————————Node:( Text: (
|————————Node:identifier Text: QT_CANBUS_PLUGINS_PEAKCAN
|————————Node:, Text: ,
|————————Node:string_literal Text: "Cannot query PCAN_ATTACHED_CHANNELS_COUNT."
|—————————Node:" Text: "
|—————————Node:string_content Text: Cannot query PCAN_ATTACHED_CHANNELS_COUNT.
|—————————Node:" Text: "
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: *ok = false;
|——————Node:assignment_expression Text: *ok = false
|———————Node:pointer_expression Text: *ok
|————————Node:* Text: *
|————————Node:identifier Text: ok
|———————Node:= Text: =
|———————Node:false Text: false
|——————Node:; Text: ;
|—————Node:return_statement Text: return {};
|——————Node:return Text: return
|——————Node:initializer_list Text: {}
|———————Node:{ Text: {
|———————Node:} Text: }
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:if_statement Text: if (count == 0)
        return {};
|————Node:if Text: if
|————Node:condition_clause Text: (count == 0)
|—————Node:( Text: (
|—————Node:binary_expression Text: count == 0
|——————Node:identifier Text: count
|——————Node:== Text: ==
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:return_statement Text: return {};
|—————Node:return Text: return
|—————Node:initializer_list Text: {}
|——————Node:{ Text: {
|——————Node:} Text: }
|—————Node:; Text: ;
|———Node:declaration Text: std::vector<TPCANChannelInformation> infos(count);
|————Node:qualified_identifier Text: std::vector<TPCANChannelInformation>
|—————Node:namespace_identifier Text: std
|—————Node::: Text: ::
|—————Node:template_type Text: vector<TPCANChannelInformation>
|——————Node:type_identifier Text: vector
|——————Node:template_argument_list Text: <TPCANChannelInformation>
|———————Node:< Text: <
|———————Node:type_descriptor Text: TPCANChannelInformation
|————————Node:type_identifier Text: TPCANChannelInformation
|———————Node:> Text: >
|————Node:function_declarator Text: infos(count)
|—————Node:identifier Text: infos
|—————Node:parameter_list Text: (count)
|——————Node:( Text: (
|——————Node:parameter_declaration Text: count
|———————Node:type_identifier Text: count
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: const TPCANStatus infosStat = ::CAN_GetValue(0, PCAN_ATTACHED_CHANNELS, infos.data(),
                                                 quint32(infos.size() * sizeof(TPCANChannelInformation)));
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: TPCANStatus
|————Node:init_declarator Text: infosStat = ::CAN_GetValue(0, PCAN_ATTACHED_CHANNELS, infos.data(),
                                                 quint32(infos.size() * sizeof(TPCANChannelInformation)))
|—————Node:identifier Text: infosStat
|—————Node:= Text: =
|—————Node:call_expression Text: ::CAN_GetValue(0, PCAN_ATTACHED_CHANNELS, infos.data(),
                                                 quint32(infos.size() * sizeof(TPCANChannelInformation)))
|——————Node:qualified_identifier Text: ::CAN_GetValue
|———————Node::: Text: ::
|———————Node:identifier Text: CAN_GetValue
|——————Node:argument_list Text: (0, PCAN_ATTACHED_CHANNELS, infos.data(),
                                                 quint32(infos.size() * sizeof(TPCANChannelInformation)))
|———————Node:( Text: (
|———————Node:number_literal Text: 0
|———————Node:, Text: ,
|———————Node:identifier Text: PCAN_ATTACHED_CHANNELS
|———————Node:, Text: ,
|———————Node:call_expression Text: infos.data()
|————————Node:field_expression Text: infos.data
|—————————Node:identifier Text: infos
|—————————Node:. Text: .
|—————————Node:field_identifier Text: data
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:, Text: ,
|———————Node:call_expression Text: quint32(infos.size() * sizeof(TPCANChannelInformation))
|————————Node:identifier Text: quint32
|————————Node:argument_list Text: (infos.size() * sizeof(TPCANChannelInformation))
|—————————Node:( Text: (
|—————————Node:binary_expression Text: infos.size() * sizeof(TPCANChannelInformation)
|——————————Node:call_expression Text: infos.size()
|———————————Node:field_expression Text: infos.size
|————————————Node:identifier Text: infos
|————————————Node:. Text: .
|————————————Node:field_identifier Text: size
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:* Text: *
|——————————Node:sizeof_expression Text: sizeof(TPCANChannelInformation)
|———————————Node:sizeof Text: sizeof
|———————————Node:parenthesized_expression Text: (TPCANChannelInformation)
|————————————Node:( Text: (
|————————————Node:identifier Text: TPCANChannelInformation
|————————————Node:) Text: )
|—————————Node:) Text: )
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(infosStat != PCAN_ERROR_OK)) {
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot query PCAN_ATTACHED_CHANNELS.");
        *ok = false;
        return {};
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(infosStat != PCAN_ERROR_OK))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(infosStat != PCAN_ERROR_OK)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (infosStat != PCAN_ERROR_OK)
|———————Node:( Text: (
|———————Node:binary_expression Text: infosStat != PCAN_ERROR_OK
|————————Node:identifier Text: infosStat
|————————Node:!= Text: !=
|————————Node:identifier Text: PCAN_ERROR_OK
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot query PCAN_ATTACHED_CHANNELS.");
        *ok = false;
        return {};
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot query PCAN_ATTACHED_CHANNELS.");
|——————Node:call_expression Text: qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot query PCAN_ATTACHED_CHANNELS.")
|———————Node:identifier Text: qCWarning
|———————Node:argument_list Text: (QT_CANBUS_PLUGINS_PEAKCAN, "Cannot query PCAN_ATTACHED_CHANNELS.")
|————————Node:( Text: (
|————————Node:identifier Text: QT_CANBUS_PLUGINS_PEAKCAN
|————————Node:, Text: ,
|————————Node:string_literal Text: "Cannot query PCAN_ATTACHED_CHANNELS."
|—————————Node:" Text: "
|—————————Node:string_content Text: Cannot query PCAN_ATTACHED_CHANNELS.
|—————————Node:" Text: "
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: *ok = false;
|——————Node:assignment_expression Text: *ok = false
|———————Node:pointer_expression Text: *ok
|————————Node:* Text: *
|————————Node:identifier Text: ok
|———————Node:= Text: =
|———————Node:false Text: false
|——————Node:; Text: ;
|—————Node:return_statement Text: return {};
|——————Node:return Text: return
|——————Node:initializer_list Text: {}
|———————Node:{ Text: {
|———————Node:} Text: }
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:declaration Text: QList<QCanBusDeviceInfo> result;
|————Node:template_type Text: QList<QCanBusDeviceInfo>
|—————Node:type_identifier Text: QList
|—————Node:template_argument_list Text: <QCanBusDeviceInfo>
|——————Node:< Text: <
|——————Node:type_descriptor Text: QCanBusDeviceInfo
|———————Node:type_identifier Text: QCanBusDeviceInfo
|——————Node:> Text: >
|————Node:identifier Text: result
|————Node:; Text: ;
|———Node:for_statement Text: for (quint32 i = 0; i < count; ++i) {
        auto info = infos[i];
        if (info.channel_condition & PCAN_CHANNEL_AVAILABLE) {
            const quint32 deviceId = info.channel_handle;
            const auto pcanChannel = std::find_if(std::begin(pcanChannels), std::end(pcanChannels),
                                                  [deviceId](PcanChannel channel) {
                return channel.index == deviceId;
            });
            const QString name = pcanChannel->name;
            const QString description = info.device_name;
            const QString alias = QString::number(info.device_id);
            const int channel = info.controller_number;
            const bool isCanFd = (info.device_features & FEATURE_FD_CAPABLE);

            result.append(std::move(createDeviceInfo(name, QString(), description, alias,
                                                     channel, false, isCanFd)));
        }
    }
|————Node:for Text: for
|————Node:( Text: (
|————Node:declaration Text: quint32 i = 0;
|—————Node:type_identifier Text: quint32
|—————Node:init_declarator Text: i = 0
|——————Node:identifier Text: i
|——————Node:= Text: =
|——————Node:number_literal Text: 0
|—————Node:; Text: ;
|————Node:binary_expression Text: i < count
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:identifier Text: count
|————Node:; Text: ;
|————Node:update_expression Text: ++i
|—————Node:++ Text: ++
|—————Node:identifier Text: i
|————Node:) Text: )
|————Node:compound_statement Text: {
        auto info = infos[i];
        if (info.channel_condition & PCAN_CHANNEL_AVAILABLE) {
            const quint32 deviceId = info.channel_handle;
            const auto pcanChannel = std::find_if(std::begin(pcanChannels), std::end(pcanChannels),
                                                  [deviceId](PcanChannel channel) {
                return channel.index == deviceId;
            });
            const QString name = pcanChannel->name;
            const QString description = info.device_name;
            const QString alias = QString::number(info.device_id);
            const int channel = info.controller_number;
            const bool isCanFd = (info.device_features & FEATURE_FD_CAPABLE);

            result.append(std::move(createDeviceInfo(name, QString(), description, alias,
                                                     channel, false, isCanFd)));
        }
    }
|—————Node:{ Text: {
|—————Node:declaration Text: auto info = infos[i];
|——————Node:placeholder_type_specifier Text: auto
|———————Node:auto Text: auto
|——————Node:init_declarator Text: info = infos[i]
|———————Node:identifier Text: info
|———————Node:= Text: =
|———————Node:subscript_expression Text: infos[i]
|————————Node:identifier Text: infos
|————————Node:subscript_argument_list Text: [i]
|—————————Node:[ Text: [
|—————————Node:identifier Text: i
|—————————Node:] Text: ]
|——————Node:; Text: ;
|—————Node:if_statement Text: if (info.channel_condition & PCAN_CHANNEL_AVAILABLE) {
            const quint32 deviceId = info.channel_handle;
            const auto pcanChannel = std::find_if(std::begin(pcanChannels), std::end(pcanChannels),
                                                  [deviceId](PcanChannel channel) {
                return channel.index == deviceId;
            });
            const QString name = pcanChannel->name;
            const QString description = info.device_name;
            const QString alias = QString::number(info.device_id);
            const int channel = info.controller_number;
            const bool isCanFd = (info.device_features & FEATURE_FD_CAPABLE);

            result.append(std::move(createDeviceInfo(name, QString(), description, alias,
                                                     channel, false, isCanFd)));
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (info.channel_condition & PCAN_CHANNEL_AVAILABLE)
|———————Node:( Text: (
|———————Node:binary_expression Text: info.channel_condition & PCAN_CHANNEL_AVAILABLE
|————————Node:field_expression Text: info.channel_condition
|—————————Node:identifier Text: info
|—————————Node:. Text: .
|—————————Node:field_identifier Text: channel_condition
|————————Node:& Text: &
|————————Node:identifier Text: PCAN_CHANNEL_AVAILABLE
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            const quint32 deviceId = info.channel_handle;
            const auto pcanChannel = std::find_if(std::begin(pcanChannels), std::end(pcanChannels),
                                                  [deviceId](PcanChannel channel) {
                return channel.index == deviceId;
            });
            const QString name = pcanChannel->name;
            const QString description = info.device_name;
            const QString alias = QString::number(info.device_id);
            const int channel = info.controller_number;
            const bool isCanFd = (info.device_features & FEATURE_FD_CAPABLE);

            result.append(std::move(createDeviceInfo(name, QString(), description, alias,
                                                     channel, false, isCanFd)));
        }
|———————Node:{ Text: {
|———————Node:declaration Text: const quint32 deviceId = info.channel_handle;
|————————Node:type_qualifier Text: const
|—————————Node:const Text: const
|————————Node:type_identifier Text: quint32
|————————Node:init_declarator Text: deviceId = info.channel_handle
|—————————Node:identifier Text: deviceId
|—————————Node:= Text: =
|—————————Node:field_expression Text: info.channel_handle
|——————————Node:identifier Text: info
|——————————Node:. Text: .
|——————————Node:field_identifier Text: channel_handle
|————————Node:; Text: ;
|———————Node:declaration Text: const auto pcanChannel = std::find_if(std::begin(pcanChannels), std::end(pcanChannels),
                                                  [deviceId](PcanChannel channel) {
                return channel.index == deviceId;
            });
|————————Node:type_qualifier Text: const
|—————————Node:const Text: const
|————————Node:placeholder_type_specifier Text: auto
|—————————Node:auto Text: auto
|————————Node:init_declarator Text: pcanChannel = std::find_if(std::begin(pcanChannels), std::end(pcanChannels),
                                                  [deviceId](PcanChannel channel) {
                return channel.index == deviceId;
            })
|—————————Node:identifier Text: pcanChannel
|—————————Node:= Text: =
|—————————Node:call_expression Text: std::find_if(std::begin(pcanChannels), std::end(pcanChannels),
                                                  [deviceId](PcanChannel channel) {
                return channel.index == deviceId;
            })
|——————————Node:qualified_identifier Text: std::find_if
|———————————Node:namespace_identifier Text: std
|———————————Node::: Text: ::
|———————————Node:identifier Text: find_if
|——————————Node:argument_list Text: (std::begin(pcanChannels), std::end(pcanChannels),
                                                  [deviceId](PcanChannel channel) {
                return channel.index == deviceId;
            })
|———————————Node:( Text: (
|———————————Node:call_expression Text: std::begin(pcanChannels)
|————————————Node:qualified_identifier Text: std::begin
|—————————————Node:namespace_identifier Text: std
|—————————————Node::: Text: ::
|—————————————Node:identifier Text: begin
|————————————Node:argument_list Text: (pcanChannels)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: pcanChannels
|—————————————Node:) Text: )
|———————————Node:, Text: ,
|———————————Node:call_expression Text: std::end(pcanChannels)
|————————————Node:qualified_identifier Text: std::end
|—————————————Node:namespace_identifier Text: std
|—————————————Node::: Text: ::
|—————————————Node:identifier Text: end
|————————————Node:argument_list Text: (pcanChannels)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: pcanChannels
|—————————————Node:) Text: )
|———————————Node:, Text: ,
|———————————Node:lambda_expression Text: [deviceId](PcanChannel channel) {
                return channel.index == deviceId;
            }
|————————————Node:lambda_capture_specifier Text: [deviceId]
|—————————————Node:[ Text: [
|—————————————Node:identifier Text: deviceId
|—————————————Node:] Text: ]
|————————————Node:abstract_function_declarator Text: (PcanChannel channel)
|—————————————Node:parameter_list Text: (PcanChannel channel)
|——————————————Node:( Text: (
|——————————————Node:parameter_declaration Text: PcanChannel channel
|———————————————Node:type_identifier Text: PcanChannel
|———————————————Node:identifier Text: channel
|——————————————Node:) Text: )
|————————————Node:compound_statement Text: {
                return channel.index == deviceId;
            }
|—————————————Node:{ Text: {
|—————————————Node:return_statement Text: return channel.index == deviceId;
|——————————————Node:return Text: return
|——————————————Node:binary_expression Text: channel.index == deviceId
|———————————————Node:field_expression Text: channel.index
|————————————————Node:identifier Text: channel
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: index
|———————————————Node:== Text: ==
|———————————————Node:identifier Text: deviceId
|——————————————Node:; Text: ;
|—————————————Node:} Text: }
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:declaration Text: const QString name = pcanChannel->name;
|————————Node:type_qualifier Text: const
|—————————Node:const Text: const
|————————Node:type_identifier Text: QString
|————————Node:init_declarator Text: name = pcanChannel->name
|—————————Node:identifier Text: name
|—————————Node:= Text: =
|—————————Node:field_expression Text: pcanChannel->name
|——————————Node:identifier Text: pcanChannel
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: name
|————————Node:; Text: ;
|———————Node:declaration Text: const QString description = info.device_name;
|————————Node:type_qualifier Text: const
|—————————Node:const Text: const
|————————Node:type_identifier Text: QString
|————————Node:init_declarator Text: description = info.device_name
|—————————Node:identifier Text: description
|—————————Node:= Text: =
|—————————Node:field_expression Text: info.device_name
|——————————Node:identifier Text: info
|——————————Node:. Text: .
|——————————Node:field_identifier Text: device_name
|————————Node:; Text: ;
|———————Node:declaration Text: const QString alias = QString::number(info.device_id);
|————————Node:type_qualifier Text: const
|—————————Node:const Text: const
|————————Node:type_identifier Text: QString
|————————Node:init_declarator Text: alias = QString::number(info.device_id)
|—————————Node:identifier Text: alias
|—————————Node:= Text: =
|—————————Node:call_expression Text: QString::number(info.device_id)
|——————————Node:qualified_identifier Text: QString::number
|———————————Node:namespace_identifier Text: QString
|———————————Node::: Text: ::
|———————————Node:identifier Text: number
|——————————Node:argument_list Text: (info.device_id)
|———————————Node:( Text: (
|———————————Node:field_expression Text: info.device_id
|————————————Node:identifier Text: info
|————————————Node:. Text: .
|————————————Node:field_identifier Text: device_id
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:declaration Text: const int channel = info.controller_number;
|————————Node:type_qualifier Text: const
|—————————Node:const Text: const
|————————Node:primitive_type Text: int
|————————Node:init_declarator Text: channel = info.controller_number
|—————————Node:identifier Text: channel
|—————————Node:= Text: =
|—————————Node:field_expression Text: info.controller_number
|——————————Node:identifier Text: info
|——————————Node:. Text: .
|——————————Node:field_identifier Text: controller_number
|————————Node:; Text: ;
|———————Node:declaration Text: const bool isCanFd = (info.device_features & FEATURE_FD_CAPABLE);
|————————Node:type_qualifier Text: const
|—————————Node:const Text: const
|————————Node:primitive_type Text: bool
|————————Node:init_declarator Text: isCanFd = (info.device_features & FEATURE_FD_CAPABLE)
|—————————Node:identifier Text: isCanFd
|—————————Node:= Text: =
|—————————Node:parenthesized_expression Text: (info.device_features & FEATURE_FD_CAPABLE)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: info.device_features & FEATURE_FD_CAPABLE
|———————————Node:field_expression Text: info.device_features
|————————————Node:identifier Text: info
|————————————Node:. Text: .
|————————————Node:field_identifier Text: device_features
|———————————Node:& Text: &
|———————————Node:identifier Text: FEATURE_FD_CAPABLE
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: result.append(std::move(createDeviceInfo(name, QString(), description, alias,
                                                     channel, false, isCanFd)));
|————————Node:call_expression Text: result.append(std::move(createDeviceInfo(name, QString(), description, alias,
                                                     channel, false, isCanFd)))
|—————————Node:field_expression Text: result.append
|——————————Node:identifier Text: result
|——————————Node:. Text: .
|——————————Node:field_identifier Text: append
|—————————Node:argument_list Text: (std::move(createDeviceInfo(name, QString(), description, alias,
                                                     channel, false, isCanFd)))
|——————————Node:( Text: (
|——————————Node:call_expression Text: std::move(createDeviceInfo(name, QString(), description, alias,
                                                     channel, false, isCanFd))
|———————————Node:qualified_identifier Text: std::move
|————————————Node:namespace_identifier Text: std
|————————————Node::: Text: ::
|————————————Node:identifier Text: move
|———————————Node:argument_list Text: (createDeviceInfo(name, QString(), description, alias,
                                                     channel, false, isCanFd))
|————————————Node:( Text: (
|————————————Node:call_expression Text: createDeviceInfo(name, QString(), description, alias,
                                                     channel, false, isCanFd)
|—————————————Node:identifier Text: createDeviceInfo
|—————————————Node:argument_list Text: (name, QString(), description, alias,
                                                     channel, false, isCanFd)
|——————————————Node:( Text: (
|——————————————Node:identifier Text: name
|——————————————Node:, Text: ,
|——————————————Node:call_expression Text: QString()
|———————————————Node:identifier Text: QString
|———————————————Node:argument_list Text: ()
|————————————————Node:( Text: (
|————————————————Node:) Text: )
|——————————————Node:, Text: ,
|——————————————Node:identifier Text: description
|——————————————Node:, Text: ,
|——————————————Node:identifier Text: alias
|——————————————Node:, Text: ,
|——————————————Node:identifier Text: channel
|——————————————Node:, Text: ,
|——————————————Node:false Text: false
|——————————————Node:, Text: ,
|——————————————Node:identifier Text: isCanFd
|——————————————Node:) Text: )
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:return_statement Text: return result;
|————Node:return Text: return
|————Node:identifier Text: result
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: QList<QCanBusDeviceInfo> PeakCanBackend::interfaces()
{
#ifdef Q_OS_WIN
    bool ok = false;
    const QList<QCanBusDeviceInfo> attachedChannelsResult = interfacesByAttachedChannels(&ok);
    if (ok)
        return attachedChannelsResult;
#endif

    const QList<QCanBusDeviceInfo> result = interfacesByChannelCondition();
    return result;
}
|——Node:template_type Text: QList<QCanBusDeviceInfo>
|———Node:type_identifier Text: QList
|———Node:template_argument_list Text: <QCanBusDeviceInfo>
|————Node:< Text: <
|————Node:type_descriptor Text: QCanBusDeviceInfo
|—————Node:type_identifier Text: QCanBusDeviceInfo
|————Node:> Text: >
|——Node:function_declarator Text: PeakCanBackend::interfaces()
|———Node:qualified_identifier Text: PeakCanBackend::interfaces
|————Node:namespace_identifier Text: PeakCanBackend
|————Node::: Text: ::
|————Node:identifier Text: interfaces
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
#ifdef Q_OS_WIN
    bool ok = false;
    const QList<QCanBusDeviceInfo> attachedChannelsResult = interfacesByAttachedChannels(&ok);
    if (ok)
        return attachedChannelsResult;
#endif

    const QList<QCanBusDeviceInfo> result = interfacesByChannelCondition();
    return result;
}
|———Node:{ Text: {
|———Node:preproc_ifdef Text: #ifdef Q_OS_WIN
    bool ok = false;
    const QList<QCanBusDeviceInfo> attachedChannelsResult = interfacesByAttachedChannels(&ok);
    if (ok)
        return attachedChannelsResult;
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: Q_OS_WIN
|————Node:declaration Text: bool ok = false;
|—————Node:primitive_type Text: bool
|—————Node:init_declarator Text: ok = false
|——————Node:identifier Text: ok
|——————Node:= Text: =
|——————Node:false Text: false
|—————Node:; Text: ;
|————Node:declaration Text: const QList<QCanBusDeviceInfo> attachedChannelsResult = interfacesByAttachedChannels(&ok);
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:template_type Text: QList<QCanBusDeviceInfo>
|——————Node:type_identifier Text: QList
|——————Node:template_argument_list Text: <QCanBusDeviceInfo>
|———————Node:< Text: <
|———————Node:type_descriptor Text: QCanBusDeviceInfo
|————————Node:type_identifier Text: QCanBusDeviceInfo
|———————Node:> Text: >
|—————Node:init_declarator Text: attachedChannelsResult = interfacesByAttachedChannels(&ok)
|——————Node:identifier Text: attachedChannelsResult
|——————Node:= Text: =
|——————Node:call_expression Text: interfacesByAttachedChannels(&ok)
|———————Node:identifier Text: interfacesByAttachedChannels
|———————Node:argument_list Text: (&ok)
|————————Node:( Text: (
|————————Node:pointer_expression Text: &ok
|—————————Node:& Text: &
|—————————Node:identifier Text: ok
|————————Node:) Text: )
|—————Node:; Text: ;
|————Node:if_statement Text: if (ok)
        return attachedChannelsResult;
|—————Node:if Text: if
|—————Node:condition_clause Text: (ok)
|——————Node:( Text: (
|——————Node:identifier Text: ok
|——————Node:) Text: )
|—————Node:return_statement Text: return attachedChannelsResult;
|——————Node:return Text: return
|——————Node:identifier Text: attachedChannelsResult
|——————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:declaration Text: const QList<QCanBusDeviceInfo> result = interfacesByChannelCondition();
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:template_type Text: QList<QCanBusDeviceInfo>
|—————Node:type_identifier Text: QList
|—————Node:template_argument_list Text: <QCanBusDeviceInfo>
|——————Node:< Text: <
|——————Node:type_descriptor Text: QCanBusDeviceInfo
|———————Node:type_identifier Text: QCanBusDeviceInfo
|——————Node:> Text: >
|————Node:init_declarator Text: result = interfacesByChannelCondition()
|—————Node:identifier Text: result
|—————Node:= Text: =
|—————Node:call_expression Text: interfacesByChannelCondition()
|——————Node:identifier Text: interfacesByChannelCondition
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return result;
|————Node:return Text: return
|————Node:identifier Text: result
|————Node:; Text: ;
|———Node:} Text: }
|—Node:preproc_if Text: #if defined(Q_OS_WIN32)
class PeakCanReadNotifier : public QWinEventNotifier
{
    // no Q_OBJECT macro!
public:
    explicit PeakCanReadNotifier(PeakCanBackendPrivate *d, QObject *parent)
        : QWinEventNotifier(parent)
        , dptr(d)
    {
        setHandle(dptr->readHandle);
    }

protected:
    bool event(QEvent *e) override
    {
        if (e->type() == QEvent::WinEventAct) {
            dptr->startRead();
            return true;
        }
        return QWinEventNotifier::event(e);
    }

private:
    PeakCanBackendPrivate * const dptr;
};
#else
class PeakCanReadNotifier : public QSocketNotifier
{
    // no Q_OBJECT macro!
public:
    explicit PeakCanReadNotifier(PeakCanBackendPrivate *d, QObject *parent)
        : QSocketNotifier(d->readHandle, QSocketNotifier::Read, parent)
        , dptr(d)
    {
    }

protected:
    bool event(QEvent *e) override
    {
        if (e->type() == QEvent::SockAct) {
            dptr->startRead();
            return true;
        }
        return QSocketNotifier::event(e);
    }

private:
    PeakCanBackendPrivate * const dptr;
};
#endif
|——Node:#if Text: #if
|——Node:preproc_defined Text: defined(Q_OS_WIN32)
|———Node:defined Text: defined
|———Node:( Text: (
|———Node:identifier Text: Q_OS_WIN32
|———Node:) Text: )
|——Node:
 Text: 

|——Node:class_specifier Text: class PeakCanReadNotifier : public QWinEventNotifier
{
    // no Q_OBJECT macro!
public:
    explicit PeakCanReadNotifier(PeakCanBackendPrivate *d, QObject *parent)
        : QWinEventNotifier(parent)
        , dptr(d)
    {
        setHandle(dptr->readHandle);
    }

protected:
    bool event(QEvent *e) override
    {
        if (e->type() == QEvent::WinEventAct) {
            dptr->startRead();
            return true;
        }
        return QWinEventNotifier::event(e);
    }

private:
    PeakCanBackendPrivate * const dptr;
}
|———Node:class Text: class
|———Node:type_identifier Text: PeakCanReadNotifier
|———Node:base_class_clause Text: : public QWinEventNotifier
|————Node:: Text: :
|————Node:access_specifier Text: public
|—————Node:public Text: public
|————Node:type_identifier Text: QWinEventNotifier
|———Node:field_declaration_list Text: {
    // no Q_OBJECT macro!
public:
    explicit PeakCanReadNotifier(PeakCanBackendPrivate *d, QObject *parent)
        : QWinEventNotifier(parent)
        , dptr(d)
    {
        setHandle(dptr->readHandle);
    }

protected:
    bool event(QEvent *e) override
    {
        if (e->type() == QEvent::WinEventAct) {
            dptr->startRead();
            return true;
        }
        return QWinEventNotifier::event(e);
    }

private:
    PeakCanBackendPrivate * const dptr;
}
|————Node:{ Text: {
|————Node:comment
|————Node:access_specifier Text: public
|—————Node:public Text: public
|————Node:: Text: :
|————Node:function_definition Text: explicit PeakCanReadNotifier(PeakCanBackendPrivate *d, QObject *parent)
        : QWinEventNotifier(parent)
        , dptr(d)
    {
        setHandle(dptr->readHandle);
    }
|—————Node:explicit_function_specifier Text: explicit
|——————Node:explicit Text: explicit
|—————Node:function_declarator Text: PeakCanReadNotifier(PeakCanBackendPrivate *d, QObject *parent)
|——————Node:identifier Text: PeakCanReadNotifier
|——————Node:parameter_list Text: (PeakCanBackendPrivate *d, QObject *parent)
|———————Node:( Text: (
|———————Node:parameter_declaration Text: PeakCanBackendPrivate *d
|————————Node:type_identifier Text: PeakCanBackendPrivate
|————————Node:pointer_declarator Text: *d
|—————————Node:* Text: *
|—————————Node:identifier Text: d
|———————Node:, Text: ,
|———————Node:parameter_declaration Text: QObject *parent
|————————Node:type_identifier Text: QObject
|————————Node:pointer_declarator Text: *parent
|—————————Node:* Text: *
|—————————Node:identifier Text: parent
|———————Node:) Text: )
|—————Node:field_initializer_list Text: : QWinEventNotifier(parent)
        , dptr(d)
|——————Node:: Text: :
|——————Node:field_initializer Text: QWinEventNotifier(parent)
|———————Node:field_identifier Text: QWinEventNotifier
|———————Node:argument_list Text: (parent)
|————————Node:( Text: (
|————————Node:identifier Text: parent
|————————Node:) Text: )
|——————Node:, Text: ,
|——————Node:field_initializer Text: dptr(d)
|———————Node:field_identifier Text: dptr
|———————Node:argument_list Text: (d)
|————————Node:( Text: (
|————————Node:identifier Text: d
|————————Node:) Text: )
|—————Node:compound_statement Text: {
        setHandle(dptr->readHandle);
    }
|——————Node:{ Text: {
|——————Node:expression_statement Text: setHandle(dptr->readHandle);
|———————Node:call_expression Text: setHandle(dptr->readHandle)
|————————Node:identifier Text: setHandle
|————————Node:argument_list Text: (dptr->readHandle)
|—————————Node:( Text: (
|—————————Node:field_expression Text: dptr->readHandle
|——————————Node:identifier Text: dptr
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: readHandle
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:} Text: }
|————Node:access_specifier Text: protected
|—————Node:protected Text: protected
|————Node:: Text: :
|————Node:function_definition Text: bool event(QEvent *e) override
    {
        if (e->type() == QEvent::WinEventAct) {
            dptr->startRead();
            return true;
        }
        return QWinEventNotifier::event(e);
    }
|—————Node:primitive_type Text: bool
|—————Node:function_declarator Text: event(QEvent *e) override
|——————Node:field_identifier Text: event
|——————Node:parameter_list Text: (QEvent *e)
|———————Node:( Text: (
|———————Node:parameter_declaration Text: QEvent *e
|————————Node:type_identifier Text: QEvent
|————————Node:pointer_declarator Text: *e
|—————————Node:* Text: *
|—————————Node:identifier Text: e
|———————Node:) Text: )
|——————Node:virtual_specifier Text: override
|———————Node:override Text: override
|—————Node:compound_statement Text: {
        if (e->type() == QEvent::WinEventAct) {
            dptr->startRead();
            return true;
        }
        return QWinEventNotifier::event(e);
    }
|——————Node:{ Text: {
|——————Node:if_statement Text: if (e->type() == QEvent::WinEventAct) {
            dptr->startRead();
            return true;
        }
|———————Node:if Text: if
|———————Node:condition_clause Text: (e->type() == QEvent::WinEventAct)
|————————Node:( Text: (
|————————Node:binary_expression Text: e->type() == QEvent::WinEventAct
|—————————Node:call_expression Text: e->type()
|——————————Node:field_expression Text: e->type
|———————————Node:identifier Text: e
|———————————Node:-> Text: ->
|———————————Node:field_identifier Text: type
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:== Text: ==
|—————————Node:qualified_identifier Text: QEvent::WinEventAct
|——————————Node:namespace_identifier Text: QEvent
|——————————Node::: Text: ::
|——————————Node:identifier Text: WinEventAct
|————————Node:) Text: )
|———————Node:compound_statement Text: {
            dptr->startRead();
            return true;
        }
|————————Node:{ Text: {
|————————Node:expression_statement Text: dptr->startRead();
|—————————Node:call_expression Text: dptr->startRead()
|——————————Node:field_expression Text: dptr->startRead
|———————————Node:identifier Text: dptr
|———————————Node:-> Text: ->
|———————————Node:field_identifier Text: startRead
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:return_statement Text: return true;
|—————————Node:return Text: return
|—————————Node:true Text: true
|—————————Node:; Text: ;
|————————Node:} Text: }
|——————Node:return_statement Text: return QWinEventNotifier::event(e);
|———————Node:return Text: return
|———————Node:call_expression Text: QWinEventNotifier::event(e)
|————————Node:qualified_identifier Text: QWinEventNotifier::event
|—————————Node:namespace_identifier Text: QWinEventNotifier
|—————————Node::: Text: ::
|—————————Node:identifier Text: event
|————————Node:argument_list Text: (e)
|—————————Node:( Text: (
|—————————Node:identifier Text: e
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:} Text: }
|————Node:access_specifier Text: private
|—————Node:private Text: private
|————Node:: Text: :
|————Node:field_declaration Text: PeakCanBackendPrivate * const dptr;
|—————Node:type_identifier Text: PeakCanBackendPrivate
|—————Node:pointer_declarator Text: * const dptr
|——————Node:* Text: *
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:field_identifier Text: dptr
|—————Node:; Text: ;
|————Node:} Text: }
|——Node:; Text: ;
|——Node:preproc_else Text: #else
class PeakCanReadNotifier : public QSocketNotifier
{
    // no Q_OBJECT macro!
public:
    explicit PeakCanReadNotifier(PeakCanBackendPrivate *d, QObject *parent)
        : QSocketNotifier(d->readHandle, QSocketNotifier::Read, parent)
        , dptr(d)
    {
    }

protected:
    bool event(QEvent *e) override
    {
        if (e->type() == QEvent::SockAct) {
            dptr->startRead();
            return true;
        }
        return QSocketNotifier::event(e);
    }

private:
    PeakCanBackendPrivate * const dptr;
};
|———Node:#else Text: #else
|———Node:class_specifier Text: class PeakCanReadNotifier : public QSocketNotifier
{
    // no Q_OBJECT macro!
public:
    explicit PeakCanReadNotifier(PeakCanBackendPrivate *d, QObject *parent)
        : QSocketNotifier(d->readHandle, QSocketNotifier::Read, parent)
        , dptr(d)
    {
    }

protected:
    bool event(QEvent *e) override
    {
        if (e->type() == QEvent::SockAct) {
            dptr->startRead();
            return true;
        }
        return QSocketNotifier::event(e);
    }

private:
    PeakCanBackendPrivate * const dptr;
}
|————Node:class Text: class
|————Node:type_identifier Text: PeakCanReadNotifier
|————Node:base_class_clause Text: : public QSocketNotifier
|—————Node:: Text: :
|—————Node:access_specifier Text: public
|——————Node:public Text: public
|—————Node:type_identifier Text: QSocketNotifier
|————Node:field_declaration_list Text: {
    // no Q_OBJECT macro!
public:
    explicit PeakCanReadNotifier(PeakCanBackendPrivate *d, QObject *parent)
        : QSocketNotifier(d->readHandle, QSocketNotifier::Read, parent)
        , dptr(d)
    {
    }

protected:
    bool event(QEvent *e) override
    {
        if (e->type() == QEvent::SockAct) {
            dptr->startRead();
            return true;
        }
        return QSocketNotifier::event(e);
    }

private:
    PeakCanBackendPrivate * const dptr;
}
|—————Node:{ Text: {
|—————Node:comment
|—————Node:access_specifier Text: public
|——————Node:public Text: public
|—————Node:: Text: :
|—————Node:function_definition Text: explicit PeakCanReadNotifier(PeakCanBackendPrivate *d, QObject *parent)
        : QSocketNotifier(d->readHandle, QSocketNotifier::Read, parent)
        , dptr(d)
    {
    }
|——————Node:explicit_function_specifier Text: explicit
|———————Node:explicit Text: explicit
|——————Node:function_declarator Text: PeakCanReadNotifier(PeakCanBackendPrivate *d, QObject *parent)
|———————Node:identifier Text: PeakCanReadNotifier
|———————Node:parameter_list Text: (PeakCanBackendPrivate *d, QObject *parent)
|————————Node:( Text: (
|————————Node:parameter_declaration Text: PeakCanBackendPrivate *d
|—————————Node:type_identifier Text: PeakCanBackendPrivate
|—————————Node:pointer_declarator Text: *d
|——————————Node:* Text: *
|——————————Node:identifier Text: d
|————————Node:, Text: ,
|————————Node:parameter_declaration Text: QObject *parent
|—————————Node:type_identifier Text: QObject
|—————————Node:pointer_declarator Text: *parent
|——————————Node:* Text: *
|——————————Node:identifier Text: parent
|————————Node:) Text: )
|——————Node:field_initializer_list Text: : QSocketNotifier(d->readHandle, QSocketNotifier::Read, parent)
        , dptr(d)
|———————Node:: Text: :
|———————Node:field_initializer Text: QSocketNotifier(d->readHandle, QSocketNotifier::Read, parent)
|————————Node:field_identifier Text: QSocketNotifier
|————————Node:argument_list Text: (d->readHandle, QSocketNotifier::Read, parent)
|—————————Node:( Text: (
|—————————Node:field_expression Text: d->readHandle
|——————————Node:identifier Text: d
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: readHandle
|—————————Node:, Text: ,
|—————————Node:qualified_identifier Text: QSocketNotifier::Read
|——————————Node:namespace_identifier Text: QSocketNotifier
|——————————Node::: Text: ::
|——————————Node:identifier Text: Read
|—————————Node:, Text: ,
|—————————Node:identifier Text: parent
|—————————Node:) Text: )
|———————Node:, Text: ,
|———————Node:field_initializer Text: dptr(d)
|————————Node:field_identifier Text: dptr
|————————Node:argument_list Text: (d)
|—————————Node:( Text: (
|—————————Node:identifier Text: d
|—————————Node:) Text: )
|——————Node:compound_statement Text: {
    }
|———————Node:{ Text: {
|———————Node:} Text: }
|—————Node:access_specifier Text: protected
|——————Node:protected Text: protected
|—————Node:: Text: :
|—————Node:function_definition Text: bool event(QEvent *e) override
    {
        if (e->type() == QEvent::SockAct) {
            dptr->startRead();
            return true;
        }
        return QSocketNotifier::event(e);
    }
|——————Node:primitive_type Text: bool
|——————Node:function_declarator Text: event(QEvent *e) override
|———————Node:field_identifier Text: event
|———————Node:parameter_list Text: (QEvent *e)
|————————Node:( Text: (
|————————Node:parameter_declaration Text: QEvent *e
|—————————Node:type_identifier Text: QEvent
|—————————Node:pointer_declarator Text: *e
|——————————Node:* Text: *
|——————————Node:identifier Text: e
|————————Node:) Text: )
|———————Node:virtual_specifier Text: override
|————————Node:override Text: override
|——————Node:compound_statement Text: {
        if (e->type() == QEvent::SockAct) {
            dptr->startRead();
            return true;
        }
        return QSocketNotifier::event(e);
    }
|———————Node:{ Text: {
|———————Node:if_statement Text: if (e->type() == QEvent::SockAct) {
            dptr->startRead();
            return true;
        }
|————————Node:if Text: if
|————————Node:condition_clause Text: (e->type() == QEvent::SockAct)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: e->type() == QEvent::SockAct
|——————————Node:call_expression Text: e->type()
|———————————Node:field_expression Text: e->type
|————————————Node:identifier Text: e
|————————————Node:-> Text: ->
|————————————Node:field_identifier Text: type
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:== Text: ==
|——————————Node:qualified_identifier Text: QEvent::SockAct
|———————————Node:namespace_identifier Text: QEvent
|———————————Node::: Text: ::
|———————————Node:identifier Text: SockAct
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
            dptr->startRead();
            return true;
        }
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: dptr->startRead();
|——————————Node:call_expression Text: dptr->startRead()
|———————————Node:field_expression Text: dptr->startRead
|————————————Node:identifier Text: dptr
|————————————Node:-> Text: ->
|————————————Node:field_identifier Text: startRead
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:return_statement Text: return true;
|——————————Node:return Text: return
|——————————Node:true Text: true
|——————————Node:; Text: ;
|—————————Node:} Text: }
|———————Node:return_statement Text: return QSocketNotifier::event(e);
|————————Node:return Text: return
|————————Node:call_expression Text: QSocketNotifier::event(e)
|—————————Node:qualified_identifier Text: QSocketNotifier::event
|——————————Node:namespace_identifier Text: QSocketNotifier
|——————————Node::: Text: ::
|——————————Node:identifier Text: event
|—————————Node:argument_list Text: (e)
|——————————Node:( Text: (
|——————————Node:identifier Text: e
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:access_specifier Text: private
|——————Node:private Text: private
|—————Node:: Text: :
|—————Node:field_declaration Text: PeakCanBackendPrivate * const dptr;
|——————Node:type_identifier Text: PeakCanBackendPrivate
|——————Node:pointer_declarator Text: * const dptr
|———————Node:* Text: *
|———————Node:type_qualifier Text: const
|————————Node:const Text: const
|———————Node:field_identifier Text: dptr
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:; Text: ;
|——Node:#endif Text: #endif
|—Node:class_specifier Text: class PeakCanWriteNotifier : public QTimer
{
    // no Q_OBJECT macro!
public:
    PeakCanWriteNotifier(PeakCanBackendPrivate *d, QObject *parent)
        : QTimer(parent)
        , dptr(d)
    {
    }

protected:
    void timerEvent(QTimerEvent *e) override
    {
        if (e->timerId() == timerId()) {
            dptr->startWrite();
            return;
        }
        QTimer::timerEvent(e);
    }

private:
    PeakCanBackendPrivate * const dptr;
}
|——Node:class Text: class
|——Node:type_identifier Text: PeakCanWriteNotifier
|——Node:base_class_clause Text: : public QTimer
|———Node:: Text: :
|———Node:access_specifier Text: public
|————Node:public Text: public
|———Node:type_identifier Text: QTimer
|——Node:field_declaration_list Text: {
    // no Q_OBJECT macro!
public:
    PeakCanWriteNotifier(PeakCanBackendPrivate *d, QObject *parent)
        : QTimer(parent)
        , dptr(d)
    {
    }

protected:
    void timerEvent(QTimerEvent *e) override
    {
        if (e->timerId() == timerId()) {
            dptr->startWrite();
            return;
        }
        QTimer::timerEvent(e);
    }

private:
    PeakCanBackendPrivate * const dptr;
}
|———Node:{ Text: {
|———Node:comment
|———Node:access_specifier Text: public
|————Node:public Text: public
|———Node:: Text: :
|———Node:function_definition Text: PeakCanWriteNotifier(PeakCanBackendPrivate *d, QObject *parent)
        : QTimer(parent)
        , dptr(d)
    {
    }
|————Node:function_declarator Text: PeakCanWriteNotifier(PeakCanBackendPrivate *d, QObject *parent)
|—————Node:identifier Text: PeakCanWriteNotifier
|—————Node:parameter_list Text: (PeakCanBackendPrivate *d, QObject *parent)
|——————Node:( Text: (
|——————Node:parameter_declaration Text: PeakCanBackendPrivate *d
|———————Node:type_identifier Text: PeakCanBackendPrivate
|———————Node:pointer_declarator Text: *d
|————————Node:* Text: *
|————————Node:identifier Text: d
|——————Node:, Text: ,
|——————Node:parameter_declaration Text: QObject *parent
|———————Node:type_identifier Text: QObject
|———————Node:pointer_declarator Text: *parent
|————————Node:* Text: *
|————————Node:identifier Text: parent
|——————Node:) Text: )
|————Node:field_initializer_list Text: : QTimer(parent)
        , dptr(d)
|—————Node:: Text: :
|—————Node:field_initializer Text: QTimer(parent)
|——————Node:field_identifier Text: QTimer
|——————Node:argument_list Text: (parent)
|———————Node:( Text: (
|———————Node:identifier Text: parent
|———————Node:) Text: )
|—————Node:, Text: ,
|—————Node:field_initializer Text: dptr(d)
|——————Node:field_identifier Text: dptr
|——————Node:argument_list Text: (d)
|———————Node:( Text: (
|———————Node:identifier Text: d
|———————Node:) Text: )
|————Node:compound_statement Text: {
    }
|—————Node:{ Text: {
|—————Node:} Text: }
|———Node:access_specifier Text: protected
|————Node:protected Text: protected
|———Node:: Text: :
|———Node:function_definition Text: void timerEvent(QTimerEvent *e) override
    {
        if (e->timerId() == timerId()) {
            dptr->startWrite();
            return;
        }
        QTimer::timerEvent(e);
    }
|————Node:primitive_type Text: void
|————Node:function_declarator Text: timerEvent(QTimerEvent *e) override
|—————Node:field_identifier Text: timerEvent
|—————Node:parameter_list Text: (QTimerEvent *e)
|——————Node:( Text: (
|——————Node:parameter_declaration Text: QTimerEvent *e
|———————Node:type_identifier Text: QTimerEvent
|———————Node:pointer_declarator Text: *e
|————————Node:* Text: *
|————————Node:identifier Text: e
|——————Node:) Text: )
|—————Node:virtual_specifier Text: override
|——————Node:override Text: override
|————Node:compound_statement Text: {
        if (e->timerId() == timerId()) {
            dptr->startWrite();
            return;
        }
        QTimer::timerEvent(e);
    }
|—————Node:{ Text: {
|—————Node:if_statement Text: if (e->timerId() == timerId()) {
            dptr->startWrite();
            return;
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (e->timerId() == timerId())
|———————Node:( Text: (
|———————Node:binary_expression Text: e->timerId() == timerId()
|————————Node:call_expression Text: e->timerId()
|—————————Node:field_expression Text: e->timerId
|——————————Node:identifier Text: e
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: timerId
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:== Text: ==
|————————Node:call_expression Text: timerId()
|—————————Node:identifier Text: timerId
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            dptr->startWrite();
            return;
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: dptr->startWrite();
|————————Node:call_expression Text: dptr->startWrite()
|—————————Node:field_expression Text: dptr->startWrite
|——————————Node:identifier Text: dptr
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: startWrite
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:return_statement Text: return;
|————————Node:return Text: return
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:expression_statement Text: QTimer::timerEvent(e);
|——————Node:call_expression Text: QTimer::timerEvent(e)
|———————Node:qualified_identifier Text: QTimer::timerEvent
|————————Node:namespace_identifier Text: QTimer
|————————Node::: Text: ::
|————————Node:identifier Text: timerEvent
|———————Node:argument_list Text: (e)
|————————Node:( Text: (
|————————Node:identifier Text: e
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:access_specifier Text: private
|————Node:private Text: private
|———Node:: Text: :
|———Node:field_declaration Text: PeakCanBackendPrivate * const dptr;
|————Node:type_identifier Text: PeakCanBackendPrivate
|————Node:pointer_declarator Text: * const dptr
|—————Node:* Text: *
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:field_identifier Text: dptr
|————Node:; Text: ;
|———Node:} Text: }
|—Node:; Text: ;
|—Node:function_definition Text: PeakCanBackendPrivate::PeakCanBackendPrivate(PeakCanBackend *q)
    : q_ptr(q)
{
}
|——Node:function_declarator Text: PeakCanBackendPrivate::PeakCanBackendPrivate(PeakCanBackend *q)
|———Node:qualified_identifier Text: PeakCanBackendPrivate::PeakCanBackendPrivate
|————Node:namespace_identifier Text: PeakCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: PeakCanBackendPrivate
|———Node:parameter_list Text: (PeakCanBackend *q)
|————Node:( Text: (
|————Node:parameter_declaration Text: PeakCanBackend *q
|—————Node:type_identifier Text: PeakCanBackend
|—————Node:pointer_declarator Text: *q
|——————Node:* Text: *
|——————Node:identifier Text: q
|————Node:) Text: )
|——Node:field_initializer_list Text: : q_ptr(q)
|———Node:: Text: :
|———Node:field_initializer Text: q_ptr(q)
|————Node:field_identifier Text: q_ptr
|————Node:argument_list Text: (q)
|—————Node:( Text: (
|—————Node:identifier Text: q
|—————Node:) Text: )
|——Node:compound_statement Text: {
}
|———Node:{ Text: {
|———Node:} Text: }
|—Node:struct_specifier Text: struct BitrateItem
{
    int bitrate;
    TPCANBaudrate code;
}
|——Node:struct Text: struct
|——Node:type_identifier Text: BitrateItem
|——Node:field_declaration_list Text: {
    int bitrate;
    TPCANBaudrate code;
}
|———Node:{ Text: {
|———Node:field_declaration Text: int bitrate;
|————Node:primitive_type Text: int
|————Node:field_identifier Text: bitrate
|————Node:; Text: ;
|———Node:field_declaration Text: TPCANBaudrate code;
|————Node:type_identifier Text: TPCANBaudrate
|————Node:field_identifier Text: code
|————Node:; Text: ;
|———Node:} Text: }
|—Node:; Text: ;
|—Node:struct_specifier Text: struct BitrateLessFunctor
{
    bool operator()( const BitrateItem &item1, const BitrateItem &item2) const
    {
        return item1.bitrate < item2.bitrate;
    }
}
|——Node:struct Text: struct
|——Node:type_identifier Text: BitrateLessFunctor
|——Node:field_declaration_list Text: {
    bool operator()( const BitrateItem &item1, const BitrateItem &item2) const
    {
        return item1.bitrate < item2.bitrate;
    }
}
|———Node:{ Text: {
|———Node:function_definition Text: bool operator()( const BitrateItem &item1, const BitrateItem &item2) const
    {
        return item1.bitrate < item2.bitrate;
    }
|————Node:primitive_type Text: bool
|————Node:function_declarator Text: operator()( const BitrateItem &item1, const BitrateItem &item2) const
|—————Node:operator_name Text: operator()
|——————Node:operator Text: operator
|——————Node:() Text: ()
|—————Node:parameter_list Text: ( const BitrateItem &item1, const BitrateItem &item2)
|——————Node:( Text: (
|——————Node:parameter_declaration Text: const BitrateItem &item1
|———————Node:type_qualifier Text: const
|————————Node:const Text: const
|———————Node:type_identifier Text: BitrateItem
|———————Node:reference_declarator Text: &item1
|————————Node:& Text: &
|————————Node:identifier Text: item1
|——————Node:, Text: ,
|——————Node:parameter_declaration Text: const BitrateItem &item2
|———————Node:type_qualifier Text: const
|————————Node:const Text: const
|———————Node:type_identifier Text: BitrateItem
|———————Node:reference_declarator Text: &item2
|————————Node:& Text: &
|————————Node:identifier Text: item2
|——————Node:) Text: )
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|————Node:compound_statement Text: {
        return item1.bitrate < item2.bitrate;
    }
|—————Node:{ Text: {
|—————Node:return_statement Text: return item1.bitrate < item2.bitrate;
|——————Node:return Text: return
|——————Node:binary_expression Text: item1.bitrate < item2.bitrate
|———————Node:field_expression Text: item1.bitrate
|————————Node:identifier Text: item1
|————————Node:. Text: .
|————————Node:field_identifier Text: bitrate
|———————Node:< Text: <
|———————Node:field_expression Text: item2.bitrate
|————————Node:identifier Text: item2
|————————Node:. Text: .
|————————Node:field_identifier Text: bitrate
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:} Text: }
|—Node:; Text: ;
|—Node:function_definition Text: static TPCANBaudrate bitrateCodeFromBitrate(int bitrate)
{
    static const BitrateItem bitratetable[] = {
        { 5000, PCAN_BAUD_5K },
        { 10000, PCAN_BAUD_10K },
        { 20000, PCAN_BAUD_20K },
        { 33000, PCAN_BAUD_33K },
        { 47000, PCAN_BAUD_47K },
        { 50000, PCAN_BAUD_50K },
        { 83000, PCAN_BAUD_83K },
        { 95000, PCAN_BAUD_95K },
        { 100000, PCAN_BAUD_100K },
        { 125000, PCAN_BAUD_125K },
        { 250000, PCAN_BAUD_250K },
        { 500000, PCAN_BAUD_500K },
        { 800000, PCAN_BAUD_800K },
        { 1000000, PCAN_BAUD_1M }
    };

    static const BitrateItem *endtable = bitratetable + (sizeof(bitratetable) / sizeof(*bitratetable));

    const BitrateItem item = { bitrate , 0 };
    const BitrateItem *where = std::lower_bound(bitratetable, endtable, item, BitrateLessFunctor());
    return where != endtable ? where->code : PCAN_BAUD_INVALID;
}
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_identifier Text: TPCANBaudrate
|——Node:function_declarator Text: bitrateCodeFromBitrate(int bitrate)
|———Node:identifier Text: bitrateCodeFromBitrate
|———Node:parameter_list Text: (int bitrate)
|————Node:( Text: (
|————Node:parameter_declaration Text: int bitrate
|—————Node:primitive_type Text: int
|—————Node:identifier Text: bitrate
|————Node:) Text: )
|——Node:compound_statement Text: {
    static const BitrateItem bitratetable[] = {
        { 5000, PCAN_BAUD_5K },
        { 10000, PCAN_BAUD_10K },
        { 20000, PCAN_BAUD_20K },
        { 33000, PCAN_BAUD_33K },
        { 47000, PCAN_BAUD_47K },
        { 50000, PCAN_BAUD_50K },
        { 83000, PCAN_BAUD_83K },
        { 95000, PCAN_BAUD_95K },
        { 100000, PCAN_BAUD_100K },
        { 125000, PCAN_BAUD_125K },
        { 250000, PCAN_BAUD_250K },
        { 500000, PCAN_BAUD_500K },
        { 800000, PCAN_BAUD_800K },
        { 1000000, PCAN_BAUD_1M }
    };

    static const BitrateItem *endtable = bitratetable + (sizeof(bitratetable) / sizeof(*bitratetable));

    const BitrateItem item = { bitrate , 0 };
    const BitrateItem *where = std::lower_bound(bitratetable, endtable, item, BitrateLessFunctor());
    return where != endtable ? where->code : PCAN_BAUD_INVALID;
}
|———Node:{ Text: {
|———Node:declaration Text: static const BitrateItem bitratetable[] = {
        { 5000, PCAN_BAUD_5K },
        { 10000, PCAN_BAUD_10K },
        { 20000, PCAN_BAUD_20K },
        { 33000, PCAN_BAUD_33K },
        { 47000, PCAN_BAUD_47K },
        { 50000, PCAN_BAUD_50K },
        { 83000, PCAN_BAUD_83K },
        { 95000, PCAN_BAUD_95K },
        { 100000, PCAN_BAUD_100K },
        { 125000, PCAN_BAUD_125K },
        { 250000, PCAN_BAUD_250K },
        { 500000, PCAN_BAUD_500K },
        { 800000, PCAN_BAUD_800K },
        { 1000000, PCAN_BAUD_1M }
    };
|————Node:storage_class_specifier Text: static
|—————Node:static Text: static
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: BitrateItem
|————Node:init_declarator Text: bitratetable[] = {
        { 5000, PCAN_BAUD_5K },
        { 10000, PCAN_BAUD_10K },
        { 20000, PCAN_BAUD_20K },
        { 33000, PCAN_BAUD_33K },
        { 47000, PCAN_BAUD_47K },
        { 50000, PCAN_BAUD_50K },
        { 83000, PCAN_BAUD_83K },
        { 95000, PCAN_BAUD_95K },
        { 100000, PCAN_BAUD_100K },
        { 125000, PCAN_BAUD_125K },
        { 250000, PCAN_BAUD_250K },
        { 500000, PCAN_BAUD_500K },
        { 800000, PCAN_BAUD_800K },
        { 1000000, PCAN_BAUD_1M }
    }
|—————Node:array_declarator Text: bitratetable[]
|——————Node:identifier Text: bitratetable
|——————Node:[ Text: [
|——————Node:] Text: ]
|—————Node:= Text: =
|—————Node:initializer_list Text: {
        { 5000, PCAN_BAUD_5K },
        { 10000, PCAN_BAUD_10K },
        { 20000, PCAN_BAUD_20K },
        { 33000, PCAN_BAUD_33K },
        { 47000, PCAN_BAUD_47K },
        { 50000, PCAN_BAUD_50K },
        { 83000, PCAN_BAUD_83K },
        { 95000, PCAN_BAUD_95K },
        { 100000, PCAN_BAUD_100K },
        { 125000, PCAN_BAUD_125K },
        { 250000, PCAN_BAUD_250K },
        { 500000, PCAN_BAUD_500K },
        { 800000, PCAN_BAUD_800K },
        { 1000000, PCAN_BAUD_1M }
    }
|——————Node:{ Text: {
|——————Node:initializer_list Text: { 5000, PCAN_BAUD_5K }
|———————Node:{ Text: {
|———————Node:number_literal Text: 5000
|———————Node:, Text: ,
|———————Node:identifier Text: PCAN_BAUD_5K
|———————Node:} Text: }
|——————Node:, Text: ,
|——————Node:initializer_list Text: { 10000, PCAN_BAUD_10K }
|———————Node:{ Text: {
|———————Node:number_literal Text: 10000
|———————Node:, Text: ,
|———————Node:identifier Text: PCAN_BAUD_10K
|———————Node:} Text: }
|——————Node:, Text: ,
|——————Node:initializer_list Text: { 20000, PCAN_BAUD_20K }
|———————Node:{ Text: {
|———————Node:number_literal Text: 20000
|———————Node:, Text: ,
|———————Node:identifier Text: PCAN_BAUD_20K
|———————Node:} Text: }
|——————Node:, Text: ,
|——————Node:initializer_list Text: { 33000, PCAN_BAUD_33K }
|———————Node:{ Text: {
|———————Node:number_literal Text: 33000
|———————Node:, Text: ,
|———————Node:identifier Text: PCAN_BAUD_33K
|———————Node:} Text: }
|——————Node:, Text: ,
|——————Node:initializer_list Text: { 47000, PCAN_BAUD_47K }
|———————Node:{ Text: {
|———————Node:number_literal Text: 47000
|———————Node:, Text: ,
|———————Node:identifier Text: PCAN_BAUD_47K
|———————Node:} Text: }
|——————Node:, Text: ,
|——————Node:initializer_list Text: { 50000, PCAN_BAUD_50K }
|———————Node:{ Text: {
|———————Node:number_literal Text: 50000
|———————Node:, Text: ,
|———————Node:identifier Text: PCAN_BAUD_50K
|———————Node:} Text: }
|——————Node:, Text: ,
|——————Node:initializer_list Text: { 83000, PCAN_BAUD_83K }
|———————Node:{ Text: {
|———————Node:number_literal Text: 83000
|———————Node:, Text: ,
|———————Node:identifier Text: PCAN_BAUD_83K
|———————Node:} Text: }
|——————Node:, Text: ,
|——————Node:initializer_list Text: { 95000, PCAN_BAUD_95K }
|———————Node:{ Text: {
|———————Node:number_literal Text: 95000
|———————Node:, Text: ,
|———————Node:identifier Text: PCAN_BAUD_95K
|———————Node:} Text: }
|——————Node:, Text: ,
|——————Node:initializer_list Text: { 100000, PCAN_BAUD_100K }
|———————Node:{ Text: {
|———————Node:number_literal Text: 100000
|———————Node:, Text: ,
|———————Node:identifier Text: PCAN_BAUD_100K
|———————Node:} Text: }
|——————Node:, Text: ,
|——————Node:initializer_list Text: { 125000, PCAN_BAUD_125K }
|———————Node:{ Text: {
|———————Node:number_literal Text: 125000
|———————Node:, Text: ,
|———————Node:identifier Text: PCAN_BAUD_125K
|———————Node:} Text: }
|——————Node:, Text: ,
|——————Node:initializer_list Text: { 250000, PCAN_BAUD_250K }
|———————Node:{ Text: {
|———————Node:number_literal Text: 250000
|———————Node:, Text: ,
|———————Node:identifier Text: PCAN_BAUD_250K
|———————Node:} Text: }
|——————Node:, Text: ,
|——————Node:initializer_list Text: { 500000, PCAN_BAUD_500K }
|———————Node:{ Text: {
|———————Node:number_literal Text: 500000
|———————Node:, Text: ,
|———————Node:identifier Text: PCAN_BAUD_500K
|———————Node:} Text: }
|——————Node:, Text: ,
|——————Node:initializer_list Text: { 800000, PCAN_BAUD_800K }
|———————Node:{ Text: {
|———————Node:number_literal Text: 800000
|———————Node:, Text: ,
|———————Node:identifier Text: PCAN_BAUD_800K
|———————Node:} Text: }
|——————Node:, Text: ,
|——————Node:initializer_list Text: { 1000000, PCAN_BAUD_1M }
|———————Node:{ Text: {
|———————Node:number_literal Text: 1000000
|———————Node:, Text: ,
|———————Node:identifier Text: PCAN_BAUD_1M
|———————Node:} Text: }
|——————Node:} Text: }
|————Node:; Text: ;
|———Node:declaration Text: static const BitrateItem *endtable = bitratetable + (sizeof(bitratetable) / sizeof(*bitratetable));
|————Node:storage_class_specifier Text: static
|—————Node:static Text: static
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: BitrateItem
|————Node:init_declarator Text: *endtable = bitratetable + (sizeof(bitratetable) / sizeof(*bitratetable))
|—————Node:pointer_declarator Text: *endtable
|——————Node:* Text: *
|——————Node:identifier Text: endtable
|—————Node:= Text: =
|—————Node:binary_expression Text: bitratetable + (sizeof(bitratetable) / sizeof(*bitratetable))
|——————Node:identifier Text: bitratetable
|——————Node:+ Text: +
|——————Node:parenthesized_expression Text: (sizeof(bitratetable) / sizeof(*bitratetable))
|———————Node:( Text: (
|———————Node:binary_expression Text: sizeof(bitratetable) / sizeof(*bitratetable)
|————————Node:sizeof_expression Text: sizeof(bitratetable)
|—————————Node:sizeof Text: sizeof
|—————————Node:parenthesized_expression Text: (bitratetable)
|——————————Node:( Text: (
|——————————Node:identifier Text: bitratetable
|——————————Node:) Text: )
|————————Node:/ Text: /
|————————Node:sizeof_expression Text: sizeof(*bitratetable)
|—————————Node:sizeof Text: sizeof
|—————————Node:parenthesized_expression Text: (*bitratetable)
|——————————Node:( Text: (
|——————————Node:pointer_expression Text: *bitratetable
|———————————Node:* Text: *
|———————————Node:identifier Text: bitratetable
|——————————Node:) Text: )
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: const BitrateItem item = { bitrate , 0 };
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: BitrateItem
|————Node:init_declarator Text: item = { bitrate , 0 }
|—————Node:identifier Text: item
|—————Node:= Text: =
|—————Node:initializer_list Text: { bitrate , 0 }
|——————Node:{ Text: {
|——————Node:identifier Text: bitrate
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:} Text: }
|————Node:; Text: ;
|———Node:declaration Text: const BitrateItem *where = std::lower_bound(bitratetable, endtable, item, BitrateLessFunctor());
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: BitrateItem
|————Node:init_declarator Text: *where = std::lower_bound(bitratetable, endtable, item, BitrateLessFunctor())
|—————Node:pointer_declarator Text: *where
|——————Node:* Text: *
|——————Node:identifier Text: where
|—————Node:= Text: =
|—————Node:call_expression Text: std::lower_bound(bitratetable, endtable, item, BitrateLessFunctor())
|——————Node:qualified_identifier Text: std::lower_bound
|———————Node:namespace_identifier Text: std
|———————Node::: Text: ::
|———————Node:identifier Text: lower_bound
|——————Node:argument_list Text: (bitratetable, endtable, item, BitrateLessFunctor())
|———————Node:( Text: (
|———————Node:identifier Text: bitratetable
|———————Node:, Text: ,
|———————Node:identifier Text: endtable
|———————Node:, Text: ,
|———————Node:identifier Text: item
|———————Node:, Text: ,
|———————Node:call_expression Text: BitrateLessFunctor()
|————————Node:identifier Text: BitrateLessFunctor
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return where != endtable ? where->code : PCAN_BAUD_INVALID;
|————Node:return Text: return
|————Node:conditional_expression Text: where != endtable ? where->code : PCAN_BAUD_INVALID
|—————Node:binary_expression Text: where != endtable
|——————Node:identifier Text: where
|——————Node:!= Text: !=
|——————Node:identifier Text: endtable
|—————Node:? Text: ?
|—————Node:field_expression Text: where->code
|——————Node:identifier Text: where
|——————Node:-> Text: ->
|——————Node:field_identifier Text: code
|—————Node:: Text: :
|—————Node:identifier Text: PCAN_BAUD_INVALID
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: static QByteArray nominalBitrateString(int nominalBitrate)
{
    switch (nominalBitrate) {
    case 125000:
        return "f_clock=80000000, nom_brp=40, nom_tseg1=12, nom_tseg2=3, nom_sjw=1";
    case 250000:
        return "f_clock=80000000, nom_brp=20, nom_tseg1=12, nom_tseg2=3, nom_sjw=1";
    case 500000:
        return "f_clock=80000000, nom_brp=10, nom_tseg1=12, nom_tseg2=3, nom_sjw=1";
    case 1000000:
        return "f_clock=80000000, nom_brp=10, nom_tseg1=5,  nom_tseg2=2, nom_sjw=1";
    default:
        return QByteArray();
    }
}
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_identifier Text: QByteArray
|——Node:function_declarator Text: nominalBitrateString(int nominalBitrate)
|———Node:identifier Text: nominalBitrateString
|———Node:parameter_list Text: (int nominalBitrate)
|————Node:( Text: (
|————Node:parameter_declaration Text: int nominalBitrate
|—————Node:primitive_type Text: int
|—————Node:identifier Text: nominalBitrate
|————Node:) Text: )
|——Node:compound_statement Text: {
    switch (nominalBitrate) {
    case 125000:
        return "f_clock=80000000, nom_brp=40, nom_tseg1=12, nom_tseg2=3, nom_sjw=1";
    case 250000:
        return "f_clock=80000000, nom_brp=20, nom_tseg1=12, nom_tseg2=3, nom_sjw=1";
    case 500000:
        return "f_clock=80000000, nom_brp=10, nom_tseg1=12, nom_tseg2=3, nom_sjw=1";
    case 1000000:
        return "f_clock=80000000, nom_brp=10, nom_tseg1=5,  nom_tseg2=2, nom_sjw=1";
    default:
        return QByteArray();
    }
}
|———Node:{ Text: {
|———Node:switch_statement Text: switch (nominalBitrate) {
    case 125000:
        return "f_clock=80000000, nom_brp=40, nom_tseg1=12, nom_tseg2=3, nom_sjw=1";
    case 250000:
        return "f_clock=80000000, nom_brp=20, nom_tseg1=12, nom_tseg2=3, nom_sjw=1";
    case 500000:
        return "f_clock=80000000, nom_brp=10, nom_tseg1=12, nom_tseg2=3, nom_sjw=1";
    case 1000000:
        return "f_clock=80000000, nom_brp=10, nom_tseg1=5,  nom_tseg2=2, nom_sjw=1";
    default:
        return QByteArray();
    }
|————Node:switch Text: switch
|————Node:condition_clause Text: (nominalBitrate)
|—————Node:( Text: (
|—————Node:identifier Text: nominalBitrate
|—————Node:) Text: )
|————Node:compound_statement Text: {
    case 125000:
        return "f_clock=80000000, nom_brp=40, nom_tseg1=12, nom_tseg2=3, nom_sjw=1";
    case 250000:
        return "f_clock=80000000, nom_brp=20, nom_tseg1=12, nom_tseg2=3, nom_sjw=1";
    case 500000:
        return "f_clock=80000000, nom_brp=10, nom_tseg1=12, nom_tseg2=3, nom_sjw=1";
    case 1000000:
        return "f_clock=80000000, nom_brp=10, nom_tseg1=5,  nom_tseg2=2, nom_sjw=1";
    default:
        return QByteArray();
    }
|—————Node:{ Text: {
|—————Node:case_statement Text: case 125000:
        return "f_clock=80000000, nom_brp=40, nom_tseg1=12, nom_tseg2=3, nom_sjw=1";
|——————Node:case Text: case
|——————Node:number_literal Text: 125000
|——————Node:: Text: :
|——————Node:return_statement Text: return "f_clock=80000000, nom_brp=40, nom_tseg1=12, nom_tseg2=3, nom_sjw=1";
|———————Node:return Text: return
|———————Node:string_literal Text: "f_clock=80000000, nom_brp=40, nom_tseg1=12, nom_tseg2=3, nom_sjw=1"
|————————Node:" Text: "
|————————Node:string_content Text: f_clock=80000000, nom_brp=40, nom_tseg1=12, nom_tseg2=3, nom_sjw=1
|————————Node:" Text: "
|———————Node:; Text: ;
|—————Node:case_statement Text: case 250000:
        return "f_clock=80000000, nom_brp=20, nom_tseg1=12, nom_tseg2=3, nom_sjw=1";
|——————Node:case Text: case
|——————Node:number_literal Text: 250000
|——————Node:: Text: :
|——————Node:return_statement Text: return "f_clock=80000000, nom_brp=20, nom_tseg1=12, nom_tseg2=3, nom_sjw=1";
|———————Node:return Text: return
|———————Node:string_literal Text: "f_clock=80000000, nom_brp=20, nom_tseg1=12, nom_tseg2=3, nom_sjw=1"
|————————Node:" Text: "
|————————Node:string_content Text: f_clock=80000000, nom_brp=20, nom_tseg1=12, nom_tseg2=3, nom_sjw=1
|————————Node:" Text: "
|———————Node:; Text: ;
|—————Node:case_statement Text: case 500000:
        return "f_clock=80000000, nom_brp=10, nom_tseg1=12, nom_tseg2=3, nom_sjw=1";
|——————Node:case Text: case
|——————Node:number_literal Text: 500000
|——————Node:: Text: :
|——————Node:return_statement Text: return "f_clock=80000000, nom_brp=10, nom_tseg1=12, nom_tseg2=3, nom_sjw=1";
|———————Node:return Text: return
|———————Node:string_literal Text: "f_clock=80000000, nom_brp=10, nom_tseg1=12, nom_tseg2=3, nom_sjw=1"
|————————Node:" Text: "
|————————Node:string_content Text: f_clock=80000000, nom_brp=10, nom_tseg1=12, nom_tseg2=3, nom_sjw=1
|————————Node:" Text: "
|———————Node:; Text: ;
|—————Node:case_statement Text: case 1000000:
        return "f_clock=80000000, nom_brp=10, nom_tseg1=5,  nom_tseg2=2, nom_sjw=1";
|——————Node:case Text: case
|——————Node:number_literal Text: 1000000
|——————Node:: Text: :
|——————Node:return_statement Text: return "f_clock=80000000, nom_brp=10, nom_tseg1=5,  nom_tseg2=2, nom_sjw=1";
|———————Node:return Text: return
|———————Node:string_literal Text: "f_clock=80000000, nom_brp=10, nom_tseg1=5,  nom_tseg2=2, nom_sjw=1"
|————————Node:" Text: "
|————————Node:string_content Text: f_clock=80000000, nom_brp=10, nom_tseg1=5,  nom_tseg2=2, nom_sjw=1
|————————Node:" Text: "
|———————Node:; Text: ;
|—————Node:case_statement Text: default:
        return QByteArray();
|——————Node:default Text: default
|——————Node:: Text: :
|——————Node:return_statement Text: return QByteArray();
|———————Node:return Text: return
|———————Node:call_expression Text: QByteArray()
|————————Node:identifier Text: QByteArray
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:} Text: }
|———Node:} Text: }
|—Node:function_definition Text: static QByteArray dataBitrateString(int dataBitrate)
{
    switch (dataBitrate) {
    case 2000000:
        return ", data_brp=4, data_tseg1=7, data_tseg2=2, data_sjw=1";
    case 4000000:
        return ", data_brp=2, data_tseg1=7, data_tseg2=2, data_sjw=1";
    case 8000000:
        return ", data_brp=1, data_tseg1=7, data_tseg2=2, data_sjw=1";
    case 10000000:
        return ", data_brp=1, data_tseg1=5, data_tseg2=2, data_sjw=1";
    default:
        return QByteArray();
    }
}
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_identifier Text: QByteArray
|——Node:function_declarator Text: dataBitrateString(int dataBitrate)
|———Node:identifier Text: dataBitrateString
|———Node:parameter_list Text: (int dataBitrate)
|————Node:( Text: (
|————Node:parameter_declaration Text: int dataBitrate
|—————Node:primitive_type Text: int
|—————Node:identifier Text: dataBitrate
|————Node:) Text: )
|——Node:compound_statement Text: {
    switch (dataBitrate) {
    case 2000000:
        return ", data_brp=4, data_tseg1=7, data_tseg2=2, data_sjw=1";
    case 4000000:
        return ", data_brp=2, data_tseg1=7, data_tseg2=2, data_sjw=1";
    case 8000000:
        return ", data_brp=1, data_tseg1=7, data_tseg2=2, data_sjw=1";
    case 10000000:
        return ", data_brp=1, data_tseg1=5, data_tseg2=2, data_sjw=1";
    default:
        return QByteArray();
    }
}
|———Node:{ Text: {
|———Node:switch_statement Text: switch (dataBitrate) {
    case 2000000:
        return ", data_brp=4, data_tseg1=7, data_tseg2=2, data_sjw=1";
    case 4000000:
        return ", data_brp=2, data_tseg1=7, data_tseg2=2, data_sjw=1";
    case 8000000:
        return ", data_brp=1, data_tseg1=7, data_tseg2=2, data_sjw=1";
    case 10000000:
        return ", data_brp=1, data_tseg1=5, data_tseg2=2, data_sjw=1";
    default:
        return QByteArray();
    }
|————Node:switch Text: switch
|————Node:condition_clause Text: (dataBitrate)
|—————Node:( Text: (
|—————Node:identifier Text: dataBitrate
|—————Node:) Text: )
|————Node:compound_statement Text: {
    case 2000000:
        return ", data_brp=4, data_tseg1=7, data_tseg2=2, data_sjw=1";
    case 4000000:
        return ", data_brp=2, data_tseg1=7, data_tseg2=2, data_sjw=1";
    case 8000000:
        return ", data_brp=1, data_tseg1=7, data_tseg2=2, data_sjw=1";
    case 10000000:
        return ", data_brp=1, data_tseg1=5, data_tseg2=2, data_sjw=1";
    default:
        return QByteArray();
    }
|—————Node:{ Text: {
|—————Node:case_statement Text: case 2000000:
        return ", data_brp=4, data_tseg1=7, data_tseg2=2, data_sjw=1";
|——————Node:case Text: case
|——————Node:number_literal Text: 2000000
|——————Node:: Text: :
|——————Node:return_statement Text: return ", data_brp=4, data_tseg1=7, data_tseg2=2, data_sjw=1";
|———————Node:return Text: return
|———————Node:string_literal Text: ", data_brp=4, data_tseg1=7, data_tseg2=2, data_sjw=1"
|————————Node:" Text: "
|————————Node:string_content Text: , data_brp=4, data_tseg1=7, data_tseg2=2, data_sjw=1
|————————Node:" Text: "
|———————Node:; Text: ;
|—————Node:case_statement Text: case 4000000:
        return ", data_brp=2, data_tseg1=7, data_tseg2=2, data_sjw=1";
|——————Node:case Text: case
|——————Node:number_literal Text: 4000000
|——————Node:: Text: :
|——————Node:return_statement Text: return ", data_brp=2, data_tseg1=7, data_tseg2=2, data_sjw=1";
|———————Node:return Text: return
|———————Node:string_literal Text: ", data_brp=2, data_tseg1=7, data_tseg2=2, data_sjw=1"
|————————Node:" Text: "
|————————Node:string_content Text: , data_brp=2, data_tseg1=7, data_tseg2=2, data_sjw=1
|————————Node:" Text: "
|———————Node:; Text: ;
|—————Node:case_statement Text: case 8000000:
        return ", data_brp=1, data_tseg1=7, data_tseg2=2, data_sjw=1";
|——————Node:case Text: case
|——————Node:number_literal Text: 8000000
|——————Node:: Text: :
|——————Node:return_statement Text: return ", data_brp=1, data_tseg1=7, data_tseg2=2, data_sjw=1";
|———————Node:return Text: return
|———————Node:string_literal Text: ", data_brp=1, data_tseg1=7, data_tseg2=2, data_sjw=1"
|————————Node:" Text: "
|————————Node:string_content Text: , data_brp=1, data_tseg1=7, data_tseg2=2, data_sjw=1
|————————Node:" Text: "
|———————Node:; Text: ;
|—————Node:case_statement Text: case 10000000:
        return ", data_brp=1, data_tseg1=5, data_tseg2=2, data_sjw=1";
|——————Node:case Text: case
|——————Node:number_literal Text: 10000000
|——————Node:: Text: :
|——————Node:return_statement Text: return ", data_brp=1, data_tseg1=5, data_tseg2=2, data_sjw=1";
|———————Node:return Text: return
|———————Node:string_literal Text: ", data_brp=1, data_tseg1=5, data_tseg2=2, data_sjw=1"
|————————Node:" Text: "
|————————Node:string_content Text: , data_brp=1, data_tseg1=5, data_tseg2=2, data_sjw=1
|————————Node:" Text: "
|———————Node:; Text: ;
|—————Node:case_statement Text: default:
        return QByteArray();
|——————Node:default Text: default
|——————Node:: Text: :
|——————Node:return_statement Text: return QByteArray();
|———————Node:return Text: return
|———————Node:call_expression Text: QByteArray()
|————————Node:identifier Text: QByteArray
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:} Text: }
|———Node:} Text: }
|—Node:function_definition Text: static QByteArray bitrateStringFromBitrate(int nominalBitrate, int dataBitrate)
{
    QByteArray result = nominalBitrateString(nominalBitrate);

    if (result.isEmpty())
        return QByteArray();

    result += dataBitrateString(dataBitrate);

    return result;
}
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_identifier Text: QByteArray
|——Node:function_declarator Text: bitrateStringFromBitrate(int nominalBitrate, int dataBitrate)
|———Node:identifier Text: bitrateStringFromBitrate
|———Node:parameter_list Text: (int nominalBitrate, int dataBitrate)
|————Node:( Text: (
|————Node:parameter_declaration Text: int nominalBitrate
|—————Node:primitive_type Text: int
|—————Node:identifier Text: nominalBitrate
|————Node:, Text: ,
|————Node:parameter_declaration Text: int dataBitrate
|—————Node:primitive_type Text: int
|—————Node:identifier Text: dataBitrate
|————Node:) Text: )
|——Node:compound_statement Text: {
    QByteArray result = nominalBitrateString(nominalBitrate);

    if (result.isEmpty())
        return QByteArray();

    result += dataBitrateString(dataBitrate);

    return result;
}
|———Node:{ Text: {
|———Node:declaration Text: QByteArray result = nominalBitrateString(nominalBitrate);
|————Node:type_identifier Text: QByteArray
|————Node:init_declarator Text: result = nominalBitrateString(nominalBitrate)
|—————Node:identifier Text: result
|—————Node:= Text: =
|—————Node:call_expression Text: nominalBitrateString(nominalBitrate)
|——————Node:identifier Text: nominalBitrateString
|——————Node:argument_list Text: (nominalBitrate)
|———————Node:( Text: (
|———————Node:identifier Text: nominalBitrate
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (result.isEmpty())
        return QByteArray();
|————Node:if Text: if
|————Node:condition_clause Text: (result.isEmpty())
|—————Node:( Text: (
|—————Node:call_expression Text: result.isEmpty()
|——————Node:field_expression Text: result.isEmpty
|———————Node:identifier Text: result
|———————Node:. Text: .
|———————Node:field_identifier Text: isEmpty
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:return_statement Text: return QByteArray();
|—————Node:return Text: return
|—————Node:call_expression Text: QByteArray()
|——————Node:identifier Text: QByteArray
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|———Node:expression_statement Text: result += dataBitrateString(dataBitrate);
|————Node:assignment_expression Text: result += dataBitrateString(dataBitrate)
|—————Node:identifier Text: result
|—————Node:+= Text: +=
|—————Node:call_expression Text: dataBitrateString(dataBitrate)
|——————Node:identifier Text: dataBitrateString
|——————Node:argument_list Text: (dataBitrate)
|———————Node:( Text: (
|———————Node:identifier Text: dataBitrate
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return result;
|————Node:return Text: return
|————Node:identifier Text: result
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: bool PeakCanBackendPrivate::open()
{
    Q_Q(PeakCanBackend);

    const int nominalBitrate = q->configurationParameter(QCanBusDevice::BitRateKey).toInt();
    TPCANStatus st = PCAN_ERROR_OK;

    if (isFlexibleDatarateEnabled) {
        const int dataBitrate = q->configurationParameter(QCanBusDevice::DataBitRateKey).toInt();
        const QByteArray bitrateStr = bitrateStringFromBitrate(nominalBitrate, dataBitrate);
        st = ::CAN_InitializeFD(channelIndex, const_cast<char *>(bitrateStr.data()));
    } else {
        const TPCANBaudrate bitrateCode = bitrateCodeFromBitrate(nominalBitrate);
        st = ::CAN_Initialize(channelIndex, bitrateCode, 0, 0, 0);
    }

    if (Q_UNLIKELY(st != PCAN_ERROR_OK)) {
        const QString errorString = systemErrorString(st);
        qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot initialize hardware: %ls",
                   qUtf16Printable(errorString));
        q->setError(errorString, QCanBusDevice::ConnectionError);
        return false;
    }

#if defined(Q_OS_WIN32)
    if (readHandle == INVALID_HANDLE_VALUE) {
        readHandle = ::CreateEvent(nullptr, FALSE, FALSE, nullptr);
        if (Q_UNLIKELY(!readHandle)) {
            const QString errorString = qt_error_string(int(::GetLastError()));
            qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot create receive event handler: %ls",
                       qUtf16Printable(errorString));
            q->setError(errorString, QCanBusDevice::ConnectionError);
            return false;
        }
    }

    const TPCANStatus err = ::CAN_SetValue(channelIndex, PCAN_RECEIVE_EVENT, &readHandle, sizeof(readHandle));
    if (Q_UNLIKELY(err != PCAN_ERROR_OK)) {
        q->setError(systemErrorString(err), QCanBusDevice::ConnectionError);
        return false;
    }

#else
    const TPCANStatus err = ::CAN_GetValue(channelIndex, PCAN_RECEIVE_EVENT, &readHandle, sizeof(readHandle));
    if (Q_UNLIKELY(err != PCAN_ERROR_OK)) {
        const QString errorString = systemErrorString(err);
        qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot create receive event handler: %ls",
                   qUtf16Printable(errorString));
        q->setError(errorString, QCanBusDevice::ConnectionError);
        return false;
    }
#endif

    writeNotifier = new PeakCanWriteNotifier(this, q);
    writeNotifier->setInterval(0);

    readNotifier = new PeakCanReadNotifier(this, q);
    readNotifier->setEnabled(true);

    isOpen = true;
    return true;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: PeakCanBackendPrivate::open()
|———Node:qualified_identifier Text: PeakCanBackendPrivate::open
|————Node:namespace_identifier Text: PeakCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: open
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(PeakCanBackend);

    const int nominalBitrate = q->configurationParameter(QCanBusDevice::BitRateKey).toInt();
    TPCANStatus st = PCAN_ERROR_OK;

    if (isFlexibleDatarateEnabled) {
        const int dataBitrate = q->configurationParameter(QCanBusDevice::DataBitRateKey).toInt();
        const QByteArray bitrateStr = bitrateStringFromBitrate(nominalBitrate, dataBitrate);
        st = ::CAN_InitializeFD(channelIndex, const_cast<char *>(bitrateStr.data()));
    } else {
        const TPCANBaudrate bitrateCode = bitrateCodeFromBitrate(nominalBitrate);
        st = ::CAN_Initialize(channelIndex, bitrateCode, 0, 0, 0);
    }

    if (Q_UNLIKELY(st != PCAN_ERROR_OK)) {
        const QString errorString = systemErrorString(st);
        qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot initialize hardware: %ls",
                   qUtf16Printable(errorString));
        q->setError(errorString, QCanBusDevice::ConnectionError);
        return false;
    }

#if defined(Q_OS_WIN32)
    if (readHandle == INVALID_HANDLE_VALUE) {
        readHandle = ::CreateEvent(nullptr, FALSE, FALSE, nullptr);
        if (Q_UNLIKELY(!readHandle)) {
            const QString errorString = qt_error_string(int(::GetLastError()));
            qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot create receive event handler: %ls",
                       qUtf16Printable(errorString));
            q->setError(errorString, QCanBusDevice::ConnectionError);
            return false;
        }
    }

    const TPCANStatus err = ::CAN_SetValue(channelIndex, PCAN_RECEIVE_EVENT, &readHandle, sizeof(readHandle));
    if (Q_UNLIKELY(err != PCAN_ERROR_OK)) {
        q->setError(systemErrorString(err), QCanBusDevice::ConnectionError);
        return false;
    }

#else
    const TPCANStatus err = ::CAN_GetValue(channelIndex, PCAN_RECEIVE_EVENT, &readHandle, sizeof(readHandle));
    if (Q_UNLIKELY(err != PCAN_ERROR_OK)) {
        const QString errorString = systemErrorString(err);
        qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot create receive event handler: %ls",
                   qUtf16Printable(errorString));
        q->setError(errorString, QCanBusDevice::ConnectionError);
        return false;
    }
#endif

    writeNotifier = new PeakCanWriteNotifier(this, q);
    writeNotifier->setInterval(0);

    readNotifier = new PeakCanReadNotifier(this, q);
    readNotifier->setEnabled(true);

    isOpen = true;
    return true;
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(PeakCanBackend);
|————Node:call_expression Text: Q_Q(PeakCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (PeakCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: PeakCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: const int nominalBitrate = q->configurationParameter(QCanBusDevice::BitRateKey).toInt();
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: int
|————Node:init_declarator Text: nominalBitrate = q->configurationParameter(QCanBusDevice::BitRateKey).toInt()
|—————Node:identifier Text: nominalBitrate
|—————Node:= Text: =
|—————Node:call_expression Text: q->configurationParameter(QCanBusDevice::BitRateKey).toInt()
|——————Node:field_expression Text: q->configurationParameter(QCanBusDevice::BitRateKey).toInt
|———————Node:call_expression Text: q->configurationParameter(QCanBusDevice::BitRateKey)
|————————Node:field_expression Text: q->configurationParameter
|—————————Node:identifier Text: q
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: configurationParameter
|————————Node:argument_list Text: (QCanBusDevice::BitRateKey)
|—————————Node:( Text: (
|—————————Node:qualified_identifier Text: QCanBusDevice::BitRateKey
|——————————Node:namespace_identifier Text: QCanBusDevice
|——————————Node::: Text: ::
|——————————Node:identifier Text: BitRateKey
|—————————Node:) Text: )
|———————Node:. Text: .
|———————Node:field_identifier Text: toInt
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: TPCANStatus st = PCAN_ERROR_OK;
|————Node:type_identifier Text: TPCANStatus
|————Node:init_declarator Text: st = PCAN_ERROR_OK
|—————Node:identifier Text: st
|—————Node:= Text: =
|—————Node:identifier Text: PCAN_ERROR_OK
|————Node:; Text: ;
|———Node:if_statement Text: if (isFlexibleDatarateEnabled) {
        const int dataBitrate = q->configurationParameter(QCanBusDevice::DataBitRateKey).toInt();
        const QByteArray bitrateStr = bitrateStringFromBitrate(nominalBitrate, dataBitrate);
        st = ::CAN_InitializeFD(channelIndex, const_cast<char *>(bitrateStr.data()));
    } else {
        const TPCANBaudrate bitrateCode = bitrateCodeFromBitrate(nominalBitrate);
        st = ::CAN_Initialize(channelIndex, bitrateCode, 0, 0, 0);
    }
|————Node:if Text: if
|————Node:condition_clause Text: (isFlexibleDatarateEnabled)
|—————Node:( Text: (
|—————Node:identifier Text: isFlexibleDatarateEnabled
|—————Node:) Text: )
|————Node:compound_statement Text: {
        const int dataBitrate = q->configurationParameter(QCanBusDevice::DataBitRateKey).toInt();
        const QByteArray bitrateStr = bitrateStringFromBitrate(nominalBitrate, dataBitrate);
        st = ::CAN_InitializeFD(channelIndex, const_cast<char *>(bitrateStr.data()));
    }
|—————Node:{ Text: {
|—————Node:declaration Text: const int dataBitrate = q->configurationParameter(QCanBusDevice::DataBitRateKey).toInt();
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:primitive_type Text: int
|——————Node:init_declarator Text: dataBitrate = q->configurationParameter(QCanBusDevice::DataBitRateKey).toInt()
|———————Node:identifier Text: dataBitrate
|———————Node:= Text: =
|———————Node:call_expression Text: q->configurationParameter(QCanBusDevice::DataBitRateKey).toInt()
|————————Node:field_expression Text: q->configurationParameter(QCanBusDevice::DataBitRateKey).toInt
|—————————Node:call_expression Text: q->configurationParameter(QCanBusDevice::DataBitRateKey)
|——————————Node:field_expression Text: q->configurationParameter
|———————————Node:identifier Text: q
|———————————Node:-> Text: ->
|———————————Node:field_identifier Text: configurationParameter
|——————————Node:argument_list Text: (QCanBusDevice::DataBitRateKey)
|———————————Node:( Text: (
|———————————Node:qualified_identifier Text: QCanBusDevice::DataBitRateKey
|————————————Node:namespace_identifier Text: QCanBusDevice
|————————————Node::: Text: ::
|————————————Node:identifier Text: DataBitRateKey
|———————————Node:) Text: )
|—————————Node:. Text: .
|—————————Node:field_identifier Text: toInt
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:declaration Text: const QByteArray bitrateStr = bitrateStringFromBitrate(nominalBitrate, dataBitrate);
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:type_identifier Text: QByteArray
|——————Node:init_declarator Text: bitrateStr = bitrateStringFromBitrate(nominalBitrate, dataBitrate)
|———————Node:identifier Text: bitrateStr
|———————Node:= Text: =
|———————Node:call_expression Text: bitrateStringFromBitrate(nominalBitrate, dataBitrate)
|————————Node:identifier Text: bitrateStringFromBitrate
|————————Node:argument_list Text: (nominalBitrate, dataBitrate)
|—————————Node:( Text: (
|—————————Node:identifier Text: nominalBitrate
|—————————Node:, Text: ,
|—————————Node:identifier Text: dataBitrate
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: st = ::CAN_InitializeFD(channelIndex, const_cast<char *>(bitrateStr.data()));
|——————Node:assignment_expression Text: st = ::CAN_InitializeFD(channelIndex, const_cast<char *>(bitrateStr.data()))
|———————Node:identifier Text: st
|———————Node:= Text: =
|———————Node:call_expression Text: ::CAN_InitializeFD(channelIndex, const_cast<char *>(bitrateStr.data()))
|————————Node:qualified_identifier Text: ::CAN_InitializeFD
|—————————Node::: Text: ::
|—————————Node:identifier Text: CAN_InitializeFD
|————————Node:argument_list Text: (channelIndex, const_cast<char *>(bitrateStr.data()))
|—————————Node:( Text: (
|—————————Node:identifier Text: channelIndex
|—————————Node:, Text: ,
|—————————Node:call_expression Text: const_cast<char *>(bitrateStr.data())
|——————————Node:template_function Text: const_cast<char *>
|———————————Node:identifier Text: const_cast
|———————————Node:template_argument_list Text: <char *>
|————————————Node:< Text: <
|————————————Node:type_descriptor Text: char *
|—————————————Node:primitive_type Text: char
|—————————————Node:abstract_pointer_declarator Text: *
|——————————————Node:* Text: *
|————————————Node:> Text: >
|——————————Node:argument_list Text: (bitrateStr.data())
|———————————Node:( Text: (
|———————————Node:call_expression Text: bitrateStr.data()
|————————————Node:field_expression Text: bitrateStr.data
|—————————————Node:identifier Text: bitrateStr
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: data
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else {
        const TPCANBaudrate bitrateCode = bitrateCodeFromBitrate(nominalBitrate);
        st = ::CAN_Initialize(channelIndex, bitrateCode, 0, 0, 0);
    }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
        const TPCANBaudrate bitrateCode = bitrateCodeFromBitrate(nominalBitrate);
        st = ::CAN_Initialize(channelIndex, bitrateCode, 0, 0, 0);
    }
|——————Node:{ Text: {
|——————Node:declaration Text: const TPCANBaudrate bitrateCode = bitrateCodeFromBitrate(nominalBitrate);
|———————Node:type_qualifier Text: const
|————————Node:const Text: const
|———————Node:type_identifier Text: TPCANBaudrate
|———————Node:init_declarator Text: bitrateCode = bitrateCodeFromBitrate(nominalBitrate)
|————————Node:identifier Text: bitrateCode
|————————Node:= Text: =
|————————Node:call_expression Text: bitrateCodeFromBitrate(nominalBitrate)
|—————————Node:identifier Text: bitrateCodeFromBitrate
|—————————Node:argument_list Text: (nominalBitrate)
|——————————Node:( Text: (
|——————————Node:identifier Text: nominalBitrate
|——————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: st = ::CAN_Initialize(channelIndex, bitrateCode, 0, 0, 0);
|———————Node:assignment_expression Text: st = ::CAN_Initialize(channelIndex, bitrateCode, 0, 0, 0)
|————————Node:identifier Text: st
|————————Node:= Text: =
|————————Node:call_expression Text: ::CAN_Initialize(channelIndex, bitrateCode, 0, 0, 0)
|—————————Node:qualified_identifier Text: ::CAN_Initialize
|——————————Node::: Text: ::
|——————————Node:identifier Text: CAN_Initialize
|—————————Node:argument_list Text: (channelIndex, bitrateCode, 0, 0, 0)
|——————————Node:( Text: (
|——————————Node:identifier Text: channelIndex
|——————————Node:, Text: ,
|——————————Node:identifier Text: bitrateCode
|——————————Node:, Text: ,
|——————————Node:number_literal Text: 0
|——————————Node:, Text: ,
|——————————Node:number_literal Text: 0
|——————————Node:, Text: ,
|——————————Node:number_literal Text: 0
|——————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:} Text: }
|———Node:if_statement Text: if (Q_UNLIKELY(st != PCAN_ERROR_OK)) {
        const QString errorString = systemErrorString(st);
        qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot initialize hardware: %ls",
                   qUtf16Printable(errorString));
        q->setError(errorString, QCanBusDevice::ConnectionError);
        return false;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(st != PCAN_ERROR_OK))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(st != PCAN_ERROR_OK)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (st != PCAN_ERROR_OK)
|———————Node:( Text: (
|———————Node:binary_expression Text: st != PCAN_ERROR_OK
|————————Node:identifier Text: st
|————————Node:!= Text: !=
|————————Node:identifier Text: PCAN_ERROR_OK
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        const QString errorString = systemErrorString(st);
        qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot initialize hardware: %ls",
                   qUtf16Printable(errorString));
        q->setError(errorString, QCanBusDevice::ConnectionError);
        return false;
    }
|—————Node:{ Text: {
|—————Node:declaration Text: const QString errorString = systemErrorString(st);
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:type_identifier Text: QString
|——————Node:init_declarator Text: errorString = systemErrorString(st)
|———————Node:identifier Text: errorString
|———————Node:= Text: =
|———————Node:call_expression Text: systemErrorString(st)
|————————Node:identifier Text: systemErrorString
|————————Node:argument_list Text: (st)
|—————————Node:( Text: (
|—————————Node:identifier Text: st
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot initialize hardware: %ls",
                   qUtf16Printable(errorString));
|——————Node:call_expression Text: qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot initialize hardware: %ls",
                   qUtf16Printable(errorString))
|———————Node:identifier Text: qCCritical
|———————Node:argument_list Text: (QT_CANBUS_PLUGINS_PEAKCAN, "Cannot initialize hardware: %ls",
                   qUtf16Printable(errorString))
|————————Node:( Text: (
|————————Node:identifier Text: QT_CANBUS_PLUGINS_PEAKCAN
|————————Node:, Text: ,
|————————Node:string_literal Text: "Cannot initialize hardware: %ls"
|—————————Node:" Text: "
|—————————Node:string_content Text: Cannot initialize hardware: %ls
|—————————Node:" Text: "
|————————Node:, Text: ,
|————————Node:call_expression Text: qUtf16Printable(errorString)
|—————————Node:identifier Text: qUtf16Printable
|—————————Node:argument_list Text: (errorString)
|——————————Node:( Text: (
|——————————Node:identifier Text: errorString
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: q->setError(errorString, QCanBusDevice::ConnectionError);
|——————Node:call_expression Text: q->setError(errorString, QCanBusDevice::ConnectionError)
|———————Node:field_expression Text: q->setError
|————————Node:identifier Text: q
|————————Node:-> Text: ->
|————————Node:field_identifier Text: setError
|———————Node:argument_list Text: (errorString, QCanBusDevice::ConnectionError)
|————————Node:( Text: (
|————————Node:identifier Text: errorString
|————————Node:, Text: ,
|————————Node:qualified_identifier Text: QCanBusDevice::ConnectionError
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:identifier Text: ConnectionError
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return false;
|——————Node:return Text: return
|——————Node:false Text: false
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:preproc_if Text: #if defined(Q_OS_WIN32)
    if (readHandle == INVALID_HANDLE_VALUE) {
        readHandle = ::CreateEvent(nullptr, FALSE, FALSE, nullptr);
        if (Q_UNLIKELY(!readHandle)) {
            const QString errorString = qt_error_string(int(::GetLastError()));
            qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot create receive event handler: %ls",
                       qUtf16Printable(errorString));
            q->setError(errorString, QCanBusDevice::ConnectionError);
            return false;
        }
    }

    const TPCANStatus err = ::CAN_SetValue(channelIndex, PCAN_RECEIVE_EVENT, &readHandle, sizeof(readHandle));
    if (Q_UNLIKELY(err != PCAN_ERROR_OK)) {
        q->setError(systemErrorString(err), QCanBusDevice::ConnectionError);
        return false;
    }

#else
    const TPCANStatus err = ::CAN_GetValue(channelIndex, PCAN_RECEIVE_EVENT, &readHandle, sizeof(readHandle));
    if (Q_UNLIKELY(err != PCAN_ERROR_OK)) {
        const QString errorString = systemErrorString(err);
        qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot create receive event handler: %ls",
                   qUtf16Printable(errorString));
        q->setError(errorString, QCanBusDevice::ConnectionError);
        return false;
    }
#endif
|————Node:#if Text: #if
|————Node:preproc_defined Text: defined(Q_OS_WIN32)
|—————Node:defined Text: defined
|—————Node:( Text: (
|—————Node:identifier Text: Q_OS_WIN32
|—————Node:) Text: )
|————Node:
 Text: 

|————Node:if_statement Text: if (readHandle == INVALID_HANDLE_VALUE) {
        readHandle = ::CreateEvent(nullptr, FALSE, FALSE, nullptr);
        if (Q_UNLIKELY(!readHandle)) {
            const QString errorString = qt_error_string(int(::GetLastError()));
            qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot create receive event handler: %ls",
                       qUtf16Printable(errorString));
            q->setError(errorString, QCanBusDevice::ConnectionError);
            return false;
        }
    }
|—————Node:if Text: if
|—————Node:condition_clause Text: (readHandle == INVALID_HANDLE_VALUE)
|——————Node:( Text: (
|——————Node:binary_expression Text: readHandle == INVALID_HANDLE_VALUE
|———————Node:identifier Text: readHandle
|———————Node:== Text: ==
|———————Node:identifier Text: INVALID_HANDLE_VALUE
|——————Node:) Text: )
|—————Node:compound_statement Text: {
        readHandle = ::CreateEvent(nullptr, FALSE, FALSE, nullptr);
        if (Q_UNLIKELY(!readHandle)) {
            const QString errorString = qt_error_string(int(::GetLastError()));
            qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot create receive event handler: %ls",
                       qUtf16Printable(errorString));
            q->setError(errorString, QCanBusDevice::ConnectionError);
            return false;
        }
    }
|——————Node:{ Text: {
|——————Node:expression_statement Text: readHandle = ::CreateEvent(nullptr, FALSE, FALSE, nullptr);
|———————Node:assignment_expression Text: readHandle = ::CreateEvent(nullptr, FALSE, FALSE, nullptr)
|————————Node:identifier Text: readHandle
|————————Node:= Text: =
|————————Node:call_expression Text: ::CreateEvent(nullptr, FALSE, FALSE, nullptr)
|—————————Node:qualified_identifier Text: ::CreateEvent
|——————————Node::: Text: ::
|——————————Node:identifier Text: CreateEvent
|—————————Node:argument_list Text: (nullptr, FALSE, FALSE, nullptr)
|——————————Node:( Text: (
|——————————Node:null Text: nullptr
|———————————Node:nullptr Text: nullptr
|——————————Node:, Text: ,
|——————————Node:false Text: FALSE
|——————————Node:, Text: ,
|——————————Node:false Text: FALSE
|——————————Node:, Text: ,
|——————————Node:null Text: nullptr
|———————————Node:nullptr Text: nullptr
|——————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:if_statement Text: if (Q_UNLIKELY(!readHandle)) {
            const QString errorString = qt_error_string(int(::GetLastError()));
            qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot create receive event handler: %ls",
                       qUtf16Printable(errorString));
            q->setError(errorString, QCanBusDevice::ConnectionError);
            return false;
        }
|———————Node:if Text: if
|———————Node:condition_clause Text: (Q_UNLIKELY(!readHandle))
|————————Node:( Text: (
|————————Node:call_expression Text: Q_UNLIKELY(!readHandle)
|—————————Node:identifier Text: Q_UNLIKELY
|—————————Node:argument_list Text: (!readHandle)
|——————————Node:( Text: (
|——————————Node:unary_expression Text: !readHandle
|———————————Node:! Text: !
|———————————Node:identifier Text: readHandle
|——————————Node:) Text: )
|————————Node:) Text: )
|———————Node:compound_statement Text: {
            const QString errorString = qt_error_string(int(::GetLastError()));
            qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot create receive event handler: %ls",
                       qUtf16Printable(errorString));
            q->setError(errorString, QCanBusDevice::ConnectionError);
            return false;
        }
|————————Node:{ Text: {
|————————Node:declaration Text: const QString errorString = qt_error_string(int(::GetLastError()));
|—————————Node:type_qualifier Text: const
|——————————Node:const Text: const
|—————————Node:type_identifier Text: QString
|—————————Node:init_declarator Text: errorString = qt_error_string(int(::GetLastError()))
|——————————Node:identifier Text: errorString
|——————————Node:= Text: =
|——————————Node:call_expression Text: qt_error_string(int(::GetLastError()))
|———————————Node:identifier Text: qt_error_string
|———————————Node:argument_list Text: (int(::GetLastError()))
|————————————Node:( Text: (
|————————————Node:call_expression Text: int(::GetLastError())
|—————————————Node:primitive_type Text: int
|—————————————Node:argument_list Text: (::GetLastError())
|——————————————Node:( Text: (
|——————————————Node:call_expression Text: ::GetLastError()
|———————————————Node:qualified_identifier Text: ::GetLastError
|————————————————Node::: Text: ::
|————————————————Node:identifier Text: GetLastError
|———————————————Node:argument_list Text: ()
|————————————————Node:( Text: (
|————————————————Node:) Text: )
|——————————————Node:) Text: )
|————————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot create receive event handler: %ls",
                       qUtf16Printable(errorString));
|—————————Node:call_expression Text: qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot create receive event handler: %ls",
                       qUtf16Printable(errorString))
|——————————Node:identifier Text: qCCritical
|——————————Node:argument_list Text: (QT_CANBUS_PLUGINS_PEAKCAN, "Cannot create receive event handler: %ls",
                       qUtf16Printable(errorString))
|———————————Node:( Text: (
|———————————Node:identifier Text: QT_CANBUS_PLUGINS_PEAKCAN
|———————————Node:, Text: ,
|———————————Node:string_literal Text: "Cannot create receive event handler: %ls"
|————————————Node:" Text: "
|————————————Node:string_content Text: Cannot create receive event handler: %ls
|————————————Node:" Text: "
|———————————Node:, Text: ,
|———————————Node:call_expression Text: qUtf16Printable(errorString)
|————————————Node:identifier Text: qUtf16Printable
|————————————Node:argument_list Text: (errorString)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: errorString
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: q->setError(errorString, QCanBusDevice::ConnectionError);
|—————————Node:call_expression Text: q->setError(errorString, QCanBusDevice::ConnectionError)
|——————————Node:field_expression Text: q->setError
|———————————Node:identifier Text: q
|———————————Node:-> Text: ->
|———————————Node:field_identifier Text: setError
|——————————Node:argument_list Text: (errorString, QCanBusDevice::ConnectionError)
|———————————Node:( Text: (
|———————————Node:identifier Text: errorString
|———————————Node:, Text: ,
|———————————Node:qualified_identifier Text: QCanBusDevice::ConnectionError
|————————————Node:namespace_identifier Text: QCanBusDevice
|————————————Node::: Text: ::
|————————————Node:identifier Text: ConnectionError
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:return_statement Text: return false;
|—————————Node:return Text: return
|—————————Node:false Text: false
|—————————Node:; Text: ;
|————————Node:} Text: }
|——————Node:} Text: }
|————Node:declaration Text: const TPCANStatus err = ::CAN_SetValue(channelIndex, PCAN_RECEIVE_EVENT, &readHandle, sizeof(readHandle));
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: TPCANStatus
|—————Node:init_declarator Text: err = ::CAN_SetValue(channelIndex, PCAN_RECEIVE_EVENT, &readHandle, sizeof(readHandle))
|——————Node:identifier Text: err
|——————Node:= Text: =
|——————Node:call_expression Text: ::CAN_SetValue(channelIndex, PCAN_RECEIVE_EVENT, &readHandle, sizeof(readHandle))
|———————Node:qualified_identifier Text: ::CAN_SetValue
|————————Node::: Text: ::
|————————Node:identifier Text: CAN_SetValue
|———————Node:argument_list Text: (channelIndex, PCAN_RECEIVE_EVENT, &readHandle, sizeof(readHandle))
|————————Node:( Text: (
|————————Node:identifier Text: channelIndex
|————————Node:, Text: ,
|————————Node:identifier Text: PCAN_RECEIVE_EVENT
|————————Node:, Text: ,
|————————Node:pointer_expression Text: &readHandle
|—————————Node:& Text: &
|—————————Node:identifier Text: readHandle
|————————Node:, Text: ,
|————————Node:sizeof_expression Text: sizeof(readHandle)
|—————————Node:sizeof Text: sizeof
|—————————Node:parenthesized_expression Text: (readHandle)
|——————————Node:( Text: (
|——————————Node:identifier Text: readHandle
|——————————Node:) Text: )
|————————Node:) Text: )
|—————Node:; Text: ;
|————Node:if_statement Text: if (Q_UNLIKELY(err != PCAN_ERROR_OK)) {
        q->setError(systemErrorString(err), QCanBusDevice::ConnectionError);
        return false;
    }
|—————Node:if Text: if
|—————Node:condition_clause Text: (Q_UNLIKELY(err != PCAN_ERROR_OK))
|——————Node:( Text: (
|——————Node:call_expression Text: Q_UNLIKELY(err != PCAN_ERROR_OK)
|———————Node:identifier Text: Q_UNLIKELY
|———————Node:argument_list Text: (err != PCAN_ERROR_OK)
|————————Node:( Text: (
|————————Node:binary_expression Text: err != PCAN_ERROR_OK
|—————————Node:identifier Text: err
|—————————Node:!= Text: !=
|—————————Node:identifier Text: PCAN_ERROR_OK
|————————Node:) Text: )
|——————Node:) Text: )
|—————Node:compound_statement Text: {
        q->setError(systemErrorString(err), QCanBusDevice::ConnectionError);
        return false;
    }
|——————Node:{ Text: {
|——————Node:expression_statement Text: q->setError(systemErrorString(err), QCanBusDevice::ConnectionError);
|———————Node:call_expression Text: q->setError(systemErrorString(err), QCanBusDevice::ConnectionError)
|————————Node:field_expression Text: q->setError
|—————————Node:identifier Text: q
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: setError
|————————Node:argument_list Text: (systemErrorString(err), QCanBusDevice::ConnectionError)
|—————————Node:( Text: (
|—————————Node:call_expression Text: systemErrorString(err)
|——————————Node:identifier Text: systemErrorString
|——————————Node:argument_list Text: (err)
|———————————Node:( Text: (
|———————————Node:identifier Text: err
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:qualified_identifier Text: QCanBusDevice::ConnectionError
|——————————Node:namespace_identifier Text: QCanBusDevice
|——————————Node::: Text: ::
|——————————Node:identifier Text: ConnectionError
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:return_statement Text: return false;
|———————Node:return Text: return
|———————Node:false Text: false
|———————Node:; Text: ;
|——————Node:} Text: }
|————Node:preproc_else Text: #else
    const TPCANStatus err = ::CAN_GetValue(channelIndex, PCAN_RECEIVE_EVENT, &readHandle, sizeof(readHandle));
    if (Q_UNLIKELY(err != PCAN_ERROR_OK)) {
        const QString errorString = systemErrorString(err);
        qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot create receive event handler: %ls",
                   qUtf16Printable(errorString));
        q->setError(errorString, QCanBusDevice::ConnectionError);
        return false;
    }
|—————Node:#else Text: #else
|—————Node:declaration Text: const TPCANStatus err = ::CAN_GetValue(channelIndex, PCAN_RECEIVE_EVENT, &readHandle, sizeof(readHandle));
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:type_identifier Text: TPCANStatus
|——————Node:init_declarator Text: err = ::CAN_GetValue(channelIndex, PCAN_RECEIVE_EVENT, &readHandle, sizeof(readHandle))
|———————Node:identifier Text: err
|———————Node:= Text: =
|———————Node:call_expression Text: ::CAN_GetValue(channelIndex, PCAN_RECEIVE_EVENT, &readHandle, sizeof(readHandle))
|————————Node:qualified_identifier Text: ::CAN_GetValue
|—————————Node::: Text: ::
|—————————Node:identifier Text: CAN_GetValue
|————————Node:argument_list Text: (channelIndex, PCAN_RECEIVE_EVENT, &readHandle, sizeof(readHandle))
|—————————Node:( Text: (
|—————————Node:identifier Text: channelIndex
|—————————Node:, Text: ,
|—————————Node:identifier Text: PCAN_RECEIVE_EVENT
|—————————Node:, Text: ,
|—————————Node:pointer_expression Text: &readHandle
|——————————Node:& Text: &
|——————————Node:identifier Text: readHandle
|—————————Node:, Text: ,
|—————————Node:sizeof_expression Text: sizeof(readHandle)
|——————————Node:sizeof Text: sizeof
|——————————Node:parenthesized_expression Text: (readHandle)
|———————————Node:( Text: (
|———————————Node:identifier Text: readHandle
|———————————Node:) Text: )
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (Q_UNLIKELY(err != PCAN_ERROR_OK)) {
        const QString errorString = systemErrorString(err);
        qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot create receive event handler: %ls",
                   qUtf16Printable(errorString));
        q->setError(errorString, QCanBusDevice::ConnectionError);
        return false;
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: (Q_UNLIKELY(err != PCAN_ERROR_OK))
|———————Node:( Text: (
|———————Node:call_expression Text: Q_UNLIKELY(err != PCAN_ERROR_OK)
|————————Node:identifier Text: Q_UNLIKELY
|————————Node:argument_list Text: (err != PCAN_ERROR_OK)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: err != PCAN_ERROR_OK
|——————————Node:identifier Text: err
|——————————Node:!= Text: !=
|——————————Node:identifier Text: PCAN_ERROR_OK
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {
        const QString errorString = systemErrorString(err);
        qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot create receive event handler: %ls",
                   qUtf16Printable(errorString));
        q->setError(errorString, QCanBusDevice::ConnectionError);
        return false;
    }
|———————Node:{ Text: {
|———————Node:declaration Text: const QString errorString = systemErrorString(err);
|————————Node:type_qualifier Text: const
|—————————Node:const Text: const
|————————Node:type_identifier Text: QString
|————————Node:init_declarator Text: errorString = systemErrorString(err)
|—————————Node:identifier Text: errorString
|—————————Node:= Text: =
|—————————Node:call_expression Text: systemErrorString(err)
|——————————Node:identifier Text: systemErrorString
|——————————Node:argument_list Text: (err)
|———————————Node:( Text: (
|———————————Node:identifier Text: err
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot create receive event handler: %ls",
                   qUtf16Printable(errorString));
|————————Node:call_expression Text: qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot create receive event handler: %ls",
                   qUtf16Printable(errorString))
|—————————Node:identifier Text: qCCritical
|—————————Node:argument_list Text: (QT_CANBUS_PLUGINS_PEAKCAN, "Cannot create receive event handler: %ls",
                   qUtf16Printable(errorString))
|——————————Node:( Text: (
|——————————Node:identifier Text: QT_CANBUS_PLUGINS_PEAKCAN
|——————————Node:, Text: ,
|——————————Node:string_literal Text: "Cannot create receive event handler: %ls"
|———————————Node:" Text: "
|———————————Node:string_content Text: Cannot create receive event handler: %ls
|———————————Node:" Text: "
|——————————Node:, Text: ,
|——————————Node:call_expression Text: qUtf16Printable(errorString)
|———————————Node:identifier Text: qUtf16Printable
|———————————Node:argument_list Text: (errorString)
|————————————Node:( Text: (
|————————————Node:identifier Text: errorString
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: q->setError(errorString, QCanBusDevice::ConnectionError);
|————————Node:call_expression Text: q->setError(errorString, QCanBusDevice::ConnectionError)
|—————————Node:field_expression Text: q->setError
|——————————Node:identifier Text: q
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: setError
|—————————Node:argument_list Text: (errorString, QCanBusDevice::ConnectionError)
|——————————Node:( Text: (
|——————————Node:identifier Text: errorString
|——————————Node:, Text: ,
|——————————Node:qualified_identifier Text: QCanBusDevice::ConnectionError
|———————————Node:namespace_identifier Text: QCanBusDevice
|———————————Node::: Text: ::
|———————————Node:identifier Text: ConnectionError
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:return_statement Text: return false;
|————————Node:return Text: return
|————————Node:false Text: false
|————————Node:; Text: ;
|———————Node:} Text: }
|————Node:#endif Text: #endif
|———Node:expression_statement Text: writeNotifier = new PeakCanWriteNotifier(this, q);
|————Node:assignment_expression Text: writeNotifier = new PeakCanWriteNotifier(this, q)
|—————Node:identifier Text: writeNotifier
|—————Node:= Text: =
|—————Node:new_expression Text: new PeakCanWriteNotifier(this, q)
|——————Node:new Text: new
|——————Node:type_identifier Text: PeakCanWriteNotifier
|——————Node:argument_list Text: (this, q)
|———————Node:( Text: (
|———————Node:this Text: this
|———————Node:, Text: ,
|———————Node:identifier Text: q
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: writeNotifier->setInterval(0);
|————Node:call_expression Text: writeNotifier->setInterval(0)
|—————Node:field_expression Text: writeNotifier->setInterval
|——————Node:identifier Text: writeNotifier
|——————Node:-> Text: ->
|——————Node:field_identifier Text: setInterval
|—————Node:argument_list Text: (0)
|——————Node:( Text: (
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: readNotifier = new PeakCanReadNotifier(this, q);
|————Node:assignment_expression Text: readNotifier = new PeakCanReadNotifier(this, q)
|—————Node:identifier Text: readNotifier
|—————Node:= Text: =
|—————Node:new_expression Text: new PeakCanReadNotifier(this, q)
|——————Node:new Text: new
|——————Node:type_identifier Text: PeakCanReadNotifier
|——————Node:argument_list Text: (this, q)
|———————Node:( Text: (
|———————Node:this Text: this
|———————Node:, Text: ,
|———————Node:identifier Text: q
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: readNotifier->setEnabled(true);
|————Node:call_expression Text: readNotifier->setEnabled(true)
|—————Node:field_expression Text: readNotifier->setEnabled
|——————Node:identifier Text: readNotifier
|——————Node:-> Text: ->
|——————Node:field_identifier Text: setEnabled
|—————Node:argument_list Text: (true)
|——————Node:( Text: (
|——————Node:true Text: true
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: isOpen = true;
|————Node:assignment_expression Text: isOpen = true
|—————Node:identifier Text: isOpen
|—————Node:= Text: =
|—————Node:true Text: true
|————Node:; Text: ;
|———Node:return_statement Text: return true;
|————Node:return Text: return
|————Node:true Text: true
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void PeakCanBackendPrivate::close()
{
    Q_Q(PeakCanBackend);

    delete readNotifier;
    readNotifier = nullptr;

    delete writeNotifier;
    writeNotifier = nullptr;

    quint32 value = 0;
    const TPCANStatus err = ::CAN_SetValue(channelIndex, PCAN_RECEIVE_EVENT, &value, sizeof(value));
    if (Q_UNLIKELY(err != PCAN_ERROR_OK)) {
        const QString errorString = systemErrorString(err);
        qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot unregister receive event handler: %ls",
                   qUtf16Printable(errorString));
        q->setError(errorString, QCanBusDevice::ConnectionError);
    }

    const TPCANStatus st = ::CAN_Uninitialize(channelIndex);
    if (Q_UNLIKELY(st != PCAN_ERROR_OK))
        q->setError(systemErrorString(st), QCanBusDevice::ConnectionError);

#if defined(Q_OS_WIN32)
    if (readHandle && (readHandle != INVALID_HANDLE_VALUE)) {
        const QString errorString = qt_error_string(int(::GetLastError()));
        if (Q_UNLIKELY(!::CloseHandle(readHandle))) {
            qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot close read handle: %ls",
                       qUtf16Printable(errorString));
            q->setError(errorString, QCanBusDevice::ConnectionError);
        }
        readHandle = INVALID_HANDLE_VALUE;
    }
#else
    readHandle = -1;
#endif

    isOpen = false;
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: PeakCanBackendPrivate::close()
|———Node:qualified_identifier Text: PeakCanBackendPrivate::close
|————Node:namespace_identifier Text: PeakCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: close
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(PeakCanBackend);

    delete readNotifier;
    readNotifier = nullptr;

    delete writeNotifier;
    writeNotifier = nullptr;

    quint32 value = 0;
    const TPCANStatus err = ::CAN_SetValue(channelIndex, PCAN_RECEIVE_EVENT, &value, sizeof(value));
    if (Q_UNLIKELY(err != PCAN_ERROR_OK)) {
        const QString errorString = systemErrorString(err);
        qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot unregister receive event handler: %ls",
                   qUtf16Printable(errorString));
        q->setError(errorString, QCanBusDevice::ConnectionError);
    }

    const TPCANStatus st = ::CAN_Uninitialize(channelIndex);
    if (Q_UNLIKELY(st != PCAN_ERROR_OK))
        q->setError(systemErrorString(st), QCanBusDevice::ConnectionError);

#if defined(Q_OS_WIN32)
    if (readHandle && (readHandle != INVALID_HANDLE_VALUE)) {
        const QString errorString = qt_error_string(int(::GetLastError()));
        if (Q_UNLIKELY(!::CloseHandle(readHandle))) {
            qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot close read handle: %ls",
                       qUtf16Printable(errorString));
            q->setError(errorString, QCanBusDevice::ConnectionError);
        }
        readHandle = INVALID_HANDLE_VALUE;
    }
#else
    readHandle = -1;
#endif

    isOpen = false;
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(PeakCanBackend);
|————Node:call_expression Text: Q_Q(PeakCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (PeakCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: PeakCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: delete readNotifier;
|————Node:delete_expression Text: delete readNotifier
|—————Node:delete Text: delete
|—————Node:identifier Text: readNotifier
|————Node:; Text: ;
|———Node:expression_statement Text: readNotifier = nullptr;
|————Node:assignment_expression Text: readNotifier = nullptr
|—————Node:identifier Text: readNotifier
|—————Node:= Text: =
|—————Node:null Text: nullptr
|——————Node:nullptr Text: nullptr
|————Node:; Text: ;
|———Node:expression_statement Text: delete writeNotifier;
|————Node:delete_expression Text: delete writeNotifier
|—————Node:delete Text: delete
|—————Node:identifier Text: writeNotifier
|————Node:; Text: ;
|———Node:expression_statement Text: writeNotifier = nullptr;
|————Node:assignment_expression Text: writeNotifier = nullptr
|—————Node:identifier Text: writeNotifier
|—————Node:= Text: =
|—————Node:null Text: nullptr
|——————Node:nullptr Text: nullptr
|————Node:; Text: ;
|———Node:declaration Text: quint32 value = 0;
|————Node:type_identifier Text: quint32
|————Node:init_declarator Text: value = 0
|—————Node:identifier Text: value
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: const TPCANStatus err = ::CAN_SetValue(channelIndex, PCAN_RECEIVE_EVENT, &value, sizeof(value));
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: TPCANStatus
|————Node:init_declarator Text: err = ::CAN_SetValue(channelIndex, PCAN_RECEIVE_EVENT, &value, sizeof(value))
|—————Node:identifier Text: err
|—————Node:= Text: =
|—————Node:call_expression Text: ::CAN_SetValue(channelIndex, PCAN_RECEIVE_EVENT, &value, sizeof(value))
|——————Node:qualified_identifier Text: ::CAN_SetValue
|———————Node::: Text: ::
|———————Node:identifier Text: CAN_SetValue
|——————Node:argument_list Text: (channelIndex, PCAN_RECEIVE_EVENT, &value, sizeof(value))
|———————Node:( Text: (
|———————Node:identifier Text: channelIndex
|———————Node:, Text: ,
|———————Node:identifier Text: PCAN_RECEIVE_EVENT
|———————Node:, Text: ,
|———————Node:pointer_expression Text: &value
|————————Node:& Text: &
|————————Node:identifier Text: value
|———————Node:, Text: ,
|———————Node:sizeof_expression Text: sizeof(value)
|————————Node:sizeof Text: sizeof
|————————Node:parenthesized_expression Text: (value)
|—————————Node:( Text: (
|—————————Node:identifier Text: value
|—————————Node:) Text: )
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(err != PCAN_ERROR_OK)) {
        const QString errorString = systemErrorString(err);
        qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot unregister receive event handler: %ls",
                   qUtf16Printable(errorString));
        q->setError(errorString, QCanBusDevice::ConnectionError);
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(err != PCAN_ERROR_OK))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(err != PCAN_ERROR_OK)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (err != PCAN_ERROR_OK)
|———————Node:( Text: (
|———————Node:binary_expression Text: err != PCAN_ERROR_OK
|————————Node:identifier Text: err
|————————Node:!= Text: !=
|————————Node:identifier Text: PCAN_ERROR_OK
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        const QString errorString = systemErrorString(err);
        qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot unregister receive event handler: %ls",
                   qUtf16Printable(errorString));
        q->setError(errorString, QCanBusDevice::ConnectionError);
    }
|—————Node:{ Text: {
|—————Node:declaration Text: const QString errorString = systemErrorString(err);
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:type_identifier Text: QString
|——————Node:init_declarator Text: errorString = systemErrorString(err)
|———————Node:identifier Text: errorString
|———————Node:= Text: =
|———————Node:call_expression Text: systemErrorString(err)
|————————Node:identifier Text: systemErrorString
|————————Node:argument_list Text: (err)
|—————————Node:( Text: (
|—————————Node:identifier Text: err
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot unregister receive event handler: %ls",
                   qUtf16Printable(errorString));
|——————Node:call_expression Text: qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot unregister receive event handler: %ls",
                   qUtf16Printable(errorString))
|———————Node:identifier Text: qCCritical
|———————Node:argument_list Text: (QT_CANBUS_PLUGINS_PEAKCAN, "Cannot unregister receive event handler: %ls",
                   qUtf16Printable(errorString))
|————————Node:( Text: (
|————————Node:identifier Text: QT_CANBUS_PLUGINS_PEAKCAN
|————————Node:, Text: ,
|————————Node:string_literal Text: "Cannot unregister receive event handler: %ls"
|—————————Node:" Text: "
|—————————Node:string_content Text: Cannot unregister receive event handler: %ls
|—————————Node:" Text: "
|————————Node:, Text: ,
|————————Node:call_expression Text: qUtf16Printable(errorString)
|—————————Node:identifier Text: qUtf16Printable
|—————————Node:argument_list Text: (errorString)
|——————————Node:( Text: (
|——————————Node:identifier Text: errorString
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: q->setError(errorString, QCanBusDevice::ConnectionError);
|——————Node:call_expression Text: q->setError(errorString, QCanBusDevice::ConnectionError)
|———————Node:field_expression Text: q->setError
|————————Node:identifier Text: q
|————————Node:-> Text: ->
|————————Node:field_identifier Text: setError
|———————Node:argument_list Text: (errorString, QCanBusDevice::ConnectionError)
|————————Node:( Text: (
|————————Node:identifier Text: errorString
|————————Node:, Text: ,
|————————Node:qualified_identifier Text: QCanBusDevice::ConnectionError
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:identifier Text: ConnectionError
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:declaration Text: const TPCANStatus st = ::CAN_Uninitialize(channelIndex);
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: TPCANStatus
|————Node:init_declarator Text: st = ::CAN_Uninitialize(channelIndex)
|—————Node:identifier Text: st
|—————Node:= Text: =
|—————Node:call_expression Text: ::CAN_Uninitialize(channelIndex)
|——————Node:qualified_identifier Text: ::CAN_Uninitialize
|———————Node::: Text: ::
|———————Node:identifier Text: CAN_Uninitialize
|——————Node:argument_list Text: (channelIndex)
|———————Node:( Text: (
|———————Node:identifier Text: channelIndex
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(st != PCAN_ERROR_OK))
        q->setError(systemErrorString(st), QCanBusDevice::ConnectionError);
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(st != PCAN_ERROR_OK))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(st != PCAN_ERROR_OK)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (st != PCAN_ERROR_OK)
|———————Node:( Text: (
|———————Node:binary_expression Text: st != PCAN_ERROR_OK
|————————Node:identifier Text: st
|————————Node:!= Text: !=
|————————Node:identifier Text: PCAN_ERROR_OK
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:expression_statement Text: q->setError(systemErrorString(st), QCanBusDevice::ConnectionError);
|—————Node:call_expression Text: q->setError(systemErrorString(st), QCanBusDevice::ConnectionError)
|——————Node:field_expression Text: q->setError
|———————Node:identifier Text: q
|———————Node:-> Text: ->
|———————Node:field_identifier Text: setError
|——————Node:argument_list Text: (systemErrorString(st), QCanBusDevice::ConnectionError)
|———————Node:( Text: (
|———————Node:call_expression Text: systemErrorString(st)
|————————Node:identifier Text: systemErrorString
|————————Node:argument_list Text: (st)
|—————————Node:( Text: (
|—————————Node:identifier Text: st
|—————————Node:) Text: )
|———————Node:, Text: ,
|———————Node:qualified_identifier Text: QCanBusDevice::ConnectionError
|————————Node:namespace_identifier Text: QCanBusDevice
|————————Node::: Text: ::
|————————Node:identifier Text: ConnectionError
|———————Node:) Text: )
|—————Node:; Text: ;
|———Node:preproc_if Text: #if defined(Q_OS_WIN32)
    if (readHandle && (readHandle != INVALID_HANDLE_VALUE)) {
        const QString errorString = qt_error_string(int(::GetLastError()));
        if (Q_UNLIKELY(!::CloseHandle(readHandle))) {
            qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot close read handle: %ls",
                       qUtf16Printable(errorString));
            q->setError(errorString, QCanBusDevice::ConnectionError);
        }
        readHandle = INVALID_HANDLE_VALUE;
    }
#else
    readHandle = -1;
#endif
|————Node:#if Text: #if
|————Node:preproc_defined Text: defined(Q_OS_WIN32)
|—————Node:defined Text: defined
|—————Node:( Text: (
|—————Node:identifier Text: Q_OS_WIN32
|—————Node:) Text: )
|————Node:
 Text: 

|————Node:if_statement Text: if (readHandle && (readHandle != INVALID_HANDLE_VALUE)) {
        const QString errorString = qt_error_string(int(::GetLastError()));
        if (Q_UNLIKELY(!::CloseHandle(readHandle))) {
            qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot close read handle: %ls",
                       qUtf16Printable(errorString));
            q->setError(errorString, QCanBusDevice::ConnectionError);
        }
        readHandle = INVALID_HANDLE_VALUE;
    }
|—————Node:if Text: if
|—————Node:condition_clause Text: (readHandle && (readHandle != INVALID_HANDLE_VALUE))
|——————Node:( Text: (
|——————Node:binary_expression Text: readHandle && (readHandle != INVALID_HANDLE_VALUE)
|———————Node:identifier Text: readHandle
|———————Node:&& Text: &&
|———————Node:parenthesized_expression Text: (readHandle != INVALID_HANDLE_VALUE)
|————————Node:( Text: (
|————————Node:binary_expression Text: readHandle != INVALID_HANDLE_VALUE
|—————————Node:identifier Text: readHandle
|—————————Node:!= Text: !=
|—————————Node:identifier Text: INVALID_HANDLE_VALUE
|————————Node:) Text: )
|——————Node:) Text: )
|—————Node:compound_statement Text: {
        const QString errorString = qt_error_string(int(::GetLastError()));
        if (Q_UNLIKELY(!::CloseHandle(readHandle))) {
            qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot close read handle: %ls",
                       qUtf16Printable(errorString));
            q->setError(errorString, QCanBusDevice::ConnectionError);
        }
        readHandle = INVALID_HANDLE_VALUE;
    }
|——————Node:{ Text: {
|——————Node:declaration Text: const QString errorString = qt_error_string(int(::GetLastError()));
|———————Node:type_qualifier Text: const
|————————Node:const Text: const
|———————Node:type_identifier Text: QString
|———————Node:init_declarator Text: errorString = qt_error_string(int(::GetLastError()))
|————————Node:identifier Text: errorString
|————————Node:= Text: =
|————————Node:call_expression Text: qt_error_string(int(::GetLastError()))
|—————————Node:identifier Text: qt_error_string
|—————————Node:argument_list Text: (int(::GetLastError()))
|——————————Node:( Text: (
|——————————Node:call_expression Text: int(::GetLastError())
|———————————Node:primitive_type Text: int
|———————————Node:argument_list Text: (::GetLastError())
|————————————Node:( Text: (
|————————————Node:call_expression Text: ::GetLastError()
|—————————————Node:qualified_identifier Text: ::GetLastError
|——————————————Node::: Text: ::
|——————————————Node:identifier Text: GetLastError
|—————————————Node:argument_list Text: ()
|——————————————Node:( Text: (
|——————————————Node:) Text: )
|————————————Node:) Text: )
|——————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:if_statement Text: if (Q_UNLIKELY(!::CloseHandle(readHandle))) {
            qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot close read handle: %ls",
                       qUtf16Printable(errorString));
            q->setError(errorString, QCanBusDevice::ConnectionError);
        }
|———————Node:if Text: if
|———————Node:condition_clause Text: (Q_UNLIKELY(!::CloseHandle(readHandle)))
|————————Node:( Text: (
|————————Node:call_expression Text: Q_UNLIKELY(!::CloseHandle(readHandle))
|—————————Node:identifier Text: Q_UNLIKELY
|—————————Node:argument_list Text: (!::CloseHandle(readHandle))
|——————————Node:( Text: (
|——————————Node:unary_expression Text: !::CloseHandle(readHandle)
|———————————Node:! Text: !
|———————————Node:call_expression Text: ::CloseHandle(readHandle)
|————————————Node:qualified_identifier Text: ::CloseHandle
|—————————————Node::: Text: ::
|—————————————Node:identifier Text: CloseHandle
|————————————Node:argument_list Text: (readHandle)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: readHandle
|—————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:) Text: )
|———————Node:compound_statement Text: {
            qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot close read handle: %ls",
                       qUtf16Printable(errorString));
            q->setError(errorString, QCanBusDevice::ConnectionError);
        }
|————————Node:{ Text: {
|————————Node:expression_statement Text: qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot close read handle: %ls",
                       qUtf16Printable(errorString));
|—————————Node:call_expression Text: qCCritical(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot close read handle: %ls",
                       qUtf16Printable(errorString))
|——————————Node:identifier Text: qCCritical
|——————————Node:argument_list Text: (QT_CANBUS_PLUGINS_PEAKCAN, "Cannot close read handle: %ls",
                       qUtf16Printable(errorString))
|———————————Node:( Text: (
|———————————Node:identifier Text: QT_CANBUS_PLUGINS_PEAKCAN
|———————————Node:, Text: ,
|———————————Node:string_literal Text: "Cannot close read handle: %ls"
|————————————Node:" Text: "
|————————————Node:string_content Text: Cannot close read handle: %ls
|————————————Node:" Text: "
|———————————Node:, Text: ,
|———————————Node:call_expression Text: qUtf16Printable(errorString)
|————————————Node:identifier Text: qUtf16Printable
|————————————Node:argument_list Text: (errorString)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: errorString
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: q->setError(errorString, QCanBusDevice::ConnectionError);
|—————————Node:call_expression Text: q->setError(errorString, QCanBusDevice::ConnectionError)
|——————————Node:field_expression Text: q->setError
|———————————Node:identifier Text: q
|———————————Node:-> Text: ->
|———————————Node:field_identifier Text: setError
|——————————Node:argument_list Text: (errorString, QCanBusDevice::ConnectionError)
|———————————Node:( Text: (
|———————————Node:identifier Text: errorString
|———————————Node:, Text: ,
|———————————Node:qualified_identifier Text: QCanBusDevice::ConnectionError
|————————————Node:namespace_identifier Text: QCanBusDevice
|————————————Node::: Text: ::
|————————————Node:identifier Text: ConnectionError
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:} Text: }
|——————Node:expression_statement Text: readHandle = INVALID_HANDLE_VALUE;
|———————Node:assignment_expression Text: readHandle = INVALID_HANDLE_VALUE
|————————Node:identifier Text: readHandle
|————————Node:= Text: =
|————————Node:identifier Text: INVALID_HANDLE_VALUE
|———————Node:; Text: ;
|——————Node:} Text: }
|————Node:preproc_else Text: #else
    readHandle = -1;
|—————Node:#else Text: #else
|—————Node:expression_statement Text: readHandle = -1;
|——————Node:assignment_expression Text: readHandle = -1
|———————Node:identifier Text: readHandle
|———————Node:= Text: =
|———————Node:number_literal Text: -1
|——————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: isOpen = false;
|————Node:assignment_expression Text: isOpen = false
|—————Node:identifier Text: isOpen
|—————Node:= Text: =
|—————Node:false Text: false
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: bool PeakCanBackendPrivate::setConfigurationParameter(QCanBusDevice::ConfigurationKey key,
                                                      const QVariant &value)
{
    Q_Q(PeakCanBackend);

    switch (key) {
    case QCanBusDevice::BitRateKey:
        return verifyBitRate(value.toInt());
    case QCanBusDevice::CanFdKey:
        isFlexibleDatarateEnabled = value.toBool();
        return true;
    case QCanBusDevice::DataBitRateKey: {
        const int dataBitrate = value.toInt();
        if (Q_UNLIKELY(dataBitrateString(dataBitrate).isEmpty())) {
            qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Unsupported data bitrate value: %d", dataBitrate);
            q->setError(PeakCanBackend::tr("Unsupported data bitrate value: %1.").arg(dataBitrate),
                        QCanBusDevice::ConfigurationError);
            return false;
        }
        return true;
    }
    default:
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Unsupported configuration key: %d", key);
        q->setError(PeakCanBackend::tr("Unsupported configuration key: %1").arg(key),
                    QCanBusDevice::ConfigurationError);
        return false;
    }
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: PeakCanBackendPrivate::setConfigurationParameter(QCanBusDevice::ConfigurationKey key,
                                                      const QVariant &value)
|———Node:qualified_identifier Text: PeakCanBackendPrivate::setConfigurationParameter
|————Node:namespace_identifier Text: PeakCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: setConfigurationParameter
|———Node:parameter_list Text: (QCanBusDevice::ConfigurationKey key,
                                                      const QVariant &value)
|————Node:( Text: (
|————Node:parameter_declaration Text: QCanBusDevice::ConfigurationKey key
|—————Node:qualified_identifier Text: QCanBusDevice::ConfigurationKey
|——————Node:namespace_identifier Text: QCanBusDevice
|——————Node::: Text: ::
|——————Node:type_identifier Text: ConfigurationKey
|—————Node:identifier Text: key
|————Node:, Text: ,
|————Node:parameter_declaration Text: const QVariant &value
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: QVariant
|—————Node:reference_declarator Text: &value
|——————Node:& Text: &
|——————Node:identifier Text: value
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(PeakCanBackend);

    switch (key) {
    case QCanBusDevice::BitRateKey:
        return verifyBitRate(value.toInt());
    case QCanBusDevice::CanFdKey:
        isFlexibleDatarateEnabled = value.toBool();
        return true;
    case QCanBusDevice::DataBitRateKey: {
        const int dataBitrate = value.toInt();
        if (Q_UNLIKELY(dataBitrateString(dataBitrate).isEmpty())) {
            qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Unsupported data bitrate value: %d", dataBitrate);
            q->setError(PeakCanBackend::tr("Unsupported data bitrate value: %1.").arg(dataBitrate),
                        QCanBusDevice::ConfigurationError);
            return false;
        }
        return true;
    }
    default:
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Unsupported configuration key: %d", key);
        q->setError(PeakCanBackend::tr("Unsupported configuration key: %1").arg(key),
                    QCanBusDevice::ConfigurationError);
        return false;
    }
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(PeakCanBackend);
|————Node:call_expression Text: Q_Q(PeakCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (PeakCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: PeakCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:switch_statement Text: switch (key) {
    case QCanBusDevice::BitRateKey:
        return verifyBitRate(value.toInt());
    case QCanBusDevice::CanFdKey:
        isFlexibleDatarateEnabled = value.toBool();
        return true;
    case QCanBusDevice::DataBitRateKey: {
        const int dataBitrate = value.toInt();
        if (Q_UNLIKELY(dataBitrateString(dataBitrate).isEmpty())) {
            qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Unsupported data bitrate value: %d", dataBitrate);
            q->setError(PeakCanBackend::tr("Unsupported data bitrate value: %1.").arg(dataBitrate),
                        QCanBusDevice::ConfigurationError);
            return false;
        }
        return true;
    }
    default:
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Unsupported configuration key: %d", key);
        q->setError(PeakCanBackend::tr("Unsupported configuration key: %1").arg(key),
                    QCanBusDevice::ConfigurationError);
        return false;
    }
|————Node:switch Text: switch
|————Node:condition_clause Text: (key)
|—————Node:( Text: (
|—————Node:identifier Text: key
|—————Node:) Text: )
|————Node:compound_statement Text: {
    case QCanBusDevice::BitRateKey:
        return verifyBitRate(value.toInt());
    case QCanBusDevice::CanFdKey:
        isFlexibleDatarateEnabled = value.toBool();
        return true;
    case QCanBusDevice::DataBitRateKey: {
        const int dataBitrate = value.toInt();
        if (Q_UNLIKELY(dataBitrateString(dataBitrate).isEmpty())) {
            qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Unsupported data bitrate value: %d", dataBitrate);
            q->setError(PeakCanBackend::tr("Unsupported data bitrate value: %1.").arg(dataBitrate),
                        QCanBusDevice::ConfigurationError);
            return false;
        }
        return true;
    }
    default:
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Unsupported configuration key: %d", key);
        q->setError(PeakCanBackend::tr("Unsupported configuration key: %1").arg(key),
                    QCanBusDevice::ConfigurationError);
        return false;
    }
|—————Node:{ Text: {
|—————Node:case_statement Text: case QCanBusDevice::BitRateKey:
        return verifyBitRate(value.toInt());
|——————Node:case Text: case
|——————Node:qualified_identifier Text: QCanBusDevice::BitRateKey
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: BitRateKey
|——————Node:: Text: :
|——————Node:return_statement Text: return verifyBitRate(value.toInt());
|———————Node:return Text: return
|———————Node:call_expression Text: verifyBitRate(value.toInt())
|————————Node:identifier Text: verifyBitRate
|————————Node:argument_list Text: (value.toInt())
|—————————Node:( Text: (
|—————————Node:call_expression Text: value.toInt()
|——————————Node:field_expression Text: value.toInt
|———————————Node:identifier Text: value
|———————————Node:. Text: .
|———————————Node:field_identifier Text: toInt
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case QCanBusDevice::CanFdKey:
        isFlexibleDatarateEnabled = value.toBool();
        return true;
|——————Node:case Text: case
|——————Node:qualified_identifier Text: QCanBusDevice::CanFdKey
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: CanFdKey
|——————Node:: Text: :
|——————Node:expression_statement Text: isFlexibleDatarateEnabled = value.toBool();
|———————Node:assignment_expression Text: isFlexibleDatarateEnabled = value.toBool()
|————————Node:identifier Text: isFlexibleDatarateEnabled
|————————Node:= Text: =
|————————Node:call_expression Text: value.toBool()
|—————————Node:field_expression Text: value.toBool
|——————————Node:identifier Text: value
|——————————Node:. Text: .
|——————————Node:field_identifier Text: toBool
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:return_statement Text: return true;
|———————Node:return Text: return
|———————Node:true Text: true
|———————Node:; Text: ;
|—————Node:case_statement Text: case QCanBusDevice::DataBitRateKey: {
        const int dataBitrate = value.toInt();
        if (Q_UNLIKELY(dataBitrateString(dataBitrate).isEmpty())) {
            qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Unsupported data bitrate value: %d", dataBitrate);
            q->setError(PeakCanBackend::tr("Unsupported data bitrate value: %1.").arg(dataBitrate),
                        QCanBusDevice::ConfigurationError);
            return false;
        }
        return true;
    }
|——————Node:case Text: case
|——————Node:qualified_identifier Text: QCanBusDevice::DataBitRateKey
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: DataBitRateKey
|——————Node:: Text: :
|——————Node:compound_statement Text: {
        const int dataBitrate = value.toInt();
        if (Q_UNLIKELY(dataBitrateString(dataBitrate).isEmpty())) {
            qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Unsupported data bitrate value: %d", dataBitrate);
            q->setError(PeakCanBackend::tr("Unsupported data bitrate value: %1.").arg(dataBitrate),
                        QCanBusDevice::ConfigurationError);
            return false;
        }
        return true;
    }
|———————Node:{ Text: {
|———————Node:declaration Text: const int dataBitrate = value.toInt();
|————————Node:type_qualifier Text: const
|—————————Node:const Text: const
|————————Node:primitive_type Text: int
|————————Node:init_declarator Text: dataBitrate = value.toInt()
|—————————Node:identifier Text: dataBitrate
|—————————Node:= Text: =
|—————————Node:call_expression Text: value.toInt()
|——————————Node:field_expression Text: value.toInt
|———————————Node:identifier Text: value
|———————————Node:. Text: .
|———————————Node:field_identifier Text: toInt
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:if_statement Text: if (Q_UNLIKELY(dataBitrateString(dataBitrate).isEmpty())) {
            qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Unsupported data bitrate value: %d", dataBitrate);
            q->setError(PeakCanBackend::tr("Unsupported data bitrate value: %1.").arg(dataBitrate),
                        QCanBusDevice::ConfigurationError);
            return false;
        }
|————————Node:if Text: if
|————————Node:condition_clause Text: (Q_UNLIKELY(dataBitrateString(dataBitrate).isEmpty()))
|—————————Node:( Text: (
|—————————Node:call_expression Text: Q_UNLIKELY(dataBitrateString(dataBitrate).isEmpty())
|——————————Node:identifier Text: Q_UNLIKELY
|——————————Node:argument_list Text: (dataBitrateString(dataBitrate).isEmpty())
|———————————Node:( Text: (
|———————————Node:call_expression Text: dataBitrateString(dataBitrate).isEmpty()
|————————————Node:field_expression Text: dataBitrateString(dataBitrate).isEmpty
|—————————————Node:call_expression Text: dataBitrateString(dataBitrate)
|——————————————Node:identifier Text: dataBitrateString
|——————————————Node:argument_list Text: (dataBitrate)
|———————————————Node:( Text: (
|———————————————Node:identifier Text: dataBitrate
|———————————————Node:) Text: )
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: isEmpty
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
            qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Unsupported data bitrate value: %d", dataBitrate);
            q->setError(PeakCanBackend::tr("Unsupported data bitrate value: %1.").arg(dataBitrate),
                        QCanBusDevice::ConfigurationError);
            return false;
        }
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Unsupported data bitrate value: %d", dataBitrate);
|——————————Node:call_expression Text: qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Unsupported data bitrate value: %d", dataBitrate)
|———————————Node:identifier Text: qCWarning
|———————————Node:argument_list Text: (QT_CANBUS_PLUGINS_PEAKCAN, "Unsupported data bitrate value: %d", dataBitrate)
|————————————Node:( Text: (
|————————————Node:identifier Text: QT_CANBUS_PLUGINS_PEAKCAN
|————————————Node:, Text: ,
|————————————Node:string_literal Text: "Unsupported data bitrate value: %d"
|—————————————Node:" Text: "
|—————————————Node:string_content Text: Unsupported data bitrate value: %d
|—————————————Node:" Text: "
|————————————Node:, Text: ,
|————————————Node:identifier Text: dataBitrate
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:expression_statement Text: q->setError(PeakCanBackend::tr("Unsupported data bitrate value: %1.").arg(dataBitrate),
                        QCanBusDevice::ConfigurationError);
|——————————Node:call_expression Text: q->setError(PeakCanBackend::tr("Unsupported data bitrate value: %1.").arg(dataBitrate),
                        QCanBusDevice::ConfigurationError)
|———————————Node:field_expression Text: q->setError
|————————————Node:identifier Text: q
|————————————Node:-> Text: ->
|————————————Node:field_identifier Text: setError
|———————————Node:argument_list Text: (PeakCanBackend::tr("Unsupported data bitrate value: %1.").arg(dataBitrate),
                        QCanBusDevice::ConfigurationError)
|————————————Node:( Text: (
|————————————Node:call_expression Text: PeakCanBackend::tr("Unsupported data bitrate value: %1.").arg(dataBitrate)
|—————————————Node:field_expression Text: PeakCanBackend::tr("Unsupported data bitrate value: %1.").arg
|——————————————Node:call_expression Text: PeakCanBackend::tr("Unsupported data bitrate value: %1.")
|———————————————Node:qualified_identifier Text: PeakCanBackend::tr
|————————————————Node:namespace_identifier Text: PeakCanBackend
|————————————————Node::: Text: ::
|————————————————Node:identifier Text: tr
|———————————————Node:argument_list Text: ("Unsupported data bitrate value: %1.")
|————————————————Node:( Text: (
|————————————————Node:string_literal Text: "Unsupported data bitrate value: %1."
|—————————————————Node:" Text: "
|—————————————————Node:string_content Text: Unsupported data bitrate value: %1.
|—————————————————Node:" Text: "
|————————————————Node:) Text: )
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: arg
|—————————————Node:argument_list Text: (dataBitrate)
|——————————————Node:( Text: (
|——————————————Node:identifier Text: dataBitrate
|——————————————Node:) Text: )
|————————————Node:, Text: ,
|————————————Node:qualified_identifier Text: QCanBusDevice::ConfigurationError
|—————————————Node:namespace_identifier Text: QCanBusDevice
|—————————————Node::: Text: ::
|—————————————Node:identifier Text: ConfigurationError
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:return_statement Text: return false;
|——————————Node:return Text: return
|——————————Node:false Text: false
|——————————Node:; Text: ;
|—————————Node:} Text: }
|———————Node:return_statement Text: return true;
|————————Node:return Text: return
|————————Node:true Text: true
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:case_statement Text: default:
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Unsupported configuration key: %d", key);
        q->setError(PeakCanBackend::tr("Unsupported configuration key: %1").arg(key),
                    QCanBusDevice::ConfigurationError);
        return false;
|——————Node:default Text: default
|——————Node:: Text: :
|——————Node:expression_statement Text: qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Unsupported configuration key: %d", key);
|———————Node:call_expression Text: qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Unsupported configuration key: %d", key)
|————————Node:identifier Text: qCWarning
|————————Node:argument_list Text: (QT_CANBUS_PLUGINS_PEAKCAN, "Unsupported configuration key: %d", key)
|—————————Node:( Text: (
|—————————Node:identifier Text: QT_CANBUS_PLUGINS_PEAKCAN
|—————————Node:, Text: ,
|—————————Node:string_literal Text: "Unsupported configuration key: %d"
|——————————Node:" Text: "
|——————————Node:string_content Text: Unsupported configuration key: %d
|——————————Node:" Text: "
|—————————Node:, Text: ,
|—————————Node:identifier Text: key
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: q->setError(PeakCanBackend::tr("Unsupported configuration key: %1").arg(key),
                    QCanBusDevice::ConfigurationError);
|———————Node:call_expression Text: q->setError(PeakCanBackend::tr("Unsupported configuration key: %1").arg(key),
                    QCanBusDevice::ConfigurationError)
|————————Node:field_expression Text: q->setError
|—————————Node:identifier Text: q
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: setError
|————————Node:argument_list Text: (PeakCanBackend::tr("Unsupported configuration key: %1").arg(key),
                    QCanBusDevice::ConfigurationError)
|—————————Node:( Text: (
|—————————Node:call_expression Text: PeakCanBackend::tr("Unsupported configuration key: %1").arg(key)
|——————————Node:field_expression Text: PeakCanBackend::tr("Unsupported configuration key: %1").arg
|———————————Node:call_expression Text: PeakCanBackend::tr("Unsupported configuration key: %1")
|————————————Node:qualified_identifier Text: PeakCanBackend::tr
|—————————————Node:namespace_identifier Text: PeakCanBackend
|—————————————Node::: Text: ::
|—————————————Node:identifier Text: tr
|————————————Node:argument_list Text: ("Unsupported configuration key: %1")
|—————————————Node:( Text: (
|—————————————Node:string_literal Text: "Unsupported configuration key: %1"
|——————————————Node:" Text: "
|——————————————Node:string_content Text: Unsupported configuration key: %1
|——————————————Node:" Text: "
|—————————————Node:) Text: )
|———————————Node:. Text: .
|———————————Node:field_identifier Text: arg
|——————————Node:argument_list Text: (key)
|———————————Node:( Text: (
|———————————Node:identifier Text: key
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:qualified_identifier Text: QCanBusDevice::ConfigurationError
|——————————Node:namespace_identifier Text: QCanBusDevice
|——————————Node::: Text: ::
|——————————Node:identifier Text: ConfigurationError
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:return_statement Text: return false;
|———————Node:return Text: return
|———————Node:false Text: false
|———————Node:; Text: ;
|—————Node:} Text: }
|———Node:} Text: }
|—Node:function_definition Text: void PeakCanBackendPrivate::setupChannel(const QByteArray &interfaceName)
{
    const PcanChannel *chn = pcanChannels;
    while (chn->index != PCAN_NONEBUS && chn->name != interfaceName)
        ++chn;
    channelIndex = chn->index;
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: PeakCanBackendPrivate::setupChannel(const QByteArray &interfaceName)
|———Node:qualified_identifier Text: PeakCanBackendPrivate::setupChannel
|————Node:namespace_identifier Text: PeakCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: setupChannel
|———Node:parameter_list Text: (const QByteArray &interfaceName)
|————Node:( Text: (
|————Node:parameter_declaration Text: const QByteArray &interfaceName
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: QByteArray
|—————Node:reference_declarator Text: &interfaceName
|——————Node:& Text: &
|——————Node:identifier Text: interfaceName
|————Node:) Text: )
|——Node:compound_statement Text: {
    const PcanChannel *chn = pcanChannels;
    while (chn->index != PCAN_NONEBUS && chn->name != interfaceName)
        ++chn;
    channelIndex = chn->index;
}
|———Node:{ Text: {
|———Node:declaration Text: const PcanChannel *chn = pcanChannels;
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: PcanChannel
|————Node:init_declarator Text: *chn = pcanChannels
|—————Node:pointer_declarator Text: *chn
|——————Node:* Text: *
|——————Node:identifier Text: chn
|—————Node:= Text: =
|—————Node:identifier Text: pcanChannels
|————Node:; Text: ;
|———Node:while_statement Text: while (chn->index != PCAN_NONEBUS && chn->name != interfaceName)
        ++chn;
|————Node:while Text: while
|————Node:condition_clause Text: (chn->index != PCAN_NONEBUS && chn->name != interfaceName)
|—————Node:( Text: (
|—————Node:binary_expression Text: chn->index != PCAN_NONEBUS && chn->name != interfaceName
|——————Node:binary_expression Text: chn->index != PCAN_NONEBUS
|———————Node:field_expression Text: chn->index
|————————Node:identifier Text: chn
|————————Node:-> Text: ->
|————————Node:field_identifier Text: index
|———————Node:!= Text: !=
|———————Node:identifier Text: PCAN_NONEBUS
|——————Node:&& Text: &&
|——————Node:binary_expression Text: chn->name != interfaceName
|———————Node:field_expression Text: chn->name
|————————Node:identifier Text: chn
|————————Node:-> Text: ->
|————————Node:field_identifier Text: name
|———————Node:!= Text: !=
|———————Node:identifier Text: interfaceName
|—————Node:) Text: )
|————Node:expression_statement Text: ++chn;
|—————Node:update_expression Text: ++chn
|——————Node:++ Text: ++
|——————Node:identifier Text: chn
|—————Node:; Text: ;
|———Node:expression_statement Text: channelIndex = chn->index;
|————Node:assignment_expression Text: channelIndex = chn->index
|—————Node:identifier Text: channelIndex
|—————Node:= Text: =
|—————Node:field_expression Text: chn->index
|——————Node:identifier Text: chn
|——————Node:-> Text: ->
|——————Node:field_identifier Text: index
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: void PeakCanBackendPrivate::setupDefaultConfigurations()
{
    Q_Q(PeakCanBackend);

    q->setConfigurationParameter(QCanBusDevice::BitRateKey, 500000);
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: PeakCanBackendPrivate::setupDefaultConfigurations()
|———Node:qualified_identifier Text: PeakCanBackendPrivate::setupDefaultConfigurations
|————Node:namespace_identifier Text: PeakCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: setupDefaultConfigurations
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(PeakCanBackend);

    q->setConfigurationParameter(QCanBusDevice::BitRateKey, 500000);
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(PeakCanBackend);
|————Node:call_expression Text: Q_Q(PeakCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (PeakCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: PeakCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: q->setConfigurationParameter(QCanBusDevice::BitRateKey, 500000);
|————Node:call_expression Text: q->setConfigurationParameter(QCanBusDevice::BitRateKey, 500000)
|—————Node:field_expression Text: q->setConfigurationParameter
|——————Node:identifier Text: q
|——————Node:-> Text: ->
|——————Node:field_identifier Text: setConfigurationParameter
|—————Node:argument_list Text: (QCanBusDevice::BitRateKey, 500000)
|——————Node:( Text: (
|——————Node:qualified_identifier Text: QCanBusDevice::BitRateKey
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: BitRateKey
|——————Node:, Text: ,
|——————Node:number_literal Text: 500000
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: QString PeakCanBackendPrivate::systemErrorString(TPCANStatus errorCode)
{
    QByteArray buffer(256, 0);
    if (Q_UNLIKELY(::CAN_GetErrorText(errorCode, 0, buffer.data()) != PCAN_ERROR_OK))
        return PeakCanBackend::tr("Unable to retrieve an error string");
    return QString::fromLatin1(buffer);
}
|——Node:type_identifier Text: QString
|——Node:function_declarator Text: PeakCanBackendPrivate::systemErrorString(TPCANStatus errorCode)
|———Node:qualified_identifier Text: PeakCanBackendPrivate::systemErrorString
|————Node:namespace_identifier Text: PeakCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: systemErrorString
|———Node:parameter_list Text: (TPCANStatus errorCode)
|————Node:( Text: (
|————Node:parameter_declaration Text: TPCANStatus errorCode
|—————Node:type_identifier Text: TPCANStatus
|—————Node:identifier Text: errorCode
|————Node:) Text: )
|——Node:compound_statement Text: {
    QByteArray buffer(256, 0);
    if (Q_UNLIKELY(::CAN_GetErrorText(errorCode, 0, buffer.data()) != PCAN_ERROR_OK))
        return PeakCanBackend::tr("Unable to retrieve an error string");
    return QString::fromLatin1(buffer);
}
|———Node:{ Text: {
|———Node:declaration Text: QByteArray buffer(256, 0);
|————Node:type_identifier Text: QByteArray
|————Node:init_declarator Text: buffer(256, 0)
|—————Node:identifier Text: buffer
|—————Node:argument_list Text: (256, 0)
|——————Node:( Text: (
|——————Node:number_literal Text: 256
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(::CAN_GetErrorText(errorCode, 0, buffer.data()) != PCAN_ERROR_OK))
        return PeakCanBackend::tr("Unable to retrieve an error string");
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(::CAN_GetErrorText(errorCode, 0, buffer.data()) != PCAN_ERROR_OK))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(::CAN_GetErrorText(errorCode, 0, buffer.data()) != PCAN_ERROR_OK)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (::CAN_GetErrorText(errorCode, 0, buffer.data()) != PCAN_ERROR_OK)
|———————Node:( Text: (
|———————Node:binary_expression Text: ::CAN_GetErrorText(errorCode, 0, buffer.data()) != PCAN_ERROR_OK
|————————Node:call_expression Text: ::CAN_GetErrorText(errorCode, 0, buffer.data())
|—————————Node:qualified_identifier Text: ::CAN_GetErrorText
|——————————Node::: Text: ::
|——————————Node:identifier Text: CAN_GetErrorText
|—————————Node:argument_list Text: (errorCode, 0, buffer.data())
|——————————Node:( Text: (
|——————————Node:identifier Text: errorCode
|——————————Node:, Text: ,
|——————————Node:number_literal Text: 0
|——————————Node:, Text: ,
|——————————Node:call_expression Text: buffer.data()
|———————————Node:field_expression Text: buffer.data
|————————————Node:identifier Text: buffer
|————————————Node:. Text: .
|————————————Node:field_identifier Text: data
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:!= Text: !=
|————————Node:identifier Text: PCAN_ERROR_OK
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:return_statement Text: return PeakCanBackend::tr("Unable to retrieve an error string");
|—————Node:return Text: return
|—————Node:call_expression Text: PeakCanBackend::tr("Unable to retrieve an error string")
|——————Node:qualified_identifier Text: PeakCanBackend::tr
|———————Node:namespace_identifier Text: PeakCanBackend
|———————Node::: Text: ::
|———————Node:identifier Text: tr
|——————Node:argument_list Text: ("Unable to retrieve an error string")
|———————Node:( Text: (
|———————Node:string_literal Text: "Unable to retrieve an error string"
|————————Node:" Text: "
|————————Node:string_content Text: Unable to retrieve an error string
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|———Node:return_statement Text: return QString::fromLatin1(buffer);
|————Node:return Text: return
|————Node:call_expression Text: QString::fromLatin1(buffer)
|—————Node:qualified_identifier Text: QString::fromLatin1
|——————Node:namespace_identifier Text: QString
|——————Node::: Text: ::
|——————Node:identifier Text: fromLatin1
|—————Node:argument_list Text: (buffer)
|——————Node:( Text: (
|——————Node:identifier Text: buffer
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:enum_specifier Text: enum CanFrameDlc {
    Dlc00 =  0,
    Dlc01 =  1,
    Dlc02 =  2,
    Dlc03 =  3,
    Dlc04 =  4,
    Dlc05 =  5,
    Dlc06 =  6,
    Dlc07 =  7,
    Dlc08 =  8,
    Dlc12 =  9,
    Dlc16 = 10,
    Dlc20 = 11,
    Dlc24 = 12,
    Dlc32 = 13,
    Dlc48 = 14,
    Dlc64 = 15
}
|——Node:enum Text: enum
|——Node:type_identifier Text: CanFrameDlc
|——Node:enumerator_list Text: {
    Dlc00 =  0,
    Dlc01 =  1,
    Dlc02 =  2,
    Dlc03 =  3,
    Dlc04 =  4,
    Dlc05 =  5,
    Dlc06 =  6,
    Dlc07 =  7,
    Dlc08 =  8,
    Dlc12 =  9,
    Dlc16 = 10,
    Dlc20 = 11,
    Dlc24 = 12,
    Dlc32 = 13,
    Dlc48 = 14,
    Dlc64 = 15
}
|———Node:{ Text: {
|———Node:enumerator Text: Dlc00 =  0
|————Node:identifier Text: Dlc00
|————Node:= Text: =
|————Node:number_literal Text: 0
|———Node:, Text: ,
|———Node:enumerator Text: Dlc01 =  1
|————Node:identifier Text: Dlc01
|————Node:= Text: =
|————Node:number_literal Text: 1
|———Node:, Text: ,
|———Node:enumerator Text: Dlc02 =  2
|————Node:identifier Text: Dlc02
|————Node:= Text: =
|————Node:number_literal Text: 2
|———Node:, Text: ,
|———Node:enumerator Text: Dlc03 =  3
|————Node:identifier Text: Dlc03
|————Node:= Text: =
|————Node:number_literal Text: 3
|———Node:, Text: ,
|———Node:enumerator Text: Dlc04 =  4
|————Node:identifier Text: Dlc04
|————Node:= Text: =
|————Node:number_literal Text: 4
|———Node:, Text: ,
|———Node:enumerator Text: Dlc05 =  5
|————Node:identifier Text: Dlc05
|————Node:= Text: =
|————Node:number_literal Text: 5
|———Node:, Text: ,
|———Node:enumerator Text: Dlc06 =  6
|————Node:identifier Text: Dlc06
|————Node:= Text: =
|————Node:number_literal Text: 6
|———Node:, Text: ,
|———Node:enumerator Text: Dlc07 =  7
|————Node:identifier Text: Dlc07
|————Node:= Text: =
|————Node:number_literal Text: 7
|———Node:, Text: ,
|———Node:enumerator Text: Dlc08 =  8
|————Node:identifier Text: Dlc08
|————Node:= Text: =
|————Node:number_literal Text: 8
|———Node:, Text: ,
|———Node:enumerator Text: Dlc12 =  9
|————Node:identifier Text: Dlc12
|————Node:= Text: =
|————Node:number_literal Text: 9
|———Node:, Text: ,
|———Node:enumerator Text: Dlc16 = 10
|————Node:identifier Text: Dlc16
|————Node:= Text: =
|————Node:number_literal Text: 10
|———Node:, Text: ,
|———Node:enumerator Text: Dlc20 = 11
|————Node:identifier Text: Dlc20
|————Node:= Text: =
|————Node:number_literal Text: 11
|———Node:, Text: ,
|———Node:enumerator Text: Dlc24 = 12
|————Node:identifier Text: Dlc24
|————Node:= Text: =
|————Node:number_literal Text: 12
|———Node:, Text: ,
|———Node:enumerator Text: Dlc32 = 13
|————Node:identifier Text: Dlc32
|————Node:= Text: =
|————Node:number_literal Text: 13
|———Node:, Text: ,
|———Node:enumerator Text: Dlc48 = 14
|————Node:identifier Text: Dlc48
|————Node:= Text: =
|————Node:number_literal Text: 14
|———Node:, Text: ,
|———Node:enumerator Text: Dlc64 = 15
|————Node:identifier Text: Dlc64
|————Node:= Text: =
|————Node:number_literal Text: 15
|———Node:} Text: }
|—Node:; Text: ;
|—Node:function_definition Text: static CanFrameDlc sizeToDlc(int size)
{
    switch (size) {
    case 12:
        return Dlc12;
    case 16:
        return Dlc16;
    case 20:
        return Dlc20;
    case 24:
        return Dlc24;
    case 32:
        return Dlc32;
    case 48:
        return Dlc48;
    case 64:
        return Dlc64;
    default:
        if (size >= 0 && size <= 8)
            return static_cast<CanFrameDlc>(size);

        return Dlc00;
    }
}
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_identifier Text: CanFrameDlc
|——Node:function_declarator Text: sizeToDlc(int size)
|———Node:identifier Text: sizeToDlc
|———Node:parameter_list Text: (int size)
|————Node:( Text: (
|————Node:parameter_declaration Text: int size
|—————Node:primitive_type Text: int
|—————Node:identifier Text: size
|————Node:) Text: )
|——Node:compound_statement Text: {
    switch (size) {
    case 12:
        return Dlc12;
    case 16:
        return Dlc16;
    case 20:
        return Dlc20;
    case 24:
        return Dlc24;
    case 32:
        return Dlc32;
    case 48:
        return Dlc48;
    case 64:
        return Dlc64;
    default:
        if (size >= 0 && size <= 8)
            return static_cast<CanFrameDlc>(size);

        return Dlc00;
    }
}
|———Node:{ Text: {
|———Node:switch_statement Text: switch (size) {
    case 12:
        return Dlc12;
    case 16:
        return Dlc16;
    case 20:
        return Dlc20;
    case 24:
        return Dlc24;
    case 32:
        return Dlc32;
    case 48:
        return Dlc48;
    case 64:
        return Dlc64;
    default:
        if (size >= 0 && size <= 8)
            return static_cast<CanFrameDlc>(size);

        return Dlc00;
    }
|————Node:switch Text: switch
|————Node:condition_clause Text: (size)
|—————Node:( Text: (
|—————Node:identifier Text: size
|—————Node:) Text: )
|————Node:compound_statement Text: {
    case 12:
        return Dlc12;
    case 16:
        return Dlc16;
    case 20:
        return Dlc20;
    case 24:
        return Dlc24;
    case 32:
        return Dlc32;
    case 48:
        return Dlc48;
    case 64:
        return Dlc64;
    default:
        if (size >= 0 && size <= 8)
            return static_cast<CanFrameDlc>(size);

        return Dlc00;
    }
|—————Node:{ Text: {
|—————Node:case_statement Text: case 12:
        return Dlc12;
|——————Node:case Text: case
|——————Node:number_literal Text: 12
|——————Node:: Text: :
|——————Node:return_statement Text: return Dlc12;
|———————Node:return Text: return
|———————Node:identifier Text: Dlc12
|———————Node:; Text: ;
|—————Node:case_statement Text: case 16:
        return Dlc16;
|——————Node:case Text: case
|——————Node:number_literal Text: 16
|——————Node:: Text: :
|——————Node:return_statement Text: return Dlc16;
|———————Node:return Text: return
|———————Node:identifier Text: Dlc16
|———————Node:; Text: ;
|—————Node:case_statement Text: case 20:
        return Dlc20;
|——————Node:case Text: case
|——————Node:number_literal Text: 20
|——————Node:: Text: :
|——————Node:return_statement Text: return Dlc20;
|———————Node:return Text: return
|———————Node:identifier Text: Dlc20
|———————Node:; Text: ;
|—————Node:case_statement Text: case 24:
        return Dlc24;
|——————Node:case Text: case
|——————Node:number_literal Text: 24
|——————Node:: Text: :
|——————Node:return_statement Text: return Dlc24;
|———————Node:return Text: return
|———————Node:identifier Text: Dlc24
|———————Node:; Text: ;
|—————Node:case_statement Text: case 32:
        return Dlc32;
|——————Node:case Text: case
|——————Node:number_literal Text: 32
|——————Node:: Text: :
|——————Node:return_statement Text: return Dlc32;
|———————Node:return Text: return
|———————Node:identifier Text: Dlc32
|———————Node:; Text: ;
|—————Node:case_statement Text: case 48:
        return Dlc48;
|——————Node:case Text: case
|——————Node:number_literal Text: 48
|——————Node:: Text: :
|——————Node:return_statement Text: return Dlc48;
|———————Node:return Text: return
|———————Node:identifier Text: Dlc48
|———————Node:; Text: ;
|—————Node:case_statement Text: case 64:
        return Dlc64;
|——————Node:case Text: case
|——————Node:number_literal Text: 64
|——————Node:: Text: :
|——————Node:return_statement Text: return Dlc64;
|———————Node:return Text: return
|———————Node:identifier Text: Dlc64
|———————Node:; Text: ;
|—————Node:case_statement Text: default:
        if (size >= 0 && size <= 8)
            return static_cast<CanFrameDlc>(size);

        return Dlc00;
|——————Node:default Text: default
|——————Node:: Text: :
|——————Node:if_statement Text: if (size >= 0 && size <= 8)
            return static_cast<CanFrameDlc>(size);
|———————Node:if Text: if
|———————Node:condition_clause Text: (size >= 0 && size <= 8)
|————————Node:( Text: (
|————————Node:binary_expression Text: size >= 0 && size <= 8
|—————————Node:binary_expression Text: size >= 0
|——————————Node:identifier Text: size
|——————————Node:>= Text: >=
|——————————Node:number_literal Text: 0
|—————————Node:&& Text: &&
|—————————Node:binary_expression Text: size <= 8
|——————————Node:identifier Text: size
|——————————Node:<= Text: <=
|——————————Node:number_literal Text: 8
|————————Node:) Text: )
|———————Node:return_statement Text: return static_cast<CanFrameDlc>(size);
|————————Node:return Text: return
|————————Node:call_expression Text: static_cast<CanFrameDlc>(size)
|—————————Node:template_function Text: static_cast<CanFrameDlc>
|——————————Node:identifier Text: static_cast
|——————————Node:template_argument_list Text: <CanFrameDlc>
|———————————Node:< Text: <
|———————————Node:type_descriptor Text: CanFrameDlc
|————————————Node:type_identifier Text: CanFrameDlc
|———————————Node:> Text: >
|—————————Node:argument_list Text: (size)
|——————————Node:( Text: (
|——————————Node:identifier Text: size
|——————————Node:) Text: )
|————————Node:; Text: ;
|——————Node:return_statement Text: return Dlc00;
|———————Node:return Text: return
|———————Node:identifier Text: Dlc00
|———————Node:; Text: ;
|—————Node:} Text: }
|———Node:} Text: }
|—Node:function_definition Text: static int dlcToSize(CanFrameDlc dlc)
{
    switch (dlc) {
    case Dlc00:
    case Dlc01:
    case Dlc02:
    case Dlc03:
    case Dlc04:
    case Dlc05:
    case Dlc06:
    case Dlc07:
    case Dlc08:
        return static_cast<int>(dlc);
    case Dlc12:
        return 12;
    case Dlc16:
        return 16;
    case Dlc20:
        return 20;
    case Dlc24:
        return 24;
    case Dlc32:
        return 32;
    case Dlc48:
        return 48;
    case Dlc64:
        return 64;
    }
    return 0;
}
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:primitive_type Text: int
|——Node:function_declarator Text: dlcToSize(CanFrameDlc dlc)
|———Node:identifier Text: dlcToSize
|———Node:parameter_list Text: (CanFrameDlc dlc)
|————Node:( Text: (
|————Node:parameter_declaration Text: CanFrameDlc dlc
|—————Node:type_identifier Text: CanFrameDlc
|—————Node:identifier Text: dlc
|————Node:) Text: )
|——Node:compound_statement Text: {
    switch (dlc) {
    case Dlc00:
    case Dlc01:
    case Dlc02:
    case Dlc03:
    case Dlc04:
    case Dlc05:
    case Dlc06:
    case Dlc07:
    case Dlc08:
        return static_cast<int>(dlc);
    case Dlc12:
        return 12;
    case Dlc16:
        return 16;
    case Dlc20:
        return 20;
    case Dlc24:
        return 24;
    case Dlc32:
        return 32;
    case Dlc48:
        return 48;
    case Dlc64:
        return 64;
    }
    return 0;
}
|———Node:{ Text: {
|———Node:switch_statement Text: switch (dlc) {
    case Dlc00:
    case Dlc01:
    case Dlc02:
    case Dlc03:
    case Dlc04:
    case Dlc05:
    case Dlc06:
    case Dlc07:
    case Dlc08:
        return static_cast<int>(dlc);
    case Dlc12:
        return 12;
    case Dlc16:
        return 16;
    case Dlc20:
        return 20;
    case Dlc24:
        return 24;
    case Dlc32:
        return 32;
    case Dlc48:
        return 48;
    case Dlc64:
        return 64;
    }
|————Node:switch Text: switch
|————Node:condition_clause Text: (dlc)
|—————Node:( Text: (
|—————Node:identifier Text: dlc
|—————Node:) Text: )
|————Node:compound_statement Text: {
    case Dlc00:
    case Dlc01:
    case Dlc02:
    case Dlc03:
    case Dlc04:
    case Dlc05:
    case Dlc06:
    case Dlc07:
    case Dlc08:
        return static_cast<int>(dlc);
    case Dlc12:
        return 12;
    case Dlc16:
        return 16;
    case Dlc20:
        return 20;
    case Dlc24:
        return 24;
    case Dlc32:
        return 32;
    case Dlc48:
        return 48;
    case Dlc64:
        return 64;
    }
|—————Node:{ Text: {
|—————Node:case_statement Text: case Dlc00:
|——————Node:case Text: case
|——————Node:identifier Text: Dlc00
|——————Node:: Text: :
|—————Node:case_statement Text: case Dlc01:
|——————Node:case Text: case
|——————Node:identifier Text: Dlc01
|——————Node:: Text: :
|—————Node:case_statement Text: case Dlc02:
|——————Node:case Text: case
|——————Node:identifier Text: Dlc02
|——————Node:: Text: :
|—————Node:case_statement Text: case Dlc03:
|——————Node:case Text: case
|——————Node:identifier Text: Dlc03
|——————Node:: Text: :
|—————Node:case_statement Text: case Dlc04:
|——————Node:case Text: case
|——————Node:identifier Text: Dlc04
|——————Node:: Text: :
|—————Node:case_statement Text: case Dlc05:
|——————Node:case Text: case
|——————Node:identifier Text: Dlc05
|——————Node:: Text: :
|—————Node:case_statement Text: case Dlc06:
|——————Node:case Text: case
|——————Node:identifier Text: Dlc06
|——————Node:: Text: :
|—————Node:case_statement Text: case Dlc07:
|——————Node:case Text: case
|——————Node:identifier Text: Dlc07
|——————Node:: Text: :
|—————Node:case_statement Text: case Dlc08:
        return static_cast<int>(dlc);
|——————Node:case Text: case
|——————Node:identifier Text: Dlc08
|——————Node:: Text: :
|——————Node:return_statement Text: return static_cast<int>(dlc);
|———————Node:return Text: return
|———————Node:call_expression Text: static_cast<int>(dlc)
|————————Node:template_function Text: static_cast<int>
|—————————Node:identifier Text: static_cast
|—————————Node:template_argument_list Text: <int>
|——————————Node:< Text: <
|——————————Node:type_descriptor Text: int
|———————————Node:primitive_type Text: int
|——————————Node:> Text: >
|————————Node:argument_list Text: (dlc)
|—————————Node:( Text: (
|—————————Node:identifier Text: dlc
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case Dlc12:
        return 12;
|——————Node:case Text: case
|——————Node:identifier Text: Dlc12
|——————Node:: Text: :
|——————Node:return_statement Text: return 12;
|———————Node:return Text: return
|———————Node:number_literal Text: 12
|———————Node:; Text: ;
|—————Node:case_statement Text: case Dlc16:
        return 16;
|——————Node:case Text: case
|——————Node:identifier Text: Dlc16
|——————Node:: Text: :
|——————Node:return_statement Text: return 16;
|———————Node:return Text: return
|———————Node:number_literal Text: 16
|———————Node:; Text: ;
|—————Node:case_statement Text: case Dlc20:
        return 20;
|——————Node:case Text: case
|——————Node:identifier Text: Dlc20
|——————Node:: Text: :
|——————Node:return_statement Text: return 20;
|———————Node:return Text: return
|———————Node:number_literal Text: 20
|———————Node:; Text: ;
|—————Node:case_statement Text: case Dlc24:
        return 24;
|——————Node:case Text: case
|——————Node:identifier Text: Dlc24
|——————Node:: Text: :
|——————Node:return_statement Text: return 24;
|———————Node:return Text: return
|———————Node:number_literal Text: 24
|———————Node:; Text: ;
|—————Node:case_statement Text: case Dlc32:
        return 32;
|——————Node:case Text: case
|——————Node:identifier Text: Dlc32
|——————Node:: Text: :
|——————Node:return_statement Text: return 32;
|———————Node:return Text: return
|———————Node:number_literal Text: 32
|———————Node:; Text: ;
|—————Node:case_statement Text: case Dlc48:
        return 48;
|——————Node:case Text: case
|——————Node:identifier Text: Dlc48
|——————Node:: Text: :
|——————Node:return_statement Text: return 48;
|———————Node:return Text: return
|———————Node:number_literal Text: 48
|———————Node:; Text: ;
|—————Node:case_statement Text: case Dlc64:
        return 64;
|——————Node:case Text: case
|——————Node:identifier Text: Dlc64
|——————Node:: Text: :
|——————Node:return_statement Text: return 64;
|———————Node:return Text: return
|———————Node:number_literal Text: 64
|———————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return 0;
|————Node:return Text: return
|————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void PeakCanBackendPrivate::startWrite()
{
    Q_Q(PeakCanBackend);

    if (!q->hasOutgoingFrames()) {
        writeNotifier->stop();
        return;
    }

    const QCanBusFrame frame = q->dequeueOutgoingFrame();
    const QByteArray payload = frame.payload();
    const qsizetype payloadSize = payload.size();
    TPCANStatus st = PCAN_ERROR_OK;

    if (isFlexibleDatarateEnabled) {
        TPCANMsgFD message = {};
        message.ID = frame.frameId();
        message.DLC = sizeToDlc(payloadSize);
        message.MSGTYPE = frame.hasExtendedFrameFormat() ? PCAN_MESSAGE_EXTENDED
                                                         : PCAN_MESSAGE_STANDARD;

        if (frame.hasFlexibleDataRateFormat())
            message.MSGTYPE |= PCAN_MESSAGE_FD;
        if (frame.hasBitrateSwitch())
            message.MSGTYPE |= PCAN_MESSAGE_BRS;

        if (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
            message.MSGTYPE |= PCAN_MESSAGE_RTR; // we do not care about the payload
        else
            ::memcpy(message.DATA, payload.constData(), payloadSize);
        st = ::CAN_WriteFD(channelIndex, &message);
    } else if (frame.hasFlexibleDataRateFormat()) {
        const char errorString[] = "Cannot send CAN FD frame format as CAN FD is not enabled.";
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN(), errorString);
        q->setError(PeakCanBackend::tr(errorString), QCanBusDevice::WriteError);
    } else {
        TPCANMsg message = {};
        message.ID = frame.frameId();
        message.LEN = static_cast<quint8>(payloadSize);
        message.MSGTYPE = frame.hasExtendedFrameFormat() ? PCAN_MESSAGE_EXTENDED
                                                         : PCAN_MESSAGE_STANDARD;

        if (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
            message.MSGTYPE |= PCAN_MESSAGE_RTR; // we do not care about the payload
        else
            ::memcpy(message.DATA, payload.constData(), payloadSize);
        st = ::CAN_Write(channelIndex, &message);
    }

    if (Q_UNLIKELY(st != PCAN_ERROR_OK)) {
        const QString errorString = systemErrorString(st);
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot write frame: %ls",
                  qUtf16Printable(errorString));
        q->setError(errorString, QCanBusDevice::WriteError);
    } else {
        emit q->framesWritten(qint64(1));
    }

    if (q->hasOutgoingFrames() && !writeNotifier->isActive())
        writeNotifier->start();
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: PeakCanBackendPrivate::startWrite()
|———Node:qualified_identifier Text: PeakCanBackendPrivate::startWrite
|————Node:namespace_identifier Text: PeakCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: startWrite
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(PeakCanBackend);

    if (!q->hasOutgoingFrames()) {
        writeNotifier->stop();
        return;
    }

    const QCanBusFrame frame = q->dequeueOutgoingFrame();
    const QByteArray payload = frame.payload();
    const qsizetype payloadSize = payload.size();
    TPCANStatus st = PCAN_ERROR_OK;

    if (isFlexibleDatarateEnabled) {
        TPCANMsgFD message = {};
        message.ID = frame.frameId();
        message.DLC = sizeToDlc(payloadSize);
        message.MSGTYPE = frame.hasExtendedFrameFormat() ? PCAN_MESSAGE_EXTENDED
                                                         : PCAN_MESSAGE_STANDARD;

        if (frame.hasFlexibleDataRateFormat())
            message.MSGTYPE |= PCAN_MESSAGE_FD;
        if (frame.hasBitrateSwitch())
            message.MSGTYPE |= PCAN_MESSAGE_BRS;

        if (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
            message.MSGTYPE |= PCAN_MESSAGE_RTR; // we do not care about the payload
        else
            ::memcpy(message.DATA, payload.constData(), payloadSize);
        st = ::CAN_WriteFD(channelIndex, &message);
    } else if (frame.hasFlexibleDataRateFormat()) {
        const char errorString[] = "Cannot send CAN FD frame format as CAN FD is not enabled.";
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN(), errorString);
        q->setError(PeakCanBackend::tr(errorString), QCanBusDevice::WriteError);
    } else {
        TPCANMsg message = {};
        message.ID = frame.frameId();
        message.LEN = static_cast<quint8>(payloadSize);
        message.MSGTYPE = frame.hasExtendedFrameFormat() ? PCAN_MESSAGE_EXTENDED
                                                         : PCAN_MESSAGE_STANDARD;

        if (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
            message.MSGTYPE |= PCAN_MESSAGE_RTR; // we do not care about the payload
        else
            ::memcpy(message.DATA, payload.constData(), payloadSize);
        st = ::CAN_Write(channelIndex, &message);
    }

    if (Q_UNLIKELY(st != PCAN_ERROR_OK)) {
        const QString errorString = systemErrorString(st);
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot write frame: %ls",
                  qUtf16Printable(errorString));
        q->setError(errorString, QCanBusDevice::WriteError);
    } else {
        emit q->framesWritten(qint64(1));
    }

    if (q->hasOutgoingFrames() && !writeNotifier->isActive())
        writeNotifier->start();
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(PeakCanBackend);
|————Node:call_expression Text: Q_Q(PeakCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (PeakCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: PeakCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (!q->hasOutgoingFrames()) {
        writeNotifier->stop();
        return;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (!q->hasOutgoingFrames())
|—————Node:( Text: (
|—————Node:unary_expression Text: !q->hasOutgoingFrames()
|——————Node:! Text: !
|——————Node:call_expression Text: q->hasOutgoingFrames()
|———————Node:field_expression Text: q->hasOutgoingFrames
|————————Node:identifier Text: q
|————————Node:-> Text: ->
|————————Node:field_identifier Text: hasOutgoingFrames
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        writeNotifier->stop();
        return;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: writeNotifier->stop();
|——————Node:call_expression Text: writeNotifier->stop()
|———————Node:field_expression Text: writeNotifier->stop
|————————Node:identifier Text: writeNotifier
|————————Node:-> Text: ->
|————————Node:field_identifier Text: stop
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return;
|——————Node:return Text: return
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:declaration Text: const QCanBusFrame frame = q->dequeueOutgoingFrame();
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: QCanBusFrame
|————Node:init_declarator Text: frame = q->dequeueOutgoingFrame()
|—————Node:identifier Text: frame
|—————Node:= Text: =
|—————Node:call_expression Text: q->dequeueOutgoingFrame()
|——————Node:field_expression Text: q->dequeueOutgoingFrame
|———————Node:identifier Text: q
|———————Node:-> Text: ->
|———————Node:field_identifier Text: dequeueOutgoingFrame
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: const QByteArray payload = frame.payload();
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: QByteArray
|————Node:init_declarator Text: payload = frame.payload()
|—————Node:identifier Text: payload
|—————Node:= Text: =
|—————Node:call_expression Text: frame.payload()
|——————Node:field_expression Text: frame.payload
|———————Node:identifier Text: frame
|———————Node:. Text: .
|———————Node:field_identifier Text: payload
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: const qsizetype payloadSize = payload.size();
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: qsizetype
|————Node:init_declarator Text: payloadSize = payload.size()
|—————Node:identifier Text: payloadSize
|—————Node:= Text: =
|—————Node:call_expression Text: payload.size()
|——————Node:field_expression Text: payload.size
|———————Node:identifier Text: payload
|———————Node:. Text: .
|———————Node:field_identifier Text: size
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: TPCANStatus st = PCAN_ERROR_OK;
|————Node:type_identifier Text: TPCANStatus
|————Node:init_declarator Text: st = PCAN_ERROR_OK
|—————Node:identifier Text: st
|—————Node:= Text: =
|—————Node:identifier Text: PCAN_ERROR_OK
|————Node:; Text: ;
|———Node:if_statement Text: if (isFlexibleDatarateEnabled) {
        TPCANMsgFD message = {};
        message.ID = frame.frameId();
        message.DLC = sizeToDlc(payloadSize);
        message.MSGTYPE = frame.hasExtendedFrameFormat() ? PCAN_MESSAGE_EXTENDED
                                                         : PCAN_MESSAGE_STANDARD;

        if (frame.hasFlexibleDataRateFormat())
            message.MSGTYPE |= PCAN_MESSAGE_FD;
        if (frame.hasBitrateSwitch())
            message.MSGTYPE |= PCAN_MESSAGE_BRS;

        if (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
            message.MSGTYPE |= PCAN_MESSAGE_RTR; // we do not care about the payload
        else
            ::memcpy(message.DATA, payload.constData(), payloadSize);
        st = ::CAN_WriteFD(channelIndex, &message);
    } else if (frame.hasFlexibleDataRateFormat()) {
        const char errorString[] = "Cannot send CAN FD frame format as CAN FD is not enabled.";
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN(), errorString);
        q->setError(PeakCanBackend::tr(errorString), QCanBusDevice::WriteError);
    } else {
        TPCANMsg message = {};
        message.ID = frame.frameId();
        message.LEN = static_cast<quint8>(payloadSize);
        message.MSGTYPE = frame.hasExtendedFrameFormat() ? PCAN_MESSAGE_EXTENDED
                                                         : PCAN_MESSAGE_STANDARD;

        if (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
            message.MSGTYPE |= PCAN_MESSAGE_RTR; // we do not care about the payload
        else
            ::memcpy(message.DATA, payload.constData(), payloadSize);
        st = ::CAN_Write(channelIndex, &message);
    }
|————Node:if Text: if
|————Node:condition_clause Text: (isFlexibleDatarateEnabled)
|—————Node:( Text: (
|—————Node:identifier Text: isFlexibleDatarateEnabled
|—————Node:) Text: )
|————Node:compound_statement Text: {
        TPCANMsgFD message = {};
        message.ID = frame.frameId();
        message.DLC = sizeToDlc(payloadSize);
        message.MSGTYPE = frame.hasExtendedFrameFormat() ? PCAN_MESSAGE_EXTENDED
                                                         : PCAN_MESSAGE_STANDARD;

        if (frame.hasFlexibleDataRateFormat())
            message.MSGTYPE |= PCAN_MESSAGE_FD;
        if (frame.hasBitrateSwitch())
            message.MSGTYPE |= PCAN_MESSAGE_BRS;

        if (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
            message.MSGTYPE |= PCAN_MESSAGE_RTR; // we do not care about the payload
        else
            ::memcpy(message.DATA, payload.constData(), payloadSize);
        st = ::CAN_WriteFD(channelIndex, &message);
    }
|—————Node:{ Text: {
|—————Node:declaration Text: TPCANMsgFD message = {};
|——————Node:type_identifier Text: TPCANMsgFD
|——————Node:init_declarator Text: message = {}
|———————Node:identifier Text: message
|———————Node:= Text: =
|———————Node:initializer_list Text: {}
|————————Node:{ Text: {
|————————Node:} Text: }
|——————Node:; Text: ;
|—————Node:expression_statement Text: message.ID = frame.frameId();
|——————Node:assignment_expression Text: message.ID = frame.frameId()
|———————Node:field_expression Text: message.ID
|————————Node:identifier Text: message
|————————Node:. Text: .
|————————Node:field_identifier Text: ID
|———————Node:= Text: =
|———————Node:call_expression Text: frame.frameId()
|————————Node:field_expression Text: frame.frameId
|—————————Node:identifier Text: frame
|—————————Node:. Text: .
|—————————Node:field_identifier Text: frameId
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: message.DLC = sizeToDlc(payloadSize);
|——————Node:assignment_expression Text: message.DLC = sizeToDlc(payloadSize)
|———————Node:field_expression Text: message.DLC
|————————Node:identifier Text: message
|————————Node:. Text: .
|————————Node:field_identifier Text: DLC
|———————Node:= Text: =
|———————Node:call_expression Text: sizeToDlc(payloadSize)
|————————Node:identifier Text: sizeToDlc
|————————Node:argument_list Text: (payloadSize)
|—————————Node:( Text: (
|—————————Node:identifier Text: payloadSize
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: message.MSGTYPE = frame.hasExtendedFrameFormat() ? PCAN_MESSAGE_EXTENDED
                                                         : PCAN_MESSAGE_STANDARD;
|——————Node:assignment_expression Text: message.MSGTYPE = frame.hasExtendedFrameFormat() ? PCAN_MESSAGE_EXTENDED
                                                         : PCAN_MESSAGE_STANDARD
|———————Node:field_expression Text: message.MSGTYPE
|————————Node:identifier Text: message
|————————Node:. Text: .
|————————Node:field_identifier Text: MSGTYPE
|———————Node:= Text: =
|———————Node:conditional_expression Text: frame.hasExtendedFrameFormat() ? PCAN_MESSAGE_EXTENDED
                                                         : PCAN_MESSAGE_STANDARD
|————————Node:call_expression Text: frame.hasExtendedFrameFormat()
|—————————Node:field_expression Text: frame.hasExtendedFrameFormat
|——————————Node:identifier Text: frame
|——————————Node:. Text: .
|——————————Node:field_identifier Text: hasExtendedFrameFormat
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:? Text: ?
|————————Node:identifier Text: PCAN_MESSAGE_EXTENDED
|————————Node:: Text: :
|————————Node:identifier Text: PCAN_MESSAGE_STANDARD
|——————Node:; Text: ;
|—————Node:if_statement Text: if (frame.hasFlexibleDataRateFormat())
            message.MSGTYPE |= PCAN_MESSAGE_FD;
|——————Node:if Text: if
|——————Node:condition_clause Text: (frame.hasFlexibleDataRateFormat())
|———————Node:( Text: (
|———————Node:call_expression Text: frame.hasFlexibleDataRateFormat()
|————————Node:field_expression Text: frame.hasFlexibleDataRateFormat
|—————————Node:identifier Text: frame
|—————————Node:. Text: .
|—————————Node:field_identifier Text: hasFlexibleDataRateFormat
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:expression_statement Text: message.MSGTYPE |= PCAN_MESSAGE_FD;
|———————Node:assignment_expression Text: message.MSGTYPE |= PCAN_MESSAGE_FD
|————————Node:field_expression Text: message.MSGTYPE
|—————————Node:identifier Text: message
|—————————Node:. Text: .
|—————————Node:field_identifier Text: MSGTYPE
|————————Node:|= Text: |=
|————————Node:identifier Text: PCAN_MESSAGE_FD
|———————Node:; Text: ;
|—————Node:if_statement Text: if (frame.hasBitrateSwitch())
            message.MSGTYPE |= PCAN_MESSAGE_BRS;
|——————Node:if Text: if
|——————Node:condition_clause Text: (frame.hasBitrateSwitch())
|———————Node:( Text: (
|———————Node:call_expression Text: frame.hasBitrateSwitch()
|————————Node:field_expression Text: frame.hasBitrateSwitch
|—————————Node:identifier Text: frame
|—————————Node:. Text: .
|—————————Node:field_identifier Text: hasBitrateSwitch
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:expression_statement Text: message.MSGTYPE |= PCAN_MESSAGE_BRS;
|———————Node:assignment_expression Text: message.MSGTYPE |= PCAN_MESSAGE_BRS
|————————Node:field_expression Text: message.MSGTYPE
|—————————Node:identifier Text: message
|—————————Node:. Text: .
|—————————Node:field_identifier Text: MSGTYPE
|————————Node:|= Text: |=
|————————Node:identifier Text: PCAN_MESSAGE_BRS
|———————Node:; Text: ;
|—————Node:if_statement Text: if (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
            message.MSGTYPE |= PCAN_MESSAGE_RTR; // we do not care about the payload
        else
            ::memcpy(message.DATA, payload.constData(), payloadSize);
|——————Node:if Text: if
|——————Node:condition_clause Text: (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
|———————Node:( Text: (
|———————Node:binary_expression Text: frame.frameType() == QCanBusFrame::RemoteRequestFrame
|————————Node:call_expression Text: frame.frameType()
|—————————Node:field_expression Text: frame.frameType
|——————————Node:identifier Text: frame
|——————————Node:. Text: .
|——————————Node:field_identifier Text: frameType
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:== Text: ==
|————————Node:qualified_identifier Text: QCanBusFrame::RemoteRequestFrame
|—————————Node:namespace_identifier Text: QCanBusFrame
|—————————Node::: Text: ::
|—————————Node:identifier Text: RemoteRequestFrame
|———————Node:) Text: )
|——————Node:expression_statement Text: message.MSGTYPE |= PCAN_MESSAGE_RTR;
|———————Node:assignment_expression Text: message.MSGTYPE |= PCAN_MESSAGE_RTR
|————————Node:field_expression Text: message.MSGTYPE
|—————————Node:identifier Text: message
|—————————Node:. Text: .
|—————————Node:field_identifier Text: MSGTYPE
|————————Node:|= Text: |=
|————————Node:identifier Text: PCAN_MESSAGE_RTR
|———————Node:; Text: ;
|——————Node:comment
|——————Node:else_clause Text: else
            ::memcpy(message.DATA, payload.constData(), payloadSize);
|———————Node:else Text: else
|———————Node:expression_statement Text: ::memcpy(message.DATA, payload.constData(), payloadSize);
|————————Node:call_expression Text: ::memcpy(message.DATA, payload.constData(), payloadSize)
|—————————Node:qualified_identifier Text: ::memcpy
|——————————Node::: Text: ::
|——————————Node:identifier Text: memcpy
|—————————Node:argument_list Text: (message.DATA, payload.constData(), payloadSize)
|——————————Node:( Text: (
|——————————Node:field_expression Text: message.DATA
|———————————Node:identifier Text: message
|———————————Node:. Text: .
|———————————Node:field_identifier Text: DATA
|——————————Node:, Text: ,
|——————————Node:call_expression Text: payload.constData()
|———————————Node:field_expression Text: payload.constData
|————————————Node:identifier Text: payload
|————————————Node:. Text: .
|————————————Node:field_identifier Text: constData
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:, Text: ,
|——————————Node:identifier Text: payloadSize
|——————————Node:) Text: )
|————————Node:; Text: ;
|—————Node:expression_statement Text: st = ::CAN_WriteFD(channelIndex, &message);
|——————Node:assignment_expression Text: st = ::CAN_WriteFD(channelIndex, &message)
|———————Node:identifier Text: st
|———————Node:= Text: =
|———————Node:call_expression Text: ::CAN_WriteFD(channelIndex, &message)
|————————Node:qualified_identifier Text: ::CAN_WriteFD
|—————————Node::: Text: ::
|—————————Node:identifier Text: CAN_WriteFD
|————————Node:argument_list Text: (channelIndex, &message)
|—————————Node:( Text: (
|—————————Node:identifier Text: channelIndex
|—————————Node:, Text: ,
|—————————Node:pointer_expression Text: &message
|——————————Node:& Text: &
|——————————Node:identifier Text: message
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else if (frame.hasFlexibleDataRateFormat()) {
        const char errorString[] = "Cannot send CAN FD frame format as CAN FD is not enabled.";
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN(), errorString);
        q->setError(PeakCanBackend::tr(errorString), QCanBusDevice::WriteError);
    } else {
        TPCANMsg message = {};
        message.ID = frame.frameId();
        message.LEN = static_cast<quint8>(payloadSize);
        message.MSGTYPE = frame.hasExtendedFrameFormat() ? PCAN_MESSAGE_EXTENDED
                                                         : PCAN_MESSAGE_STANDARD;

        if (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
            message.MSGTYPE |= PCAN_MESSAGE_RTR; // we do not care about the payload
        else
            ::memcpy(message.DATA, payload.constData(), payloadSize);
        st = ::CAN_Write(channelIndex, &message);
    }
|—————Node:else Text: else
|—————Node:if_statement Text: if (frame.hasFlexibleDataRateFormat()) {
        const char errorString[] = "Cannot send CAN FD frame format as CAN FD is not enabled.";
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN(), errorString);
        q->setError(PeakCanBackend::tr(errorString), QCanBusDevice::WriteError);
    } else {
        TPCANMsg message = {};
        message.ID = frame.frameId();
        message.LEN = static_cast<quint8>(payloadSize);
        message.MSGTYPE = frame.hasExtendedFrameFormat() ? PCAN_MESSAGE_EXTENDED
                                                         : PCAN_MESSAGE_STANDARD;

        if (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
            message.MSGTYPE |= PCAN_MESSAGE_RTR; // we do not care about the payload
        else
            ::memcpy(message.DATA, payload.constData(), payloadSize);
        st = ::CAN_Write(channelIndex, &message);
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: (frame.hasFlexibleDataRateFormat())
|———————Node:( Text: (
|———————Node:call_expression Text: frame.hasFlexibleDataRateFormat()
|————————Node:field_expression Text: frame.hasFlexibleDataRateFormat
|—————————Node:identifier Text: frame
|—————————Node:. Text: .
|—————————Node:field_identifier Text: hasFlexibleDataRateFormat
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {
        const char errorString[] = "Cannot send CAN FD frame format as CAN FD is not enabled.";
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN(), errorString);
        q->setError(PeakCanBackend::tr(errorString), QCanBusDevice::WriteError);
    }
|———————Node:{ Text: {
|———————Node:declaration Text: const char errorString[] = "Cannot send CAN FD frame format as CAN FD is not enabled.";
|————————Node:type_qualifier Text: const
|—————————Node:const Text: const
|————————Node:primitive_type Text: char
|————————Node:init_declarator Text: errorString[] = "Cannot send CAN FD frame format as CAN FD is not enabled."
|—————————Node:array_declarator Text: errorString[]
|——————————Node:identifier Text: errorString
|——————————Node:[ Text: [
|——————————Node:] Text: ]
|—————————Node:= Text: =
|—————————Node:string_literal Text: "Cannot send CAN FD frame format as CAN FD is not enabled."
|——————————Node:" Text: "
|——————————Node:string_content Text: Cannot send CAN FD frame format as CAN FD is not enabled.
|——————————Node:" Text: "
|————————Node:; Text: ;
|———————Node:expression_statement Text: qCWarning(QT_CANBUS_PLUGINS_PEAKCAN(), errorString);
|————————Node:call_expression Text: qCWarning(QT_CANBUS_PLUGINS_PEAKCAN(), errorString)
|—————————Node:identifier Text: qCWarning
|—————————Node:argument_list Text: (QT_CANBUS_PLUGINS_PEAKCAN(), errorString)
|——————————Node:( Text: (
|——————————Node:call_expression Text: QT_CANBUS_PLUGINS_PEAKCAN()
|———————————Node:identifier Text: QT_CANBUS_PLUGINS_PEAKCAN
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:, Text: ,
|——————————Node:identifier Text: errorString
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: q->setError(PeakCanBackend::tr(errorString), QCanBusDevice::WriteError);
|————————Node:call_expression Text: q->setError(PeakCanBackend::tr(errorString), QCanBusDevice::WriteError)
|—————————Node:field_expression Text: q->setError
|——————————Node:identifier Text: q
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: setError
|—————————Node:argument_list Text: (PeakCanBackend::tr(errorString), QCanBusDevice::WriteError)
|——————————Node:( Text: (
|——————————Node:call_expression Text: PeakCanBackend::tr(errorString)
|———————————Node:qualified_identifier Text: PeakCanBackend::tr
|————————————Node:namespace_identifier Text: PeakCanBackend
|————————————Node::: Text: ::
|————————————Node:identifier Text: tr
|———————————Node:argument_list Text: (errorString)
|————————————Node:( Text: (
|————————————Node:identifier Text: errorString
|————————————Node:) Text: )
|——————————Node:, Text: ,
|——————————Node:qualified_identifier Text: QCanBusDevice::WriteError
|———————————Node:namespace_identifier Text: QCanBusDevice
|———————————Node::: Text: ::
|———————————Node:identifier Text: WriteError
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|——————Node:else_clause Text: else {
        TPCANMsg message = {};
        message.ID = frame.frameId();
        message.LEN = static_cast<quint8>(payloadSize);
        message.MSGTYPE = frame.hasExtendedFrameFormat() ? PCAN_MESSAGE_EXTENDED
                                                         : PCAN_MESSAGE_STANDARD;

        if (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
            message.MSGTYPE |= PCAN_MESSAGE_RTR; // we do not care about the payload
        else
            ::memcpy(message.DATA, payload.constData(), payloadSize);
        st = ::CAN_Write(channelIndex, &message);
    }
|———————Node:else Text: else
|———————Node:compound_statement Text: {
        TPCANMsg message = {};
        message.ID = frame.frameId();
        message.LEN = static_cast<quint8>(payloadSize);
        message.MSGTYPE = frame.hasExtendedFrameFormat() ? PCAN_MESSAGE_EXTENDED
                                                         : PCAN_MESSAGE_STANDARD;

        if (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
            message.MSGTYPE |= PCAN_MESSAGE_RTR; // we do not care about the payload
        else
            ::memcpy(message.DATA, payload.constData(), payloadSize);
        st = ::CAN_Write(channelIndex, &message);
    }
|————————Node:{ Text: {
|————————Node:declaration Text: TPCANMsg message = {};
|—————————Node:type_identifier Text: TPCANMsg
|—————————Node:init_declarator Text: message = {}
|——————————Node:identifier Text: message
|——————————Node:= Text: =
|——————————Node:initializer_list Text: {}
|———————————Node:{ Text: {
|———————————Node:} Text: }
|—————————Node:; Text: ;
|————————Node:expression_statement Text: message.ID = frame.frameId();
|—————————Node:assignment_expression Text: message.ID = frame.frameId()
|——————————Node:field_expression Text: message.ID
|———————————Node:identifier Text: message
|———————————Node:. Text: .
|———————————Node:field_identifier Text: ID
|——————————Node:= Text: =
|——————————Node:call_expression Text: frame.frameId()
|———————————Node:field_expression Text: frame.frameId
|————————————Node:identifier Text: frame
|————————————Node:. Text: .
|————————————Node:field_identifier Text: frameId
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: message.LEN = static_cast<quint8>(payloadSize);
|—————————Node:assignment_expression Text: message.LEN = static_cast<quint8>(payloadSize)
|——————————Node:field_expression Text: message.LEN
|———————————Node:identifier Text: message
|———————————Node:. Text: .
|———————————Node:field_identifier Text: LEN
|——————————Node:= Text: =
|——————————Node:call_expression Text: static_cast<quint8>(payloadSize)
|———————————Node:template_function Text: static_cast<quint8>
|————————————Node:identifier Text: static_cast
|————————————Node:template_argument_list Text: <quint8>
|—————————————Node:< Text: <
|—————————————Node:type_descriptor Text: quint8
|——————————————Node:type_identifier Text: quint8
|—————————————Node:> Text: >
|———————————Node:argument_list Text: (payloadSize)
|————————————Node:( Text: (
|————————————Node:identifier Text: payloadSize
|————————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: message.MSGTYPE = frame.hasExtendedFrameFormat() ? PCAN_MESSAGE_EXTENDED
                                                         : PCAN_MESSAGE_STANDARD;
|—————————Node:assignment_expression Text: message.MSGTYPE = frame.hasExtendedFrameFormat() ? PCAN_MESSAGE_EXTENDED
                                                         : PCAN_MESSAGE_STANDARD
|——————————Node:field_expression Text: message.MSGTYPE
|———————————Node:identifier Text: message
|———————————Node:. Text: .
|———————————Node:field_identifier Text: MSGTYPE
|——————————Node:= Text: =
|——————————Node:conditional_expression Text: frame.hasExtendedFrameFormat() ? PCAN_MESSAGE_EXTENDED
                                                         : PCAN_MESSAGE_STANDARD
|———————————Node:call_expression Text: frame.hasExtendedFrameFormat()
|————————————Node:field_expression Text: frame.hasExtendedFrameFormat
|—————————————Node:identifier Text: frame
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: hasExtendedFrameFormat
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:? Text: ?
|———————————Node:identifier Text: PCAN_MESSAGE_EXTENDED
|———————————Node:: Text: :
|———————————Node:identifier Text: PCAN_MESSAGE_STANDARD
|—————————Node:; Text: ;
|————————Node:if_statement Text: if (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
            message.MSGTYPE |= PCAN_MESSAGE_RTR; // we do not care about the payload
        else
            ::memcpy(message.DATA, payload.constData(), payloadSize);
|—————————Node:if Text: if
|—————————Node:condition_clause Text: (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: frame.frameType() == QCanBusFrame::RemoteRequestFrame
|———————————Node:call_expression Text: frame.frameType()
|————————————Node:field_expression Text: frame.frameType
|—————————————Node:identifier Text: frame
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: frameType
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:== Text: ==
|———————————Node:qualified_identifier Text: QCanBusFrame::RemoteRequestFrame
|————————————Node:namespace_identifier Text: QCanBusFrame
|————————————Node::: Text: ::
|————————————Node:identifier Text: RemoteRequestFrame
|——————————Node:) Text: )
|—————————Node:expression_statement Text: message.MSGTYPE |= PCAN_MESSAGE_RTR;
|——————————Node:assignment_expression Text: message.MSGTYPE |= PCAN_MESSAGE_RTR
|———————————Node:field_expression Text: message.MSGTYPE
|————————————Node:identifier Text: message
|————————————Node:. Text: .
|————————————Node:field_identifier Text: MSGTYPE
|———————————Node:|= Text: |=
|———————————Node:identifier Text: PCAN_MESSAGE_RTR
|——————————Node:; Text: ;
|—————————Node:comment
|—————————Node:else_clause Text: else
            ::memcpy(message.DATA, payload.constData(), payloadSize);
|——————————Node:else Text: else
|——————————Node:expression_statement Text: ::memcpy(message.DATA, payload.constData(), payloadSize);
|———————————Node:call_expression Text: ::memcpy(message.DATA, payload.constData(), payloadSize)
|————————————Node:qualified_identifier Text: ::memcpy
|—————————————Node::: Text: ::
|—————————————Node:identifier Text: memcpy
|————————————Node:argument_list Text: (message.DATA, payload.constData(), payloadSize)
|—————————————Node:( Text: (
|—————————————Node:field_expression Text: message.DATA
|——————————————Node:identifier Text: message
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: DATA
|—————————————Node:, Text: ,
|—————————————Node:call_expression Text: payload.constData()
|——————————————Node:field_expression Text: payload.constData
|———————————————Node:identifier Text: payload
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: constData
|——————————————Node:argument_list Text: ()
|———————————————Node:( Text: (
|———————————————Node:) Text: )
|—————————————Node:, Text: ,
|—————————————Node:identifier Text: payloadSize
|—————————————Node:) Text: )
|———————————Node:; Text: ;
|————————Node:expression_statement Text: st = ::CAN_Write(channelIndex, &message);
|—————————Node:assignment_expression Text: st = ::CAN_Write(channelIndex, &message)
|——————————Node:identifier Text: st
|——————————Node:= Text: =
|——————————Node:call_expression Text: ::CAN_Write(channelIndex, &message)
|———————————Node:qualified_identifier Text: ::CAN_Write
|————————————Node::: Text: ::
|————————————Node:identifier Text: CAN_Write
|———————————Node:argument_list Text: (channelIndex, &message)
|————————————Node:( Text: (
|————————————Node:identifier Text: channelIndex
|————————————Node:, Text: ,
|————————————Node:pointer_expression Text: &message
|—————————————Node:& Text: &
|—————————————Node:identifier Text: message
|————————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:} Text: }
|———Node:if_statement Text: if (Q_UNLIKELY(st != PCAN_ERROR_OK)) {
        const QString errorString = systemErrorString(st);
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot write frame: %ls",
                  qUtf16Printable(errorString));
        q->setError(errorString, QCanBusDevice::WriteError);
    } else {
        emit q->framesWritten(qint64(1));
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(st != PCAN_ERROR_OK))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(st != PCAN_ERROR_OK)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (st != PCAN_ERROR_OK)
|———————Node:( Text: (
|———————Node:binary_expression Text: st != PCAN_ERROR_OK
|————————Node:identifier Text: st
|————————Node:!= Text: !=
|————————Node:identifier Text: PCAN_ERROR_OK
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        const QString errorString = systemErrorString(st);
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot write frame: %ls",
                  qUtf16Printable(errorString));
        q->setError(errorString, QCanBusDevice::WriteError);
    }
|—————Node:{ Text: {
|—————Node:declaration Text: const QString errorString = systemErrorString(st);
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:type_identifier Text: QString
|——————Node:init_declarator Text: errorString = systemErrorString(st)
|———————Node:identifier Text: errorString
|———————Node:= Text: =
|———————Node:call_expression Text: systemErrorString(st)
|————————Node:identifier Text: systemErrorString
|————————Node:argument_list Text: (st)
|—————————Node:( Text: (
|—————————Node:identifier Text: st
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot write frame: %ls",
                  qUtf16Printable(errorString));
|——————Node:call_expression Text: qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot write frame: %ls",
                  qUtf16Printable(errorString))
|———————Node:identifier Text: qCWarning
|———————Node:argument_list Text: (QT_CANBUS_PLUGINS_PEAKCAN, "Cannot write frame: %ls",
                  qUtf16Printable(errorString))
|————————Node:( Text: (
|————————Node:identifier Text: QT_CANBUS_PLUGINS_PEAKCAN
|————————Node:, Text: ,
|————————Node:string_literal Text: "Cannot write frame: %ls"
|—————————Node:" Text: "
|—————————Node:string_content Text: Cannot write frame: %ls
|—————————Node:" Text: "
|————————Node:, Text: ,
|————————Node:call_expression Text: qUtf16Printable(errorString)
|—————————Node:identifier Text: qUtf16Printable
|—————————Node:argument_list Text: (errorString)
|——————————Node:( Text: (
|——————————Node:identifier Text: errorString
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: q->setError(errorString, QCanBusDevice::WriteError);
|——————Node:call_expression Text: q->setError(errorString, QCanBusDevice::WriteError)
|———————Node:field_expression Text: q->setError
|————————Node:identifier Text: q
|————————Node:-> Text: ->
|————————Node:field_identifier Text: setError
|———————Node:argument_list Text: (errorString, QCanBusDevice::WriteError)
|————————Node:( Text: (
|————————Node:identifier Text: errorString
|————————Node:, Text: ,
|————————Node:qualified_identifier Text: QCanBusDevice::WriteError
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:identifier Text: WriteError
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else {
        emit q->framesWritten(qint64(1));
    }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
        emit q->framesWritten(qint64(1));
    }
|——————Node:{ Text: {
|——————Node:declaration Text: emit q->framesWritten(qint64(1));
|———————Node:type_identifier Text: emit
|———————Node:ERROR Text: q->
|————————Node:identifier Text: q
|————————Node:-> Text: ->
|———————Node:init_declarator Text: framesWritten(qint64(1))
|————————Node:identifier Text: framesWritten
|————————Node:argument_list Text: (qint64(1))
|—————————Node:( Text: (
|—————————Node:call_expression Text: qint64(1)
|——————————Node:identifier Text: qint64
|——————————Node:argument_list Text: (1)
|———————————Node:( Text: (
|———————————Node:number_literal Text: 1
|———————————Node:) Text: )
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:} Text: }
|———Node:if_statement Text: if (q->hasOutgoingFrames() && !writeNotifier->isActive())
        writeNotifier->start();
|————Node:if Text: if
|————Node:condition_clause Text: (q->hasOutgoingFrames() && !writeNotifier->isActive())
|—————Node:( Text: (
|—————Node:binary_expression Text: q->hasOutgoingFrames() && !writeNotifier->isActive()
|——————Node:call_expression Text: q->hasOutgoingFrames()
|———————Node:field_expression Text: q->hasOutgoingFrames
|————————Node:identifier Text: q
|————————Node:-> Text: ->
|————————Node:field_identifier Text: hasOutgoingFrames
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:&& Text: &&
|——————Node:unary_expression Text: !writeNotifier->isActive()
|———————Node:! Text: !
|———————Node:call_expression Text: writeNotifier->isActive()
|————————Node:field_expression Text: writeNotifier->isActive
|—————————Node:identifier Text: writeNotifier
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: isActive
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|—————Node:) Text: )
|————Node:expression_statement Text: writeNotifier->start();
|—————Node:call_expression Text: writeNotifier->start()
|——————Node:field_expression Text: writeNotifier->start
|———————Node:identifier Text: writeNotifier
|———————Node:-> Text: ->
|———————Node:field_identifier Text: start
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void PeakCanBackendPrivate::startRead()
{
    Q_Q(PeakCanBackend);

    QList<QCanBusFrame> newFrames;

    for (;;) {
        if (isFlexibleDatarateEnabled) {
            TPCANMsgFD message = {};
            TPCANTimestampFD timestamp = {};

            const TPCANStatus st = ::CAN_ReadFD(channelIndex, &message, &timestamp);
            if (st != PCAN_ERROR_OK) {
                if (Q_UNLIKELY(st != PCAN_ERROR_QRCVEMPTY))
                    q->setError(systemErrorString(st), QCanBusDevice::ReadError);
                break;
            }

            // Filter out PCAN status frames, to avoid turning them
            // into QCanBusFrame::DataFrames with random canId
            if (Q_UNLIKELY(message.MSGTYPE & PCAN_MESSAGE_STATUS))
                continue;

            const int size = dlcToSize(static_cast<CanFrameDlc>(message.DLC));
            QCanBusFrame frame(TPCANLongToFrameID(message.ID),
                               QByteArray(reinterpret_cast<const char *>(message.DATA), size));
            frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(static_cast<qint64>(timestamp)));
            frame.setExtendedFrameFormat(message.MSGTYPE & PCAN_MESSAGE_EXTENDED);
            frame.setFrameType((message.MSGTYPE & PCAN_MESSAGE_RTR)
                               ? QCanBusFrame::RemoteRequestFrame : QCanBusFrame::DataFrame);
            frame.setFlexibleDataRateFormat(message.MSGTYPE & PCAN_MESSAGE_FD);
            frame.setBitrateSwitch(message.MSGTYPE & PCAN_MESSAGE_BRS);
            frame.setErrorStateIndicator(message.MSGTYPE & PCAN_MESSAGE_ESI);

            newFrames.append(std::move(frame));
        } else {
            TPCANMsg message = {};
            TPCANTimestamp timestamp = {};

            const TPCANStatus st = ::CAN_Read(channelIndex, &message, &timestamp);
            if (st != PCAN_ERROR_OK) {
                if (Q_UNLIKELY(st != PCAN_ERROR_QRCVEMPTY))
                    q->setError(systemErrorString(st), QCanBusDevice::ReadError);
                break;
            }

            // Filter out PCAN status frames, to avoid turning them
            // into QCanBusFrame::DataFrames with random canId
            if (Q_UNLIKELY(message.MSGTYPE & PCAN_MESSAGE_STATUS))
                continue;

            const int size = static_cast<int>(message.LEN);
            QCanBusFrame frame(TPCANLongToFrameID(message.ID),
                               QByteArray(reinterpret_cast<const char *>(message.DATA), size));
            const quint64 millis = timestamp.millis + Q_UINT64_C(0xFFFFFFFF) * timestamp.millis_overflow;
            const quint64 micros = Q_UINT64_C(1000) * millis + timestamp.micros;
            frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(static_cast<qint64>(micros)));
            frame.setExtendedFrameFormat(message.MSGTYPE & PCAN_MESSAGE_EXTENDED);
            frame.setFrameType((message.MSGTYPE & PCAN_MESSAGE_RTR)
                               ? QCanBusFrame::RemoteRequestFrame : QCanBusFrame::DataFrame);

            newFrames.append(std::move(frame));
        }
    }

    q->enqueueReceivedFrames(newFrames);
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: PeakCanBackendPrivate::startRead()
|———Node:qualified_identifier Text: PeakCanBackendPrivate::startRead
|————Node:namespace_identifier Text: PeakCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: startRead
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(PeakCanBackend);

    QList<QCanBusFrame> newFrames;

    for (;;) {
        if (isFlexibleDatarateEnabled) {
            TPCANMsgFD message = {};
            TPCANTimestampFD timestamp = {};

            const TPCANStatus st = ::CAN_ReadFD(channelIndex, &message, &timestamp);
            if (st != PCAN_ERROR_OK) {
                if (Q_UNLIKELY(st != PCAN_ERROR_QRCVEMPTY))
                    q->setError(systemErrorString(st), QCanBusDevice::ReadError);
                break;
            }

            // Filter out PCAN status frames, to avoid turning them
            // into QCanBusFrame::DataFrames with random canId
            if (Q_UNLIKELY(message.MSGTYPE & PCAN_MESSAGE_STATUS))
                continue;

            const int size = dlcToSize(static_cast<CanFrameDlc>(message.DLC));
            QCanBusFrame frame(TPCANLongToFrameID(message.ID),
                               QByteArray(reinterpret_cast<const char *>(message.DATA), size));
            frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(static_cast<qint64>(timestamp)));
            frame.setExtendedFrameFormat(message.MSGTYPE & PCAN_MESSAGE_EXTENDED);
            frame.setFrameType((message.MSGTYPE & PCAN_MESSAGE_RTR)
                               ? QCanBusFrame::RemoteRequestFrame : QCanBusFrame::DataFrame);
            frame.setFlexibleDataRateFormat(message.MSGTYPE & PCAN_MESSAGE_FD);
            frame.setBitrateSwitch(message.MSGTYPE & PCAN_MESSAGE_BRS);
            frame.setErrorStateIndicator(message.MSGTYPE & PCAN_MESSAGE_ESI);

            newFrames.append(std::move(frame));
        } else {
            TPCANMsg message = {};
            TPCANTimestamp timestamp = {};

            const TPCANStatus st = ::CAN_Read(channelIndex, &message, &timestamp);
            if (st != PCAN_ERROR_OK) {
                if (Q_UNLIKELY(st != PCAN_ERROR_QRCVEMPTY))
                    q->setError(systemErrorString(st), QCanBusDevice::ReadError);
                break;
            }

            // Filter out PCAN status frames, to avoid turning them
            // into QCanBusFrame::DataFrames with random canId
            if (Q_UNLIKELY(message.MSGTYPE & PCAN_MESSAGE_STATUS))
                continue;

            const int size = static_cast<int>(message.LEN);
            QCanBusFrame frame(TPCANLongToFrameID(message.ID),
                               QByteArray(reinterpret_cast<const char *>(message.DATA), size));
            const quint64 millis = timestamp.millis + Q_UINT64_C(0xFFFFFFFF) * timestamp.millis_overflow;
            const quint64 micros = Q_UINT64_C(1000) * millis + timestamp.micros;
            frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(static_cast<qint64>(micros)));
            frame.setExtendedFrameFormat(message.MSGTYPE & PCAN_MESSAGE_EXTENDED);
            frame.setFrameType((message.MSGTYPE & PCAN_MESSAGE_RTR)
                               ? QCanBusFrame::RemoteRequestFrame : QCanBusFrame::DataFrame);

            newFrames.append(std::move(frame));
        }
    }

    q->enqueueReceivedFrames(newFrames);
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(PeakCanBackend);
|————Node:call_expression Text: Q_Q(PeakCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (PeakCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: PeakCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: QList<QCanBusFrame> newFrames;
|————Node:template_type Text: QList<QCanBusFrame>
|—————Node:type_identifier Text: QList
|—————Node:template_argument_list Text: <QCanBusFrame>
|——————Node:< Text: <
|——————Node:type_descriptor Text: QCanBusFrame
|———————Node:type_identifier Text: QCanBusFrame
|——————Node:> Text: >
|————Node:identifier Text: newFrames
|————Node:; Text: ;
|———Node:for_statement Text: for (;;) {
        if (isFlexibleDatarateEnabled) {
            TPCANMsgFD message = {};
            TPCANTimestampFD timestamp = {};

            const TPCANStatus st = ::CAN_ReadFD(channelIndex, &message, &timestamp);
            if (st != PCAN_ERROR_OK) {
                if (Q_UNLIKELY(st != PCAN_ERROR_QRCVEMPTY))
                    q->setError(systemErrorString(st), QCanBusDevice::ReadError);
                break;
            }

            // Filter out PCAN status frames, to avoid turning them
            // into QCanBusFrame::DataFrames with random canId
            if (Q_UNLIKELY(message.MSGTYPE & PCAN_MESSAGE_STATUS))
                continue;

            const int size = dlcToSize(static_cast<CanFrameDlc>(message.DLC));
            QCanBusFrame frame(TPCANLongToFrameID(message.ID),
                               QByteArray(reinterpret_cast<const char *>(message.DATA), size));
            frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(static_cast<qint64>(timestamp)));
            frame.setExtendedFrameFormat(message.MSGTYPE & PCAN_MESSAGE_EXTENDED);
            frame.setFrameType((message.MSGTYPE & PCAN_MESSAGE_RTR)
                               ? QCanBusFrame::RemoteRequestFrame : QCanBusFrame::DataFrame);
            frame.setFlexibleDataRateFormat(message.MSGTYPE & PCAN_MESSAGE_FD);
            frame.setBitrateSwitch(message.MSGTYPE & PCAN_MESSAGE_BRS);
            frame.setErrorStateIndicator(message.MSGTYPE & PCAN_MESSAGE_ESI);

            newFrames.append(std::move(frame));
        } else {
            TPCANMsg message = {};
            TPCANTimestamp timestamp = {};

            const TPCANStatus st = ::CAN_Read(channelIndex, &message, &timestamp);
            if (st != PCAN_ERROR_OK) {
                if (Q_UNLIKELY(st != PCAN_ERROR_QRCVEMPTY))
                    q->setError(systemErrorString(st), QCanBusDevice::ReadError);
                break;
            }

            // Filter out PCAN status frames, to avoid turning them
            // into QCanBusFrame::DataFrames with random canId
            if (Q_UNLIKELY(message.MSGTYPE & PCAN_MESSAGE_STATUS))
                continue;

            const int size = static_cast<int>(message.LEN);
            QCanBusFrame frame(TPCANLongToFrameID(message.ID),
                               QByteArray(reinterpret_cast<const char *>(message.DATA), size));
            const quint64 millis = timestamp.millis + Q_UINT64_C(0xFFFFFFFF) * timestamp.millis_overflow;
            const quint64 micros = Q_UINT64_C(1000) * millis + timestamp.micros;
            frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(static_cast<qint64>(micros)));
            frame.setExtendedFrameFormat(message.MSGTYPE & PCAN_MESSAGE_EXTENDED);
            frame.setFrameType((message.MSGTYPE & PCAN_MESSAGE_RTR)
                               ? QCanBusFrame::RemoteRequestFrame : QCanBusFrame::DataFrame);

            newFrames.append(std::move(frame));
        }
    }
|————Node:for Text: for
|————Node:( Text: (
|————Node:; Text: ;
|————Node:; Text: ;
|————Node:) Text: )
|————Node:compound_statement Text: {
        if (isFlexibleDatarateEnabled) {
            TPCANMsgFD message = {};
            TPCANTimestampFD timestamp = {};

            const TPCANStatus st = ::CAN_ReadFD(channelIndex, &message, &timestamp);
            if (st != PCAN_ERROR_OK) {
                if (Q_UNLIKELY(st != PCAN_ERROR_QRCVEMPTY))
                    q->setError(systemErrorString(st), QCanBusDevice::ReadError);
                break;
            }

            // Filter out PCAN status frames, to avoid turning them
            // into QCanBusFrame::DataFrames with random canId
            if (Q_UNLIKELY(message.MSGTYPE & PCAN_MESSAGE_STATUS))
                continue;

            const int size = dlcToSize(static_cast<CanFrameDlc>(message.DLC));
            QCanBusFrame frame(TPCANLongToFrameID(message.ID),
                               QByteArray(reinterpret_cast<const char *>(message.DATA), size));
            frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(static_cast<qint64>(timestamp)));
            frame.setExtendedFrameFormat(message.MSGTYPE & PCAN_MESSAGE_EXTENDED);
            frame.setFrameType((message.MSGTYPE & PCAN_MESSAGE_RTR)
                               ? QCanBusFrame::RemoteRequestFrame : QCanBusFrame::DataFrame);
            frame.setFlexibleDataRateFormat(message.MSGTYPE & PCAN_MESSAGE_FD);
            frame.setBitrateSwitch(message.MSGTYPE & PCAN_MESSAGE_BRS);
            frame.setErrorStateIndicator(message.MSGTYPE & PCAN_MESSAGE_ESI);

            newFrames.append(std::move(frame));
        } else {
            TPCANMsg message = {};
            TPCANTimestamp timestamp = {};

            const TPCANStatus st = ::CAN_Read(channelIndex, &message, &timestamp);
            if (st != PCAN_ERROR_OK) {
                if (Q_UNLIKELY(st != PCAN_ERROR_QRCVEMPTY))
                    q->setError(systemErrorString(st), QCanBusDevice::ReadError);
                break;
            }

            // Filter out PCAN status frames, to avoid turning them
            // into QCanBusFrame::DataFrames with random canId
            if (Q_UNLIKELY(message.MSGTYPE & PCAN_MESSAGE_STATUS))
                continue;

            const int size = static_cast<int>(message.LEN);
            QCanBusFrame frame(TPCANLongToFrameID(message.ID),
                               QByteArray(reinterpret_cast<const char *>(message.DATA), size));
            const quint64 millis = timestamp.millis + Q_UINT64_C(0xFFFFFFFF) * timestamp.millis_overflow;
            const quint64 micros = Q_UINT64_C(1000) * millis + timestamp.micros;
            frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(static_cast<qint64>(micros)));
            frame.setExtendedFrameFormat(message.MSGTYPE & PCAN_MESSAGE_EXTENDED);
            frame.setFrameType((message.MSGTYPE & PCAN_MESSAGE_RTR)
                               ? QCanBusFrame::RemoteRequestFrame : QCanBusFrame::DataFrame);

            newFrames.append(std::move(frame));
        }
    }
|—————Node:{ Text: {
|—————Node:if_statement Text: if (isFlexibleDatarateEnabled) {
            TPCANMsgFD message = {};
            TPCANTimestampFD timestamp = {};

            const TPCANStatus st = ::CAN_ReadFD(channelIndex, &message, &timestamp);
            if (st != PCAN_ERROR_OK) {
                if (Q_UNLIKELY(st != PCAN_ERROR_QRCVEMPTY))
                    q->setError(systemErrorString(st), QCanBusDevice::ReadError);
                break;
            }

            // Filter out PCAN status frames, to avoid turning them
            // into QCanBusFrame::DataFrames with random canId
            if (Q_UNLIKELY(message.MSGTYPE & PCAN_MESSAGE_STATUS))
                continue;

            const int size = dlcToSize(static_cast<CanFrameDlc>(message.DLC));
            QCanBusFrame frame(TPCANLongToFrameID(message.ID),
                               QByteArray(reinterpret_cast<const char *>(message.DATA), size));
            frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(static_cast<qint64>(timestamp)));
            frame.setExtendedFrameFormat(message.MSGTYPE & PCAN_MESSAGE_EXTENDED);
            frame.setFrameType((message.MSGTYPE & PCAN_MESSAGE_RTR)
                               ? QCanBusFrame::RemoteRequestFrame : QCanBusFrame::DataFrame);
            frame.setFlexibleDataRateFormat(message.MSGTYPE & PCAN_MESSAGE_FD);
            frame.setBitrateSwitch(message.MSGTYPE & PCAN_MESSAGE_BRS);
            frame.setErrorStateIndicator(message.MSGTYPE & PCAN_MESSAGE_ESI);

            newFrames.append(std::move(frame));
        } else {
            TPCANMsg message = {};
            TPCANTimestamp timestamp = {};

            const TPCANStatus st = ::CAN_Read(channelIndex, &message, &timestamp);
            if (st != PCAN_ERROR_OK) {
                if (Q_UNLIKELY(st != PCAN_ERROR_QRCVEMPTY))
                    q->setError(systemErrorString(st), QCanBusDevice::ReadError);
                break;
            }

            // Filter out PCAN status frames, to avoid turning them
            // into QCanBusFrame::DataFrames with random canId
            if (Q_UNLIKELY(message.MSGTYPE & PCAN_MESSAGE_STATUS))
                continue;

            const int size = static_cast<int>(message.LEN);
            QCanBusFrame frame(TPCANLongToFrameID(message.ID),
                               QByteArray(reinterpret_cast<const char *>(message.DATA), size));
            const quint64 millis = timestamp.millis + Q_UINT64_C(0xFFFFFFFF) * timestamp.millis_overflow;
            const quint64 micros = Q_UINT64_C(1000) * millis + timestamp.micros;
            frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(static_cast<qint64>(micros)));
            frame.setExtendedFrameFormat(message.MSGTYPE & PCAN_MESSAGE_EXTENDED);
            frame.setFrameType((message.MSGTYPE & PCAN_MESSAGE_RTR)
                               ? QCanBusFrame::RemoteRequestFrame : QCanBusFrame::DataFrame);

            newFrames.append(std::move(frame));
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (isFlexibleDatarateEnabled)
|———————Node:( Text: (
|———————Node:identifier Text: isFlexibleDatarateEnabled
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            TPCANMsgFD message = {};
            TPCANTimestampFD timestamp = {};

            const TPCANStatus st = ::CAN_ReadFD(channelIndex, &message, &timestamp);
            if (st != PCAN_ERROR_OK) {
                if (Q_UNLIKELY(st != PCAN_ERROR_QRCVEMPTY))
                    q->setError(systemErrorString(st), QCanBusDevice::ReadError);
                break;
            }

            // Filter out PCAN status frames, to avoid turning them
            // into QCanBusFrame::DataFrames with random canId
            if (Q_UNLIKELY(message.MSGTYPE & PCAN_MESSAGE_STATUS))
                continue;

            const int size = dlcToSize(static_cast<CanFrameDlc>(message.DLC));
            QCanBusFrame frame(TPCANLongToFrameID(message.ID),
                               QByteArray(reinterpret_cast<const char *>(message.DATA), size));
            frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(static_cast<qint64>(timestamp)));
            frame.setExtendedFrameFormat(message.MSGTYPE & PCAN_MESSAGE_EXTENDED);
            frame.setFrameType((message.MSGTYPE & PCAN_MESSAGE_RTR)
                               ? QCanBusFrame::RemoteRequestFrame : QCanBusFrame::DataFrame);
            frame.setFlexibleDataRateFormat(message.MSGTYPE & PCAN_MESSAGE_FD);
            frame.setBitrateSwitch(message.MSGTYPE & PCAN_MESSAGE_BRS);
            frame.setErrorStateIndicator(message.MSGTYPE & PCAN_MESSAGE_ESI);

            newFrames.append(std::move(frame));
        }
|———————Node:{ Text: {
|———————Node:declaration Text: TPCANMsgFD message = {};
|————————Node:type_identifier Text: TPCANMsgFD
|————————Node:init_declarator Text: message = {}
|—————————Node:identifier Text: message
|—————————Node:= Text: =
|—————————Node:initializer_list Text: {}
|——————————Node:{ Text: {
|——————————Node:} Text: }
|————————Node:; Text: ;
|———————Node:declaration Text: TPCANTimestampFD timestamp = {};
|————————Node:type_identifier Text: TPCANTimestampFD
|————————Node:init_declarator Text: timestamp = {}
|—————————Node:identifier Text: timestamp
|—————————Node:= Text: =
|—————————Node:initializer_list Text: {}
|——————————Node:{ Text: {
|——————————Node:} Text: }
|————————Node:; Text: ;
|———————Node:declaration Text: const TPCANStatus st = ::CAN_ReadFD(channelIndex, &message, &timestamp);
|————————Node:type_qualifier Text: const
|—————————Node:const Text: const
|————————Node:type_identifier Text: TPCANStatus
|————————Node:init_declarator Text: st = ::CAN_ReadFD(channelIndex, &message, &timestamp)
|—————————Node:identifier Text: st
|—————————Node:= Text: =
|—————————Node:call_expression Text: ::CAN_ReadFD(channelIndex, &message, &timestamp)
|——————————Node:qualified_identifier Text: ::CAN_ReadFD
|———————————Node::: Text: ::
|———————————Node:identifier Text: CAN_ReadFD
|——————————Node:argument_list Text: (channelIndex, &message, &timestamp)
|———————————Node:( Text: (
|———————————Node:identifier Text: channelIndex
|———————————Node:, Text: ,
|———————————Node:pointer_expression Text: &message
|————————————Node:& Text: &
|————————————Node:identifier Text: message
|———————————Node:, Text: ,
|———————————Node:pointer_expression Text: &timestamp
|————————————Node:& Text: &
|————————————Node:identifier Text: timestamp
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:if_statement Text: if (st != PCAN_ERROR_OK) {
                if (Q_UNLIKELY(st != PCAN_ERROR_QRCVEMPTY))
                    q->setError(systemErrorString(st), QCanBusDevice::ReadError);
                break;
            }
|————————Node:if Text: if
|————————Node:condition_clause Text: (st != PCAN_ERROR_OK)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: st != PCAN_ERROR_OK
|——————————Node:identifier Text: st
|——————————Node:!= Text: !=
|——————————Node:identifier Text: PCAN_ERROR_OK
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
                if (Q_UNLIKELY(st != PCAN_ERROR_QRCVEMPTY))
                    q->setError(systemErrorString(st), QCanBusDevice::ReadError);
                break;
            }
|—————————Node:{ Text: {
|—————————Node:if_statement Text: if (Q_UNLIKELY(st != PCAN_ERROR_QRCVEMPTY))
                    q->setError(systemErrorString(st), QCanBusDevice::ReadError);
|——————————Node:if Text: if
|——————————Node:condition_clause Text: (Q_UNLIKELY(st != PCAN_ERROR_QRCVEMPTY))
|———————————Node:( Text: (
|———————————Node:call_expression Text: Q_UNLIKELY(st != PCAN_ERROR_QRCVEMPTY)
|————————————Node:identifier Text: Q_UNLIKELY
|————————————Node:argument_list Text: (st != PCAN_ERROR_QRCVEMPTY)
|—————————————Node:( Text: (
|—————————————Node:binary_expression Text: st != PCAN_ERROR_QRCVEMPTY
|——————————————Node:identifier Text: st
|——————————————Node:!= Text: !=
|——————————————Node:identifier Text: PCAN_ERROR_QRCVEMPTY
|—————————————Node:) Text: )
|———————————Node:) Text: )
|——————————Node:expression_statement Text: q->setError(systemErrorString(st), QCanBusDevice::ReadError);
|———————————Node:call_expression Text: q->setError(systemErrorString(st), QCanBusDevice::ReadError)
|————————————Node:field_expression Text: q->setError
|—————————————Node:identifier Text: q
|—————————————Node:-> Text: ->
|—————————————Node:field_identifier Text: setError
|————————————Node:argument_list Text: (systemErrorString(st), QCanBusDevice::ReadError)
|—————————————Node:( Text: (
|—————————————Node:call_expression Text: systemErrorString(st)
|——————————————Node:identifier Text: systemErrorString
|——————————————Node:argument_list Text: (st)
|———————————————Node:( Text: (
|———————————————Node:identifier Text: st
|———————————————Node:) Text: )
|—————————————Node:, Text: ,
|—————————————Node:qualified_identifier Text: QCanBusDevice::ReadError
|——————————————Node:namespace_identifier Text: QCanBusDevice
|——————————————Node::: Text: ::
|——————————————Node:identifier Text: ReadError
|—————————————Node:) Text: )
|———————————Node:; Text: ;
|—————————Node:break_statement Text: break;
|——————————Node:break Text: break
|——————————Node:; Text: ;
|—————————Node:} Text: }
|———————Node:comment
|———————Node:comment
|———————Node:if_statement Text: if (Q_UNLIKELY(message.MSGTYPE & PCAN_MESSAGE_STATUS))
                continue;
|————————Node:if Text: if
|————————Node:condition_clause Text: (Q_UNLIKELY(message.MSGTYPE & PCAN_MESSAGE_STATUS))
|—————————Node:( Text: (
|—————————Node:call_expression Text: Q_UNLIKELY(message.MSGTYPE & PCAN_MESSAGE_STATUS)
|——————————Node:identifier Text: Q_UNLIKELY
|——————————Node:argument_list Text: (message.MSGTYPE & PCAN_MESSAGE_STATUS)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: message.MSGTYPE & PCAN_MESSAGE_STATUS
|————————————Node:field_expression Text: message.MSGTYPE
|—————————————Node:identifier Text: message
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: MSGTYPE
|————————————Node:& Text: &
|————————————Node:identifier Text: PCAN_MESSAGE_STATUS
|———————————Node:) Text: )
|—————————Node:) Text: )
|————————Node:continue_statement Text: continue;
|—————————Node:continue Text: continue
|—————————Node:; Text: ;
|———————Node:declaration Text: const int size = dlcToSize(static_cast<CanFrameDlc>(message.DLC));
|————————Node:type_qualifier Text: const
|—————————Node:const Text: const
|————————Node:primitive_type Text: int
|————————Node:init_declarator Text: size = dlcToSize(static_cast<CanFrameDlc>(message.DLC))
|—————————Node:identifier Text: size
|—————————Node:= Text: =
|—————————Node:call_expression Text: dlcToSize(static_cast<CanFrameDlc>(message.DLC))
|——————————Node:identifier Text: dlcToSize
|——————————Node:argument_list Text: (static_cast<CanFrameDlc>(message.DLC))
|———————————Node:( Text: (
|———————————Node:call_expression Text: static_cast<CanFrameDlc>(message.DLC)
|————————————Node:template_function Text: static_cast<CanFrameDlc>
|—————————————Node:identifier Text: static_cast
|—————————————Node:template_argument_list Text: <CanFrameDlc>
|——————————————Node:< Text: <
|——————————————Node:type_descriptor Text: CanFrameDlc
|———————————————Node:type_identifier Text: CanFrameDlc
|——————————————Node:> Text: >
|————————————Node:argument_list Text: (message.DLC)
|—————————————Node:( Text: (
|—————————————Node:field_expression Text: message.DLC
|——————————————Node:identifier Text: message
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: DLC
|—————————————Node:) Text: )
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:declaration Text: QCanBusFrame frame(TPCANLongToFrameID(message.ID),
                               QByteArray(reinterpret_cast<const char *>(message.DATA), size));
|————————Node:type_identifier Text: QCanBusFrame
|————————Node:init_declarator Text: frame(TPCANLongToFrameID(message.ID),
                               QByteArray(reinterpret_cast<const char *>(message.DATA), size))
|—————————Node:identifier Text: frame
|—————————Node:argument_list Text: (TPCANLongToFrameID(message.ID),
                               QByteArray(reinterpret_cast<const char *>(message.DATA), size))
|——————————Node:( Text: (
|——————————Node:call_expression Text: TPCANLongToFrameID(message.ID)
|———————————Node:identifier Text: TPCANLongToFrameID
|———————————Node:argument_list Text: (message.ID)
|————————————Node:( Text: (
|————————————Node:field_expression Text: message.ID
|—————————————Node:identifier Text: message
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: ID
|————————————Node:) Text: )
|——————————Node:, Text: ,
|——————————Node:call_expression Text: QByteArray(reinterpret_cast<const char *>(message.DATA), size)
|———————————Node:identifier Text: QByteArray
|———————————Node:argument_list Text: (reinterpret_cast<const char *>(message.DATA), size)
|————————————Node:( Text: (
|————————————Node:call_expression Text: reinterpret_cast<const char *>(message.DATA)
|—————————————Node:template_function Text: reinterpret_cast<const char *>
|——————————————Node:identifier Text: reinterpret_cast
|——————————————Node:template_argument_list Text: <const char *>
|———————————————Node:< Text: <
|———————————————Node:type_descriptor Text: const char *
|————————————————Node:type_qualifier Text: const
|—————————————————Node:const Text: const
|————————————————Node:primitive_type Text: char
|————————————————Node:abstract_pointer_declarator Text: *
|—————————————————Node:* Text: *
|———————————————Node:> Text: >
|—————————————Node:argument_list Text: (message.DATA)
|——————————————Node:( Text: (
|——————————————Node:field_expression Text: message.DATA
|———————————————Node:identifier Text: message
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: DATA
|——————————————Node:) Text: )
|————————————Node:, Text: ,
|————————————Node:identifier Text: size
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(static_cast<qint64>(timestamp)));
|————————Node:call_expression Text: frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(static_cast<qint64>(timestamp)))
|—————————Node:field_expression Text: frame.setTimeStamp
|——————————Node:identifier Text: frame
|——————————Node:. Text: .
|——————————Node:field_identifier Text: setTimeStamp
|—————————Node:argument_list Text: (QCanBusFrame::TimeStamp::fromMicroSeconds(static_cast<qint64>(timestamp)))
|——————————Node:( Text: (
|——————————Node:call_expression Text: QCanBusFrame::TimeStamp::fromMicroSeconds(static_cast<qint64>(timestamp))
|———————————Node:qualified_identifier Text: QCanBusFrame::TimeStamp::fromMicroSeconds
|————————————Node:namespace_identifier Text: QCanBusFrame
|————————————Node::: Text: ::
|————————————Node:qualified_identifier Text: TimeStamp::fromMicroSeconds
|—————————————Node:namespace_identifier Text: TimeStamp
|—————————————Node::: Text: ::
|—————————————Node:identifier Text: fromMicroSeconds
|———————————Node:argument_list Text: (static_cast<qint64>(timestamp))
|————————————Node:( Text: (
|————————————Node:call_expression Text: static_cast<qint64>(timestamp)
|—————————————Node:template_function Text: static_cast<qint64>
|——————————————Node:identifier Text: static_cast
|——————————————Node:template_argument_list Text: <qint64>
|———————————————Node:< Text: <
|———————————————Node:type_descriptor Text: qint64
|————————————————Node:type_identifier Text: qint64
|———————————————Node:> Text: >
|—————————————Node:argument_list Text: (timestamp)
|——————————————Node:( Text: (
|——————————————Node:identifier Text: timestamp
|——————————————Node:) Text: )
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: frame.setExtendedFrameFormat(message.MSGTYPE & PCAN_MESSAGE_EXTENDED);
|————————Node:call_expression Text: frame.setExtendedFrameFormat(message.MSGTYPE & PCAN_MESSAGE_EXTENDED)
|—————————Node:field_expression Text: frame.setExtendedFrameFormat
|——————————Node:identifier Text: frame
|——————————Node:. Text: .
|——————————Node:field_identifier Text: setExtendedFrameFormat
|—————————Node:argument_list Text: (message.MSGTYPE & PCAN_MESSAGE_EXTENDED)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: message.MSGTYPE & PCAN_MESSAGE_EXTENDED
|———————————Node:field_expression Text: message.MSGTYPE
|————————————Node:identifier Text: message
|————————————Node:. Text: .
|————————————Node:field_identifier Text: MSGTYPE
|———————————Node:& Text: &
|———————————Node:identifier Text: PCAN_MESSAGE_EXTENDED
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: frame.setFrameType((message.MSGTYPE & PCAN_MESSAGE_RTR)
                               ? QCanBusFrame::RemoteRequestFrame : QCanBusFrame::DataFrame);
|————————Node:call_expression Text: frame.setFrameType((message.MSGTYPE & PCAN_MESSAGE_RTR)
                               ? QCanBusFrame::RemoteRequestFrame : QCanBusFrame::DataFrame)
|—————————Node:field_expression Text: frame.setFrameType
|——————————Node:identifier Text: frame
|——————————Node:. Text: .
|——————————Node:field_identifier Text: setFrameType
|—————————Node:argument_list Text: ((message.MSGTYPE & PCAN_MESSAGE_RTR)
                               ? QCanBusFrame::RemoteRequestFrame : QCanBusFrame::DataFrame)
|——————————Node:( Text: (
|——————————Node:conditional_expression Text: (message.MSGTYPE & PCAN_MESSAGE_RTR)
                               ? QCanBusFrame::RemoteRequestFrame : QCanBusFrame::DataFrame
|———————————Node:parenthesized_expression Text: (message.MSGTYPE & PCAN_MESSAGE_RTR)
|————————————Node:( Text: (
|————————————Node:binary_expression Text: message.MSGTYPE & PCAN_MESSAGE_RTR
|—————————————Node:field_expression Text: message.MSGTYPE
|——————————————Node:identifier Text: message
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: MSGTYPE
|—————————————Node:& Text: &
|—————————————Node:identifier Text: PCAN_MESSAGE_RTR
|————————————Node:) Text: )
|———————————Node:? Text: ?
|———————————Node:qualified_identifier Text: QCanBusFrame::RemoteRequestFrame
|————————————Node:namespace_identifier Text: QCanBusFrame
|————————————Node::: Text: ::
|————————————Node:identifier Text: RemoteRequestFrame
|———————————Node:: Text: :
|———————————Node:qualified_identifier Text: QCanBusFrame::DataFrame
|————————————Node:namespace_identifier Text: QCanBusFrame
|————————————Node::: Text: ::
|————————————Node:identifier Text: DataFrame
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: frame.setFlexibleDataRateFormat(message.MSGTYPE & PCAN_MESSAGE_FD);
|————————Node:call_expression Text: frame.setFlexibleDataRateFormat(message.MSGTYPE & PCAN_MESSAGE_FD)
|—————————Node:field_expression Text: frame.setFlexibleDataRateFormat
|——————————Node:identifier Text: frame
|——————————Node:. Text: .
|——————————Node:field_identifier Text: setFlexibleDataRateFormat
|—————————Node:argument_list Text: (message.MSGTYPE & PCAN_MESSAGE_FD)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: message.MSGTYPE & PCAN_MESSAGE_FD
|———————————Node:field_expression Text: message.MSGTYPE
|————————————Node:identifier Text: message
|————————————Node:. Text: .
|————————————Node:field_identifier Text: MSGTYPE
|———————————Node:& Text: &
|———————————Node:identifier Text: PCAN_MESSAGE_FD
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: frame.setBitrateSwitch(message.MSGTYPE & PCAN_MESSAGE_BRS);
|————————Node:call_expression Text: frame.setBitrateSwitch(message.MSGTYPE & PCAN_MESSAGE_BRS)
|—————————Node:field_expression Text: frame.setBitrateSwitch
|——————————Node:identifier Text: frame
|——————————Node:. Text: .
|——————————Node:field_identifier Text: setBitrateSwitch
|—————————Node:argument_list Text: (message.MSGTYPE & PCAN_MESSAGE_BRS)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: message.MSGTYPE & PCAN_MESSAGE_BRS
|———————————Node:field_expression Text: message.MSGTYPE
|————————————Node:identifier Text: message
|————————————Node:. Text: .
|————————————Node:field_identifier Text: MSGTYPE
|———————————Node:& Text: &
|———————————Node:identifier Text: PCAN_MESSAGE_BRS
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: frame.setErrorStateIndicator(message.MSGTYPE & PCAN_MESSAGE_ESI);
|————————Node:call_expression Text: frame.setErrorStateIndicator(message.MSGTYPE & PCAN_MESSAGE_ESI)
|—————————Node:field_expression Text: frame.setErrorStateIndicator
|——————————Node:identifier Text: frame
|——————————Node:. Text: .
|——————————Node:field_identifier Text: setErrorStateIndicator
|—————————Node:argument_list Text: (message.MSGTYPE & PCAN_MESSAGE_ESI)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: message.MSGTYPE & PCAN_MESSAGE_ESI
|———————————Node:field_expression Text: message.MSGTYPE
|————————————Node:identifier Text: message
|————————————Node:. Text: .
|————————————Node:field_identifier Text: MSGTYPE
|———————————Node:& Text: &
|———————————Node:identifier Text: PCAN_MESSAGE_ESI
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: newFrames.append(std::move(frame));
|————————Node:call_expression Text: newFrames.append(std::move(frame))
|—————————Node:field_expression Text: newFrames.append
|——————————Node:identifier Text: newFrames
|——————————Node:. Text: .
|——————————Node:field_identifier Text: append
|—————————Node:argument_list Text: (std::move(frame))
|——————————Node:( Text: (
|——————————Node:call_expression Text: std::move(frame)
|———————————Node:qualified_identifier Text: std::move
|————————————Node:namespace_identifier Text: std
|————————————Node::: Text: ::
|————————————Node:identifier Text: move
|———————————Node:argument_list Text: (frame)
|————————————Node:( Text: (
|————————————Node:identifier Text: frame
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|——————Node:else_clause Text: else {
            TPCANMsg message = {};
            TPCANTimestamp timestamp = {};

            const TPCANStatus st = ::CAN_Read(channelIndex, &message, &timestamp);
            if (st != PCAN_ERROR_OK) {
                if (Q_UNLIKELY(st != PCAN_ERROR_QRCVEMPTY))
                    q->setError(systemErrorString(st), QCanBusDevice::ReadError);
                break;
            }

            // Filter out PCAN status frames, to avoid turning them
            // into QCanBusFrame::DataFrames with random canId
            if (Q_UNLIKELY(message.MSGTYPE & PCAN_MESSAGE_STATUS))
                continue;

            const int size = static_cast<int>(message.LEN);
            QCanBusFrame frame(TPCANLongToFrameID(message.ID),
                               QByteArray(reinterpret_cast<const char *>(message.DATA), size));
            const quint64 millis = timestamp.millis + Q_UINT64_C(0xFFFFFFFF) * timestamp.millis_overflow;
            const quint64 micros = Q_UINT64_C(1000) * millis + timestamp.micros;
            frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(static_cast<qint64>(micros)));
            frame.setExtendedFrameFormat(message.MSGTYPE & PCAN_MESSAGE_EXTENDED);
            frame.setFrameType((message.MSGTYPE & PCAN_MESSAGE_RTR)
                               ? QCanBusFrame::RemoteRequestFrame : QCanBusFrame::DataFrame);

            newFrames.append(std::move(frame));
        }
|———————Node:else Text: else
|———————Node:compound_statement Text: {
            TPCANMsg message = {};
            TPCANTimestamp timestamp = {};

            const TPCANStatus st = ::CAN_Read(channelIndex, &message, &timestamp);
            if (st != PCAN_ERROR_OK) {
                if (Q_UNLIKELY(st != PCAN_ERROR_QRCVEMPTY))
                    q->setError(systemErrorString(st), QCanBusDevice::ReadError);
                break;
            }

            // Filter out PCAN status frames, to avoid turning them
            // into QCanBusFrame::DataFrames with random canId
            if (Q_UNLIKELY(message.MSGTYPE & PCAN_MESSAGE_STATUS))
                continue;

            const int size = static_cast<int>(message.LEN);
            QCanBusFrame frame(TPCANLongToFrameID(message.ID),
                               QByteArray(reinterpret_cast<const char *>(message.DATA), size));
            const quint64 millis = timestamp.millis + Q_UINT64_C(0xFFFFFFFF) * timestamp.millis_overflow;
            const quint64 micros = Q_UINT64_C(1000) * millis + timestamp.micros;
            frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(static_cast<qint64>(micros)));
            frame.setExtendedFrameFormat(message.MSGTYPE & PCAN_MESSAGE_EXTENDED);
            frame.setFrameType((message.MSGTYPE & PCAN_MESSAGE_RTR)
                               ? QCanBusFrame::RemoteRequestFrame : QCanBusFrame::DataFrame);

            newFrames.append(std::move(frame));
        }
|————————Node:{ Text: {
|————————Node:declaration Text: TPCANMsg message = {};
|—————————Node:type_identifier Text: TPCANMsg
|—————————Node:init_declarator Text: message = {}
|——————————Node:identifier Text: message
|——————————Node:= Text: =
|——————————Node:initializer_list Text: {}
|———————————Node:{ Text: {
|———————————Node:} Text: }
|—————————Node:; Text: ;
|————————Node:declaration Text: TPCANTimestamp timestamp = {};
|—————————Node:type_identifier Text: TPCANTimestamp
|—————————Node:init_declarator Text: timestamp = {}
|——————————Node:identifier Text: timestamp
|——————————Node:= Text: =
|——————————Node:initializer_list Text: {}
|———————————Node:{ Text: {
|———————————Node:} Text: }
|—————————Node:; Text: ;
|————————Node:declaration Text: const TPCANStatus st = ::CAN_Read(channelIndex, &message, &timestamp);
|—————————Node:type_qualifier Text: const
|——————————Node:const Text: const
|—————————Node:type_identifier Text: TPCANStatus
|—————————Node:init_declarator Text: st = ::CAN_Read(channelIndex, &message, &timestamp)
|——————————Node:identifier Text: st
|——————————Node:= Text: =
|——————————Node:call_expression Text: ::CAN_Read(channelIndex, &message, &timestamp)
|———————————Node:qualified_identifier Text: ::CAN_Read
|————————————Node::: Text: ::
|————————————Node:identifier Text: CAN_Read
|———————————Node:argument_list Text: (channelIndex, &message, &timestamp)
|————————————Node:( Text: (
|————————————Node:identifier Text: channelIndex
|————————————Node:, Text: ,
|————————————Node:pointer_expression Text: &message
|—————————————Node:& Text: &
|—————————————Node:identifier Text: message
|————————————Node:, Text: ,
|————————————Node:pointer_expression Text: &timestamp
|—————————————Node:& Text: &
|—————————————Node:identifier Text: timestamp
|————————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:if_statement Text: if (st != PCAN_ERROR_OK) {
                if (Q_UNLIKELY(st != PCAN_ERROR_QRCVEMPTY))
                    q->setError(systemErrorString(st), QCanBusDevice::ReadError);
                break;
            }
|—————————Node:if Text: if
|—————————Node:condition_clause Text: (st != PCAN_ERROR_OK)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: st != PCAN_ERROR_OK
|———————————Node:identifier Text: st
|———————————Node:!= Text: !=
|———————————Node:identifier Text: PCAN_ERROR_OK
|——————————Node:) Text: )
|—————————Node:compound_statement Text: {
                if (Q_UNLIKELY(st != PCAN_ERROR_QRCVEMPTY))
                    q->setError(systemErrorString(st), QCanBusDevice::ReadError);
                break;
            }
|——————————Node:{ Text: {
|——————————Node:if_statement Text: if (Q_UNLIKELY(st != PCAN_ERROR_QRCVEMPTY))
                    q->setError(systemErrorString(st), QCanBusDevice::ReadError);
|———————————Node:if Text: if
|———————————Node:condition_clause Text: (Q_UNLIKELY(st != PCAN_ERROR_QRCVEMPTY))
|————————————Node:( Text: (
|————————————Node:call_expression Text: Q_UNLIKELY(st != PCAN_ERROR_QRCVEMPTY)
|—————————————Node:identifier Text: Q_UNLIKELY
|—————————————Node:argument_list Text: (st != PCAN_ERROR_QRCVEMPTY)
|——————————————Node:( Text: (
|——————————————Node:binary_expression Text: st != PCAN_ERROR_QRCVEMPTY
|———————————————Node:identifier Text: st
|———————————————Node:!= Text: !=
|———————————————Node:identifier Text: PCAN_ERROR_QRCVEMPTY
|——————————————Node:) Text: )
|————————————Node:) Text: )
|———————————Node:expression_statement Text: q->setError(systemErrorString(st), QCanBusDevice::ReadError);
|————————————Node:call_expression Text: q->setError(systemErrorString(st), QCanBusDevice::ReadError)
|—————————————Node:field_expression Text: q->setError
|——————————————Node:identifier Text: q
|——————————————Node:-> Text: ->
|——————————————Node:field_identifier Text: setError
|—————————————Node:argument_list Text: (systemErrorString(st), QCanBusDevice::ReadError)
|——————————————Node:( Text: (
|——————————————Node:call_expression Text: systemErrorString(st)
|———————————————Node:identifier Text: systemErrorString
|———————————————Node:argument_list Text: (st)
|————————————————Node:( Text: (
|————————————————Node:identifier Text: st
|————————————————Node:) Text: )
|——————————————Node:, Text: ,
|——————————————Node:qualified_identifier Text: QCanBusDevice::ReadError
|———————————————Node:namespace_identifier Text: QCanBusDevice
|———————————————Node::: Text: ::
|———————————————Node:identifier Text: ReadError
|——————————————Node:) Text: )
|————————————Node:; Text: ;
|——————————Node:break_statement Text: break;
|———————————Node:break Text: break
|———————————Node:; Text: ;
|——————————Node:} Text: }
|————————Node:comment
|————————Node:comment
|————————Node:if_statement Text: if (Q_UNLIKELY(message.MSGTYPE & PCAN_MESSAGE_STATUS))
                continue;
|—————————Node:if Text: if
|—————————Node:condition_clause Text: (Q_UNLIKELY(message.MSGTYPE & PCAN_MESSAGE_STATUS))
|——————————Node:( Text: (
|——————————Node:call_expression Text: Q_UNLIKELY(message.MSGTYPE & PCAN_MESSAGE_STATUS)
|———————————Node:identifier Text: Q_UNLIKELY
|———————————Node:argument_list Text: (message.MSGTYPE & PCAN_MESSAGE_STATUS)
|————————————Node:( Text: (
|————————————Node:binary_expression Text: message.MSGTYPE & PCAN_MESSAGE_STATUS
|—————————————Node:field_expression Text: message.MSGTYPE
|——————————————Node:identifier Text: message
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: MSGTYPE
|—————————————Node:& Text: &
|—————————————Node:identifier Text: PCAN_MESSAGE_STATUS
|————————————Node:) Text: )
|——————————Node:) Text: )
|—————————Node:continue_statement Text: continue;
|——————————Node:continue Text: continue
|——————————Node:; Text: ;
|————————Node:declaration Text: const int size = static_cast<int>(message.LEN);
|—————————Node:type_qualifier Text: const
|——————————Node:const Text: const
|—————————Node:primitive_type Text: int
|—————————Node:init_declarator Text: size = static_cast<int>(message.LEN)
|——————————Node:identifier Text: size
|——————————Node:= Text: =
|——————————Node:call_expression Text: static_cast<int>(message.LEN)
|———————————Node:template_function Text: static_cast<int>
|————————————Node:identifier Text: static_cast
|————————————Node:template_argument_list Text: <int>
|—————————————Node:< Text: <
|—————————————Node:type_descriptor Text: int
|——————————————Node:primitive_type Text: int
|—————————————Node:> Text: >
|———————————Node:argument_list Text: (message.LEN)
|————————————Node:( Text: (
|————————————Node:field_expression Text: message.LEN
|—————————————Node:identifier Text: message
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: LEN
|————————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:declaration Text: QCanBusFrame frame(TPCANLongToFrameID(message.ID),
                               QByteArray(reinterpret_cast<const char *>(message.DATA), size));
|—————————Node:type_identifier Text: QCanBusFrame
|—————————Node:init_declarator Text: frame(TPCANLongToFrameID(message.ID),
                               QByteArray(reinterpret_cast<const char *>(message.DATA), size))
|——————————Node:identifier Text: frame
|——————————Node:argument_list Text: (TPCANLongToFrameID(message.ID),
                               QByteArray(reinterpret_cast<const char *>(message.DATA), size))
|———————————Node:( Text: (
|———————————Node:call_expression Text: TPCANLongToFrameID(message.ID)
|————————————Node:identifier Text: TPCANLongToFrameID
|————————————Node:argument_list Text: (message.ID)
|—————————————Node:( Text: (
|—————————————Node:field_expression Text: message.ID
|——————————————Node:identifier Text: message
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: ID
|—————————————Node:) Text: )
|———————————Node:, Text: ,
|———————————Node:call_expression Text: QByteArray(reinterpret_cast<const char *>(message.DATA), size)
|————————————Node:identifier Text: QByteArray
|————————————Node:argument_list Text: (reinterpret_cast<const char *>(message.DATA), size)
|—————————————Node:( Text: (
|—————————————Node:call_expression Text: reinterpret_cast<const char *>(message.DATA)
|——————————————Node:template_function Text: reinterpret_cast<const char *>
|———————————————Node:identifier Text: reinterpret_cast
|———————————————Node:template_argument_list Text: <const char *>
|————————————————Node:< Text: <
|————————————————Node:type_descriptor Text: const char *
|—————————————————Node:type_qualifier Text: const
|——————————————————Node:const Text: const
|—————————————————Node:primitive_type Text: char
|—————————————————Node:abstract_pointer_declarator Text: *
|——————————————————Node:* Text: *
|————————————————Node:> Text: >
|——————————————Node:argument_list Text: (message.DATA)
|———————————————Node:( Text: (
|———————————————Node:field_expression Text: message.DATA
|————————————————Node:identifier Text: message
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: DATA
|———————————————Node:) Text: )
|—————————————Node:, Text: ,
|—————————————Node:identifier Text: size
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:declaration Text: const quint64 millis = timestamp.millis + Q_UINT64_C(0xFFFFFFFF) * timestamp.millis_overflow;
|—————————Node:type_qualifier Text: const
|——————————Node:const Text: const
|—————————Node:type_identifier Text: quint64
|—————————Node:init_declarator Text: millis = timestamp.millis + Q_UINT64_C(0xFFFFFFFF) * timestamp.millis_overflow
|——————————Node:identifier Text: millis
|——————————Node:= Text: =
|——————————Node:binary_expression Text: timestamp.millis + Q_UINT64_C(0xFFFFFFFF) * timestamp.millis_overflow
|———————————Node:field_expression Text: timestamp.millis
|————————————Node:identifier Text: timestamp
|————————————Node:. Text: .
|————————————Node:field_identifier Text: millis
|———————————Node:+ Text: +
|———————————Node:binary_expression Text: Q_UINT64_C(0xFFFFFFFF) * timestamp.millis_overflow
|————————————Node:call_expression Text: Q_UINT64_C(0xFFFFFFFF)
|—————————————Node:identifier Text: Q_UINT64_C
|—————————————Node:argument_list Text: (0xFFFFFFFF)
|——————————————Node:( Text: (
|——————————————Node:number_literal Text: 0xFFFFFFFF
|——————————————Node:) Text: )
|————————————Node:* Text: *
|————————————Node:field_expression Text: timestamp.millis_overflow
|—————————————Node:identifier Text: timestamp
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: millis_overflow
|—————————Node:; Text: ;
|————————Node:declaration Text: const quint64 micros = Q_UINT64_C(1000) * millis + timestamp.micros;
|—————————Node:type_qualifier Text: const
|——————————Node:const Text: const
|—————————Node:type_identifier Text: quint64
|—————————Node:init_declarator Text: micros = Q_UINT64_C(1000) * millis + timestamp.micros
|——————————Node:identifier Text: micros
|——————————Node:= Text: =
|——————————Node:binary_expression Text: Q_UINT64_C(1000) * millis + timestamp.micros
|———————————Node:binary_expression Text: Q_UINT64_C(1000) * millis
|————————————Node:call_expression Text: Q_UINT64_C(1000)
|—————————————Node:identifier Text: Q_UINT64_C
|—————————————Node:argument_list Text: (1000)
|——————————————Node:( Text: (
|——————————————Node:number_literal Text: 1000
|——————————————Node:) Text: )
|————————————Node:* Text: *
|————————————Node:identifier Text: millis
|———————————Node:+ Text: +
|———————————Node:field_expression Text: timestamp.micros
|————————————Node:identifier Text: timestamp
|————————————Node:. Text: .
|————————————Node:field_identifier Text: micros
|—————————Node:; Text: ;
|————————Node:expression_statement Text: frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(static_cast<qint64>(micros)));
|—————————Node:call_expression Text: frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(static_cast<qint64>(micros)))
|——————————Node:field_expression Text: frame.setTimeStamp
|———————————Node:identifier Text: frame
|———————————Node:. Text: .
|———————————Node:field_identifier Text: setTimeStamp
|——————————Node:argument_list Text: (QCanBusFrame::TimeStamp::fromMicroSeconds(static_cast<qint64>(micros)))
|———————————Node:( Text: (
|———————————Node:call_expression Text: QCanBusFrame::TimeStamp::fromMicroSeconds(static_cast<qint64>(micros))
|————————————Node:qualified_identifier Text: QCanBusFrame::TimeStamp::fromMicroSeconds
|—————————————Node:namespace_identifier Text: QCanBusFrame
|—————————————Node::: Text: ::
|—————————————Node:qualified_identifier Text: TimeStamp::fromMicroSeconds
|——————————————Node:namespace_identifier Text: TimeStamp
|——————————————Node::: Text: ::
|——————————————Node:identifier Text: fromMicroSeconds
|————————————Node:argument_list Text: (static_cast<qint64>(micros))
|—————————————Node:( Text: (
|—————————————Node:call_expression Text: static_cast<qint64>(micros)
|——————————————Node:template_function Text: static_cast<qint64>
|———————————————Node:identifier Text: static_cast
|———————————————Node:template_argument_list Text: <qint64>
|————————————————Node:< Text: <
|————————————————Node:type_descriptor Text: qint64
|—————————————————Node:type_identifier Text: qint64
|————————————————Node:> Text: >
|——————————————Node:argument_list Text: (micros)
|———————————————Node:( Text: (
|———————————————Node:identifier Text: micros
|———————————————Node:) Text: )
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: frame.setExtendedFrameFormat(message.MSGTYPE & PCAN_MESSAGE_EXTENDED);
|—————————Node:call_expression Text: frame.setExtendedFrameFormat(message.MSGTYPE & PCAN_MESSAGE_EXTENDED)
|——————————Node:field_expression Text: frame.setExtendedFrameFormat
|———————————Node:identifier Text: frame
|———————————Node:. Text: .
|———————————Node:field_identifier Text: setExtendedFrameFormat
|——————————Node:argument_list Text: (message.MSGTYPE & PCAN_MESSAGE_EXTENDED)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: message.MSGTYPE & PCAN_MESSAGE_EXTENDED
|————————————Node:field_expression Text: message.MSGTYPE
|—————————————Node:identifier Text: message
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: MSGTYPE
|————————————Node:& Text: &
|————————————Node:identifier Text: PCAN_MESSAGE_EXTENDED
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: frame.setFrameType((message.MSGTYPE & PCAN_MESSAGE_RTR)
                               ? QCanBusFrame::RemoteRequestFrame : QCanBusFrame::DataFrame);
|—————————Node:call_expression Text: frame.setFrameType((message.MSGTYPE & PCAN_MESSAGE_RTR)
                               ? QCanBusFrame::RemoteRequestFrame : QCanBusFrame::DataFrame)
|——————————Node:field_expression Text: frame.setFrameType
|———————————Node:identifier Text: frame
|———————————Node:. Text: .
|———————————Node:field_identifier Text: setFrameType
|——————————Node:argument_list Text: ((message.MSGTYPE & PCAN_MESSAGE_RTR)
                               ? QCanBusFrame::RemoteRequestFrame : QCanBusFrame::DataFrame)
|———————————Node:( Text: (
|———————————Node:conditional_expression Text: (message.MSGTYPE & PCAN_MESSAGE_RTR)
                               ? QCanBusFrame::RemoteRequestFrame : QCanBusFrame::DataFrame
|————————————Node:parenthesized_expression Text: (message.MSGTYPE & PCAN_MESSAGE_RTR)
|—————————————Node:( Text: (
|—————————————Node:binary_expression Text: message.MSGTYPE & PCAN_MESSAGE_RTR
|——————————————Node:field_expression Text: message.MSGTYPE
|———————————————Node:identifier Text: message
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: MSGTYPE
|——————————————Node:& Text: &
|——————————————Node:identifier Text: PCAN_MESSAGE_RTR
|—————————————Node:) Text: )
|————————————Node:? Text: ?
|————————————Node:qualified_identifier Text: QCanBusFrame::RemoteRequestFrame
|—————————————Node:namespace_identifier Text: QCanBusFrame
|—————————————Node::: Text: ::
|—————————————Node:identifier Text: RemoteRequestFrame
|————————————Node:: Text: :
|————————————Node:qualified_identifier Text: QCanBusFrame::DataFrame
|—————————————Node:namespace_identifier Text: QCanBusFrame
|—————————————Node::: Text: ::
|—————————————Node:identifier Text: DataFrame
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: newFrames.append(std::move(frame));
|—————————Node:call_expression Text: newFrames.append(std::move(frame))
|——————————Node:field_expression Text: newFrames.append
|———————————Node:identifier Text: newFrames
|———————————Node:. Text: .
|———————————Node:field_identifier Text: append
|——————————Node:argument_list Text: (std::move(frame))
|———————————Node:( Text: (
|———————————Node:call_expression Text: std::move(frame)
|————————————Node:qualified_identifier Text: std::move
|—————————————Node:namespace_identifier Text: std
|—————————————Node::: Text: ::
|—————————————Node:identifier Text: move
|————————————Node:argument_list Text: (frame)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: frame
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:} Text: }
|—————Node:} Text: }
|———Node:expression_statement Text: q->enqueueReceivedFrames(newFrames);
|————Node:call_expression Text: q->enqueueReceivedFrames(newFrames)
|—————Node:field_expression Text: q->enqueueReceivedFrames
|——————Node:identifier Text: q
|——————Node:-> Text: ->
|——————Node:field_identifier Text: enqueueReceivedFrames
|—————Node:argument_list Text: (newFrames)
|——————Node:( Text: (
|——————Node:identifier Text: newFrames
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: bool PeakCanBackendPrivate::verifyBitRate(int bitrate)
{
    Q_Q(PeakCanBackend);

    if (Q_UNLIKELY(isOpen)) {
        const char errorString[] = "Cannot change bitrate for already opened device.";
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, errorString);
        q->setError(PeakCanBackend::tr(errorString), QCanBusDevice::ConfigurationError);
        return false;
    }

    bool isValidBitrate = false;
    if (q->configurationParameter(QCanBusDevice::CanFdKey).toBool())
        isValidBitrate = !nominalBitrateString(bitrate).isEmpty();
    else
        isValidBitrate = bitrateCodeFromBitrate(bitrate) != PCAN_BAUD_INVALID;

    if (Q_UNLIKELY(!isValidBitrate)) {
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Unsupported bitrate value: %d.", bitrate);
        q->setError(PeakCanBackend::tr("Unsupported bitrate value: %1.").arg(bitrate),
                    QCanBusDevice::ConfigurationError);
    }

    return isValidBitrate;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: PeakCanBackendPrivate::verifyBitRate(int bitrate)
|———Node:qualified_identifier Text: PeakCanBackendPrivate::verifyBitRate
|————Node:namespace_identifier Text: PeakCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: verifyBitRate
|———Node:parameter_list Text: (int bitrate)
|————Node:( Text: (
|————Node:parameter_declaration Text: int bitrate
|—————Node:primitive_type Text: int
|—————Node:identifier Text: bitrate
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(PeakCanBackend);

    if (Q_UNLIKELY(isOpen)) {
        const char errorString[] = "Cannot change bitrate for already opened device.";
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, errorString);
        q->setError(PeakCanBackend::tr(errorString), QCanBusDevice::ConfigurationError);
        return false;
    }

    bool isValidBitrate = false;
    if (q->configurationParameter(QCanBusDevice::CanFdKey).toBool())
        isValidBitrate = !nominalBitrateString(bitrate).isEmpty();
    else
        isValidBitrate = bitrateCodeFromBitrate(bitrate) != PCAN_BAUD_INVALID;

    if (Q_UNLIKELY(!isValidBitrate)) {
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Unsupported bitrate value: %d.", bitrate);
        q->setError(PeakCanBackend::tr("Unsupported bitrate value: %1.").arg(bitrate),
                    QCanBusDevice::ConfigurationError);
    }

    return isValidBitrate;
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(PeakCanBackend);
|————Node:call_expression Text: Q_Q(PeakCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (PeakCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: PeakCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(isOpen)) {
        const char errorString[] = "Cannot change bitrate for already opened device.";
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, errorString);
        q->setError(PeakCanBackend::tr(errorString), QCanBusDevice::ConfigurationError);
        return false;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(isOpen))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(isOpen)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (isOpen)
|———————Node:( Text: (
|———————Node:identifier Text: isOpen
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        const char errorString[] = "Cannot change bitrate for already opened device.";
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, errorString);
        q->setError(PeakCanBackend::tr(errorString), QCanBusDevice::ConfigurationError);
        return false;
    }
|—————Node:{ Text: {
|—————Node:declaration Text: const char errorString[] = "Cannot change bitrate for already opened device.";
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:primitive_type Text: char
|——————Node:init_declarator Text: errorString[] = "Cannot change bitrate for already opened device."
|———————Node:array_declarator Text: errorString[]
|————————Node:identifier Text: errorString
|————————Node:[ Text: [
|————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:string_literal Text: "Cannot change bitrate for already opened device."
|————————Node:" Text: "
|————————Node:string_content Text: Cannot change bitrate for already opened device.
|————————Node:" Text: "
|——————Node:; Text: ;
|—————Node:expression_statement Text: qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, errorString);
|——————Node:call_expression Text: qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, errorString)
|———————Node:identifier Text: qCWarning
|———————Node:argument_list Text: (QT_CANBUS_PLUGINS_PEAKCAN, errorString)
|————————Node:( Text: (
|————————Node:identifier Text: QT_CANBUS_PLUGINS_PEAKCAN
|————————Node:, Text: ,
|————————Node:identifier Text: errorString
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: q->setError(PeakCanBackend::tr(errorString), QCanBusDevice::ConfigurationError);
|——————Node:call_expression Text: q->setError(PeakCanBackend::tr(errorString), QCanBusDevice::ConfigurationError)
|———————Node:field_expression Text: q->setError
|————————Node:identifier Text: q
|————————Node:-> Text: ->
|————————Node:field_identifier Text: setError
|———————Node:argument_list Text: (PeakCanBackend::tr(errorString), QCanBusDevice::ConfigurationError)
|————————Node:( Text: (
|————————Node:call_expression Text: PeakCanBackend::tr(errorString)
|—————————Node:qualified_identifier Text: PeakCanBackend::tr
|——————————Node:namespace_identifier Text: PeakCanBackend
|——————————Node::: Text: ::
|——————————Node:identifier Text: tr
|—————————Node:argument_list Text: (errorString)
|——————————Node:( Text: (
|——————————Node:identifier Text: errorString
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:qualified_identifier Text: QCanBusDevice::ConfigurationError
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:identifier Text: ConfigurationError
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return false;
|——————Node:return Text: return
|——————Node:false Text: false
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:declaration Text: bool isValidBitrate = false;
|————Node:primitive_type Text: bool
|————Node:init_declarator Text: isValidBitrate = false
|—————Node:identifier Text: isValidBitrate
|—————Node:= Text: =
|—————Node:false Text: false
|————Node:; Text: ;
|———Node:if_statement Text: if (q->configurationParameter(QCanBusDevice::CanFdKey).toBool())
        isValidBitrate = !nominalBitrateString(bitrate).isEmpty();
    else
        isValidBitrate = bitrateCodeFromBitrate(bitrate) != PCAN_BAUD_INVALID;
|————Node:if Text: if
|————Node:condition_clause Text: (q->configurationParameter(QCanBusDevice::CanFdKey).toBool())
|—————Node:( Text: (
|—————Node:call_expression Text: q->configurationParameter(QCanBusDevice::CanFdKey).toBool()
|——————Node:field_expression Text: q->configurationParameter(QCanBusDevice::CanFdKey).toBool
|———————Node:call_expression Text: q->configurationParameter(QCanBusDevice::CanFdKey)
|————————Node:field_expression Text: q->configurationParameter
|—————————Node:identifier Text: q
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: configurationParameter
|————————Node:argument_list Text: (QCanBusDevice::CanFdKey)
|—————————Node:( Text: (
|—————————Node:qualified_identifier Text: QCanBusDevice::CanFdKey
|——————————Node:namespace_identifier Text: QCanBusDevice
|——————————Node::: Text: ::
|——————————Node:identifier Text: CanFdKey
|—————————Node:) Text: )
|———————Node:. Text: .
|———————Node:field_identifier Text: toBool
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:expression_statement Text: isValidBitrate = !nominalBitrateString(bitrate).isEmpty();
|—————Node:assignment_expression Text: isValidBitrate = !nominalBitrateString(bitrate).isEmpty()
|——————Node:identifier Text: isValidBitrate
|——————Node:= Text: =
|——————Node:unary_expression Text: !nominalBitrateString(bitrate).isEmpty()
|———————Node:! Text: !
|———————Node:call_expression Text: nominalBitrateString(bitrate).isEmpty()
|————————Node:field_expression Text: nominalBitrateString(bitrate).isEmpty
|—————————Node:call_expression Text: nominalBitrateString(bitrate)
|——————————Node:identifier Text: nominalBitrateString
|——————————Node:argument_list Text: (bitrate)
|———————————Node:( Text: (
|———————————Node:identifier Text: bitrate
|———————————Node:) Text: )
|—————————Node:. Text: .
|—————————Node:field_identifier Text: isEmpty
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|—————Node:; Text: ;
|————Node:else_clause Text: else
        isValidBitrate = bitrateCodeFromBitrate(bitrate) != PCAN_BAUD_INVALID;
|—————Node:else Text: else
|—————Node:expression_statement Text: isValidBitrate = bitrateCodeFromBitrate(bitrate) != PCAN_BAUD_INVALID;
|——————Node:assignment_expression Text: isValidBitrate = bitrateCodeFromBitrate(bitrate) != PCAN_BAUD_INVALID
|———————Node:identifier Text: isValidBitrate
|———————Node:= Text: =
|———————Node:binary_expression Text: bitrateCodeFromBitrate(bitrate) != PCAN_BAUD_INVALID
|————————Node:call_expression Text: bitrateCodeFromBitrate(bitrate)
|—————————Node:identifier Text: bitrateCodeFromBitrate
|—————————Node:argument_list Text: (bitrate)
|——————————Node:( Text: (
|——————————Node:identifier Text: bitrate
|——————————Node:) Text: )
|————————Node:!= Text: !=
|————————Node:identifier Text: PCAN_BAUD_INVALID
|——————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(!isValidBitrate)) {
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Unsupported bitrate value: %d.", bitrate);
        q->setError(PeakCanBackend::tr("Unsupported bitrate value: %1.").arg(bitrate),
                    QCanBusDevice::ConfigurationError);
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(!isValidBitrate))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(!isValidBitrate)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (!isValidBitrate)
|———————Node:( Text: (
|———————Node:unary_expression Text: !isValidBitrate
|————————Node:! Text: !
|————————Node:identifier Text: isValidBitrate
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Unsupported bitrate value: %d.", bitrate);
        q->setError(PeakCanBackend::tr("Unsupported bitrate value: %1.").arg(bitrate),
                    QCanBusDevice::ConfigurationError);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Unsupported bitrate value: %d.", bitrate);
|——————Node:call_expression Text: qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Unsupported bitrate value: %d.", bitrate)
|———————Node:identifier Text: qCWarning
|———————Node:argument_list Text: (QT_CANBUS_PLUGINS_PEAKCAN, "Unsupported bitrate value: %d.", bitrate)
|————————Node:( Text: (
|————————Node:identifier Text: QT_CANBUS_PLUGINS_PEAKCAN
|————————Node:, Text: ,
|————————Node:string_literal Text: "Unsupported bitrate value: %d."
|—————————Node:" Text: "
|—————————Node:string_content Text: Unsupported bitrate value: %d.
|—————————Node:" Text: "
|————————Node:, Text: ,
|————————Node:identifier Text: bitrate
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: q->setError(PeakCanBackend::tr("Unsupported bitrate value: %1.").arg(bitrate),
                    QCanBusDevice::ConfigurationError);
|——————Node:call_expression Text: q->setError(PeakCanBackend::tr("Unsupported bitrate value: %1.").arg(bitrate),
                    QCanBusDevice::ConfigurationError)
|———————Node:field_expression Text: q->setError
|————————Node:identifier Text: q
|————————Node:-> Text: ->
|————————Node:field_identifier Text: setError
|———————Node:argument_list Text: (PeakCanBackend::tr("Unsupported bitrate value: %1.").arg(bitrate),
                    QCanBusDevice::ConfigurationError)
|————————Node:( Text: (
|————————Node:call_expression Text: PeakCanBackend::tr("Unsupported bitrate value: %1.").arg(bitrate)
|—————————Node:field_expression Text: PeakCanBackend::tr("Unsupported bitrate value: %1.").arg
|——————————Node:call_expression Text: PeakCanBackend::tr("Unsupported bitrate value: %1.")
|———————————Node:qualified_identifier Text: PeakCanBackend::tr
|————————————Node:namespace_identifier Text: PeakCanBackend
|————————————Node::: Text: ::
|————————————Node:identifier Text: tr
|———————————Node:argument_list Text: ("Unsupported bitrate value: %1.")
|————————————Node:( Text: (
|————————————Node:string_literal Text: "Unsupported bitrate value: %1."
|—————————————Node:" Text: "
|—————————————Node:string_content Text: Unsupported bitrate value: %1.
|—————————————Node:" Text: "
|————————————Node:) Text: )
|——————————Node:. Text: .
|——————————Node:field_identifier Text: arg
|—————————Node:argument_list Text: (bitrate)
|——————————Node:( Text: (
|——————————Node:identifier Text: bitrate
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:qualified_identifier Text: QCanBusDevice::ConfigurationError
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:identifier Text: ConfigurationError
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return isValidBitrate;
|————Node:return Text: return
|————Node:identifier Text: isValidBitrate
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: PeakCanBackend::PeakCanBackend(const QString &name, QObject *parent)
    : QCanBusDevice(parent)
    , d_ptr(new PeakCanBackendPrivate(this))
{
    Q_D(PeakCanBackend);

    d->setupChannel(name.toLatin1());
    d->setupDefaultConfigurations();

    std::function<void()> f = std::bind(&PeakCanBackend::resetController, this);
    setResetControllerFunction(f);

    std::function<CanBusStatus()> g = std::bind(&PeakCanBackend::busStatus, this);
    setCanBusStatusGetter(g);
}
|——Node:function_declarator Text: PeakCanBackend::PeakCanBackend(const QString &name, QObject *parent)
|———Node:qualified_identifier Text: PeakCanBackend::PeakCanBackend
|————Node:namespace_identifier Text: PeakCanBackend
|————Node::: Text: ::
|————Node:identifier Text: PeakCanBackend
|———Node:parameter_list Text: (const QString &name, QObject *parent)
|————Node:( Text: (
|————Node:parameter_declaration Text: const QString &name
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: QString
|—————Node:reference_declarator Text: &name
|——————Node:& Text: &
|——————Node:identifier Text: name
|————Node:, Text: ,
|————Node:parameter_declaration Text: QObject *parent
|—————Node:type_identifier Text: QObject
|—————Node:pointer_declarator Text: *parent
|——————Node:* Text: *
|——————Node:identifier Text: parent
|————Node:) Text: )
|——Node:field_initializer_list Text: : QCanBusDevice(parent)
    , d_ptr(new PeakCanBackendPrivate(this))
|———Node:: Text: :
|———Node:field_initializer Text: QCanBusDevice(parent)
|————Node:field_identifier Text: QCanBusDevice
|————Node:argument_list Text: (parent)
|—————Node:( Text: (
|—————Node:identifier Text: parent
|—————Node:) Text: )
|———Node:, Text: ,
|———Node:field_initializer Text: d_ptr(new PeakCanBackendPrivate(this))
|————Node:field_identifier Text: d_ptr
|————Node:argument_list Text: (new PeakCanBackendPrivate(this))
|—————Node:( Text: (
|—————Node:new_expression Text: new PeakCanBackendPrivate(this)
|——————Node:new Text: new
|——————Node:type_identifier Text: PeakCanBackendPrivate
|——————Node:argument_list Text: (this)
|———————Node:( Text: (
|———————Node:this Text: this
|———————Node:) Text: )
|—————Node:) Text: )
|——Node:compound_statement Text: {
    Q_D(PeakCanBackend);

    d->setupChannel(name.toLatin1());
    d->setupDefaultConfigurations();

    std::function<void()> f = std::bind(&PeakCanBackend::resetController, this);
    setResetControllerFunction(f);

    std::function<CanBusStatus()> g = std::bind(&PeakCanBackend::busStatus, this);
    setCanBusStatusGetter(g);
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_D(PeakCanBackend);
|————Node:call_expression Text: Q_D(PeakCanBackend)
|—————Node:identifier Text: Q_D
|—————Node:argument_list Text: (PeakCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: PeakCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: d->setupChannel(name.toLatin1());
|————Node:call_expression Text: d->setupChannel(name.toLatin1())
|—————Node:field_expression Text: d->setupChannel
|——————Node:identifier Text: d
|——————Node:-> Text: ->
|——————Node:field_identifier Text: setupChannel
|—————Node:argument_list Text: (name.toLatin1())
|——————Node:( Text: (
|——————Node:call_expression Text: name.toLatin1()
|———————Node:field_expression Text: name.toLatin1
|————————Node:identifier Text: name
|————————Node:. Text: .
|————————Node:field_identifier Text: toLatin1
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: d->setupDefaultConfigurations();
|————Node:call_expression Text: d->setupDefaultConfigurations()
|—————Node:field_expression Text: d->setupDefaultConfigurations
|——————Node:identifier Text: d
|——————Node:-> Text: ->
|——————Node:field_identifier Text: setupDefaultConfigurations
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: std::function<void()> f = std::bind(&PeakCanBackend::resetController, this);
|————Node:qualified_identifier Text: std::function<void()>
|—————Node:namespace_identifier Text: std
|—————Node::: Text: ::
|—————Node:template_type Text: function<void()>
|——————Node:type_identifier Text: function
|——————Node:template_argument_list Text: <void()>
|———————Node:< Text: <
|———————Node:type_descriptor Text: void()
|————————Node:primitive_type Text: void
|————————Node:abstract_function_declarator Text: ()
|—————————Node:parameter_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|———————Node:> Text: >
|————Node:init_declarator Text: f = std::bind(&PeakCanBackend::resetController, this)
|—————Node:identifier Text: f
|—————Node:= Text: =
|—————Node:call_expression Text: std::bind(&PeakCanBackend::resetController, this)
|——————Node:qualified_identifier Text: std::bind
|———————Node:namespace_identifier Text: std
|———————Node::: Text: ::
|———————Node:identifier Text: bind
|——————Node:argument_list Text: (&PeakCanBackend::resetController, this)
|———————Node:( Text: (
|———————Node:pointer_expression Text: &PeakCanBackend::resetController
|————————Node:& Text: &
|————————Node:qualified_identifier Text: PeakCanBackend::resetController
|—————————Node:namespace_identifier Text: PeakCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: resetController
|———————Node:, Text: ,
|———————Node:this Text: this
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: setResetControllerFunction(f);
|————Node:call_expression Text: setResetControllerFunction(f)
|—————Node:identifier Text: setResetControllerFunction
|—————Node:argument_list Text: (f)
|——————Node:( Text: (
|——————Node:identifier Text: f
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: std::function<CanBusStatus()> g = std::bind(&PeakCanBackend::busStatus, this);
|————Node:qualified_identifier Text: std::function<CanBusStatus()>
|—————Node:namespace_identifier Text: std
|—————Node::: Text: ::
|—————Node:template_type Text: function<CanBusStatus()>
|——————Node:type_identifier Text: function
|——————Node:template_argument_list Text: <CanBusStatus()>
|———————Node:< Text: <
|———————Node:type_descriptor Text: CanBusStatus()
|————————Node:type_identifier Text: CanBusStatus
|————————Node:abstract_function_declarator Text: ()
|—————————Node:parameter_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|———————Node:> Text: >
|————Node:init_declarator Text: g = std::bind(&PeakCanBackend::busStatus, this)
|—————Node:identifier Text: g
|—————Node:= Text: =
|—————Node:call_expression Text: std::bind(&PeakCanBackend::busStatus, this)
|——————Node:qualified_identifier Text: std::bind
|———————Node:namespace_identifier Text: std
|———————Node::: Text: ::
|———————Node:identifier Text: bind
|——————Node:argument_list Text: (&PeakCanBackend::busStatus, this)
|———————Node:( Text: (
|———————Node:pointer_expression Text: &PeakCanBackend::busStatus
|————————Node:& Text: &
|————————Node:qualified_identifier Text: PeakCanBackend::busStatus
|—————————Node:namespace_identifier Text: PeakCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: busStatus
|———————Node:, Text: ,
|———————Node:this Text: this
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: setCanBusStatusGetter(g);
|————Node:call_expression Text: setCanBusStatusGetter(g)
|—————Node:identifier Text: setCanBusStatusGetter
|—————Node:argument_list Text: (g)
|——————Node:( Text: (
|——————Node:identifier Text: g
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: PeakCanBackend::~PeakCanBackend()
{
    Q_D(PeakCanBackend);

    if (d->isOpen)
        close();

    delete d_ptr;
}
|——Node:function_declarator Text: PeakCanBackend::~PeakCanBackend()
|———Node:qualified_identifier Text: PeakCanBackend::~PeakCanBackend
|————Node:namespace_identifier Text: PeakCanBackend
|————Node::: Text: ::
|————Node:destructor_name Text: ~PeakCanBackend
|—————Node:~ Text: ~
|—————Node:identifier Text: PeakCanBackend
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_D(PeakCanBackend);

    if (d->isOpen)
        close();

    delete d_ptr;
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_D(PeakCanBackend);
|————Node:call_expression Text: Q_D(PeakCanBackend)
|—————Node:identifier Text: Q_D
|—————Node:argument_list Text: (PeakCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: PeakCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (d->isOpen)
        close();
|————Node:if Text: if
|————Node:condition_clause Text: (d->isOpen)
|—————Node:( Text: (
|—————Node:field_expression Text: d->isOpen
|——————Node:identifier Text: d
|——————Node:-> Text: ->
|——————Node:field_identifier Text: isOpen
|—————Node:) Text: )
|————Node:expression_statement Text: close();
|—————Node:call_expression Text: close()
|——————Node:identifier Text: close
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|———Node:expression_statement Text: delete d_ptr;
|————Node:delete_expression Text: delete d_ptr
|—————Node:delete Text: delete
|—————Node:identifier Text: d_ptr
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: bool PeakCanBackend::open()
{
    Q_D(PeakCanBackend);

    if (!d->isOpen) {
        if (Q_UNLIKELY(!d->open()))
            return false;

        // Apply all stored configurations except bitrate, because
        // the bitrate cannot be changed after opening the device
        const auto keys = configurationKeys();
        for (ConfigurationKey key : keys) {
            if (key == QCanBusDevice::BitRateKey || key == QCanBusDevice::DataBitRateKey)
                continue;
            const QVariant param = configurationParameter(key);
            const bool success = d->setConfigurationParameter(key, param);
            if (Q_UNLIKELY(!success)) {
                qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot apply parameter: %d with value: %ls.",
                          key, qUtf16Printable(param.toString()));
            }
        }
    }

    setState(QCanBusDevice::ConnectedState);
    return true;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: PeakCanBackend::open()
|———Node:qualified_identifier Text: PeakCanBackend::open
|————Node:namespace_identifier Text: PeakCanBackend
|————Node::: Text: ::
|————Node:identifier Text: open
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_D(PeakCanBackend);

    if (!d->isOpen) {
        if (Q_UNLIKELY(!d->open()))
            return false;

        // Apply all stored configurations except bitrate, because
        // the bitrate cannot be changed after opening the device
        const auto keys = configurationKeys();
        for (ConfigurationKey key : keys) {
            if (key == QCanBusDevice::BitRateKey || key == QCanBusDevice::DataBitRateKey)
                continue;
            const QVariant param = configurationParameter(key);
            const bool success = d->setConfigurationParameter(key, param);
            if (Q_UNLIKELY(!success)) {
                qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot apply parameter: %d with value: %ls.",
                          key, qUtf16Printable(param.toString()));
            }
        }
    }

    setState(QCanBusDevice::ConnectedState);
    return true;
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_D(PeakCanBackend);
|————Node:call_expression Text: Q_D(PeakCanBackend)
|—————Node:identifier Text: Q_D
|—————Node:argument_list Text: (PeakCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: PeakCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (!d->isOpen) {
        if (Q_UNLIKELY(!d->open()))
            return false;

        // Apply all stored configurations except bitrate, because
        // the bitrate cannot be changed after opening the device
        const auto keys = configurationKeys();
        for (ConfigurationKey key : keys) {
            if (key == QCanBusDevice::BitRateKey || key == QCanBusDevice::DataBitRateKey)
                continue;
            const QVariant param = configurationParameter(key);
            const bool success = d->setConfigurationParameter(key, param);
            if (Q_UNLIKELY(!success)) {
                qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot apply parameter: %d with value: %ls.",
                          key, qUtf16Printable(param.toString()));
            }
        }
    }
|————Node:if Text: if
|————Node:condition_clause Text: (!d->isOpen)
|—————Node:( Text: (
|—————Node:unary_expression Text: !d->isOpen
|——————Node:! Text: !
|——————Node:field_expression Text: d->isOpen
|———————Node:identifier Text: d
|———————Node:-> Text: ->
|———————Node:field_identifier Text: isOpen
|—————Node:) Text: )
|————Node:compound_statement Text: {
        if (Q_UNLIKELY(!d->open()))
            return false;

        // Apply all stored configurations except bitrate, because
        // the bitrate cannot be changed after opening the device
        const auto keys = configurationKeys();
        for (ConfigurationKey key : keys) {
            if (key == QCanBusDevice::BitRateKey || key == QCanBusDevice::DataBitRateKey)
                continue;
            const QVariant param = configurationParameter(key);
            const bool success = d->setConfigurationParameter(key, param);
            if (Q_UNLIKELY(!success)) {
                qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot apply parameter: %d with value: %ls.",
                          key, qUtf16Printable(param.toString()));
            }
        }
    }
|—————Node:{ Text: {
|—————Node:if_statement Text: if (Q_UNLIKELY(!d->open()))
            return false;
|——————Node:if Text: if
|——————Node:condition_clause Text: (Q_UNLIKELY(!d->open()))
|———————Node:( Text: (
|———————Node:call_expression Text: Q_UNLIKELY(!d->open())
|————————Node:identifier Text: Q_UNLIKELY
|————————Node:argument_list Text: (!d->open())
|—————————Node:( Text: (
|—————————Node:unary_expression Text: !d->open()
|——————————Node:! Text: !
|——————————Node:call_expression Text: d->open()
|———————————Node:field_expression Text: d->open
|————————————Node:identifier Text: d
|————————————Node:-> Text: ->
|————————————Node:field_identifier Text: open
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:return_statement Text: return false;
|———————Node:return Text: return
|———————Node:false Text: false
|———————Node:; Text: ;
|—————Node:comment
|—————Node:comment
|—————Node:declaration Text: const auto keys = configurationKeys();
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:placeholder_type_specifier Text: auto
|———————Node:auto Text: auto
|——————Node:init_declarator Text: keys = configurationKeys()
|———————Node:identifier Text: keys
|———————Node:= Text: =
|———————Node:call_expression Text: configurationKeys()
|————————Node:identifier Text: configurationKeys
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:for_range_loop Text: for (ConfigurationKey key : keys) {
            if (key == QCanBusDevice::BitRateKey || key == QCanBusDevice::DataBitRateKey)
                continue;
            const QVariant param = configurationParameter(key);
            const bool success = d->setConfigurationParameter(key, param);
            if (Q_UNLIKELY(!success)) {
                qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot apply parameter: %d with value: %ls.",
                          key, qUtf16Printable(param.toString()));
            }
        }
|——————Node:for Text: for
|——————Node:( Text: (
|——————Node:type_identifier Text: ConfigurationKey
|——————Node:identifier Text: key
|——————Node:: Text: :
|——————Node:identifier Text: keys
|——————Node:) Text: )
|——————Node:compound_statement Text: {
            if (key == QCanBusDevice::BitRateKey || key == QCanBusDevice::DataBitRateKey)
                continue;
            const QVariant param = configurationParameter(key);
            const bool success = d->setConfigurationParameter(key, param);
            if (Q_UNLIKELY(!success)) {
                qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot apply parameter: %d with value: %ls.",
                          key, qUtf16Printable(param.toString()));
            }
        }
|———————Node:{ Text: {
|———————Node:if_statement Text: if (key == QCanBusDevice::BitRateKey || key == QCanBusDevice::DataBitRateKey)
                continue;
|————————Node:if Text: if
|————————Node:condition_clause Text: (key == QCanBusDevice::BitRateKey || key == QCanBusDevice::DataBitRateKey)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: key == QCanBusDevice::BitRateKey || key == QCanBusDevice::DataBitRateKey
|——————————Node:binary_expression Text: key == QCanBusDevice::BitRateKey
|———————————Node:identifier Text: key
|———————————Node:== Text: ==
|———————————Node:qualified_identifier Text: QCanBusDevice::BitRateKey
|————————————Node:namespace_identifier Text: QCanBusDevice
|————————————Node::: Text: ::
|————————————Node:identifier Text: BitRateKey
|——————————Node:|| Text: ||
|——————————Node:binary_expression Text: key == QCanBusDevice::DataBitRateKey
|———————————Node:identifier Text: key
|———————————Node:== Text: ==
|———————————Node:qualified_identifier Text: QCanBusDevice::DataBitRateKey
|————————————Node:namespace_identifier Text: QCanBusDevice
|————————————Node::: Text: ::
|————————————Node:identifier Text: DataBitRateKey
|—————————Node:) Text: )
|————————Node:continue_statement Text: continue;
|—————————Node:continue Text: continue
|—————————Node:; Text: ;
|———————Node:declaration Text: const QVariant param = configurationParameter(key);
|————————Node:type_qualifier Text: const
|—————————Node:const Text: const
|————————Node:type_identifier Text: QVariant
|————————Node:init_declarator Text: param = configurationParameter(key)
|—————————Node:identifier Text: param
|—————————Node:= Text: =
|—————————Node:call_expression Text: configurationParameter(key)
|——————————Node:identifier Text: configurationParameter
|——————————Node:argument_list Text: (key)
|———————————Node:( Text: (
|———————————Node:identifier Text: key
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:declaration Text: const bool success = d->setConfigurationParameter(key, param);
|————————Node:type_qualifier Text: const
|—————————Node:const Text: const
|————————Node:primitive_type Text: bool
|————————Node:init_declarator Text: success = d->setConfigurationParameter(key, param)
|—————————Node:identifier Text: success
|—————————Node:= Text: =
|—————————Node:call_expression Text: d->setConfigurationParameter(key, param)
|——————————Node:field_expression Text: d->setConfigurationParameter
|———————————Node:identifier Text: d
|———————————Node:-> Text: ->
|———————————Node:field_identifier Text: setConfigurationParameter
|——————————Node:argument_list Text: (key, param)
|———————————Node:( Text: (
|———————————Node:identifier Text: key
|———————————Node:, Text: ,
|———————————Node:identifier Text: param
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:if_statement Text: if (Q_UNLIKELY(!success)) {
                qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot apply parameter: %d with value: %ls.",
                          key, qUtf16Printable(param.toString()));
            }
|————————Node:if Text: if
|————————Node:condition_clause Text: (Q_UNLIKELY(!success))
|—————————Node:( Text: (
|—————————Node:call_expression Text: Q_UNLIKELY(!success)
|——————————Node:identifier Text: Q_UNLIKELY
|——————————Node:argument_list Text: (!success)
|———————————Node:( Text: (
|———————————Node:unary_expression Text: !success
|————————————Node:! Text: !
|————————————Node:identifier Text: success
|———————————Node:) Text: )
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
                qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot apply parameter: %d with value: %ls.",
                          key, qUtf16Printable(param.toString()));
            }
|—————————Node:{ Text: {
|—————————Node:expression_statement Text: qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot apply parameter: %d with value: %ls.",
                          key, qUtf16Printable(param.toString()));
|——————————Node:call_expression Text: qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Cannot apply parameter: %d with value: %ls.",
                          key, qUtf16Printable(param.toString()))
|———————————Node:identifier Text: qCWarning
|———————————Node:argument_list Text: (QT_CANBUS_PLUGINS_PEAKCAN, "Cannot apply parameter: %d with value: %ls.",
                          key, qUtf16Printable(param.toString()))
|————————————Node:( Text: (
|————————————Node:identifier Text: QT_CANBUS_PLUGINS_PEAKCAN
|————————————Node:, Text: ,
|————————————Node:string_literal Text: "Cannot apply parameter: %d with value: %ls."
|—————————————Node:" Text: "
|—————————————Node:string_content Text: Cannot apply parameter: %d with value: %ls.
|—————————————Node:" Text: "
|————————————Node:, Text: ,
|————————————Node:identifier Text: key
|————————————Node:, Text: ,
|————————————Node:call_expression Text: qUtf16Printable(param.toString())
|—————————————Node:identifier Text: qUtf16Printable
|—————————————Node:argument_list Text: (param.toString())
|——————————————Node:( Text: (
|——————————————Node:call_expression Text: param.toString()
|———————————————Node:field_expression Text: param.toString
|————————————————Node:identifier Text: param
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: toString
|———————————————Node:argument_list Text: ()
|————————————————Node:( Text: (
|————————————————Node:) Text: )
|——————————————Node:) Text: )
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:} Text: }
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:expression_statement Text: setState(QCanBusDevice::ConnectedState);
|————Node:call_expression Text: setState(QCanBusDevice::ConnectedState)
|—————Node:identifier Text: setState
|—————Node:argument_list Text: (QCanBusDevice::ConnectedState)
|——————Node:( Text: (
|——————Node:qualified_identifier Text: QCanBusDevice::ConnectedState
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: ConnectedState
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return true;
|————Node:return Text: return
|————Node:true Text: true
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void PeakCanBackend::close()
{
    Q_D(PeakCanBackend);

    d->close();

    setState(QCanBusDevice::UnconnectedState);
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: PeakCanBackend::close()
|———Node:qualified_identifier Text: PeakCanBackend::close
|————Node:namespace_identifier Text: PeakCanBackend
|————Node::: Text: ::
|————Node:identifier Text: close
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_D(PeakCanBackend);

    d->close();

    setState(QCanBusDevice::UnconnectedState);
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_D(PeakCanBackend);
|————Node:call_expression Text: Q_D(PeakCanBackend)
|—————Node:identifier Text: Q_D
|—————Node:argument_list Text: (PeakCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: PeakCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: d->close();
|————Node:call_expression Text: d->close()
|—————Node:field_expression Text: d->close
|——————Node:identifier Text: d
|——————Node:-> Text: ->
|——————Node:field_identifier Text: close
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: setState(QCanBusDevice::UnconnectedState);
|————Node:call_expression Text: setState(QCanBusDevice::UnconnectedState)
|—————Node:identifier Text: setState
|—————Node:argument_list Text: (QCanBusDevice::UnconnectedState)
|——————Node:( Text: (
|——————Node:qualified_identifier Text: QCanBusDevice::UnconnectedState
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: UnconnectedState
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void PeakCanBackend::setConfigurationParameter(ConfigurationKey key, const QVariant &value)
{
    Q_D(PeakCanBackend);

    if (d->setConfigurationParameter(key, value))
        QCanBusDevice::setConfigurationParameter(key, value);
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: PeakCanBackend::setConfigurationParameter(ConfigurationKey key, const QVariant &value)
|———Node:qualified_identifier Text: PeakCanBackend::setConfigurationParameter
|————Node:namespace_identifier Text: PeakCanBackend
|————Node::: Text: ::
|————Node:identifier Text: setConfigurationParameter
|———Node:parameter_list Text: (ConfigurationKey key, const QVariant &value)
|————Node:( Text: (
|————Node:parameter_declaration Text: ConfigurationKey key
|—————Node:type_identifier Text: ConfigurationKey
|—————Node:identifier Text: key
|————Node:, Text: ,
|————Node:parameter_declaration Text: const QVariant &value
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: QVariant
|—————Node:reference_declarator Text: &value
|——————Node:& Text: &
|——————Node:identifier Text: value
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_D(PeakCanBackend);

    if (d->setConfigurationParameter(key, value))
        QCanBusDevice::setConfigurationParameter(key, value);
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_D(PeakCanBackend);
|————Node:call_expression Text: Q_D(PeakCanBackend)
|—————Node:identifier Text: Q_D
|—————Node:argument_list Text: (PeakCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: PeakCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (d->setConfigurationParameter(key, value))
        QCanBusDevice::setConfigurationParameter(key, value);
|————Node:if Text: if
|————Node:condition_clause Text: (d->setConfigurationParameter(key, value))
|—————Node:( Text: (
|—————Node:call_expression Text: d->setConfigurationParameter(key, value)
|——————Node:field_expression Text: d->setConfigurationParameter
|———————Node:identifier Text: d
|———————Node:-> Text: ->
|———————Node:field_identifier Text: setConfigurationParameter
|——————Node:argument_list Text: (key, value)
|———————Node:( Text: (
|———————Node:identifier Text: key
|———————Node:, Text: ,
|———————Node:identifier Text: value
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:expression_statement Text: QCanBusDevice::setConfigurationParameter(key, value);
|—————Node:call_expression Text: QCanBusDevice::setConfigurationParameter(key, value)
|——————Node:qualified_identifier Text: QCanBusDevice::setConfigurationParameter
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: setConfigurationParameter
|——————Node:argument_list Text: (key, value)
|———————Node:( Text: (
|———————Node:identifier Text: key
|———————Node:, Text: ,
|———————Node:identifier Text: value
|———————Node:) Text: )
|—————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: bool PeakCanBackend::writeFrame(const QCanBusFrame &newData)
{
    Q_D(PeakCanBackend);

    if (Q_UNLIKELY(state() != QCanBusDevice::ConnectedState))
        return false;

    if (Q_UNLIKELY(!newData.isValid())) {
        setError(tr("Cannot write invalid QCanBusFrame"), QCanBusDevice::WriteError);
        return false;
    }

    if (Q_UNLIKELY(newData.frameType() != QCanBusFrame::DataFrame
                   && newData.frameType() != QCanBusFrame::RemoteRequestFrame)) {
        setError(tr("Unable to write a frame with unacceptable type"),
                 QCanBusDevice::WriteError);
        return false;
    }

    enqueueOutgoingFrame(newData);

    if (!d->writeNotifier->isActive())
        d->writeNotifier->start();

    return true;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: PeakCanBackend::writeFrame(const QCanBusFrame &newData)
|———Node:qualified_identifier Text: PeakCanBackend::writeFrame
|————Node:namespace_identifier Text: PeakCanBackend
|————Node::: Text: ::
|————Node:identifier Text: writeFrame
|———Node:parameter_list Text: (const QCanBusFrame &newData)
|————Node:( Text: (
|————Node:parameter_declaration Text: const QCanBusFrame &newData
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: QCanBusFrame
|—————Node:reference_declarator Text: &newData
|——————Node:& Text: &
|——————Node:identifier Text: newData
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_D(PeakCanBackend);

    if (Q_UNLIKELY(state() != QCanBusDevice::ConnectedState))
        return false;

    if (Q_UNLIKELY(!newData.isValid())) {
        setError(tr("Cannot write invalid QCanBusFrame"), QCanBusDevice::WriteError);
        return false;
    }

    if (Q_UNLIKELY(newData.frameType() != QCanBusFrame::DataFrame
                   && newData.frameType() != QCanBusFrame::RemoteRequestFrame)) {
        setError(tr("Unable to write a frame with unacceptable type"),
                 QCanBusDevice::WriteError);
        return false;
    }

    enqueueOutgoingFrame(newData);

    if (!d->writeNotifier->isActive())
        d->writeNotifier->start();

    return true;
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_D(PeakCanBackend);
|————Node:call_expression Text: Q_D(PeakCanBackend)
|—————Node:identifier Text: Q_D
|—————Node:argument_list Text: (PeakCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: PeakCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(state() != QCanBusDevice::ConnectedState))
        return false;
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(state() != QCanBusDevice::ConnectedState))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(state() != QCanBusDevice::ConnectedState)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (state() != QCanBusDevice::ConnectedState)
|———————Node:( Text: (
|———————Node:binary_expression Text: state() != QCanBusDevice::ConnectedState
|————————Node:call_expression Text: state()
|—————————Node:identifier Text: state
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:!= Text: !=
|————————Node:qualified_identifier Text: QCanBusDevice::ConnectedState
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:identifier Text: ConnectedState
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:return_statement Text: return false;
|—————Node:return Text: return
|—————Node:false Text: false
|—————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(!newData.isValid())) {
        setError(tr("Cannot write invalid QCanBusFrame"), QCanBusDevice::WriteError);
        return false;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(!newData.isValid()))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(!newData.isValid())
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (!newData.isValid())
|———————Node:( Text: (
|———————Node:unary_expression Text: !newData.isValid()
|————————Node:! Text: !
|————————Node:call_expression Text: newData.isValid()
|—————————Node:field_expression Text: newData.isValid
|——————————Node:identifier Text: newData
|——————————Node:. Text: .
|——————————Node:field_identifier Text: isValid
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        setError(tr("Cannot write invalid QCanBusFrame"), QCanBusDevice::WriteError);
        return false;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: setError(tr("Cannot write invalid QCanBusFrame"), QCanBusDevice::WriteError);
|——————Node:call_expression Text: setError(tr("Cannot write invalid QCanBusFrame"), QCanBusDevice::WriteError)
|———————Node:identifier Text: setError
|———————Node:argument_list Text: (tr("Cannot write invalid QCanBusFrame"), QCanBusDevice::WriteError)
|————————Node:( Text: (
|————————Node:call_expression Text: tr("Cannot write invalid QCanBusFrame")
|—————————Node:identifier Text: tr
|—————————Node:argument_list Text: ("Cannot write invalid QCanBusFrame")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "Cannot write invalid QCanBusFrame"
|———————————Node:" Text: "
|———————————Node:string_content Text: Cannot write invalid QCanBusFrame
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:qualified_identifier Text: QCanBusDevice::WriteError
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:identifier Text: WriteError
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return false;
|——————Node:return Text: return
|——————Node:false Text: false
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:if_statement Text: if (Q_UNLIKELY(newData.frameType() != QCanBusFrame::DataFrame
                   && newData.frameType() != QCanBusFrame::RemoteRequestFrame)) {
        setError(tr("Unable to write a frame with unacceptable type"),
                 QCanBusDevice::WriteError);
        return false;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(newData.frameType() != QCanBusFrame::DataFrame
                   && newData.frameType() != QCanBusFrame::RemoteRequestFrame))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(newData.frameType() != QCanBusFrame::DataFrame
                   && newData.frameType() != QCanBusFrame::RemoteRequestFrame)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (newData.frameType() != QCanBusFrame::DataFrame
                   && newData.frameType() != QCanBusFrame::RemoteRequestFrame)
|———————Node:( Text: (
|———————Node:binary_expression Text: newData.frameType() != QCanBusFrame::DataFrame
                   && newData.frameType() != QCanBusFrame::RemoteRequestFrame
|————————Node:binary_expression Text: newData.frameType() != QCanBusFrame::DataFrame
|—————————Node:call_expression Text: newData.frameType()
|——————————Node:field_expression Text: newData.frameType
|———————————Node:identifier Text: newData
|———————————Node:. Text: .
|———————————Node:field_identifier Text: frameType
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:!= Text: !=
|—————————Node:qualified_identifier Text: QCanBusFrame::DataFrame
|——————————Node:namespace_identifier Text: QCanBusFrame
|——————————Node::: Text: ::
|——————————Node:identifier Text: DataFrame
|————————Node:&& Text: &&
|————————Node:binary_expression Text: newData.frameType() != QCanBusFrame::RemoteRequestFrame
|—————————Node:call_expression Text: newData.frameType()
|——————————Node:field_expression Text: newData.frameType
|———————————Node:identifier Text: newData
|———————————Node:. Text: .
|———————————Node:field_identifier Text: frameType
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:!= Text: !=
|—————————Node:qualified_identifier Text: QCanBusFrame::RemoteRequestFrame
|——————————Node:namespace_identifier Text: QCanBusFrame
|——————————Node::: Text: ::
|——————————Node:identifier Text: RemoteRequestFrame
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        setError(tr("Unable to write a frame with unacceptable type"),
                 QCanBusDevice::WriteError);
        return false;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: setError(tr("Unable to write a frame with unacceptable type"),
                 QCanBusDevice::WriteError);
|——————Node:call_expression Text: setError(tr("Unable to write a frame with unacceptable type"),
                 QCanBusDevice::WriteError)
|———————Node:identifier Text: setError
|———————Node:argument_list Text: (tr("Unable to write a frame with unacceptable type"),
                 QCanBusDevice::WriteError)
|————————Node:( Text: (
|————————Node:call_expression Text: tr("Unable to write a frame with unacceptable type")
|—————————Node:identifier Text: tr
|—————————Node:argument_list Text: ("Unable to write a frame with unacceptable type")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "Unable to write a frame with unacceptable type"
|———————————Node:" Text: "
|———————————Node:string_content Text: Unable to write a frame with unacceptable type
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:qualified_identifier Text: QCanBusDevice::WriteError
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:identifier Text: WriteError
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return false;
|——————Node:return Text: return
|——————Node:false Text: false
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: enqueueOutgoingFrame(newData);
|————Node:call_expression Text: enqueueOutgoingFrame(newData)
|—————Node:identifier Text: enqueueOutgoingFrame
|—————Node:argument_list Text: (newData)
|——————Node:( Text: (
|——————Node:identifier Text: newData
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (!d->writeNotifier->isActive())
        d->writeNotifier->start();
|————Node:if Text: if
|————Node:condition_clause Text: (!d->writeNotifier->isActive())
|—————Node:( Text: (
|—————Node:unary_expression Text: !d->writeNotifier->isActive()
|——————Node:! Text: !
|——————Node:call_expression Text: d->writeNotifier->isActive()
|———————Node:field_expression Text: d->writeNotifier->isActive
|————————Node:field_expression Text: d->writeNotifier
|—————————Node:identifier Text: d
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: writeNotifier
|————————Node:-> Text: ->
|————————Node:field_identifier Text: isActive
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|—————Node:) Text: )
|————Node:expression_statement Text: d->writeNotifier->start();
|—————Node:call_expression Text: d->writeNotifier->start()
|——————Node:field_expression Text: d->writeNotifier->start
|———————Node:field_expression Text: d->writeNotifier
|————————Node:identifier Text: d
|————————Node:-> Text: ->
|————————Node:field_identifier Text: writeNotifier
|———————Node:-> Text: ->
|———————Node:field_identifier Text: start
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|———Node:return_statement Text: return true;
|————Node:return Text: return
|————Node:true Text: true
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: QString PeakCanBackend::interpretErrorFrame(const QCanBusFrame &errorFrame)
{
    Q_UNUSED(errorFrame);

    return QString();
}
|——Node:type_identifier Text: QString
|——Node:function_declarator Text: PeakCanBackend::interpretErrorFrame(const QCanBusFrame &errorFrame)
|———Node:qualified_identifier Text: PeakCanBackend::interpretErrorFrame
|————Node:namespace_identifier Text: PeakCanBackend
|————Node::: Text: ::
|————Node:identifier Text: interpretErrorFrame
|———Node:parameter_list Text: (const QCanBusFrame &errorFrame)
|————Node:( Text: (
|————Node:parameter_declaration Text: const QCanBusFrame &errorFrame
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: QCanBusFrame
|—————Node:reference_declarator Text: &errorFrame
|——————Node:& Text: &
|——————Node:identifier Text: errorFrame
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_UNUSED(errorFrame);

    return QString();
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_UNUSED(errorFrame);
|————Node:call_expression Text: Q_UNUSED(errorFrame)
|—————Node:identifier Text: Q_UNUSED
|—————Node:argument_list Text: (errorFrame)
|——————Node:( Text: (
|——————Node:identifier Text: errorFrame
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return QString();
|————Node:return Text: return
|————Node:call_expression Text: QString()
|—————Node:identifier Text: QString
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void PeakCanBackend::resetController()
{
    close();
    open();
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: PeakCanBackend::resetController()
|———Node:qualified_identifier Text: PeakCanBackend::resetController
|————Node:namespace_identifier Text: PeakCanBackend
|————Node::: Text: ::
|————Node:identifier Text: resetController
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    close();
    open();
}
|———Node:{ Text: {
|———Node:expression_statement Text: close();
|————Node:call_expression Text: close()
|—————Node:identifier Text: close
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: open();
|————Node:call_expression Text: open()
|—————Node:identifier Text: open
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: QCanBusDevice::CanBusStatus PeakCanBackend::busStatus() const
{
    const TPCANStatus status = ::CAN_GetStatus(d_ptr->channelIndex);

    switch (status & PCAN_ERROR_ANYBUSERR) {
    case PCAN_ERROR_OK:
        return QCanBusDevice::CanBusStatus::Good;
    case PCAN_ERROR_BUSWARNING:
        return QCanBusDevice::CanBusStatus::Warning;
    case PCAN_ERROR_BUSPASSIVE:
        return QCanBusDevice::CanBusStatus::Error;
    case PCAN_ERROR_BUSOFF:
        return QCanBusDevice::CanBusStatus::BusOff;
    default:
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Unknown CAN bus status: %lu.", ulong(status));
        return QCanBusDevice::CanBusStatus::Unknown;
    }
}
|——Node:qualified_identifier Text: QCanBusDevice::CanBusStatus
|———Node:namespace_identifier Text: QCanBusDevice
|———Node::: Text: ::
|———Node:type_identifier Text: CanBusStatus
|——Node:function_declarator Text: PeakCanBackend::busStatus() const
|———Node:qualified_identifier Text: PeakCanBackend::busStatus
|————Node:namespace_identifier Text: PeakCanBackend
|————Node::: Text: ::
|————Node:identifier Text: busStatus
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|———Node:type_qualifier Text: const
|————Node:const Text: const
|——Node:compound_statement Text: {
    const TPCANStatus status = ::CAN_GetStatus(d_ptr->channelIndex);

    switch (status & PCAN_ERROR_ANYBUSERR) {
    case PCAN_ERROR_OK:
        return QCanBusDevice::CanBusStatus::Good;
    case PCAN_ERROR_BUSWARNING:
        return QCanBusDevice::CanBusStatus::Warning;
    case PCAN_ERROR_BUSPASSIVE:
        return QCanBusDevice::CanBusStatus::Error;
    case PCAN_ERROR_BUSOFF:
        return QCanBusDevice::CanBusStatus::BusOff;
    default:
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Unknown CAN bus status: %lu.", ulong(status));
        return QCanBusDevice::CanBusStatus::Unknown;
    }
}
|———Node:{ Text: {
|———Node:declaration Text: const TPCANStatus status = ::CAN_GetStatus(d_ptr->channelIndex);
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: TPCANStatus
|————Node:init_declarator Text: status = ::CAN_GetStatus(d_ptr->channelIndex)
|—————Node:identifier Text: status
|—————Node:= Text: =
|—————Node:call_expression Text: ::CAN_GetStatus(d_ptr->channelIndex)
|——————Node:qualified_identifier Text: ::CAN_GetStatus
|———————Node::: Text: ::
|———————Node:identifier Text: CAN_GetStatus
|——————Node:argument_list Text: (d_ptr->channelIndex)
|———————Node:( Text: (
|———————Node:field_expression Text: d_ptr->channelIndex
|————————Node:identifier Text: d_ptr
|————————Node:-> Text: ->
|————————Node:field_identifier Text: channelIndex
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:switch_statement Text: switch (status & PCAN_ERROR_ANYBUSERR) {
    case PCAN_ERROR_OK:
        return QCanBusDevice::CanBusStatus::Good;
    case PCAN_ERROR_BUSWARNING:
        return QCanBusDevice::CanBusStatus::Warning;
    case PCAN_ERROR_BUSPASSIVE:
        return QCanBusDevice::CanBusStatus::Error;
    case PCAN_ERROR_BUSOFF:
        return QCanBusDevice::CanBusStatus::BusOff;
    default:
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Unknown CAN bus status: %lu.", ulong(status));
        return QCanBusDevice::CanBusStatus::Unknown;
    }
|————Node:switch Text: switch
|————Node:condition_clause Text: (status & PCAN_ERROR_ANYBUSERR)
|—————Node:( Text: (
|—————Node:binary_expression Text: status & PCAN_ERROR_ANYBUSERR
|——————Node:identifier Text: status
|——————Node:& Text: &
|——————Node:identifier Text: PCAN_ERROR_ANYBUSERR
|—————Node:) Text: )
|————Node:compound_statement Text: {
    case PCAN_ERROR_OK:
        return QCanBusDevice::CanBusStatus::Good;
    case PCAN_ERROR_BUSWARNING:
        return QCanBusDevice::CanBusStatus::Warning;
    case PCAN_ERROR_BUSPASSIVE:
        return QCanBusDevice::CanBusStatus::Error;
    case PCAN_ERROR_BUSOFF:
        return QCanBusDevice::CanBusStatus::BusOff;
    default:
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Unknown CAN bus status: %lu.", ulong(status));
        return QCanBusDevice::CanBusStatus::Unknown;
    }
|—————Node:{ Text: {
|—————Node:case_statement Text: case PCAN_ERROR_OK:
        return QCanBusDevice::CanBusStatus::Good;
|——————Node:case Text: case
|——————Node:identifier Text: PCAN_ERROR_OK
|——————Node:: Text: :
|——————Node:return_statement Text: return QCanBusDevice::CanBusStatus::Good;
|———————Node:return Text: return
|———————Node:qualified_identifier Text: QCanBusDevice::CanBusStatus::Good
|————————Node:namespace_identifier Text: QCanBusDevice
|————————Node::: Text: ::
|————————Node:qualified_identifier Text: CanBusStatus::Good
|—————————Node:namespace_identifier Text: CanBusStatus
|—————————Node::: Text: ::
|—————————Node:identifier Text: Good
|———————Node:; Text: ;
|—————Node:case_statement Text: case PCAN_ERROR_BUSWARNING:
        return QCanBusDevice::CanBusStatus::Warning;
|——————Node:case Text: case
|——————Node:identifier Text: PCAN_ERROR_BUSWARNING
|——————Node:: Text: :
|——————Node:return_statement Text: return QCanBusDevice::CanBusStatus::Warning;
|———————Node:return Text: return
|———————Node:qualified_identifier Text: QCanBusDevice::CanBusStatus::Warning
|————————Node:namespace_identifier Text: QCanBusDevice
|————————Node::: Text: ::
|————————Node:qualified_identifier Text: CanBusStatus::Warning
|—————————Node:namespace_identifier Text: CanBusStatus
|—————————Node::: Text: ::
|—————————Node:identifier Text: Warning
|———————Node:; Text: ;
|—————Node:case_statement Text: case PCAN_ERROR_BUSPASSIVE:
        return QCanBusDevice::CanBusStatus::Error;
|——————Node:case Text: case
|——————Node:identifier Text: PCAN_ERROR_BUSPASSIVE
|——————Node:: Text: :
|——————Node:return_statement Text: return QCanBusDevice::CanBusStatus::Error;
|———————Node:return Text: return
|———————Node:qualified_identifier Text: QCanBusDevice::CanBusStatus::Error
|————————Node:namespace_identifier Text: QCanBusDevice
|————————Node::: Text: ::
|————————Node:qualified_identifier Text: CanBusStatus::Error
|—————————Node:namespace_identifier Text: CanBusStatus
|—————————Node::: Text: ::
|—————————Node:identifier Text: Error
|———————Node:; Text: ;
|—————Node:case_statement Text: case PCAN_ERROR_BUSOFF:
        return QCanBusDevice::CanBusStatus::BusOff;
|——————Node:case Text: case
|——————Node:identifier Text: PCAN_ERROR_BUSOFF
|——————Node:: Text: :
|——————Node:return_statement Text: return QCanBusDevice::CanBusStatus::BusOff;
|———————Node:return Text: return
|———————Node:qualified_identifier Text: QCanBusDevice::CanBusStatus::BusOff
|————————Node:namespace_identifier Text: QCanBusDevice
|————————Node::: Text: ::
|————————Node:qualified_identifier Text: CanBusStatus::BusOff
|—————————Node:namespace_identifier Text: CanBusStatus
|—————————Node::: Text: ::
|—————————Node:identifier Text: BusOff
|———————Node:; Text: ;
|—————Node:case_statement Text: default:
        qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Unknown CAN bus status: %lu.", ulong(status));
        return QCanBusDevice::CanBusStatus::Unknown;
|——————Node:default Text: default
|——————Node:: Text: :
|——————Node:expression_statement Text: qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Unknown CAN bus status: %lu.", ulong(status));
|———————Node:call_expression Text: qCWarning(QT_CANBUS_PLUGINS_PEAKCAN, "Unknown CAN bus status: %lu.", ulong(status))
|————————Node:identifier Text: qCWarning
|————————Node:argument_list Text: (QT_CANBUS_PLUGINS_PEAKCAN, "Unknown CAN bus status: %lu.", ulong(status))
|—————————Node:( Text: (
|—————————Node:identifier Text: QT_CANBUS_PLUGINS_PEAKCAN
|—————————Node:, Text: ,
|—————————Node:string_literal Text: "Unknown CAN bus status: %lu."
|——————————Node:" Text: "
|——————————Node:string_content Text: Unknown CAN bus status: %lu.
|——————————Node:" Text: "
|—————————Node:, Text: ,
|—————————Node:call_expression Text: ulong(status)
|——————————Node:identifier Text: ulong
|——————————Node:argument_list Text: (status)
|———————————Node:( Text: (
|———————————Node:identifier Text: status
|———————————Node:) Text: )
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:return_statement Text: return QCanBusDevice::CanBusStatus::Unknown;
|———————Node:return Text: return
|———————Node:qualified_identifier Text: QCanBusDevice::CanBusStatus::Unknown
|————————Node:namespace_identifier Text: QCanBusDevice
|————————Node::: Text: ::
|————————Node:qualified_identifier Text: CanBusStatus::Unknown
|—————————Node:namespace_identifier Text: CanBusStatus
|—————————Node::: Text: ::
|—————————Node:identifier Text: Unknown
|———————Node:; Text: ;
|—————Node:} Text: }
|———Node:} Text: }
|—Node:expression_statement Text: QT_END_NAMESPACE
|——Node:identifier Text: QT_END_NAMESPACE
|——Node:; Text: 
