qtserialbus-src\plugins\canbus\vectorcan\vectorcanbackend.cpp

|Node:translation_unit
|—Node:comment
|—Node:comment
|—Node:preproc_include Text: #include "vectorcanbackend.h"

|——Node:#include Text: #include
|——Node:string_literal Text: "vectorcanbackend.h"
|———Node:" Text: "
|———Node:string_content Text: vectorcanbackend.h
|———Node:" Text: "
|—Node:preproc_include Text: #include "vectorcanbackend_p.h"

|——Node:#include Text: #include
|——Node:string_literal Text: "vectorcanbackend_p.h"
|———Node:" Text: "
|———Node:string_content Text: vectorcanbackend_p.h
|———Node:" Text: "
|—Node:preproc_include Text: #include "vectorcan_symbols_p.h"

|——Node:#include Text: #include
|——Node:string_literal Text: "vectorcan_symbols_p.h"
|———Node:" Text: "
|———Node:string_content Text: vectorcan_symbols_p.h
|———Node:" Text: "
|—Node:preproc_include Text: #include <QtSerialBus/qcanbusdevice.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <QtSerialBus/qcanbusdevice.h>
|—Node:preproc_include Text: #include <QtCore/qtimer.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <QtCore/qtimer.h>
|—Node:preproc_include Text: #include <QtCore/qcoreevent.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <QtCore/qcoreevent.h>
|—Node:preproc_include Text: #include <QtCore/qloggingcategory.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <QtCore/qloggingcategory.h>
|—Node:preproc_include Text: #include <QtCore/qwineventnotifier.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <QtCore/qwineventnotifier.h>
|—Node:preproc_include Text: #include <QtCore/qcoreapplication.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <QtCore/qcoreapplication.h>
|—Node:preproc_include Text: #include <algorithm>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <algorithm>
|—Node:declaration Text: QT_BEGIN_NAMESPACE

Q_DECLARE_LOGGING_CATEGORY(QT_CANBUS_PLUGINS_VECTORCAN)
|——Node:type_identifier Text: QT_BEGIN_NAMESPACE
|——Node:init_declarator Text: Q_DECLARE_LOGGING_CATEGORY(QT_CANBUS_PLUGINS_VECTORCAN)
|———Node:identifier Text: Q_DECLARE_LOGGING_CATEGORY
|———Node:argument_list Text: (QT_CANBUS_PLUGINS_VECTORCAN)
|————Node:( Text: (
|————Node:identifier Text: QT_CANBUS_PLUGINS_VECTORCAN
|————Node:) Text: )
|——Node:; Text: 
|—Node:preproc_ifdef Text: #ifndef LINK_LIBVECTORCAN
Q_GLOBAL_STATIC(QLibrary, vectorcanLibrary)
#endif
|——Node:#ifndef Text: #ifndef
|——Node:identifier Text: LINK_LIBVECTORCAN
|——Node:expression_statement Text: Q_GLOBAL_STATIC(QLibrary, vectorcanLibrary)
|———Node:call_expression Text: Q_GLOBAL_STATIC(QLibrary, vectorcanLibrary)
|————Node:identifier Text: Q_GLOBAL_STATIC
|————Node:argument_list Text: (QLibrary, vectorcanLibrary)
|—————Node:( Text: (
|—————Node:identifier Text: QLibrary
|—————Node:, Text: ,
|—————Node:identifier Text: vectorcanLibrary
|—————Node:) Text: )
|———Node:; Text: 
|——Node:#endif Text: #endif
|—Node:function_definition Text: bool VectorCanBackend::canCreate(QString *errorReason)
{
#ifdef LINK_LIBVECTORCAN
    return true;
#else
    static bool symbolsResolved = resolveVectorCanSymbols(vectorcanLibrary());
    if (Q_UNLIKELY(!symbolsResolved)) {
        *errorReason = vectorcanLibrary()->errorString();
        return false;
    }
    return true;
#endif
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: VectorCanBackend::canCreate(QString *errorReason)
|———Node:qualified_identifier Text: VectorCanBackend::canCreate
|————Node:namespace_identifier Text: VectorCanBackend
|————Node::: Text: ::
|————Node:identifier Text: canCreate
|———Node:parameter_list Text: (QString *errorReason)
|————Node:( Text: (
|————Node:parameter_declaration Text: QString *errorReason
|—————Node:type_identifier Text: QString
|—————Node:pointer_declarator Text: *errorReason
|——————Node:* Text: *
|——————Node:identifier Text: errorReason
|————Node:) Text: )
|——Node:compound_statement Text: {
#ifdef LINK_LIBVECTORCAN
    return true;
#else
    static bool symbolsResolved = resolveVectorCanSymbols(vectorcanLibrary());
    if (Q_UNLIKELY(!symbolsResolved)) {
        *errorReason = vectorcanLibrary()->errorString();
        return false;
    }
    return true;
#endif
}
|———Node:{ Text: {
|———Node:preproc_ifdef Text: #ifdef LINK_LIBVECTORCAN
    return true;
#else
    static bool symbolsResolved = resolveVectorCanSymbols(vectorcanLibrary());
    if (Q_UNLIKELY(!symbolsResolved)) {
        *errorReason = vectorcanLibrary()->errorString();
        return false;
    }
    return true;
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: LINK_LIBVECTORCAN
|————Node:return_statement Text: return true;
|—————Node:return Text: return
|—————Node:true Text: true
|—————Node:; Text: ;
|————Node:preproc_else Text: #else
    static bool symbolsResolved = resolveVectorCanSymbols(vectorcanLibrary());
    if (Q_UNLIKELY(!symbolsResolved)) {
        *errorReason = vectorcanLibrary()->errorString();
        return false;
    }
    return true;
|—————Node:#else Text: #else
|—————Node:declaration Text: static bool symbolsResolved = resolveVectorCanSymbols(vectorcanLibrary());
|——————Node:storage_class_specifier Text: static
|———————Node:static Text: static
|——————Node:primitive_type Text: bool
|——————Node:init_declarator Text: symbolsResolved = resolveVectorCanSymbols(vectorcanLibrary())
|———————Node:identifier Text: symbolsResolved
|———————Node:= Text: =
|———————Node:call_expression Text: resolveVectorCanSymbols(vectorcanLibrary())
|————————Node:identifier Text: resolveVectorCanSymbols
|————————Node:argument_list Text: (vectorcanLibrary())
|—————————Node:( Text: (
|—————————Node:call_expression Text: vectorcanLibrary()
|——————————Node:identifier Text: vectorcanLibrary
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (Q_UNLIKELY(!symbolsResolved)) {
        *errorReason = vectorcanLibrary()->errorString();
        return false;
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: (Q_UNLIKELY(!symbolsResolved))
|———————Node:( Text: (
|———————Node:call_expression Text: Q_UNLIKELY(!symbolsResolved)
|————————Node:identifier Text: Q_UNLIKELY
|————————Node:argument_list Text: (!symbolsResolved)
|—————————Node:( Text: (
|—————————Node:unary_expression Text: !symbolsResolved
|——————————Node:! Text: !
|——————————Node:identifier Text: symbolsResolved
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {
        *errorReason = vectorcanLibrary()->errorString();
        return false;
    }
|———————Node:{ Text: {
|———————Node:expression_statement Text: *errorReason = vectorcanLibrary()->errorString();
|————————Node:assignment_expression Text: *errorReason = vectorcanLibrary()->errorString()
|—————————Node:pointer_expression Text: *errorReason
|——————————Node:* Text: *
|——————————Node:identifier Text: errorReason
|—————————Node:= Text: =
|—————————Node:call_expression Text: vectorcanLibrary()->errorString()
|——————————Node:field_expression Text: vectorcanLibrary()->errorString
|———————————Node:call_expression Text: vectorcanLibrary()
|————————————Node:identifier Text: vectorcanLibrary
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:-> Text: ->
|———————————Node:field_identifier Text: errorString
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:return_statement Text: return false;
|————————Node:return Text: return
|————————Node:false Text: false
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:return_statement Text: return true;
|——————Node:return Text: return
|——————Node:true Text: true
|——————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:} Text: }
|—Node:function_definition Text: QList<QCanBusDeviceInfo> VectorCanBackend::interfaces()
{
    QList<QCanBusDeviceInfo> result;

    if (Q_UNLIKELY(VectorCanBackendPrivate::loadDriver() != XL_SUCCESS))
        return result;

    XLdriverConfig config;
    if (Q_UNLIKELY(::xlGetDriverConfig(&config) != XL_SUCCESS)) {
        VectorCanBackendPrivate::cleanupDriver();
        return result;
    }

    for (uint i = 0; i < config.channelCount; ++i) {
        if (config.channel[i].hwType == XL_HWTYPE_NONE)
            continue;

        const bool isVirtual = config.channel[i].hwType == XL_HWTYPE_VIRTUAL;
        const bool isFd = config.channel[i].channelCapabilities & XL_CHANNEL_FLAG_CANFD_SUPPORT;
        const int channel = config.channel[i].hwChannel;
        const QString name = QStringLiteral("can") + QString::number(i);
        const QString serial = QString::number(config.channel[i].serialNumber);
        const QString description = QLatin1String(config.channel[i].name);
        result.append(createDeviceInfo(QStringLiteral("vectorcan"), name,
                                       serial, description, QString(),
                                       channel, isVirtual, isFd));
    }

    VectorCanBackendPrivate::cleanupDriver();
    return result;
}
|——Node:template_type Text: QList<QCanBusDeviceInfo>
|———Node:type_identifier Text: QList
|———Node:template_argument_list Text: <QCanBusDeviceInfo>
|————Node:< Text: <
|————Node:type_descriptor Text: QCanBusDeviceInfo
|—————Node:type_identifier Text: QCanBusDeviceInfo
|————Node:> Text: >
|——Node:function_declarator Text: VectorCanBackend::interfaces()
|———Node:qualified_identifier Text: VectorCanBackend::interfaces
|————Node:namespace_identifier Text: VectorCanBackend
|————Node::: Text: ::
|————Node:identifier Text: interfaces
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    QList<QCanBusDeviceInfo> result;

    if (Q_UNLIKELY(VectorCanBackendPrivate::loadDriver() != XL_SUCCESS))
        return result;

    XLdriverConfig config;
    if (Q_UNLIKELY(::xlGetDriverConfig(&config) != XL_SUCCESS)) {
        VectorCanBackendPrivate::cleanupDriver();
        return result;
    }

    for (uint i = 0; i < config.channelCount; ++i) {
        if (config.channel[i].hwType == XL_HWTYPE_NONE)
            continue;

        const bool isVirtual = config.channel[i].hwType == XL_HWTYPE_VIRTUAL;
        const bool isFd = config.channel[i].channelCapabilities & XL_CHANNEL_FLAG_CANFD_SUPPORT;
        const int channel = config.channel[i].hwChannel;
        const QString name = QStringLiteral("can") + QString::number(i);
        const QString serial = QString::number(config.channel[i].serialNumber);
        const QString description = QLatin1String(config.channel[i].name);
        result.append(createDeviceInfo(QStringLiteral("vectorcan"), name,
                                       serial, description, QString(),
                                       channel, isVirtual, isFd));
    }

    VectorCanBackendPrivate::cleanupDriver();
    return result;
}
|———Node:{ Text: {
|———Node:declaration Text: QList<QCanBusDeviceInfo> result;
|————Node:template_type Text: QList<QCanBusDeviceInfo>
|—————Node:type_identifier Text: QList
|—————Node:template_argument_list Text: <QCanBusDeviceInfo>
|——————Node:< Text: <
|——————Node:type_descriptor Text: QCanBusDeviceInfo
|———————Node:type_identifier Text: QCanBusDeviceInfo
|——————Node:> Text: >
|————Node:identifier Text: result
|————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(VectorCanBackendPrivate::loadDriver() != XL_SUCCESS))
        return result;
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(VectorCanBackendPrivate::loadDriver() != XL_SUCCESS))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(VectorCanBackendPrivate::loadDriver() != XL_SUCCESS)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (VectorCanBackendPrivate::loadDriver() != XL_SUCCESS)
|———————Node:( Text: (
|———————Node:binary_expression Text: VectorCanBackendPrivate::loadDriver() != XL_SUCCESS
|————————Node:call_expression Text: VectorCanBackendPrivate::loadDriver()
|—————————Node:qualified_identifier Text: VectorCanBackendPrivate::loadDriver
|——————————Node:namespace_identifier Text: VectorCanBackendPrivate
|——————————Node::: Text: ::
|——————————Node:identifier Text: loadDriver
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:!= Text: !=
|————————Node:identifier Text: XL_SUCCESS
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:return_statement Text: return result;
|—————Node:return Text: return
|—————Node:identifier Text: result
|—————Node:; Text: ;
|———Node:declaration Text: XLdriverConfig config;
|————Node:type_identifier Text: XLdriverConfig
|————Node:identifier Text: config
|————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(::xlGetDriverConfig(&config) != XL_SUCCESS)) {
        VectorCanBackendPrivate::cleanupDriver();
        return result;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(::xlGetDriverConfig(&config) != XL_SUCCESS))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(::xlGetDriverConfig(&config) != XL_SUCCESS)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (::xlGetDriverConfig(&config) != XL_SUCCESS)
|———————Node:( Text: (
|———————Node:binary_expression Text: ::xlGetDriverConfig(&config) != XL_SUCCESS
|————————Node:call_expression Text: ::xlGetDriverConfig(&config)
|—————————Node:qualified_identifier Text: ::xlGetDriverConfig
|——————————Node::: Text: ::
|——————————Node:identifier Text: xlGetDriverConfig
|—————————Node:argument_list Text: (&config)
|——————————Node:( Text: (
|——————————Node:pointer_expression Text: &config
|———————————Node:& Text: &
|———————————Node:identifier Text: config
|——————————Node:) Text: )
|————————Node:!= Text: !=
|————————Node:identifier Text: XL_SUCCESS
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        VectorCanBackendPrivate::cleanupDriver();
        return result;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: VectorCanBackendPrivate::cleanupDriver();
|——————Node:call_expression Text: VectorCanBackendPrivate::cleanupDriver()
|———————Node:qualified_identifier Text: VectorCanBackendPrivate::cleanupDriver
|————————Node:namespace_identifier Text: VectorCanBackendPrivate
|————————Node::: Text: ::
|————————Node:identifier Text: cleanupDriver
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return result;
|——————Node:return Text: return
|——————Node:identifier Text: result
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:for_statement Text: for (uint i = 0; i < config.channelCount; ++i) {
        if (config.channel[i].hwType == XL_HWTYPE_NONE)
            continue;

        const bool isVirtual = config.channel[i].hwType == XL_HWTYPE_VIRTUAL;
        const bool isFd = config.channel[i].channelCapabilities & XL_CHANNEL_FLAG_CANFD_SUPPORT;
        const int channel = config.channel[i].hwChannel;
        const QString name = QStringLiteral("can") + QString::number(i);
        const QString serial = QString::number(config.channel[i].serialNumber);
        const QString description = QLatin1String(config.channel[i].name);
        result.append(createDeviceInfo(QStringLiteral("vectorcan"), name,
                                       serial, description, QString(),
                                       channel, isVirtual, isFd));
    }
|————Node:for Text: for
|————Node:( Text: (
|————Node:declaration Text: uint i = 0;
|—————Node:type_identifier Text: uint
|—————Node:init_declarator Text: i = 0
|——————Node:identifier Text: i
|——————Node:= Text: =
|——————Node:number_literal Text: 0
|—————Node:; Text: ;
|————Node:binary_expression Text: i < config.channelCount
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:field_expression Text: config.channelCount
|——————Node:identifier Text: config
|——————Node:. Text: .
|——————Node:field_identifier Text: channelCount
|————Node:; Text: ;
|————Node:update_expression Text: ++i
|—————Node:++ Text: ++
|—————Node:identifier Text: i
|————Node:) Text: )
|————Node:compound_statement Text: {
        if (config.channel[i].hwType == XL_HWTYPE_NONE)
            continue;

        const bool isVirtual = config.channel[i].hwType == XL_HWTYPE_VIRTUAL;
        const bool isFd = config.channel[i].channelCapabilities & XL_CHANNEL_FLAG_CANFD_SUPPORT;
        const int channel = config.channel[i].hwChannel;
        const QString name = QStringLiteral("can") + QString::number(i);
        const QString serial = QString::number(config.channel[i].serialNumber);
        const QString description = QLatin1String(config.channel[i].name);
        result.append(createDeviceInfo(QStringLiteral("vectorcan"), name,
                                       serial, description, QString(),
                                       channel, isVirtual, isFd));
    }
|—————Node:{ Text: {
|—————Node:if_statement Text: if (config.channel[i].hwType == XL_HWTYPE_NONE)
            continue;
|——————Node:if Text: if
|——————Node:condition_clause Text: (config.channel[i].hwType == XL_HWTYPE_NONE)
|———————Node:( Text: (
|———————Node:binary_expression Text: config.channel[i].hwType == XL_HWTYPE_NONE
|————————Node:field_expression Text: config.channel[i].hwType
|—————————Node:subscript_expression Text: config.channel[i]
|——————————Node:field_expression Text: config.channel
|———————————Node:identifier Text: config
|———————————Node:. Text: .
|———————————Node:field_identifier Text: channel
|——————————Node:subscript_argument_list Text: [i]
|———————————Node:[ Text: [
|———————————Node:identifier Text: i
|———————————Node:] Text: ]
|—————————Node:. Text: .
|—————————Node:field_identifier Text: hwType
|————————Node:== Text: ==
|————————Node:identifier Text: XL_HWTYPE_NONE
|———————Node:) Text: )
|——————Node:continue_statement Text: continue;
|———————Node:continue Text: continue
|———————Node:; Text: ;
|—————Node:declaration Text: const bool isVirtual = config.channel[i].hwType == XL_HWTYPE_VIRTUAL;
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:primitive_type Text: bool
|——————Node:init_declarator Text: isVirtual = config.channel[i].hwType == XL_HWTYPE_VIRTUAL
|———————Node:identifier Text: isVirtual
|———————Node:= Text: =
|———————Node:binary_expression Text: config.channel[i].hwType == XL_HWTYPE_VIRTUAL
|————————Node:field_expression Text: config.channel[i].hwType
|—————————Node:subscript_expression Text: config.channel[i]
|——————————Node:field_expression Text: config.channel
|———————————Node:identifier Text: config
|———————————Node:. Text: .
|———————————Node:field_identifier Text: channel
|——————————Node:subscript_argument_list Text: [i]
|———————————Node:[ Text: [
|———————————Node:identifier Text: i
|———————————Node:] Text: ]
|—————————Node:. Text: .
|—————————Node:field_identifier Text: hwType
|————————Node:== Text: ==
|————————Node:identifier Text: XL_HWTYPE_VIRTUAL
|——————Node:; Text: ;
|—————Node:declaration Text: const bool isFd = config.channel[i].channelCapabilities & XL_CHANNEL_FLAG_CANFD_SUPPORT;
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:primitive_type Text: bool
|——————Node:init_declarator Text: isFd = config.channel[i].channelCapabilities & XL_CHANNEL_FLAG_CANFD_SUPPORT
|———————Node:identifier Text: isFd
|———————Node:= Text: =
|———————Node:binary_expression Text: config.channel[i].channelCapabilities & XL_CHANNEL_FLAG_CANFD_SUPPORT
|————————Node:field_expression Text: config.channel[i].channelCapabilities
|—————————Node:subscript_expression Text: config.channel[i]
|——————————Node:field_expression Text: config.channel
|———————————Node:identifier Text: config
|———————————Node:. Text: .
|———————————Node:field_identifier Text: channel
|——————————Node:subscript_argument_list Text: [i]
|———————————Node:[ Text: [
|———————————Node:identifier Text: i
|———————————Node:] Text: ]
|—————————Node:. Text: .
|—————————Node:field_identifier Text: channelCapabilities
|————————Node:& Text: &
|————————Node:identifier Text: XL_CHANNEL_FLAG_CANFD_SUPPORT
|——————Node:; Text: ;
|—————Node:declaration Text: const int channel = config.channel[i].hwChannel;
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:primitive_type Text: int
|——————Node:init_declarator Text: channel = config.channel[i].hwChannel
|———————Node:identifier Text: channel
|———————Node:= Text: =
|———————Node:field_expression Text: config.channel[i].hwChannel
|————————Node:subscript_expression Text: config.channel[i]
|—————————Node:field_expression Text: config.channel
|——————————Node:identifier Text: config
|——————————Node:. Text: .
|——————————Node:field_identifier Text: channel
|—————————Node:subscript_argument_list Text: [i]
|——————————Node:[ Text: [
|——————————Node:identifier Text: i
|——————————Node:] Text: ]
|————————Node:. Text: .
|————————Node:field_identifier Text: hwChannel
|——————Node:; Text: ;
|—————Node:declaration Text: const QString name = QStringLiteral("can") + QString::number(i);
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:type_identifier Text: QString
|——————Node:init_declarator Text: name = QStringLiteral("can") + QString::number(i)
|———————Node:identifier Text: name
|———————Node:= Text: =
|———————Node:binary_expression Text: QStringLiteral("can") + QString::number(i)
|————————Node:call_expression Text: QStringLiteral("can")
|—————————Node:identifier Text: QStringLiteral
|—————————Node:argument_list Text: ("can")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "can"
|———————————Node:" Text: "
|———————————Node:string_content Text: can
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:+ Text: +
|————————Node:call_expression Text: QString::number(i)
|—————————Node:qualified_identifier Text: QString::number
|——————————Node:namespace_identifier Text: QString
|——————————Node::: Text: ::
|——————————Node:identifier Text: number
|—————————Node:argument_list Text: (i)
|——————————Node:( Text: (
|——————————Node:identifier Text: i
|——————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:declaration Text: const QString serial = QString::number(config.channel[i].serialNumber);
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:type_identifier Text: QString
|——————Node:init_declarator Text: serial = QString::number(config.channel[i].serialNumber)
|———————Node:identifier Text: serial
|———————Node:= Text: =
|———————Node:call_expression Text: QString::number(config.channel[i].serialNumber)
|————————Node:qualified_identifier Text: QString::number
|—————————Node:namespace_identifier Text: QString
|—————————Node::: Text: ::
|—————————Node:identifier Text: number
|————————Node:argument_list Text: (config.channel[i].serialNumber)
|—————————Node:( Text: (
|—————————Node:field_expression Text: config.channel[i].serialNumber
|——————————Node:subscript_expression Text: config.channel[i]
|———————————Node:field_expression Text: config.channel
|————————————Node:identifier Text: config
|————————————Node:. Text: .
|————————————Node:field_identifier Text: channel
|———————————Node:subscript_argument_list Text: [i]
|————————————Node:[ Text: [
|————————————Node:identifier Text: i
|————————————Node:] Text: ]
|——————————Node:. Text: .
|——————————Node:field_identifier Text: serialNumber
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:declaration Text: const QString description = QLatin1String(config.channel[i].name);
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:type_identifier Text: QString
|——————Node:init_declarator Text: description = QLatin1String(config.channel[i].name)
|———————Node:identifier Text: description
|———————Node:= Text: =
|———————Node:call_expression Text: QLatin1String(config.channel[i].name)
|————————Node:identifier Text: QLatin1String
|————————Node:argument_list Text: (config.channel[i].name)
|—————————Node:( Text: (
|—————————Node:field_expression Text: config.channel[i].name
|——————————Node:subscript_expression Text: config.channel[i]
|———————————Node:field_expression Text: config.channel
|————————————Node:identifier Text: config
|————————————Node:. Text: .
|————————————Node:field_identifier Text: channel
|———————————Node:subscript_argument_list Text: [i]
|————————————Node:[ Text: [
|————————————Node:identifier Text: i
|————————————Node:] Text: ]
|——————————Node:. Text: .
|——————————Node:field_identifier Text: name
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: result.append(createDeviceInfo(QStringLiteral("vectorcan"), name,
                                       serial, description, QString(),
                                       channel, isVirtual, isFd));
|——————Node:call_expression Text: result.append(createDeviceInfo(QStringLiteral("vectorcan"), name,
                                       serial, description, QString(),
                                       channel, isVirtual, isFd))
|———————Node:field_expression Text: result.append
|————————Node:identifier Text: result
|————————Node:. Text: .
|————————Node:field_identifier Text: append
|———————Node:argument_list Text: (createDeviceInfo(QStringLiteral("vectorcan"), name,
                                       serial, description, QString(),
                                       channel, isVirtual, isFd))
|————————Node:( Text: (
|————————Node:call_expression Text: createDeviceInfo(QStringLiteral("vectorcan"), name,
                                       serial, description, QString(),
                                       channel, isVirtual, isFd)
|—————————Node:identifier Text: createDeviceInfo
|—————————Node:argument_list Text: (QStringLiteral("vectorcan"), name,
                                       serial, description, QString(),
                                       channel, isVirtual, isFd)
|——————————Node:( Text: (
|——————————Node:call_expression Text: QStringLiteral("vectorcan")
|———————————Node:identifier Text: QStringLiteral
|———————————Node:argument_list Text: ("vectorcan")
|————————————Node:( Text: (
|————————————Node:string_literal Text: "vectorcan"
|—————————————Node:" Text: "
|—————————————Node:string_content Text: vectorcan
|—————————————Node:" Text: "
|————————————Node:) Text: )
|——————————Node:, Text: ,
|——————————Node:identifier Text: name
|——————————Node:, Text: ,
|——————————Node:identifier Text: serial
|——————————Node:, Text: ,
|——————————Node:identifier Text: description
|——————————Node:, Text: ,
|——————————Node:call_expression Text: QString()
|———————————Node:identifier Text: QString
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:, Text: ,
|——————————Node:identifier Text: channel
|——————————Node:, Text: ,
|——————————Node:identifier Text: isVirtual
|——————————Node:, Text: ,
|——————————Node:identifier Text: isFd
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: VectorCanBackendPrivate::cleanupDriver();
|————Node:call_expression Text: VectorCanBackendPrivate::cleanupDriver()
|—————Node:qualified_identifier Text: VectorCanBackendPrivate::cleanupDriver
|——————Node:namespace_identifier Text: VectorCanBackendPrivate
|——————Node::: Text: ::
|——————Node:identifier Text: cleanupDriver
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return result;
|————Node:return Text: return
|————Node:identifier Text: result
|————Node:; Text: ;
|———Node:} Text: }
|—Node:declaration Text: static int driverRefCount = 0;
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:primitive_type Text: int
|——Node:init_declarator Text: driverRefCount = 0
|———Node:identifier Text: driverRefCount
|———Node:= Text: =
|———Node:number_literal Text: 0
|——Node:; Text: ;
|—Node:class_specifier Text: class VectorCanReadNotifier : public QWinEventNotifier
{
    // no Q_OBJECT macro!
public:
    explicit VectorCanReadNotifier(VectorCanBackendPrivate *d, QObject *parent)
        : QWinEventNotifier(parent)
        , dptr(d)
    {
        setHandle(dptr->readHandle);

        connect(this, &QWinEventNotifier::activated, this, [this]() {
            dptr->startRead();
        });
    }

private:
    VectorCanBackendPrivate * const dptr;
}
|——Node:class Text: class
|——Node:type_identifier Text: VectorCanReadNotifier
|——Node:base_class_clause Text: : public QWinEventNotifier
|———Node:: Text: :
|———Node:access_specifier Text: public
|————Node:public Text: public
|———Node:type_identifier Text: QWinEventNotifier
|——Node:field_declaration_list Text: {
    // no Q_OBJECT macro!
public:
    explicit VectorCanReadNotifier(VectorCanBackendPrivate *d, QObject *parent)
        : QWinEventNotifier(parent)
        , dptr(d)
    {
        setHandle(dptr->readHandle);

        connect(this, &QWinEventNotifier::activated, this, [this]() {
            dptr->startRead();
        });
    }

private:
    VectorCanBackendPrivate * const dptr;
}
|———Node:{ Text: {
|———Node:comment
|———Node:access_specifier Text: public
|————Node:public Text: public
|———Node:: Text: :
|———Node:function_definition Text: explicit VectorCanReadNotifier(VectorCanBackendPrivate *d, QObject *parent)
        : QWinEventNotifier(parent)
        , dptr(d)
    {
        setHandle(dptr->readHandle);

        connect(this, &QWinEventNotifier::activated, this, [this]() {
            dptr->startRead();
        });
    }
|————Node:explicit_function_specifier Text: explicit
|—————Node:explicit Text: explicit
|————Node:function_declarator Text: VectorCanReadNotifier(VectorCanBackendPrivate *d, QObject *parent)
|—————Node:identifier Text: VectorCanReadNotifier
|—————Node:parameter_list Text: (VectorCanBackendPrivate *d, QObject *parent)
|——————Node:( Text: (
|——————Node:parameter_declaration Text: VectorCanBackendPrivate *d
|———————Node:type_identifier Text: VectorCanBackendPrivate
|———————Node:pointer_declarator Text: *d
|————————Node:* Text: *
|————————Node:identifier Text: d
|——————Node:, Text: ,
|——————Node:parameter_declaration Text: QObject *parent
|———————Node:type_identifier Text: QObject
|———————Node:pointer_declarator Text: *parent
|————————Node:* Text: *
|————————Node:identifier Text: parent
|——————Node:) Text: )
|————Node:field_initializer_list Text: : QWinEventNotifier(parent)
        , dptr(d)
|—————Node:: Text: :
|—————Node:field_initializer Text: QWinEventNotifier(parent)
|——————Node:field_identifier Text: QWinEventNotifier
|——————Node:argument_list Text: (parent)
|———————Node:( Text: (
|———————Node:identifier Text: parent
|———————Node:) Text: )
|—————Node:, Text: ,
|—————Node:field_initializer Text: dptr(d)
|——————Node:field_identifier Text: dptr
|——————Node:argument_list Text: (d)
|———————Node:( Text: (
|———————Node:identifier Text: d
|———————Node:) Text: )
|————Node:compound_statement Text: {
        setHandle(dptr->readHandle);

        connect(this, &QWinEventNotifier::activated, this, [this]() {
            dptr->startRead();
        });
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: setHandle(dptr->readHandle);
|——————Node:call_expression Text: setHandle(dptr->readHandle)
|———————Node:identifier Text: setHandle
|———————Node:argument_list Text: (dptr->readHandle)
|————————Node:( Text: (
|————————Node:field_expression Text: dptr->readHandle
|—————————Node:identifier Text: dptr
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: readHandle
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: connect(this, &QWinEventNotifier::activated, this, [this]() {
            dptr->startRead();
        });
|——————Node:call_expression Text: connect(this, &QWinEventNotifier::activated, this, [this]() {
            dptr->startRead();
        })
|———————Node:identifier Text: connect
|———————Node:argument_list Text: (this, &QWinEventNotifier::activated, this, [this]() {
            dptr->startRead();
        })
|————————Node:( Text: (
|————————Node:this Text: this
|————————Node:, Text: ,
|————————Node:pointer_expression Text: &QWinEventNotifier::activated
|—————————Node:& Text: &
|—————————Node:qualified_identifier Text: QWinEventNotifier::activated
|——————————Node:namespace_identifier Text: QWinEventNotifier
|——————————Node::: Text: ::
|——————————Node:identifier Text: activated
|————————Node:, Text: ,
|————————Node:this Text: this
|————————Node:, Text: ,
|————————Node:lambda_expression Text: [this]() {
            dptr->startRead();
        }
|—————————Node:lambda_capture_specifier Text: [this]
|——————————Node:[ Text: [
|——————————Node:this Text: this
|——————————Node:] Text: ]
|—————————Node:abstract_function_declarator Text: ()
|——————————Node:parameter_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:compound_statement Text: {
            dptr->startRead();
        }
|——————————Node:{ Text: {
|——————————Node:expression_statement Text: dptr->startRead();
|———————————Node:call_expression Text: dptr->startRead()
|————————————Node:field_expression Text: dptr->startRead
|—————————————Node:identifier Text: dptr
|—————————————Node:-> Text: ->
|—————————————Node:field_identifier Text: startRead
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:; Text: ;
|——————————Node:} Text: }
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:access_specifier Text: private
|————Node:private Text: private
|———Node:: Text: :
|———Node:field_declaration Text: VectorCanBackendPrivate * const dptr;
|————Node:type_identifier Text: VectorCanBackendPrivate
|————Node:pointer_declarator Text: * const dptr
|—————Node:* Text: *
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:field_identifier Text: dptr
|————Node:; Text: ;
|———Node:} Text: }
|—Node:; Text: ;
|—Node:class_specifier Text: class VectorCanWriteNotifier : public QTimer
{
    // no Q_OBJECT macro!
public:
    VectorCanWriteNotifier(VectorCanBackendPrivate *d, QObject *parent)
        : QTimer(parent)
        , dptr(d)
    {
        setInterval(0);
    }

protected:
    void timerEvent(QTimerEvent *e) override
    {
        if (e->timerId() == timerId()) {
            dptr->startWrite();
            return;
        }
        QTimer::timerEvent(e);
    }

private:
    VectorCanBackendPrivate * const dptr;
}
|——Node:class Text: class
|——Node:type_identifier Text: VectorCanWriteNotifier
|——Node:base_class_clause Text: : public QTimer
|———Node:: Text: :
|———Node:access_specifier Text: public
|————Node:public Text: public
|———Node:type_identifier Text: QTimer
|——Node:field_declaration_list Text: {
    // no Q_OBJECT macro!
public:
    VectorCanWriteNotifier(VectorCanBackendPrivate *d, QObject *parent)
        : QTimer(parent)
        , dptr(d)
    {
        setInterval(0);
    }

protected:
    void timerEvent(QTimerEvent *e) override
    {
        if (e->timerId() == timerId()) {
            dptr->startWrite();
            return;
        }
        QTimer::timerEvent(e);
    }

private:
    VectorCanBackendPrivate * const dptr;
}
|———Node:{ Text: {
|———Node:comment
|———Node:access_specifier Text: public
|————Node:public Text: public
|———Node:: Text: :
|———Node:function_definition Text: VectorCanWriteNotifier(VectorCanBackendPrivate *d, QObject *parent)
        : QTimer(parent)
        , dptr(d)
    {
        setInterval(0);
    }
|————Node:function_declarator Text: VectorCanWriteNotifier(VectorCanBackendPrivate *d, QObject *parent)
|—————Node:identifier Text: VectorCanWriteNotifier
|—————Node:parameter_list Text: (VectorCanBackendPrivate *d, QObject *parent)
|——————Node:( Text: (
|——————Node:parameter_declaration Text: VectorCanBackendPrivate *d
|———————Node:type_identifier Text: VectorCanBackendPrivate
|———————Node:pointer_declarator Text: *d
|————————Node:* Text: *
|————————Node:identifier Text: d
|——————Node:, Text: ,
|——————Node:parameter_declaration Text: QObject *parent
|———————Node:type_identifier Text: QObject
|———————Node:pointer_declarator Text: *parent
|————————Node:* Text: *
|————————Node:identifier Text: parent
|——————Node:) Text: )
|————Node:field_initializer_list Text: : QTimer(parent)
        , dptr(d)
|—————Node:: Text: :
|—————Node:field_initializer Text: QTimer(parent)
|——————Node:field_identifier Text: QTimer
|——————Node:argument_list Text: (parent)
|———————Node:( Text: (
|———————Node:identifier Text: parent
|———————Node:) Text: )
|—————Node:, Text: ,
|—————Node:field_initializer Text: dptr(d)
|——————Node:field_identifier Text: dptr
|——————Node:argument_list Text: (d)
|———————Node:( Text: (
|———————Node:identifier Text: d
|———————Node:) Text: )
|————Node:compound_statement Text: {
        setInterval(0);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: setInterval(0);
|——————Node:call_expression Text: setInterval(0)
|———————Node:identifier Text: setInterval
|———————Node:argument_list Text: (0)
|————————Node:( Text: (
|————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:access_specifier Text: protected
|————Node:protected Text: protected
|———Node:: Text: :
|———Node:function_definition Text: void timerEvent(QTimerEvent *e) override
    {
        if (e->timerId() == timerId()) {
            dptr->startWrite();
            return;
        }
        QTimer::timerEvent(e);
    }
|————Node:primitive_type Text: void
|————Node:function_declarator Text: timerEvent(QTimerEvent *e) override
|—————Node:field_identifier Text: timerEvent
|—————Node:parameter_list Text: (QTimerEvent *e)
|——————Node:( Text: (
|——————Node:parameter_declaration Text: QTimerEvent *e
|———————Node:type_identifier Text: QTimerEvent
|———————Node:pointer_declarator Text: *e
|————————Node:* Text: *
|————————Node:identifier Text: e
|——————Node:) Text: )
|—————Node:virtual_specifier Text: override
|——————Node:override Text: override
|————Node:compound_statement Text: {
        if (e->timerId() == timerId()) {
            dptr->startWrite();
            return;
        }
        QTimer::timerEvent(e);
    }
|—————Node:{ Text: {
|—————Node:if_statement Text: if (e->timerId() == timerId()) {
            dptr->startWrite();
            return;
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (e->timerId() == timerId())
|———————Node:( Text: (
|———————Node:binary_expression Text: e->timerId() == timerId()
|————————Node:call_expression Text: e->timerId()
|—————————Node:field_expression Text: e->timerId
|——————————Node:identifier Text: e
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: timerId
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:== Text: ==
|————————Node:call_expression Text: timerId()
|—————————Node:identifier Text: timerId
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            dptr->startWrite();
            return;
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: dptr->startWrite();
|————————Node:call_expression Text: dptr->startWrite()
|—————————Node:field_expression Text: dptr->startWrite
|——————————Node:identifier Text: dptr
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: startWrite
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:return_statement Text: return;
|————————Node:return Text: return
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:expression_statement Text: QTimer::timerEvent(e);
|——————Node:call_expression Text: QTimer::timerEvent(e)
|———————Node:qualified_identifier Text: QTimer::timerEvent
|————————Node:namespace_identifier Text: QTimer
|————————Node::: Text: ::
|————————Node:identifier Text: timerEvent
|———————Node:argument_list Text: (e)
|————————Node:( Text: (
|————————Node:identifier Text: e
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:access_specifier Text: private
|————Node:private Text: private
|———Node:: Text: :
|———Node:field_declaration Text: VectorCanBackendPrivate * const dptr;
|————Node:type_identifier Text: VectorCanBackendPrivate
|————Node:pointer_declarator Text: * const dptr
|—————Node:* Text: *
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:field_identifier Text: dptr
|————Node:; Text: ;
|———Node:} Text: }
|—Node:; Text: ;
|—Node:function_definition Text: VectorCanBackendPrivate::VectorCanBackendPrivate(VectorCanBackend *q)
    : q_ptr(q)
{
    startupDriver();
}
|——Node:function_declarator Text: VectorCanBackendPrivate::VectorCanBackendPrivate(VectorCanBackend *q)
|———Node:qualified_identifier Text: VectorCanBackendPrivate::VectorCanBackendPrivate
|————Node:namespace_identifier Text: VectorCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: VectorCanBackendPrivate
|———Node:parameter_list Text: (VectorCanBackend *q)
|————Node:( Text: (
|————Node:parameter_declaration Text: VectorCanBackend *q
|—————Node:type_identifier Text: VectorCanBackend
|—————Node:pointer_declarator Text: *q
|——————Node:* Text: *
|——————Node:identifier Text: q
|————Node:) Text: )
|——Node:field_initializer_list Text: : q_ptr(q)
|———Node:: Text: :
|———Node:field_initializer Text: q_ptr(q)
|————Node:field_identifier Text: q_ptr
|————Node:argument_list Text: (q)
|—————Node:( Text: (
|—————Node:identifier Text: q
|—————Node:) Text: )
|——Node:compound_statement Text: {
    startupDriver();
}
|———Node:{ Text: {
|———Node:expression_statement Text: startupDriver();
|————Node:call_expression Text: startupDriver()
|—————Node:identifier Text: startupDriver
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: VectorCanBackendPrivate::~VectorCanBackendPrivate()
{
    cleanupDriver();
}
|——Node:function_declarator Text: VectorCanBackendPrivate::~VectorCanBackendPrivate()
|———Node:qualified_identifier Text: VectorCanBackendPrivate::~VectorCanBackendPrivate
|————Node:namespace_identifier Text: VectorCanBackendPrivate
|————Node::: Text: ::
|————Node:destructor_name Text: ~VectorCanBackendPrivate
|—————Node:~ Text: ~
|—————Node:identifier Text: VectorCanBackendPrivate
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    cleanupDriver();
}
|———Node:{ Text: {
|———Node:expression_statement Text: cleanupDriver();
|————Node:call_expression Text: cleanupDriver()
|—————Node:identifier Text: cleanupDriver
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: bool VectorCanBackendPrivate::open()
{
    Q_Q(VectorCanBackend);

    {
        XLdriverConfig config;
        if (Q_UNLIKELY(::xlGetDriverConfig(&config) != XL_SUCCESS)) {
            q->setError(VectorCanBackend::tr("Unable to get driver configuration"),
                        QCanBusDevice::CanBusError::ConnectionError);
            return false;
        }
        channelMask = config.channel[channelIndex].channelMask;
        XLaccess permissionMask = channelMask;
        const quint32 queueSize = usesCanFd ? 8192 : 256;
        const XLstatus status = ::xlOpenPort(&portHandle,
                                             const_cast<char *>(qPrintable(qApp->applicationName())),
                                             channelMask, &permissionMask, queueSize,
                                             usesCanFd ? XL_INTERFACE_VERSION_V4 : XL_INTERFACE_VERSION, XL_BUS_TYPE_CAN);

        if (Q_UNLIKELY(status != XL_SUCCESS || portHandle == XL_INVALID_PORTHANDLE)) {
            q->setError(systemErrorString(status), QCanBusDevice::ConnectionError);
            portHandle = XL_INVALID_PORTHANDLE;
            return false;
        }
    }
    if (usesCanFd && arbBitRate != 0) {
        XLcanFdConf xlfdconf = {};
        xlfdconf.dataBitRate = (dataBitRate != 0) ? dataBitRate : arbBitRate;
        xlfdconf.arbitrationBitRate = arbBitRate;

        const XLstatus status = ::xlCanFdSetConfiguration(portHandle, channelMask, &xlfdconf);
        if (Q_UNLIKELY(status != XL_SUCCESS))
            qCWarning(QT_CANBUS_PLUGINS_VECTORCAN,
                      "Unable to change the configuration for an open channel");
    }

    {
        const XLstatus status = ::xlActivateChannel(portHandle, channelMask,
                                                    XL_BUS_TYPE_CAN, XL_ACTIVATE_RESET_CLOCK);
        if (Q_UNLIKELY(status != XL_SUCCESS)) {
            q->setError(systemErrorString(status), QCanBusDevice::CanBusError::ConnectionError);
            return false;
        }
    }

    {
        const int queueLevel = 1;
        const XLstatus status = ::xlSetNotification(portHandle, &readHandle, queueLevel);
        if (Q_UNLIKELY(status != XL_SUCCESS)) {
            q->setError(systemErrorString(status), QCanBusDevice::ConnectionError);
            return false;
        }
    }

    readNotifier = new VectorCanReadNotifier(this, q);
    readNotifier->setEnabled(true);

    writeNotifier = new VectorCanWriteNotifier(this, q);

    return true;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: VectorCanBackendPrivate::open()
|———Node:qualified_identifier Text: VectorCanBackendPrivate::open
|————Node:namespace_identifier Text: VectorCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: open
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(VectorCanBackend);

    {
        XLdriverConfig config;
        if (Q_UNLIKELY(::xlGetDriverConfig(&config) != XL_SUCCESS)) {
            q->setError(VectorCanBackend::tr("Unable to get driver configuration"),
                        QCanBusDevice::CanBusError::ConnectionError);
            return false;
        }
        channelMask = config.channel[channelIndex].channelMask;
        XLaccess permissionMask = channelMask;
        const quint32 queueSize = usesCanFd ? 8192 : 256;
        const XLstatus status = ::xlOpenPort(&portHandle,
                                             const_cast<char *>(qPrintable(qApp->applicationName())),
                                             channelMask, &permissionMask, queueSize,
                                             usesCanFd ? XL_INTERFACE_VERSION_V4 : XL_INTERFACE_VERSION, XL_BUS_TYPE_CAN);

        if (Q_UNLIKELY(status != XL_SUCCESS || portHandle == XL_INVALID_PORTHANDLE)) {
            q->setError(systemErrorString(status), QCanBusDevice::ConnectionError);
            portHandle = XL_INVALID_PORTHANDLE;
            return false;
        }
    }
    if (usesCanFd && arbBitRate != 0) {
        XLcanFdConf xlfdconf = {};
        xlfdconf.dataBitRate = (dataBitRate != 0) ? dataBitRate : arbBitRate;
        xlfdconf.arbitrationBitRate = arbBitRate;

        const XLstatus status = ::xlCanFdSetConfiguration(portHandle, channelMask, &xlfdconf);
        if (Q_UNLIKELY(status != XL_SUCCESS))
            qCWarning(QT_CANBUS_PLUGINS_VECTORCAN,
                      "Unable to change the configuration for an open channel");
    }

    {
        const XLstatus status = ::xlActivateChannel(portHandle, channelMask,
                                                    XL_BUS_TYPE_CAN, XL_ACTIVATE_RESET_CLOCK);
        if (Q_UNLIKELY(status != XL_SUCCESS)) {
            q->setError(systemErrorString(status), QCanBusDevice::CanBusError::ConnectionError);
            return false;
        }
    }

    {
        const int queueLevel = 1;
        const XLstatus status = ::xlSetNotification(portHandle, &readHandle, queueLevel);
        if (Q_UNLIKELY(status != XL_SUCCESS)) {
            q->setError(systemErrorString(status), QCanBusDevice::ConnectionError);
            return false;
        }
    }

    readNotifier = new VectorCanReadNotifier(this, q);
    readNotifier->setEnabled(true);

    writeNotifier = new VectorCanWriteNotifier(this, q);

    return true;
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(VectorCanBackend);
|————Node:call_expression Text: Q_Q(VectorCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (VectorCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: VectorCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:compound_statement Text: {
        XLdriverConfig config;
        if (Q_UNLIKELY(::xlGetDriverConfig(&config) != XL_SUCCESS)) {
            q->setError(VectorCanBackend::tr("Unable to get driver configuration"),
                        QCanBusDevice::CanBusError::ConnectionError);
            return false;
        }
        channelMask = config.channel[channelIndex].channelMask;
        XLaccess permissionMask = channelMask;
        const quint32 queueSize = usesCanFd ? 8192 : 256;
        const XLstatus status = ::xlOpenPort(&portHandle,
                                             const_cast<char *>(qPrintable(qApp->applicationName())),
                                             channelMask, &permissionMask, queueSize,
                                             usesCanFd ? XL_INTERFACE_VERSION_V4 : XL_INTERFACE_VERSION, XL_BUS_TYPE_CAN);

        if (Q_UNLIKELY(status != XL_SUCCESS || portHandle == XL_INVALID_PORTHANDLE)) {
            q->setError(systemErrorString(status), QCanBusDevice::ConnectionError);
            portHandle = XL_INVALID_PORTHANDLE;
            return false;
        }
    }
|————Node:{ Text: {
|————Node:declaration Text: XLdriverConfig config;
|—————Node:type_identifier Text: XLdriverConfig
|—————Node:identifier Text: config
|—————Node:; Text: ;
|————Node:if_statement Text: if (Q_UNLIKELY(::xlGetDriverConfig(&config) != XL_SUCCESS)) {
            q->setError(VectorCanBackend::tr("Unable to get driver configuration"),
                        QCanBusDevice::CanBusError::ConnectionError);
            return false;
        }
|—————Node:if Text: if
|—————Node:condition_clause Text: (Q_UNLIKELY(::xlGetDriverConfig(&config) != XL_SUCCESS))
|——————Node:( Text: (
|——————Node:call_expression Text: Q_UNLIKELY(::xlGetDriverConfig(&config) != XL_SUCCESS)
|———————Node:identifier Text: Q_UNLIKELY
|———————Node:argument_list Text: (::xlGetDriverConfig(&config) != XL_SUCCESS)
|————————Node:( Text: (
|————————Node:binary_expression Text: ::xlGetDriverConfig(&config) != XL_SUCCESS
|—————————Node:call_expression Text: ::xlGetDriverConfig(&config)
|——————————Node:qualified_identifier Text: ::xlGetDriverConfig
|———————————Node::: Text: ::
|———————————Node:identifier Text: xlGetDriverConfig
|——————————Node:argument_list Text: (&config)
|———————————Node:( Text: (
|———————————Node:pointer_expression Text: &config
|————————————Node:& Text: &
|————————————Node:identifier Text: config
|———————————Node:) Text: )
|—————————Node:!= Text: !=
|—————————Node:identifier Text: XL_SUCCESS
|————————Node:) Text: )
|——————Node:) Text: )
|—————Node:compound_statement Text: {
            q->setError(VectorCanBackend::tr("Unable to get driver configuration"),
                        QCanBusDevice::CanBusError::ConnectionError);
            return false;
        }
|——————Node:{ Text: {
|——————Node:expression_statement Text: q->setError(VectorCanBackend::tr("Unable to get driver configuration"),
                        QCanBusDevice::CanBusError::ConnectionError);
|———————Node:call_expression Text: q->setError(VectorCanBackend::tr("Unable to get driver configuration"),
                        QCanBusDevice::CanBusError::ConnectionError)
|————————Node:field_expression Text: q->setError
|—————————Node:identifier Text: q
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: setError
|————————Node:argument_list Text: (VectorCanBackend::tr("Unable to get driver configuration"),
                        QCanBusDevice::CanBusError::ConnectionError)
|—————————Node:( Text: (
|—————————Node:call_expression Text: VectorCanBackend::tr("Unable to get driver configuration")
|——————————Node:qualified_identifier Text: VectorCanBackend::tr
|———————————Node:namespace_identifier Text: VectorCanBackend
|———————————Node::: Text: ::
|———————————Node:identifier Text: tr
|——————————Node:argument_list Text: ("Unable to get driver configuration")
|———————————Node:( Text: (
|———————————Node:string_literal Text: "Unable to get driver configuration"
|————————————Node:" Text: "
|————————————Node:string_content Text: Unable to get driver configuration
|————————————Node:" Text: "
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ConnectionError
|——————————Node:namespace_identifier Text: QCanBusDevice
|——————————Node::: Text: ::
|——————————Node:qualified_identifier Text: CanBusError::ConnectionError
|———————————Node:namespace_identifier Text: CanBusError
|———————————Node::: Text: ::
|———————————Node:identifier Text: ConnectionError
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:return_statement Text: return false;
|———————Node:return Text: return
|———————Node:false Text: false
|———————Node:; Text: ;
|——————Node:} Text: }
|————Node:expression_statement Text: channelMask = config.channel[channelIndex].channelMask;
|—————Node:assignment_expression Text: channelMask = config.channel[channelIndex].channelMask
|——————Node:identifier Text: channelMask
|——————Node:= Text: =
|——————Node:field_expression Text: config.channel[channelIndex].channelMask
|———————Node:subscript_expression Text: config.channel[channelIndex]
|————————Node:field_expression Text: config.channel
|—————————Node:identifier Text: config
|—————————Node:. Text: .
|—————————Node:field_identifier Text: channel
|————————Node:subscript_argument_list Text: [channelIndex]
|—————————Node:[ Text: [
|—————————Node:identifier Text: channelIndex
|—————————Node:] Text: ]
|———————Node:. Text: .
|———————Node:field_identifier Text: channelMask
|—————Node:; Text: ;
|————Node:declaration Text: XLaccess permissionMask = channelMask;
|—————Node:type_identifier Text: XLaccess
|—————Node:init_declarator Text: permissionMask = channelMask
|——————Node:identifier Text: permissionMask
|——————Node:= Text: =
|——————Node:identifier Text: channelMask
|—————Node:; Text: ;
|————Node:declaration Text: const quint32 queueSize = usesCanFd ? 8192 : 256;
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: quint32
|—————Node:init_declarator Text: queueSize = usesCanFd ? 8192 : 256
|——————Node:identifier Text: queueSize
|——————Node:= Text: =
|——————Node:conditional_expression Text: usesCanFd ? 8192 : 256
|———————Node:identifier Text: usesCanFd
|———————Node:? Text: ?
|———————Node:number_literal Text: 8192
|———————Node:: Text: :
|———————Node:number_literal Text: 256
|—————Node:; Text: ;
|————Node:declaration Text: const XLstatus status = ::xlOpenPort(&portHandle,
                                             const_cast<char *>(qPrintable(qApp->applicationName())),
                                             channelMask, &permissionMask, queueSize,
                                             usesCanFd ? XL_INTERFACE_VERSION_V4 : XL_INTERFACE_VERSION, XL_BUS_TYPE_CAN);
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: XLstatus
|—————Node:init_declarator Text: status = ::xlOpenPort(&portHandle,
                                             const_cast<char *>(qPrintable(qApp->applicationName())),
                                             channelMask, &permissionMask, queueSize,
                                             usesCanFd ? XL_INTERFACE_VERSION_V4 : XL_INTERFACE_VERSION, XL_BUS_TYPE_CAN)
|——————Node:identifier Text: status
|——————Node:= Text: =
|——————Node:call_expression Text: ::xlOpenPort(&portHandle,
                                             const_cast<char *>(qPrintable(qApp->applicationName())),
                                             channelMask, &permissionMask, queueSize,
                                             usesCanFd ? XL_INTERFACE_VERSION_V4 : XL_INTERFACE_VERSION, XL_BUS_TYPE_CAN)
|———————Node:qualified_identifier Text: ::xlOpenPort
|————————Node::: Text: ::
|————————Node:identifier Text: xlOpenPort
|———————Node:argument_list Text: (&portHandle,
                                             const_cast<char *>(qPrintable(qApp->applicationName())),
                                             channelMask, &permissionMask, queueSize,
                                             usesCanFd ? XL_INTERFACE_VERSION_V4 : XL_INTERFACE_VERSION, XL_BUS_TYPE_CAN)
|————————Node:( Text: (
|————————Node:pointer_expression Text: &portHandle
|—————————Node:& Text: &
|—————————Node:identifier Text: portHandle
|————————Node:, Text: ,
|————————Node:call_expression Text: const_cast<char *>(qPrintable(qApp->applicationName()))
|—————————Node:template_function Text: const_cast<char *>
|——————————Node:identifier Text: const_cast
|——————————Node:template_argument_list Text: <char *>
|———————————Node:< Text: <
|———————————Node:type_descriptor Text: char *
|————————————Node:primitive_type Text: char
|————————————Node:abstract_pointer_declarator Text: *
|—————————————Node:* Text: *
|———————————Node:> Text: >
|—————————Node:argument_list Text: (qPrintable(qApp->applicationName()))
|——————————Node:( Text: (
|——————————Node:call_expression Text: qPrintable(qApp->applicationName())
|———————————Node:identifier Text: qPrintable
|———————————Node:argument_list Text: (qApp->applicationName())
|————————————Node:( Text: (
|————————————Node:call_expression Text: qApp->applicationName()
|—————————————Node:field_expression Text: qApp->applicationName
|——————————————Node:identifier Text: qApp
|——————————————Node:-> Text: ->
|——————————————Node:field_identifier Text: applicationName
|—————————————Node:argument_list Text: ()
|——————————————Node:( Text: (
|——————————————Node:) Text: )
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:identifier Text: channelMask
|————————Node:, Text: ,
|————————Node:pointer_expression Text: &permissionMask
|—————————Node:& Text: &
|—————————Node:identifier Text: permissionMask
|————————Node:, Text: ,
|————————Node:identifier Text: queueSize
|————————Node:, Text: ,
|————————Node:conditional_expression Text: usesCanFd ? XL_INTERFACE_VERSION_V4 : XL_INTERFACE_VERSION
|—————————Node:identifier Text: usesCanFd
|—————————Node:? Text: ?
|—————————Node:identifier Text: XL_INTERFACE_VERSION_V4
|—————————Node:: Text: :
|—————————Node:identifier Text: XL_INTERFACE_VERSION
|————————Node:, Text: ,
|————————Node:identifier Text: XL_BUS_TYPE_CAN
|————————Node:) Text: )
|—————Node:; Text: ;
|————Node:if_statement Text: if (Q_UNLIKELY(status != XL_SUCCESS || portHandle == XL_INVALID_PORTHANDLE)) {
            q->setError(systemErrorString(status), QCanBusDevice::ConnectionError);
            portHandle = XL_INVALID_PORTHANDLE;
            return false;
        }
|—————Node:if Text: if
|—————Node:condition_clause Text: (Q_UNLIKELY(status != XL_SUCCESS || portHandle == XL_INVALID_PORTHANDLE))
|——————Node:( Text: (
|——————Node:call_expression Text: Q_UNLIKELY(status != XL_SUCCESS || portHandle == XL_INVALID_PORTHANDLE)
|———————Node:identifier Text: Q_UNLIKELY
|———————Node:argument_list Text: (status != XL_SUCCESS || portHandle == XL_INVALID_PORTHANDLE)
|————————Node:( Text: (
|————————Node:binary_expression Text: status != XL_SUCCESS || portHandle == XL_INVALID_PORTHANDLE
|—————————Node:binary_expression Text: status != XL_SUCCESS
|——————————Node:identifier Text: status
|——————————Node:!= Text: !=
|——————————Node:identifier Text: XL_SUCCESS
|—————————Node:|| Text: ||
|—————————Node:binary_expression Text: portHandle == XL_INVALID_PORTHANDLE
|——————————Node:identifier Text: portHandle
|——————————Node:== Text: ==
|——————————Node:identifier Text: XL_INVALID_PORTHANDLE
|————————Node:) Text: )
|——————Node:) Text: )
|—————Node:compound_statement Text: {
            q->setError(systemErrorString(status), QCanBusDevice::ConnectionError);
            portHandle = XL_INVALID_PORTHANDLE;
            return false;
        }
|——————Node:{ Text: {
|——————Node:expression_statement Text: q->setError(systemErrorString(status), QCanBusDevice::ConnectionError);
|———————Node:call_expression Text: q->setError(systemErrorString(status), QCanBusDevice::ConnectionError)
|————————Node:field_expression Text: q->setError
|—————————Node:identifier Text: q
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: setError
|————————Node:argument_list Text: (systemErrorString(status), QCanBusDevice::ConnectionError)
|—————————Node:( Text: (
|—————————Node:call_expression Text: systemErrorString(status)
|——————————Node:identifier Text: systemErrorString
|——————————Node:argument_list Text: (status)
|———————————Node:( Text: (
|———————————Node:identifier Text: status
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:qualified_identifier Text: QCanBusDevice::ConnectionError
|——————————Node:namespace_identifier Text: QCanBusDevice
|——————————Node::: Text: ::
|——————————Node:identifier Text: ConnectionError
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:expression_statement Text: portHandle = XL_INVALID_PORTHANDLE;
|———————Node:assignment_expression Text: portHandle = XL_INVALID_PORTHANDLE
|————————Node:identifier Text: portHandle
|————————Node:= Text: =
|————————Node:identifier Text: XL_INVALID_PORTHANDLE
|———————Node:; Text: ;
|——————Node:return_statement Text: return false;
|———————Node:return Text: return
|———————Node:false Text: false
|———————Node:; Text: ;
|——————Node:} Text: }
|————Node:} Text: }
|———Node:if_statement Text: if (usesCanFd && arbBitRate != 0) {
        XLcanFdConf xlfdconf = {};
        xlfdconf.dataBitRate = (dataBitRate != 0) ? dataBitRate : arbBitRate;
        xlfdconf.arbitrationBitRate = arbBitRate;

        const XLstatus status = ::xlCanFdSetConfiguration(portHandle, channelMask, &xlfdconf);
        if (Q_UNLIKELY(status != XL_SUCCESS))
            qCWarning(QT_CANBUS_PLUGINS_VECTORCAN,
                      "Unable to change the configuration for an open channel");
    }
|————Node:if Text: if
|————Node:condition_clause Text: (usesCanFd && arbBitRate != 0)
|—————Node:( Text: (
|—————Node:binary_expression Text: usesCanFd && arbBitRate != 0
|——————Node:identifier Text: usesCanFd
|——————Node:&& Text: &&
|——————Node:binary_expression Text: arbBitRate != 0
|———————Node:identifier Text: arbBitRate
|———————Node:!= Text: !=
|———————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {
        XLcanFdConf xlfdconf = {};
        xlfdconf.dataBitRate = (dataBitRate != 0) ? dataBitRate : arbBitRate;
        xlfdconf.arbitrationBitRate = arbBitRate;

        const XLstatus status = ::xlCanFdSetConfiguration(portHandle, channelMask, &xlfdconf);
        if (Q_UNLIKELY(status != XL_SUCCESS))
            qCWarning(QT_CANBUS_PLUGINS_VECTORCAN,
                      "Unable to change the configuration for an open channel");
    }
|—————Node:{ Text: {
|—————Node:declaration Text: XLcanFdConf xlfdconf = {};
|——————Node:type_identifier Text: XLcanFdConf
|——————Node:init_declarator Text: xlfdconf = {}
|———————Node:identifier Text: xlfdconf
|———————Node:= Text: =
|———————Node:initializer_list Text: {}
|————————Node:{ Text: {
|————————Node:} Text: }
|——————Node:; Text: ;
|—————Node:expression_statement Text: xlfdconf.dataBitRate = (dataBitRate != 0) ? dataBitRate : arbBitRate;
|——————Node:assignment_expression Text: xlfdconf.dataBitRate = (dataBitRate != 0) ? dataBitRate : arbBitRate
|———————Node:field_expression Text: xlfdconf.dataBitRate
|————————Node:identifier Text: xlfdconf
|————————Node:. Text: .
|————————Node:field_identifier Text: dataBitRate
|———————Node:= Text: =
|———————Node:conditional_expression Text: (dataBitRate != 0) ? dataBitRate : arbBitRate
|————————Node:parenthesized_expression Text: (dataBitRate != 0)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: dataBitRate != 0
|——————————Node:identifier Text: dataBitRate
|——————————Node:!= Text: !=
|——————————Node:number_literal Text: 0
|—————————Node:) Text: )
|————————Node:? Text: ?
|————————Node:identifier Text: dataBitRate
|————————Node:: Text: :
|————————Node:identifier Text: arbBitRate
|——————Node:; Text: ;
|—————Node:expression_statement Text: xlfdconf.arbitrationBitRate = arbBitRate;
|——————Node:assignment_expression Text: xlfdconf.arbitrationBitRate = arbBitRate
|———————Node:field_expression Text: xlfdconf.arbitrationBitRate
|————————Node:identifier Text: xlfdconf
|————————Node:. Text: .
|————————Node:field_identifier Text: arbitrationBitRate
|———————Node:= Text: =
|———————Node:identifier Text: arbBitRate
|——————Node:; Text: ;
|—————Node:declaration Text: const XLstatus status = ::xlCanFdSetConfiguration(portHandle, channelMask, &xlfdconf);
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:type_identifier Text: XLstatus
|——————Node:init_declarator Text: status = ::xlCanFdSetConfiguration(portHandle, channelMask, &xlfdconf)
|———————Node:identifier Text: status
|———————Node:= Text: =
|———————Node:call_expression Text: ::xlCanFdSetConfiguration(portHandle, channelMask, &xlfdconf)
|————————Node:qualified_identifier Text: ::xlCanFdSetConfiguration
|—————————Node::: Text: ::
|—————————Node:identifier Text: xlCanFdSetConfiguration
|————————Node:argument_list Text: (portHandle, channelMask, &xlfdconf)
|—————————Node:( Text: (
|—————————Node:identifier Text: portHandle
|—————————Node:, Text: ,
|—————————Node:identifier Text: channelMask
|—————————Node:, Text: ,
|—————————Node:pointer_expression Text: &xlfdconf
|——————————Node:& Text: &
|——————————Node:identifier Text: xlfdconf
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (Q_UNLIKELY(status != XL_SUCCESS))
            qCWarning(QT_CANBUS_PLUGINS_VECTORCAN,
                      "Unable to change the configuration for an open channel");
|——————Node:if Text: if
|——————Node:condition_clause Text: (Q_UNLIKELY(status != XL_SUCCESS))
|———————Node:( Text: (
|———————Node:call_expression Text: Q_UNLIKELY(status != XL_SUCCESS)
|————————Node:identifier Text: Q_UNLIKELY
|————————Node:argument_list Text: (status != XL_SUCCESS)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: status != XL_SUCCESS
|——————————Node:identifier Text: status
|——————————Node:!= Text: !=
|——————————Node:identifier Text: XL_SUCCESS
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:expression_statement Text: qCWarning(QT_CANBUS_PLUGINS_VECTORCAN,
                      "Unable to change the configuration for an open channel");
|———————Node:call_expression Text: qCWarning(QT_CANBUS_PLUGINS_VECTORCAN,
                      "Unable to change the configuration for an open channel")
|————————Node:identifier Text: qCWarning
|————————Node:argument_list Text: (QT_CANBUS_PLUGINS_VECTORCAN,
                      "Unable to change the configuration for an open channel")
|—————————Node:( Text: (
|—————————Node:identifier Text: QT_CANBUS_PLUGINS_VECTORCAN
|—————————Node:, Text: ,
|—————————Node:string_literal Text: "Unable to change the configuration for an open channel"
|——————————Node:" Text: "
|——————————Node:string_content Text: Unable to change the configuration for an open channel
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:} Text: }
|———Node:compound_statement Text: {
        const XLstatus status = ::xlActivateChannel(portHandle, channelMask,
                                                    XL_BUS_TYPE_CAN, XL_ACTIVATE_RESET_CLOCK);
        if (Q_UNLIKELY(status != XL_SUCCESS)) {
            q->setError(systemErrorString(status), QCanBusDevice::CanBusError::ConnectionError);
            return false;
        }
    }
|————Node:{ Text: {
|————Node:declaration Text: const XLstatus status = ::xlActivateChannel(portHandle, channelMask,
                                                    XL_BUS_TYPE_CAN, XL_ACTIVATE_RESET_CLOCK);
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: XLstatus
|—————Node:init_declarator Text: status = ::xlActivateChannel(portHandle, channelMask,
                                                    XL_BUS_TYPE_CAN, XL_ACTIVATE_RESET_CLOCK)
|——————Node:identifier Text: status
|——————Node:= Text: =
|——————Node:call_expression Text: ::xlActivateChannel(portHandle, channelMask,
                                                    XL_BUS_TYPE_CAN, XL_ACTIVATE_RESET_CLOCK)
|———————Node:qualified_identifier Text: ::xlActivateChannel
|————————Node::: Text: ::
|————————Node:identifier Text: xlActivateChannel
|———————Node:argument_list Text: (portHandle, channelMask,
                                                    XL_BUS_TYPE_CAN, XL_ACTIVATE_RESET_CLOCK)
|————————Node:( Text: (
|————————Node:identifier Text: portHandle
|————————Node:, Text: ,
|————————Node:identifier Text: channelMask
|————————Node:, Text: ,
|————————Node:identifier Text: XL_BUS_TYPE_CAN
|————————Node:, Text: ,
|————————Node:identifier Text: XL_ACTIVATE_RESET_CLOCK
|————————Node:) Text: )
|—————Node:; Text: ;
|————Node:if_statement Text: if (Q_UNLIKELY(status != XL_SUCCESS)) {
            q->setError(systemErrorString(status), QCanBusDevice::CanBusError::ConnectionError);
            return false;
        }
|—————Node:if Text: if
|—————Node:condition_clause Text: (Q_UNLIKELY(status != XL_SUCCESS))
|——————Node:( Text: (
|——————Node:call_expression Text: Q_UNLIKELY(status != XL_SUCCESS)
|———————Node:identifier Text: Q_UNLIKELY
|———————Node:argument_list Text: (status != XL_SUCCESS)
|————————Node:( Text: (
|————————Node:binary_expression Text: status != XL_SUCCESS
|—————————Node:identifier Text: status
|—————————Node:!= Text: !=
|—————————Node:identifier Text: XL_SUCCESS
|————————Node:) Text: )
|——————Node:) Text: )
|—————Node:compound_statement Text: {
            q->setError(systemErrorString(status), QCanBusDevice::CanBusError::ConnectionError);
            return false;
        }
|——————Node:{ Text: {
|——————Node:expression_statement Text: q->setError(systemErrorString(status), QCanBusDevice::CanBusError::ConnectionError);
|———————Node:call_expression Text: q->setError(systemErrorString(status), QCanBusDevice::CanBusError::ConnectionError)
|————————Node:field_expression Text: q->setError
|—————————Node:identifier Text: q
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: setError
|————————Node:argument_list Text: (systemErrorString(status), QCanBusDevice::CanBusError::ConnectionError)
|—————————Node:( Text: (
|—————————Node:call_expression Text: systemErrorString(status)
|——————————Node:identifier Text: systemErrorString
|——————————Node:argument_list Text: (status)
|———————————Node:( Text: (
|———————————Node:identifier Text: status
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ConnectionError
|——————————Node:namespace_identifier Text: QCanBusDevice
|——————————Node::: Text: ::
|——————————Node:qualified_identifier Text: CanBusError::ConnectionError
|———————————Node:namespace_identifier Text: CanBusError
|———————————Node::: Text: ::
|———————————Node:identifier Text: ConnectionError
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:return_statement Text: return false;
|———————Node:return Text: return
|———————Node:false Text: false
|———————Node:; Text: ;
|——————Node:} Text: }
|————Node:} Text: }
|———Node:compound_statement Text: {
        const int queueLevel = 1;
        const XLstatus status = ::xlSetNotification(portHandle, &readHandle, queueLevel);
        if (Q_UNLIKELY(status != XL_SUCCESS)) {
            q->setError(systemErrorString(status), QCanBusDevice::ConnectionError);
            return false;
        }
    }
|————Node:{ Text: {
|————Node:declaration Text: const int queueLevel = 1;
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:primitive_type Text: int
|—————Node:init_declarator Text: queueLevel = 1
|——————Node:identifier Text: queueLevel
|——————Node:= Text: =
|——————Node:number_literal Text: 1
|—————Node:; Text: ;
|————Node:declaration Text: const XLstatus status = ::xlSetNotification(portHandle, &readHandle, queueLevel);
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: XLstatus
|—————Node:init_declarator Text: status = ::xlSetNotification(portHandle, &readHandle, queueLevel)
|——————Node:identifier Text: status
|——————Node:= Text: =
|——————Node:call_expression Text: ::xlSetNotification(portHandle, &readHandle, queueLevel)
|———————Node:qualified_identifier Text: ::xlSetNotification
|————————Node::: Text: ::
|————————Node:identifier Text: xlSetNotification
|———————Node:argument_list Text: (portHandle, &readHandle, queueLevel)
|————————Node:( Text: (
|————————Node:identifier Text: portHandle
|————————Node:, Text: ,
|————————Node:pointer_expression Text: &readHandle
|—————————Node:& Text: &
|—————————Node:identifier Text: readHandle
|————————Node:, Text: ,
|————————Node:identifier Text: queueLevel
|————————Node:) Text: )
|—————Node:; Text: ;
|————Node:if_statement Text: if (Q_UNLIKELY(status != XL_SUCCESS)) {
            q->setError(systemErrorString(status), QCanBusDevice::ConnectionError);
            return false;
        }
|—————Node:if Text: if
|—————Node:condition_clause Text: (Q_UNLIKELY(status != XL_SUCCESS))
|——————Node:( Text: (
|——————Node:call_expression Text: Q_UNLIKELY(status != XL_SUCCESS)
|———————Node:identifier Text: Q_UNLIKELY
|———————Node:argument_list Text: (status != XL_SUCCESS)
|————————Node:( Text: (
|————————Node:binary_expression Text: status != XL_SUCCESS
|—————————Node:identifier Text: status
|—————————Node:!= Text: !=
|—————————Node:identifier Text: XL_SUCCESS
|————————Node:) Text: )
|——————Node:) Text: )
|—————Node:compound_statement Text: {
            q->setError(systemErrorString(status), QCanBusDevice::ConnectionError);
            return false;
        }
|——————Node:{ Text: {
|——————Node:expression_statement Text: q->setError(systemErrorString(status), QCanBusDevice::ConnectionError);
|———————Node:call_expression Text: q->setError(systemErrorString(status), QCanBusDevice::ConnectionError)
|————————Node:field_expression Text: q->setError
|—————————Node:identifier Text: q
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: setError
|————————Node:argument_list Text: (systemErrorString(status), QCanBusDevice::ConnectionError)
|—————————Node:( Text: (
|—————————Node:call_expression Text: systemErrorString(status)
|——————————Node:identifier Text: systemErrorString
|——————————Node:argument_list Text: (status)
|———————————Node:( Text: (
|———————————Node:identifier Text: status
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:qualified_identifier Text: QCanBusDevice::ConnectionError
|——————————Node:namespace_identifier Text: QCanBusDevice
|——————————Node::: Text: ::
|——————————Node:identifier Text: ConnectionError
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:return_statement Text: return false;
|———————Node:return Text: return
|———————Node:false Text: false
|———————Node:; Text: ;
|——————Node:} Text: }
|————Node:} Text: }
|———Node:expression_statement Text: readNotifier = new VectorCanReadNotifier(this, q);
|————Node:assignment_expression Text: readNotifier = new VectorCanReadNotifier(this, q)
|—————Node:identifier Text: readNotifier
|—————Node:= Text: =
|—————Node:new_expression Text: new VectorCanReadNotifier(this, q)
|——————Node:new Text: new
|——————Node:type_identifier Text: VectorCanReadNotifier
|——————Node:argument_list Text: (this, q)
|———————Node:( Text: (
|———————Node:this Text: this
|———————Node:, Text: ,
|———————Node:identifier Text: q
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: readNotifier->setEnabled(true);
|————Node:call_expression Text: readNotifier->setEnabled(true)
|—————Node:field_expression Text: readNotifier->setEnabled
|——————Node:identifier Text: readNotifier
|——————Node:-> Text: ->
|——————Node:field_identifier Text: setEnabled
|—————Node:argument_list Text: (true)
|——————Node:( Text: (
|——————Node:true Text: true
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: writeNotifier = new VectorCanWriteNotifier(this, q);
|————Node:assignment_expression Text: writeNotifier = new VectorCanWriteNotifier(this, q)
|—————Node:identifier Text: writeNotifier
|—————Node:= Text: =
|—————Node:new_expression Text: new VectorCanWriteNotifier(this, q)
|——————Node:new Text: new
|——————Node:type_identifier Text: VectorCanWriteNotifier
|——————Node:argument_list Text: (this, q)
|———————Node:( Text: (
|———————Node:this Text: this
|———————Node:, Text: ,
|———————Node:identifier Text: q
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return true;
|————Node:return Text: return
|————Node:true Text: true
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void VectorCanBackendPrivate::close()
{
    Q_Q(VectorCanBackend);

    delete readNotifier;
    readNotifier = nullptr;

    delete writeNotifier;
    writeNotifier = nullptr;

    // xlClosePort can crash on systems with vxlapi.dll but no device driver installed.
    // Therefore avoid calling any close function when the portHandle is invalid anyway.
    if (portHandle == XL_INVALID_PORTHANDLE)
        return;

    {
        const XLstatus status = ::xlDeactivateChannel(portHandle, channelMask);
        if (Q_UNLIKELY(status != XL_SUCCESS)) {
            q->setError(systemErrorString(status), QCanBusDevice::CanBusError::ConnectionError);
        }
    }

    {
        const XLstatus status = ::xlClosePort(portHandle);
        if (Q_UNLIKELY(status != XL_SUCCESS)) {
            q->setError(systemErrorString(status), QCanBusDevice::ConnectionError);
        }
    }

    portHandle = XL_INVALID_PORTHANDLE;
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: VectorCanBackendPrivate::close()
|———Node:qualified_identifier Text: VectorCanBackendPrivate::close
|————Node:namespace_identifier Text: VectorCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: close
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(VectorCanBackend);

    delete readNotifier;
    readNotifier = nullptr;

    delete writeNotifier;
    writeNotifier = nullptr;

    // xlClosePort can crash on systems with vxlapi.dll but no device driver installed.
    // Therefore avoid calling any close function when the portHandle is invalid anyway.
    if (portHandle == XL_INVALID_PORTHANDLE)
        return;

    {
        const XLstatus status = ::xlDeactivateChannel(portHandle, channelMask);
        if (Q_UNLIKELY(status != XL_SUCCESS)) {
            q->setError(systemErrorString(status), QCanBusDevice::CanBusError::ConnectionError);
        }
    }

    {
        const XLstatus status = ::xlClosePort(portHandle);
        if (Q_UNLIKELY(status != XL_SUCCESS)) {
            q->setError(systemErrorString(status), QCanBusDevice::ConnectionError);
        }
    }

    portHandle = XL_INVALID_PORTHANDLE;
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(VectorCanBackend);
|————Node:call_expression Text: Q_Q(VectorCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (VectorCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: VectorCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: delete readNotifier;
|————Node:delete_expression Text: delete readNotifier
|—————Node:delete Text: delete
|—————Node:identifier Text: readNotifier
|————Node:; Text: ;
|———Node:expression_statement Text: readNotifier = nullptr;
|————Node:assignment_expression Text: readNotifier = nullptr
|—————Node:identifier Text: readNotifier
|—————Node:= Text: =
|—————Node:null Text: nullptr
|——————Node:nullptr Text: nullptr
|————Node:; Text: ;
|———Node:expression_statement Text: delete writeNotifier;
|————Node:delete_expression Text: delete writeNotifier
|—————Node:delete Text: delete
|—————Node:identifier Text: writeNotifier
|————Node:; Text: ;
|———Node:expression_statement Text: writeNotifier = nullptr;
|————Node:assignment_expression Text: writeNotifier = nullptr
|—————Node:identifier Text: writeNotifier
|—————Node:= Text: =
|—————Node:null Text: nullptr
|——————Node:nullptr Text: nullptr
|————Node:; Text: ;
|———Node:comment
|———Node:comment
|———Node:if_statement Text: if (portHandle == XL_INVALID_PORTHANDLE)
        return;
|————Node:if Text: if
|————Node:condition_clause Text: (portHandle == XL_INVALID_PORTHANDLE)
|—————Node:( Text: (
|—————Node:binary_expression Text: portHandle == XL_INVALID_PORTHANDLE
|——————Node:identifier Text: portHandle
|——————Node:== Text: ==
|——————Node:identifier Text: XL_INVALID_PORTHANDLE
|—————Node:) Text: )
|————Node:return_statement Text: return;
|—————Node:return Text: return
|—————Node:; Text: ;
|———Node:compound_statement Text: {
        const XLstatus status = ::xlDeactivateChannel(portHandle, channelMask);
        if (Q_UNLIKELY(status != XL_SUCCESS)) {
            q->setError(systemErrorString(status), QCanBusDevice::CanBusError::ConnectionError);
        }
    }
|————Node:{ Text: {
|————Node:declaration Text: const XLstatus status = ::xlDeactivateChannel(portHandle, channelMask);
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: XLstatus
|—————Node:init_declarator Text: status = ::xlDeactivateChannel(portHandle, channelMask)
|——————Node:identifier Text: status
|——————Node:= Text: =
|——————Node:call_expression Text: ::xlDeactivateChannel(portHandle, channelMask)
|———————Node:qualified_identifier Text: ::xlDeactivateChannel
|————————Node::: Text: ::
|————————Node:identifier Text: xlDeactivateChannel
|———————Node:argument_list Text: (portHandle, channelMask)
|————————Node:( Text: (
|————————Node:identifier Text: portHandle
|————————Node:, Text: ,
|————————Node:identifier Text: channelMask
|————————Node:) Text: )
|—————Node:; Text: ;
|————Node:if_statement Text: if (Q_UNLIKELY(status != XL_SUCCESS)) {
            q->setError(systemErrorString(status), QCanBusDevice::CanBusError::ConnectionError);
        }
|—————Node:if Text: if
|—————Node:condition_clause Text: (Q_UNLIKELY(status != XL_SUCCESS))
|——————Node:( Text: (
|——————Node:call_expression Text: Q_UNLIKELY(status != XL_SUCCESS)
|———————Node:identifier Text: Q_UNLIKELY
|———————Node:argument_list Text: (status != XL_SUCCESS)
|————————Node:( Text: (
|————————Node:binary_expression Text: status != XL_SUCCESS
|—————————Node:identifier Text: status
|—————————Node:!= Text: !=
|—————————Node:identifier Text: XL_SUCCESS
|————————Node:) Text: )
|——————Node:) Text: )
|—————Node:compound_statement Text: {
            q->setError(systemErrorString(status), QCanBusDevice::CanBusError::ConnectionError);
        }
|——————Node:{ Text: {
|——————Node:expression_statement Text: q->setError(systemErrorString(status), QCanBusDevice::CanBusError::ConnectionError);
|———————Node:call_expression Text: q->setError(systemErrorString(status), QCanBusDevice::CanBusError::ConnectionError)
|————————Node:field_expression Text: q->setError
|—————————Node:identifier Text: q
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: setError
|————————Node:argument_list Text: (systemErrorString(status), QCanBusDevice::CanBusError::ConnectionError)
|—————————Node:( Text: (
|—————————Node:call_expression Text: systemErrorString(status)
|——————————Node:identifier Text: systemErrorString
|——————————Node:argument_list Text: (status)
|———————————Node:( Text: (
|———————————Node:identifier Text: status
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ConnectionError
|——————————Node:namespace_identifier Text: QCanBusDevice
|——————————Node::: Text: ::
|——————————Node:qualified_identifier Text: CanBusError::ConnectionError
|———————————Node:namespace_identifier Text: CanBusError
|———————————Node::: Text: ::
|———————————Node:identifier Text: ConnectionError
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:} Text: }
|————Node:} Text: }
|———Node:compound_statement Text: {
        const XLstatus status = ::xlClosePort(portHandle);
        if (Q_UNLIKELY(status != XL_SUCCESS)) {
            q->setError(systemErrorString(status), QCanBusDevice::ConnectionError);
        }
    }
|————Node:{ Text: {
|————Node:declaration Text: const XLstatus status = ::xlClosePort(portHandle);
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: XLstatus
|—————Node:init_declarator Text: status = ::xlClosePort(portHandle)
|——————Node:identifier Text: status
|——————Node:= Text: =
|——————Node:call_expression Text: ::xlClosePort(portHandle)
|———————Node:qualified_identifier Text: ::xlClosePort
|————————Node::: Text: ::
|————————Node:identifier Text: xlClosePort
|———————Node:argument_list Text: (portHandle)
|————————Node:( Text: (
|————————Node:identifier Text: portHandle
|————————Node:) Text: )
|—————Node:; Text: ;
|————Node:if_statement Text: if (Q_UNLIKELY(status != XL_SUCCESS)) {
            q->setError(systemErrorString(status), QCanBusDevice::ConnectionError);
        }
|—————Node:if Text: if
|—————Node:condition_clause Text: (Q_UNLIKELY(status != XL_SUCCESS))
|——————Node:( Text: (
|——————Node:call_expression Text: Q_UNLIKELY(status != XL_SUCCESS)
|———————Node:identifier Text: Q_UNLIKELY
|———————Node:argument_list Text: (status != XL_SUCCESS)
|————————Node:( Text: (
|————————Node:binary_expression Text: status != XL_SUCCESS
|—————————Node:identifier Text: status
|—————————Node:!= Text: !=
|—————————Node:identifier Text: XL_SUCCESS
|————————Node:) Text: )
|——————Node:) Text: )
|—————Node:compound_statement Text: {
            q->setError(systemErrorString(status), QCanBusDevice::ConnectionError);
        }
|——————Node:{ Text: {
|——————Node:expression_statement Text: q->setError(systemErrorString(status), QCanBusDevice::ConnectionError);
|———————Node:call_expression Text: q->setError(systemErrorString(status), QCanBusDevice::ConnectionError)
|————————Node:field_expression Text: q->setError
|—————————Node:identifier Text: q
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: setError
|————————Node:argument_list Text: (systemErrorString(status), QCanBusDevice::ConnectionError)
|—————————Node:( Text: (
|—————————Node:call_expression Text: systemErrorString(status)
|——————————Node:identifier Text: systemErrorString
|——————————Node:argument_list Text: (status)
|———————————Node:( Text: (
|———————————Node:identifier Text: status
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:qualified_identifier Text: QCanBusDevice::ConnectionError
|——————————Node:namespace_identifier Text: QCanBusDevice
|——————————Node::: Text: ::
|——————————Node:identifier Text: ConnectionError
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:} Text: }
|————Node:} Text: }
|———Node:expression_statement Text: portHandle = XL_INVALID_PORTHANDLE;
|————Node:assignment_expression Text: portHandle = XL_INVALID_PORTHANDLE
|—————Node:identifier Text: portHandle
|—————Node:= Text: =
|—————Node:identifier Text: XL_INVALID_PORTHANDLE
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: bool VectorCanBackendPrivate::setConfigurationParameter(QCanBusDevice::ConfigurationKey key,
                                                        const QVariant &value)
{
    Q_Q(VectorCanBackend);

    switch (key) {
    case QCanBusDevice::BitRateKey:
        return setBitRate(value.toUInt());
    case QCanBusDevice::ReceiveOwnKey:
        transmitEcho = value.toBool();
        return true;
    case QCanBusDevice::DataBitRateKey:
        return setDataBitRate(value.toUInt());
    case QCanBusDevice::CanFdKey:
    {
        if (value.toBool()) {
            XLdriverConfig config;
            if (Q_UNLIKELY(::xlGetDriverConfig(&config) == XL_SUCCESS)) {
                if (config.channel[channelIndex].channelCapabilities & XL_CHANNEL_FLAG_CANFD_SUPPORT) {
                    usesCanFd = true;
                    return true;
                }
            }
            q->setError(VectorCanBackend::tr("Unable to set CAN FD"),
                        QCanBusDevice::CanBusError::ConfigurationError);
            return false;
        }
        usesCanFd = false;
        return true;
    }
    default:
        q->setError(VectorCanBackend::tr("Unsupported configuration key: %1").arg(key),
                    QCanBusDevice::ConfigurationError);
        return false;
    }
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: VectorCanBackendPrivate::setConfigurationParameter(QCanBusDevice::ConfigurationKey key,
                                                        const QVariant &value)
|———Node:qualified_identifier Text: VectorCanBackendPrivate::setConfigurationParameter
|————Node:namespace_identifier Text: VectorCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: setConfigurationParameter
|———Node:parameter_list Text: (QCanBusDevice::ConfigurationKey key,
                                                        const QVariant &value)
|————Node:( Text: (
|————Node:parameter_declaration Text: QCanBusDevice::ConfigurationKey key
|—————Node:qualified_identifier Text: QCanBusDevice::ConfigurationKey
|——————Node:namespace_identifier Text: QCanBusDevice
|——————Node::: Text: ::
|——————Node:type_identifier Text: ConfigurationKey
|—————Node:identifier Text: key
|————Node:, Text: ,
|————Node:parameter_declaration Text: const QVariant &value
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: QVariant
|—————Node:reference_declarator Text: &value
|——————Node:& Text: &
|——————Node:identifier Text: value
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(VectorCanBackend);

    switch (key) {
    case QCanBusDevice::BitRateKey:
        return setBitRate(value.toUInt());
    case QCanBusDevice::ReceiveOwnKey:
        transmitEcho = value.toBool();
        return true;
    case QCanBusDevice::DataBitRateKey:
        return setDataBitRate(value.toUInt());
    case QCanBusDevice::CanFdKey:
    {
        if (value.toBool()) {
            XLdriverConfig config;
            if (Q_UNLIKELY(::xlGetDriverConfig(&config) == XL_SUCCESS)) {
                if (config.channel[channelIndex].channelCapabilities & XL_CHANNEL_FLAG_CANFD_SUPPORT) {
                    usesCanFd = true;
                    return true;
                }
            }
            q->setError(VectorCanBackend::tr("Unable to set CAN FD"),
                        QCanBusDevice::CanBusError::ConfigurationError);
            return false;
        }
        usesCanFd = false;
        return true;
    }
    default:
        q->setError(VectorCanBackend::tr("Unsupported configuration key: %1").arg(key),
                    QCanBusDevice::ConfigurationError);
        return false;
    }
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(VectorCanBackend);
|————Node:call_expression Text: Q_Q(VectorCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (VectorCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: VectorCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:switch_statement Text: switch (key) {
    case QCanBusDevice::BitRateKey:
        return setBitRate(value.toUInt());
    case QCanBusDevice::ReceiveOwnKey:
        transmitEcho = value.toBool();
        return true;
    case QCanBusDevice::DataBitRateKey:
        return setDataBitRate(value.toUInt());
    case QCanBusDevice::CanFdKey:
    {
        if (value.toBool()) {
            XLdriverConfig config;
            if (Q_UNLIKELY(::xlGetDriverConfig(&config) == XL_SUCCESS)) {
                if (config.channel[channelIndex].channelCapabilities & XL_CHANNEL_FLAG_CANFD_SUPPORT) {
                    usesCanFd = true;
                    return true;
                }
            }
            q->setError(VectorCanBackend::tr("Unable to set CAN FD"),
                        QCanBusDevice::CanBusError::ConfigurationError);
            return false;
        }
        usesCanFd = false;
        return true;
    }
    default:
        q->setError(VectorCanBackend::tr("Unsupported configuration key: %1").arg(key),
                    QCanBusDevice::ConfigurationError);
        return false;
    }
|————Node:switch Text: switch
|————Node:condition_clause Text: (key)
|—————Node:( Text: (
|—————Node:identifier Text: key
|—————Node:) Text: )
|————Node:compound_statement Text: {
    case QCanBusDevice::BitRateKey:
        return setBitRate(value.toUInt());
    case QCanBusDevice::ReceiveOwnKey:
        transmitEcho = value.toBool();
        return true;
    case QCanBusDevice::DataBitRateKey:
        return setDataBitRate(value.toUInt());
    case QCanBusDevice::CanFdKey:
    {
        if (value.toBool()) {
            XLdriverConfig config;
            if (Q_UNLIKELY(::xlGetDriverConfig(&config) == XL_SUCCESS)) {
                if (config.channel[channelIndex].channelCapabilities & XL_CHANNEL_FLAG_CANFD_SUPPORT) {
                    usesCanFd = true;
                    return true;
                }
            }
            q->setError(VectorCanBackend::tr("Unable to set CAN FD"),
                        QCanBusDevice::CanBusError::ConfigurationError);
            return false;
        }
        usesCanFd = false;
        return true;
    }
    default:
        q->setError(VectorCanBackend::tr("Unsupported configuration key: %1").arg(key),
                    QCanBusDevice::ConfigurationError);
        return false;
    }
|—————Node:{ Text: {
|—————Node:case_statement Text: case QCanBusDevice::BitRateKey:
        return setBitRate(value.toUInt());
|——————Node:case Text: case
|——————Node:qualified_identifier Text: QCanBusDevice::BitRateKey
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: BitRateKey
|——————Node:: Text: :
|——————Node:return_statement Text: return setBitRate(value.toUInt());
|———————Node:return Text: return
|———————Node:call_expression Text: setBitRate(value.toUInt())
|————————Node:identifier Text: setBitRate
|————————Node:argument_list Text: (value.toUInt())
|—————————Node:( Text: (
|—————————Node:call_expression Text: value.toUInt()
|——————————Node:field_expression Text: value.toUInt
|———————————Node:identifier Text: value
|———————————Node:. Text: .
|———————————Node:field_identifier Text: toUInt
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case QCanBusDevice::ReceiveOwnKey:
        transmitEcho = value.toBool();
        return true;
|——————Node:case Text: case
|——————Node:qualified_identifier Text: QCanBusDevice::ReceiveOwnKey
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: ReceiveOwnKey
|——————Node:: Text: :
|——————Node:expression_statement Text: transmitEcho = value.toBool();
|———————Node:assignment_expression Text: transmitEcho = value.toBool()
|————————Node:identifier Text: transmitEcho
|————————Node:= Text: =
|————————Node:call_expression Text: value.toBool()
|—————————Node:field_expression Text: value.toBool
|——————————Node:identifier Text: value
|——————————Node:. Text: .
|——————————Node:field_identifier Text: toBool
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:return_statement Text: return true;
|———————Node:return Text: return
|———————Node:true Text: true
|———————Node:; Text: ;
|—————Node:case_statement Text: case QCanBusDevice::DataBitRateKey:
        return setDataBitRate(value.toUInt());
|——————Node:case Text: case
|——————Node:qualified_identifier Text: QCanBusDevice::DataBitRateKey
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: DataBitRateKey
|——————Node:: Text: :
|——————Node:return_statement Text: return setDataBitRate(value.toUInt());
|———————Node:return Text: return
|———————Node:call_expression Text: setDataBitRate(value.toUInt())
|————————Node:identifier Text: setDataBitRate
|————————Node:argument_list Text: (value.toUInt())
|—————————Node:( Text: (
|—————————Node:call_expression Text: value.toUInt()
|——————————Node:field_expression Text: value.toUInt
|———————————Node:identifier Text: value
|———————————Node:. Text: .
|———————————Node:field_identifier Text: toUInt
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case QCanBusDevice::CanFdKey:
    {
        if (value.toBool()) {
            XLdriverConfig config;
            if (Q_UNLIKELY(::xlGetDriverConfig(&config) == XL_SUCCESS)) {
                if (config.channel[channelIndex].channelCapabilities & XL_CHANNEL_FLAG_CANFD_SUPPORT) {
                    usesCanFd = true;
                    return true;
                }
            }
            q->setError(VectorCanBackend::tr("Unable to set CAN FD"),
                        QCanBusDevice::CanBusError::ConfigurationError);
            return false;
        }
        usesCanFd = false;
        return true;
    }
|——————Node:case Text: case
|——————Node:qualified_identifier Text: QCanBusDevice::CanFdKey
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: CanFdKey
|——————Node:: Text: :
|——————Node:compound_statement Text: {
        if (value.toBool()) {
            XLdriverConfig config;
            if (Q_UNLIKELY(::xlGetDriverConfig(&config) == XL_SUCCESS)) {
                if (config.channel[channelIndex].channelCapabilities & XL_CHANNEL_FLAG_CANFD_SUPPORT) {
                    usesCanFd = true;
                    return true;
                }
            }
            q->setError(VectorCanBackend::tr("Unable to set CAN FD"),
                        QCanBusDevice::CanBusError::ConfigurationError);
            return false;
        }
        usesCanFd = false;
        return true;
    }
|———————Node:{ Text: {
|———————Node:if_statement Text: if (value.toBool()) {
            XLdriverConfig config;
            if (Q_UNLIKELY(::xlGetDriverConfig(&config) == XL_SUCCESS)) {
                if (config.channel[channelIndex].channelCapabilities & XL_CHANNEL_FLAG_CANFD_SUPPORT) {
                    usesCanFd = true;
                    return true;
                }
            }
            q->setError(VectorCanBackend::tr("Unable to set CAN FD"),
                        QCanBusDevice::CanBusError::ConfigurationError);
            return false;
        }
|————————Node:if Text: if
|————————Node:condition_clause Text: (value.toBool())
|—————————Node:( Text: (
|—————————Node:call_expression Text: value.toBool()
|——————————Node:field_expression Text: value.toBool
|———————————Node:identifier Text: value
|———————————Node:. Text: .
|———————————Node:field_identifier Text: toBool
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
            XLdriverConfig config;
            if (Q_UNLIKELY(::xlGetDriverConfig(&config) == XL_SUCCESS)) {
                if (config.channel[channelIndex].channelCapabilities & XL_CHANNEL_FLAG_CANFD_SUPPORT) {
                    usesCanFd = true;
                    return true;
                }
            }
            q->setError(VectorCanBackend::tr("Unable to set CAN FD"),
                        QCanBusDevice::CanBusError::ConfigurationError);
            return false;
        }
|—————————Node:{ Text: {
|—————————Node:declaration Text: XLdriverConfig config;
|——————————Node:type_identifier Text: XLdriverConfig
|——————————Node:identifier Text: config
|——————————Node:; Text: ;
|—————————Node:if_statement Text: if (Q_UNLIKELY(::xlGetDriverConfig(&config) == XL_SUCCESS)) {
                if (config.channel[channelIndex].channelCapabilities & XL_CHANNEL_FLAG_CANFD_SUPPORT) {
                    usesCanFd = true;
                    return true;
                }
            }
|——————————Node:if Text: if
|——————————Node:condition_clause Text: (Q_UNLIKELY(::xlGetDriverConfig(&config) == XL_SUCCESS))
|———————————Node:( Text: (
|———————————Node:call_expression Text: Q_UNLIKELY(::xlGetDriverConfig(&config) == XL_SUCCESS)
|————————————Node:identifier Text: Q_UNLIKELY
|————————————Node:argument_list Text: (::xlGetDriverConfig(&config) == XL_SUCCESS)
|—————————————Node:( Text: (
|—————————————Node:binary_expression Text: ::xlGetDriverConfig(&config) == XL_SUCCESS
|——————————————Node:call_expression Text: ::xlGetDriverConfig(&config)
|———————————————Node:qualified_identifier Text: ::xlGetDriverConfig
|————————————————Node::: Text: ::
|————————————————Node:identifier Text: xlGetDriverConfig
|———————————————Node:argument_list Text: (&config)
|————————————————Node:( Text: (
|————————————————Node:pointer_expression Text: &config
|—————————————————Node:& Text: &
|—————————————————Node:identifier Text: config
|————————————————Node:) Text: )
|——————————————Node:== Text: ==
|——————————————Node:identifier Text: XL_SUCCESS
|—————————————Node:) Text: )
|———————————Node:) Text: )
|——————————Node:compound_statement Text: {
                if (config.channel[channelIndex].channelCapabilities & XL_CHANNEL_FLAG_CANFD_SUPPORT) {
                    usesCanFd = true;
                    return true;
                }
            }
|———————————Node:{ Text: {
|———————————Node:if_statement Text: if (config.channel[channelIndex].channelCapabilities & XL_CHANNEL_FLAG_CANFD_SUPPORT) {
                    usesCanFd = true;
                    return true;
                }
|————————————Node:if Text: if
|————————————Node:condition_clause Text: (config.channel[channelIndex].channelCapabilities & XL_CHANNEL_FLAG_CANFD_SUPPORT)
|—————————————Node:( Text: (
|—————————————Node:binary_expression Text: config.channel[channelIndex].channelCapabilities & XL_CHANNEL_FLAG_CANFD_SUPPORT
|——————————————Node:field_expression Text: config.channel[channelIndex].channelCapabilities
|———————————————Node:subscript_expression Text: config.channel[channelIndex]
|————————————————Node:field_expression Text: config.channel
|—————————————————Node:identifier Text: config
|—————————————————Node:. Text: .
|—————————————————Node:field_identifier Text: channel
|————————————————Node:subscript_argument_list Text: [channelIndex]
|—————————————————Node:[ Text: [
|—————————————————Node:identifier Text: channelIndex
|—————————————————Node:] Text: ]
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: channelCapabilities
|——————————————Node:& Text: &
|——————————————Node:identifier Text: XL_CHANNEL_FLAG_CANFD_SUPPORT
|—————————————Node:) Text: )
|————————————Node:compound_statement Text: {
                    usesCanFd = true;
                    return true;
                }
|—————————————Node:{ Text: {
|—————————————Node:expression_statement Text: usesCanFd = true;
|——————————————Node:assignment_expression Text: usesCanFd = true
|———————————————Node:identifier Text: usesCanFd
|———————————————Node:= Text: =
|———————————————Node:true Text: true
|——————————————Node:; Text: ;
|—————————————Node:return_statement Text: return true;
|——————————————Node:return Text: return
|——————————————Node:true Text: true
|——————————————Node:; Text: ;
|—————————————Node:} Text: }
|———————————Node:} Text: }
|—————————Node:expression_statement Text: q->setError(VectorCanBackend::tr("Unable to set CAN FD"),
                        QCanBusDevice::CanBusError::ConfigurationError);
|——————————Node:call_expression Text: q->setError(VectorCanBackend::tr("Unable to set CAN FD"),
                        QCanBusDevice::CanBusError::ConfigurationError)
|———————————Node:field_expression Text: q->setError
|————————————Node:identifier Text: q
|————————————Node:-> Text: ->
|————————————Node:field_identifier Text: setError
|———————————Node:argument_list Text: (VectorCanBackend::tr("Unable to set CAN FD"),
                        QCanBusDevice::CanBusError::ConfigurationError)
|————————————Node:( Text: (
|————————————Node:call_expression Text: VectorCanBackend::tr("Unable to set CAN FD")
|—————————————Node:qualified_identifier Text: VectorCanBackend::tr
|——————————————Node:namespace_identifier Text: VectorCanBackend
|——————————————Node::: Text: ::
|——————————————Node:identifier Text: tr
|—————————————Node:argument_list Text: ("Unable to set CAN FD")
|——————————————Node:( Text: (
|——————————————Node:string_literal Text: "Unable to set CAN FD"
|———————————————Node:" Text: "
|———————————————Node:string_content Text: Unable to set CAN FD
|———————————————Node:" Text: "
|——————————————Node:) Text: )
|————————————Node:, Text: ,
|————————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ConfigurationError
|—————————————Node:namespace_identifier Text: QCanBusDevice
|—————————————Node::: Text: ::
|—————————————Node:qualified_identifier Text: CanBusError::ConfigurationError
|——————————————Node:namespace_identifier Text: CanBusError
|——————————————Node::: Text: ::
|——————————————Node:identifier Text: ConfigurationError
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:return_statement Text: return false;
|——————————Node:return Text: return
|——————————Node:false Text: false
|——————————Node:; Text: ;
|—————————Node:} Text: }
|———————Node:expression_statement Text: usesCanFd = false;
|————————Node:assignment_expression Text: usesCanFd = false
|—————————Node:identifier Text: usesCanFd
|—————————Node:= Text: =
|—————————Node:false Text: false
|————————Node:; Text: ;
|———————Node:return_statement Text: return true;
|————————Node:return Text: return
|————————Node:true Text: true
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:case_statement Text: default:
        q->setError(VectorCanBackend::tr("Unsupported configuration key: %1").arg(key),
                    QCanBusDevice::ConfigurationError);
        return false;
|——————Node:default Text: default
|——————Node:: Text: :
|——————Node:expression_statement Text: q->setError(VectorCanBackend::tr("Unsupported configuration key: %1").arg(key),
                    QCanBusDevice::ConfigurationError);
|———————Node:call_expression Text: q->setError(VectorCanBackend::tr("Unsupported configuration key: %1").arg(key),
                    QCanBusDevice::ConfigurationError)
|————————Node:field_expression Text: q->setError
|—————————Node:identifier Text: q
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: setError
|————————Node:argument_list Text: (VectorCanBackend::tr("Unsupported configuration key: %1").arg(key),
                    QCanBusDevice::ConfigurationError)
|—————————Node:( Text: (
|—————————Node:call_expression Text: VectorCanBackend::tr("Unsupported configuration key: %1").arg(key)
|——————————Node:field_expression Text: VectorCanBackend::tr("Unsupported configuration key: %1").arg
|———————————Node:call_expression Text: VectorCanBackend::tr("Unsupported configuration key: %1")
|————————————Node:qualified_identifier Text: VectorCanBackend::tr
|—————————————Node:namespace_identifier Text: VectorCanBackend
|—————————————Node::: Text: ::
|—————————————Node:identifier Text: tr
|————————————Node:argument_list Text: ("Unsupported configuration key: %1")
|—————————————Node:( Text: (
|—————————————Node:string_literal Text: "Unsupported configuration key: %1"
|——————————————Node:" Text: "
|——————————————Node:string_content Text: Unsupported configuration key: %1
|——————————————Node:" Text: "
|—————————————Node:) Text: )
|———————————Node:. Text: .
|———————————Node:field_identifier Text: arg
|——————————Node:argument_list Text: (key)
|———————————Node:( Text: (
|———————————Node:identifier Text: key
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:qualified_identifier Text: QCanBusDevice::ConfigurationError
|——————————Node:namespace_identifier Text: QCanBusDevice
|——————————Node::: Text: ::
|——————————Node:identifier Text: ConfigurationError
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:return_statement Text: return false;
|———————Node:return Text: return
|———————Node:false Text: false
|———————Node:; Text: ;
|—————Node:} Text: }
|———Node:} Text: }
|—Node:function_definition Text: void VectorCanBackendPrivate::setupChannel(const QString &interfaceName)
{
    Q_Q(VectorCanBackend);
    if (Q_LIKELY(interfaceName.startsWith(QStringLiteral("can")))) {
        const QStringView ref = QStringView{interfaceName}.mid(3);
        bool ok = false;
        channelIndex = ref.toInt(&ok);
        if (ok && (channelIndex >= 0 && channelIndex < XL_CONFIG_MAX_CHANNELS)) {
            channelMask = xlGetChannelMask(-1, channelIndex, 0);
            return;
        } else {
            channelIndex = -1;
            q->setError(VectorCanBackend::tr("Unable to setup channel with interface name %1")
                            .arg(interfaceName), QCanBusDevice::CanBusError::ConfigurationError);
        }
    }

    qCCritical(QT_CANBUS_PLUGINS_VECTORCAN, "Unable to parse the channel %ls",
               qUtf16Printable(interfaceName));
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: VectorCanBackendPrivate::setupChannel(const QString &interfaceName)
|———Node:qualified_identifier Text: VectorCanBackendPrivate::setupChannel
|————Node:namespace_identifier Text: VectorCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: setupChannel
|———Node:parameter_list Text: (const QString &interfaceName)
|————Node:( Text: (
|————Node:parameter_declaration Text: const QString &interfaceName
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: QString
|—————Node:reference_declarator Text: &interfaceName
|——————Node:& Text: &
|——————Node:identifier Text: interfaceName
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(VectorCanBackend);
    if (Q_LIKELY(interfaceName.startsWith(QStringLiteral("can")))) {
        const QStringView ref = QStringView{interfaceName}.mid(3);
        bool ok = false;
        channelIndex = ref.toInt(&ok);
        if (ok && (channelIndex >= 0 && channelIndex < XL_CONFIG_MAX_CHANNELS)) {
            channelMask = xlGetChannelMask(-1, channelIndex, 0);
            return;
        } else {
            channelIndex = -1;
            q->setError(VectorCanBackend::tr("Unable to setup channel with interface name %1")
                            .arg(interfaceName), QCanBusDevice::CanBusError::ConfigurationError);
        }
    }

    qCCritical(QT_CANBUS_PLUGINS_VECTORCAN, "Unable to parse the channel %ls",
               qUtf16Printable(interfaceName));
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(VectorCanBackend);
|————Node:call_expression Text: Q_Q(VectorCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (VectorCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: VectorCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (Q_LIKELY(interfaceName.startsWith(QStringLiteral("can")))) {
        const QStringView ref = QStringView{interfaceName}.mid(3);
        bool ok = false;
        channelIndex = ref.toInt(&ok);
        if (ok && (channelIndex >= 0 && channelIndex < XL_CONFIG_MAX_CHANNELS)) {
            channelMask = xlGetChannelMask(-1, channelIndex, 0);
            return;
        } else {
            channelIndex = -1;
            q->setError(VectorCanBackend::tr("Unable to setup channel with interface name %1")
                            .arg(interfaceName), QCanBusDevice::CanBusError::ConfigurationError);
        }
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_LIKELY(interfaceName.startsWith(QStringLiteral("can"))))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_LIKELY(interfaceName.startsWith(QStringLiteral("can")))
|——————Node:identifier Text: Q_LIKELY
|——————Node:argument_list Text: (interfaceName.startsWith(QStringLiteral("can")))
|———————Node:( Text: (
|———————Node:call_expression Text: interfaceName.startsWith(QStringLiteral("can"))
|————————Node:field_expression Text: interfaceName.startsWith
|—————————Node:identifier Text: interfaceName
|—————————Node:. Text: .
|—————————Node:field_identifier Text: startsWith
|————————Node:argument_list Text: (QStringLiteral("can"))
|—————————Node:( Text: (
|—————————Node:call_expression Text: QStringLiteral("can")
|——————————Node:identifier Text: QStringLiteral
|——————————Node:argument_list Text: ("can")
|———————————Node:( Text: (
|———————————Node:string_literal Text: "can"
|————————————Node:" Text: "
|————————————Node:string_content Text: can
|————————————Node:" Text: "
|———————————Node:) Text: )
|—————————Node:) Text: )
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        const QStringView ref = QStringView{interfaceName}.mid(3);
        bool ok = false;
        channelIndex = ref.toInt(&ok);
        if (ok && (channelIndex >= 0 && channelIndex < XL_CONFIG_MAX_CHANNELS)) {
            channelMask = xlGetChannelMask(-1, channelIndex, 0);
            return;
        } else {
            channelIndex = -1;
            q->setError(VectorCanBackend::tr("Unable to setup channel with interface name %1")
                            .arg(interfaceName), QCanBusDevice::CanBusError::ConfigurationError);
        }
    }
|—————Node:{ Text: {
|—————Node:declaration Text: const QStringView ref = QStringView{interfaceName}.mid(3);
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:type_identifier Text: QStringView
|——————Node:init_declarator Text: ref = QStringView{interfaceName}.mid(3)
|———————Node:identifier Text: ref
|———————Node:= Text: =
|———————Node:call_expression Text: QStringView{interfaceName}.mid(3)
|————————Node:field_expression Text: QStringView{interfaceName}.mid
|—————————Node:compound_literal_expression Text: QStringView{interfaceName}
|——————————Node:type_identifier Text: QStringView
|——————————Node:initializer_list Text: {interfaceName}
|———————————Node:{ Text: {
|———————————Node:identifier Text: interfaceName
|———————————Node:} Text: }
|—————————Node:. Text: .
|—————————Node:field_identifier Text: mid
|————————Node:argument_list Text: (3)
|—————————Node:( Text: (
|—————————Node:number_literal Text: 3
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:declaration Text: bool ok = false;
|——————Node:primitive_type Text: bool
|——————Node:init_declarator Text: ok = false
|———————Node:identifier Text: ok
|———————Node:= Text: =
|———————Node:false Text: false
|——————Node:; Text: ;
|—————Node:expression_statement Text: channelIndex = ref.toInt(&ok);
|——————Node:assignment_expression Text: channelIndex = ref.toInt(&ok)
|———————Node:identifier Text: channelIndex
|———————Node:= Text: =
|———————Node:call_expression Text: ref.toInt(&ok)
|————————Node:field_expression Text: ref.toInt
|—————————Node:identifier Text: ref
|—————————Node:. Text: .
|—————————Node:field_identifier Text: toInt
|————————Node:argument_list Text: (&ok)
|—————————Node:( Text: (
|—————————Node:pointer_expression Text: &ok
|——————————Node:& Text: &
|——————————Node:identifier Text: ok
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (ok && (channelIndex >= 0 && channelIndex < XL_CONFIG_MAX_CHANNELS)) {
            channelMask = xlGetChannelMask(-1, channelIndex, 0);
            return;
        } else {
            channelIndex = -1;
            q->setError(VectorCanBackend::tr("Unable to setup channel with interface name %1")
                            .arg(interfaceName), QCanBusDevice::CanBusError::ConfigurationError);
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (ok && (channelIndex >= 0 && channelIndex < XL_CONFIG_MAX_CHANNELS))
|———————Node:( Text: (
|———————Node:binary_expression Text: ok && (channelIndex >= 0 && channelIndex < XL_CONFIG_MAX_CHANNELS)
|————————Node:identifier Text: ok
|————————Node:&& Text: &&
|————————Node:parenthesized_expression Text: (channelIndex >= 0 && channelIndex < XL_CONFIG_MAX_CHANNELS)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: channelIndex >= 0 && channelIndex < XL_CONFIG_MAX_CHANNELS
|——————————Node:binary_expression Text: channelIndex >= 0
|———————————Node:identifier Text: channelIndex
|———————————Node:>= Text: >=
|———————————Node:number_literal Text: 0
|——————————Node:&& Text: &&
|——————————Node:binary_expression Text: channelIndex < XL_CONFIG_MAX_CHANNELS
|———————————Node:identifier Text: channelIndex
|———————————Node:< Text: <
|———————————Node:identifier Text: XL_CONFIG_MAX_CHANNELS
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            channelMask = xlGetChannelMask(-1, channelIndex, 0);
            return;
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: channelMask = xlGetChannelMask(-1, channelIndex, 0);
|————————Node:assignment_expression Text: channelMask = xlGetChannelMask(-1, channelIndex, 0)
|—————————Node:identifier Text: channelMask
|—————————Node:= Text: =
|—————————Node:call_expression Text: xlGetChannelMask(-1, channelIndex, 0)
|——————————Node:identifier Text: xlGetChannelMask
|——————————Node:argument_list Text: (-1, channelIndex, 0)
|———————————Node:( Text: (
|———————————Node:number_literal Text: -1
|———————————Node:, Text: ,
|———————————Node:identifier Text: channelIndex
|———————————Node:, Text: ,
|———————————Node:number_literal Text: 0
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:return_statement Text: return;
|————————Node:return Text: return
|————————Node:; Text: ;
|———————Node:} Text: }
|——————Node:else_clause Text: else {
            channelIndex = -1;
            q->setError(VectorCanBackend::tr("Unable to setup channel with interface name %1")
                            .arg(interfaceName), QCanBusDevice::CanBusError::ConfigurationError);
        }
|———————Node:else Text: else
|———————Node:compound_statement Text: {
            channelIndex = -1;
            q->setError(VectorCanBackend::tr("Unable to setup channel with interface name %1")
                            .arg(interfaceName), QCanBusDevice::CanBusError::ConfigurationError);
        }
|————————Node:{ Text: {
|————————Node:expression_statement Text: channelIndex = -1;
|—————————Node:assignment_expression Text: channelIndex = -1
|——————————Node:identifier Text: channelIndex
|——————————Node:= Text: =
|——————————Node:number_literal Text: -1
|—————————Node:; Text: ;
|————————Node:expression_statement Text: q->setError(VectorCanBackend::tr("Unable to setup channel with interface name %1")
                            .arg(interfaceName), QCanBusDevice::CanBusError::ConfigurationError);
|—————————Node:call_expression Text: q->setError(VectorCanBackend::tr("Unable to setup channel with interface name %1")
                            .arg(interfaceName), QCanBusDevice::CanBusError::ConfigurationError)
|——————————Node:field_expression Text: q->setError
|———————————Node:identifier Text: q
|———————————Node:-> Text: ->
|———————————Node:field_identifier Text: setError
|——————————Node:argument_list Text: (VectorCanBackend::tr("Unable to setup channel with interface name %1")
                            .arg(interfaceName), QCanBusDevice::CanBusError::ConfigurationError)
|———————————Node:( Text: (
|———————————Node:call_expression Text: VectorCanBackend::tr("Unable to setup channel with interface name %1")
                            .arg(interfaceName)
|————————————Node:field_expression Text: VectorCanBackend::tr("Unable to setup channel with interface name %1")
                            .arg
|—————————————Node:call_expression Text: VectorCanBackend::tr("Unable to setup channel with interface name %1")
|——————————————Node:qualified_identifier Text: VectorCanBackend::tr
|———————————————Node:namespace_identifier Text: VectorCanBackend
|———————————————Node::: Text: ::
|———————————————Node:identifier Text: tr
|——————————————Node:argument_list Text: ("Unable to setup channel with interface name %1")
|———————————————Node:( Text: (
|———————————————Node:string_literal Text: "Unable to setup channel with interface name %1"
|————————————————Node:" Text: "
|————————————————Node:string_content Text: Unable to setup channel with interface name %1
|————————————————Node:" Text: "
|———————————————Node:) Text: )
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: arg
|————————————Node:argument_list Text: (interfaceName)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: interfaceName
|—————————————Node:) Text: )
|———————————Node:, Text: ,
|———————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ConfigurationError
|————————————Node:namespace_identifier Text: QCanBusDevice
|————————————Node::: Text: ::
|————————————Node:qualified_identifier Text: CanBusError::ConfigurationError
|—————————————Node:namespace_identifier Text: CanBusError
|—————————————Node::: Text: ::
|—————————————Node:identifier Text: ConfigurationError
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:} Text: }
|—————Node:} Text: }
|———Node:expression_statement Text: qCCritical(QT_CANBUS_PLUGINS_VECTORCAN, "Unable to parse the channel %ls",
               qUtf16Printable(interfaceName));
|————Node:call_expression Text: qCCritical(QT_CANBUS_PLUGINS_VECTORCAN, "Unable to parse the channel %ls",
               qUtf16Printable(interfaceName))
|—————Node:identifier Text: qCCritical
|—————Node:argument_list Text: (QT_CANBUS_PLUGINS_VECTORCAN, "Unable to parse the channel %ls",
               qUtf16Printable(interfaceName))
|——————Node:( Text: (
|——————Node:identifier Text: QT_CANBUS_PLUGINS_VECTORCAN
|——————Node:, Text: ,
|——————Node:string_literal Text: "Unable to parse the channel %ls"
|———————Node:" Text: "
|———————Node:string_content Text: Unable to parse the channel %ls
|———————Node:" Text: "
|——————Node:, Text: ,
|——————Node:call_expression Text: qUtf16Printable(interfaceName)
|———————Node:identifier Text: qUtf16Printable
|———————Node:argument_list Text: (interfaceName)
|————————Node:( Text: (
|————————Node:identifier Text: interfaceName
|————————Node:) Text: )
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void VectorCanBackendPrivate::setupDefaultConfigurations()
{
    Q_Q(VectorCanBackend);

    q->setConfigurationParameter(QCanBusDevice::BitRateKey, 500000);
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: VectorCanBackendPrivate::setupDefaultConfigurations()
|———Node:qualified_identifier Text: VectorCanBackendPrivate::setupDefaultConfigurations
|————Node:namespace_identifier Text: VectorCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: setupDefaultConfigurations
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(VectorCanBackend);

    q->setConfigurationParameter(QCanBusDevice::BitRateKey, 500000);
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(VectorCanBackend);
|————Node:call_expression Text: Q_Q(VectorCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (VectorCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: VectorCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: q->setConfigurationParameter(QCanBusDevice::BitRateKey, 500000);
|————Node:call_expression Text: q->setConfigurationParameter(QCanBusDevice::BitRateKey, 500000)
|—————Node:field_expression Text: q->setConfigurationParameter
|——————Node:identifier Text: q
|——————Node:-> Text: ->
|——————Node:field_identifier Text: setConfigurationParameter
|—————Node:argument_list Text: (QCanBusDevice::BitRateKey, 500000)
|——————Node:( Text: (
|——————Node:qualified_identifier Text: QCanBusDevice::BitRateKey
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: BitRateKey
|——————Node:, Text: ,
|——————Node:number_literal Text: 500000
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: QString VectorCanBackendPrivate::systemErrorString(int errorCode) const
{
    const char *string = ::xlGetErrorString(errorCode);
    if (Q_LIKELY(string))
        return QString::fromUtf8(string);
    return VectorCanBackend::tr("Unable to retrieve an error string");
}
|——Node:type_identifier Text: QString
|——Node:function_declarator Text: VectorCanBackendPrivate::systemErrorString(int errorCode) const
|———Node:qualified_identifier Text: VectorCanBackendPrivate::systemErrorString
|————Node:namespace_identifier Text: VectorCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: systemErrorString
|———Node:parameter_list Text: (int errorCode)
|————Node:( Text: (
|————Node:parameter_declaration Text: int errorCode
|—————Node:primitive_type Text: int
|—————Node:identifier Text: errorCode
|————Node:) Text: )
|———Node:type_qualifier Text: const
|————Node:const Text: const
|——Node:compound_statement Text: {
    const char *string = ::xlGetErrorString(errorCode);
    if (Q_LIKELY(string))
        return QString::fromUtf8(string);
    return VectorCanBackend::tr("Unable to retrieve an error string");
}
|———Node:{ Text: {
|———Node:declaration Text: const char *string = ::xlGetErrorString(errorCode);
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: char
|————Node:init_declarator Text: *string = ::xlGetErrorString(errorCode)
|—————Node:pointer_declarator Text: *string
|——————Node:* Text: *
|——————Node:identifier Text: string
|—————Node:= Text: =
|—————Node:call_expression Text: ::xlGetErrorString(errorCode)
|——————Node:qualified_identifier Text: ::xlGetErrorString
|———————Node::: Text: ::
|———————Node:identifier Text: xlGetErrorString
|——————Node:argument_list Text: (errorCode)
|———————Node:( Text: (
|———————Node:identifier Text: errorCode
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (Q_LIKELY(string))
        return QString::fromUtf8(string);
|————Node:if Text: if
|————Node:condition_clause Text: (Q_LIKELY(string))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_LIKELY(string)
|——————Node:identifier Text: Q_LIKELY
|——————Node:argument_list Text: (string)
|———————Node:( Text: (
|———————Node:identifier Text: string
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:return_statement Text: return QString::fromUtf8(string);
|—————Node:return Text: return
|—————Node:call_expression Text: QString::fromUtf8(string)
|——————Node:qualified_identifier Text: QString::fromUtf8
|———————Node:namespace_identifier Text: QString
|———————Node::: Text: ::
|———————Node:identifier Text: fromUtf8
|——————Node:argument_list Text: (string)
|———————Node:( Text: (
|———————Node:identifier Text: string
|———————Node:) Text: )
|—————Node:; Text: ;
|———Node:return_statement Text: return VectorCanBackend::tr("Unable to retrieve an error string");
|————Node:return Text: return
|————Node:call_expression Text: VectorCanBackend::tr("Unable to retrieve an error string")
|—————Node:qualified_identifier Text: VectorCanBackend::tr
|——————Node:namespace_identifier Text: VectorCanBackend
|——————Node::: Text: ::
|——————Node:identifier Text: tr
|—————Node:argument_list Text: ("Unable to retrieve an error string")
|——————Node:( Text: (
|——————Node:string_literal Text: "Unable to retrieve an error string"
|———————Node:" Text: "
|———————Node:string_content Text: Unable to retrieve an error string
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void VectorCanBackendPrivate::startWrite()
{
    Q_Q(VectorCanBackend);

    if (!q->hasOutgoingFrames()) {
        writeNotifier->stop();
        return;
    }

    const QCanBusFrame frame = q->dequeueOutgoingFrame();
    const QByteArray payload = frame.payload();
    const qsizetype payloadSize = payload.size();

    quint32 eventCount = 1;
    XLstatus status = XL_ERROR;
    if (usesCanFd) {
        XLcanTxEvent event = {};

        event.tag = XL_CAN_EV_TAG_TX_MSG;
        XL_CAN_TX_MSG &msg = event.tagData.canMsg;

        msg.id = frame.frameId();
        if (frame.hasExtendedFrameFormat())
            msg.id |= XL_CAN_EXT_MSG_ID;

        msg.dlc = payloadSize;
        if (frame.hasFlexibleDataRateFormat())
            msg.flags = XL_CAN_TXMSG_FLAG_EDL;
        if (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
            msg.flags |= XL_CAN_TXMSG_FLAG_RTR; // we do not care about the payload
        else
            ::memcpy(msg.data, payload.constData(), payloadSize);

        status = ::xlCanTransmitEx(portHandle, channelMask, eventCount, &eventCount, &event);
    } else {
        XLevent event = {};
        event.tag = XL_TRANSMIT_MSG;
        s_xl_can_msg &msg = event.tagData.msg;

        msg.id = frame.frameId();
        if (frame.hasExtendedFrameFormat())
            msg.id |= XL_CAN_EXT_MSG_ID;

        msg.dlc = payloadSize;

        if (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
            msg.flags |= XL_CAN_MSG_FLAG_REMOTE_FRAME; // we do not care about the payload
        else if (frame.frameType() == QCanBusFrame::ErrorFrame)
            msg.flags |= XL_CAN_MSG_FLAG_ERROR_FRAME; // we do not care about the payload
        else
            ::memcpy(msg.data, payload.constData(), payloadSize);

        status = ::xlCanTransmit(portHandle, channelMask, &eventCount, &event);
    }
    if (Q_UNLIKELY(status != XL_SUCCESS)) {
        q->setError(systemErrorString(status),
                    QCanBusDevice::WriteError);
    } else {
        emit q->framesWritten(qint64(eventCount));
    }

    if (q->hasOutgoingFrames())
        writeNotifier->start();
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: VectorCanBackendPrivate::startWrite()
|———Node:qualified_identifier Text: VectorCanBackendPrivate::startWrite
|————Node:namespace_identifier Text: VectorCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: startWrite
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(VectorCanBackend);

    if (!q->hasOutgoingFrames()) {
        writeNotifier->stop();
        return;
    }

    const QCanBusFrame frame = q->dequeueOutgoingFrame();
    const QByteArray payload = frame.payload();
    const qsizetype payloadSize = payload.size();

    quint32 eventCount = 1;
    XLstatus status = XL_ERROR;
    if (usesCanFd) {
        XLcanTxEvent event = {};

        event.tag = XL_CAN_EV_TAG_TX_MSG;
        XL_CAN_TX_MSG &msg = event.tagData.canMsg;

        msg.id = frame.frameId();
        if (frame.hasExtendedFrameFormat())
            msg.id |= XL_CAN_EXT_MSG_ID;

        msg.dlc = payloadSize;
        if (frame.hasFlexibleDataRateFormat())
            msg.flags = XL_CAN_TXMSG_FLAG_EDL;
        if (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
            msg.flags |= XL_CAN_TXMSG_FLAG_RTR; // we do not care about the payload
        else
            ::memcpy(msg.data, payload.constData(), payloadSize);

        status = ::xlCanTransmitEx(portHandle, channelMask, eventCount, &eventCount, &event);
    } else {
        XLevent event = {};
        event.tag = XL_TRANSMIT_MSG;
        s_xl_can_msg &msg = event.tagData.msg;

        msg.id = frame.frameId();
        if (frame.hasExtendedFrameFormat())
            msg.id |= XL_CAN_EXT_MSG_ID;

        msg.dlc = payloadSize;

        if (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
            msg.flags |= XL_CAN_MSG_FLAG_REMOTE_FRAME; // we do not care about the payload
        else if (frame.frameType() == QCanBusFrame::ErrorFrame)
            msg.flags |= XL_CAN_MSG_FLAG_ERROR_FRAME; // we do not care about the payload
        else
            ::memcpy(msg.data, payload.constData(), payloadSize);

        status = ::xlCanTransmit(portHandle, channelMask, &eventCount, &event);
    }
    if (Q_UNLIKELY(status != XL_SUCCESS)) {
        q->setError(systemErrorString(status),
                    QCanBusDevice::WriteError);
    } else {
        emit q->framesWritten(qint64(eventCount));
    }

    if (q->hasOutgoingFrames())
        writeNotifier->start();
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(VectorCanBackend);
|————Node:call_expression Text: Q_Q(VectorCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (VectorCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: VectorCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (!q->hasOutgoingFrames()) {
        writeNotifier->stop();
        return;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (!q->hasOutgoingFrames())
|—————Node:( Text: (
|—————Node:unary_expression Text: !q->hasOutgoingFrames()
|——————Node:! Text: !
|——————Node:call_expression Text: q->hasOutgoingFrames()
|———————Node:field_expression Text: q->hasOutgoingFrames
|————————Node:identifier Text: q
|————————Node:-> Text: ->
|————————Node:field_identifier Text: hasOutgoingFrames
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        writeNotifier->stop();
        return;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: writeNotifier->stop();
|——————Node:call_expression Text: writeNotifier->stop()
|———————Node:field_expression Text: writeNotifier->stop
|————————Node:identifier Text: writeNotifier
|————————Node:-> Text: ->
|————————Node:field_identifier Text: stop
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return;
|——————Node:return Text: return
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:declaration Text: const QCanBusFrame frame = q->dequeueOutgoingFrame();
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: QCanBusFrame
|————Node:init_declarator Text: frame = q->dequeueOutgoingFrame()
|—————Node:identifier Text: frame
|—————Node:= Text: =
|—————Node:call_expression Text: q->dequeueOutgoingFrame()
|——————Node:field_expression Text: q->dequeueOutgoingFrame
|———————Node:identifier Text: q
|———————Node:-> Text: ->
|———————Node:field_identifier Text: dequeueOutgoingFrame
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: const QByteArray payload = frame.payload();
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: QByteArray
|————Node:init_declarator Text: payload = frame.payload()
|—————Node:identifier Text: payload
|—————Node:= Text: =
|—————Node:call_expression Text: frame.payload()
|——————Node:field_expression Text: frame.payload
|———————Node:identifier Text: frame
|———————Node:. Text: .
|———————Node:field_identifier Text: payload
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: const qsizetype payloadSize = payload.size();
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: qsizetype
|————Node:init_declarator Text: payloadSize = payload.size()
|—————Node:identifier Text: payloadSize
|—————Node:= Text: =
|—————Node:call_expression Text: payload.size()
|——————Node:field_expression Text: payload.size
|———————Node:identifier Text: payload
|———————Node:. Text: .
|———————Node:field_identifier Text: size
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: quint32 eventCount = 1;
|————Node:type_identifier Text: quint32
|————Node:init_declarator Text: eventCount = 1
|—————Node:identifier Text: eventCount
|—————Node:= Text: =
|—————Node:number_literal Text: 1
|————Node:; Text: ;
|———Node:declaration Text: XLstatus status = XL_ERROR;
|————Node:type_identifier Text: XLstatus
|————Node:init_declarator Text: status = XL_ERROR
|—————Node:identifier Text: status
|—————Node:= Text: =
|—————Node:identifier Text: XL_ERROR
|————Node:; Text: ;
|———Node:if_statement Text: if (usesCanFd) {
        XLcanTxEvent event = {};

        event.tag = XL_CAN_EV_TAG_TX_MSG;
        XL_CAN_TX_MSG &msg = event.tagData.canMsg;

        msg.id = frame.frameId();
        if (frame.hasExtendedFrameFormat())
            msg.id |= XL_CAN_EXT_MSG_ID;

        msg.dlc = payloadSize;
        if (frame.hasFlexibleDataRateFormat())
            msg.flags = XL_CAN_TXMSG_FLAG_EDL;
        if (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
            msg.flags |= XL_CAN_TXMSG_FLAG_RTR; // we do not care about the payload
        else
            ::memcpy(msg.data, payload.constData(), payloadSize);

        status = ::xlCanTransmitEx(portHandle, channelMask, eventCount, &eventCount, &event);
    } else {
        XLevent event = {};
        event.tag = XL_TRANSMIT_MSG;
        s_xl_can_msg &msg = event.tagData.msg;

        msg.id = frame.frameId();
        if (frame.hasExtendedFrameFormat())
            msg.id |= XL_CAN_EXT_MSG_ID;

        msg.dlc = payloadSize;

        if (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
            msg.flags |= XL_CAN_MSG_FLAG_REMOTE_FRAME; // we do not care about the payload
        else if (frame.frameType() == QCanBusFrame::ErrorFrame)
            msg.flags |= XL_CAN_MSG_FLAG_ERROR_FRAME; // we do not care about the payload
        else
            ::memcpy(msg.data, payload.constData(), payloadSize);

        status = ::xlCanTransmit(portHandle, channelMask, &eventCount, &event);
    }
|————Node:if Text: if
|————Node:condition_clause Text: (usesCanFd)
|—————Node:( Text: (
|—————Node:identifier Text: usesCanFd
|—————Node:) Text: )
|————Node:compound_statement Text: {
        XLcanTxEvent event = {};

        event.tag = XL_CAN_EV_TAG_TX_MSG;
        XL_CAN_TX_MSG &msg = event.tagData.canMsg;

        msg.id = frame.frameId();
        if (frame.hasExtendedFrameFormat())
            msg.id |= XL_CAN_EXT_MSG_ID;

        msg.dlc = payloadSize;
        if (frame.hasFlexibleDataRateFormat())
            msg.flags = XL_CAN_TXMSG_FLAG_EDL;
        if (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
            msg.flags |= XL_CAN_TXMSG_FLAG_RTR; // we do not care about the payload
        else
            ::memcpy(msg.data, payload.constData(), payloadSize);

        status = ::xlCanTransmitEx(portHandle, channelMask, eventCount, &eventCount, &event);
    }
|—————Node:{ Text: {
|—————Node:declaration Text: XLcanTxEvent event = {};
|——————Node:type_identifier Text: XLcanTxEvent
|——————Node:init_declarator Text: event = {}
|———————Node:identifier Text: event
|———————Node:= Text: =
|———————Node:initializer_list Text: {}
|————————Node:{ Text: {
|————————Node:} Text: }
|——————Node:; Text: ;
|—————Node:expression_statement Text: event.tag = XL_CAN_EV_TAG_TX_MSG;
|——————Node:assignment_expression Text: event.tag = XL_CAN_EV_TAG_TX_MSG
|———————Node:field_expression Text: event.tag
|————————Node:identifier Text: event
|————————Node:. Text: .
|————————Node:field_identifier Text: tag
|———————Node:= Text: =
|———————Node:identifier Text: XL_CAN_EV_TAG_TX_MSG
|——————Node:; Text: ;
|—————Node:declaration Text: XL_CAN_TX_MSG &msg = event.tagData.canMsg;
|——————Node:type_identifier Text: XL_CAN_TX_MSG
|——————Node:init_declarator Text: &msg = event.tagData.canMsg
|———————Node:reference_declarator Text: &msg
|————————Node:& Text: &
|————————Node:identifier Text: msg
|———————Node:= Text: =
|———————Node:field_expression Text: event.tagData.canMsg
|————————Node:field_expression Text: event.tagData
|—————————Node:identifier Text: event
|—————————Node:. Text: .
|—————————Node:field_identifier Text: tagData
|————————Node:. Text: .
|————————Node:field_identifier Text: canMsg
|——————Node:; Text: ;
|—————Node:expression_statement Text: msg.id = frame.frameId();
|——————Node:assignment_expression Text: msg.id = frame.frameId()
|———————Node:field_expression Text: msg.id
|————————Node:identifier Text: msg
|————————Node:. Text: .
|————————Node:field_identifier Text: id
|———————Node:= Text: =
|———————Node:call_expression Text: frame.frameId()
|————————Node:field_expression Text: frame.frameId
|—————————Node:identifier Text: frame
|—————————Node:. Text: .
|—————————Node:field_identifier Text: frameId
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (frame.hasExtendedFrameFormat())
            msg.id |= XL_CAN_EXT_MSG_ID;
|——————Node:if Text: if
|——————Node:condition_clause Text: (frame.hasExtendedFrameFormat())
|———————Node:( Text: (
|———————Node:call_expression Text: frame.hasExtendedFrameFormat()
|————————Node:field_expression Text: frame.hasExtendedFrameFormat
|—————————Node:identifier Text: frame
|—————————Node:. Text: .
|—————————Node:field_identifier Text: hasExtendedFrameFormat
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:expression_statement Text: msg.id |= XL_CAN_EXT_MSG_ID;
|———————Node:assignment_expression Text: msg.id |= XL_CAN_EXT_MSG_ID
|————————Node:field_expression Text: msg.id
|—————————Node:identifier Text: msg
|—————————Node:. Text: .
|—————————Node:field_identifier Text: id
|————————Node:|= Text: |=
|————————Node:identifier Text: XL_CAN_EXT_MSG_ID
|———————Node:; Text: ;
|—————Node:expression_statement Text: msg.dlc = payloadSize;
|——————Node:assignment_expression Text: msg.dlc = payloadSize
|———————Node:field_expression Text: msg.dlc
|————————Node:identifier Text: msg
|————————Node:. Text: .
|————————Node:field_identifier Text: dlc
|———————Node:= Text: =
|———————Node:identifier Text: payloadSize
|——————Node:; Text: ;
|—————Node:if_statement Text: if (frame.hasFlexibleDataRateFormat())
            msg.flags = XL_CAN_TXMSG_FLAG_EDL;
|——————Node:if Text: if
|——————Node:condition_clause Text: (frame.hasFlexibleDataRateFormat())
|———————Node:( Text: (
|———————Node:call_expression Text: frame.hasFlexibleDataRateFormat()
|————————Node:field_expression Text: frame.hasFlexibleDataRateFormat
|—————————Node:identifier Text: frame
|—————————Node:. Text: .
|—————————Node:field_identifier Text: hasFlexibleDataRateFormat
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:expression_statement Text: msg.flags = XL_CAN_TXMSG_FLAG_EDL;
|———————Node:assignment_expression Text: msg.flags = XL_CAN_TXMSG_FLAG_EDL
|————————Node:field_expression Text: msg.flags
|—————————Node:identifier Text: msg
|—————————Node:. Text: .
|—————————Node:field_identifier Text: flags
|————————Node:= Text: =
|————————Node:identifier Text: XL_CAN_TXMSG_FLAG_EDL
|———————Node:; Text: ;
|—————Node:if_statement Text: if (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
            msg.flags |= XL_CAN_TXMSG_FLAG_RTR; // we do not care about the payload
        else
            ::memcpy(msg.data, payload.constData(), payloadSize);
|——————Node:if Text: if
|——————Node:condition_clause Text: (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
|———————Node:( Text: (
|———————Node:binary_expression Text: frame.frameType() == QCanBusFrame::RemoteRequestFrame
|————————Node:call_expression Text: frame.frameType()
|—————————Node:field_expression Text: frame.frameType
|——————————Node:identifier Text: frame
|——————————Node:. Text: .
|——————————Node:field_identifier Text: frameType
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:== Text: ==
|————————Node:qualified_identifier Text: QCanBusFrame::RemoteRequestFrame
|—————————Node:namespace_identifier Text: QCanBusFrame
|—————————Node::: Text: ::
|—————————Node:identifier Text: RemoteRequestFrame
|———————Node:) Text: )
|——————Node:expression_statement Text: msg.flags |= XL_CAN_TXMSG_FLAG_RTR;
|———————Node:assignment_expression Text: msg.flags |= XL_CAN_TXMSG_FLAG_RTR
|————————Node:field_expression Text: msg.flags
|—————————Node:identifier Text: msg
|—————————Node:. Text: .
|—————————Node:field_identifier Text: flags
|————————Node:|= Text: |=
|————————Node:identifier Text: XL_CAN_TXMSG_FLAG_RTR
|———————Node:; Text: ;
|——————Node:comment
|——————Node:else_clause Text: else
            ::memcpy(msg.data, payload.constData(), payloadSize);
|———————Node:else Text: else
|———————Node:expression_statement Text: ::memcpy(msg.data, payload.constData(), payloadSize);
|————————Node:call_expression Text: ::memcpy(msg.data, payload.constData(), payloadSize)
|—————————Node:qualified_identifier Text: ::memcpy
|——————————Node::: Text: ::
|——————————Node:identifier Text: memcpy
|—————————Node:argument_list Text: (msg.data, payload.constData(), payloadSize)
|——————————Node:( Text: (
|——————————Node:field_expression Text: msg.data
|———————————Node:identifier Text: msg
|———————————Node:. Text: .
|———————————Node:field_identifier Text: data
|——————————Node:, Text: ,
|——————————Node:call_expression Text: payload.constData()
|———————————Node:field_expression Text: payload.constData
|————————————Node:identifier Text: payload
|————————————Node:. Text: .
|————————————Node:field_identifier Text: constData
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:, Text: ,
|——————————Node:identifier Text: payloadSize
|——————————Node:) Text: )
|————————Node:; Text: ;
|—————Node:expression_statement Text: status = ::xlCanTransmitEx(portHandle, channelMask, eventCount, &eventCount, &event);
|——————Node:assignment_expression Text: status = ::xlCanTransmitEx(portHandle, channelMask, eventCount, &eventCount, &event)
|———————Node:identifier Text: status
|———————Node:= Text: =
|———————Node:call_expression Text: ::xlCanTransmitEx(portHandle, channelMask, eventCount, &eventCount, &event)
|————————Node:qualified_identifier Text: ::xlCanTransmitEx
|—————————Node::: Text: ::
|—————————Node:identifier Text: xlCanTransmitEx
|————————Node:argument_list Text: (portHandle, channelMask, eventCount, &eventCount, &event)
|—————————Node:( Text: (
|—————————Node:identifier Text: portHandle
|—————————Node:, Text: ,
|—————————Node:identifier Text: channelMask
|—————————Node:, Text: ,
|—————————Node:identifier Text: eventCount
|—————————Node:, Text: ,
|—————————Node:pointer_expression Text: &eventCount
|——————————Node:& Text: &
|——————————Node:identifier Text: eventCount
|—————————Node:, Text: ,
|—————————Node:pointer_expression Text: &event
|——————————Node:& Text: &
|——————————Node:identifier Text: event
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else {
        XLevent event = {};
        event.tag = XL_TRANSMIT_MSG;
        s_xl_can_msg &msg = event.tagData.msg;

        msg.id = frame.frameId();
        if (frame.hasExtendedFrameFormat())
            msg.id |= XL_CAN_EXT_MSG_ID;

        msg.dlc = payloadSize;

        if (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
            msg.flags |= XL_CAN_MSG_FLAG_REMOTE_FRAME; // we do not care about the payload
        else if (frame.frameType() == QCanBusFrame::ErrorFrame)
            msg.flags |= XL_CAN_MSG_FLAG_ERROR_FRAME; // we do not care about the payload
        else
            ::memcpy(msg.data, payload.constData(), payloadSize);

        status = ::xlCanTransmit(portHandle, channelMask, &eventCount, &event);
    }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
        XLevent event = {};
        event.tag = XL_TRANSMIT_MSG;
        s_xl_can_msg &msg = event.tagData.msg;

        msg.id = frame.frameId();
        if (frame.hasExtendedFrameFormat())
            msg.id |= XL_CAN_EXT_MSG_ID;

        msg.dlc = payloadSize;

        if (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
            msg.flags |= XL_CAN_MSG_FLAG_REMOTE_FRAME; // we do not care about the payload
        else if (frame.frameType() == QCanBusFrame::ErrorFrame)
            msg.flags |= XL_CAN_MSG_FLAG_ERROR_FRAME; // we do not care about the payload
        else
            ::memcpy(msg.data, payload.constData(), payloadSize);

        status = ::xlCanTransmit(portHandle, channelMask, &eventCount, &event);
    }
|——————Node:{ Text: {
|——————Node:declaration Text: XLevent event = {};
|———————Node:type_identifier Text: XLevent
|———————Node:init_declarator Text: event = {}
|————————Node:identifier Text: event
|————————Node:= Text: =
|————————Node:initializer_list Text: {}
|—————————Node:{ Text: {
|—————————Node:} Text: }
|———————Node:; Text: ;
|——————Node:expression_statement Text: event.tag = XL_TRANSMIT_MSG;
|———————Node:assignment_expression Text: event.tag = XL_TRANSMIT_MSG
|————————Node:field_expression Text: event.tag
|—————————Node:identifier Text: event
|—————————Node:. Text: .
|—————————Node:field_identifier Text: tag
|————————Node:= Text: =
|————————Node:identifier Text: XL_TRANSMIT_MSG
|———————Node:; Text: ;
|——————Node:declaration Text: s_xl_can_msg &msg = event.tagData.msg;
|———————Node:type_identifier Text: s_xl_can_msg
|———————Node:init_declarator Text: &msg = event.tagData.msg
|————————Node:reference_declarator Text: &msg
|—————————Node:& Text: &
|—————————Node:identifier Text: msg
|————————Node:= Text: =
|————————Node:field_expression Text: event.tagData.msg
|—————————Node:field_expression Text: event.tagData
|——————————Node:identifier Text: event
|——————————Node:. Text: .
|——————————Node:field_identifier Text: tagData
|—————————Node:. Text: .
|—————————Node:field_identifier Text: msg
|———————Node:; Text: ;
|——————Node:expression_statement Text: msg.id = frame.frameId();
|———————Node:assignment_expression Text: msg.id = frame.frameId()
|————————Node:field_expression Text: msg.id
|—————————Node:identifier Text: msg
|—————————Node:. Text: .
|—————————Node:field_identifier Text: id
|————————Node:= Text: =
|————————Node:call_expression Text: frame.frameId()
|—————————Node:field_expression Text: frame.frameId
|——————————Node:identifier Text: frame
|——————————Node:. Text: .
|——————————Node:field_identifier Text: frameId
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:if_statement Text: if (frame.hasExtendedFrameFormat())
            msg.id |= XL_CAN_EXT_MSG_ID;
|———————Node:if Text: if
|———————Node:condition_clause Text: (frame.hasExtendedFrameFormat())
|————————Node:( Text: (
|————————Node:call_expression Text: frame.hasExtendedFrameFormat()
|—————————Node:field_expression Text: frame.hasExtendedFrameFormat
|——————————Node:identifier Text: frame
|——————————Node:. Text: .
|——————————Node:field_identifier Text: hasExtendedFrameFormat
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:) Text: )
|———————Node:expression_statement Text: msg.id |= XL_CAN_EXT_MSG_ID;
|————————Node:assignment_expression Text: msg.id |= XL_CAN_EXT_MSG_ID
|—————————Node:field_expression Text: msg.id
|——————————Node:identifier Text: msg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: id
|—————————Node:|= Text: |=
|—————————Node:identifier Text: XL_CAN_EXT_MSG_ID
|————————Node:; Text: ;
|——————Node:expression_statement Text: msg.dlc = payloadSize;
|———————Node:assignment_expression Text: msg.dlc = payloadSize
|————————Node:field_expression Text: msg.dlc
|—————————Node:identifier Text: msg
|—————————Node:. Text: .
|—————————Node:field_identifier Text: dlc
|————————Node:= Text: =
|————————Node:identifier Text: payloadSize
|———————Node:; Text: ;
|——————Node:if_statement Text: if (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
            msg.flags |= XL_CAN_MSG_FLAG_REMOTE_FRAME; // we do not care about the payload
        else if (frame.frameType() == QCanBusFrame::ErrorFrame)
            msg.flags |= XL_CAN_MSG_FLAG_ERROR_FRAME; // we do not care about the payload
        else
            ::memcpy(msg.data, payload.constData(), payloadSize);
|———————Node:if Text: if
|———————Node:condition_clause Text: (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
|————————Node:( Text: (
|————————Node:binary_expression Text: frame.frameType() == QCanBusFrame::RemoteRequestFrame
|—————————Node:call_expression Text: frame.frameType()
|——————————Node:field_expression Text: frame.frameType
|———————————Node:identifier Text: frame
|———————————Node:. Text: .
|———————————Node:field_identifier Text: frameType
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:== Text: ==
|—————————Node:qualified_identifier Text: QCanBusFrame::RemoteRequestFrame
|——————————Node:namespace_identifier Text: QCanBusFrame
|——————————Node::: Text: ::
|——————————Node:identifier Text: RemoteRequestFrame
|————————Node:) Text: )
|———————Node:expression_statement Text: msg.flags |= XL_CAN_MSG_FLAG_REMOTE_FRAME;
|————————Node:assignment_expression Text: msg.flags |= XL_CAN_MSG_FLAG_REMOTE_FRAME
|—————————Node:field_expression Text: msg.flags
|——————————Node:identifier Text: msg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: flags
|—————————Node:|= Text: |=
|—————————Node:identifier Text: XL_CAN_MSG_FLAG_REMOTE_FRAME
|————————Node:; Text: ;
|———————Node:comment
|———————Node:else_clause Text: else if (frame.frameType() == QCanBusFrame::ErrorFrame)
            msg.flags |= XL_CAN_MSG_FLAG_ERROR_FRAME; // we do not care about the payload
        else
            ::memcpy(msg.data, payload.constData(), payloadSize);
|————————Node:else Text: else
|————————Node:if_statement Text: if (frame.frameType() == QCanBusFrame::ErrorFrame)
            msg.flags |= XL_CAN_MSG_FLAG_ERROR_FRAME; // we do not care about the payload
        else
            ::memcpy(msg.data, payload.constData(), payloadSize);
|—————————Node:if Text: if
|—————————Node:condition_clause Text: (frame.frameType() == QCanBusFrame::ErrorFrame)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: frame.frameType() == QCanBusFrame::ErrorFrame
|———————————Node:call_expression Text: frame.frameType()
|————————————Node:field_expression Text: frame.frameType
|—————————————Node:identifier Text: frame
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: frameType
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:== Text: ==
|———————————Node:qualified_identifier Text: QCanBusFrame::ErrorFrame
|————————————Node:namespace_identifier Text: QCanBusFrame
|————————————Node::: Text: ::
|————————————Node:identifier Text: ErrorFrame
|——————————Node:) Text: )
|—————————Node:expression_statement Text: msg.flags |= XL_CAN_MSG_FLAG_ERROR_FRAME;
|——————————Node:assignment_expression Text: msg.flags |= XL_CAN_MSG_FLAG_ERROR_FRAME
|———————————Node:field_expression Text: msg.flags
|————————————Node:identifier Text: msg
|————————————Node:. Text: .
|————————————Node:field_identifier Text: flags
|———————————Node:|= Text: |=
|———————————Node:identifier Text: XL_CAN_MSG_FLAG_ERROR_FRAME
|——————————Node:; Text: ;
|—————————Node:comment
|—————————Node:else_clause Text: else
            ::memcpy(msg.data, payload.constData(), payloadSize);
|——————————Node:else Text: else
|——————————Node:expression_statement Text: ::memcpy(msg.data, payload.constData(), payloadSize);
|———————————Node:call_expression Text: ::memcpy(msg.data, payload.constData(), payloadSize)
|————————————Node:qualified_identifier Text: ::memcpy
|—————————————Node::: Text: ::
|—————————————Node:identifier Text: memcpy
|————————————Node:argument_list Text: (msg.data, payload.constData(), payloadSize)
|—————————————Node:( Text: (
|—————————————Node:field_expression Text: msg.data
|——————————————Node:identifier Text: msg
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: data
|—————————————Node:, Text: ,
|—————————————Node:call_expression Text: payload.constData()
|——————————————Node:field_expression Text: payload.constData
|———————————————Node:identifier Text: payload
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: constData
|——————————————Node:argument_list Text: ()
|———————————————Node:( Text: (
|———————————————Node:) Text: )
|—————————————Node:, Text: ,
|—————————————Node:identifier Text: payloadSize
|—————————————Node:) Text: )
|———————————Node:; Text: ;
|——————Node:expression_statement Text: status = ::xlCanTransmit(portHandle, channelMask, &eventCount, &event);
|———————Node:assignment_expression Text: status = ::xlCanTransmit(portHandle, channelMask, &eventCount, &event)
|————————Node:identifier Text: status
|————————Node:= Text: =
|————————Node:call_expression Text: ::xlCanTransmit(portHandle, channelMask, &eventCount, &event)
|—————————Node:qualified_identifier Text: ::xlCanTransmit
|——————————Node::: Text: ::
|——————————Node:identifier Text: xlCanTransmit
|—————————Node:argument_list Text: (portHandle, channelMask, &eventCount, &event)
|——————————Node:( Text: (
|——————————Node:identifier Text: portHandle
|——————————Node:, Text: ,
|——————————Node:identifier Text: channelMask
|——————————Node:, Text: ,
|——————————Node:pointer_expression Text: &eventCount
|———————————Node:& Text: &
|———————————Node:identifier Text: eventCount
|——————————Node:, Text: ,
|——————————Node:pointer_expression Text: &event
|———————————Node:& Text: &
|———————————Node:identifier Text: event
|——————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:} Text: }
|———Node:if_statement Text: if (Q_UNLIKELY(status != XL_SUCCESS)) {
        q->setError(systemErrorString(status),
                    QCanBusDevice::WriteError);
    } else {
        emit q->framesWritten(qint64(eventCount));
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(status != XL_SUCCESS))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(status != XL_SUCCESS)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (status != XL_SUCCESS)
|———————Node:( Text: (
|———————Node:binary_expression Text: status != XL_SUCCESS
|————————Node:identifier Text: status
|————————Node:!= Text: !=
|————————Node:identifier Text: XL_SUCCESS
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        q->setError(systemErrorString(status),
                    QCanBusDevice::WriteError);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: q->setError(systemErrorString(status),
                    QCanBusDevice::WriteError);
|——————Node:call_expression Text: q->setError(systemErrorString(status),
                    QCanBusDevice::WriteError)
|———————Node:field_expression Text: q->setError
|————————Node:identifier Text: q
|————————Node:-> Text: ->
|————————Node:field_identifier Text: setError
|———————Node:argument_list Text: (systemErrorString(status),
                    QCanBusDevice::WriteError)
|————————Node:( Text: (
|————————Node:call_expression Text: systemErrorString(status)
|—————————Node:identifier Text: systemErrorString
|—————————Node:argument_list Text: (status)
|——————————Node:( Text: (
|——————————Node:identifier Text: status
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:qualified_identifier Text: QCanBusDevice::WriteError
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:identifier Text: WriteError
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else {
        emit q->framesWritten(qint64(eventCount));
    }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
        emit q->framesWritten(qint64(eventCount));
    }
|——————Node:{ Text: {
|——————Node:declaration Text: emit q->framesWritten(qint64(eventCount));
|———————Node:type_identifier Text: emit
|———————Node:ERROR Text: q->
|————————Node:identifier Text: q
|————————Node:-> Text: ->
|———————Node:function_declarator Text: framesWritten(qint64(eventCount))
|————————Node:identifier Text: framesWritten
|————————Node:parameter_list Text: (qint64(eventCount))
|—————————Node:( Text: (
|—————————Node:parameter_declaration Text: qint64(eventCount)
|——————————Node:type_identifier Text: qint64
|——————————Node:abstract_function_declarator Text: (eventCount)
|———————————Node:parameter_list Text: (eventCount)
|————————————Node:( Text: (
|————————————Node:parameter_declaration Text: eventCount
|—————————————Node:type_identifier Text: eventCount
|————————————Node:) Text: )
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:} Text: }
|———Node:if_statement Text: if (q->hasOutgoingFrames())
        writeNotifier->start();
|————Node:if Text: if
|————Node:condition_clause Text: (q->hasOutgoingFrames())
|—————Node:( Text: (
|—————Node:call_expression Text: q->hasOutgoingFrames()
|——————Node:field_expression Text: q->hasOutgoingFrames
|———————Node:identifier Text: q
|———————Node:-> Text: ->
|———————Node:field_identifier Text: hasOutgoingFrames
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:expression_statement Text: writeNotifier->start();
|—————Node:call_expression Text: writeNotifier->start()
|——————Node:field_expression Text: writeNotifier->start
|———————Node:identifier Text: writeNotifier
|———————Node:-> Text: ->
|———————Node:field_identifier Text: start
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void VectorCanBackendPrivate::startRead()
{
    Q_Q(VectorCanBackend);

    QList<QCanBusFrame> newFrames;

    for (;;) {
        quint32 eventCount = 1;
        if (usesCanFd) {
            XLcanRxEvent event = {};

            const XLstatus status = ::xlCanReceive(portHandle, &event);
            if (Q_UNLIKELY(status != XL_SUCCESS)) {
                if (status != XL_ERR_QUEUE_IS_EMPTY) {
                    q->setError(systemErrorString(status), QCanBusDevice::ReadError);
                }
                break;
            }
            if (event.tag != XL_CAN_EV_TAG_RX_OK)
                continue;

            const XL_CAN_EV_RX_MSG &msg = event.tagData.canRxOkMsg;

            QCanBusFrame frame(msg.id & ~XL_CAN_EXT_MSG_ID,
                QByteArray(reinterpret_cast<const char *>(msg.data), int(msg.dlc)));
            frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(event.timeStamp / 1000));
            frame.setExtendedFrameFormat(msg.id & XL_CAN_EXT_MSG_ID);
            frame.setFrameType((msg.flags & XL_CAN_RXMSG_FLAG_RTR)
                                ? QCanBusFrame::RemoteRequestFrame
                                : (msg.flags & XL_CAN_RXMSG_FLAG_EF)
                                    ? QCanBusFrame::ErrorFrame
                                    : QCanBusFrame::DataFrame);

            newFrames.append(std::move(frame));
        } else {
            XLevent event = {};

            const XLstatus status = ::xlReceive(portHandle, &eventCount, &event);
            if (Q_UNLIKELY(status != XL_SUCCESS)) {
                if (status != XL_ERR_QUEUE_IS_EMPTY) {
                    q->setError(systemErrorString(status),
                        QCanBusDevice::ReadError);
                }
                break;
            }
            if (event.tag != XL_RECEIVE_MSG)
                continue;

            const s_xl_can_msg &msg = event.tagData.msg;

            if ((msg.flags & XL_CAN_MSG_FLAG_TX_COMPLETED) && !transmitEcho)
                continue;

            QCanBusFrame frame(msg.id & ~XL_CAN_EXT_MSG_ID,
                QByteArray(reinterpret_cast<const char *>(msg.data), int(msg.dlc)));
            frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(event.timeStamp / 1000));
            frame.setExtendedFrameFormat(msg.id & XL_CAN_EXT_MSG_ID);
            frame.setLocalEcho(msg.flags & XL_CAN_MSG_FLAG_TX_COMPLETED);
            frame.setFrameType((msg.flags & XL_CAN_MSG_FLAG_REMOTE_FRAME)
                                ? QCanBusFrame::RemoteRequestFrame
                                : (msg.flags & XL_CAN_MSG_FLAG_ERROR_FRAME)
                                   ? QCanBusFrame::ErrorFrame
                                   : QCanBusFrame::DataFrame);

            newFrames.append(std::move(frame));
        }
    }

    q->enqueueReceivedFrames(newFrames);
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: VectorCanBackendPrivate::startRead()
|———Node:qualified_identifier Text: VectorCanBackendPrivate::startRead
|————Node:namespace_identifier Text: VectorCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: startRead
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(VectorCanBackend);

    QList<QCanBusFrame> newFrames;

    for (;;) {
        quint32 eventCount = 1;
        if (usesCanFd) {
            XLcanRxEvent event = {};

            const XLstatus status = ::xlCanReceive(portHandle, &event);
            if (Q_UNLIKELY(status != XL_SUCCESS)) {
                if (status != XL_ERR_QUEUE_IS_EMPTY) {
                    q->setError(systemErrorString(status), QCanBusDevice::ReadError);
                }
                break;
            }
            if (event.tag != XL_CAN_EV_TAG_RX_OK)
                continue;

            const XL_CAN_EV_RX_MSG &msg = event.tagData.canRxOkMsg;

            QCanBusFrame frame(msg.id & ~XL_CAN_EXT_MSG_ID,
                QByteArray(reinterpret_cast<const char *>(msg.data), int(msg.dlc)));
            frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(event.timeStamp / 1000));
            frame.setExtendedFrameFormat(msg.id & XL_CAN_EXT_MSG_ID);
            frame.setFrameType((msg.flags & XL_CAN_RXMSG_FLAG_RTR)
                                ? QCanBusFrame::RemoteRequestFrame
                                : (msg.flags & XL_CAN_RXMSG_FLAG_EF)
                                    ? QCanBusFrame::ErrorFrame
                                    : QCanBusFrame::DataFrame);

            newFrames.append(std::move(frame));
        } else {
            XLevent event = {};

            const XLstatus status = ::xlReceive(portHandle, &eventCount, &event);
            if (Q_UNLIKELY(status != XL_SUCCESS)) {
                if (status != XL_ERR_QUEUE_IS_EMPTY) {
                    q->setError(systemErrorString(status),
                        QCanBusDevice::ReadError);
                }
                break;
            }
            if (event.tag != XL_RECEIVE_MSG)
                continue;

            const s_xl_can_msg &msg = event.tagData.msg;

            if ((msg.flags & XL_CAN_MSG_FLAG_TX_COMPLETED) && !transmitEcho)
                continue;

            QCanBusFrame frame(msg.id & ~XL_CAN_EXT_MSG_ID,
                QByteArray(reinterpret_cast<const char *>(msg.data), int(msg.dlc)));
            frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(event.timeStamp / 1000));
            frame.setExtendedFrameFormat(msg.id & XL_CAN_EXT_MSG_ID);
            frame.setLocalEcho(msg.flags & XL_CAN_MSG_FLAG_TX_COMPLETED);
            frame.setFrameType((msg.flags & XL_CAN_MSG_FLAG_REMOTE_FRAME)
                                ? QCanBusFrame::RemoteRequestFrame
                                : (msg.flags & XL_CAN_MSG_FLAG_ERROR_FRAME)
                                   ? QCanBusFrame::ErrorFrame
                                   : QCanBusFrame::DataFrame);

            newFrames.append(std::move(frame));
        }
    }

    q->enqueueReceivedFrames(newFrames);
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(VectorCanBackend);
|————Node:call_expression Text: Q_Q(VectorCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (VectorCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: VectorCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: QList<QCanBusFrame> newFrames;
|————Node:template_type Text: QList<QCanBusFrame>
|—————Node:type_identifier Text: QList
|—————Node:template_argument_list Text: <QCanBusFrame>
|——————Node:< Text: <
|——————Node:type_descriptor Text: QCanBusFrame
|———————Node:type_identifier Text: QCanBusFrame
|——————Node:> Text: >
|————Node:identifier Text: newFrames
|————Node:; Text: ;
|———Node:for_statement Text: for (;;) {
        quint32 eventCount = 1;
        if (usesCanFd) {
            XLcanRxEvent event = {};

            const XLstatus status = ::xlCanReceive(portHandle, &event);
            if (Q_UNLIKELY(status != XL_SUCCESS)) {
                if (status != XL_ERR_QUEUE_IS_EMPTY) {
                    q->setError(systemErrorString(status), QCanBusDevice::ReadError);
                }
                break;
            }
            if (event.tag != XL_CAN_EV_TAG_RX_OK)
                continue;

            const XL_CAN_EV_RX_MSG &msg = event.tagData.canRxOkMsg;

            QCanBusFrame frame(msg.id & ~XL_CAN_EXT_MSG_ID,
                QByteArray(reinterpret_cast<const char *>(msg.data), int(msg.dlc)));
            frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(event.timeStamp / 1000));
            frame.setExtendedFrameFormat(msg.id & XL_CAN_EXT_MSG_ID);
            frame.setFrameType((msg.flags & XL_CAN_RXMSG_FLAG_RTR)
                                ? QCanBusFrame::RemoteRequestFrame
                                : (msg.flags & XL_CAN_RXMSG_FLAG_EF)
                                    ? QCanBusFrame::ErrorFrame
                                    : QCanBusFrame::DataFrame);

            newFrames.append(std::move(frame));
        } else {
            XLevent event = {};

            const XLstatus status = ::xlReceive(portHandle, &eventCount, &event);
            if (Q_UNLIKELY(status != XL_SUCCESS)) {
                if (status != XL_ERR_QUEUE_IS_EMPTY) {
                    q->setError(systemErrorString(status),
                        QCanBusDevice::ReadError);
                }
                break;
            }
            if (event.tag != XL_RECEIVE_MSG)
                continue;

            const s_xl_can_msg &msg = event.tagData.msg;

            if ((msg.flags & XL_CAN_MSG_FLAG_TX_COMPLETED) && !transmitEcho)
                continue;

            QCanBusFrame frame(msg.id & ~XL_CAN_EXT_MSG_ID,
                QByteArray(reinterpret_cast<const char *>(msg.data), int(msg.dlc)));
            frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(event.timeStamp / 1000));
            frame.setExtendedFrameFormat(msg.id & XL_CAN_EXT_MSG_ID);
            frame.setLocalEcho(msg.flags & XL_CAN_MSG_FLAG_TX_COMPLETED);
            frame.setFrameType((msg.flags & XL_CAN_MSG_FLAG_REMOTE_FRAME)
                                ? QCanBusFrame::RemoteRequestFrame
                                : (msg.flags & XL_CAN_MSG_FLAG_ERROR_FRAME)
                                   ? QCanBusFrame::ErrorFrame
                                   : QCanBusFrame::DataFrame);

            newFrames.append(std::move(frame));
        }
    }
|————Node:for Text: for
|————Node:( Text: (
|————Node:; Text: ;
|————Node:; Text: ;
|————Node:) Text: )
|————Node:compound_statement Text: {
        quint32 eventCount = 1;
        if (usesCanFd) {
            XLcanRxEvent event = {};

            const XLstatus status = ::xlCanReceive(portHandle, &event);
            if (Q_UNLIKELY(status != XL_SUCCESS)) {
                if (status != XL_ERR_QUEUE_IS_EMPTY) {
                    q->setError(systemErrorString(status), QCanBusDevice::ReadError);
                }
                break;
            }
            if (event.tag != XL_CAN_EV_TAG_RX_OK)
                continue;

            const XL_CAN_EV_RX_MSG &msg = event.tagData.canRxOkMsg;

            QCanBusFrame frame(msg.id & ~XL_CAN_EXT_MSG_ID,
                QByteArray(reinterpret_cast<const char *>(msg.data), int(msg.dlc)));
            frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(event.timeStamp / 1000));
            frame.setExtendedFrameFormat(msg.id & XL_CAN_EXT_MSG_ID);
            frame.setFrameType((msg.flags & XL_CAN_RXMSG_FLAG_RTR)
                                ? QCanBusFrame::RemoteRequestFrame
                                : (msg.flags & XL_CAN_RXMSG_FLAG_EF)
                                    ? QCanBusFrame::ErrorFrame
                                    : QCanBusFrame::DataFrame);

            newFrames.append(std::move(frame));
        } else {
            XLevent event = {};

            const XLstatus status = ::xlReceive(portHandle, &eventCount, &event);
            if (Q_UNLIKELY(status != XL_SUCCESS)) {
                if (status != XL_ERR_QUEUE_IS_EMPTY) {
                    q->setError(systemErrorString(status),
                        QCanBusDevice::ReadError);
                }
                break;
            }
            if (event.tag != XL_RECEIVE_MSG)
                continue;

            const s_xl_can_msg &msg = event.tagData.msg;

            if ((msg.flags & XL_CAN_MSG_FLAG_TX_COMPLETED) && !transmitEcho)
                continue;

            QCanBusFrame frame(msg.id & ~XL_CAN_EXT_MSG_ID,
                QByteArray(reinterpret_cast<const char *>(msg.data), int(msg.dlc)));
            frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(event.timeStamp / 1000));
            frame.setExtendedFrameFormat(msg.id & XL_CAN_EXT_MSG_ID);
            frame.setLocalEcho(msg.flags & XL_CAN_MSG_FLAG_TX_COMPLETED);
            frame.setFrameType((msg.flags & XL_CAN_MSG_FLAG_REMOTE_FRAME)
                                ? QCanBusFrame::RemoteRequestFrame
                                : (msg.flags & XL_CAN_MSG_FLAG_ERROR_FRAME)
                                   ? QCanBusFrame::ErrorFrame
                                   : QCanBusFrame::DataFrame);

            newFrames.append(std::move(frame));
        }
    }
|—————Node:{ Text: {
|—————Node:declaration Text: quint32 eventCount = 1;
|——————Node:type_identifier Text: quint32
|——————Node:init_declarator Text: eventCount = 1
|———————Node:identifier Text: eventCount
|———————Node:= Text: =
|———————Node:number_literal Text: 1
|——————Node:; Text: ;
|—————Node:if_statement Text: if (usesCanFd) {
            XLcanRxEvent event = {};

            const XLstatus status = ::xlCanReceive(portHandle, &event);
            if (Q_UNLIKELY(status != XL_SUCCESS)) {
                if (status != XL_ERR_QUEUE_IS_EMPTY) {
                    q->setError(systemErrorString(status), QCanBusDevice::ReadError);
                }
                break;
            }
            if (event.tag != XL_CAN_EV_TAG_RX_OK)
                continue;

            const XL_CAN_EV_RX_MSG &msg = event.tagData.canRxOkMsg;

            QCanBusFrame frame(msg.id & ~XL_CAN_EXT_MSG_ID,
                QByteArray(reinterpret_cast<const char *>(msg.data), int(msg.dlc)));
            frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(event.timeStamp / 1000));
            frame.setExtendedFrameFormat(msg.id & XL_CAN_EXT_MSG_ID);
            frame.setFrameType((msg.flags & XL_CAN_RXMSG_FLAG_RTR)
                                ? QCanBusFrame::RemoteRequestFrame
                                : (msg.flags & XL_CAN_RXMSG_FLAG_EF)
                                    ? QCanBusFrame::ErrorFrame
                                    : QCanBusFrame::DataFrame);

            newFrames.append(std::move(frame));
        } else {
            XLevent event = {};

            const XLstatus status = ::xlReceive(portHandle, &eventCount, &event);
            if (Q_UNLIKELY(status != XL_SUCCESS)) {
                if (status != XL_ERR_QUEUE_IS_EMPTY) {
                    q->setError(systemErrorString(status),
                        QCanBusDevice::ReadError);
                }
                break;
            }
            if (event.tag != XL_RECEIVE_MSG)
                continue;

            const s_xl_can_msg &msg = event.tagData.msg;

            if ((msg.flags & XL_CAN_MSG_FLAG_TX_COMPLETED) && !transmitEcho)
                continue;

            QCanBusFrame frame(msg.id & ~XL_CAN_EXT_MSG_ID,
                QByteArray(reinterpret_cast<const char *>(msg.data), int(msg.dlc)));
            frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(event.timeStamp / 1000));
            frame.setExtendedFrameFormat(msg.id & XL_CAN_EXT_MSG_ID);
            frame.setLocalEcho(msg.flags & XL_CAN_MSG_FLAG_TX_COMPLETED);
            frame.setFrameType((msg.flags & XL_CAN_MSG_FLAG_REMOTE_FRAME)
                                ? QCanBusFrame::RemoteRequestFrame
                                : (msg.flags & XL_CAN_MSG_FLAG_ERROR_FRAME)
                                   ? QCanBusFrame::ErrorFrame
                                   : QCanBusFrame::DataFrame);

            newFrames.append(std::move(frame));
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (usesCanFd)
|———————Node:( Text: (
|———————Node:identifier Text: usesCanFd
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            XLcanRxEvent event = {};

            const XLstatus status = ::xlCanReceive(portHandle, &event);
            if (Q_UNLIKELY(status != XL_SUCCESS)) {
                if (status != XL_ERR_QUEUE_IS_EMPTY) {
                    q->setError(systemErrorString(status), QCanBusDevice::ReadError);
                }
                break;
            }
            if (event.tag != XL_CAN_EV_TAG_RX_OK)
                continue;

            const XL_CAN_EV_RX_MSG &msg = event.tagData.canRxOkMsg;

            QCanBusFrame frame(msg.id & ~XL_CAN_EXT_MSG_ID,
                QByteArray(reinterpret_cast<const char *>(msg.data), int(msg.dlc)));
            frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(event.timeStamp / 1000));
            frame.setExtendedFrameFormat(msg.id & XL_CAN_EXT_MSG_ID);
            frame.setFrameType((msg.flags & XL_CAN_RXMSG_FLAG_RTR)
                                ? QCanBusFrame::RemoteRequestFrame
                                : (msg.flags & XL_CAN_RXMSG_FLAG_EF)
                                    ? QCanBusFrame::ErrorFrame
                                    : QCanBusFrame::DataFrame);

            newFrames.append(std::move(frame));
        }
|———————Node:{ Text: {
|———————Node:declaration Text: XLcanRxEvent event = {};
|————————Node:type_identifier Text: XLcanRxEvent
|————————Node:init_declarator Text: event = {}
|—————————Node:identifier Text: event
|—————————Node:= Text: =
|—————————Node:initializer_list Text: {}
|——————————Node:{ Text: {
|——————————Node:} Text: }
|————————Node:; Text: ;
|———————Node:declaration Text: const XLstatus status = ::xlCanReceive(portHandle, &event);
|————————Node:type_qualifier Text: const
|—————————Node:const Text: const
|————————Node:type_identifier Text: XLstatus
|————————Node:init_declarator Text: status = ::xlCanReceive(portHandle, &event)
|—————————Node:identifier Text: status
|—————————Node:= Text: =
|—————————Node:call_expression Text: ::xlCanReceive(portHandle, &event)
|——————————Node:qualified_identifier Text: ::xlCanReceive
|———————————Node::: Text: ::
|———————————Node:identifier Text: xlCanReceive
|——————————Node:argument_list Text: (portHandle, &event)
|———————————Node:( Text: (
|———————————Node:identifier Text: portHandle
|———————————Node:, Text: ,
|———————————Node:pointer_expression Text: &event
|————————————Node:& Text: &
|————————————Node:identifier Text: event
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:if_statement Text: if (Q_UNLIKELY(status != XL_SUCCESS)) {
                if (status != XL_ERR_QUEUE_IS_EMPTY) {
                    q->setError(systemErrorString(status), QCanBusDevice::ReadError);
                }
                break;
            }
|————————Node:if Text: if
|————————Node:condition_clause Text: (Q_UNLIKELY(status != XL_SUCCESS))
|—————————Node:( Text: (
|—————————Node:call_expression Text: Q_UNLIKELY(status != XL_SUCCESS)
|——————————Node:identifier Text: Q_UNLIKELY
|——————————Node:argument_list Text: (status != XL_SUCCESS)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: status != XL_SUCCESS
|————————————Node:identifier Text: status
|————————————Node:!= Text: !=
|————————————Node:identifier Text: XL_SUCCESS
|———————————Node:) Text: )
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
                if (status != XL_ERR_QUEUE_IS_EMPTY) {
                    q->setError(systemErrorString(status), QCanBusDevice::ReadError);
                }
                break;
            }
|—————————Node:{ Text: {
|—————————Node:if_statement Text: if (status != XL_ERR_QUEUE_IS_EMPTY) {
                    q->setError(systemErrorString(status), QCanBusDevice::ReadError);
                }
|——————————Node:if Text: if
|——————————Node:condition_clause Text: (status != XL_ERR_QUEUE_IS_EMPTY)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: status != XL_ERR_QUEUE_IS_EMPTY
|————————————Node:identifier Text: status
|————————————Node:!= Text: !=
|————————————Node:identifier Text: XL_ERR_QUEUE_IS_EMPTY
|———————————Node:) Text: )
|——————————Node:compound_statement Text: {
                    q->setError(systemErrorString(status), QCanBusDevice::ReadError);
                }
|———————————Node:{ Text: {
|———————————Node:expression_statement Text: q->setError(systemErrorString(status), QCanBusDevice::ReadError);
|————————————Node:call_expression Text: q->setError(systemErrorString(status), QCanBusDevice::ReadError)
|—————————————Node:field_expression Text: q->setError
|——————————————Node:identifier Text: q
|——————————————Node:-> Text: ->
|——————————————Node:field_identifier Text: setError
|—————————————Node:argument_list Text: (systemErrorString(status), QCanBusDevice::ReadError)
|——————————————Node:( Text: (
|——————————————Node:call_expression Text: systemErrorString(status)
|———————————————Node:identifier Text: systemErrorString
|———————————————Node:argument_list Text: (status)
|————————————————Node:( Text: (
|————————————————Node:identifier Text: status
|————————————————Node:) Text: )
|——————————————Node:, Text: ,
|——————————————Node:qualified_identifier Text: QCanBusDevice::ReadError
|———————————————Node:namespace_identifier Text: QCanBusDevice
|———————————————Node::: Text: ::
|———————————————Node:identifier Text: ReadError
|——————————————Node:) Text: )
|————————————Node:; Text: ;
|———————————Node:} Text: }
|—————————Node:break_statement Text: break;
|——————————Node:break Text: break
|——————————Node:; Text: ;
|—————————Node:} Text: }
|———————Node:if_statement Text: if (event.tag != XL_CAN_EV_TAG_RX_OK)
                continue;
|————————Node:if Text: if
|————————Node:condition_clause Text: (event.tag != XL_CAN_EV_TAG_RX_OK)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: event.tag != XL_CAN_EV_TAG_RX_OK
|——————————Node:field_expression Text: event.tag
|———————————Node:identifier Text: event
|———————————Node:. Text: .
|———————————Node:field_identifier Text: tag
|——————————Node:!= Text: !=
|——————————Node:identifier Text: XL_CAN_EV_TAG_RX_OK
|—————————Node:) Text: )
|————————Node:continue_statement Text: continue;
|—————————Node:continue Text: continue
|—————————Node:; Text: ;
|———————Node:declaration Text: const XL_CAN_EV_RX_MSG &msg = event.tagData.canRxOkMsg;
|————————Node:type_qualifier Text: const
|—————————Node:const Text: const
|————————Node:type_identifier Text: XL_CAN_EV_RX_MSG
|————————Node:init_declarator Text: &msg = event.tagData.canRxOkMsg
|—————————Node:reference_declarator Text: &msg
|——————————Node:& Text: &
|——————————Node:identifier Text: msg
|—————————Node:= Text: =
|—————————Node:field_expression Text: event.tagData.canRxOkMsg
|——————————Node:field_expression Text: event.tagData
|———————————Node:identifier Text: event
|———————————Node:. Text: .
|———————————Node:field_identifier Text: tagData
|——————————Node:. Text: .
|——————————Node:field_identifier Text: canRxOkMsg
|————————Node:; Text: ;
|———————Node:declaration Text: QCanBusFrame frame(msg.id & ~XL_CAN_EXT_MSG_ID,
                QByteArray(reinterpret_cast<const char *>(msg.data), int(msg.dlc)));
|————————Node:type_identifier Text: QCanBusFrame
|————————Node:init_declarator Text: frame(msg.id & ~XL_CAN_EXT_MSG_ID,
                QByteArray(reinterpret_cast<const char *>(msg.data), int(msg.dlc)))
|—————————Node:identifier Text: frame
|—————————Node:argument_list Text: (msg.id & ~XL_CAN_EXT_MSG_ID,
                QByteArray(reinterpret_cast<const char *>(msg.data), int(msg.dlc)))
|——————————Node:( Text: (
|——————————Node:binary_expression Text: msg.id & ~XL_CAN_EXT_MSG_ID
|———————————Node:field_expression Text: msg.id
|————————————Node:identifier Text: msg
|————————————Node:. Text: .
|————————————Node:field_identifier Text: id
|———————————Node:& Text: &
|———————————Node:unary_expression Text: ~XL_CAN_EXT_MSG_ID
|————————————Node:~ Text: ~
|————————————Node:identifier Text: XL_CAN_EXT_MSG_ID
|——————————Node:, Text: ,
|——————————Node:call_expression Text: QByteArray(reinterpret_cast<const char *>(msg.data), int(msg.dlc))
|———————————Node:identifier Text: QByteArray
|———————————Node:argument_list Text: (reinterpret_cast<const char *>(msg.data), int(msg.dlc))
|————————————Node:( Text: (
|————————————Node:call_expression Text: reinterpret_cast<const char *>(msg.data)
|—————————————Node:template_function Text: reinterpret_cast<const char *>
|——————————————Node:identifier Text: reinterpret_cast
|——————————————Node:template_argument_list Text: <const char *>
|———————————————Node:< Text: <
|———————————————Node:type_descriptor Text: const char *
|————————————————Node:type_qualifier Text: const
|—————————————————Node:const Text: const
|————————————————Node:primitive_type Text: char
|————————————————Node:abstract_pointer_declarator Text: *
|—————————————————Node:* Text: *
|———————————————Node:> Text: >
|—————————————Node:argument_list Text: (msg.data)
|——————————————Node:( Text: (
|——————————————Node:field_expression Text: msg.data
|———————————————Node:identifier Text: msg
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: data
|——————————————Node:) Text: )
|————————————Node:, Text: ,
|————————————Node:call_expression Text: int(msg.dlc)
|—————————————Node:primitive_type Text: int
|—————————————Node:argument_list Text: (msg.dlc)
|——————————————Node:( Text: (
|——————————————Node:field_expression Text: msg.dlc
|———————————————Node:identifier Text: msg
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: dlc
|——————————————Node:) Text: )
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(event.timeStamp / 1000));
|————————Node:call_expression Text: frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(event.timeStamp / 1000))
|—————————Node:field_expression Text: frame.setTimeStamp
|——————————Node:identifier Text: frame
|——————————Node:. Text: .
|——————————Node:field_identifier Text: setTimeStamp
|—————————Node:argument_list Text: (QCanBusFrame::TimeStamp::fromMicroSeconds(event.timeStamp / 1000))
|——————————Node:( Text: (
|——————————Node:call_expression Text: QCanBusFrame::TimeStamp::fromMicroSeconds(event.timeStamp / 1000)
|———————————Node:qualified_identifier Text: QCanBusFrame::TimeStamp::fromMicroSeconds
|————————————Node:namespace_identifier Text: QCanBusFrame
|————————————Node::: Text: ::
|————————————Node:qualified_identifier Text: TimeStamp::fromMicroSeconds
|—————————————Node:namespace_identifier Text: TimeStamp
|—————————————Node::: Text: ::
|—————————————Node:identifier Text: fromMicroSeconds
|———————————Node:argument_list Text: (event.timeStamp / 1000)
|————————————Node:( Text: (
|————————————Node:binary_expression Text: event.timeStamp / 1000
|—————————————Node:field_expression Text: event.timeStamp
|——————————————Node:identifier Text: event
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: timeStamp
|—————————————Node:/ Text: /
|—————————————Node:number_literal Text: 1000
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: frame.setExtendedFrameFormat(msg.id & XL_CAN_EXT_MSG_ID);
|————————Node:call_expression Text: frame.setExtendedFrameFormat(msg.id & XL_CAN_EXT_MSG_ID)
|—————————Node:field_expression Text: frame.setExtendedFrameFormat
|——————————Node:identifier Text: frame
|——————————Node:. Text: .
|——————————Node:field_identifier Text: setExtendedFrameFormat
|—————————Node:argument_list Text: (msg.id & XL_CAN_EXT_MSG_ID)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: msg.id & XL_CAN_EXT_MSG_ID
|———————————Node:field_expression Text: msg.id
|————————————Node:identifier Text: msg
|————————————Node:. Text: .
|————————————Node:field_identifier Text: id
|———————————Node:& Text: &
|———————————Node:identifier Text: XL_CAN_EXT_MSG_ID
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: frame.setFrameType((msg.flags & XL_CAN_RXMSG_FLAG_RTR)
                                ? QCanBusFrame::RemoteRequestFrame
                                : (msg.flags & XL_CAN_RXMSG_FLAG_EF)
                                    ? QCanBusFrame::ErrorFrame
                                    : QCanBusFrame::DataFrame);
|————————Node:call_expression Text: frame.setFrameType((msg.flags & XL_CAN_RXMSG_FLAG_RTR)
                                ? QCanBusFrame::RemoteRequestFrame
                                : (msg.flags & XL_CAN_RXMSG_FLAG_EF)
                                    ? QCanBusFrame::ErrorFrame
                                    : QCanBusFrame::DataFrame)
|—————————Node:field_expression Text: frame.setFrameType
|——————————Node:identifier Text: frame
|——————————Node:. Text: .
|——————————Node:field_identifier Text: setFrameType
|—————————Node:argument_list Text: ((msg.flags & XL_CAN_RXMSG_FLAG_RTR)
                                ? QCanBusFrame::RemoteRequestFrame
                                : (msg.flags & XL_CAN_RXMSG_FLAG_EF)
                                    ? QCanBusFrame::ErrorFrame
                                    : QCanBusFrame::DataFrame)
|——————————Node:( Text: (
|——————————Node:conditional_expression Text: (msg.flags & XL_CAN_RXMSG_FLAG_RTR)
                                ? QCanBusFrame::RemoteRequestFrame
                                : (msg.flags & XL_CAN_RXMSG_FLAG_EF)
                                    ? QCanBusFrame::ErrorFrame
                                    : QCanBusFrame::DataFrame
|———————————Node:parenthesized_expression Text: (msg.flags & XL_CAN_RXMSG_FLAG_RTR)
|————————————Node:( Text: (
|————————————Node:binary_expression Text: msg.flags & XL_CAN_RXMSG_FLAG_RTR
|—————————————Node:field_expression Text: msg.flags
|——————————————Node:identifier Text: msg
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: flags
|—————————————Node:& Text: &
|—————————————Node:identifier Text: XL_CAN_RXMSG_FLAG_RTR
|————————————Node:) Text: )
|———————————Node:? Text: ?
|———————————Node:qualified_identifier Text: QCanBusFrame::RemoteRequestFrame
|————————————Node:namespace_identifier Text: QCanBusFrame
|————————————Node::: Text: ::
|————————————Node:identifier Text: RemoteRequestFrame
|———————————Node:: Text: :
|———————————Node:conditional_expression Text: (msg.flags & XL_CAN_RXMSG_FLAG_EF)
                                    ? QCanBusFrame::ErrorFrame
                                    : QCanBusFrame::DataFrame
|————————————Node:parenthesized_expression Text: (msg.flags & XL_CAN_RXMSG_FLAG_EF)
|—————————————Node:( Text: (
|—————————————Node:binary_expression Text: msg.flags & XL_CAN_RXMSG_FLAG_EF
|——————————————Node:field_expression Text: msg.flags
|———————————————Node:identifier Text: msg
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: flags
|——————————————Node:& Text: &
|——————————————Node:identifier Text: XL_CAN_RXMSG_FLAG_EF
|—————————————Node:) Text: )
|————————————Node:? Text: ?
|————————————Node:qualified_identifier Text: QCanBusFrame::ErrorFrame
|—————————————Node:namespace_identifier Text: QCanBusFrame
|—————————————Node::: Text: ::
|—————————————Node:identifier Text: ErrorFrame
|————————————Node:: Text: :
|————————————Node:qualified_identifier Text: QCanBusFrame::DataFrame
|—————————————Node:namespace_identifier Text: QCanBusFrame
|—————————————Node::: Text: ::
|—————————————Node:identifier Text: DataFrame
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: newFrames.append(std::move(frame));
|————————Node:call_expression Text: newFrames.append(std::move(frame))
|—————————Node:field_expression Text: newFrames.append
|——————————Node:identifier Text: newFrames
|——————————Node:. Text: .
|——————————Node:field_identifier Text: append
|—————————Node:argument_list Text: (std::move(frame))
|——————————Node:( Text: (
|——————————Node:call_expression Text: std::move(frame)
|———————————Node:qualified_identifier Text: std::move
|————————————Node:namespace_identifier Text: std
|————————————Node::: Text: ::
|————————————Node:identifier Text: move
|———————————Node:argument_list Text: (frame)
|————————————Node:( Text: (
|————————————Node:identifier Text: frame
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|——————Node:else_clause Text: else {
            XLevent event = {};

            const XLstatus status = ::xlReceive(portHandle, &eventCount, &event);
            if (Q_UNLIKELY(status != XL_SUCCESS)) {
                if (status != XL_ERR_QUEUE_IS_EMPTY) {
                    q->setError(systemErrorString(status),
                        QCanBusDevice::ReadError);
                }
                break;
            }
            if (event.tag != XL_RECEIVE_MSG)
                continue;

            const s_xl_can_msg &msg = event.tagData.msg;

            if ((msg.flags & XL_CAN_MSG_FLAG_TX_COMPLETED) && !transmitEcho)
                continue;

            QCanBusFrame frame(msg.id & ~XL_CAN_EXT_MSG_ID,
                QByteArray(reinterpret_cast<const char *>(msg.data), int(msg.dlc)));
            frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(event.timeStamp / 1000));
            frame.setExtendedFrameFormat(msg.id & XL_CAN_EXT_MSG_ID);
            frame.setLocalEcho(msg.flags & XL_CAN_MSG_FLAG_TX_COMPLETED);
            frame.setFrameType((msg.flags & XL_CAN_MSG_FLAG_REMOTE_FRAME)
                                ? QCanBusFrame::RemoteRequestFrame
                                : (msg.flags & XL_CAN_MSG_FLAG_ERROR_FRAME)
                                   ? QCanBusFrame::ErrorFrame
                                   : QCanBusFrame::DataFrame);

            newFrames.append(std::move(frame));
        }
|———————Node:else Text: else
|———————Node:compound_statement Text: {
            XLevent event = {};

            const XLstatus status = ::xlReceive(portHandle, &eventCount, &event);
            if (Q_UNLIKELY(status != XL_SUCCESS)) {
                if (status != XL_ERR_QUEUE_IS_EMPTY) {
                    q->setError(systemErrorString(status),
                        QCanBusDevice::ReadError);
                }
                break;
            }
            if (event.tag != XL_RECEIVE_MSG)
                continue;

            const s_xl_can_msg &msg = event.tagData.msg;

            if ((msg.flags & XL_CAN_MSG_FLAG_TX_COMPLETED) && !transmitEcho)
                continue;

            QCanBusFrame frame(msg.id & ~XL_CAN_EXT_MSG_ID,
                QByteArray(reinterpret_cast<const char *>(msg.data), int(msg.dlc)));
            frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(event.timeStamp / 1000));
            frame.setExtendedFrameFormat(msg.id & XL_CAN_EXT_MSG_ID);
            frame.setLocalEcho(msg.flags & XL_CAN_MSG_FLAG_TX_COMPLETED);
            frame.setFrameType((msg.flags & XL_CAN_MSG_FLAG_REMOTE_FRAME)
                                ? QCanBusFrame::RemoteRequestFrame
                                : (msg.flags & XL_CAN_MSG_FLAG_ERROR_FRAME)
                                   ? QCanBusFrame::ErrorFrame
                                   : QCanBusFrame::DataFrame);

            newFrames.append(std::move(frame));
        }
|————————Node:{ Text: {
|————————Node:declaration Text: XLevent event = {};
|—————————Node:type_identifier Text: XLevent
|—————————Node:init_declarator Text: event = {}
|——————————Node:identifier Text: event
|——————————Node:= Text: =
|——————————Node:initializer_list Text: {}
|———————————Node:{ Text: {
|———————————Node:} Text: }
|—————————Node:; Text: ;
|————————Node:declaration Text: const XLstatus status = ::xlReceive(portHandle, &eventCount, &event);
|—————————Node:type_qualifier Text: const
|——————————Node:const Text: const
|—————————Node:type_identifier Text: XLstatus
|—————————Node:init_declarator Text: status = ::xlReceive(portHandle, &eventCount, &event)
|——————————Node:identifier Text: status
|——————————Node:= Text: =
|——————————Node:call_expression Text: ::xlReceive(portHandle, &eventCount, &event)
|———————————Node:qualified_identifier Text: ::xlReceive
|————————————Node::: Text: ::
|————————————Node:identifier Text: xlReceive
|———————————Node:argument_list Text: (portHandle, &eventCount, &event)
|————————————Node:( Text: (
|————————————Node:identifier Text: portHandle
|————————————Node:, Text: ,
|————————————Node:pointer_expression Text: &eventCount
|—————————————Node:& Text: &
|—————————————Node:identifier Text: eventCount
|————————————Node:, Text: ,
|————————————Node:pointer_expression Text: &event
|—————————————Node:& Text: &
|—————————————Node:identifier Text: event
|————————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:if_statement Text: if (Q_UNLIKELY(status != XL_SUCCESS)) {
                if (status != XL_ERR_QUEUE_IS_EMPTY) {
                    q->setError(systemErrorString(status),
                        QCanBusDevice::ReadError);
                }
                break;
            }
|—————————Node:if Text: if
|—————————Node:condition_clause Text: (Q_UNLIKELY(status != XL_SUCCESS))
|——————————Node:( Text: (
|——————————Node:call_expression Text: Q_UNLIKELY(status != XL_SUCCESS)
|———————————Node:identifier Text: Q_UNLIKELY
|———————————Node:argument_list Text: (status != XL_SUCCESS)
|————————————Node:( Text: (
|————————————Node:binary_expression Text: status != XL_SUCCESS
|—————————————Node:identifier Text: status
|—————————————Node:!= Text: !=
|—————————————Node:identifier Text: XL_SUCCESS
|————————————Node:) Text: )
|——————————Node:) Text: )
|—————————Node:compound_statement Text: {
                if (status != XL_ERR_QUEUE_IS_EMPTY) {
                    q->setError(systemErrorString(status),
                        QCanBusDevice::ReadError);
                }
                break;
            }
|——————————Node:{ Text: {
|——————————Node:if_statement Text: if (status != XL_ERR_QUEUE_IS_EMPTY) {
                    q->setError(systemErrorString(status),
                        QCanBusDevice::ReadError);
                }
|———————————Node:if Text: if
|———————————Node:condition_clause Text: (status != XL_ERR_QUEUE_IS_EMPTY)
|————————————Node:( Text: (
|————————————Node:binary_expression Text: status != XL_ERR_QUEUE_IS_EMPTY
|—————————————Node:identifier Text: status
|—————————————Node:!= Text: !=
|—————————————Node:identifier Text: XL_ERR_QUEUE_IS_EMPTY
|————————————Node:) Text: )
|———————————Node:compound_statement Text: {
                    q->setError(systemErrorString(status),
                        QCanBusDevice::ReadError);
                }
|————————————Node:{ Text: {
|————————————Node:expression_statement Text: q->setError(systemErrorString(status),
                        QCanBusDevice::ReadError);
|—————————————Node:call_expression Text: q->setError(systemErrorString(status),
                        QCanBusDevice::ReadError)
|——————————————Node:field_expression Text: q->setError
|———————————————Node:identifier Text: q
|———————————————Node:-> Text: ->
|———————————————Node:field_identifier Text: setError
|——————————————Node:argument_list Text: (systemErrorString(status),
                        QCanBusDevice::ReadError)
|———————————————Node:( Text: (
|———————————————Node:call_expression Text: systemErrorString(status)
|————————————————Node:identifier Text: systemErrorString
|————————————————Node:argument_list Text: (status)
|—————————————————Node:( Text: (
|—————————————————Node:identifier Text: status
|—————————————————Node:) Text: )
|———————————————Node:, Text: ,
|———————————————Node:qualified_identifier Text: QCanBusDevice::ReadError
|————————————————Node:namespace_identifier Text: QCanBusDevice
|————————————————Node::: Text: ::
|————————————————Node:identifier Text: ReadError
|———————————————Node:) Text: )
|—————————————Node:; Text: ;
|————————————Node:} Text: }
|——————————Node:break_statement Text: break;
|———————————Node:break Text: break
|———————————Node:; Text: ;
|——————————Node:} Text: }
|————————Node:if_statement Text: if (event.tag != XL_RECEIVE_MSG)
                continue;
|—————————Node:if Text: if
|—————————Node:condition_clause Text: (event.tag != XL_RECEIVE_MSG)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: event.tag != XL_RECEIVE_MSG
|———————————Node:field_expression Text: event.tag
|————————————Node:identifier Text: event
|————————————Node:. Text: .
|————————————Node:field_identifier Text: tag
|———————————Node:!= Text: !=
|———————————Node:identifier Text: XL_RECEIVE_MSG
|——————————Node:) Text: )
|—————————Node:continue_statement Text: continue;
|——————————Node:continue Text: continue
|——————————Node:; Text: ;
|————————Node:declaration Text: const s_xl_can_msg &msg = event.tagData.msg;
|—————————Node:type_qualifier Text: const
|——————————Node:const Text: const
|—————————Node:type_identifier Text: s_xl_can_msg
|—————————Node:init_declarator Text: &msg = event.tagData.msg
|——————————Node:reference_declarator Text: &msg
|———————————Node:& Text: &
|———————————Node:identifier Text: msg
|——————————Node:= Text: =
|——————————Node:field_expression Text: event.tagData.msg
|———————————Node:field_expression Text: event.tagData
|————————————Node:identifier Text: event
|————————————Node:. Text: .
|————————————Node:field_identifier Text: tagData
|———————————Node:. Text: .
|———————————Node:field_identifier Text: msg
|—————————Node:; Text: ;
|————————Node:if_statement Text: if ((msg.flags & XL_CAN_MSG_FLAG_TX_COMPLETED) && !transmitEcho)
                continue;
|—————————Node:if Text: if
|—————————Node:condition_clause Text: ((msg.flags & XL_CAN_MSG_FLAG_TX_COMPLETED) && !transmitEcho)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: (msg.flags & XL_CAN_MSG_FLAG_TX_COMPLETED) && !transmitEcho
|———————————Node:parenthesized_expression Text: (msg.flags & XL_CAN_MSG_FLAG_TX_COMPLETED)
|————————————Node:( Text: (
|————————————Node:binary_expression Text: msg.flags & XL_CAN_MSG_FLAG_TX_COMPLETED
|—————————————Node:field_expression Text: msg.flags
|——————————————Node:identifier Text: msg
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: flags
|—————————————Node:& Text: &
|—————————————Node:identifier Text: XL_CAN_MSG_FLAG_TX_COMPLETED
|————————————Node:) Text: )
|———————————Node:&& Text: &&
|———————————Node:unary_expression Text: !transmitEcho
|————————————Node:! Text: !
|————————————Node:identifier Text: transmitEcho
|——————————Node:) Text: )
|—————————Node:continue_statement Text: continue;
|——————————Node:continue Text: continue
|——————————Node:; Text: ;
|————————Node:declaration Text: QCanBusFrame frame(msg.id & ~XL_CAN_EXT_MSG_ID,
                QByteArray(reinterpret_cast<const char *>(msg.data), int(msg.dlc)));
|—————————Node:type_identifier Text: QCanBusFrame
|—————————Node:init_declarator Text: frame(msg.id & ~XL_CAN_EXT_MSG_ID,
                QByteArray(reinterpret_cast<const char *>(msg.data), int(msg.dlc)))
|——————————Node:identifier Text: frame
|——————————Node:argument_list Text: (msg.id & ~XL_CAN_EXT_MSG_ID,
                QByteArray(reinterpret_cast<const char *>(msg.data), int(msg.dlc)))
|———————————Node:( Text: (
|———————————Node:binary_expression Text: msg.id & ~XL_CAN_EXT_MSG_ID
|————————————Node:field_expression Text: msg.id
|—————————————Node:identifier Text: msg
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: id
|————————————Node:& Text: &
|————————————Node:unary_expression Text: ~XL_CAN_EXT_MSG_ID
|—————————————Node:~ Text: ~
|—————————————Node:identifier Text: XL_CAN_EXT_MSG_ID
|———————————Node:, Text: ,
|———————————Node:call_expression Text: QByteArray(reinterpret_cast<const char *>(msg.data), int(msg.dlc))
|————————————Node:identifier Text: QByteArray
|————————————Node:argument_list Text: (reinterpret_cast<const char *>(msg.data), int(msg.dlc))
|—————————————Node:( Text: (
|—————————————Node:call_expression Text: reinterpret_cast<const char *>(msg.data)
|——————————————Node:template_function Text: reinterpret_cast<const char *>
|———————————————Node:identifier Text: reinterpret_cast
|———————————————Node:template_argument_list Text: <const char *>
|————————————————Node:< Text: <
|————————————————Node:type_descriptor Text: const char *
|—————————————————Node:type_qualifier Text: const
|——————————————————Node:const Text: const
|—————————————————Node:primitive_type Text: char
|—————————————————Node:abstract_pointer_declarator Text: *
|——————————————————Node:* Text: *
|————————————————Node:> Text: >
|——————————————Node:argument_list Text: (msg.data)
|———————————————Node:( Text: (
|———————————————Node:field_expression Text: msg.data
|————————————————Node:identifier Text: msg
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: data
|———————————————Node:) Text: )
|—————————————Node:, Text: ,
|—————————————Node:call_expression Text: int(msg.dlc)
|——————————————Node:primitive_type Text: int
|——————————————Node:argument_list Text: (msg.dlc)
|———————————————Node:( Text: (
|———————————————Node:field_expression Text: msg.dlc
|————————————————Node:identifier Text: msg
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: dlc
|———————————————Node:) Text: )
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(event.timeStamp / 1000));
|—————————Node:call_expression Text: frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(event.timeStamp / 1000))
|——————————Node:field_expression Text: frame.setTimeStamp
|———————————Node:identifier Text: frame
|———————————Node:. Text: .
|———————————Node:field_identifier Text: setTimeStamp
|——————————Node:argument_list Text: (QCanBusFrame::TimeStamp::fromMicroSeconds(event.timeStamp / 1000))
|———————————Node:( Text: (
|———————————Node:call_expression Text: QCanBusFrame::TimeStamp::fromMicroSeconds(event.timeStamp / 1000)
|————————————Node:qualified_identifier Text: QCanBusFrame::TimeStamp::fromMicroSeconds
|—————————————Node:namespace_identifier Text: QCanBusFrame
|—————————————Node::: Text: ::
|—————————————Node:qualified_identifier Text: TimeStamp::fromMicroSeconds
|——————————————Node:namespace_identifier Text: TimeStamp
|——————————————Node::: Text: ::
|——————————————Node:identifier Text: fromMicroSeconds
|————————————Node:argument_list Text: (event.timeStamp / 1000)
|—————————————Node:( Text: (
|—————————————Node:binary_expression Text: event.timeStamp / 1000
|——————————————Node:field_expression Text: event.timeStamp
|———————————————Node:identifier Text: event
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: timeStamp
|——————————————Node:/ Text: /
|——————————————Node:number_literal Text: 1000
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: frame.setExtendedFrameFormat(msg.id & XL_CAN_EXT_MSG_ID);
|—————————Node:call_expression Text: frame.setExtendedFrameFormat(msg.id & XL_CAN_EXT_MSG_ID)
|——————————Node:field_expression Text: frame.setExtendedFrameFormat
|———————————Node:identifier Text: frame
|———————————Node:. Text: .
|———————————Node:field_identifier Text: setExtendedFrameFormat
|——————————Node:argument_list Text: (msg.id & XL_CAN_EXT_MSG_ID)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: msg.id & XL_CAN_EXT_MSG_ID
|————————————Node:field_expression Text: msg.id
|—————————————Node:identifier Text: msg
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: id
|————————————Node:& Text: &
|————————————Node:identifier Text: XL_CAN_EXT_MSG_ID
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: frame.setLocalEcho(msg.flags & XL_CAN_MSG_FLAG_TX_COMPLETED);
|—————————Node:call_expression Text: frame.setLocalEcho(msg.flags & XL_CAN_MSG_FLAG_TX_COMPLETED)
|——————————Node:field_expression Text: frame.setLocalEcho
|———————————Node:identifier Text: frame
|———————————Node:. Text: .
|———————————Node:field_identifier Text: setLocalEcho
|——————————Node:argument_list Text: (msg.flags & XL_CAN_MSG_FLAG_TX_COMPLETED)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: msg.flags & XL_CAN_MSG_FLAG_TX_COMPLETED
|————————————Node:field_expression Text: msg.flags
|—————————————Node:identifier Text: msg
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: flags
|————————————Node:& Text: &
|————————————Node:identifier Text: XL_CAN_MSG_FLAG_TX_COMPLETED
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: frame.setFrameType((msg.flags & XL_CAN_MSG_FLAG_REMOTE_FRAME)
                                ? QCanBusFrame::RemoteRequestFrame
                                : (msg.flags & XL_CAN_MSG_FLAG_ERROR_FRAME)
                                   ? QCanBusFrame::ErrorFrame
                                   : QCanBusFrame::DataFrame);
|—————————Node:call_expression Text: frame.setFrameType((msg.flags & XL_CAN_MSG_FLAG_REMOTE_FRAME)
                                ? QCanBusFrame::RemoteRequestFrame
                                : (msg.flags & XL_CAN_MSG_FLAG_ERROR_FRAME)
                                   ? QCanBusFrame::ErrorFrame
                                   : QCanBusFrame::DataFrame)
|——————————Node:field_expression Text: frame.setFrameType
|———————————Node:identifier Text: frame
|———————————Node:. Text: .
|———————————Node:field_identifier Text: setFrameType
|——————————Node:argument_list Text: ((msg.flags & XL_CAN_MSG_FLAG_REMOTE_FRAME)
                                ? QCanBusFrame::RemoteRequestFrame
                                : (msg.flags & XL_CAN_MSG_FLAG_ERROR_FRAME)
                                   ? QCanBusFrame::ErrorFrame
                                   : QCanBusFrame::DataFrame)
|———————————Node:( Text: (
|———————————Node:conditional_expression Text: (msg.flags & XL_CAN_MSG_FLAG_REMOTE_FRAME)
                                ? QCanBusFrame::RemoteRequestFrame
                                : (msg.flags & XL_CAN_MSG_FLAG_ERROR_FRAME)
                                   ? QCanBusFrame::ErrorFrame
                                   : QCanBusFrame::DataFrame
|————————————Node:parenthesized_expression Text: (msg.flags & XL_CAN_MSG_FLAG_REMOTE_FRAME)
|—————————————Node:( Text: (
|—————————————Node:binary_expression Text: msg.flags & XL_CAN_MSG_FLAG_REMOTE_FRAME
|——————————————Node:field_expression Text: msg.flags
|———————————————Node:identifier Text: msg
|———————————————Node:. Text: .
|———————————————Node:field_identifier Text: flags
|——————————————Node:& Text: &
|——————————————Node:identifier Text: XL_CAN_MSG_FLAG_REMOTE_FRAME
|—————————————Node:) Text: )
|————————————Node:? Text: ?
|————————————Node:qualified_identifier Text: QCanBusFrame::RemoteRequestFrame
|—————————————Node:namespace_identifier Text: QCanBusFrame
|—————————————Node::: Text: ::
|—————————————Node:identifier Text: RemoteRequestFrame
|————————————Node:: Text: :
|————————————Node:conditional_expression Text: (msg.flags & XL_CAN_MSG_FLAG_ERROR_FRAME)
                                   ? QCanBusFrame::ErrorFrame
                                   : QCanBusFrame::DataFrame
|—————————————Node:parenthesized_expression Text: (msg.flags & XL_CAN_MSG_FLAG_ERROR_FRAME)
|——————————————Node:( Text: (
|——————————————Node:binary_expression Text: msg.flags & XL_CAN_MSG_FLAG_ERROR_FRAME
|———————————————Node:field_expression Text: msg.flags
|————————————————Node:identifier Text: msg
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: flags
|———————————————Node:& Text: &
|———————————————Node:identifier Text: XL_CAN_MSG_FLAG_ERROR_FRAME
|——————————————Node:) Text: )
|—————————————Node:? Text: ?
|—————————————Node:qualified_identifier Text: QCanBusFrame::ErrorFrame
|——————————————Node:namespace_identifier Text: QCanBusFrame
|——————————————Node::: Text: ::
|——————————————Node:identifier Text: ErrorFrame
|—————————————Node:: Text: :
|—————————————Node:qualified_identifier Text: QCanBusFrame::DataFrame
|——————————————Node:namespace_identifier Text: QCanBusFrame
|——————————————Node::: Text: ::
|——————————————Node:identifier Text: DataFrame
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: newFrames.append(std::move(frame));
|—————————Node:call_expression Text: newFrames.append(std::move(frame))
|——————————Node:field_expression Text: newFrames.append
|———————————Node:identifier Text: newFrames
|———————————Node:. Text: .
|———————————Node:field_identifier Text: append
|——————————Node:argument_list Text: (std::move(frame))
|———————————Node:( Text: (
|———————————Node:call_expression Text: std::move(frame)
|————————————Node:qualified_identifier Text: std::move
|—————————————Node:namespace_identifier Text: std
|—————————————Node::: Text: ::
|—————————————Node:identifier Text: move
|————————————Node:argument_list Text: (frame)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: frame
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:} Text: }
|—————Node:} Text: }
|———Node:expression_statement Text: q->enqueueReceivedFrames(newFrames);
|————Node:call_expression Text: q->enqueueReceivedFrames(newFrames)
|—————Node:field_expression Text: q->enqueueReceivedFrames
|——————Node:identifier Text: q
|——————Node:-> Text: ->
|——————Node:field_identifier Text: enqueueReceivedFrames
|—————Node:argument_list Text: (newFrames)
|——————Node:( Text: (
|——————Node:identifier Text: newFrames
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: XLstatus VectorCanBackendPrivate::loadDriver()
{
    if (driverRefCount == 0) {
        const XLstatus status = ::xlOpenDriver();
        if (Q_UNLIKELY(status != XL_SUCCESS))
            return status;

    } else if (Q_UNLIKELY(driverRefCount < 0)) {
        qCCritical(QT_CANBUS_PLUGINS_VECTORCAN, "Wrong driver reference counter: %d",
                   driverRefCount);
        return XL_ERR_CANNOT_OPEN_DRIVER;
    }

    ++driverRefCount;
    return XL_SUCCESS;
}
|——Node:type_identifier Text: XLstatus
|——Node:function_declarator Text: VectorCanBackendPrivate::loadDriver()
|———Node:qualified_identifier Text: VectorCanBackendPrivate::loadDriver
|————Node:namespace_identifier Text: VectorCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: loadDriver
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    if (driverRefCount == 0) {
        const XLstatus status = ::xlOpenDriver();
        if (Q_UNLIKELY(status != XL_SUCCESS))
            return status;

    } else if (Q_UNLIKELY(driverRefCount < 0)) {
        qCCritical(QT_CANBUS_PLUGINS_VECTORCAN, "Wrong driver reference counter: %d",
                   driverRefCount);
        return XL_ERR_CANNOT_OPEN_DRIVER;
    }

    ++driverRefCount;
    return XL_SUCCESS;
}
|———Node:{ Text: {
|———Node:if_statement Text: if (driverRefCount == 0) {
        const XLstatus status = ::xlOpenDriver();
        if (Q_UNLIKELY(status != XL_SUCCESS))
            return status;

    } else if (Q_UNLIKELY(driverRefCount < 0)) {
        qCCritical(QT_CANBUS_PLUGINS_VECTORCAN, "Wrong driver reference counter: %d",
                   driverRefCount);
        return XL_ERR_CANNOT_OPEN_DRIVER;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (driverRefCount == 0)
|—————Node:( Text: (
|—————Node:binary_expression Text: driverRefCount == 0
|——————Node:identifier Text: driverRefCount
|——————Node:== Text: ==
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {
        const XLstatus status = ::xlOpenDriver();
        if (Q_UNLIKELY(status != XL_SUCCESS))
            return status;

    }
|—————Node:{ Text: {
|—————Node:declaration Text: const XLstatus status = ::xlOpenDriver();
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:type_identifier Text: XLstatus
|——————Node:init_declarator Text: status = ::xlOpenDriver()
|———————Node:identifier Text: status
|———————Node:= Text: =
|———————Node:call_expression Text: ::xlOpenDriver()
|————————Node:qualified_identifier Text: ::xlOpenDriver
|—————————Node::: Text: ::
|—————————Node:identifier Text: xlOpenDriver
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (Q_UNLIKELY(status != XL_SUCCESS))
            return status;
|——————Node:if Text: if
|——————Node:condition_clause Text: (Q_UNLIKELY(status != XL_SUCCESS))
|———————Node:( Text: (
|———————Node:call_expression Text: Q_UNLIKELY(status != XL_SUCCESS)
|————————Node:identifier Text: Q_UNLIKELY
|————————Node:argument_list Text: (status != XL_SUCCESS)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: status != XL_SUCCESS
|——————————Node:identifier Text: status
|——————————Node:!= Text: !=
|——————————Node:identifier Text: XL_SUCCESS
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:return_statement Text: return status;
|———————Node:return Text: return
|———————Node:identifier Text: status
|———————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else if (Q_UNLIKELY(driverRefCount < 0)) {
        qCCritical(QT_CANBUS_PLUGINS_VECTORCAN, "Wrong driver reference counter: %d",
                   driverRefCount);
        return XL_ERR_CANNOT_OPEN_DRIVER;
    }
|—————Node:else Text: else
|—————Node:if_statement Text: if (Q_UNLIKELY(driverRefCount < 0)) {
        qCCritical(QT_CANBUS_PLUGINS_VECTORCAN, "Wrong driver reference counter: %d",
                   driverRefCount);
        return XL_ERR_CANNOT_OPEN_DRIVER;
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: (Q_UNLIKELY(driverRefCount < 0))
|———————Node:( Text: (
|———————Node:call_expression Text: Q_UNLIKELY(driverRefCount < 0)
|————————Node:identifier Text: Q_UNLIKELY
|————————Node:argument_list Text: (driverRefCount < 0)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: driverRefCount < 0
|——————————Node:identifier Text: driverRefCount
|——————————Node:< Text: <
|——————————Node:number_literal Text: 0
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {
        qCCritical(QT_CANBUS_PLUGINS_VECTORCAN, "Wrong driver reference counter: %d",
                   driverRefCount);
        return XL_ERR_CANNOT_OPEN_DRIVER;
    }
|———————Node:{ Text: {
|———————Node:expression_statement Text: qCCritical(QT_CANBUS_PLUGINS_VECTORCAN, "Wrong driver reference counter: %d",
                   driverRefCount);
|————————Node:call_expression Text: qCCritical(QT_CANBUS_PLUGINS_VECTORCAN, "Wrong driver reference counter: %d",
                   driverRefCount)
|—————————Node:identifier Text: qCCritical
|—————————Node:argument_list Text: (QT_CANBUS_PLUGINS_VECTORCAN, "Wrong driver reference counter: %d",
                   driverRefCount)
|——————————Node:( Text: (
|——————————Node:identifier Text: QT_CANBUS_PLUGINS_VECTORCAN
|——————————Node:, Text: ,
|——————————Node:string_literal Text: "Wrong driver reference counter: %d"
|———————————Node:" Text: "
|———————————Node:string_content Text: Wrong driver reference counter: %d
|———————————Node:" Text: "
|——————————Node:, Text: ,
|——————————Node:identifier Text: driverRefCount
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:return_statement Text: return XL_ERR_CANNOT_OPEN_DRIVER;
|————————Node:return Text: return
|————————Node:identifier Text: XL_ERR_CANNOT_OPEN_DRIVER
|————————Node:; Text: ;
|———————Node:} Text: }
|———Node:expression_statement Text: ++driverRefCount;
|————Node:update_expression Text: ++driverRefCount
|—————Node:++ Text: ++
|—————Node:identifier Text: driverRefCount
|————Node:; Text: ;
|———Node:return_statement Text: return XL_SUCCESS;
|————Node:return Text: return
|————Node:identifier Text: XL_SUCCESS
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void VectorCanBackendPrivate::startupDriver()
{
    Q_Q(VectorCanBackend);

    const XLstatus status = loadDriver();
    if (Q_UNLIKELY(status != XL_SUCCESS)) {
        q->setError(systemErrorString(status),
                    QCanBusDevice::CanBusError::ConnectionError);
    }
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: VectorCanBackendPrivate::startupDriver()
|———Node:qualified_identifier Text: VectorCanBackendPrivate::startupDriver
|————Node:namespace_identifier Text: VectorCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: startupDriver
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(VectorCanBackend);

    const XLstatus status = loadDriver();
    if (Q_UNLIKELY(status != XL_SUCCESS)) {
        q->setError(systemErrorString(status),
                    QCanBusDevice::CanBusError::ConnectionError);
    }
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(VectorCanBackend);
|————Node:call_expression Text: Q_Q(VectorCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (VectorCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: VectorCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: const XLstatus status = loadDriver();
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: XLstatus
|————Node:init_declarator Text: status = loadDriver()
|—————Node:identifier Text: status
|—————Node:= Text: =
|—————Node:call_expression Text: loadDriver()
|——————Node:identifier Text: loadDriver
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(status != XL_SUCCESS)) {
        q->setError(systemErrorString(status),
                    QCanBusDevice::CanBusError::ConnectionError);
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(status != XL_SUCCESS))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(status != XL_SUCCESS)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (status != XL_SUCCESS)
|———————Node:( Text: (
|———————Node:binary_expression Text: status != XL_SUCCESS
|————————Node:identifier Text: status
|————————Node:!= Text: !=
|————————Node:identifier Text: XL_SUCCESS
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        q->setError(systemErrorString(status),
                    QCanBusDevice::CanBusError::ConnectionError);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: q->setError(systemErrorString(status),
                    QCanBusDevice::CanBusError::ConnectionError);
|——————Node:call_expression Text: q->setError(systemErrorString(status),
                    QCanBusDevice::CanBusError::ConnectionError)
|———————Node:field_expression Text: q->setError
|————————Node:identifier Text: q
|————————Node:-> Text: ->
|————————Node:field_identifier Text: setError
|———————Node:argument_list Text: (systemErrorString(status),
                    QCanBusDevice::CanBusError::ConnectionError)
|————————Node:( Text: (
|————————Node:call_expression Text: systemErrorString(status)
|—————————Node:identifier Text: systemErrorString
|—————————Node:argument_list Text: (status)
|——————————Node:( Text: (
|——————————Node:identifier Text: status
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ConnectionError
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:qualified_identifier Text: CanBusError::ConnectionError
|——————————Node:namespace_identifier Text: CanBusError
|——————————Node::: Text: ::
|——————————Node:identifier Text: ConnectionError
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:} Text: }
|—Node:function_definition Text: void VectorCanBackendPrivate::cleanupDriver()
{
    --driverRefCount;

    if (Q_UNLIKELY(driverRefCount < 0)) {
        qCCritical(QT_CANBUS_PLUGINS_VECTORCAN, "Wrong driver reference counter: %d",
                   driverRefCount);
        driverRefCount = 0;
    } else if (driverRefCount == 0) {
        ::xlCloseDriver();
    }
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: VectorCanBackendPrivate::cleanupDriver()
|———Node:qualified_identifier Text: VectorCanBackendPrivate::cleanupDriver
|————Node:namespace_identifier Text: VectorCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: cleanupDriver
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    --driverRefCount;

    if (Q_UNLIKELY(driverRefCount < 0)) {
        qCCritical(QT_CANBUS_PLUGINS_VECTORCAN, "Wrong driver reference counter: %d",
                   driverRefCount);
        driverRefCount = 0;
    } else if (driverRefCount == 0) {
        ::xlCloseDriver();
    }
}
|———Node:{ Text: {
|———Node:expression_statement Text: --driverRefCount;
|————Node:update_expression Text: --driverRefCount
|—————Node:-- Text: --
|—————Node:identifier Text: driverRefCount
|————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(driverRefCount < 0)) {
        qCCritical(QT_CANBUS_PLUGINS_VECTORCAN, "Wrong driver reference counter: %d",
                   driverRefCount);
        driverRefCount = 0;
    } else if (driverRefCount == 0) {
        ::xlCloseDriver();
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(driverRefCount < 0))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(driverRefCount < 0)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (driverRefCount < 0)
|———————Node:( Text: (
|———————Node:binary_expression Text: driverRefCount < 0
|————————Node:identifier Text: driverRefCount
|————————Node:< Text: <
|————————Node:number_literal Text: 0
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        qCCritical(QT_CANBUS_PLUGINS_VECTORCAN, "Wrong driver reference counter: %d",
                   driverRefCount);
        driverRefCount = 0;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: qCCritical(QT_CANBUS_PLUGINS_VECTORCAN, "Wrong driver reference counter: %d",
                   driverRefCount);
|——————Node:call_expression Text: qCCritical(QT_CANBUS_PLUGINS_VECTORCAN, "Wrong driver reference counter: %d",
                   driverRefCount)
|———————Node:identifier Text: qCCritical
|———————Node:argument_list Text: (QT_CANBUS_PLUGINS_VECTORCAN, "Wrong driver reference counter: %d",
                   driverRefCount)
|————————Node:( Text: (
|————————Node:identifier Text: QT_CANBUS_PLUGINS_VECTORCAN
|————————Node:, Text: ,
|————————Node:string_literal Text: "Wrong driver reference counter: %d"
|—————————Node:" Text: "
|—————————Node:string_content Text: Wrong driver reference counter: %d
|—————————Node:" Text: "
|————————Node:, Text: ,
|————————Node:identifier Text: driverRefCount
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: driverRefCount = 0;
|——————Node:assignment_expression Text: driverRefCount = 0
|———————Node:identifier Text: driverRefCount
|———————Node:= Text: =
|———————Node:number_literal Text: 0
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else if (driverRefCount == 0) {
        ::xlCloseDriver();
    }
|—————Node:else Text: else
|—————Node:if_statement Text: if (driverRefCount == 0) {
        ::xlCloseDriver();
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: (driverRefCount == 0)
|———————Node:( Text: (
|———————Node:binary_expression Text: driverRefCount == 0
|————————Node:identifier Text: driverRefCount
|————————Node:== Text: ==
|————————Node:number_literal Text: 0
|———————Node:) Text: )
|——————Node:compound_statement Text: {
        ::xlCloseDriver();
    }
|———————Node:{ Text: {
|———————Node:expression_statement Text: ::xlCloseDriver();
|————————Node:call_expression Text: ::xlCloseDriver()
|—————————Node:qualified_identifier Text: ::xlCloseDriver
|——————————Node::: Text: ::
|——————————Node:identifier Text: xlCloseDriver
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|———Node:} Text: }
|—Node:function_definition Text: bool VectorCanBackendPrivate::setBitRate(quint32 bitrate)
{
    Q_Q(VectorCanBackend);
    if (!usesCanFd && q->state() != QCanBusDevice::UnconnectedState) {
        const XLstatus status = ::xlCanSetChannelBitrate(portHandle, channelMask, bitrate);
        arbBitRate = bitrate;
        if (Q_UNLIKELY(status != XL_SUCCESS)) {
            q->setError(systemErrorString(status),
                        QCanBusDevice::CanBusError::ConfigurationError);
            return false;
        }
    } else if (arbBitRate != bitrate) {
        arbBitRate = bitrate;
    }

    return true;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: VectorCanBackendPrivate::setBitRate(quint32 bitrate)
|———Node:qualified_identifier Text: VectorCanBackendPrivate::setBitRate
|————Node:namespace_identifier Text: VectorCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: setBitRate
|———Node:parameter_list Text: (quint32 bitrate)
|————Node:( Text: (
|————Node:parameter_declaration Text: quint32 bitrate
|—————Node:type_identifier Text: quint32
|—————Node:identifier Text: bitrate
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(VectorCanBackend);
    if (!usesCanFd && q->state() != QCanBusDevice::UnconnectedState) {
        const XLstatus status = ::xlCanSetChannelBitrate(portHandle, channelMask, bitrate);
        arbBitRate = bitrate;
        if (Q_UNLIKELY(status != XL_SUCCESS)) {
            q->setError(systemErrorString(status),
                        QCanBusDevice::CanBusError::ConfigurationError);
            return false;
        }
    } else if (arbBitRate != bitrate) {
        arbBitRate = bitrate;
    }

    return true;
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(VectorCanBackend);
|————Node:call_expression Text: Q_Q(VectorCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (VectorCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: VectorCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (!usesCanFd && q->state() != QCanBusDevice::UnconnectedState) {
        const XLstatus status = ::xlCanSetChannelBitrate(portHandle, channelMask, bitrate);
        arbBitRate = bitrate;
        if (Q_UNLIKELY(status != XL_SUCCESS)) {
            q->setError(systemErrorString(status),
                        QCanBusDevice::CanBusError::ConfigurationError);
            return false;
        }
    } else if (arbBitRate != bitrate) {
        arbBitRate = bitrate;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (!usesCanFd && q->state() != QCanBusDevice::UnconnectedState)
|—————Node:( Text: (
|—————Node:binary_expression Text: !usesCanFd && q->state() != QCanBusDevice::UnconnectedState
|——————Node:unary_expression Text: !usesCanFd
|———————Node:! Text: !
|———————Node:identifier Text: usesCanFd
|——————Node:&& Text: &&
|——————Node:binary_expression Text: q->state() != QCanBusDevice::UnconnectedState
|———————Node:call_expression Text: q->state()
|————————Node:field_expression Text: q->state
|—————————Node:identifier Text: q
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: state
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:!= Text: !=
|———————Node:qualified_identifier Text: QCanBusDevice::UnconnectedState
|————————Node:namespace_identifier Text: QCanBusDevice
|————————Node::: Text: ::
|————————Node:identifier Text: UnconnectedState
|—————Node:) Text: )
|————Node:compound_statement Text: {
        const XLstatus status = ::xlCanSetChannelBitrate(portHandle, channelMask, bitrate);
        arbBitRate = bitrate;
        if (Q_UNLIKELY(status != XL_SUCCESS)) {
            q->setError(systemErrorString(status),
                        QCanBusDevice::CanBusError::ConfigurationError);
            return false;
        }
    }
|—————Node:{ Text: {
|—————Node:declaration Text: const XLstatus status = ::xlCanSetChannelBitrate(portHandle, channelMask, bitrate);
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:type_identifier Text: XLstatus
|——————Node:init_declarator Text: status = ::xlCanSetChannelBitrate(portHandle, channelMask, bitrate)
|———————Node:identifier Text: status
|———————Node:= Text: =
|———————Node:call_expression Text: ::xlCanSetChannelBitrate(portHandle, channelMask, bitrate)
|————————Node:qualified_identifier Text: ::xlCanSetChannelBitrate
|—————————Node::: Text: ::
|—————————Node:identifier Text: xlCanSetChannelBitrate
|————————Node:argument_list Text: (portHandle, channelMask, bitrate)
|—————————Node:( Text: (
|—————————Node:identifier Text: portHandle
|—————————Node:, Text: ,
|—————————Node:identifier Text: channelMask
|—————————Node:, Text: ,
|—————————Node:identifier Text: bitrate
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: arbBitRate = bitrate;
|——————Node:assignment_expression Text: arbBitRate = bitrate
|———————Node:identifier Text: arbBitRate
|———————Node:= Text: =
|———————Node:identifier Text: bitrate
|——————Node:; Text: ;
|—————Node:if_statement Text: if (Q_UNLIKELY(status != XL_SUCCESS)) {
            q->setError(systemErrorString(status),
                        QCanBusDevice::CanBusError::ConfigurationError);
            return false;
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (Q_UNLIKELY(status != XL_SUCCESS))
|———————Node:( Text: (
|———————Node:call_expression Text: Q_UNLIKELY(status != XL_SUCCESS)
|————————Node:identifier Text: Q_UNLIKELY
|————————Node:argument_list Text: (status != XL_SUCCESS)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: status != XL_SUCCESS
|——————————Node:identifier Text: status
|——————————Node:!= Text: !=
|——————————Node:identifier Text: XL_SUCCESS
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            q->setError(systemErrorString(status),
                        QCanBusDevice::CanBusError::ConfigurationError);
            return false;
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: q->setError(systemErrorString(status),
                        QCanBusDevice::CanBusError::ConfigurationError);
|————————Node:call_expression Text: q->setError(systemErrorString(status),
                        QCanBusDevice::CanBusError::ConfigurationError)
|—————————Node:field_expression Text: q->setError
|——————————Node:identifier Text: q
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: setError
|—————————Node:argument_list Text: (systemErrorString(status),
                        QCanBusDevice::CanBusError::ConfigurationError)
|——————————Node:( Text: (
|——————————Node:call_expression Text: systemErrorString(status)
|———————————Node:identifier Text: systemErrorString
|———————————Node:argument_list Text: (status)
|————————————Node:( Text: (
|————————————Node:identifier Text: status
|————————————Node:) Text: )
|——————————Node:, Text: ,
|——————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ConfigurationError
|———————————Node:namespace_identifier Text: QCanBusDevice
|———————————Node::: Text: ::
|———————————Node:qualified_identifier Text: CanBusError::ConfigurationError
|————————————Node:namespace_identifier Text: CanBusError
|————————————Node::: Text: ::
|————————————Node:identifier Text: ConfigurationError
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:return_statement Text: return false;
|————————Node:return Text: return
|————————Node:false Text: false
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|————Node:else_clause Text: else if (arbBitRate != bitrate) {
        arbBitRate = bitrate;
    }
|—————Node:else Text: else
|—————Node:if_statement Text: if (arbBitRate != bitrate) {
        arbBitRate = bitrate;
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: (arbBitRate != bitrate)
|———————Node:( Text: (
|———————Node:binary_expression Text: arbBitRate != bitrate
|————————Node:identifier Text: arbBitRate
|————————Node:!= Text: !=
|————————Node:identifier Text: bitrate
|———————Node:) Text: )
|——————Node:compound_statement Text: {
        arbBitRate = bitrate;
    }
|———————Node:{ Text: {
|———————Node:expression_statement Text: arbBitRate = bitrate;
|————————Node:assignment_expression Text: arbBitRate = bitrate
|—————————Node:identifier Text: arbBitRate
|—————————Node:= Text: =
|—————————Node:identifier Text: bitrate
|————————Node:; Text: ;
|———————Node:} Text: }
|———Node:return_statement Text: return true;
|————Node:return Text: return
|————Node:true Text: true
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: bool VectorCanBackendPrivate::setDataBitRate(quint32 bitrate)
{
    if (!usesCanFd) {
        qCWarning(QT_CANBUS_PLUGINS_VECTORCAN,
                  "Cannot set data bit rate in CAN 2.0 mode, this is only available with CAN FD");
        return false;
    }
    if (dataBitRate != bitrate) {
        if (bitrate >= 25000) { // Minimum
            dataBitRate = bitrate;
        } else {
            qCWarning(QT_CANBUS_PLUGINS_VECTORCAN,
                      "Cannot set data bit rate to less than 25000 which is the minimum");
            return false;
        }
    }
    return true;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: VectorCanBackendPrivate::setDataBitRate(quint32 bitrate)
|———Node:qualified_identifier Text: VectorCanBackendPrivate::setDataBitRate
|————Node:namespace_identifier Text: VectorCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: setDataBitRate
|———Node:parameter_list Text: (quint32 bitrate)
|————Node:( Text: (
|————Node:parameter_declaration Text: quint32 bitrate
|—————Node:type_identifier Text: quint32
|—————Node:identifier Text: bitrate
|————Node:) Text: )
|——Node:compound_statement Text: {
    if (!usesCanFd) {
        qCWarning(QT_CANBUS_PLUGINS_VECTORCAN,
                  "Cannot set data bit rate in CAN 2.0 mode, this is only available with CAN FD");
        return false;
    }
    if (dataBitRate != bitrate) {
        if (bitrate >= 25000) { // Minimum
            dataBitRate = bitrate;
        } else {
            qCWarning(QT_CANBUS_PLUGINS_VECTORCAN,
                      "Cannot set data bit rate to less than 25000 which is the minimum");
            return false;
        }
    }
    return true;
}
|———Node:{ Text: {
|———Node:if_statement Text: if (!usesCanFd) {
        qCWarning(QT_CANBUS_PLUGINS_VECTORCAN,
                  "Cannot set data bit rate in CAN 2.0 mode, this is only available with CAN FD");
        return false;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (!usesCanFd)
|—————Node:( Text: (
|—————Node:unary_expression Text: !usesCanFd
|——————Node:! Text: !
|——————Node:identifier Text: usesCanFd
|—————Node:) Text: )
|————Node:compound_statement Text: {
        qCWarning(QT_CANBUS_PLUGINS_VECTORCAN,
                  "Cannot set data bit rate in CAN 2.0 mode, this is only available with CAN FD");
        return false;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: qCWarning(QT_CANBUS_PLUGINS_VECTORCAN,
                  "Cannot set data bit rate in CAN 2.0 mode, this is only available with CAN FD");
|——————Node:call_expression Text: qCWarning(QT_CANBUS_PLUGINS_VECTORCAN,
                  "Cannot set data bit rate in CAN 2.0 mode, this is only available with CAN FD")
|———————Node:identifier Text: qCWarning
|———————Node:argument_list Text: (QT_CANBUS_PLUGINS_VECTORCAN,
                  "Cannot set data bit rate in CAN 2.0 mode, this is only available with CAN FD")
|————————Node:( Text: (
|————————Node:identifier Text: QT_CANBUS_PLUGINS_VECTORCAN
|————————Node:, Text: ,
|————————Node:string_literal Text: "Cannot set data bit rate in CAN 2.0 mode, this is only available with CAN FD"
|—————————Node:" Text: "
|—————————Node:string_content Text: Cannot set data bit rate in CAN 2.0 mode, this is only available with CAN FD
|—————————Node:" Text: "
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return false;
|——————Node:return Text: return
|——————Node:false Text: false
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:if_statement Text: if (dataBitRate != bitrate) {
        if (bitrate >= 25000) { // Minimum
            dataBitRate = bitrate;
        } else {
            qCWarning(QT_CANBUS_PLUGINS_VECTORCAN,
                      "Cannot set data bit rate to less than 25000 which is the minimum");
            return false;
        }
    }
|————Node:if Text: if
|————Node:condition_clause Text: (dataBitRate != bitrate)
|—————Node:( Text: (
|—————Node:binary_expression Text: dataBitRate != bitrate
|——————Node:identifier Text: dataBitRate
|——————Node:!= Text: !=
|——————Node:identifier Text: bitrate
|—————Node:) Text: )
|————Node:compound_statement Text: {
        if (bitrate >= 25000) { // Minimum
            dataBitRate = bitrate;
        } else {
            qCWarning(QT_CANBUS_PLUGINS_VECTORCAN,
                      "Cannot set data bit rate to less than 25000 which is the minimum");
            return false;
        }
    }
|—————Node:{ Text: {
|—————Node:if_statement Text: if (bitrate >= 25000) { // Minimum
            dataBitRate = bitrate;
        } else {
            qCWarning(QT_CANBUS_PLUGINS_VECTORCAN,
                      "Cannot set data bit rate to less than 25000 which is the minimum");
            return false;
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (bitrate >= 25000)
|———————Node:( Text: (
|———————Node:binary_expression Text: bitrate >= 25000
|————————Node:identifier Text: bitrate
|————————Node:>= Text: >=
|————————Node:number_literal Text: 25000
|———————Node:) Text: )
|——————Node:compound_statement Text: { // Minimum
            dataBitRate = bitrate;
        }
|———————Node:{ Text: {
|———————Node:comment
|———————Node:expression_statement Text: dataBitRate = bitrate;
|————————Node:assignment_expression Text: dataBitRate = bitrate
|—————————Node:identifier Text: dataBitRate
|—————————Node:= Text: =
|—————————Node:identifier Text: bitrate
|————————Node:; Text: ;
|———————Node:} Text: }
|——————Node:else_clause Text: else {
            qCWarning(QT_CANBUS_PLUGINS_VECTORCAN,
                      "Cannot set data bit rate to less than 25000 which is the minimum");
            return false;
        }
|———————Node:else Text: else
|———————Node:compound_statement Text: {
            qCWarning(QT_CANBUS_PLUGINS_VECTORCAN,
                      "Cannot set data bit rate to less than 25000 which is the minimum");
            return false;
        }
|————————Node:{ Text: {
|————————Node:expression_statement Text: qCWarning(QT_CANBUS_PLUGINS_VECTORCAN,
                      "Cannot set data bit rate to less than 25000 which is the minimum");
|—————————Node:call_expression Text: qCWarning(QT_CANBUS_PLUGINS_VECTORCAN,
                      "Cannot set data bit rate to less than 25000 which is the minimum")
|——————————Node:identifier Text: qCWarning
|——————————Node:argument_list Text: (QT_CANBUS_PLUGINS_VECTORCAN,
                      "Cannot set data bit rate to less than 25000 which is the minimum")
|———————————Node:( Text: (
|———————————Node:identifier Text: QT_CANBUS_PLUGINS_VECTORCAN
|———————————Node:, Text: ,
|———————————Node:string_literal Text: "Cannot set data bit rate to less than 25000 which is the minimum"
|————————————Node:" Text: "
|————————————Node:string_content Text: Cannot set data bit rate to less than 25000 which is the minimum
|————————————Node:" Text: "
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:return_statement Text: return false;
|—————————Node:return Text: return
|—————————Node:false Text: false
|—————————Node:; Text: ;
|————————Node:} Text: }
|—————Node:} Text: }
|———Node:return_statement Text: return true;
|————Node:return Text: return
|————Node:true Text: true
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: VectorCanBackend::VectorCanBackend(const QString &name, QObject *parent)
    : QCanBusDevice(parent)
    , d_ptr(new VectorCanBackendPrivate(this))
{
    Q_D(VectorCanBackend);

    d->setupChannel(name);
    d->setupDefaultConfigurations();
}
|——Node:function_declarator Text: VectorCanBackend::VectorCanBackend(const QString &name, QObject *parent)
|———Node:qualified_identifier Text: VectorCanBackend::VectorCanBackend
|————Node:namespace_identifier Text: VectorCanBackend
|————Node::: Text: ::
|————Node:identifier Text: VectorCanBackend
|———Node:parameter_list Text: (const QString &name, QObject *parent)
|————Node:( Text: (
|————Node:parameter_declaration Text: const QString &name
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: QString
|—————Node:reference_declarator Text: &name
|——————Node:& Text: &
|——————Node:identifier Text: name
|————Node:, Text: ,
|————Node:parameter_declaration Text: QObject *parent
|—————Node:type_identifier Text: QObject
|—————Node:pointer_declarator Text: *parent
|——————Node:* Text: *
|——————Node:identifier Text: parent
|————Node:) Text: )
|——Node:field_initializer_list Text: : QCanBusDevice(parent)
    , d_ptr(new VectorCanBackendPrivate(this))
|———Node:: Text: :
|———Node:field_initializer Text: QCanBusDevice(parent)
|————Node:field_identifier Text: QCanBusDevice
|————Node:argument_list Text: (parent)
|—————Node:( Text: (
|—————Node:identifier Text: parent
|—————Node:) Text: )
|———Node:, Text: ,
|———Node:field_initializer Text: d_ptr(new VectorCanBackendPrivate(this))
|————Node:field_identifier Text: d_ptr
|————Node:argument_list Text: (new VectorCanBackendPrivate(this))
|—————Node:( Text: (
|—————Node:new_expression Text: new VectorCanBackendPrivate(this)
|——————Node:new Text: new
|——————Node:type_identifier Text: VectorCanBackendPrivate
|——————Node:argument_list Text: (this)
|———————Node:( Text: (
|———————Node:this Text: this
|———————Node:) Text: )
|—————Node:) Text: )
|——Node:compound_statement Text: {
    Q_D(VectorCanBackend);

    d->setupChannel(name);
    d->setupDefaultConfigurations();
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_D(VectorCanBackend);
|————Node:call_expression Text: Q_D(VectorCanBackend)
|—————Node:identifier Text: Q_D
|—————Node:argument_list Text: (VectorCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: VectorCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: d->setupChannel(name);
|————Node:call_expression Text: d->setupChannel(name)
|—————Node:field_expression Text: d->setupChannel
|——————Node:identifier Text: d
|——————Node:-> Text: ->
|——————Node:field_identifier Text: setupChannel
|—————Node:argument_list Text: (name)
|——————Node:( Text: (
|——————Node:identifier Text: name
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: d->setupDefaultConfigurations();
|————Node:call_expression Text: d->setupDefaultConfigurations()
|—————Node:field_expression Text: d->setupDefaultConfigurations
|——————Node:identifier Text: d
|——————Node:-> Text: ->
|——————Node:field_identifier Text: setupDefaultConfigurations
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: VectorCanBackend::~VectorCanBackend()
{
    if (state() == ConnectedState)
        close();

    delete d_ptr;
}
|——Node:function_declarator Text: VectorCanBackend::~VectorCanBackend()
|———Node:qualified_identifier Text: VectorCanBackend::~VectorCanBackend
|————Node:namespace_identifier Text: VectorCanBackend
|————Node::: Text: ::
|————Node:destructor_name Text: ~VectorCanBackend
|—————Node:~ Text: ~
|—————Node:identifier Text: VectorCanBackend
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    if (state() == ConnectedState)
        close();

    delete d_ptr;
}
|———Node:{ Text: {
|———Node:if_statement Text: if (state() == ConnectedState)
        close();
|————Node:if Text: if
|————Node:condition_clause Text: (state() == ConnectedState)
|—————Node:( Text: (
|—————Node:binary_expression Text: state() == ConnectedState
|——————Node:call_expression Text: state()
|———————Node:identifier Text: state
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:== Text: ==
|——————Node:identifier Text: ConnectedState
|—————Node:) Text: )
|————Node:expression_statement Text: close();
|—————Node:call_expression Text: close()
|——————Node:identifier Text: close
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|———Node:expression_statement Text: delete d_ptr;
|————Node:delete_expression Text: delete d_ptr
|—————Node:delete Text: delete
|—————Node:identifier Text: d_ptr
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: bool VectorCanBackend::open()
{
    Q_D(VectorCanBackend);

    if (!d->open()) {
        close(); // sets UnconnectedState
        return false;
    }

    const auto keys = configurationKeys();
    for (ConfigurationKey key : keys) {
        const QVariant param = configurationParameter(key);
        const bool success = d->setConfigurationParameter(key, param);
        if (!success) {
            qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Cannot apply parameter: %d with value: %ls.",
                      key, qUtf16Printable(param.toString()));
        }
    }

    setState(QCanBusDevice::ConnectedState);
    return true;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: VectorCanBackend::open()
|———Node:qualified_identifier Text: VectorCanBackend::open
|————Node:namespace_identifier Text: VectorCanBackend
|————Node::: Text: ::
|————Node:identifier Text: open
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_D(VectorCanBackend);

    if (!d->open()) {
        close(); // sets UnconnectedState
        return false;
    }

    const auto keys = configurationKeys();
    for (ConfigurationKey key : keys) {
        const QVariant param = configurationParameter(key);
        const bool success = d->setConfigurationParameter(key, param);
        if (!success) {
            qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Cannot apply parameter: %d with value: %ls.",
                      key, qUtf16Printable(param.toString()));
        }
    }

    setState(QCanBusDevice::ConnectedState);
    return true;
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_D(VectorCanBackend);
|————Node:call_expression Text: Q_D(VectorCanBackend)
|—————Node:identifier Text: Q_D
|—————Node:argument_list Text: (VectorCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: VectorCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (!d->open()) {
        close(); // sets UnconnectedState
        return false;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (!d->open())
|—————Node:( Text: (
|—————Node:unary_expression Text: !d->open()
|——————Node:! Text: !
|——————Node:call_expression Text: d->open()
|———————Node:field_expression Text: d->open
|————————Node:identifier Text: d
|————————Node:-> Text: ->
|————————Node:field_identifier Text: open
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        close(); // sets UnconnectedState
        return false;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: close();
|——————Node:call_expression Text: close()
|———————Node:identifier Text: close
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment
|—————Node:return_statement Text: return false;
|——————Node:return Text: return
|——————Node:false Text: false
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:declaration Text: const auto keys = configurationKeys();
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:placeholder_type_specifier Text: auto
|—————Node:auto Text: auto
|————Node:init_declarator Text: keys = configurationKeys()
|—————Node:identifier Text: keys
|—————Node:= Text: =
|—————Node:call_expression Text: configurationKeys()
|——————Node:identifier Text: configurationKeys
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:for_range_loop Text: for (ConfigurationKey key : keys) {
        const QVariant param = configurationParameter(key);
        const bool success = d->setConfigurationParameter(key, param);
        if (!success) {
            qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Cannot apply parameter: %d with value: %ls.",
                      key, qUtf16Printable(param.toString()));
        }
    }
|————Node:for Text: for
|————Node:( Text: (
|————Node:type_identifier Text: ConfigurationKey
|————Node:identifier Text: key
|————Node:: Text: :
|————Node:identifier Text: keys
|————Node:) Text: )
|————Node:compound_statement Text: {
        const QVariant param = configurationParameter(key);
        const bool success = d->setConfigurationParameter(key, param);
        if (!success) {
            qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Cannot apply parameter: %d with value: %ls.",
                      key, qUtf16Printable(param.toString()));
        }
    }
|—————Node:{ Text: {
|—————Node:declaration Text: const QVariant param = configurationParameter(key);
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:type_identifier Text: QVariant
|——————Node:init_declarator Text: param = configurationParameter(key)
|———————Node:identifier Text: param
|———————Node:= Text: =
|———————Node:call_expression Text: configurationParameter(key)
|————————Node:identifier Text: configurationParameter
|————————Node:argument_list Text: (key)
|—————————Node:( Text: (
|—————————Node:identifier Text: key
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:declaration Text: const bool success = d->setConfigurationParameter(key, param);
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:primitive_type Text: bool
|——————Node:init_declarator Text: success = d->setConfigurationParameter(key, param)
|———————Node:identifier Text: success
|———————Node:= Text: =
|———————Node:call_expression Text: d->setConfigurationParameter(key, param)
|————————Node:field_expression Text: d->setConfigurationParameter
|—————————Node:identifier Text: d
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: setConfigurationParameter
|————————Node:argument_list Text: (key, param)
|—————————Node:( Text: (
|—————————Node:identifier Text: key
|—————————Node:, Text: ,
|—————————Node:identifier Text: param
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (!success) {
            qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Cannot apply parameter: %d with value: %ls.",
                      key, qUtf16Printable(param.toString()));
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (!success)
|———————Node:( Text: (
|———————Node:unary_expression Text: !success
|————————Node:! Text: !
|————————Node:identifier Text: success
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Cannot apply parameter: %d with value: %ls.",
                      key, qUtf16Printable(param.toString()));
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Cannot apply parameter: %d with value: %ls.",
                      key, qUtf16Printable(param.toString()));
|————————Node:call_expression Text: qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Cannot apply parameter: %d with value: %ls.",
                      key, qUtf16Printable(param.toString()))
|—————————Node:identifier Text: qCWarning
|—————————Node:argument_list Text: (QT_CANBUS_PLUGINS_VECTORCAN, "Cannot apply parameter: %d with value: %ls.",
                      key, qUtf16Printable(param.toString()))
|——————————Node:( Text: (
|——————————Node:identifier Text: QT_CANBUS_PLUGINS_VECTORCAN
|——————————Node:, Text: ,
|——————————Node:string_literal Text: "Cannot apply parameter: %d with value: %ls."
|———————————Node:" Text: "
|———————————Node:string_content Text: Cannot apply parameter: %d with value: %ls.
|———————————Node:" Text: "
|——————————Node:, Text: ,
|——————————Node:identifier Text: key
|——————————Node:, Text: ,
|——————————Node:call_expression Text: qUtf16Printable(param.toString())
|———————————Node:identifier Text: qUtf16Printable
|———————————Node:argument_list Text: (param.toString())
|————————————Node:( Text: (
|————————————Node:call_expression Text: param.toString()
|—————————————Node:field_expression Text: param.toString
|——————————————Node:identifier Text: param
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: toString
|—————————————Node:argument_list Text: ()
|——————————————Node:( Text: (
|——————————————Node:) Text: )
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:expression_statement Text: setState(QCanBusDevice::ConnectedState);
|————Node:call_expression Text: setState(QCanBusDevice::ConnectedState)
|—————Node:identifier Text: setState
|—————Node:argument_list Text: (QCanBusDevice::ConnectedState)
|——————Node:( Text: (
|——————Node:qualified_identifier Text: QCanBusDevice::ConnectedState
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: ConnectedState
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return true;
|————Node:return Text: return
|————Node:true Text: true
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void VectorCanBackend::close()
{
    Q_D(VectorCanBackend);

    d->close();

    setState(QCanBusDevice::UnconnectedState);
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: VectorCanBackend::close()
|———Node:qualified_identifier Text: VectorCanBackend::close
|————Node:namespace_identifier Text: VectorCanBackend
|————Node::: Text: ::
|————Node:identifier Text: close
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_D(VectorCanBackend);

    d->close();

    setState(QCanBusDevice::UnconnectedState);
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_D(VectorCanBackend);
|————Node:call_expression Text: Q_D(VectorCanBackend)
|—————Node:identifier Text: Q_D
|—————Node:argument_list Text: (VectorCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: VectorCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: d->close();
|————Node:call_expression Text: d->close()
|—————Node:field_expression Text: d->close
|——————Node:identifier Text: d
|——————Node:-> Text: ->
|——————Node:field_identifier Text: close
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: setState(QCanBusDevice::UnconnectedState);
|————Node:call_expression Text: setState(QCanBusDevice::UnconnectedState)
|—————Node:identifier Text: setState
|—————Node:argument_list Text: (QCanBusDevice::UnconnectedState)
|——————Node:( Text: (
|——————Node:qualified_identifier Text: QCanBusDevice::UnconnectedState
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: UnconnectedState
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void VectorCanBackend::setConfigurationParameter(ConfigurationKey key, const QVariant &value)
{
    Q_D(VectorCanBackend);

    if (d->setConfigurationParameter(key, value))
        QCanBusDevice::setConfigurationParameter(key, value);
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: VectorCanBackend::setConfigurationParameter(ConfigurationKey key, const QVariant &value)
|———Node:qualified_identifier Text: VectorCanBackend::setConfigurationParameter
|————Node:namespace_identifier Text: VectorCanBackend
|————Node::: Text: ::
|————Node:identifier Text: setConfigurationParameter
|———Node:parameter_list Text: (ConfigurationKey key, const QVariant &value)
|————Node:( Text: (
|————Node:parameter_declaration Text: ConfigurationKey key
|—————Node:type_identifier Text: ConfigurationKey
|—————Node:identifier Text: key
|————Node:, Text: ,
|————Node:parameter_declaration Text: const QVariant &value
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: QVariant
|—————Node:reference_declarator Text: &value
|——————Node:& Text: &
|——————Node:identifier Text: value
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_D(VectorCanBackend);

    if (d->setConfigurationParameter(key, value))
        QCanBusDevice::setConfigurationParameter(key, value);
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_D(VectorCanBackend);
|————Node:call_expression Text: Q_D(VectorCanBackend)
|—————Node:identifier Text: Q_D
|—————Node:argument_list Text: (VectorCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: VectorCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (d->setConfigurationParameter(key, value))
        QCanBusDevice::setConfigurationParameter(key, value);
|————Node:if Text: if
|————Node:condition_clause Text: (d->setConfigurationParameter(key, value))
|—————Node:( Text: (
|—————Node:call_expression Text: d->setConfigurationParameter(key, value)
|——————Node:field_expression Text: d->setConfigurationParameter
|———————Node:identifier Text: d
|———————Node:-> Text: ->
|———————Node:field_identifier Text: setConfigurationParameter
|——————Node:argument_list Text: (key, value)
|———————Node:( Text: (
|———————Node:identifier Text: key
|———————Node:, Text: ,
|———————Node:identifier Text: value
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:expression_statement Text: QCanBusDevice::setConfigurationParameter(key, value);
|—————Node:call_expression Text: QCanBusDevice::setConfigurationParameter(key, value)
|——————Node:qualified_identifier Text: QCanBusDevice::setConfigurationParameter
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: setConfigurationParameter
|——————Node:argument_list Text: (key, value)
|———————Node:( Text: (
|———————Node:identifier Text: key
|———————Node:, Text: ,
|———————Node:identifier Text: value
|———————Node:) Text: )
|—————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: bool VectorCanBackend::writeFrame(const QCanBusFrame &newData)
{
    Q_D(VectorCanBackend);

    if (state() != QCanBusDevice::ConnectedState)
        return false;

    if (Q_UNLIKELY(!newData.isValid())) {
        setError(tr("Cannot write invalid QCanBusFrame"),
                 QCanBusDevice::WriteError);
        return false;
    }

    if (Q_UNLIKELY(newData.frameType() != QCanBusFrame::DataFrame
            && newData.frameType() != QCanBusFrame::RemoteRequestFrame
            && newData.frameType() != QCanBusFrame::ErrorFrame)) {
        setError(tr("Unable to write a frame with unacceptable type"),
                 QCanBusDevice::WriteError);
        return false;
    }

    if (!d->usesCanFd && newData.hasFlexibleDataRateFormat()) {
        setError(tr("Unable to write a flexible data rate format frame without CAN FD enabled."),
                 QCanBusDevice::WriteError);
        return false;
    }

    enqueueOutgoingFrame(newData);

    if (!d->writeNotifier->isActive())
        d->writeNotifier->start();

    return true;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: VectorCanBackend::writeFrame(const QCanBusFrame &newData)
|———Node:qualified_identifier Text: VectorCanBackend::writeFrame
|————Node:namespace_identifier Text: VectorCanBackend
|————Node::: Text: ::
|————Node:identifier Text: writeFrame
|———Node:parameter_list Text: (const QCanBusFrame &newData)
|————Node:( Text: (
|————Node:parameter_declaration Text: const QCanBusFrame &newData
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: QCanBusFrame
|—————Node:reference_declarator Text: &newData
|——————Node:& Text: &
|——————Node:identifier Text: newData
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_D(VectorCanBackend);

    if (state() != QCanBusDevice::ConnectedState)
        return false;

    if (Q_UNLIKELY(!newData.isValid())) {
        setError(tr("Cannot write invalid QCanBusFrame"),
                 QCanBusDevice::WriteError);
        return false;
    }

    if (Q_UNLIKELY(newData.frameType() != QCanBusFrame::DataFrame
            && newData.frameType() != QCanBusFrame::RemoteRequestFrame
            && newData.frameType() != QCanBusFrame::ErrorFrame)) {
        setError(tr("Unable to write a frame with unacceptable type"),
                 QCanBusDevice::WriteError);
        return false;
    }

    if (!d->usesCanFd && newData.hasFlexibleDataRateFormat()) {
        setError(tr("Unable to write a flexible data rate format frame without CAN FD enabled."),
                 QCanBusDevice::WriteError);
        return false;
    }

    enqueueOutgoingFrame(newData);

    if (!d->writeNotifier->isActive())
        d->writeNotifier->start();

    return true;
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_D(VectorCanBackend);
|————Node:call_expression Text: Q_D(VectorCanBackend)
|—————Node:identifier Text: Q_D
|—————Node:argument_list Text: (VectorCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: VectorCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (state() != QCanBusDevice::ConnectedState)
        return false;
|————Node:if Text: if
|————Node:condition_clause Text: (state() != QCanBusDevice::ConnectedState)
|—————Node:( Text: (
|—————Node:binary_expression Text: state() != QCanBusDevice::ConnectedState
|——————Node:call_expression Text: state()
|———————Node:identifier Text: state
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:!= Text: !=
|——————Node:qualified_identifier Text: QCanBusDevice::ConnectedState
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: ConnectedState
|—————Node:) Text: )
|————Node:return_statement Text: return false;
|—————Node:return Text: return
|—————Node:false Text: false
|—————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(!newData.isValid())) {
        setError(tr("Cannot write invalid QCanBusFrame"),
                 QCanBusDevice::WriteError);
        return false;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(!newData.isValid()))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(!newData.isValid())
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (!newData.isValid())
|———————Node:( Text: (
|———————Node:unary_expression Text: !newData.isValid()
|————————Node:! Text: !
|————————Node:call_expression Text: newData.isValid()
|—————————Node:field_expression Text: newData.isValid
|——————————Node:identifier Text: newData
|——————————Node:. Text: .
|——————————Node:field_identifier Text: isValid
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        setError(tr("Cannot write invalid QCanBusFrame"),
                 QCanBusDevice::WriteError);
        return false;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: setError(tr("Cannot write invalid QCanBusFrame"),
                 QCanBusDevice::WriteError);
|——————Node:call_expression Text: setError(tr("Cannot write invalid QCanBusFrame"),
                 QCanBusDevice::WriteError)
|———————Node:identifier Text: setError
|———————Node:argument_list Text: (tr("Cannot write invalid QCanBusFrame"),
                 QCanBusDevice::WriteError)
|————————Node:( Text: (
|————————Node:call_expression Text: tr("Cannot write invalid QCanBusFrame")
|—————————Node:identifier Text: tr
|—————————Node:argument_list Text: ("Cannot write invalid QCanBusFrame")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "Cannot write invalid QCanBusFrame"
|———————————Node:" Text: "
|———————————Node:string_content Text: Cannot write invalid QCanBusFrame
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:qualified_identifier Text: QCanBusDevice::WriteError
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:identifier Text: WriteError
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return false;
|——————Node:return Text: return
|——————Node:false Text: false
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:if_statement Text: if (Q_UNLIKELY(newData.frameType() != QCanBusFrame::DataFrame
            && newData.frameType() != QCanBusFrame::RemoteRequestFrame
            && newData.frameType() != QCanBusFrame::ErrorFrame)) {
        setError(tr("Unable to write a frame with unacceptable type"),
                 QCanBusDevice::WriteError);
        return false;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(newData.frameType() != QCanBusFrame::DataFrame
            && newData.frameType() != QCanBusFrame::RemoteRequestFrame
            && newData.frameType() != QCanBusFrame::ErrorFrame))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(newData.frameType() != QCanBusFrame::DataFrame
            && newData.frameType() != QCanBusFrame::RemoteRequestFrame
            && newData.frameType() != QCanBusFrame::ErrorFrame)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (newData.frameType() != QCanBusFrame::DataFrame
            && newData.frameType() != QCanBusFrame::RemoteRequestFrame
            && newData.frameType() != QCanBusFrame::ErrorFrame)
|———————Node:( Text: (
|———————Node:binary_expression Text: newData.frameType() != QCanBusFrame::DataFrame
            && newData.frameType() != QCanBusFrame::RemoteRequestFrame
            && newData.frameType() != QCanBusFrame::ErrorFrame
|————————Node:binary_expression Text: newData.frameType() != QCanBusFrame::DataFrame
            && newData.frameType() != QCanBusFrame::RemoteRequestFrame
|—————————Node:binary_expression Text: newData.frameType() != QCanBusFrame::DataFrame
|——————————Node:call_expression Text: newData.frameType()
|———————————Node:field_expression Text: newData.frameType
|————————————Node:identifier Text: newData
|————————————Node:. Text: .
|————————————Node:field_identifier Text: frameType
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:!= Text: !=
|——————————Node:qualified_identifier Text: QCanBusFrame::DataFrame
|———————————Node:namespace_identifier Text: QCanBusFrame
|———————————Node::: Text: ::
|———————————Node:identifier Text: DataFrame
|—————————Node:&& Text: &&
|—————————Node:binary_expression Text: newData.frameType() != QCanBusFrame::RemoteRequestFrame
|——————————Node:call_expression Text: newData.frameType()
|———————————Node:field_expression Text: newData.frameType
|————————————Node:identifier Text: newData
|————————————Node:. Text: .
|————————————Node:field_identifier Text: frameType
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:!= Text: !=
|——————————Node:qualified_identifier Text: QCanBusFrame::RemoteRequestFrame
|———————————Node:namespace_identifier Text: QCanBusFrame
|———————————Node::: Text: ::
|———————————Node:identifier Text: RemoteRequestFrame
|————————Node:&& Text: &&
|————————Node:binary_expression Text: newData.frameType() != QCanBusFrame::ErrorFrame
|—————————Node:call_expression Text: newData.frameType()
|——————————Node:field_expression Text: newData.frameType
|———————————Node:identifier Text: newData
|———————————Node:. Text: .
|———————————Node:field_identifier Text: frameType
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:!= Text: !=
|—————————Node:qualified_identifier Text: QCanBusFrame::ErrorFrame
|——————————Node:namespace_identifier Text: QCanBusFrame
|——————————Node::: Text: ::
|——————————Node:identifier Text: ErrorFrame
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        setError(tr("Unable to write a frame with unacceptable type"),
                 QCanBusDevice::WriteError);
        return false;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: setError(tr("Unable to write a frame with unacceptable type"),
                 QCanBusDevice::WriteError);
|——————Node:call_expression Text: setError(tr("Unable to write a frame with unacceptable type"),
                 QCanBusDevice::WriteError)
|———————Node:identifier Text: setError
|———————Node:argument_list Text: (tr("Unable to write a frame with unacceptable type"),
                 QCanBusDevice::WriteError)
|————————Node:( Text: (
|————————Node:call_expression Text: tr("Unable to write a frame with unacceptable type")
|—————————Node:identifier Text: tr
|—————————Node:argument_list Text: ("Unable to write a frame with unacceptable type")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "Unable to write a frame with unacceptable type"
|———————————Node:" Text: "
|———————————Node:string_content Text: Unable to write a frame with unacceptable type
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:qualified_identifier Text: QCanBusDevice::WriteError
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:identifier Text: WriteError
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return false;
|——————Node:return Text: return
|——————Node:false Text: false
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:if_statement Text: if (!d->usesCanFd && newData.hasFlexibleDataRateFormat()) {
        setError(tr("Unable to write a flexible data rate format frame without CAN FD enabled."),
                 QCanBusDevice::WriteError);
        return false;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (!d->usesCanFd && newData.hasFlexibleDataRateFormat())
|—————Node:( Text: (
|—————Node:binary_expression Text: !d->usesCanFd && newData.hasFlexibleDataRateFormat()
|——————Node:unary_expression Text: !d->usesCanFd
|———————Node:! Text: !
|———————Node:field_expression Text: d->usesCanFd
|————————Node:identifier Text: d
|————————Node:-> Text: ->
|————————Node:field_identifier Text: usesCanFd
|——————Node:&& Text: &&
|——————Node:call_expression Text: newData.hasFlexibleDataRateFormat()
|———————Node:field_expression Text: newData.hasFlexibleDataRateFormat
|————————Node:identifier Text: newData
|————————Node:. Text: .
|————————Node:field_identifier Text: hasFlexibleDataRateFormat
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        setError(tr("Unable to write a flexible data rate format frame without CAN FD enabled."),
                 QCanBusDevice::WriteError);
        return false;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: setError(tr("Unable to write a flexible data rate format frame without CAN FD enabled."),
                 QCanBusDevice::WriteError);
|——————Node:call_expression Text: setError(tr("Unable to write a flexible data rate format frame without CAN FD enabled."),
                 QCanBusDevice::WriteError)
|———————Node:identifier Text: setError
|———————Node:argument_list Text: (tr("Unable to write a flexible data rate format frame without CAN FD enabled."),
                 QCanBusDevice::WriteError)
|————————Node:( Text: (
|————————Node:call_expression Text: tr("Unable to write a flexible data rate format frame without CAN FD enabled.")
|—————————Node:identifier Text: tr
|—————————Node:argument_list Text: ("Unable to write a flexible data rate format frame without CAN FD enabled.")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "Unable to write a flexible data rate format frame without CAN FD enabled."
|———————————Node:" Text: "
|———————————Node:string_content Text: Unable to write a flexible data rate format frame without CAN FD enabled.
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:qualified_identifier Text: QCanBusDevice::WriteError
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:identifier Text: WriteError
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return false;
|——————Node:return Text: return
|——————Node:false Text: false
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: enqueueOutgoingFrame(newData);
|————Node:call_expression Text: enqueueOutgoingFrame(newData)
|—————Node:identifier Text: enqueueOutgoingFrame
|—————Node:argument_list Text: (newData)
|——————Node:( Text: (
|——————Node:identifier Text: newData
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (!d->writeNotifier->isActive())
        d->writeNotifier->start();
|————Node:if Text: if
|————Node:condition_clause Text: (!d->writeNotifier->isActive())
|—————Node:( Text: (
|—————Node:unary_expression Text: !d->writeNotifier->isActive()
|——————Node:! Text: !
|——————Node:call_expression Text: d->writeNotifier->isActive()
|———————Node:field_expression Text: d->writeNotifier->isActive
|————————Node:field_expression Text: d->writeNotifier
|—————————Node:identifier Text: d
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: writeNotifier
|————————Node:-> Text: ->
|————————Node:field_identifier Text: isActive
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|—————Node:) Text: )
|————Node:expression_statement Text: d->writeNotifier->start();
|—————Node:call_expression Text: d->writeNotifier->start()
|——————Node:field_expression Text: d->writeNotifier->start
|———————Node:field_expression Text: d->writeNotifier
|————————Node:identifier Text: d
|————————Node:-> Text: ->
|————————Node:field_identifier Text: writeNotifier
|———————Node:-> Text: ->
|———————Node:field_identifier Text: start
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|———Node:return_statement Text: return true;
|————Node:return Text: return
|————Node:true Text: true
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: QString VectorCanBackend::interpretErrorFrame(const QCanBusFrame &errorFrame)
{
    Q_UNUSED(errorFrame);

    return QString();
}
|——Node:type_identifier Text: QString
|——Node:function_declarator Text: VectorCanBackend::interpretErrorFrame(const QCanBusFrame &errorFrame)
|———Node:qualified_identifier Text: VectorCanBackend::interpretErrorFrame
|————Node:namespace_identifier Text: VectorCanBackend
|————Node::: Text: ::
|————Node:identifier Text: interpretErrorFrame
|———Node:parameter_list Text: (const QCanBusFrame &errorFrame)
|————Node:( Text: (
|————Node:parameter_declaration Text: const QCanBusFrame &errorFrame
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: QCanBusFrame
|—————Node:reference_declarator Text: &errorFrame
|——————Node:& Text: &
|——————Node:identifier Text: errorFrame
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_UNUSED(errorFrame);

    return QString();
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_UNUSED(errorFrame);
|————Node:call_expression Text: Q_UNUSED(errorFrame)
|—————Node:identifier Text: Q_UNUSED
|—————Node:argument_list Text: (errorFrame)
|——————Node:( Text: (
|——————Node:identifier Text: errorFrame
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return QString();
|————Node:return Text: return
|————Node:call_expression Text: QString()
|—————Node:identifier Text: QString
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: bool VectorCanBackend::hasBusStatus() const
{
    return true;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: VectorCanBackend::hasBusStatus() const
|———Node:qualified_identifier Text: VectorCanBackend::hasBusStatus
|————Node:namespace_identifier Text: VectorCanBackend
|————Node::: Text: ::
|————Node:identifier Text: hasBusStatus
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|———Node:type_qualifier Text: const
|————Node:const Text: const
|——Node:compound_statement Text: {
    return true;
}
|———Node:{ Text: {
|———Node:return_statement Text: return true;
|————Node:return Text: return
|————Node:true Text: true
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: QCanBusDevice::CanBusStatus VectorCanBackend::busStatus()
{
    Q_D(VectorCanBackend);

    const XLstatus requestStatus = ::xlCanRequestChipState(d->portHandle, d->channelMask);
    if (Q_UNLIKELY(requestStatus != XL_SUCCESS)) {
        const QString errorString = d->systemErrorString(requestStatus);
        qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Can not query CAN bus status: %ls.",
                  qUtf16Printable(errorString));
        setError(errorString, QCanBusDevice::CanBusError::ReadError);
        return QCanBusDevice::CanBusStatus::Unknown;
    }

    quint8 busStatus = 0;
    if (d->usesCanFd) {
        XLcanRxEvent event = {};

        const XLstatus receiveStatus = ::xlCanReceive(d->portHandle, &event);
        if (Q_UNLIKELY(receiveStatus != XL_SUCCESS)) {
            const QString errorString = d->systemErrorString(receiveStatus);
            qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Can not query CAN bus status: %ls.",
                qUtf16Printable(errorString));
            setError(errorString, QCanBusDevice::CanBusError::ReadError);
            return QCanBusDevice::CanBusStatus::Unknown;
        }

        if (Q_LIKELY(event.tag == XL_CAN_EV_TAG_CHIP_STATE))
            busStatus = event.tagData.canChipState.busStatus;

    } else {
        quint32 eventCount = 1;
        XLevent event = {};

        const XLstatus receiveStatus = ::xlReceive(d->portHandle, &eventCount, &event);
        if (Q_UNLIKELY(receiveStatus != XL_SUCCESS)) {
            const QString errorString = d->systemErrorString(receiveStatus);
            qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Can not query CAN bus status: %ls.",
                qUtf16Printable(errorString));
            setError(errorString, QCanBusDevice::CanBusError::ReadError);
            return QCanBusDevice::CanBusStatus::Unknown;
        }

        if (Q_LIKELY(event.tag == XL_CHIP_STATE))
            busStatus = event.tagData.chipState.busStatus;
    }

    switch (busStatus) {
    case XL_CHIPSTAT_BUSOFF:
        return QCanBusDevice::CanBusStatus::BusOff;
    case XL_CHIPSTAT_ERROR_PASSIVE:
        return QCanBusDevice::CanBusStatus::Error;
    case XL_CHIPSTAT_ERROR_WARNING:
        return QCanBusDevice::CanBusStatus::Warning;
    case XL_CHIPSTAT_ERROR_ACTIVE:
        return QCanBusDevice::CanBusStatus::Good;
    }

    qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Unknown CAN bus status: %u", busStatus);
    return QCanBusDevice::CanBusStatus::Unknown;
}
|——Node:qualified_identifier Text: QCanBusDevice::CanBusStatus
|———Node:namespace_identifier Text: QCanBusDevice
|———Node::: Text: ::
|———Node:type_identifier Text: CanBusStatus
|——Node:function_declarator Text: VectorCanBackend::busStatus()
|———Node:qualified_identifier Text: VectorCanBackend::busStatus
|————Node:namespace_identifier Text: VectorCanBackend
|————Node::: Text: ::
|————Node:identifier Text: busStatus
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_D(VectorCanBackend);

    const XLstatus requestStatus = ::xlCanRequestChipState(d->portHandle, d->channelMask);
    if (Q_UNLIKELY(requestStatus != XL_SUCCESS)) {
        const QString errorString = d->systemErrorString(requestStatus);
        qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Can not query CAN bus status: %ls.",
                  qUtf16Printable(errorString));
        setError(errorString, QCanBusDevice::CanBusError::ReadError);
        return QCanBusDevice::CanBusStatus::Unknown;
    }

    quint8 busStatus = 0;
    if (d->usesCanFd) {
        XLcanRxEvent event = {};

        const XLstatus receiveStatus = ::xlCanReceive(d->portHandle, &event);
        if (Q_UNLIKELY(receiveStatus != XL_SUCCESS)) {
            const QString errorString = d->systemErrorString(receiveStatus);
            qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Can not query CAN bus status: %ls.",
                qUtf16Printable(errorString));
            setError(errorString, QCanBusDevice::CanBusError::ReadError);
            return QCanBusDevice::CanBusStatus::Unknown;
        }

        if (Q_LIKELY(event.tag == XL_CAN_EV_TAG_CHIP_STATE))
            busStatus = event.tagData.canChipState.busStatus;

    } else {
        quint32 eventCount = 1;
        XLevent event = {};

        const XLstatus receiveStatus = ::xlReceive(d->portHandle, &eventCount, &event);
        if (Q_UNLIKELY(receiveStatus != XL_SUCCESS)) {
            const QString errorString = d->systemErrorString(receiveStatus);
            qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Can not query CAN bus status: %ls.",
                qUtf16Printable(errorString));
            setError(errorString, QCanBusDevice::CanBusError::ReadError);
            return QCanBusDevice::CanBusStatus::Unknown;
        }

        if (Q_LIKELY(event.tag == XL_CHIP_STATE))
            busStatus = event.tagData.chipState.busStatus;
    }

    switch (busStatus) {
    case XL_CHIPSTAT_BUSOFF:
        return QCanBusDevice::CanBusStatus::BusOff;
    case XL_CHIPSTAT_ERROR_PASSIVE:
        return QCanBusDevice::CanBusStatus::Error;
    case XL_CHIPSTAT_ERROR_WARNING:
        return QCanBusDevice::CanBusStatus::Warning;
    case XL_CHIPSTAT_ERROR_ACTIVE:
        return QCanBusDevice::CanBusStatus::Good;
    }

    qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Unknown CAN bus status: %u", busStatus);
    return QCanBusDevice::CanBusStatus::Unknown;
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_D(VectorCanBackend);
|————Node:call_expression Text: Q_D(VectorCanBackend)
|—————Node:identifier Text: Q_D
|—————Node:argument_list Text: (VectorCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: VectorCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: const XLstatus requestStatus = ::xlCanRequestChipState(d->portHandle, d->channelMask);
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: XLstatus
|————Node:init_declarator Text: requestStatus = ::xlCanRequestChipState(d->portHandle, d->channelMask)
|—————Node:identifier Text: requestStatus
|—————Node:= Text: =
|—————Node:call_expression Text: ::xlCanRequestChipState(d->portHandle, d->channelMask)
|——————Node:qualified_identifier Text: ::xlCanRequestChipState
|———————Node::: Text: ::
|———————Node:identifier Text: xlCanRequestChipState
|——————Node:argument_list Text: (d->portHandle, d->channelMask)
|———————Node:( Text: (
|———————Node:field_expression Text: d->portHandle
|————————Node:identifier Text: d
|————————Node:-> Text: ->
|————————Node:field_identifier Text: portHandle
|———————Node:, Text: ,
|———————Node:field_expression Text: d->channelMask
|————————Node:identifier Text: d
|————————Node:-> Text: ->
|————————Node:field_identifier Text: channelMask
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(requestStatus != XL_SUCCESS)) {
        const QString errorString = d->systemErrorString(requestStatus);
        qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Can not query CAN bus status: %ls.",
                  qUtf16Printable(errorString));
        setError(errorString, QCanBusDevice::CanBusError::ReadError);
        return QCanBusDevice::CanBusStatus::Unknown;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(requestStatus != XL_SUCCESS))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(requestStatus != XL_SUCCESS)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (requestStatus != XL_SUCCESS)
|———————Node:( Text: (
|———————Node:binary_expression Text: requestStatus != XL_SUCCESS
|————————Node:identifier Text: requestStatus
|————————Node:!= Text: !=
|————————Node:identifier Text: XL_SUCCESS
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        const QString errorString = d->systemErrorString(requestStatus);
        qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Can not query CAN bus status: %ls.",
                  qUtf16Printable(errorString));
        setError(errorString, QCanBusDevice::CanBusError::ReadError);
        return QCanBusDevice::CanBusStatus::Unknown;
    }
|—————Node:{ Text: {
|—————Node:declaration Text: const QString errorString = d->systemErrorString(requestStatus);
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:type_identifier Text: QString
|——————Node:init_declarator Text: errorString = d->systemErrorString(requestStatus)
|———————Node:identifier Text: errorString
|———————Node:= Text: =
|———————Node:call_expression Text: d->systemErrorString(requestStatus)
|————————Node:field_expression Text: d->systemErrorString
|—————————Node:identifier Text: d
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: systemErrorString
|————————Node:argument_list Text: (requestStatus)
|—————————Node:( Text: (
|—————————Node:identifier Text: requestStatus
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Can not query CAN bus status: %ls.",
                  qUtf16Printable(errorString));
|——————Node:call_expression Text: qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Can not query CAN bus status: %ls.",
                  qUtf16Printable(errorString))
|———————Node:identifier Text: qCWarning
|———————Node:argument_list Text: (QT_CANBUS_PLUGINS_VECTORCAN, "Can not query CAN bus status: %ls.",
                  qUtf16Printable(errorString))
|————————Node:( Text: (
|————————Node:identifier Text: QT_CANBUS_PLUGINS_VECTORCAN
|————————Node:, Text: ,
|————————Node:string_literal Text: "Can not query CAN bus status: %ls."
|—————————Node:" Text: "
|—————————Node:string_content Text: Can not query CAN bus status: %ls.
|—————————Node:" Text: "
|————————Node:, Text: ,
|————————Node:call_expression Text: qUtf16Printable(errorString)
|—————————Node:identifier Text: qUtf16Printable
|—————————Node:argument_list Text: (errorString)
|——————————Node:( Text: (
|——————————Node:identifier Text: errorString
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: setError(errorString, QCanBusDevice::CanBusError::ReadError);
|——————Node:call_expression Text: setError(errorString, QCanBusDevice::CanBusError::ReadError)
|———————Node:identifier Text: setError
|———————Node:argument_list Text: (errorString, QCanBusDevice::CanBusError::ReadError)
|————————Node:( Text: (
|————————Node:identifier Text: errorString
|————————Node:, Text: ,
|————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ReadError
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:qualified_identifier Text: CanBusError::ReadError
|——————————Node:namespace_identifier Text: CanBusError
|——————————Node::: Text: ::
|——————————Node:identifier Text: ReadError
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return QCanBusDevice::CanBusStatus::Unknown;
|——————Node:return Text: return
|——————Node:qualified_identifier Text: QCanBusDevice::CanBusStatus::Unknown
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:qualified_identifier Text: CanBusStatus::Unknown
|————————Node:namespace_identifier Text: CanBusStatus
|————————Node::: Text: ::
|————————Node:identifier Text: Unknown
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:declaration Text: quint8 busStatus = 0;
|————Node:type_identifier Text: quint8
|————Node:init_declarator Text: busStatus = 0
|—————Node:identifier Text: busStatus
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:if_statement Text: if (d->usesCanFd) {
        XLcanRxEvent event = {};

        const XLstatus receiveStatus = ::xlCanReceive(d->portHandle, &event);
        if (Q_UNLIKELY(receiveStatus != XL_SUCCESS)) {
            const QString errorString = d->systemErrorString(receiveStatus);
            qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Can not query CAN bus status: %ls.",
                qUtf16Printable(errorString));
            setError(errorString, QCanBusDevice::CanBusError::ReadError);
            return QCanBusDevice::CanBusStatus::Unknown;
        }

        if (Q_LIKELY(event.tag == XL_CAN_EV_TAG_CHIP_STATE))
            busStatus = event.tagData.canChipState.busStatus;

    } else {
        quint32 eventCount = 1;
        XLevent event = {};

        const XLstatus receiveStatus = ::xlReceive(d->portHandle, &eventCount, &event);
        if (Q_UNLIKELY(receiveStatus != XL_SUCCESS)) {
            const QString errorString = d->systemErrorString(receiveStatus);
            qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Can not query CAN bus status: %ls.",
                qUtf16Printable(errorString));
            setError(errorString, QCanBusDevice::CanBusError::ReadError);
            return QCanBusDevice::CanBusStatus::Unknown;
        }

        if (Q_LIKELY(event.tag == XL_CHIP_STATE))
            busStatus = event.tagData.chipState.busStatus;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (d->usesCanFd)
|—————Node:( Text: (
|—————Node:field_expression Text: d->usesCanFd
|——————Node:identifier Text: d
|——————Node:-> Text: ->
|——————Node:field_identifier Text: usesCanFd
|—————Node:) Text: )
|————Node:compound_statement Text: {
        XLcanRxEvent event = {};

        const XLstatus receiveStatus = ::xlCanReceive(d->portHandle, &event);
        if (Q_UNLIKELY(receiveStatus != XL_SUCCESS)) {
            const QString errorString = d->systemErrorString(receiveStatus);
            qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Can not query CAN bus status: %ls.",
                qUtf16Printable(errorString));
            setError(errorString, QCanBusDevice::CanBusError::ReadError);
            return QCanBusDevice::CanBusStatus::Unknown;
        }

        if (Q_LIKELY(event.tag == XL_CAN_EV_TAG_CHIP_STATE))
            busStatus = event.tagData.canChipState.busStatus;

    }
|—————Node:{ Text: {
|—————Node:declaration Text: XLcanRxEvent event = {};
|——————Node:type_identifier Text: XLcanRxEvent
|——————Node:init_declarator Text: event = {}
|———————Node:identifier Text: event
|———————Node:= Text: =
|———————Node:initializer_list Text: {}
|————————Node:{ Text: {
|————————Node:} Text: }
|——————Node:; Text: ;
|—————Node:declaration Text: const XLstatus receiveStatus = ::xlCanReceive(d->portHandle, &event);
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:type_identifier Text: XLstatus
|——————Node:init_declarator Text: receiveStatus = ::xlCanReceive(d->portHandle, &event)
|———————Node:identifier Text: receiveStatus
|———————Node:= Text: =
|———————Node:call_expression Text: ::xlCanReceive(d->portHandle, &event)
|————————Node:qualified_identifier Text: ::xlCanReceive
|—————————Node::: Text: ::
|—————————Node:identifier Text: xlCanReceive
|————————Node:argument_list Text: (d->portHandle, &event)
|—————————Node:( Text: (
|—————————Node:field_expression Text: d->portHandle
|——————————Node:identifier Text: d
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: portHandle
|—————————Node:, Text: ,
|—————————Node:pointer_expression Text: &event
|——————————Node:& Text: &
|——————————Node:identifier Text: event
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (Q_UNLIKELY(receiveStatus != XL_SUCCESS)) {
            const QString errorString = d->systemErrorString(receiveStatus);
            qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Can not query CAN bus status: %ls.",
                qUtf16Printable(errorString));
            setError(errorString, QCanBusDevice::CanBusError::ReadError);
            return QCanBusDevice::CanBusStatus::Unknown;
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (Q_UNLIKELY(receiveStatus != XL_SUCCESS))
|———————Node:( Text: (
|———————Node:call_expression Text: Q_UNLIKELY(receiveStatus != XL_SUCCESS)
|————————Node:identifier Text: Q_UNLIKELY
|————————Node:argument_list Text: (receiveStatus != XL_SUCCESS)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: receiveStatus != XL_SUCCESS
|——————————Node:identifier Text: receiveStatus
|——————————Node:!= Text: !=
|——————————Node:identifier Text: XL_SUCCESS
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            const QString errorString = d->systemErrorString(receiveStatus);
            qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Can not query CAN bus status: %ls.",
                qUtf16Printable(errorString));
            setError(errorString, QCanBusDevice::CanBusError::ReadError);
            return QCanBusDevice::CanBusStatus::Unknown;
        }
|———————Node:{ Text: {
|———————Node:declaration Text: const QString errorString = d->systemErrorString(receiveStatus);
|————————Node:type_qualifier Text: const
|—————————Node:const Text: const
|————————Node:type_identifier Text: QString
|————————Node:init_declarator Text: errorString = d->systemErrorString(receiveStatus)
|—————————Node:identifier Text: errorString
|—————————Node:= Text: =
|—————————Node:call_expression Text: d->systemErrorString(receiveStatus)
|——————————Node:field_expression Text: d->systemErrorString
|———————————Node:identifier Text: d
|———————————Node:-> Text: ->
|———————————Node:field_identifier Text: systemErrorString
|——————————Node:argument_list Text: (receiveStatus)
|———————————Node:( Text: (
|———————————Node:identifier Text: receiveStatus
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Can not query CAN bus status: %ls.",
                qUtf16Printable(errorString));
|————————Node:call_expression Text: qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Can not query CAN bus status: %ls.",
                qUtf16Printable(errorString))
|—————————Node:identifier Text: qCWarning
|—————————Node:argument_list Text: (QT_CANBUS_PLUGINS_VECTORCAN, "Can not query CAN bus status: %ls.",
                qUtf16Printable(errorString))
|——————————Node:( Text: (
|——————————Node:identifier Text: QT_CANBUS_PLUGINS_VECTORCAN
|——————————Node:, Text: ,
|——————————Node:string_literal Text: "Can not query CAN bus status: %ls."
|———————————Node:" Text: "
|———————————Node:string_content Text: Can not query CAN bus status: %ls.
|———————————Node:" Text: "
|——————————Node:, Text: ,
|——————————Node:call_expression Text: qUtf16Printable(errorString)
|———————————Node:identifier Text: qUtf16Printable
|———————————Node:argument_list Text: (errorString)
|————————————Node:( Text: (
|————————————Node:identifier Text: errorString
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: setError(errorString, QCanBusDevice::CanBusError::ReadError);
|————————Node:call_expression Text: setError(errorString, QCanBusDevice::CanBusError::ReadError)
|—————————Node:identifier Text: setError
|—————————Node:argument_list Text: (errorString, QCanBusDevice::CanBusError::ReadError)
|——————————Node:( Text: (
|——————————Node:identifier Text: errorString
|——————————Node:, Text: ,
|——————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ReadError
|———————————Node:namespace_identifier Text: QCanBusDevice
|———————————Node::: Text: ::
|———————————Node:qualified_identifier Text: CanBusError::ReadError
|————————————Node:namespace_identifier Text: CanBusError
|————————————Node::: Text: ::
|————————————Node:identifier Text: ReadError
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:return_statement Text: return QCanBusDevice::CanBusStatus::Unknown;
|————————Node:return Text: return
|————————Node:qualified_identifier Text: QCanBusDevice::CanBusStatus::Unknown
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:qualified_identifier Text: CanBusStatus::Unknown
|——————————Node:namespace_identifier Text: CanBusStatus
|——————————Node::: Text: ::
|——————————Node:identifier Text: Unknown
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:if_statement Text: if (Q_LIKELY(event.tag == XL_CAN_EV_TAG_CHIP_STATE))
            busStatus = event.tagData.canChipState.busStatus;
|——————Node:if Text: if
|——————Node:condition_clause Text: (Q_LIKELY(event.tag == XL_CAN_EV_TAG_CHIP_STATE))
|———————Node:( Text: (
|———————Node:call_expression Text: Q_LIKELY(event.tag == XL_CAN_EV_TAG_CHIP_STATE)
|————————Node:identifier Text: Q_LIKELY
|————————Node:argument_list Text: (event.tag == XL_CAN_EV_TAG_CHIP_STATE)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: event.tag == XL_CAN_EV_TAG_CHIP_STATE
|——————————Node:field_expression Text: event.tag
|———————————Node:identifier Text: event
|———————————Node:. Text: .
|———————————Node:field_identifier Text: tag
|——————————Node:== Text: ==
|——————————Node:identifier Text: XL_CAN_EV_TAG_CHIP_STATE
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:expression_statement Text: busStatus = event.tagData.canChipState.busStatus;
|———————Node:assignment_expression Text: busStatus = event.tagData.canChipState.busStatus
|————————Node:identifier Text: busStatus
|————————Node:= Text: =
|————————Node:field_expression Text: event.tagData.canChipState.busStatus
|—————————Node:field_expression Text: event.tagData.canChipState
|——————————Node:field_expression Text: event.tagData
|———————————Node:identifier Text: event
|———————————Node:. Text: .
|———————————Node:field_identifier Text: tagData
|——————————Node:. Text: .
|——————————Node:field_identifier Text: canChipState
|—————————Node:. Text: .
|—————————Node:field_identifier Text: busStatus
|———————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else {
        quint32 eventCount = 1;
        XLevent event = {};

        const XLstatus receiveStatus = ::xlReceive(d->portHandle, &eventCount, &event);
        if (Q_UNLIKELY(receiveStatus != XL_SUCCESS)) {
            const QString errorString = d->systemErrorString(receiveStatus);
            qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Can not query CAN bus status: %ls.",
                qUtf16Printable(errorString));
            setError(errorString, QCanBusDevice::CanBusError::ReadError);
            return QCanBusDevice::CanBusStatus::Unknown;
        }

        if (Q_LIKELY(event.tag == XL_CHIP_STATE))
            busStatus = event.tagData.chipState.busStatus;
    }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
        quint32 eventCount = 1;
        XLevent event = {};

        const XLstatus receiveStatus = ::xlReceive(d->portHandle, &eventCount, &event);
        if (Q_UNLIKELY(receiveStatus != XL_SUCCESS)) {
            const QString errorString = d->systemErrorString(receiveStatus);
            qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Can not query CAN bus status: %ls.",
                qUtf16Printable(errorString));
            setError(errorString, QCanBusDevice::CanBusError::ReadError);
            return QCanBusDevice::CanBusStatus::Unknown;
        }

        if (Q_LIKELY(event.tag == XL_CHIP_STATE))
            busStatus = event.tagData.chipState.busStatus;
    }
|——————Node:{ Text: {
|——————Node:declaration Text: quint32 eventCount = 1;
|———————Node:type_identifier Text: quint32
|———————Node:init_declarator Text: eventCount = 1
|————————Node:identifier Text: eventCount
|————————Node:= Text: =
|————————Node:number_literal Text: 1
|———————Node:; Text: ;
|——————Node:declaration Text: XLevent event = {};
|———————Node:type_identifier Text: XLevent
|———————Node:init_declarator Text: event = {}
|————————Node:identifier Text: event
|————————Node:= Text: =
|————————Node:initializer_list Text: {}
|—————————Node:{ Text: {
|—————————Node:} Text: }
|———————Node:; Text: ;
|——————Node:declaration Text: const XLstatus receiveStatus = ::xlReceive(d->portHandle, &eventCount, &event);
|———————Node:type_qualifier Text: const
|————————Node:const Text: const
|———————Node:type_identifier Text: XLstatus
|———————Node:init_declarator Text: receiveStatus = ::xlReceive(d->portHandle, &eventCount, &event)
|————————Node:identifier Text: receiveStatus
|————————Node:= Text: =
|————————Node:call_expression Text: ::xlReceive(d->portHandle, &eventCount, &event)
|—————————Node:qualified_identifier Text: ::xlReceive
|——————————Node::: Text: ::
|——————————Node:identifier Text: xlReceive
|—————————Node:argument_list Text: (d->portHandle, &eventCount, &event)
|——————————Node:( Text: (
|——————————Node:field_expression Text: d->portHandle
|———————————Node:identifier Text: d
|———————————Node:-> Text: ->
|———————————Node:field_identifier Text: portHandle
|——————————Node:, Text: ,
|——————————Node:pointer_expression Text: &eventCount
|———————————Node:& Text: &
|———————————Node:identifier Text: eventCount
|——————————Node:, Text: ,
|——————————Node:pointer_expression Text: &event
|———————————Node:& Text: &
|———————————Node:identifier Text: event
|——————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:if_statement Text: if (Q_UNLIKELY(receiveStatus != XL_SUCCESS)) {
            const QString errorString = d->systemErrorString(receiveStatus);
            qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Can not query CAN bus status: %ls.",
                qUtf16Printable(errorString));
            setError(errorString, QCanBusDevice::CanBusError::ReadError);
            return QCanBusDevice::CanBusStatus::Unknown;
        }
|———————Node:if Text: if
|———————Node:condition_clause Text: (Q_UNLIKELY(receiveStatus != XL_SUCCESS))
|————————Node:( Text: (
|————————Node:call_expression Text: Q_UNLIKELY(receiveStatus != XL_SUCCESS)
|—————————Node:identifier Text: Q_UNLIKELY
|—————————Node:argument_list Text: (receiveStatus != XL_SUCCESS)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: receiveStatus != XL_SUCCESS
|———————————Node:identifier Text: receiveStatus
|———————————Node:!= Text: !=
|———————————Node:identifier Text: XL_SUCCESS
|——————————Node:) Text: )
|————————Node:) Text: )
|———————Node:compound_statement Text: {
            const QString errorString = d->systemErrorString(receiveStatus);
            qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Can not query CAN bus status: %ls.",
                qUtf16Printable(errorString));
            setError(errorString, QCanBusDevice::CanBusError::ReadError);
            return QCanBusDevice::CanBusStatus::Unknown;
        }
|————————Node:{ Text: {
|————————Node:declaration Text: const QString errorString = d->systemErrorString(receiveStatus);
|—————————Node:type_qualifier Text: const
|——————————Node:const Text: const
|—————————Node:type_identifier Text: QString
|—————————Node:init_declarator Text: errorString = d->systemErrorString(receiveStatus)
|——————————Node:identifier Text: errorString
|——————————Node:= Text: =
|——————————Node:call_expression Text: d->systemErrorString(receiveStatus)
|———————————Node:field_expression Text: d->systemErrorString
|————————————Node:identifier Text: d
|————————————Node:-> Text: ->
|————————————Node:field_identifier Text: systemErrorString
|———————————Node:argument_list Text: (receiveStatus)
|————————————Node:( Text: (
|————————————Node:identifier Text: receiveStatus
|————————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Can not query CAN bus status: %ls.",
                qUtf16Printable(errorString));
|—————————Node:call_expression Text: qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Can not query CAN bus status: %ls.",
                qUtf16Printable(errorString))
|——————————Node:identifier Text: qCWarning
|——————————Node:argument_list Text: (QT_CANBUS_PLUGINS_VECTORCAN, "Can not query CAN bus status: %ls.",
                qUtf16Printable(errorString))
|———————————Node:( Text: (
|———————————Node:identifier Text: QT_CANBUS_PLUGINS_VECTORCAN
|———————————Node:, Text: ,
|———————————Node:string_literal Text: "Can not query CAN bus status: %ls."
|————————————Node:" Text: "
|————————————Node:string_content Text: Can not query CAN bus status: %ls.
|————————————Node:" Text: "
|———————————Node:, Text: ,
|———————————Node:call_expression Text: qUtf16Printable(errorString)
|————————————Node:identifier Text: qUtf16Printable
|————————————Node:argument_list Text: (errorString)
|—————————————Node:( Text: (
|—————————————Node:identifier Text: errorString
|—————————————Node:) Text: )
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: setError(errorString, QCanBusDevice::CanBusError::ReadError);
|—————————Node:call_expression Text: setError(errorString, QCanBusDevice::CanBusError::ReadError)
|——————————Node:identifier Text: setError
|——————————Node:argument_list Text: (errorString, QCanBusDevice::CanBusError::ReadError)
|———————————Node:( Text: (
|———————————Node:identifier Text: errorString
|———————————Node:, Text: ,
|———————————Node:qualified_identifier Text: QCanBusDevice::CanBusError::ReadError
|————————————Node:namespace_identifier Text: QCanBusDevice
|————————————Node::: Text: ::
|————————————Node:qualified_identifier Text: CanBusError::ReadError
|—————————————Node:namespace_identifier Text: CanBusError
|—————————————Node::: Text: ::
|—————————————Node:identifier Text: ReadError
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:return_statement Text: return QCanBusDevice::CanBusStatus::Unknown;
|—————————Node:return Text: return
|—————————Node:qualified_identifier Text: QCanBusDevice::CanBusStatus::Unknown
|——————————Node:namespace_identifier Text: QCanBusDevice
|——————————Node::: Text: ::
|——————————Node:qualified_identifier Text: CanBusStatus::Unknown
|———————————Node:namespace_identifier Text: CanBusStatus
|———————————Node::: Text: ::
|———————————Node:identifier Text: Unknown
|—————————Node:; Text: ;
|————————Node:} Text: }
|——————Node:if_statement Text: if (Q_LIKELY(event.tag == XL_CHIP_STATE))
            busStatus = event.tagData.chipState.busStatus;
|———————Node:if Text: if
|———————Node:condition_clause Text: (Q_LIKELY(event.tag == XL_CHIP_STATE))
|————————Node:( Text: (
|————————Node:call_expression Text: Q_LIKELY(event.tag == XL_CHIP_STATE)
|—————————Node:identifier Text: Q_LIKELY
|—————————Node:argument_list Text: (event.tag == XL_CHIP_STATE)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: event.tag == XL_CHIP_STATE
|———————————Node:field_expression Text: event.tag
|————————————Node:identifier Text: event
|————————————Node:. Text: .
|————————————Node:field_identifier Text: tag
|———————————Node:== Text: ==
|———————————Node:identifier Text: XL_CHIP_STATE
|——————————Node:) Text: )
|————————Node:) Text: )
|———————Node:expression_statement Text: busStatus = event.tagData.chipState.busStatus;
|————————Node:assignment_expression Text: busStatus = event.tagData.chipState.busStatus
|—————————Node:identifier Text: busStatus
|—————————Node:= Text: =
|—————————Node:field_expression Text: event.tagData.chipState.busStatus
|——————————Node:field_expression Text: event.tagData.chipState
|———————————Node:field_expression Text: event.tagData
|————————————Node:identifier Text: event
|————————————Node:. Text: .
|————————————Node:field_identifier Text: tagData
|———————————Node:. Text: .
|———————————Node:field_identifier Text: chipState
|——————————Node:. Text: .
|——————————Node:field_identifier Text: busStatus
|————————Node:; Text: ;
|——————Node:} Text: }
|———Node:switch_statement Text: switch (busStatus) {
    case XL_CHIPSTAT_BUSOFF:
        return QCanBusDevice::CanBusStatus::BusOff;
    case XL_CHIPSTAT_ERROR_PASSIVE:
        return QCanBusDevice::CanBusStatus::Error;
    case XL_CHIPSTAT_ERROR_WARNING:
        return QCanBusDevice::CanBusStatus::Warning;
    case XL_CHIPSTAT_ERROR_ACTIVE:
        return QCanBusDevice::CanBusStatus::Good;
    }
|————Node:switch Text: switch
|————Node:condition_clause Text: (busStatus)
|—————Node:( Text: (
|—————Node:identifier Text: busStatus
|—————Node:) Text: )
|————Node:compound_statement Text: {
    case XL_CHIPSTAT_BUSOFF:
        return QCanBusDevice::CanBusStatus::BusOff;
    case XL_CHIPSTAT_ERROR_PASSIVE:
        return QCanBusDevice::CanBusStatus::Error;
    case XL_CHIPSTAT_ERROR_WARNING:
        return QCanBusDevice::CanBusStatus::Warning;
    case XL_CHIPSTAT_ERROR_ACTIVE:
        return QCanBusDevice::CanBusStatus::Good;
    }
|—————Node:{ Text: {
|—————Node:case_statement Text: case XL_CHIPSTAT_BUSOFF:
        return QCanBusDevice::CanBusStatus::BusOff;
|——————Node:case Text: case
|——————Node:identifier Text: XL_CHIPSTAT_BUSOFF
|——————Node:: Text: :
|——————Node:return_statement Text: return QCanBusDevice::CanBusStatus::BusOff;
|———————Node:return Text: return
|———————Node:qualified_identifier Text: QCanBusDevice::CanBusStatus::BusOff
|————————Node:namespace_identifier Text: QCanBusDevice
|————————Node::: Text: ::
|————————Node:qualified_identifier Text: CanBusStatus::BusOff
|—————————Node:namespace_identifier Text: CanBusStatus
|—————————Node::: Text: ::
|—————————Node:identifier Text: BusOff
|———————Node:; Text: ;
|—————Node:case_statement Text: case XL_CHIPSTAT_ERROR_PASSIVE:
        return QCanBusDevice::CanBusStatus::Error;
|——————Node:case Text: case
|——————Node:identifier Text: XL_CHIPSTAT_ERROR_PASSIVE
|——————Node:: Text: :
|——————Node:return_statement Text: return QCanBusDevice::CanBusStatus::Error;
|———————Node:return Text: return
|———————Node:qualified_identifier Text: QCanBusDevice::CanBusStatus::Error
|————————Node:namespace_identifier Text: QCanBusDevice
|————————Node::: Text: ::
|————————Node:qualified_identifier Text: CanBusStatus::Error
|—————————Node:namespace_identifier Text: CanBusStatus
|—————————Node::: Text: ::
|—————————Node:identifier Text: Error
|———————Node:; Text: ;
|—————Node:case_statement Text: case XL_CHIPSTAT_ERROR_WARNING:
        return QCanBusDevice::CanBusStatus::Warning;
|——————Node:case Text: case
|——————Node:identifier Text: XL_CHIPSTAT_ERROR_WARNING
|——————Node:: Text: :
|——————Node:return_statement Text: return QCanBusDevice::CanBusStatus::Warning;
|———————Node:return Text: return
|———————Node:qualified_identifier Text: QCanBusDevice::CanBusStatus::Warning
|————————Node:namespace_identifier Text: QCanBusDevice
|————————Node::: Text: ::
|————————Node:qualified_identifier Text: CanBusStatus::Warning
|—————————Node:namespace_identifier Text: CanBusStatus
|—————————Node::: Text: ::
|—————————Node:identifier Text: Warning
|———————Node:; Text: ;
|—————Node:case_statement Text: case XL_CHIPSTAT_ERROR_ACTIVE:
        return QCanBusDevice::CanBusStatus::Good;
|——————Node:case Text: case
|——————Node:identifier Text: XL_CHIPSTAT_ERROR_ACTIVE
|——————Node:: Text: :
|——————Node:return_statement Text: return QCanBusDevice::CanBusStatus::Good;
|———————Node:return Text: return
|———————Node:qualified_identifier Text: QCanBusDevice::CanBusStatus::Good
|————————Node:namespace_identifier Text: QCanBusDevice
|————————Node::: Text: ::
|————————Node:qualified_identifier Text: CanBusStatus::Good
|—————————Node:namespace_identifier Text: CanBusStatus
|—————————Node::: Text: ::
|—————————Node:identifier Text: Good
|———————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Unknown CAN bus status: %u", busStatus);
|————Node:call_expression Text: qCWarning(QT_CANBUS_PLUGINS_VECTORCAN, "Unknown CAN bus status: %u", busStatus)
|—————Node:identifier Text: qCWarning
|—————Node:argument_list Text: (QT_CANBUS_PLUGINS_VECTORCAN, "Unknown CAN bus status: %u", busStatus)
|——————Node:( Text: (
|——————Node:identifier Text: QT_CANBUS_PLUGINS_VECTORCAN
|——————Node:, Text: ,
|——————Node:string_literal Text: "Unknown CAN bus status: %u"
|———————Node:" Text: "
|———————Node:string_content Text: Unknown CAN bus status: %u
|———————Node:" Text: "
|——————Node:, Text: ,
|——————Node:identifier Text: busStatus
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return QCanBusDevice::CanBusStatus::Unknown;
|————Node:return Text: return
|————Node:qualified_identifier Text: QCanBusDevice::CanBusStatus::Unknown
|—————Node:namespace_identifier Text: QCanBusDevice
|—————Node::: Text: ::
|—————Node:qualified_identifier Text: CanBusStatus::Unknown
|——————Node:namespace_identifier Text: CanBusStatus
|——————Node::: Text: ::
|——————Node:identifier Text: Unknown
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: QCanBusDeviceInfo VectorCanBackend::deviceInfo() const
{
    const QList<QCanBusDeviceInfo> availableDevices = interfaces();
    const int index = d_ptr->channelIndex;
    const QString name = QStringLiteral("can%1").arg(index);

    const auto deviceInfo = std::find_if(availableDevices.constBegin(),
                                         availableDevices.constEnd(),
                                         [name](const QCanBusDeviceInfo &info) {
        return name == info.name();
    });

    if (Q_LIKELY(deviceInfo != availableDevices.constEnd()))
        return *deviceInfo;

    qWarning("%s: Cannot get device info for index %d.", Q_FUNC_INFO, index);
    return QCanBusDevice::deviceInfo();
}
|——Node:type_identifier Text: QCanBusDeviceInfo
|——Node:function_declarator Text: VectorCanBackend::deviceInfo() const
|———Node:qualified_identifier Text: VectorCanBackend::deviceInfo
|————Node:namespace_identifier Text: VectorCanBackend
|————Node::: Text: ::
|————Node:identifier Text: deviceInfo
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|———Node:type_qualifier Text: const
|————Node:const Text: const
|——Node:compound_statement Text: {
    const QList<QCanBusDeviceInfo> availableDevices = interfaces();
    const int index = d_ptr->channelIndex;
    const QString name = QStringLiteral("can%1").arg(index);

    const auto deviceInfo = std::find_if(availableDevices.constBegin(),
                                         availableDevices.constEnd(),
                                         [name](const QCanBusDeviceInfo &info) {
        return name == info.name();
    });

    if (Q_LIKELY(deviceInfo != availableDevices.constEnd()))
        return *deviceInfo;

    qWarning("%s: Cannot get device info for index %d.", Q_FUNC_INFO, index);
    return QCanBusDevice::deviceInfo();
}
|———Node:{ Text: {
|———Node:declaration Text: const QList<QCanBusDeviceInfo> availableDevices = interfaces();
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:template_type Text: QList<QCanBusDeviceInfo>
|—————Node:type_identifier Text: QList
|—————Node:template_argument_list Text: <QCanBusDeviceInfo>
|——————Node:< Text: <
|——————Node:type_descriptor Text: QCanBusDeviceInfo
|———————Node:type_identifier Text: QCanBusDeviceInfo
|——————Node:> Text: >
|————Node:init_declarator Text: availableDevices = interfaces()
|—————Node:identifier Text: availableDevices
|—————Node:= Text: =
|—————Node:call_expression Text: interfaces()
|——————Node:identifier Text: interfaces
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: const int index = d_ptr->channelIndex;
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: int
|————Node:init_declarator Text: index = d_ptr->channelIndex
|—————Node:identifier Text: index
|—————Node:= Text: =
|—————Node:field_expression Text: d_ptr->channelIndex
|——————Node:identifier Text: d_ptr
|——————Node:-> Text: ->
|——————Node:field_identifier Text: channelIndex
|————Node:; Text: ;
|———Node:declaration Text: const QString name = QStringLiteral("can%1").arg(index);
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: QString
|————Node:init_declarator Text: name = QStringLiteral("can%1").arg(index)
|—————Node:identifier Text: name
|—————Node:= Text: =
|—————Node:call_expression Text: QStringLiteral("can%1").arg(index)
|——————Node:field_expression Text: QStringLiteral("can%1").arg
|———————Node:call_expression Text: QStringLiteral("can%1")
|————————Node:identifier Text: QStringLiteral
|————————Node:argument_list Text: ("can%1")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "can%1"
|——————————Node:" Text: "
|——————————Node:string_content Text: can%1
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:. Text: .
|———————Node:field_identifier Text: arg
|——————Node:argument_list Text: (index)
|———————Node:( Text: (
|———————Node:identifier Text: index
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: const auto deviceInfo = std::find_if(availableDevices.constBegin(),
                                         availableDevices.constEnd(),
                                         [name](const QCanBusDeviceInfo &info) {
        return name == info.name();
    });
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:placeholder_type_specifier Text: auto
|—————Node:auto Text: auto
|————Node:init_declarator Text: deviceInfo = std::find_if(availableDevices.constBegin(),
                                         availableDevices.constEnd(),
                                         [name](const QCanBusDeviceInfo &info) {
        return name == info.name();
    })
|—————Node:identifier Text: deviceInfo
|—————Node:= Text: =
|—————Node:call_expression Text: std::find_if(availableDevices.constBegin(),
                                         availableDevices.constEnd(),
                                         [name](const QCanBusDeviceInfo &info) {
        return name == info.name();
    })
|——————Node:qualified_identifier Text: std::find_if
|———————Node:namespace_identifier Text: std
|———————Node::: Text: ::
|———————Node:identifier Text: find_if
|——————Node:argument_list Text: (availableDevices.constBegin(),
                                         availableDevices.constEnd(),
                                         [name](const QCanBusDeviceInfo &info) {
        return name == info.name();
    })
|———————Node:( Text: (
|———————Node:call_expression Text: availableDevices.constBegin()
|————————Node:field_expression Text: availableDevices.constBegin
|—————————Node:identifier Text: availableDevices
|—————————Node:. Text: .
|—————————Node:field_identifier Text: constBegin
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:, Text: ,
|———————Node:call_expression Text: availableDevices.constEnd()
|————————Node:field_expression Text: availableDevices.constEnd
|—————————Node:identifier Text: availableDevices
|—————————Node:. Text: .
|—————————Node:field_identifier Text: constEnd
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:, Text: ,
|———————Node:lambda_expression Text: [name](const QCanBusDeviceInfo &info) {
        return name == info.name();
    }
|————————Node:lambda_capture_specifier Text: [name]
|—————————Node:[ Text: [
|—————————Node:identifier Text: name
|—————————Node:] Text: ]
|————————Node:abstract_function_declarator Text: (const QCanBusDeviceInfo &info)
|—————————Node:parameter_list Text: (const QCanBusDeviceInfo &info)
|——————————Node:( Text: (
|——————————Node:parameter_declaration Text: const QCanBusDeviceInfo &info
|———————————Node:type_qualifier Text: const
|————————————Node:const Text: const
|———————————Node:type_identifier Text: QCanBusDeviceInfo
|———————————Node:reference_declarator Text: &info
|————————————Node:& Text: &
|————————————Node:identifier Text: info
|——————————Node:) Text: )
|————————Node:compound_statement Text: {
        return name == info.name();
    }
|—————————Node:{ Text: {
|—————————Node:return_statement Text: return name == info.name();
|——————————Node:return Text: return
|——————————Node:binary_expression Text: name == info.name()
|———————————Node:identifier Text: name
|———————————Node:== Text: ==
|———————————Node:call_expression Text: info.name()
|————————————Node:field_expression Text: info.name
|—————————————Node:identifier Text: info
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: name
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:} Text: }
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (Q_LIKELY(deviceInfo != availableDevices.constEnd()))
        return *deviceInfo;
|————Node:if Text: if
|————Node:condition_clause Text: (Q_LIKELY(deviceInfo != availableDevices.constEnd()))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_LIKELY(deviceInfo != availableDevices.constEnd())
|——————Node:identifier Text: Q_LIKELY
|——————Node:argument_list Text: (deviceInfo != availableDevices.constEnd())
|———————Node:( Text: (
|———————Node:binary_expression Text: deviceInfo != availableDevices.constEnd()
|————————Node:identifier Text: deviceInfo
|————————Node:!= Text: !=
|————————Node:call_expression Text: availableDevices.constEnd()
|—————————Node:field_expression Text: availableDevices.constEnd
|——————————Node:identifier Text: availableDevices
|——————————Node:. Text: .
|——————————Node:field_identifier Text: constEnd
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:return_statement Text: return *deviceInfo;
|—————Node:return Text: return
|—————Node:pointer_expression Text: *deviceInfo
|——————Node:* Text: *
|——————Node:identifier Text: deviceInfo
|—————Node:; Text: ;
|———Node:expression_statement Text: qWarning("%s: Cannot get device info for index %d.", Q_FUNC_INFO, index);
|————Node:call_expression Text: qWarning("%s: Cannot get device info for index %d.", Q_FUNC_INFO, index)
|—————Node:identifier Text: qWarning
|—————Node:argument_list Text: ("%s: Cannot get device info for index %d.", Q_FUNC_INFO, index)
|——————Node:( Text: (
|——————Node:string_literal Text: "%s: Cannot get device info for index %d."
|———————Node:" Text: "
|———————Node:string_content Text: %s: Cannot get device info for index %d.
|———————Node:" Text: "
|——————Node:, Text: ,
|——————Node:identifier Text: Q_FUNC_INFO
|——————Node:, Text: ,
|——————Node:identifier Text: index
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return QCanBusDevice::deviceInfo();
|————Node:return Text: return
|————Node:call_expression Text: QCanBusDevice::deviceInfo()
|—————Node:qualified_identifier Text: QCanBusDevice::deviceInfo
|——————Node:namespace_identifier Text: QCanBusDevice
|——————Node::: Text: ::
|——————Node:identifier Text: deviceInfo
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:expression_statement Text: QT_END_NAMESPACE
|——Node:identifier Text: QT_END_NAMESPACE
|——Node:; Text: 
