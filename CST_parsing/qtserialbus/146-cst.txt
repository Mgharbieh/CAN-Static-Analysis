qtserialbus-src\serialbus\qmodbusdevice_p.h

|Node:translation_unit
|—Node:comment
|—Node:preproc_ifdef Text: #ifndef QMODBUSDEVICE_P_H
#define QMODBUSDEVICE_P_H

#include "qmodbusdevice.h"
#include "QtCore/private/qobject_p.h"

//
//  W A R N I N G
//  -------------
//
// This file is not part of the Qt API. It exists purely as an
// implementation detail. This header file may change from version to
// version without notice, or even be removed.
//
// We mean it.
//

QT_BEGIN_NAMESPACE

class QModbusDevicePrivate : public QObjectPrivate
{
    Q_DECLARE_PUBLIC(QModbusDevice)
public:
    QModbusDevicePrivate()
        : state(QModbusDevice::UnconnectedState),
          error(QModbusDevice::NoError)
    {
    }

    quint8 calculateLRC(const char *data, qint32 len) const
    {
        quint32 lrc = 0;
        while (len--)
            lrc += *data++;
        return -(quint8(lrc));
    }
    bool checkLRC(const char *data, qint32 len, quint8 lrc) const
    {
        return calculateLRC(data, len) == lrc;
    }

    quint16 calculateCRC(const char *data, qint32 len) const
    {
        // Generated by pycrc v0.8.3, https://pycrc.org
        // Width = 16, Poly = 0x8005, XorIn = 0xffff, ReflectIn = True,
        // XorOut = 0x0000, ReflectOut = True, Algorithm = bit-by-bit-fast

        quint16 crc = 0xFFFF;
        while (len--) {
            const quint8 c = *data++;
            for (qint32 i = 0x01; i & 0xFF; i <<= 1) {
                bool bit = crc & 0x8000;
                if (c & i)
                    bit = !bit;
                crc <<= 1;
                if (bit)
                    crc ^= 0x8005;
            }
            crc &= 0xFFFF;
        }
        crc = crc_reflect(crc & 0xFFFF, 16) ^ 0x0000;
        return (crc >> 8) | (crc << 8); // swap bytes
    }
    bool matchingCRC(const char *data, qint32 len, quint16 crc) const
    {
        return calculateCRC(data, len) == crc;
    }

    QModbusDevice::ModbusDeviceState state;
    QModbusDevice::ModbusError error;
    QString errorString;
    QString portName;

private:
    quint16 crc_reflect(quint16 data, qint32 len) const
    {
        // Generated by pycrc v0.8.3, https://pycrc.org
        // Width = 16, Poly = 0x8005, XorIn = 0xffff, ReflectIn = True,
        // XorOut = 0x0000, ReflectOut = True, Algorithm = bit-by-bit-fast

        quint16 ret = data & 0x01;
        for (qint32 i = 1; i < len; i++) {
            data >>= 1;
            ret = (ret << 1) | (data & 0x01);
        }
        return ret;
    }
};

QT_END_NAMESPACE

#endif
|——Node:#ifndef Text: #ifndef
|——Node:identifier Text: QMODBUSDEVICE_P_H
|——Node:preproc_def Text: #define QMODBUSDEVICE_P_H

|———Node:#define Text: #define
|———Node:identifier Text: QMODBUSDEVICE_P_H
|——Node:preproc_include Text: #include "qmodbusdevice.h"

|———Node:#include Text: #include
|———Node:string_literal Text: "qmodbusdevice.h"
|————Node:" Text: "
|————Node:string_content Text: qmodbusdevice.h
|————Node:" Text: "
|——Node:preproc_include Text: #include "QtCore/private/qobject_p.h"

|———Node:#include Text: #include
|———Node:string_literal Text: "QtCore/private/qobject_p.h"
|————Node:" Text: "
|————Node:string_content Text: QtCore/private/qobject_p.h
|————Node:" Text: "
|——Node:comment
|——Node:comment
|——Node:comment
|——Node:comment
|——Node:comment
|——Node:comment
|——Node:comment
|——Node:comment
|——Node:comment
|——Node:comment
|——Node:declaration Text: QT_BEGIN_NAMESPACE

class
|———Node:type_identifier Text: QT_BEGIN_NAMESPACE
|———Node:identifier Text: class
|———Node:; Text: 
|——Node:labeled_statement Text: QModbusDevicePrivate : public QObjectPrivate
{
    Q_DECLARE_PUBLIC(QModbusDevice)
public:
    QModbusDevicePrivate()
        : state(QModbusDevice::UnconnectedState),
          error(QModbusDevice::NoError)
    {
    }

    quint8 calculateLRC(const char *data, qint32 len) const
    {
        quint32 lrc = 0;
        while (len--)
            lrc += *data++;
        return -(quint8(lrc));
    }
    bool checkLRC(const char *data, qint32 len, quint8 lrc) const
    {
        return calculateLRC(data, len) == lrc;
    }

    quint16 calculateCRC(const char *data, qint32 len) const
    {
        // Generated by pycrc v0.8.3, https://pycrc.org
        // Width = 16, Poly = 0x8005, XorIn = 0xffff, ReflectIn = True,
        // XorOut = 0x0000, ReflectOut = True, Algorithm = bit-by-bit-fast

        quint16 crc = 0xFFFF;
        while (len--) {
            const quint8 c = *data++;
            for (qint32 i = 0x01; i & 0xFF; i <<= 1) {
                bool bit = crc & 0x8000;
                if (c & i)
                    bit = !bit;
                crc <<= 1;
                if (bit)
                    crc ^= 0x8005;
            }
            crc &= 0xFFFF;
        }
        crc = crc_reflect(crc & 0xFFFF, 16) ^ 0x0000;
        return (crc >> 8) | (crc << 8); // swap bytes
    }
    bool matchingCRC(const char *data, qint32 len, quint16 crc) const
    {
        return calculateCRC(data, len) == crc;
    }

    QModbusDevice::ModbusDeviceState state;
    QModbusDevice::ModbusError error;
    QString errorString;
    QString portName;

private:
    quint16 crc_reflect(quint16 data, qint32 len) const
    {
        // Generated by pycrc v0.8.3, https://pycrc.org
        // Width = 16, Poly = 0x8005, XorIn = 0xffff, ReflectIn = True,
        // XorOut = 0x0000, ReflectOut = True, Algorithm = bit-by-bit-fast

        quint16 ret = data & 0x01;
        for (qint32 i = 1; i < len; i++) {
            data >>= 1;
            ret = (ret << 1) | (data & 0x01);
        }
        return ret;
    }
}
|———Node:statement_identifier Text: QModbusDevicePrivate
|———Node:: Text: :
|———Node:ERROR Text: public QObjectPrivate
|————Node:type_identifier Text: public
|————Node:identifier Text: QObjectPrivate
|———Node:compound_statement Text: {
    Q_DECLARE_PUBLIC(QModbusDevice)
public:
    QModbusDevicePrivate()
        : state(QModbusDevice::UnconnectedState),
          error(QModbusDevice::NoError)
    {
    }

    quint8 calculateLRC(const char *data, qint32 len) const
    {
        quint32 lrc = 0;
        while (len--)
            lrc += *data++;
        return -(quint8(lrc));
    }
    bool checkLRC(const char *data, qint32 len, quint8 lrc) const
    {
        return calculateLRC(data, len) == lrc;
    }

    quint16 calculateCRC(const char *data, qint32 len) const
    {
        // Generated by pycrc v0.8.3, https://pycrc.org
        // Width = 16, Poly = 0x8005, XorIn = 0xffff, ReflectIn = True,
        // XorOut = 0x0000, ReflectOut = True, Algorithm = bit-by-bit-fast

        quint16 crc = 0xFFFF;
        while (len--) {
            const quint8 c = *data++;
            for (qint32 i = 0x01; i & 0xFF; i <<= 1) {
                bool bit = crc & 0x8000;
                if (c & i)
                    bit = !bit;
                crc <<= 1;
                if (bit)
                    crc ^= 0x8005;
            }
            crc &= 0xFFFF;
        }
        crc = crc_reflect(crc & 0xFFFF, 16) ^ 0x0000;
        return (crc >> 8) | (crc << 8); // swap bytes
    }
    bool matchingCRC(const char *data, qint32 len, quint16 crc) const
    {
        return calculateCRC(data, len) == crc;
    }

    QModbusDevice::ModbusDeviceState state;
    QModbusDevice::ModbusError error;
    QString errorString;
    QString portName;

private:
    quint16 crc_reflect(quint16 data, qint32 len) const
    {
        // Generated by pycrc v0.8.3, https://pycrc.org
        // Width = 16, Poly = 0x8005, XorIn = 0xffff, ReflectIn = True,
        // XorOut = 0x0000, ReflectOut = True, Algorithm = bit-by-bit-fast

        quint16 ret = data & 0x01;
        for (qint32 i = 1; i < len; i++) {
            data >>= 1;
            ret = (ret << 1) | (data & 0x01);
        }
        return ret;
    }
}
|————Node:{ Text: {
|————Node:function_definition Text: Q_DECLARE_PUBLIC(QModbusDevice)
public:
    QModbusDevicePrivate()
        : state(QModbusDevice::UnconnectedState),
          error(QModbusDevice::NoError)
    {
    }

    quint8 calculateLRC(const char *data, qint32 len) const
    {
        quint32 lrc = 0;
        while (len--)
            lrc += *data++;
        return -(quint8(lrc));
    }
    bool checkLRC(const char *data, qint32 len, quint8 lrc) const
    {
        return calculateLRC(data, len) == lrc;
    }
|—————Node:macro_type_specifier Text: Q_DECLARE_PUBLIC(QModbusDevice)
|——————Node:identifier Text: Q_DECLARE_PUBLIC
|——————Node:( Text: (
|——————Node:type_descriptor Text: QModbusDevice
|———————Node:type_identifier Text: QModbusDevice
|——————Node:) Text: )
|—————Node:ERROR Text: public:
|——————Node:identifier Text: public
|——————Node:: Text: :
|—————Node:function_declarator Text: QModbusDevicePrivate()
|——————Node:identifier Text: QModbusDevicePrivate
|——————Node:parameter_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:ERROR Text: :
|——————Node:: Text: :
|—————Node:declaration Text: state(QModbusDevice::UnconnectedState),
          error(QModbusDevice::NoError)
    {
    }

    quint8 calculateLRC(const char *data, qint32 len) const
    {
        quint32 lrc = 0;
|——————Node:macro_type_specifier Text: state(QModbusDevice::UnconnectedState)
|———————Node:identifier Text: state
|———————Node:( Text: (
|———————Node:ERROR Text: QModbusDevice::
|————————Node:type_descriptor Text: QModbusDevice
|—————————Node:type_identifier Text: QModbusDevice
|————————Node:: Text: :
|————————Node:: Text: :
|———————Node:type_descriptor Text: UnconnectedState
|————————Node:type_identifier Text: UnconnectedState
|———————Node:) Text: )
|——————Node:ERROR Text: ,
          error(QModbusDevice::NoError)
    {
    }

    quint8 calculateLRC(const char *data, qint32 len) const
    {
        quint32
|———————Node:, Text: ,
|———————Node:function_declarator Text: error(QModbusDevice::NoError)
|————————Node:identifier Text: error
|————————Node:parameter_list Text: (QModbusDevice::NoError)
|—————————Node:( Text: (
|—————————Node:parameter_declaration Text: QModbusDevice::NoError
|——————————Node:type_identifier Text: QModbusDevice
|——————————Node:ERROR Text: ::
|———————————Node:: Text: :
|———————————Node:: Text: :
|——————————Node:identifier Text: NoError
|—————————Node:) Text: )
|———————Node:{ Text: {
|———————Node:} Text: }
|———————Node:identifier Text: quint8
|———————Node:function_declarator Text: calculateLRC(const char *data, qint32 len) const
|————————Node:identifier Text: calculateLRC
|————————Node:parameter_list Text: (const char *data, qint32 len)
|—————————Node:( Text: (
|—————————Node:parameter_declaration Text: const char *data
|——————————Node:type_qualifier Text: const
|———————————Node:const Text: const
|——————————Node:primitive_type Text: char
|——————————Node:pointer_declarator Text: *data
|———————————Node:* Text: *
|———————————Node:identifier Text: data
|—————————Node:, Text: ,
|—————————Node:parameter_declaration Text: qint32 len
|——————————Node:type_identifier Text: qint32
|——————————Node:identifier Text: len
|—————————Node:) Text: )
|————————Node:identifier Text: const
|———————Node:{ Text: {
|———————Node:identifier Text: quint32
|——————Node:init_declarator Text: lrc = 0
|———————Node:identifier Text: lrc
|———————Node:= Text: =
|———————Node:number_literal Text: 0
|——————Node:; Text: ;
|—————Node:declaration Text: while (len--)
            lrc += *data++;
|——————Node:macro_type_specifier Text: while (len--)
|———————Node:identifier Text: while
|———————Node:( Text: (
|———————Node:type_descriptor Text: len
|————————Node:type_identifier Text: len
|———————Node:ERROR Text: --
|————————Node:-- Text: --
|———————Node:) Text: )
|——————Node:ERROR Text: lrc +=
|———————Node:identifier Text: lrc
|———————Node:+= Text: +=
|——————Node:pointer_declarator Text: *data
|———————Node:* Text: *
|———————Node:identifier Text: data
|——————Node:ERROR Text: ++
|———————Node:++ Text: ++
|——————Node:; Text: ;
|—————Node:declaration Text: return -(quint8(lrc));
|——————Node:type_identifier Text: return
|——————Node:ERROR Text: -(
|———————Node:- Text: -
|———————Node:( Text: (
|——————Node:function_declarator Text: quint8(lrc)
|———————Node:identifier Text: quint8
|———————Node:parameter_list Text: (lrc)
|————————Node:( Text: (
|————————Node:parameter_declaration Text: lrc
|—————————Node:type_identifier Text: lrc
|————————Node:) Text: )
|——————Node:ERROR Text: )
|———————Node:) Text: )
|——————Node:; Text: ;
|—————Node:ERROR Text: }
    bool checkLRC(const char *data, qint32 len, quint8 lrc) const
|——————Node:} Text: }
|——————Node:primitive_type Text: bool
|——————Node:function_declarator Text: checkLRC(const char *data, qint32 len, quint8 lrc) const
|———————Node:identifier Text: checkLRC
|———————Node:parameter_list Text: (const char *data, qint32 len, quint8 lrc)
|————————Node:( Text: (
|————————Node:parameter_declaration Text: const char *data
|—————————Node:type_qualifier Text: const
|——————————Node:const Text: const
|—————————Node:primitive_type Text: char
|—————————Node:pointer_declarator Text: *data
|——————————Node:* Text: *
|——————————Node:identifier Text: data
|————————Node:, Text: ,
|————————Node:parameter_declaration Text: qint32 len
|—————————Node:type_identifier Text: qint32
|—————————Node:identifier Text: len
|————————Node:, Text: ,
|————————Node:parameter_declaration Text: quint8 lrc
|—————————Node:type_identifier Text: quint8
|—————————Node:identifier Text: lrc
|————————Node:) Text: )
|———————Node:identifier Text: const
|—————Node:compound_statement Text: {
        return calculateLRC(data, len) == lrc;
    }
|——————Node:{ Text: {
|——————Node:return_statement Text: return calculateLRC(data, len) == lrc;
|———————Node:return Text: return
|———————Node:binary_expression Text: calculateLRC(data, len) == lrc
|————————Node:call_expression Text: calculateLRC(data, len)
|—————————Node:identifier Text: calculateLRC
|—————————Node:argument_list Text: (data, len)
|——————————Node:( Text: (
|——————————Node:identifier Text: data
|——————————Node:, Text: ,
|——————————Node:identifier Text: len
|——————————Node:) Text: )
|————————Node:== Text: ==
|————————Node:identifier Text: lrc
|———————Node:; Text: ;
|——————Node:} Text: }
|————Node:function_definition Text: quint16 calculateCRC(const char *data, qint32 len) const
    {
        // Generated by pycrc v0.8.3, https://pycrc.org
        // Width = 16, Poly = 0x8005, XorIn = 0xffff, ReflectIn = True,
        // XorOut = 0x0000, ReflectOut = True, Algorithm = bit-by-bit-fast

        quint16 crc = 0xFFFF;
        while (len--) {
            const quint8 c = *data++;
            for (qint32 i = 0x01; i & 0xFF; i <<= 1) {
                bool bit = crc & 0x8000;
                if (c & i)
                    bit = !bit;
                crc <<= 1;
                if (bit)
                    crc ^= 0x8005;
            }
            crc &= 0xFFFF;
        }
        crc = crc_reflect(crc & 0xFFFF, 16) ^ 0x0000;
        return (crc >> 8) | (crc << 8); // swap bytes
    }
|—————Node:type_identifier Text: quint16
|—————Node:function_declarator Text: calculateCRC(const char *data, qint32 len) const
|——————Node:identifier Text: calculateCRC
|——————Node:parameter_list Text: (const char *data, qint32 len)
|———————Node:( Text: (
|———————Node:parameter_declaration Text: const char *data
|————————Node:type_qualifier Text: const
|—————————Node:const Text: const
|————————Node:primitive_type Text: char
|————————Node:pointer_declarator Text: *data
|—————————Node:* Text: *
|—————————Node:identifier Text: data
|———————Node:, Text: ,
|———————Node:parameter_declaration Text: qint32 len
|————————Node:type_identifier Text: qint32
|————————Node:identifier Text: len
|———————Node:) Text: )
|——————Node:identifier Text: const
|—————Node:compound_statement Text: {
        // Generated by pycrc v0.8.3, https://pycrc.org
        // Width = 16, Poly = 0x8005, XorIn = 0xffff, ReflectIn = True,
        // XorOut = 0x0000, ReflectOut = True, Algorithm = bit-by-bit-fast

        quint16 crc = 0xFFFF;
        while (len--) {
            const quint8 c = *data++;
            for (qint32 i = 0x01; i & 0xFF; i <<= 1) {
                bool bit = crc & 0x8000;
                if (c & i)
                    bit = !bit;
                crc <<= 1;
                if (bit)
                    crc ^= 0x8005;
            }
            crc &= 0xFFFF;
        }
        crc = crc_reflect(crc & 0xFFFF, 16) ^ 0x0000;
        return (crc >> 8) | (crc << 8); // swap bytes
    }
|——————Node:{ Text: {
|——————Node:comment
|——————Node:comment
|——————Node:comment
|——————Node:declaration Text: quint16 crc = 0xFFFF;
|———————Node:type_identifier Text: quint16
|———————Node:init_declarator Text: crc = 0xFFFF
|————————Node:identifier Text: crc
|————————Node:= Text: =
|————————Node:number_literal Text: 0xFFFF
|———————Node:; Text: ;
|——————Node:while_statement Text: while (len--) {
            const quint8 c = *data++;
            for (qint32 i = 0x01; i & 0xFF; i <<= 1) {
                bool bit = crc & 0x8000;
                if (c & i)
                    bit = !bit;
                crc <<= 1;
                if (bit)
                    crc ^= 0x8005;
            }
            crc &= 0xFFFF;
        }
|———————Node:while Text: while
|———————Node:parenthesized_expression Text: (len--)
|————————Node:( Text: (
|————————Node:update_expression Text: len--
|—————————Node:identifier Text: len
|—————————Node:-- Text: --
|————————Node:) Text: )
|———————Node:compound_statement Text: {
            const quint8 c = *data++;
            for (qint32 i = 0x01; i & 0xFF; i <<= 1) {
                bool bit = crc & 0x8000;
                if (c & i)
                    bit = !bit;
                crc <<= 1;
                if (bit)
                    crc ^= 0x8005;
            }
            crc &= 0xFFFF;
        }
|————————Node:{ Text: {
|————————Node:declaration Text: const quint8 c = *data++;
|—————————Node:type_qualifier Text: const
|——————————Node:const Text: const
|—————————Node:type_identifier Text: quint8
|—————————Node:init_declarator Text: c = *data++
|——————————Node:identifier Text: c
|——————————Node:= Text: =
|——————————Node:pointer_expression Text: *data++
|———————————Node:* Text: *
|———————————Node:update_expression Text: data++
|————————————Node:identifier Text: data
|————————————Node:++ Text: ++
|—————————Node:; Text: ;
|————————Node:for_statement Text: for (qint32 i = 0x01; i & 0xFF; i <<= 1) {
                bool bit = crc & 0x8000;
                if (c & i)
                    bit = !bit;
                crc <<= 1;
                if (bit)
                    crc ^= 0x8005;
            }
|—————————Node:for Text: for
|—————————Node:( Text: (
|—————————Node:declaration Text: qint32 i = 0x01;
|——————————Node:type_identifier Text: qint32
|——————————Node:init_declarator Text: i = 0x01
|———————————Node:identifier Text: i
|———————————Node:= Text: =
|———————————Node:number_literal Text: 0x01
|——————————Node:; Text: ;
|—————————Node:binary_expression Text: i & 0xFF
|——————————Node:identifier Text: i
|——————————Node:& Text: &
|——————————Node:number_literal Text: 0xFF
|—————————Node:; Text: ;
|—————————Node:assignment_expression Text: i <<= 1
|——————————Node:identifier Text: i
|——————————Node:<<= Text: <<=
|——————————Node:number_literal Text: 1
|—————————Node:) Text: )
|—————————Node:compound_statement Text: {
                bool bit = crc & 0x8000;
                if (c & i)
                    bit = !bit;
                crc <<= 1;
                if (bit)
                    crc ^= 0x8005;
            }
|——————————Node:{ Text: {
|——————————Node:declaration Text: bool bit = crc & 0x8000;
|———————————Node:primitive_type Text: bool
|———————————Node:init_declarator Text: bit = crc & 0x8000
|————————————Node:identifier Text: bit
|————————————Node:= Text: =
|————————————Node:binary_expression Text: crc & 0x8000
|—————————————Node:identifier Text: crc
|—————————————Node:& Text: &
|—————————————Node:number_literal Text: 0x8000
|———————————Node:; Text: ;
|——————————Node:if_statement Text: if (c & i)
                    bit = !bit;
|———————————Node:if Text: if
|———————————Node:parenthesized_expression Text: (c & i)
|————————————Node:( Text: (
|————————————Node:binary_expression Text: c & i
|—————————————Node:identifier Text: c
|—————————————Node:& Text: &
|—————————————Node:identifier Text: i
|————————————Node:) Text: )
|———————————Node:expression_statement Text: bit = !bit;
|————————————Node:assignment_expression Text: bit = !bit
|—————————————Node:identifier Text: bit
|—————————————Node:= Text: =
|—————————————Node:unary_expression Text: !bit
|——————————————Node:! Text: !
|——————————————Node:identifier Text: bit
|————————————Node:; Text: ;
|——————————Node:expression_statement Text: crc <<= 1;
|———————————Node:assignment_expression Text: crc <<= 1
|————————————Node:identifier Text: crc
|————————————Node:<<= Text: <<=
|————————————Node:number_literal Text: 1
|———————————Node:; Text: ;
|——————————Node:if_statement Text: if (bit)
                    crc ^= 0x8005;
|———————————Node:if Text: if
|———————————Node:parenthesized_expression Text: (bit)
|————————————Node:( Text: (
|————————————Node:identifier Text: bit
|————————————Node:) Text: )
|———————————Node:expression_statement Text: crc ^= 0x8005;
|————————————Node:assignment_expression Text: crc ^= 0x8005
|—————————————Node:identifier Text: crc
|—————————————Node:^= Text: ^=
|—————————————Node:number_literal Text: 0x8005
|————————————Node:; Text: ;
|——————————Node:} Text: }
|————————Node:expression_statement Text: crc &= 0xFFFF;
|—————————Node:assignment_expression Text: crc &= 0xFFFF
|——————————Node:identifier Text: crc
|——————————Node:&= Text: &=
|——————————Node:number_literal Text: 0xFFFF
|—————————Node:; Text: ;
|————————Node:} Text: }
|——————Node:expression_statement Text: crc = crc_reflect(crc & 0xFFFF, 16) ^ 0x0000;
|———————Node:assignment_expression Text: crc = crc_reflect(crc & 0xFFFF, 16) ^ 0x0000
|————————Node:identifier Text: crc
|————————Node:= Text: =
|————————Node:binary_expression Text: crc_reflect(crc & 0xFFFF, 16) ^ 0x0000
|—————————Node:call_expression Text: crc_reflect(crc & 0xFFFF, 16)
|——————————Node:identifier Text: crc_reflect
|——————————Node:argument_list Text: (crc & 0xFFFF, 16)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: crc & 0xFFFF
|————————————Node:identifier Text: crc
|————————————Node:& Text: &
|————————————Node:number_literal Text: 0xFFFF
|———————————Node:, Text: ,
|———————————Node:number_literal Text: 16
|———————————Node:) Text: )
|—————————Node:^ Text: ^
|—————————Node:number_literal Text: 0x0000
|———————Node:; Text: ;
|——————Node:return_statement Text: return (crc >> 8) | (crc << 8);
|———————Node:return Text: return
|———————Node:binary_expression Text: (crc >> 8) | (crc << 8)
|————————Node:parenthesized_expression Text: (crc >> 8)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: crc >> 8
|——————————Node:identifier Text: crc
|——————————Node:>> Text: >>
|——————————Node:number_literal Text: 8
|—————————Node:) Text: )
|————————Node:| Text: |
|————————Node:parenthesized_expression Text: (crc << 8)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: crc << 8
|——————————Node:identifier Text: crc
|——————————Node:<< Text: <<
|——————————Node:number_literal Text: 8
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:comment
|——————Node:} Text: }
|————Node:function_definition Text: bool matchingCRC(const char *data, qint32 len, quint16 crc) const
    {
        return calculateCRC(data, len) == crc;
    }
|—————Node:primitive_type Text: bool
|—————Node:function_declarator Text: matchingCRC(const char *data, qint32 len, quint16 crc) const
|——————Node:identifier Text: matchingCRC
|——————Node:parameter_list Text: (const char *data, qint32 len, quint16 crc)
|———————Node:( Text: (
|———————Node:parameter_declaration Text: const char *data
|————————Node:type_qualifier Text: const
|—————————Node:const Text: const
|————————Node:primitive_type Text: char
|————————Node:pointer_declarator Text: *data
|—————————Node:* Text: *
|—————————Node:identifier Text: data
|———————Node:, Text: ,
|———————Node:parameter_declaration Text: qint32 len
|————————Node:type_identifier Text: qint32
|————————Node:identifier Text: len
|———————Node:, Text: ,
|———————Node:parameter_declaration Text: quint16 crc
|————————Node:type_identifier Text: quint16
|————————Node:identifier Text: crc
|———————Node:) Text: )
|——————Node:identifier Text: const
|—————Node:compound_statement Text: {
        return calculateCRC(data, len) == crc;
    }
|——————Node:{ Text: {
|——————Node:return_statement Text: return calculateCRC(data, len) == crc;
|———————Node:return Text: return
|———————Node:binary_expression Text: calculateCRC(data, len) == crc
|————————Node:call_expression Text: calculateCRC(data, len)
|—————————Node:identifier Text: calculateCRC
|—————————Node:argument_list Text: (data, len)
|——————————Node:( Text: (
|——————————Node:identifier Text: data
|——————————Node:, Text: ,
|——————————Node:identifier Text: len
|——————————Node:) Text: )
|————————Node:== Text: ==
|————————Node:identifier Text: crc
|———————Node:; Text: ;
|——————Node:} Text: }
|————Node:labeled_statement Text: QModbusDevice::ModbusDeviceState state;
|—————Node:statement_identifier Text: QModbusDevice
|—————Node:: Text: :
|—————Node:ERROR Text: :
|——————Node:: Text: :
|—————Node:declaration Text: ModbusDeviceState state;
|——————Node:type_identifier Text: ModbusDeviceState
|——————Node:identifier Text: state
|——————Node:; Text: ;
|————Node:labeled_statement Text: QModbusDevice::ModbusError error;
|—————Node:statement_identifier Text: QModbusDevice
|—————Node:: Text: :
|—————Node:ERROR Text: :
|——————Node:: Text: :
|—————Node:declaration Text: ModbusError error;
|——————Node:type_identifier Text: ModbusError
|——————Node:identifier Text: error
|——————Node:; Text: ;
|————Node:declaration Text: QString errorString;
|—————Node:type_identifier Text: QString
|—————Node:identifier Text: errorString
|—————Node:; Text: ;
|————Node:declaration Text: QString portName;
|—————Node:type_identifier Text: QString
|—————Node:identifier Text: portName
|—————Node:; Text: ;
|————Node:labeled_statement Text: private:
    quint16 crc_reflect(quint16 data, qint32 len) const
    {
        // Generated by pycrc v0.8.3, https://pycrc.org
        // Width = 16, Poly = 0x8005, XorIn = 0xffff, ReflectIn = True,
        // XorOut = 0x0000, ReflectOut = True, Algorithm = bit-by-bit-fast

        quint16 ret = data & 0x01;
        for (qint32 i = 1; i < len; i++) {
            data >>= 1;
            ret = (ret << 1) | (data & 0x01);
        }
        return ret;
    }
|—————Node:statement_identifier Text: private
|—————Node:: Text: :
|—————Node:ERROR Text: quint16 crc_reflect(quint16 data, qint32 len) const
|——————Node:type_identifier Text: quint16
|——————Node:function_declarator Text: crc_reflect(quint16 data, qint32 len) const
|———————Node:identifier Text: crc_reflect
|———————Node:parameter_list Text: (quint16 data, qint32 len)
|————————Node:( Text: (
|————————Node:parameter_declaration Text: quint16 data
|—————————Node:type_identifier Text: quint16
|—————————Node:identifier Text: data
|————————Node:, Text: ,
|————————Node:parameter_declaration Text: qint32 len
|—————————Node:type_identifier Text: qint32
|—————————Node:identifier Text: len
|————————Node:) Text: )
|———————Node:identifier Text: const
|—————Node:compound_statement Text: {
        // Generated by pycrc v0.8.3, https://pycrc.org
        // Width = 16, Poly = 0x8005, XorIn = 0xffff, ReflectIn = True,
        // XorOut = 0x0000, ReflectOut = True, Algorithm = bit-by-bit-fast

        quint16 ret = data & 0x01;
        for (qint32 i = 1; i < len; i++) {
            data >>= 1;
            ret = (ret << 1) | (data & 0x01);
        }
        return ret;
    }
|——————Node:{ Text: {
|——————Node:comment
|——————Node:comment
|——————Node:comment
|——————Node:declaration Text: quint16 ret = data & 0x01;
|———————Node:type_identifier Text: quint16
|———————Node:init_declarator Text: ret = data & 0x01
|————————Node:identifier Text: ret
|————————Node:= Text: =
|————————Node:binary_expression Text: data & 0x01
|—————————Node:identifier Text: data
|—————————Node:& Text: &
|—————————Node:number_literal Text: 0x01
|———————Node:; Text: ;
|——————Node:for_statement Text: for (qint32 i = 1; i < len; i++) {
            data >>= 1;
            ret = (ret << 1) | (data & 0x01);
        }
|———————Node:for Text: for
|———————Node:( Text: (
|———————Node:declaration Text: qint32 i = 1;
|————————Node:type_identifier Text: qint32
|————————Node:init_declarator Text: i = 1
|—————————Node:identifier Text: i
|—————————Node:= Text: =
|—————————Node:number_literal Text: 1
|————————Node:; Text: ;
|———————Node:binary_expression Text: i < len
|————————Node:identifier Text: i
|————————Node:< Text: <
|————————Node:identifier Text: len
|———————Node:; Text: ;
|———————Node:update_expression Text: i++
|————————Node:identifier Text: i
|————————Node:++ Text: ++
|———————Node:) Text: )
|———————Node:compound_statement Text: {
            data >>= 1;
            ret = (ret << 1) | (data & 0x01);
        }
|————————Node:{ Text: {
|————————Node:expression_statement Text: data >>= 1;
|—————————Node:assignment_expression Text: data >>= 1
|——————————Node:identifier Text: data
|——————————Node:>>= Text: >>=
|——————————Node:number_literal Text: 1
|—————————Node:; Text: ;
|————————Node:expression_statement Text: ret = (ret << 1) | (data & 0x01);
|—————————Node:assignment_expression Text: ret = (ret << 1) | (data & 0x01)
|——————————Node:identifier Text: ret
|——————————Node:= Text: =
|——————————Node:binary_expression Text: (ret << 1) | (data & 0x01)
|———————————Node:parenthesized_expression Text: (ret << 1)
|————————————Node:( Text: (
|————————————Node:binary_expression Text: ret << 1
|—————————————Node:identifier Text: ret
|—————————————Node:<< Text: <<
|—————————————Node:number_literal Text: 1
|————————————Node:) Text: )
|———————————Node:| Text: |
|———————————Node:parenthesized_expression Text: (data & 0x01)
|————————————Node:( Text: (
|————————————Node:binary_expression Text: data & 0x01
|—————————————Node:identifier Text: data
|—————————————Node:& Text: &
|—————————————Node:number_literal Text: 0x01
|————————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:} Text: }
|——————Node:return_statement Text: return ret;
|———————Node:return Text: return
|———————Node:identifier Text: ret
|———————Node:; Text: ;
|——————Node:} Text: }
|————Node:} Text: }
|——Node:expression_statement Text: ;
|———Node:; Text: ;
|——Node:type_identifier Text: QT_END_NAMESPACE
|——Node:; Text: 
|——Node:#endif Text: #endif
|—Node:comment
