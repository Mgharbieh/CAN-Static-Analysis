qtserialbus-src\plugins\canbus\systeccan\systeccanbackend.cpp

|Node:translation_unit
|—Node:comment
|—Node:preproc_include Text: #include "systeccanbackend.h"

|——Node:#include Text: #include
|——Node:string_literal Text: "systeccanbackend.h"
|———Node:" Text: "
|———Node:string_content Text: systeccanbackend.h
|———Node:" Text: "
|—Node:preproc_include Text: #include "systeccanbackend_p.h"

|——Node:#include Text: #include
|——Node:string_literal Text: "systeccanbackend_p.h"
|———Node:" Text: "
|———Node:string_content Text: systeccanbackend_p.h
|———Node:" Text: "
|—Node:preproc_include Text: #include "systeccan_symbols_p.h"

|——Node:#include Text: #include
|——Node:string_literal Text: "systeccan_symbols_p.h"
|———Node:" Text: "
|———Node:string_content Text: systeccan_symbols_p.h
|———Node:" Text: "
|—Node:preproc_include Text: #include <QtSerialBus/qcanbusdevice.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <QtSerialBus/qcanbusdevice.h>
|—Node:preproc_include Text: #include <QtCore/qcoreapplication.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <QtCore/qcoreapplication.h>
|—Node:preproc_include Text: #include <QtCore/qcoreevent.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <QtCore/qcoreevent.h>
|—Node:preproc_include Text: #include <QtCore/qdebug.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <QtCore/qdebug.h>
|—Node:preproc_include Text: #include <QtCore/qloggingcategory.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <QtCore/qloggingcategory.h>
|—Node:preproc_include Text: #include <QtCore/qregularexpression.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <QtCore/qregularexpression.h>
|—Node:preproc_include Text: #include <QtCore/qtimer.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <QtCore/qtimer.h>
|—Node:declaration Text: QT_BEGIN_NAMESPACE

Q_DECLARE_LOGGING_CATEGORY(QT_CANBUS_PLUGINS_SYSTECCAN)
|——Node:type_identifier Text: QT_BEGIN_NAMESPACE
|——Node:init_declarator Text: Q_DECLARE_LOGGING_CATEGORY(QT_CANBUS_PLUGINS_SYSTECCAN)
|———Node:identifier Text: Q_DECLARE_LOGGING_CATEGORY
|———Node:argument_list Text: (QT_CANBUS_PLUGINS_SYSTECCAN)
|————Node:( Text: (
|————Node:identifier Text: QT_CANBUS_PLUGINS_SYSTECCAN
|————Node:) Text: )
|——Node:; Text: 
|—Node:expression_statement Text: Q_GLOBAL_STATIC(QLibrary, systecLibrary)
|——Node:call_expression Text: Q_GLOBAL_STATIC(QLibrary, systecLibrary)
|———Node:identifier Text: Q_GLOBAL_STATIC
|———Node:argument_list Text: (QLibrary, systecLibrary)
|————Node:( Text: (
|————Node:identifier Text: QLibrary
|————Node:, Text: ,
|————Node:identifier Text: systecLibrary
|————Node:) Text: )
|——Node:; Text: 
|—Node:function_definition Text: bool SystecCanBackend::canCreate(QString *errorReason)
{
    static bool symbolsResolved = resolveSystecCanSymbols(systecLibrary());
    if (Q_UNLIKELY(!symbolsResolved)) {
        *errorReason = systecLibrary()->errorString();
        return false;
    }
    return true;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: SystecCanBackend::canCreate(QString *errorReason)
|———Node:qualified_identifier Text: SystecCanBackend::canCreate
|————Node:namespace_identifier Text: SystecCanBackend
|————Node::: Text: ::
|————Node:identifier Text: canCreate
|———Node:parameter_list Text: (QString *errorReason)
|————Node:( Text: (
|————Node:parameter_declaration Text: QString *errorReason
|—————Node:type_identifier Text: QString
|—————Node:pointer_declarator Text: *errorReason
|——————Node:* Text: *
|——————Node:identifier Text: errorReason
|————Node:) Text: )
|——Node:compound_statement Text: {
    static bool symbolsResolved = resolveSystecCanSymbols(systecLibrary());
    if (Q_UNLIKELY(!symbolsResolved)) {
        *errorReason = systecLibrary()->errorString();
        return false;
    }
    return true;
}
|———Node:{ Text: {
|———Node:declaration Text: static bool symbolsResolved = resolveSystecCanSymbols(systecLibrary());
|————Node:storage_class_specifier Text: static
|—————Node:static Text: static
|————Node:primitive_type Text: bool
|————Node:init_declarator Text: symbolsResolved = resolveSystecCanSymbols(systecLibrary())
|—————Node:identifier Text: symbolsResolved
|—————Node:= Text: =
|—————Node:call_expression Text: resolveSystecCanSymbols(systecLibrary())
|——————Node:identifier Text: resolveSystecCanSymbols
|——————Node:argument_list Text: (systecLibrary())
|———————Node:( Text: (
|———————Node:call_expression Text: systecLibrary()
|————————Node:identifier Text: systecLibrary
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(!symbolsResolved)) {
        *errorReason = systecLibrary()->errorString();
        return false;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(!symbolsResolved))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(!symbolsResolved)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (!symbolsResolved)
|———————Node:( Text: (
|———————Node:unary_expression Text: !symbolsResolved
|————————Node:! Text: !
|————————Node:identifier Text: symbolsResolved
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        *errorReason = systecLibrary()->errorString();
        return false;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: *errorReason = systecLibrary()->errorString();
|——————Node:assignment_expression Text: *errorReason = systecLibrary()->errorString()
|———————Node:pointer_expression Text: *errorReason
|————————Node:* Text: *
|————————Node:identifier Text: errorReason
|———————Node:= Text: =
|———————Node:call_expression Text: systecLibrary()->errorString()
|————————Node:field_expression Text: systecLibrary()->errorString
|—————————Node:call_expression Text: systecLibrary()
|——————————Node:identifier Text: systecLibrary
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: errorString
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return false;
|——————Node:return Text: return
|——————Node:false Text: false
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return true;
|————Node:return Text: return
|————Node:true Text: true
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: QCanBusDeviceInfo SystecCanBackend::createDeviceInfo(const QString &serialNumber,
                                                     const QString &description,
                                                     uint deviceNumber,
                                                     int channelNumber)
{
    const QString name = QString::fromLatin1("can%1.%2").arg(deviceNumber).arg(channelNumber);
    return QCanBusDevice::createDeviceInfo(name, serialNumber, description, channelNumber, false, false);
}
|——Node:type_identifier Text: QCanBusDeviceInfo
|——Node:function_declarator Text: SystecCanBackend::createDeviceInfo(const QString &serialNumber,
                                                     const QString &description,
                                                     uint deviceNumber,
                                                     int channelNumber)
|———Node:qualified_identifier Text: SystecCanBackend::createDeviceInfo
|————Node:namespace_identifier Text: SystecCanBackend
|————Node::: Text: ::
|————Node:identifier Text: createDeviceInfo
|———Node:parameter_list Text: (const QString &serialNumber,
                                                     const QString &description,
                                                     uint deviceNumber,
                                                     int channelNumber)
|————Node:( Text: (
|————Node:parameter_declaration Text: const QString &serialNumber
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: QString
|—————Node:reference_declarator Text: &serialNumber
|——————Node:& Text: &
|——————Node:identifier Text: serialNumber
|————Node:, Text: ,
|————Node:parameter_declaration Text: const QString &description
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: QString
|—————Node:reference_declarator Text: &description
|——————Node:& Text: &
|——————Node:identifier Text: description
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint deviceNumber
|—————Node:type_identifier Text: uint
|—————Node:identifier Text: deviceNumber
|————Node:, Text: ,
|————Node:parameter_declaration Text: int channelNumber
|—————Node:primitive_type Text: int
|—————Node:identifier Text: channelNumber
|————Node:) Text: )
|——Node:compound_statement Text: {
    const QString name = QString::fromLatin1("can%1.%2").arg(deviceNumber).arg(channelNumber);
    return QCanBusDevice::createDeviceInfo(name, serialNumber, description, channelNumber, false, false);
}
|———Node:{ Text: {
|———Node:declaration Text: const QString name = QString::fromLatin1("can%1.%2").arg(deviceNumber).arg(channelNumber);
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: QString
|————Node:init_declarator Text: name = QString::fromLatin1("can%1.%2").arg(deviceNumber).arg(channelNumber)
|—————Node:identifier Text: name
|—————Node:= Text: =
|—————Node:call_expression Text: QString::fromLatin1("can%1.%2").arg(deviceNumber).arg(channelNumber)
|——————Node:field_expression Text: QString::fromLatin1("can%1.%2").arg(deviceNumber).arg
|———————Node:call_expression Text: QString::fromLatin1("can%1.%2").arg(deviceNumber)
|————————Node:field_expression Text: QString::fromLatin1("can%1.%2").arg
|—————————Node:call_expression Text: QString::fromLatin1("can%1.%2")
|——————————Node:qualified_identifier Text: QString::fromLatin1
|———————————Node:namespace_identifier Text: QString
|———————————Node::: Text: ::
|———————————Node:identifier Text: fromLatin1
|——————————Node:argument_list Text: ("can%1.%2")
|———————————Node:( Text: (
|———————————Node:string_literal Text: "can%1.%2"
|————————————Node:" Text: "
|————————————Node:string_content Text: can%1.%2
|————————————Node:" Text: "
|———————————Node:) Text: )
|—————————Node:. Text: .
|—————————Node:field_identifier Text: arg
|————————Node:argument_list Text: (deviceNumber)
|—————————Node:( Text: (
|—————————Node:identifier Text: deviceNumber
|—————————Node:) Text: )
|———————Node:. Text: .
|———————Node:field_identifier Text: arg
|——————Node:argument_list Text: (channelNumber)
|———————Node:( Text: (
|———————Node:identifier Text: channelNumber
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return QCanBusDevice::createDeviceInfo(name, serialNumber, description, channelNumber, false, false);
|————Node:return Text: return
|————Node:call_expression Text: QCanBusDevice::createDeviceInfo(name, serialNumber, description, channelNumber, false, false)
|—————Node:qualified_identifier Text: QCanBusDevice::createDeviceInfo
|——————Node:namespace_identifier Text: QCanBusDevice
|——————Node::: Text: ::
|——————Node:identifier Text: createDeviceInfo
|—————Node:argument_list Text: (name, serialNumber, description, channelNumber, false, false)
|——————Node:( Text: (
|——————Node:identifier Text: name
|——————Node:, Text: ,
|——————Node:identifier Text: serialNumber
|——————Node:, Text: ,
|——————Node:identifier Text: description
|——————Node:, Text: ,
|——————Node:identifier Text: channelNumber
|——————Node:, Text: ,
|——————Node:false Text: false
|——————Node:, Text: ,
|——————Node:false Text: false
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: static QString descriptionString(uint productCode)
{
    switch (productCode & USBCAN_PRODCODE_MASK_PID) {
    case USBCAN_PRODCODE_PID_GW001:       return QStringLiteral("USB-CANmodul (G1)");
    case USBCAN_PRODCODE_PID_GW002:       return QStringLiteral("USB-CANmodul (G2)");
    case USBCAN_PRODCODE_PID_MULTIPORT:   return QStringLiteral("Multiport CAN-to-USB (G3)");
    case USBCAN_PRODCODE_PID_BASIC:       return QStringLiteral("USB-CANmodul1 (G3)");
    case USBCAN_PRODCODE_PID_ADVANCED:    return QStringLiteral("USB-CANmodul2 (G3)");
    case USBCAN_PRODCODE_PID_USBCAN8:     return QStringLiteral("USB-CANmodul8 (G3)");
    case USBCAN_PRODCODE_PID_USBCAN16:    return QStringLiteral("USB-CANmodul16 (G3)");
    case USBCAN_PRODCODE_PID_ADVANCED_G4: return QStringLiteral("USB-CANmodul2 (G4)");
    case USBCAN_PRODCODE_PID_BASIC_G4:    return QStringLiteral("USB-CANmodul1 (G4)");
    default:                              return QStringLiteral("Unknown");
    }
}
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_identifier Text: QString
|——Node:function_declarator Text: descriptionString(uint productCode)
|———Node:identifier Text: descriptionString
|———Node:parameter_list Text: (uint productCode)
|————Node:( Text: (
|————Node:parameter_declaration Text: uint productCode
|—————Node:type_identifier Text: uint
|—————Node:identifier Text: productCode
|————Node:) Text: )
|——Node:compound_statement Text: {
    switch (productCode & USBCAN_PRODCODE_MASK_PID) {
    case USBCAN_PRODCODE_PID_GW001:       return QStringLiteral("USB-CANmodul (G1)");
    case USBCAN_PRODCODE_PID_GW002:       return QStringLiteral("USB-CANmodul (G2)");
    case USBCAN_PRODCODE_PID_MULTIPORT:   return QStringLiteral("Multiport CAN-to-USB (G3)");
    case USBCAN_PRODCODE_PID_BASIC:       return QStringLiteral("USB-CANmodul1 (G3)");
    case USBCAN_PRODCODE_PID_ADVANCED:    return QStringLiteral("USB-CANmodul2 (G3)");
    case USBCAN_PRODCODE_PID_USBCAN8:     return QStringLiteral("USB-CANmodul8 (G3)");
    case USBCAN_PRODCODE_PID_USBCAN16:    return QStringLiteral("USB-CANmodul16 (G3)");
    case USBCAN_PRODCODE_PID_ADVANCED_G4: return QStringLiteral("USB-CANmodul2 (G4)");
    case USBCAN_PRODCODE_PID_BASIC_G4:    return QStringLiteral("USB-CANmodul1 (G4)");
    default:                              return QStringLiteral("Unknown");
    }
}
|———Node:{ Text: {
|———Node:switch_statement Text: switch (productCode & USBCAN_PRODCODE_MASK_PID) {
    case USBCAN_PRODCODE_PID_GW001:       return QStringLiteral("USB-CANmodul (G1)");
    case USBCAN_PRODCODE_PID_GW002:       return QStringLiteral("USB-CANmodul (G2)");
    case USBCAN_PRODCODE_PID_MULTIPORT:   return QStringLiteral("Multiport CAN-to-USB (G3)");
    case USBCAN_PRODCODE_PID_BASIC:       return QStringLiteral("USB-CANmodul1 (G3)");
    case USBCAN_PRODCODE_PID_ADVANCED:    return QStringLiteral("USB-CANmodul2 (G3)");
    case USBCAN_PRODCODE_PID_USBCAN8:     return QStringLiteral("USB-CANmodul8 (G3)");
    case USBCAN_PRODCODE_PID_USBCAN16:    return QStringLiteral("USB-CANmodul16 (G3)");
    case USBCAN_PRODCODE_PID_ADVANCED_G4: return QStringLiteral("USB-CANmodul2 (G4)");
    case USBCAN_PRODCODE_PID_BASIC_G4:    return QStringLiteral("USB-CANmodul1 (G4)");
    default:                              return QStringLiteral("Unknown");
    }
|————Node:switch Text: switch
|————Node:condition_clause Text: (productCode & USBCAN_PRODCODE_MASK_PID)
|—————Node:( Text: (
|—————Node:binary_expression Text: productCode & USBCAN_PRODCODE_MASK_PID
|——————Node:identifier Text: productCode
|——————Node:& Text: &
|——————Node:identifier Text: USBCAN_PRODCODE_MASK_PID
|—————Node:) Text: )
|————Node:compound_statement Text: {
    case USBCAN_PRODCODE_PID_GW001:       return QStringLiteral("USB-CANmodul (G1)");
    case USBCAN_PRODCODE_PID_GW002:       return QStringLiteral("USB-CANmodul (G2)");
    case USBCAN_PRODCODE_PID_MULTIPORT:   return QStringLiteral("Multiport CAN-to-USB (G3)");
    case USBCAN_PRODCODE_PID_BASIC:       return QStringLiteral("USB-CANmodul1 (G3)");
    case USBCAN_PRODCODE_PID_ADVANCED:    return QStringLiteral("USB-CANmodul2 (G3)");
    case USBCAN_PRODCODE_PID_USBCAN8:     return QStringLiteral("USB-CANmodul8 (G3)");
    case USBCAN_PRODCODE_PID_USBCAN16:    return QStringLiteral("USB-CANmodul16 (G3)");
    case USBCAN_PRODCODE_PID_ADVANCED_G4: return QStringLiteral("USB-CANmodul2 (G4)");
    case USBCAN_PRODCODE_PID_BASIC_G4:    return QStringLiteral("USB-CANmodul1 (G4)");
    default:                              return QStringLiteral("Unknown");
    }
|—————Node:{ Text: {
|—————Node:case_statement Text: case USBCAN_PRODCODE_PID_GW001:       return QStringLiteral("USB-CANmodul (G1)");
|——————Node:case Text: case
|——————Node:identifier Text: USBCAN_PRODCODE_PID_GW001
|——————Node:: Text: :
|——————Node:return_statement Text: return QStringLiteral("USB-CANmodul (G1)");
|———————Node:return Text: return
|———————Node:call_expression Text: QStringLiteral("USB-CANmodul (G1)")
|————————Node:identifier Text: QStringLiteral
|————————Node:argument_list Text: ("USB-CANmodul (G1)")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "USB-CANmodul (G1)"
|——————————Node:" Text: "
|——————————Node:string_content Text: USB-CANmodul (G1)
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case USBCAN_PRODCODE_PID_GW002:       return QStringLiteral("USB-CANmodul (G2)");
|——————Node:case Text: case
|——————Node:identifier Text: USBCAN_PRODCODE_PID_GW002
|——————Node:: Text: :
|——————Node:return_statement Text: return QStringLiteral("USB-CANmodul (G2)");
|———————Node:return Text: return
|———————Node:call_expression Text: QStringLiteral("USB-CANmodul (G2)")
|————————Node:identifier Text: QStringLiteral
|————————Node:argument_list Text: ("USB-CANmodul (G2)")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "USB-CANmodul (G2)"
|——————————Node:" Text: "
|——————————Node:string_content Text: USB-CANmodul (G2)
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case USBCAN_PRODCODE_PID_MULTIPORT:   return QStringLiteral("Multiport CAN-to-USB (G3)");
|——————Node:case Text: case
|——————Node:identifier Text: USBCAN_PRODCODE_PID_MULTIPORT
|——————Node:: Text: :
|——————Node:return_statement Text: return QStringLiteral("Multiport CAN-to-USB (G3)");
|———————Node:return Text: return
|———————Node:call_expression Text: QStringLiteral("Multiport CAN-to-USB (G3)")
|————————Node:identifier Text: QStringLiteral
|————————Node:argument_list Text: ("Multiport CAN-to-USB (G3)")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Multiport CAN-to-USB (G3)"
|——————————Node:" Text: "
|——————————Node:string_content Text: Multiport CAN-to-USB (G3)
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case USBCAN_PRODCODE_PID_BASIC:       return QStringLiteral("USB-CANmodul1 (G3)");
|——————Node:case Text: case
|——————Node:identifier Text: USBCAN_PRODCODE_PID_BASIC
|——————Node:: Text: :
|——————Node:return_statement Text: return QStringLiteral("USB-CANmodul1 (G3)");
|———————Node:return Text: return
|———————Node:call_expression Text: QStringLiteral("USB-CANmodul1 (G3)")
|————————Node:identifier Text: QStringLiteral
|————————Node:argument_list Text: ("USB-CANmodul1 (G3)")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "USB-CANmodul1 (G3)"
|——————————Node:" Text: "
|——————————Node:string_content Text: USB-CANmodul1 (G3)
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case USBCAN_PRODCODE_PID_ADVANCED:    return QStringLiteral("USB-CANmodul2 (G3)");
|——————Node:case Text: case
|——————Node:identifier Text: USBCAN_PRODCODE_PID_ADVANCED
|——————Node:: Text: :
|——————Node:return_statement Text: return QStringLiteral("USB-CANmodul2 (G3)");
|———————Node:return Text: return
|———————Node:call_expression Text: QStringLiteral("USB-CANmodul2 (G3)")
|————————Node:identifier Text: QStringLiteral
|————————Node:argument_list Text: ("USB-CANmodul2 (G3)")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "USB-CANmodul2 (G3)"
|——————————Node:" Text: "
|——————————Node:string_content Text: USB-CANmodul2 (G3)
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case USBCAN_PRODCODE_PID_USBCAN8:     return QStringLiteral("USB-CANmodul8 (G3)");
|——————Node:case Text: case
|——————Node:identifier Text: USBCAN_PRODCODE_PID_USBCAN8
|——————Node:: Text: :
|——————Node:return_statement Text: return QStringLiteral("USB-CANmodul8 (G3)");
|———————Node:return Text: return
|———————Node:call_expression Text: QStringLiteral("USB-CANmodul8 (G3)")
|————————Node:identifier Text: QStringLiteral
|————————Node:argument_list Text: ("USB-CANmodul8 (G3)")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "USB-CANmodul8 (G3)"
|——————————Node:" Text: "
|——————————Node:string_content Text: USB-CANmodul8 (G3)
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case USBCAN_PRODCODE_PID_USBCAN16:    return QStringLiteral("USB-CANmodul16 (G3)");
|——————Node:case Text: case
|——————Node:identifier Text: USBCAN_PRODCODE_PID_USBCAN16
|——————Node:: Text: :
|——————Node:return_statement Text: return QStringLiteral("USB-CANmodul16 (G3)");
|———————Node:return Text: return
|———————Node:call_expression Text: QStringLiteral("USB-CANmodul16 (G3)")
|————————Node:identifier Text: QStringLiteral
|————————Node:argument_list Text: ("USB-CANmodul16 (G3)")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "USB-CANmodul16 (G3)"
|——————————Node:" Text: "
|——————————Node:string_content Text: USB-CANmodul16 (G3)
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case USBCAN_PRODCODE_PID_ADVANCED_G4: return QStringLiteral("USB-CANmodul2 (G4)");
|——————Node:case Text: case
|——————Node:identifier Text: USBCAN_PRODCODE_PID_ADVANCED_G4
|——————Node:: Text: :
|——————Node:return_statement Text: return QStringLiteral("USB-CANmodul2 (G4)");
|———————Node:return Text: return
|———————Node:call_expression Text: QStringLiteral("USB-CANmodul2 (G4)")
|————————Node:identifier Text: QStringLiteral
|————————Node:argument_list Text: ("USB-CANmodul2 (G4)")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "USB-CANmodul2 (G4)"
|——————————Node:" Text: "
|——————————Node:string_content Text: USB-CANmodul2 (G4)
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case USBCAN_PRODCODE_PID_BASIC_G4:    return QStringLiteral("USB-CANmodul1 (G4)");
|——————Node:case Text: case
|——————Node:identifier Text: USBCAN_PRODCODE_PID_BASIC_G4
|——————Node:: Text: :
|——————Node:return_statement Text: return QStringLiteral("USB-CANmodul1 (G4)");
|———————Node:return Text: return
|———————Node:call_expression Text: QStringLiteral("USB-CANmodul1 (G4)")
|————————Node:identifier Text: QStringLiteral
|————————Node:argument_list Text: ("USB-CANmodul1 (G4)")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "USB-CANmodul1 (G4)"
|——————————Node:" Text: "
|——————————Node:string_content Text: USB-CANmodul1 (G4)
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: default:                              return QStringLiteral("Unknown");
|——————Node:default Text: default
|——————Node:: Text: :
|——————Node:return_statement Text: return QStringLiteral("Unknown");
|———————Node:return Text: return
|———————Node:call_expression Text: QStringLiteral("Unknown")
|————————Node:identifier Text: QStringLiteral
|————————Node:argument_list Text: ("Unknown")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Unknown"
|——————————Node:" Text: "
|——————————Node:string_content Text: Unknown
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:} Text: }
|———Node:} Text: }
|—Node:function_definition Text: static void DRV_CALLBACK_TYPE ucanEnumCallback(DWORD index, BOOL isUsed,
                                               tUcanHardwareInfoEx *hardwareInfo,
                                               tUcanHardwareInitInfo *initInfo,
                                               void *args)
{
    auto result = static_cast<QList<QCanBusDeviceInfo> *>(args);

    Q_UNUSED(index);
    Q_UNUSED(isUsed);

    const QString serialNumber = QString::number(hardwareInfo->m_dwSerialNr);
    const QString description = descriptionString(hardwareInfo->m_dwProductCode);
    result->append(std::move(SystecCanBackend::createDeviceInfo(serialNumber, description,
                                                                hardwareInfo->m_bDeviceNr, 0)));
    if (USBCAN_CHECK_SUPPORT_TWO_CHANNEL(hardwareInfo)) {
        result->append(std::move(SystecCanBackend::createDeviceInfo(serialNumber, description,
                                                                    hardwareInfo->m_bDeviceNr, 1)));
    }

    initInfo->m_fTryNext = true; // continue enumerating with next device
}
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:primitive_type Text: void
|——Node:function_declarator Text: DRV_CALLBACK_TYPE ucanEnumCallback(DWORD index, BOOL isUsed,
                                               tUcanHardwareInfoEx *hardwareInfo,
                                               tUcanHardwareInitInfo *initInfo,
                                               void *args)
|———Node:qualified_identifier Text: DRV_CALLBACK_TYPE ucanEnumCallback
|————Node:namespace_identifier Text: DRV_CALLBACK_TYPE
|————Node::: Text: 
|————Node:identifier Text: ucanEnumCallback
|———Node:parameter_list Text: (DWORD index, BOOL isUsed,
                                               tUcanHardwareInfoEx *hardwareInfo,
                                               tUcanHardwareInitInfo *initInfo,
                                               void *args)
|————Node:( Text: (
|————Node:parameter_declaration Text: DWORD index
|—————Node:type_identifier Text: DWORD
|—————Node:identifier Text: index
|————Node:, Text: ,
|————Node:parameter_declaration Text: BOOL isUsed
|—————Node:type_identifier Text: BOOL
|—————Node:identifier Text: isUsed
|————Node:, Text: ,
|————Node:parameter_declaration Text: tUcanHardwareInfoEx *hardwareInfo
|—————Node:type_identifier Text: tUcanHardwareInfoEx
|—————Node:pointer_declarator Text: *hardwareInfo
|——————Node:* Text: *
|——————Node:identifier Text: hardwareInfo
|————Node:, Text: ,
|————Node:parameter_declaration Text: tUcanHardwareInitInfo *initInfo
|—————Node:type_identifier Text: tUcanHardwareInitInfo
|—————Node:pointer_declarator Text: *initInfo
|——————Node:* Text: *
|——————Node:identifier Text: initInfo
|————Node:, Text: ,
|————Node:parameter_declaration Text: void *args
|—————Node:primitive_type Text: void
|—————Node:pointer_declarator Text: *args
|——————Node:* Text: *
|——————Node:identifier Text: args
|————Node:) Text: )
|——Node:compound_statement Text: {
    auto result = static_cast<QList<QCanBusDeviceInfo> *>(args);

    Q_UNUSED(index);
    Q_UNUSED(isUsed);

    const QString serialNumber = QString::number(hardwareInfo->m_dwSerialNr);
    const QString description = descriptionString(hardwareInfo->m_dwProductCode);
    result->append(std::move(SystecCanBackend::createDeviceInfo(serialNumber, description,
                                                                hardwareInfo->m_bDeviceNr, 0)));
    if (USBCAN_CHECK_SUPPORT_TWO_CHANNEL(hardwareInfo)) {
        result->append(std::move(SystecCanBackend::createDeviceInfo(serialNumber, description,
                                                                    hardwareInfo->m_bDeviceNr, 1)));
    }

    initInfo->m_fTryNext = true; // continue enumerating with next device
}
|———Node:{ Text: {
|———Node:declaration Text: auto result = static_cast<QList<QCanBusDeviceInfo> *>(args);
|————Node:placeholder_type_specifier Text: auto
|—————Node:auto Text: auto
|————Node:init_declarator Text: result = static_cast<QList<QCanBusDeviceInfo> *>(args)
|—————Node:identifier Text: result
|—————Node:= Text: =
|—————Node:call_expression Text: static_cast<QList<QCanBusDeviceInfo> *>(args)
|——————Node:template_function Text: static_cast<QList<QCanBusDeviceInfo> *>
|———————Node:identifier Text: static_cast
|———————Node:template_argument_list Text: <QList<QCanBusDeviceInfo> *>
|————————Node:< Text: <
|————————Node:type_descriptor Text: QList<QCanBusDeviceInfo> *
|—————————Node:template_type Text: QList<QCanBusDeviceInfo>
|——————————Node:type_identifier Text: QList
|——————————Node:template_argument_list Text: <QCanBusDeviceInfo>
|———————————Node:< Text: <
|———————————Node:type_descriptor Text: QCanBusDeviceInfo
|————————————Node:type_identifier Text: QCanBusDeviceInfo
|———————————Node:> Text: >
|—————————Node:abstract_pointer_declarator Text: *
|——————————Node:* Text: *
|————————Node:> Text: >
|——————Node:argument_list Text: (args)
|———————Node:( Text: (
|———————Node:identifier Text: args
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: Q_UNUSED(index);
|————Node:call_expression Text: Q_UNUSED(index)
|—————Node:identifier Text: Q_UNUSED
|—————Node:argument_list Text: (index)
|——————Node:( Text: (
|——————Node:identifier Text: index
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: Q_UNUSED(isUsed);
|————Node:call_expression Text: Q_UNUSED(isUsed)
|—————Node:identifier Text: Q_UNUSED
|—————Node:argument_list Text: (isUsed)
|——————Node:( Text: (
|——————Node:identifier Text: isUsed
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: const QString serialNumber = QString::number(hardwareInfo->m_dwSerialNr);
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: QString
|————Node:init_declarator Text: serialNumber = QString::number(hardwareInfo->m_dwSerialNr)
|—————Node:identifier Text: serialNumber
|—————Node:= Text: =
|—————Node:call_expression Text: QString::number(hardwareInfo->m_dwSerialNr)
|——————Node:qualified_identifier Text: QString::number
|———————Node:namespace_identifier Text: QString
|———————Node::: Text: ::
|———————Node:identifier Text: number
|——————Node:argument_list Text: (hardwareInfo->m_dwSerialNr)
|———————Node:( Text: (
|———————Node:field_expression Text: hardwareInfo->m_dwSerialNr
|————————Node:identifier Text: hardwareInfo
|————————Node:-> Text: ->
|————————Node:field_identifier Text: m_dwSerialNr
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: const QString description = descriptionString(hardwareInfo->m_dwProductCode);
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: QString
|————Node:init_declarator Text: description = descriptionString(hardwareInfo->m_dwProductCode)
|—————Node:identifier Text: description
|—————Node:= Text: =
|—————Node:call_expression Text: descriptionString(hardwareInfo->m_dwProductCode)
|——————Node:identifier Text: descriptionString
|——————Node:argument_list Text: (hardwareInfo->m_dwProductCode)
|———————Node:( Text: (
|———————Node:field_expression Text: hardwareInfo->m_dwProductCode
|————————Node:identifier Text: hardwareInfo
|————————Node:-> Text: ->
|————————Node:field_identifier Text: m_dwProductCode
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: result->append(std::move(SystecCanBackend::createDeviceInfo(serialNumber, description,
                                                                hardwareInfo->m_bDeviceNr, 0)));
|————Node:call_expression Text: result->append(std::move(SystecCanBackend::createDeviceInfo(serialNumber, description,
                                                                hardwareInfo->m_bDeviceNr, 0)))
|—————Node:field_expression Text: result->append
|——————Node:identifier Text: result
|——————Node:-> Text: ->
|——————Node:field_identifier Text: append
|—————Node:argument_list Text: (std::move(SystecCanBackend::createDeviceInfo(serialNumber, description,
                                                                hardwareInfo->m_bDeviceNr, 0)))
|——————Node:( Text: (
|——————Node:call_expression Text: std::move(SystecCanBackend::createDeviceInfo(serialNumber, description,
                                                                hardwareInfo->m_bDeviceNr, 0))
|———————Node:qualified_identifier Text: std::move
|————————Node:namespace_identifier Text: std
|————————Node::: Text: ::
|————————Node:identifier Text: move
|———————Node:argument_list Text: (SystecCanBackend::createDeviceInfo(serialNumber, description,
                                                                hardwareInfo->m_bDeviceNr, 0))
|————————Node:( Text: (
|————————Node:call_expression Text: SystecCanBackend::createDeviceInfo(serialNumber, description,
                                                                hardwareInfo->m_bDeviceNr, 0)
|—————————Node:qualified_identifier Text: SystecCanBackend::createDeviceInfo
|——————————Node:namespace_identifier Text: SystecCanBackend
|——————————Node::: Text: ::
|——————————Node:identifier Text: createDeviceInfo
|—————————Node:argument_list Text: (serialNumber, description,
                                                                hardwareInfo->m_bDeviceNr, 0)
|——————————Node:( Text: (
|——————————Node:identifier Text: serialNumber
|——————————Node:, Text: ,
|——————————Node:identifier Text: description
|——————————Node:, Text: ,
|——————————Node:field_expression Text: hardwareInfo->m_bDeviceNr
|———————————Node:identifier Text: hardwareInfo
|———————————Node:-> Text: ->
|———————————Node:field_identifier Text: m_bDeviceNr
|——————————Node:, Text: ,
|——————————Node:number_literal Text: 0
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (USBCAN_CHECK_SUPPORT_TWO_CHANNEL(hardwareInfo)) {
        result->append(std::move(SystecCanBackend::createDeviceInfo(serialNumber, description,
                                                                    hardwareInfo->m_bDeviceNr, 1)));
    }
|————Node:if Text: if
|————Node:condition_clause Text: (USBCAN_CHECK_SUPPORT_TWO_CHANNEL(hardwareInfo))
|—————Node:( Text: (
|—————Node:call_expression Text: USBCAN_CHECK_SUPPORT_TWO_CHANNEL(hardwareInfo)
|——————Node:identifier Text: USBCAN_CHECK_SUPPORT_TWO_CHANNEL
|——————Node:argument_list Text: (hardwareInfo)
|———————Node:( Text: (
|———————Node:identifier Text: hardwareInfo
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        result->append(std::move(SystecCanBackend::createDeviceInfo(serialNumber, description,
                                                                    hardwareInfo->m_bDeviceNr, 1)));
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: result->append(std::move(SystecCanBackend::createDeviceInfo(serialNumber, description,
                                                                    hardwareInfo->m_bDeviceNr, 1)));
|——————Node:call_expression Text: result->append(std::move(SystecCanBackend::createDeviceInfo(serialNumber, description,
                                                                    hardwareInfo->m_bDeviceNr, 1)))
|———————Node:field_expression Text: result->append
|————————Node:identifier Text: result
|————————Node:-> Text: ->
|————————Node:field_identifier Text: append
|———————Node:argument_list Text: (std::move(SystecCanBackend::createDeviceInfo(serialNumber, description,
                                                                    hardwareInfo->m_bDeviceNr, 1)))
|————————Node:( Text: (
|————————Node:call_expression Text: std::move(SystecCanBackend::createDeviceInfo(serialNumber, description,
                                                                    hardwareInfo->m_bDeviceNr, 1))
|—————————Node:qualified_identifier Text: std::move
|——————————Node:namespace_identifier Text: std
|——————————Node::: Text: ::
|——————————Node:identifier Text: move
|—————————Node:argument_list Text: (SystecCanBackend::createDeviceInfo(serialNumber, description,
                                                                    hardwareInfo->m_bDeviceNr, 1))
|——————————Node:( Text: (
|——————————Node:call_expression Text: SystecCanBackend::createDeviceInfo(serialNumber, description,
                                                                    hardwareInfo->m_bDeviceNr, 1)
|———————————Node:qualified_identifier Text: SystecCanBackend::createDeviceInfo
|————————————Node:namespace_identifier Text: SystecCanBackend
|————————————Node::: Text: ::
|————————————Node:identifier Text: createDeviceInfo
|———————————Node:argument_list Text: (serialNumber, description,
                                                                    hardwareInfo->m_bDeviceNr, 1)
|————————————Node:( Text: (
|————————————Node:identifier Text: serialNumber
|————————————Node:, Text: ,
|————————————Node:identifier Text: description
|————————————Node:, Text: ,
|————————————Node:field_expression Text: hardwareInfo->m_bDeviceNr
|—————————————Node:identifier Text: hardwareInfo
|—————————————Node:-> Text: ->
|—————————————Node:field_identifier Text: m_bDeviceNr
|————————————Node:, Text: ,
|————————————Node:number_literal Text: 1
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: initInfo->m_fTryNext = true;
|————Node:assignment_expression Text: initInfo->m_fTryNext = true
|—————Node:field_expression Text: initInfo->m_fTryNext
|——————Node:identifier Text: initInfo
|——————Node:-> Text: ->
|——————Node:field_identifier Text: m_fTryNext
|—————Node:= Text: =
|—————Node:true Text: true
|————Node:; Text: ;
|———Node:comment
|———Node:} Text: }
|—Node:function_definition Text: QList<QCanBusDeviceInfo> SystecCanBackend::interfaces()
{
    QList<QCanBusDeviceInfo> result;

    ::UcanEnumerateHardware(&ucanEnumCallback, &result, false, 0, quint8(~0), 0, quint32(~0), 0, quint32(~0));

    return result;
}
|——Node:template_type Text: QList<QCanBusDeviceInfo>
|———Node:type_identifier Text: QList
|———Node:template_argument_list Text: <QCanBusDeviceInfo>
|————Node:< Text: <
|————Node:type_descriptor Text: QCanBusDeviceInfo
|—————Node:type_identifier Text: QCanBusDeviceInfo
|————Node:> Text: >
|——Node:function_declarator Text: SystecCanBackend::interfaces()
|———Node:qualified_identifier Text: SystecCanBackend::interfaces
|————Node:namespace_identifier Text: SystecCanBackend
|————Node::: Text: ::
|————Node:identifier Text: interfaces
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    QList<QCanBusDeviceInfo> result;

    ::UcanEnumerateHardware(&ucanEnumCallback, &result, false, 0, quint8(~0), 0, quint32(~0), 0, quint32(~0));

    return result;
}
|———Node:{ Text: {
|———Node:declaration Text: QList<QCanBusDeviceInfo> result;
|————Node:template_type Text: QList<QCanBusDeviceInfo>
|—————Node:type_identifier Text: QList
|—————Node:template_argument_list Text: <QCanBusDeviceInfo>
|——————Node:< Text: <
|——————Node:type_descriptor Text: QCanBusDeviceInfo
|———————Node:type_identifier Text: QCanBusDeviceInfo
|——————Node:> Text: >
|————Node:identifier Text: result
|————Node:; Text: ;
|———Node:expression_statement Text: ::UcanEnumerateHardware(&ucanEnumCallback, &result, false, 0, quint8(~0), 0, quint32(~0), 0, quint32(~0));
|————Node:call_expression Text: ::UcanEnumerateHardware(&ucanEnumCallback, &result, false, 0, quint8(~0), 0, quint32(~0), 0, quint32(~0))
|—————Node:qualified_identifier Text: ::UcanEnumerateHardware
|——————Node::: Text: ::
|——————Node:identifier Text: UcanEnumerateHardware
|—————Node:argument_list Text: (&ucanEnumCallback, &result, false, 0, quint8(~0), 0, quint32(~0), 0, quint32(~0))
|——————Node:( Text: (
|——————Node:pointer_expression Text: &ucanEnumCallback
|———————Node:& Text: &
|———————Node:identifier Text: ucanEnumCallback
|——————Node:, Text: ,
|——————Node:pointer_expression Text: &result
|———————Node:& Text: &
|———————Node:identifier Text: result
|——————Node:, Text: ,
|——————Node:false Text: false
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:, Text: ,
|——————Node:call_expression Text: quint8(~0)
|———————Node:identifier Text: quint8
|———————Node:argument_list Text: (~0)
|————————Node:( Text: (
|————————Node:unary_expression Text: ~0
|—————————Node:~ Text: ~
|—————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:, Text: ,
|——————Node:call_expression Text: quint32(~0)
|———————Node:identifier Text: quint32
|———————Node:argument_list Text: (~0)
|————————Node:( Text: (
|————————Node:unary_expression Text: ~0
|—————————Node:~ Text: ~
|—————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:, Text: ,
|——————Node:call_expression Text: quint32(~0)
|———————Node:identifier Text: quint32
|———————Node:argument_list Text: (~0)
|————————Node:( Text: (
|————————Node:unary_expression Text: ~0
|—————————Node:~ Text: ~
|—————————Node:number_literal Text: 0
|————————Node:) Text: )
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return result;
|————Node:return Text: return
|————Node:identifier Text: result
|————Node:; Text: ;
|———Node:} Text: }
|—Node:class_specifier Text: class OutgoingEventNotifier : public QTimer
{
public:
    OutgoingEventNotifier(SystecCanBackendPrivate *d, QObject *parent) :
        QTimer(parent),
        dptr(d)
    {
    }

protected:
    void timerEvent(QTimerEvent *e) override
    {
        if (e->timerId() == timerId()) {
            dptr->startWrite();
            return;
        }
        QTimer::timerEvent(e);
    }

private:
    SystecCanBackendPrivate * const dptr;
}
|——Node:class Text: class
|——Node:type_identifier Text: OutgoingEventNotifier
|——Node:base_class_clause Text: : public QTimer
|———Node:: Text: :
|———Node:access_specifier Text: public
|————Node:public Text: public
|———Node:type_identifier Text: QTimer
|——Node:field_declaration_list Text: {
public:
    OutgoingEventNotifier(SystecCanBackendPrivate *d, QObject *parent) :
        QTimer(parent),
        dptr(d)
    {
    }

protected:
    void timerEvent(QTimerEvent *e) override
    {
        if (e->timerId() == timerId()) {
            dptr->startWrite();
            return;
        }
        QTimer::timerEvent(e);
    }

private:
    SystecCanBackendPrivate * const dptr;
}
|———Node:{ Text: {
|———Node:access_specifier Text: public
|————Node:public Text: public
|———Node:: Text: :
|———Node:function_definition Text: OutgoingEventNotifier(SystecCanBackendPrivate *d, QObject *parent) :
        QTimer(parent),
        dptr(d)
    {
    }
|————Node:function_declarator Text: OutgoingEventNotifier(SystecCanBackendPrivate *d, QObject *parent)
|—————Node:identifier Text: OutgoingEventNotifier
|—————Node:parameter_list Text: (SystecCanBackendPrivate *d, QObject *parent)
|——————Node:( Text: (
|——————Node:parameter_declaration Text: SystecCanBackendPrivate *d
|———————Node:type_identifier Text: SystecCanBackendPrivate
|———————Node:pointer_declarator Text: *d
|————————Node:* Text: *
|————————Node:identifier Text: d
|——————Node:, Text: ,
|——————Node:parameter_declaration Text: QObject *parent
|———————Node:type_identifier Text: QObject
|———————Node:pointer_declarator Text: *parent
|————————Node:* Text: *
|————————Node:identifier Text: parent
|——————Node:) Text: )
|————Node:field_initializer_list Text: :
        QTimer(parent),
        dptr(d)
|—————Node:: Text: :
|—————Node:field_initializer Text: QTimer(parent)
|——————Node:field_identifier Text: QTimer
|——————Node:argument_list Text: (parent)
|———————Node:( Text: (
|———————Node:identifier Text: parent
|———————Node:) Text: )
|—————Node:, Text: ,
|—————Node:field_initializer Text: dptr(d)
|——————Node:field_identifier Text: dptr
|——————Node:argument_list Text: (d)
|———————Node:( Text: (
|———————Node:identifier Text: d
|———————Node:) Text: )
|————Node:compound_statement Text: {
    }
|—————Node:{ Text: {
|—————Node:} Text: }
|———Node:access_specifier Text: protected
|————Node:protected Text: protected
|———Node:: Text: :
|———Node:function_definition Text: void timerEvent(QTimerEvent *e) override
    {
        if (e->timerId() == timerId()) {
            dptr->startWrite();
            return;
        }
        QTimer::timerEvent(e);
    }
|————Node:primitive_type Text: void
|————Node:function_declarator Text: timerEvent(QTimerEvent *e) override
|—————Node:field_identifier Text: timerEvent
|—————Node:parameter_list Text: (QTimerEvent *e)
|——————Node:( Text: (
|——————Node:parameter_declaration Text: QTimerEvent *e
|———————Node:type_identifier Text: QTimerEvent
|———————Node:pointer_declarator Text: *e
|————————Node:* Text: *
|————————Node:identifier Text: e
|——————Node:) Text: )
|—————Node:virtual_specifier Text: override
|——————Node:override Text: override
|————Node:compound_statement Text: {
        if (e->timerId() == timerId()) {
            dptr->startWrite();
            return;
        }
        QTimer::timerEvent(e);
    }
|—————Node:{ Text: {
|—————Node:if_statement Text: if (e->timerId() == timerId()) {
            dptr->startWrite();
            return;
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (e->timerId() == timerId())
|———————Node:( Text: (
|———————Node:binary_expression Text: e->timerId() == timerId()
|————————Node:call_expression Text: e->timerId()
|—————————Node:field_expression Text: e->timerId
|——————————Node:identifier Text: e
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: timerId
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:== Text: ==
|————————Node:call_expression Text: timerId()
|—————————Node:identifier Text: timerId
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            dptr->startWrite();
            return;
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: dptr->startWrite();
|————————Node:call_expression Text: dptr->startWrite()
|—————————Node:field_expression Text: dptr->startWrite
|——————————Node:identifier Text: dptr
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: startWrite
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:return_statement Text: return;
|————————Node:return Text: return
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:expression_statement Text: QTimer::timerEvent(e);
|——————Node:call_expression Text: QTimer::timerEvent(e)
|———————Node:qualified_identifier Text: QTimer::timerEvent
|————————Node:namespace_identifier Text: QTimer
|————————Node::: Text: ::
|————————Node:identifier Text: timerEvent
|———————Node:argument_list Text: (e)
|————————Node:( Text: (
|————————Node:identifier Text: e
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:access_specifier Text: private
|————Node:private Text: private
|———Node:: Text: :
|———Node:field_declaration Text: SystecCanBackendPrivate * const dptr;
|————Node:type_identifier Text: SystecCanBackendPrivate
|————Node:pointer_declarator Text: * const dptr
|—————Node:* Text: *
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:field_identifier Text: dptr
|————Node:; Text: ;
|———Node:} Text: }
|—Node:; Text: ;
|—Node:function_definition Text: SystecCanBackendPrivate::SystecCanBackendPrivate(SystecCanBackend *q) :
    q_ptr(q),
    incomingEventHandler(new IncomingEventHandler(this, q))
{
}
|——Node:function_declarator Text: SystecCanBackendPrivate::SystecCanBackendPrivate(SystecCanBackend *q)
|———Node:qualified_identifier Text: SystecCanBackendPrivate::SystecCanBackendPrivate
|————Node:namespace_identifier Text: SystecCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: SystecCanBackendPrivate
|———Node:parameter_list Text: (SystecCanBackend *q)
|————Node:( Text: (
|————Node:parameter_declaration Text: SystecCanBackend *q
|—————Node:type_identifier Text: SystecCanBackend
|—————Node:pointer_declarator Text: *q
|——————Node:* Text: *
|——————Node:identifier Text: q
|————Node:) Text: )
|——Node:field_initializer_list Text: :
    q_ptr(q),
    incomingEventHandler(new IncomingEventHandler(this, q))
|———Node:: Text: :
|———Node:field_initializer Text: q_ptr(q)
|————Node:field_identifier Text: q_ptr
|————Node:argument_list Text: (q)
|—————Node:( Text: (
|—————Node:identifier Text: q
|—————Node:) Text: )
|———Node:, Text: ,
|———Node:field_initializer Text: incomingEventHandler(new IncomingEventHandler(this, q))
|————Node:field_identifier Text: incomingEventHandler
|————Node:argument_list Text: (new IncomingEventHandler(this, q))
|—————Node:( Text: (
|—————Node:new_expression Text: new IncomingEventHandler(this, q)
|——————Node:new Text: new
|——————Node:type_identifier Text: IncomingEventHandler
|——————Node:argument_list Text: (this, q)
|———————Node:( Text: (
|———————Node:this Text: this
|———————Node:, Text: ,
|———————Node:identifier Text: q
|———————Node:) Text: )
|—————Node:) Text: )
|——Node:compound_statement Text: {
}
|———Node:{ Text: {
|———Node:} Text: }
|—Node:function_definition Text: static uint bitrateCodeFromBitrate(int bitrate)
{
    struct BitrateItem {
        int bitrate;
        uint code;
    } bitrateTable[] = {
        {   10000, USBCAN_BAUDEX_10kBit  },
        {   20000, USBCAN_BAUDEX_20kBit  },
        {   50000, USBCAN_BAUDEX_50kBit  },
        {  100000, USBCAN_BAUDEX_100kBit },
        {  125000, USBCAN_BAUDEX_125kBit },
        {  250000, USBCAN_BAUDEX_250kBit },
        {  500000, USBCAN_BAUDEX_500kBit },
        {  800000, USBCAN_BAUDEX_800kBit },
        { 1000000, USBCAN_BAUDEX_1MBit   }
    };

    const int entries = (sizeof(bitrateTable) / sizeof(*bitrateTable));
    for (int i = 0; i < entries; ++i)
        if (bitrateTable[i].bitrate == bitrate)
            return bitrateTable[i].code;

    return 0;
}
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:type_identifier Text: uint
|——Node:function_declarator Text: bitrateCodeFromBitrate(int bitrate)
|———Node:identifier Text: bitrateCodeFromBitrate
|———Node:parameter_list Text: (int bitrate)
|————Node:( Text: (
|————Node:parameter_declaration Text: int bitrate
|—————Node:primitive_type Text: int
|—————Node:identifier Text: bitrate
|————Node:) Text: )
|——Node:compound_statement Text: {
    struct BitrateItem {
        int bitrate;
        uint code;
    } bitrateTable[] = {
        {   10000, USBCAN_BAUDEX_10kBit  },
        {   20000, USBCAN_BAUDEX_20kBit  },
        {   50000, USBCAN_BAUDEX_50kBit  },
        {  100000, USBCAN_BAUDEX_100kBit },
        {  125000, USBCAN_BAUDEX_125kBit },
        {  250000, USBCAN_BAUDEX_250kBit },
        {  500000, USBCAN_BAUDEX_500kBit },
        {  800000, USBCAN_BAUDEX_800kBit },
        { 1000000, USBCAN_BAUDEX_1MBit   }
    };

    const int entries = (sizeof(bitrateTable) / sizeof(*bitrateTable));
    for (int i = 0; i < entries; ++i)
        if (bitrateTable[i].bitrate == bitrate)
            return bitrateTable[i].code;

    return 0;
}
|———Node:{ Text: {
|———Node:declaration Text: struct BitrateItem {
        int bitrate;
        uint code;
    } bitrateTable[] = {
        {   10000, USBCAN_BAUDEX_10kBit  },
        {   20000, USBCAN_BAUDEX_20kBit  },
        {   50000, USBCAN_BAUDEX_50kBit  },
        {  100000, USBCAN_BAUDEX_100kBit },
        {  125000, USBCAN_BAUDEX_125kBit },
        {  250000, USBCAN_BAUDEX_250kBit },
        {  500000, USBCAN_BAUDEX_500kBit },
        {  800000, USBCAN_BAUDEX_800kBit },
        { 1000000, USBCAN_BAUDEX_1MBit   }
    };
|————Node:struct_specifier Text: struct BitrateItem {
        int bitrate;
        uint code;
    }
|—————Node:struct Text: struct
|—————Node:type_identifier Text: BitrateItem
|—————Node:field_declaration_list Text: {
        int bitrate;
        uint code;
    }
|——————Node:{ Text: {
|——————Node:field_declaration Text: int bitrate;
|———————Node:primitive_type Text: int
|———————Node:field_identifier Text: bitrate
|———————Node:; Text: ;
|——————Node:field_declaration Text: uint code;
|———————Node:type_identifier Text: uint
|———————Node:field_identifier Text: code
|———————Node:; Text: ;
|——————Node:} Text: }
|————Node:init_declarator Text: bitrateTable[] = {
        {   10000, USBCAN_BAUDEX_10kBit  },
        {   20000, USBCAN_BAUDEX_20kBit  },
        {   50000, USBCAN_BAUDEX_50kBit  },
        {  100000, USBCAN_BAUDEX_100kBit },
        {  125000, USBCAN_BAUDEX_125kBit },
        {  250000, USBCAN_BAUDEX_250kBit },
        {  500000, USBCAN_BAUDEX_500kBit },
        {  800000, USBCAN_BAUDEX_800kBit },
        { 1000000, USBCAN_BAUDEX_1MBit   }
    }
|—————Node:array_declarator Text: bitrateTable[]
|——————Node:identifier Text: bitrateTable
|——————Node:[ Text: [
|——————Node:] Text: ]
|—————Node:= Text: =
|—————Node:initializer_list Text: {
        {   10000, USBCAN_BAUDEX_10kBit  },
        {   20000, USBCAN_BAUDEX_20kBit  },
        {   50000, USBCAN_BAUDEX_50kBit  },
        {  100000, USBCAN_BAUDEX_100kBit },
        {  125000, USBCAN_BAUDEX_125kBit },
        {  250000, USBCAN_BAUDEX_250kBit },
        {  500000, USBCAN_BAUDEX_500kBit },
        {  800000, USBCAN_BAUDEX_800kBit },
        { 1000000, USBCAN_BAUDEX_1MBit   }
    }
|——————Node:{ Text: {
|——————Node:initializer_list Text: {   10000, USBCAN_BAUDEX_10kBit  }
|———————Node:{ Text: {
|———————Node:number_literal Text: 10000
|———————Node:, Text: ,
|———————Node:identifier Text: USBCAN_BAUDEX_10kBit
|———————Node:} Text: }
|——————Node:, Text: ,
|——————Node:initializer_list Text: {   20000, USBCAN_BAUDEX_20kBit  }
|———————Node:{ Text: {
|———————Node:number_literal Text: 20000
|———————Node:, Text: ,
|———————Node:identifier Text: USBCAN_BAUDEX_20kBit
|———————Node:} Text: }
|——————Node:, Text: ,
|——————Node:initializer_list Text: {   50000, USBCAN_BAUDEX_50kBit  }
|———————Node:{ Text: {
|———————Node:number_literal Text: 50000
|———————Node:, Text: ,
|———————Node:identifier Text: USBCAN_BAUDEX_50kBit
|———————Node:} Text: }
|——————Node:, Text: ,
|——————Node:initializer_list Text: {  100000, USBCAN_BAUDEX_100kBit }
|———————Node:{ Text: {
|———————Node:number_literal Text: 100000
|———————Node:, Text: ,
|———————Node:identifier Text: USBCAN_BAUDEX_100kBit
|———————Node:} Text: }
|——————Node:, Text: ,
|——————Node:initializer_list Text: {  125000, USBCAN_BAUDEX_125kBit }
|———————Node:{ Text: {
|———————Node:number_literal Text: 125000
|———————Node:, Text: ,
|———————Node:identifier Text: USBCAN_BAUDEX_125kBit
|———————Node:} Text: }
|——————Node:, Text: ,
|——————Node:initializer_list Text: {  250000, USBCAN_BAUDEX_250kBit }
|———————Node:{ Text: {
|———————Node:number_literal Text: 250000
|———————Node:, Text: ,
|———————Node:identifier Text: USBCAN_BAUDEX_250kBit
|———————Node:} Text: }
|——————Node:, Text: ,
|——————Node:initializer_list Text: {  500000, USBCAN_BAUDEX_500kBit }
|———————Node:{ Text: {
|———————Node:number_literal Text: 500000
|———————Node:, Text: ,
|———————Node:identifier Text: USBCAN_BAUDEX_500kBit
|———————Node:} Text: }
|——————Node:, Text: ,
|——————Node:initializer_list Text: {  800000, USBCAN_BAUDEX_800kBit }
|———————Node:{ Text: {
|———————Node:number_literal Text: 800000
|———————Node:, Text: ,
|———————Node:identifier Text: USBCAN_BAUDEX_800kBit
|———————Node:} Text: }
|——————Node:, Text: ,
|——————Node:initializer_list Text: { 1000000, USBCAN_BAUDEX_1MBit   }
|———————Node:{ Text: {
|———————Node:number_literal Text: 1000000
|———————Node:, Text: ,
|———————Node:identifier Text: USBCAN_BAUDEX_1MBit
|———————Node:} Text: }
|——————Node:} Text: }
|————Node:; Text: ;
|———Node:declaration Text: const int entries = (sizeof(bitrateTable) / sizeof(*bitrateTable));
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: int
|————Node:init_declarator Text: entries = (sizeof(bitrateTable) / sizeof(*bitrateTable))
|—————Node:identifier Text: entries
|—————Node:= Text: =
|—————Node:parenthesized_expression Text: (sizeof(bitrateTable) / sizeof(*bitrateTable))
|——————Node:( Text: (
|——————Node:binary_expression Text: sizeof(bitrateTable) / sizeof(*bitrateTable)
|———————Node:sizeof_expression Text: sizeof(bitrateTable)
|————————Node:sizeof Text: sizeof
|————————Node:parenthesized_expression Text: (bitrateTable)
|—————————Node:( Text: (
|—————————Node:identifier Text: bitrateTable
|—————————Node:) Text: )
|———————Node:/ Text: /
|———————Node:sizeof_expression Text: sizeof(*bitrateTable)
|————————Node:sizeof Text: sizeof
|————————Node:parenthesized_expression Text: (*bitrateTable)
|—————————Node:( Text: (
|—————————Node:pointer_expression Text: *bitrateTable
|——————————Node:* Text: *
|——————————Node:identifier Text: bitrateTable
|—————————Node:) Text: )
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:for_statement Text: for (int i = 0; i < entries; ++i)
        if (bitrateTable[i].bitrate == bitrate)
            return bitrateTable[i].code;
|————Node:for Text: for
|————Node:( Text: (
|————Node:declaration Text: int i = 0;
|—————Node:primitive_type Text: int
|—————Node:init_declarator Text: i = 0
|——————Node:identifier Text: i
|——————Node:= Text: =
|——————Node:number_literal Text: 0
|—————Node:; Text: ;
|————Node:binary_expression Text: i < entries
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:identifier Text: entries
|————Node:; Text: ;
|————Node:update_expression Text: ++i
|—————Node:++ Text: ++
|—————Node:identifier Text: i
|————Node:) Text: )
|————Node:if_statement Text: if (bitrateTable[i].bitrate == bitrate)
            return bitrateTable[i].code;
|—————Node:if Text: if
|—————Node:condition_clause Text: (bitrateTable[i].bitrate == bitrate)
|——————Node:( Text: (
|——————Node:binary_expression Text: bitrateTable[i].bitrate == bitrate
|———————Node:field_expression Text: bitrateTable[i].bitrate
|————————Node:subscript_expression Text: bitrateTable[i]
|—————————Node:identifier Text: bitrateTable
|—————————Node:subscript_argument_list Text: [i]
|——————————Node:[ Text: [
|——————————Node:identifier Text: i
|——————————Node:] Text: ]
|————————Node:. Text: .
|————————Node:field_identifier Text: bitrate
|———————Node:== Text: ==
|———————Node:identifier Text: bitrate
|——————Node:) Text: )
|—————Node:return_statement Text: return bitrateTable[i].code;
|——————Node:return Text: return
|——————Node:field_expression Text: bitrateTable[i].code
|———————Node:subscript_expression Text: bitrateTable[i]
|————————Node:identifier Text: bitrateTable
|————————Node:subscript_argument_list Text: [i]
|—————————Node:[ Text: [
|—————————Node:identifier Text: i
|—————————Node:] Text: ]
|———————Node:. Text: .
|———————Node:field_identifier Text: code
|——————Node:; Text: ;
|———Node:return_statement Text: return 0;
|————Node:return Text: return
|————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void IncomingEventHandler::customEvent(QEvent *event)
{
    dptr->eventHandler(event);
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: IncomingEventHandler::customEvent(QEvent *event)
|———Node:qualified_identifier Text: IncomingEventHandler::customEvent
|————Node:namespace_identifier Text: IncomingEventHandler
|————Node::: Text: ::
|————Node:identifier Text: customEvent
|———Node:parameter_list Text: (QEvent *event)
|————Node:( Text: (
|————Node:parameter_declaration Text: QEvent *event
|—————Node:type_identifier Text: QEvent
|—————Node:pointer_declarator Text: *event
|——————Node:* Text: *
|——————Node:identifier Text: event
|————Node:) Text: )
|——Node:compound_statement Text: {
    dptr->eventHandler(event);
}
|———Node:{ Text: {
|———Node:expression_statement Text: dptr->eventHandler(event);
|————Node:call_expression Text: dptr->eventHandler(event)
|—————Node:field_expression Text: dptr->eventHandler
|——————Node:identifier Text: dptr
|——————Node:-> Text: ->
|——————Node:field_identifier Text: eventHandler
|—————Node:argument_list Text: (event)
|——————Node:( Text: (
|——————Node:identifier Text: event
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: static void DRV_CALLBACK_TYPE ucanCallback(tUcanHandle, quint32 event, quint8, void *args)
{
    QEvent::Type type = static_cast<QEvent::Type>(QEvent::User + event);
    IncomingEventHandler *handler = static_cast<IncomingEventHandler *>(args);
    qApp->postEvent(handler, new QEvent(type));
}
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:primitive_type Text: void
|——Node:function_declarator Text: DRV_CALLBACK_TYPE ucanCallback(tUcanHandle, quint32 event, quint8, void *args)
|———Node:qualified_identifier Text: DRV_CALLBACK_TYPE ucanCallback
|————Node:namespace_identifier Text: DRV_CALLBACK_TYPE
|————Node::: Text: 
|————Node:identifier Text: ucanCallback
|———Node:parameter_list Text: (tUcanHandle, quint32 event, quint8, void *args)
|————Node:( Text: (
|————Node:parameter_declaration Text: tUcanHandle
|—————Node:type_identifier Text: tUcanHandle
|————Node:, Text: ,
|————Node:parameter_declaration Text: quint32 event
|—————Node:type_identifier Text: quint32
|—————Node:identifier Text: event
|————Node:, Text: ,
|————Node:parameter_declaration Text: quint8
|—————Node:type_identifier Text: quint8
|————Node:, Text: ,
|————Node:parameter_declaration Text: void *args
|—————Node:primitive_type Text: void
|—————Node:pointer_declarator Text: *args
|——————Node:* Text: *
|——————Node:identifier Text: args
|————Node:) Text: )
|——Node:compound_statement Text: {
    QEvent::Type type = static_cast<QEvent::Type>(QEvent::User + event);
    IncomingEventHandler *handler = static_cast<IncomingEventHandler *>(args);
    qApp->postEvent(handler, new QEvent(type));
}
|———Node:{ Text: {
|———Node:declaration Text: QEvent::Type type = static_cast<QEvent::Type>(QEvent::User + event);
|————Node:qualified_identifier Text: QEvent::Type
|—————Node:namespace_identifier Text: QEvent
|—————Node::: Text: ::
|—————Node:type_identifier Text: Type
|————Node:init_declarator Text: type = static_cast<QEvent::Type>(QEvent::User + event)
|—————Node:identifier Text: type
|—————Node:= Text: =
|—————Node:call_expression Text: static_cast<QEvent::Type>(QEvent::User + event)
|——————Node:template_function Text: static_cast<QEvent::Type>
|———————Node:identifier Text: static_cast
|———————Node:template_argument_list Text: <QEvent::Type>
|————————Node:< Text: <
|————————Node:type_descriptor Text: QEvent::Type
|—————————Node:qualified_identifier Text: QEvent::Type
|——————————Node:namespace_identifier Text: QEvent
|——————————Node::: Text: ::
|——————————Node:type_identifier Text: Type
|————————Node:> Text: >
|——————Node:argument_list Text: (QEvent::User + event)
|———————Node:( Text: (
|———————Node:binary_expression Text: QEvent::User + event
|————————Node:qualified_identifier Text: QEvent::User
|—————————Node:namespace_identifier Text: QEvent
|—————————Node::: Text: ::
|—————————Node:identifier Text: User
|————————Node:+ Text: +
|————————Node:identifier Text: event
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: IncomingEventHandler *handler = static_cast<IncomingEventHandler *>(args);
|————Node:type_identifier Text: IncomingEventHandler
|————Node:init_declarator Text: *handler = static_cast<IncomingEventHandler *>(args)
|—————Node:pointer_declarator Text: *handler
|——————Node:* Text: *
|——————Node:identifier Text: handler
|—————Node:= Text: =
|—————Node:call_expression Text: static_cast<IncomingEventHandler *>(args)
|——————Node:template_function Text: static_cast<IncomingEventHandler *>
|———————Node:identifier Text: static_cast
|———————Node:template_argument_list Text: <IncomingEventHandler *>
|————————Node:< Text: <
|————————Node:type_descriptor Text: IncomingEventHandler *
|—————————Node:type_identifier Text: IncomingEventHandler
|—————————Node:abstract_pointer_declarator Text: *
|——————————Node:* Text: *
|————————Node:> Text: >
|——————Node:argument_list Text: (args)
|———————Node:( Text: (
|———————Node:identifier Text: args
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: qApp->postEvent(handler, new QEvent(type));
|————Node:call_expression Text: qApp->postEvent(handler, new QEvent(type))
|—————Node:field_expression Text: qApp->postEvent
|——————Node:identifier Text: qApp
|——————Node:-> Text: ->
|——————Node:field_identifier Text: postEvent
|—————Node:argument_list Text: (handler, new QEvent(type))
|——————Node:( Text: (
|——————Node:identifier Text: handler
|——————Node:, Text: ,
|——————Node:new_expression Text: new QEvent(type)
|———————Node:new Text: new
|———————Node:type_identifier Text: QEvent
|———————Node:argument_list Text: (type)
|————————Node:( Text: (
|————————Node:identifier Text: type
|————————Node:) Text: )
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: bool SystecCanBackendPrivate::open()
{
    Q_Q(SystecCanBackend);

    const UCANRET initHardwareRes = ::UcanInitHardwareEx(&handle, device, ucanCallback, incomingEventHandler);
    if (Q_UNLIKELY(initHardwareRes != USBCAN_SUCCESSFUL)) {
        q->setError(systemErrorString(initHardwareRes), QCanBusDevice::ConnectionError);
        return false;
    }

    const int bitrate = q->configurationParameter(QCanBusDevice::BitRateKey).toInt();
    const bool receiveOwn = q->configurationParameter(QCanBusDevice::ReceiveOwnKey).toBool();

    tUcanInitCanParam param = {};
    param.m_dwSize = sizeof(param);
    param.m_bMode  = receiveOwn ? kUcanModeTxEcho : kUcanModeNormal;
    param.m_bOCR   = USBCAN_OCR_DEFAULT;
    param.m_dwACR  = USBCAN_ACR_ALL;
    param.m_dwAMR  = USBCAN_AMR_ALL;
    param.m_dwBaudrate = bitrateCodeFromBitrate(bitrate);
    param.m_wNrOfRxBufferEntries = USBCAN_DEFAULT_BUFFER_ENTRIES;
    param.m_wNrOfTxBufferEntries = USBCAN_DEFAULT_BUFFER_ENTRIES;

    const UCANRET initCanResult = ::UcanInitCanEx2(handle, channel, &param);
    if (Q_UNLIKELY(initCanResult != USBCAN_SUCCESSFUL)) {
        ::UcanDeinitHardware(handle);
        q->setError(systemErrorString(initCanResult), QCanBusDevice::ConnectionError);
        return false;
    }

    return true;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: SystecCanBackendPrivate::open()
|———Node:qualified_identifier Text: SystecCanBackendPrivate::open
|————Node:namespace_identifier Text: SystecCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: open
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(SystecCanBackend);

    const UCANRET initHardwareRes = ::UcanInitHardwareEx(&handle, device, ucanCallback, incomingEventHandler);
    if (Q_UNLIKELY(initHardwareRes != USBCAN_SUCCESSFUL)) {
        q->setError(systemErrorString(initHardwareRes), QCanBusDevice::ConnectionError);
        return false;
    }

    const int bitrate = q->configurationParameter(QCanBusDevice::BitRateKey).toInt();
    const bool receiveOwn = q->configurationParameter(QCanBusDevice::ReceiveOwnKey).toBool();

    tUcanInitCanParam param = {};
    param.m_dwSize = sizeof(param);
    param.m_bMode  = receiveOwn ? kUcanModeTxEcho : kUcanModeNormal;
    param.m_bOCR   = USBCAN_OCR_DEFAULT;
    param.m_dwACR  = USBCAN_ACR_ALL;
    param.m_dwAMR  = USBCAN_AMR_ALL;
    param.m_dwBaudrate = bitrateCodeFromBitrate(bitrate);
    param.m_wNrOfRxBufferEntries = USBCAN_DEFAULT_BUFFER_ENTRIES;
    param.m_wNrOfTxBufferEntries = USBCAN_DEFAULT_BUFFER_ENTRIES;

    const UCANRET initCanResult = ::UcanInitCanEx2(handle, channel, &param);
    if (Q_UNLIKELY(initCanResult != USBCAN_SUCCESSFUL)) {
        ::UcanDeinitHardware(handle);
        q->setError(systemErrorString(initCanResult), QCanBusDevice::ConnectionError);
        return false;
    }

    return true;
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(SystecCanBackend);
|————Node:call_expression Text: Q_Q(SystecCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (SystecCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: SystecCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: const UCANRET initHardwareRes = ::UcanInitHardwareEx(&handle, device, ucanCallback, incomingEventHandler);
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: UCANRET
|————Node:init_declarator Text: initHardwareRes = ::UcanInitHardwareEx(&handle, device, ucanCallback, incomingEventHandler)
|—————Node:identifier Text: initHardwareRes
|—————Node:= Text: =
|—————Node:call_expression Text: ::UcanInitHardwareEx(&handle, device, ucanCallback, incomingEventHandler)
|——————Node:qualified_identifier Text: ::UcanInitHardwareEx
|———————Node::: Text: ::
|———————Node:identifier Text: UcanInitHardwareEx
|——————Node:argument_list Text: (&handle, device, ucanCallback, incomingEventHandler)
|———————Node:( Text: (
|———————Node:pointer_expression Text: &handle
|————————Node:& Text: &
|————————Node:identifier Text: handle
|———————Node:, Text: ,
|———————Node:identifier Text: device
|———————Node:, Text: ,
|———————Node:identifier Text: ucanCallback
|———————Node:, Text: ,
|———————Node:identifier Text: incomingEventHandler
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(initHardwareRes != USBCAN_SUCCESSFUL)) {
        q->setError(systemErrorString(initHardwareRes), QCanBusDevice::ConnectionError);
        return false;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(initHardwareRes != USBCAN_SUCCESSFUL))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(initHardwareRes != USBCAN_SUCCESSFUL)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (initHardwareRes != USBCAN_SUCCESSFUL)
|———————Node:( Text: (
|———————Node:binary_expression Text: initHardwareRes != USBCAN_SUCCESSFUL
|————————Node:identifier Text: initHardwareRes
|————————Node:!= Text: !=
|————————Node:identifier Text: USBCAN_SUCCESSFUL
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        q->setError(systemErrorString(initHardwareRes), QCanBusDevice::ConnectionError);
        return false;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: q->setError(systemErrorString(initHardwareRes), QCanBusDevice::ConnectionError);
|——————Node:call_expression Text: q->setError(systemErrorString(initHardwareRes), QCanBusDevice::ConnectionError)
|———————Node:field_expression Text: q->setError
|————————Node:identifier Text: q
|————————Node:-> Text: ->
|————————Node:field_identifier Text: setError
|———————Node:argument_list Text: (systemErrorString(initHardwareRes), QCanBusDevice::ConnectionError)
|————————Node:( Text: (
|————————Node:call_expression Text: systemErrorString(initHardwareRes)
|—————————Node:identifier Text: systemErrorString
|—————————Node:argument_list Text: (initHardwareRes)
|——————————Node:( Text: (
|——————————Node:identifier Text: initHardwareRes
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:qualified_identifier Text: QCanBusDevice::ConnectionError
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:identifier Text: ConnectionError
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return false;
|——————Node:return Text: return
|——————Node:false Text: false
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:declaration Text: const int bitrate = q->configurationParameter(QCanBusDevice::BitRateKey).toInt();
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: int
|————Node:init_declarator Text: bitrate = q->configurationParameter(QCanBusDevice::BitRateKey).toInt()
|—————Node:identifier Text: bitrate
|—————Node:= Text: =
|—————Node:call_expression Text: q->configurationParameter(QCanBusDevice::BitRateKey).toInt()
|——————Node:field_expression Text: q->configurationParameter(QCanBusDevice::BitRateKey).toInt
|———————Node:call_expression Text: q->configurationParameter(QCanBusDevice::BitRateKey)
|————————Node:field_expression Text: q->configurationParameter
|—————————Node:identifier Text: q
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: configurationParameter
|————————Node:argument_list Text: (QCanBusDevice::BitRateKey)
|—————————Node:( Text: (
|—————————Node:qualified_identifier Text: QCanBusDevice::BitRateKey
|——————————Node:namespace_identifier Text: QCanBusDevice
|——————————Node::: Text: ::
|——————————Node:identifier Text: BitRateKey
|—————————Node:) Text: )
|———————Node:. Text: .
|———————Node:field_identifier Text: toInt
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: const bool receiveOwn = q->configurationParameter(QCanBusDevice::ReceiveOwnKey).toBool();
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: bool
|————Node:init_declarator Text: receiveOwn = q->configurationParameter(QCanBusDevice::ReceiveOwnKey).toBool()
|—————Node:identifier Text: receiveOwn
|—————Node:= Text: =
|—————Node:call_expression Text: q->configurationParameter(QCanBusDevice::ReceiveOwnKey).toBool()
|——————Node:field_expression Text: q->configurationParameter(QCanBusDevice::ReceiveOwnKey).toBool
|———————Node:call_expression Text: q->configurationParameter(QCanBusDevice::ReceiveOwnKey)
|————————Node:field_expression Text: q->configurationParameter
|—————————Node:identifier Text: q
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: configurationParameter
|————————Node:argument_list Text: (QCanBusDevice::ReceiveOwnKey)
|—————————Node:( Text: (
|—————————Node:qualified_identifier Text: QCanBusDevice::ReceiveOwnKey
|——————————Node:namespace_identifier Text: QCanBusDevice
|——————————Node::: Text: ::
|——————————Node:identifier Text: ReceiveOwnKey
|—————————Node:) Text: )
|———————Node:. Text: .
|———————Node:field_identifier Text: toBool
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: tUcanInitCanParam param = {};
|————Node:type_identifier Text: tUcanInitCanParam
|————Node:init_declarator Text: param = {}
|—————Node:identifier Text: param
|—————Node:= Text: =
|—————Node:initializer_list Text: {}
|——————Node:{ Text: {
|——————Node:} Text: }
|————Node:; Text: ;
|———Node:expression_statement Text: param.m_dwSize = sizeof(param);
|————Node:assignment_expression Text: param.m_dwSize = sizeof(param)
|—————Node:field_expression Text: param.m_dwSize
|——————Node:identifier Text: param
|——————Node:. Text: .
|——————Node:field_identifier Text: m_dwSize
|—————Node:= Text: =
|—————Node:sizeof_expression Text: sizeof(param)
|——————Node:sizeof Text: sizeof
|——————Node:parenthesized_expression Text: (param)
|———————Node:( Text: (
|———————Node:identifier Text: param
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: param.m_bMode  = receiveOwn ? kUcanModeTxEcho : kUcanModeNormal;
|————Node:assignment_expression Text: param.m_bMode  = receiveOwn ? kUcanModeTxEcho : kUcanModeNormal
|—————Node:field_expression Text: param.m_bMode
|——————Node:identifier Text: param
|——————Node:. Text: .
|——————Node:field_identifier Text: m_bMode
|—————Node:= Text: =
|—————Node:conditional_expression Text: receiveOwn ? kUcanModeTxEcho : kUcanModeNormal
|——————Node:identifier Text: receiveOwn
|——————Node:? Text: ?
|——————Node:identifier Text: kUcanModeTxEcho
|——————Node:: Text: :
|——————Node:identifier Text: kUcanModeNormal
|————Node:; Text: ;
|———Node:expression_statement Text: param.m_bOCR   = USBCAN_OCR_DEFAULT;
|————Node:assignment_expression Text: param.m_bOCR   = USBCAN_OCR_DEFAULT
|—————Node:field_expression Text: param.m_bOCR
|——————Node:identifier Text: param
|——————Node:. Text: .
|——————Node:field_identifier Text: m_bOCR
|—————Node:= Text: =
|—————Node:identifier Text: USBCAN_OCR_DEFAULT
|————Node:; Text: ;
|———Node:expression_statement Text: param.m_dwACR  = USBCAN_ACR_ALL;
|————Node:assignment_expression Text: param.m_dwACR  = USBCAN_ACR_ALL
|—————Node:field_expression Text: param.m_dwACR
|——————Node:identifier Text: param
|——————Node:. Text: .
|——————Node:field_identifier Text: m_dwACR
|—————Node:= Text: =
|—————Node:identifier Text: USBCAN_ACR_ALL
|————Node:; Text: ;
|———Node:expression_statement Text: param.m_dwAMR  = USBCAN_AMR_ALL;
|————Node:assignment_expression Text: param.m_dwAMR  = USBCAN_AMR_ALL
|—————Node:field_expression Text: param.m_dwAMR
|——————Node:identifier Text: param
|——————Node:. Text: .
|——————Node:field_identifier Text: m_dwAMR
|—————Node:= Text: =
|—————Node:identifier Text: USBCAN_AMR_ALL
|————Node:; Text: ;
|———Node:expression_statement Text: param.m_dwBaudrate = bitrateCodeFromBitrate(bitrate);
|————Node:assignment_expression Text: param.m_dwBaudrate = bitrateCodeFromBitrate(bitrate)
|—————Node:field_expression Text: param.m_dwBaudrate
|——————Node:identifier Text: param
|——————Node:. Text: .
|——————Node:field_identifier Text: m_dwBaudrate
|—————Node:= Text: =
|—————Node:call_expression Text: bitrateCodeFromBitrate(bitrate)
|——————Node:identifier Text: bitrateCodeFromBitrate
|——————Node:argument_list Text: (bitrate)
|———————Node:( Text: (
|———————Node:identifier Text: bitrate
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: param.m_wNrOfRxBufferEntries = USBCAN_DEFAULT_BUFFER_ENTRIES;
|————Node:assignment_expression Text: param.m_wNrOfRxBufferEntries = USBCAN_DEFAULT_BUFFER_ENTRIES
|—————Node:field_expression Text: param.m_wNrOfRxBufferEntries
|——————Node:identifier Text: param
|——————Node:. Text: .
|——————Node:field_identifier Text: m_wNrOfRxBufferEntries
|—————Node:= Text: =
|—————Node:identifier Text: USBCAN_DEFAULT_BUFFER_ENTRIES
|————Node:; Text: ;
|———Node:expression_statement Text: param.m_wNrOfTxBufferEntries = USBCAN_DEFAULT_BUFFER_ENTRIES;
|————Node:assignment_expression Text: param.m_wNrOfTxBufferEntries = USBCAN_DEFAULT_BUFFER_ENTRIES
|—————Node:field_expression Text: param.m_wNrOfTxBufferEntries
|——————Node:identifier Text: param
|——————Node:. Text: .
|——————Node:field_identifier Text: m_wNrOfTxBufferEntries
|—————Node:= Text: =
|—————Node:identifier Text: USBCAN_DEFAULT_BUFFER_ENTRIES
|————Node:; Text: ;
|———Node:declaration Text: const UCANRET initCanResult = ::UcanInitCanEx2(handle, channel, &param);
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: UCANRET
|————Node:init_declarator Text: initCanResult = ::UcanInitCanEx2(handle, channel, &param)
|—————Node:identifier Text: initCanResult
|—————Node:= Text: =
|—————Node:call_expression Text: ::UcanInitCanEx2(handle, channel, &param)
|——————Node:qualified_identifier Text: ::UcanInitCanEx2
|———————Node::: Text: ::
|———————Node:identifier Text: UcanInitCanEx2
|——————Node:argument_list Text: (handle, channel, &param)
|———————Node:( Text: (
|———————Node:identifier Text: handle
|———————Node:, Text: ,
|———————Node:identifier Text: channel
|———————Node:, Text: ,
|———————Node:pointer_expression Text: &param
|————————Node:& Text: &
|————————Node:identifier Text: param
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(initCanResult != USBCAN_SUCCESSFUL)) {
        ::UcanDeinitHardware(handle);
        q->setError(systemErrorString(initCanResult), QCanBusDevice::ConnectionError);
        return false;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(initCanResult != USBCAN_SUCCESSFUL))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(initCanResult != USBCAN_SUCCESSFUL)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (initCanResult != USBCAN_SUCCESSFUL)
|———————Node:( Text: (
|———————Node:binary_expression Text: initCanResult != USBCAN_SUCCESSFUL
|————————Node:identifier Text: initCanResult
|————————Node:!= Text: !=
|————————Node:identifier Text: USBCAN_SUCCESSFUL
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        ::UcanDeinitHardware(handle);
        q->setError(systemErrorString(initCanResult), QCanBusDevice::ConnectionError);
        return false;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: ::UcanDeinitHardware(handle);
|——————Node:call_expression Text: ::UcanDeinitHardware(handle)
|———————Node:qualified_identifier Text: ::UcanDeinitHardware
|————————Node::: Text: ::
|————————Node:identifier Text: UcanDeinitHardware
|———————Node:argument_list Text: (handle)
|————————Node:( Text: (
|————————Node:identifier Text: handle
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: q->setError(systemErrorString(initCanResult), QCanBusDevice::ConnectionError);
|——————Node:call_expression Text: q->setError(systemErrorString(initCanResult), QCanBusDevice::ConnectionError)
|———————Node:field_expression Text: q->setError
|————————Node:identifier Text: q
|————————Node:-> Text: ->
|————————Node:field_identifier Text: setError
|———————Node:argument_list Text: (systemErrorString(initCanResult), QCanBusDevice::ConnectionError)
|————————Node:( Text: (
|————————Node:call_expression Text: systemErrorString(initCanResult)
|—————————Node:identifier Text: systemErrorString
|—————————Node:argument_list Text: (initCanResult)
|——————————Node:( Text: (
|——————————Node:identifier Text: initCanResult
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:qualified_identifier Text: QCanBusDevice::ConnectionError
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:identifier Text: ConnectionError
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return false;
|——————Node:return Text: return
|——————Node:false Text: false
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return true;
|————Node:return Text: return
|————Node:true Text: true
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void SystecCanBackendPrivate::close()
{
    Q_Q(SystecCanBackend);

    enableWriteNotification(false);

    if (outgoingEventNotifier) {
        delete outgoingEventNotifier;
        outgoingEventNotifier = nullptr;
    }

    const UCANRET deinitCanRes = UcanDeinitCanEx(handle, channel);
    if (Q_UNLIKELY(deinitCanRes != USBCAN_SUCCESSFUL))
        q->setError(systemErrorString(deinitCanRes), QCanBusDevice::ConfigurationError);

    // TODO: other channel keeps working?
    const UCANRET deinitHardwareRes = UcanDeinitHardware(handle);
    if (Q_UNLIKELY(deinitHardwareRes != USBCAN_SUCCESSFUL))
        emit q->setError(systemErrorString(deinitHardwareRes), QCanBusDevice::ConnectionError);
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: SystecCanBackendPrivate::close()
|———Node:qualified_identifier Text: SystecCanBackendPrivate::close
|————Node:namespace_identifier Text: SystecCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: close
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(SystecCanBackend);

    enableWriteNotification(false);

    if (outgoingEventNotifier) {
        delete outgoingEventNotifier;
        outgoingEventNotifier = nullptr;
    }

    const UCANRET deinitCanRes = UcanDeinitCanEx(handle, channel);
    if (Q_UNLIKELY(deinitCanRes != USBCAN_SUCCESSFUL))
        q->setError(systemErrorString(deinitCanRes), QCanBusDevice::ConfigurationError);

    // TODO: other channel keeps working?
    const UCANRET deinitHardwareRes = UcanDeinitHardware(handle);
    if (Q_UNLIKELY(deinitHardwareRes != USBCAN_SUCCESSFUL))
        emit q->setError(systemErrorString(deinitHardwareRes), QCanBusDevice::ConnectionError);
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(SystecCanBackend);
|————Node:call_expression Text: Q_Q(SystecCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (SystecCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: SystecCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: enableWriteNotification(false);
|————Node:call_expression Text: enableWriteNotification(false)
|—————Node:identifier Text: enableWriteNotification
|—————Node:argument_list Text: (false)
|——————Node:( Text: (
|——————Node:false Text: false
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (outgoingEventNotifier) {
        delete outgoingEventNotifier;
        outgoingEventNotifier = nullptr;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (outgoingEventNotifier)
|—————Node:( Text: (
|—————Node:identifier Text: outgoingEventNotifier
|—————Node:) Text: )
|————Node:compound_statement Text: {
        delete outgoingEventNotifier;
        outgoingEventNotifier = nullptr;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: delete outgoingEventNotifier;
|——————Node:delete_expression Text: delete outgoingEventNotifier
|———————Node:delete Text: delete
|———————Node:identifier Text: outgoingEventNotifier
|——————Node:; Text: ;
|—————Node:expression_statement Text: outgoingEventNotifier = nullptr;
|——————Node:assignment_expression Text: outgoingEventNotifier = nullptr
|———————Node:identifier Text: outgoingEventNotifier
|———————Node:= Text: =
|———————Node:null Text: nullptr
|————————Node:nullptr Text: nullptr
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:declaration Text: const UCANRET deinitCanRes = UcanDeinitCanEx(handle, channel);
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: UCANRET
|————Node:init_declarator Text: deinitCanRes = UcanDeinitCanEx(handle, channel)
|—————Node:identifier Text: deinitCanRes
|—————Node:= Text: =
|—————Node:call_expression Text: UcanDeinitCanEx(handle, channel)
|——————Node:identifier Text: UcanDeinitCanEx
|——————Node:argument_list Text: (handle, channel)
|———————Node:( Text: (
|———————Node:identifier Text: handle
|———————Node:, Text: ,
|———————Node:identifier Text: channel
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(deinitCanRes != USBCAN_SUCCESSFUL))
        q->setError(systemErrorString(deinitCanRes), QCanBusDevice::ConfigurationError);
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(deinitCanRes != USBCAN_SUCCESSFUL))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(deinitCanRes != USBCAN_SUCCESSFUL)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (deinitCanRes != USBCAN_SUCCESSFUL)
|———————Node:( Text: (
|———————Node:binary_expression Text: deinitCanRes != USBCAN_SUCCESSFUL
|————————Node:identifier Text: deinitCanRes
|————————Node:!= Text: !=
|————————Node:identifier Text: USBCAN_SUCCESSFUL
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:expression_statement Text: q->setError(systemErrorString(deinitCanRes), QCanBusDevice::ConfigurationError);
|—————Node:call_expression Text: q->setError(systemErrorString(deinitCanRes), QCanBusDevice::ConfigurationError)
|——————Node:field_expression Text: q->setError
|———————Node:identifier Text: q
|———————Node:-> Text: ->
|———————Node:field_identifier Text: setError
|——————Node:argument_list Text: (systemErrorString(deinitCanRes), QCanBusDevice::ConfigurationError)
|———————Node:( Text: (
|———————Node:call_expression Text: systemErrorString(deinitCanRes)
|————————Node:identifier Text: systemErrorString
|————————Node:argument_list Text: (deinitCanRes)
|—————————Node:( Text: (
|—————————Node:identifier Text: deinitCanRes
|—————————Node:) Text: )
|———————Node:, Text: ,
|———————Node:qualified_identifier Text: QCanBusDevice::ConfigurationError
|————————Node:namespace_identifier Text: QCanBusDevice
|————————Node::: Text: ::
|————————Node:identifier Text: ConfigurationError
|———————Node:) Text: )
|—————Node:; Text: ;
|———Node:comment
|———Node:declaration Text: const UCANRET deinitHardwareRes = UcanDeinitHardware(handle);
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: UCANRET
|————Node:init_declarator Text: deinitHardwareRes = UcanDeinitHardware(handle)
|—————Node:identifier Text: deinitHardwareRes
|—————Node:= Text: =
|—————Node:call_expression Text: UcanDeinitHardware(handle)
|——————Node:identifier Text: UcanDeinitHardware
|——————Node:argument_list Text: (handle)
|———————Node:( Text: (
|———————Node:identifier Text: handle
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(deinitHardwareRes != USBCAN_SUCCESSFUL))
        emit q->setError(systemErrorString(deinitHardwareRes), QCanBusDevice::ConnectionError);
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(deinitHardwareRes != USBCAN_SUCCESSFUL))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(deinitHardwareRes != USBCAN_SUCCESSFUL)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (deinitHardwareRes != USBCAN_SUCCESSFUL)
|———————Node:( Text: (
|———————Node:binary_expression Text: deinitHardwareRes != USBCAN_SUCCESSFUL
|————————Node:identifier Text: deinitHardwareRes
|————————Node:!= Text: !=
|————————Node:identifier Text: USBCAN_SUCCESSFUL
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:expression_statement Text: emit q->setError(systemErrorString(deinitHardwareRes), QCanBusDevice::ConnectionError);
|—————Node:call_expression Text: emit q->setError(systemErrorString(deinitHardwareRes), QCanBusDevice::ConnectionError)
|——————Node:field_expression Text: emit q->setError
|———————Node:identifier Text: emit
|———————Node:ERROR Text: q
|————————Node:identifier Text: q
|———————Node:-> Text: ->
|———————Node:field_identifier Text: setError
|——————Node:argument_list Text: (systemErrorString(deinitHardwareRes), QCanBusDevice::ConnectionError)
|———————Node:( Text: (
|———————Node:call_expression Text: systemErrorString(deinitHardwareRes)
|————————Node:identifier Text: systemErrorString
|————————Node:argument_list Text: (deinitHardwareRes)
|—————————Node:( Text: (
|—————————Node:identifier Text: deinitHardwareRes
|—————————Node:) Text: )
|———————Node:, Text: ,
|———————Node:qualified_identifier Text: QCanBusDevice::ConnectionError
|————————Node:namespace_identifier Text: QCanBusDevice
|————————Node::: Text: ::
|————————Node:identifier Text: ConnectionError
|———————Node:) Text: )
|—————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void SystecCanBackendPrivate::eventHandler(QEvent *event)
{
    const int code = event->type() - QEvent::User;

    if (code == USBCAN_EVENT_RECEIVE)
        readAllReceivedMessages();
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: SystecCanBackendPrivate::eventHandler(QEvent *event)
|———Node:qualified_identifier Text: SystecCanBackendPrivate::eventHandler
|————Node:namespace_identifier Text: SystecCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: eventHandler
|———Node:parameter_list Text: (QEvent *event)
|————Node:( Text: (
|————Node:parameter_declaration Text: QEvent *event
|—————Node:type_identifier Text: QEvent
|—————Node:pointer_declarator Text: *event
|——————Node:* Text: *
|——————Node:identifier Text: event
|————Node:) Text: )
|——Node:compound_statement Text: {
    const int code = event->type() - QEvent::User;

    if (code == USBCAN_EVENT_RECEIVE)
        readAllReceivedMessages();
}
|———Node:{ Text: {
|———Node:declaration Text: const int code = event->type() - QEvent::User;
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:primitive_type Text: int
|————Node:init_declarator Text: code = event->type() - QEvent::User
|—————Node:identifier Text: code
|—————Node:= Text: =
|—————Node:binary_expression Text: event->type() - QEvent::User
|——————Node:call_expression Text: event->type()
|———————Node:field_expression Text: event->type
|————————Node:identifier Text: event
|————————Node:-> Text: ->
|————————Node:field_identifier Text: type
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:- Text: -
|——————Node:qualified_identifier Text: QEvent::User
|———————Node:namespace_identifier Text: QEvent
|———————Node::: Text: ::
|———————Node:identifier Text: User
|————Node:; Text: ;
|———Node:if_statement Text: if (code == USBCAN_EVENT_RECEIVE)
        readAllReceivedMessages();
|————Node:if Text: if
|————Node:condition_clause Text: (code == USBCAN_EVENT_RECEIVE)
|—————Node:( Text: (
|—————Node:binary_expression Text: code == USBCAN_EVENT_RECEIVE
|——————Node:identifier Text: code
|——————Node:== Text: ==
|——————Node:identifier Text: USBCAN_EVENT_RECEIVE
|—————Node:) Text: )
|————Node:expression_statement Text: readAllReceivedMessages();
|—————Node:call_expression Text: readAllReceivedMessages()
|——————Node:identifier Text: readAllReceivedMessages
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: bool SystecCanBackendPrivate::setConfigurationParameter(QCanBusDevice::ConfigurationKey key,
                                                        const QVariant &value)
{
    Q_Q(SystecCanBackend);

    switch (key) {
    case QCanBusDevice::BitRateKey:
        return verifyBitRate(value.toInt());
    case QCanBusDevice::ReceiveOwnKey:
        if (Q_UNLIKELY(q->state() != QCanBusDevice::UnconnectedState)) {
            q->setError(SystecCanBackend::tr("Cannot configure TxEcho for open device"),
                        QCanBusDevice::ConfigurationError);
            return false;
        }
        return true;
    default:
        q->setError(SystecCanBackend::tr("Unsupported configuration key: %1").arg(key),
                    QCanBusDevice::ConfigurationError);
        return false;
    }
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: SystecCanBackendPrivate::setConfigurationParameter(QCanBusDevice::ConfigurationKey key,
                                                        const QVariant &value)
|———Node:qualified_identifier Text: SystecCanBackendPrivate::setConfigurationParameter
|————Node:namespace_identifier Text: SystecCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: setConfigurationParameter
|———Node:parameter_list Text: (QCanBusDevice::ConfigurationKey key,
                                                        const QVariant &value)
|————Node:( Text: (
|————Node:parameter_declaration Text: QCanBusDevice::ConfigurationKey key
|—————Node:qualified_identifier Text: QCanBusDevice::ConfigurationKey
|——————Node:namespace_identifier Text: QCanBusDevice
|——————Node::: Text: ::
|——————Node:type_identifier Text: ConfigurationKey
|—————Node:identifier Text: key
|————Node:, Text: ,
|————Node:parameter_declaration Text: const QVariant &value
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: QVariant
|—————Node:reference_declarator Text: &value
|——————Node:& Text: &
|——————Node:identifier Text: value
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(SystecCanBackend);

    switch (key) {
    case QCanBusDevice::BitRateKey:
        return verifyBitRate(value.toInt());
    case QCanBusDevice::ReceiveOwnKey:
        if (Q_UNLIKELY(q->state() != QCanBusDevice::UnconnectedState)) {
            q->setError(SystecCanBackend::tr("Cannot configure TxEcho for open device"),
                        QCanBusDevice::ConfigurationError);
            return false;
        }
        return true;
    default:
        q->setError(SystecCanBackend::tr("Unsupported configuration key: %1").arg(key),
                    QCanBusDevice::ConfigurationError);
        return false;
    }
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(SystecCanBackend);
|————Node:call_expression Text: Q_Q(SystecCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (SystecCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: SystecCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:switch_statement Text: switch (key) {
    case QCanBusDevice::BitRateKey:
        return verifyBitRate(value.toInt());
    case QCanBusDevice::ReceiveOwnKey:
        if (Q_UNLIKELY(q->state() != QCanBusDevice::UnconnectedState)) {
            q->setError(SystecCanBackend::tr("Cannot configure TxEcho for open device"),
                        QCanBusDevice::ConfigurationError);
            return false;
        }
        return true;
    default:
        q->setError(SystecCanBackend::tr("Unsupported configuration key: %1").arg(key),
                    QCanBusDevice::ConfigurationError);
        return false;
    }
|————Node:switch Text: switch
|————Node:condition_clause Text: (key)
|—————Node:( Text: (
|—————Node:identifier Text: key
|—————Node:) Text: )
|————Node:compound_statement Text: {
    case QCanBusDevice::BitRateKey:
        return verifyBitRate(value.toInt());
    case QCanBusDevice::ReceiveOwnKey:
        if (Q_UNLIKELY(q->state() != QCanBusDevice::UnconnectedState)) {
            q->setError(SystecCanBackend::tr("Cannot configure TxEcho for open device"),
                        QCanBusDevice::ConfigurationError);
            return false;
        }
        return true;
    default:
        q->setError(SystecCanBackend::tr("Unsupported configuration key: %1").arg(key),
                    QCanBusDevice::ConfigurationError);
        return false;
    }
|—————Node:{ Text: {
|—————Node:case_statement Text: case QCanBusDevice::BitRateKey:
        return verifyBitRate(value.toInt());
|——————Node:case Text: case
|——————Node:qualified_identifier Text: QCanBusDevice::BitRateKey
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: BitRateKey
|——————Node:: Text: :
|——————Node:return_statement Text: return verifyBitRate(value.toInt());
|———————Node:return Text: return
|———————Node:call_expression Text: verifyBitRate(value.toInt())
|————————Node:identifier Text: verifyBitRate
|————————Node:argument_list Text: (value.toInt())
|—————————Node:( Text: (
|—————————Node:call_expression Text: value.toInt()
|——————————Node:field_expression Text: value.toInt
|———————————Node:identifier Text: value
|———————————Node:. Text: .
|———————————Node:field_identifier Text: toInt
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case QCanBusDevice::ReceiveOwnKey:
        if (Q_UNLIKELY(q->state() != QCanBusDevice::UnconnectedState)) {
            q->setError(SystecCanBackend::tr("Cannot configure TxEcho for open device"),
                        QCanBusDevice::ConfigurationError);
            return false;
        }
        return true;
|——————Node:case Text: case
|——————Node:qualified_identifier Text: QCanBusDevice::ReceiveOwnKey
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: ReceiveOwnKey
|——————Node:: Text: :
|——————Node:if_statement Text: if (Q_UNLIKELY(q->state() != QCanBusDevice::UnconnectedState)) {
            q->setError(SystecCanBackend::tr("Cannot configure TxEcho for open device"),
                        QCanBusDevice::ConfigurationError);
            return false;
        }
|———————Node:if Text: if
|———————Node:condition_clause Text: (Q_UNLIKELY(q->state() != QCanBusDevice::UnconnectedState))
|————————Node:( Text: (
|————————Node:call_expression Text: Q_UNLIKELY(q->state() != QCanBusDevice::UnconnectedState)
|—————————Node:identifier Text: Q_UNLIKELY
|—————————Node:argument_list Text: (q->state() != QCanBusDevice::UnconnectedState)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: q->state() != QCanBusDevice::UnconnectedState
|———————————Node:call_expression Text: q->state()
|————————————Node:field_expression Text: q->state
|—————————————Node:identifier Text: q
|—————————————Node:-> Text: ->
|—————————————Node:field_identifier Text: state
|————————————Node:argument_list Text: ()
|—————————————Node:( Text: (
|—————————————Node:) Text: )
|———————————Node:!= Text: !=
|———————————Node:qualified_identifier Text: QCanBusDevice::UnconnectedState
|————————————Node:namespace_identifier Text: QCanBusDevice
|————————————Node::: Text: ::
|————————————Node:identifier Text: UnconnectedState
|——————————Node:) Text: )
|————————Node:) Text: )
|———————Node:compound_statement Text: {
            q->setError(SystecCanBackend::tr("Cannot configure TxEcho for open device"),
                        QCanBusDevice::ConfigurationError);
            return false;
        }
|————————Node:{ Text: {
|————————Node:expression_statement Text: q->setError(SystecCanBackend::tr("Cannot configure TxEcho for open device"),
                        QCanBusDevice::ConfigurationError);
|—————————Node:call_expression Text: q->setError(SystecCanBackend::tr("Cannot configure TxEcho for open device"),
                        QCanBusDevice::ConfigurationError)
|——————————Node:field_expression Text: q->setError
|———————————Node:identifier Text: q
|———————————Node:-> Text: ->
|———————————Node:field_identifier Text: setError
|——————————Node:argument_list Text: (SystecCanBackend::tr("Cannot configure TxEcho for open device"),
                        QCanBusDevice::ConfigurationError)
|———————————Node:( Text: (
|———————————Node:call_expression Text: SystecCanBackend::tr("Cannot configure TxEcho for open device")
|————————————Node:qualified_identifier Text: SystecCanBackend::tr
|—————————————Node:namespace_identifier Text: SystecCanBackend
|—————————————Node::: Text: ::
|—————————————Node:identifier Text: tr
|————————————Node:argument_list Text: ("Cannot configure TxEcho for open device")
|—————————————Node:( Text: (
|—————————————Node:string_literal Text: "Cannot configure TxEcho for open device"
|——————————————Node:" Text: "
|——————————————Node:string_content Text: Cannot configure TxEcho for open device
|——————————————Node:" Text: "
|—————————————Node:) Text: )
|———————————Node:, Text: ,
|———————————Node:qualified_identifier Text: QCanBusDevice::ConfigurationError
|————————————Node:namespace_identifier Text: QCanBusDevice
|————————————Node::: Text: ::
|————————————Node:identifier Text: ConfigurationError
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:return_statement Text: return false;
|—————————Node:return Text: return
|—————————Node:false Text: false
|—————————Node:; Text: ;
|————————Node:} Text: }
|——————Node:return_statement Text: return true;
|———————Node:return Text: return
|———————Node:true Text: true
|———————Node:; Text: ;
|—————Node:case_statement Text: default:
        q->setError(SystecCanBackend::tr("Unsupported configuration key: %1").arg(key),
                    QCanBusDevice::ConfigurationError);
        return false;
|——————Node:default Text: default
|——————Node:: Text: :
|——————Node:expression_statement Text: q->setError(SystecCanBackend::tr("Unsupported configuration key: %1").arg(key),
                    QCanBusDevice::ConfigurationError);
|———————Node:call_expression Text: q->setError(SystecCanBackend::tr("Unsupported configuration key: %1").arg(key),
                    QCanBusDevice::ConfigurationError)
|————————Node:field_expression Text: q->setError
|—————————Node:identifier Text: q
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: setError
|————————Node:argument_list Text: (SystecCanBackend::tr("Unsupported configuration key: %1").arg(key),
                    QCanBusDevice::ConfigurationError)
|—————————Node:( Text: (
|—————————Node:call_expression Text: SystecCanBackend::tr("Unsupported configuration key: %1").arg(key)
|——————————Node:field_expression Text: SystecCanBackend::tr("Unsupported configuration key: %1").arg
|———————————Node:call_expression Text: SystecCanBackend::tr("Unsupported configuration key: %1")
|————————————Node:qualified_identifier Text: SystecCanBackend::tr
|—————————————Node:namespace_identifier Text: SystecCanBackend
|—————————————Node::: Text: ::
|—————————————Node:identifier Text: tr
|————————————Node:argument_list Text: ("Unsupported configuration key: %1")
|—————————————Node:( Text: (
|—————————————Node:string_literal Text: "Unsupported configuration key: %1"
|——————————————Node:" Text: "
|——————————————Node:string_content Text: Unsupported configuration key: %1
|——————————————Node:" Text: "
|—————————————Node:) Text: )
|———————————Node:. Text: .
|———————————Node:field_identifier Text: arg
|——————————Node:argument_list Text: (key)
|———————————Node:( Text: (
|———————————Node:identifier Text: key
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:qualified_identifier Text: QCanBusDevice::ConfigurationError
|——————————Node:namespace_identifier Text: QCanBusDevice
|——————————Node::: Text: ::
|——————————Node:identifier Text: ConfigurationError
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:return_statement Text: return false;
|———————Node:return Text: return
|———————Node:false Text: false
|———————Node:; Text: ;
|—————Node:} Text: }
|———Node:} Text: }
|—Node:function_definition Text: bool SystecCanBackendPrivate::setupChannel(const QString &interfaceName)
{
    Q_Q(SystecCanBackend);

    const QRegularExpression re(QStringLiteral("can(\\d)\\.(\\d)"));
    const QRegularExpressionMatch match = re.match(interfaceName);

    if (Q_LIKELY(match.hasMatch())) {
        device = quint8(match.captured(1).toUShort());
        channel = quint8(match.captured(2).toUShort());
    } else {
        q->setError(SystecCanBackend::tr("Invalid interface '%1'.")
                    .arg(interfaceName), QCanBusDevice::ConnectionError);
        return false;
    }

    return true;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: SystecCanBackendPrivate::setupChannel(const QString &interfaceName)
|———Node:qualified_identifier Text: SystecCanBackendPrivate::setupChannel
|————Node:namespace_identifier Text: SystecCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: setupChannel
|———Node:parameter_list Text: (const QString &interfaceName)
|————Node:( Text: (
|————Node:parameter_declaration Text: const QString &interfaceName
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: QString
|—————Node:reference_declarator Text: &interfaceName
|——————Node:& Text: &
|——————Node:identifier Text: interfaceName
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(SystecCanBackend);

    const QRegularExpression re(QStringLiteral("can(\\d)\\.(\\d)"));
    const QRegularExpressionMatch match = re.match(interfaceName);

    if (Q_LIKELY(match.hasMatch())) {
        device = quint8(match.captured(1).toUShort());
        channel = quint8(match.captured(2).toUShort());
    } else {
        q->setError(SystecCanBackend::tr("Invalid interface '%1'.")
                    .arg(interfaceName), QCanBusDevice::ConnectionError);
        return false;
    }

    return true;
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(SystecCanBackend);
|————Node:call_expression Text: Q_Q(SystecCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (SystecCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: SystecCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: const QRegularExpression re(QStringLiteral("can(\\d)\\.(\\d)"));
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: QRegularExpression
|————Node:init_declarator Text: re(QStringLiteral("can(\\d)\\.(\\d)"))
|—————Node:identifier Text: re
|—————Node:argument_list Text: (QStringLiteral("can(\\d)\\.(\\d)"))
|——————Node:( Text: (
|——————Node:call_expression Text: QStringLiteral("can(\\d)\\.(\\d)")
|———————Node:identifier Text: QStringLiteral
|———————Node:argument_list Text: ("can(\\d)\\.(\\d)")
|————————Node:( Text: (
|————————Node:string_literal Text: "can(\\d)\\.(\\d)"
|—————————Node:" Text: "
|—————————Node:string_content Text: can(
|—————————Node:escape_sequence Text: \\
|—————————Node:string_content Text: d)
|—————————Node:escape_sequence Text: \\
|—————————Node:string_content Text: .(
|—————————Node:escape_sequence Text: \\
|—————————Node:string_content Text: d)
|—————————Node:" Text: "
|————————Node:) Text: )
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: const QRegularExpressionMatch match = re.match(interfaceName);
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: QRegularExpressionMatch
|————Node:init_declarator Text: match = re.match(interfaceName)
|—————Node:identifier Text: match
|—————Node:= Text: =
|—————Node:call_expression Text: re.match(interfaceName)
|——————Node:field_expression Text: re.match
|———————Node:identifier Text: re
|———————Node:. Text: .
|———————Node:field_identifier Text: match
|——————Node:argument_list Text: (interfaceName)
|———————Node:( Text: (
|———————Node:identifier Text: interfaceName
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (Q_LIKELY(match.hasMatch())) {
        device = quint8(match.captured(1).toUShort());
        channel = quint8(match.captured(2).toUShort());
    } else {
        q->setError(SystecCanBackend::tr("Invalid interface '%1'.")
                    .arg(interfaceName), QCanBusDevice::ConnectionError);
        return false;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_LIKELY(match.hasMatch()))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_LIKELY(match.hasMatch())
|——————Node:identifier Text: Q_LIKELY
|——————Node:argument_list Text: (match.hasMatch())
|———————Node:( Text: (
|———————Node:call_expression Text: match.hasMatch()
|————————Node:field_expression Text: match.hasMatch
|—————————Node:identifier Text: match
|—————————Node:. Text: .
|—————————Node:field_identifier Text: hasMatch
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        device = quint8(match.captured(1).toUShort());
        channel = quint8(match.captured(2).toUShort());
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: device = quint8(match.captured(1).toUShort());
|——————Node:assignment_expression Text: device = quint8(match.captured(1).toUShort())
|———————Node:identifier Text: device
|———————Node:= Text: =
|———————Node:call_expression Text: quint8(match.captured(1).toUShort())
|————————Node:identifier Text: quint8
|————————Node:argument_list Text: (match.captured(1).toUShort())
|—————————Node:( Text: (
|—————————Node:call_expression Text: match.captured(1).toUShort()
|——————————Node:field_expression Text: match.captured(1).toUShort
|———————————Node:call_expression Text: match.captured(1)
|————————————Node:field_expression Text: match.captured
|—————————————Node:identifier Text: match
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: captured
|————————————Node:argument_list Text: (1)
|—————————————Node:( Text: (
|—————————————Node:number_literal Text: 1
|—————————————Node:) Text: )
|———————————Node:. Text: .
|———————————Node:field_identifier Text: toUShort
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: channel = quint8(match.captured(2).toUShort());
|——————Node:assignment_expression Text: channel = quint8(match.captured(2).toUShort())
|———————Node:identifier Text: channel
|———————Node:= Text: =
|———————Node:call_expression Text: quint8(match.captured(2).toUShort())
|————————Node:identifier Text: quint8
|————————Node:argument_list Text: (match.captured(2).toUShort())
|—————————Node:( Text: (
|—————————Node:call_expression Text: match.captured(2).toUShort()
|——————————Node:field_expression Text: match.captured(2).toUShort
|———————————Node:call_expression Text: match.captured(2)
|————————————Node:field_expression Text: match.captured
|—————————————Node:identifier Text: match
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: captured
|————————————Node:argument_list Text: (2)
|—————————————Node:( Text: (
|—————————————Node:number_literal Text: 2
|—————————————Node:) Text: )
|———————————Node:. Text: .
|———————————Node:field_identifier Text: toUShort
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else {
        q->setError(SystecCanBackend::tr("Invalid interface '%1'.")
                    .arg(interfaceName), QCanBusDevice::ConnectionError);
        return false;
    }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
        q->setError(SystecCanBackend::tr("Invalid interface '%1'.")
                    .arg(interfaceName), QCanBusDevice::ConnectionError);
        return false;
    }
|——————Node:{ Text: {
|——————Node:expression_statement Text: q->setError(SystecCanBackend::tr("Invalid interface '%1'.")
                    .arg(interfaceName), QCanBusDevice::ConnectionError);
|———————Node:call_expression Text: q->setError(SystecCanBackend::tr("Invalid interface '%1'.")
                    .arg(interfaceName), QCanBusDevice::ConnectionError)
|————————Node:field_expression Text: q->setError
|—————————Node:identifier Text: q
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: setError
|————————Node:argument_list Text: (SystecCanBackend::tr("Invalid interface '%1'.")
                    .arg(interfaceName), QCanBusDevice::ConnectionError)
|—————————Node:( Text: (
|—————————Node:call_expression Text: SystecCanBackend::tr("Invalid interface '%1'.")
                    .arg(interfaceName)
|——————————Node:field_expression Text: SystecCanBackend::tr("Invalid interface '%1'.")
                    .arg
|———————————Node:call_expression Text: SystecCanBackend::tr("Invalid interface '%1'.")
|————————————Node:qualified_identifier Text: SystecCanBackend::tr
|—————————————Node:namespace_identifier Text: SystecCanBackend
|—————————————Node::: Text: ::
|—————————————Node:identifier Text: tr
|————————————Node:argument_list Text: ("Invalid interface '%1'.")
|—————————————Node:( Text: (
|—————————————Node:string_literal Text: "Invalid interface '%1'."
|——————————————Node:" Text: "
|——————————————Node:string_content Text: Invalid interface '%1'.
|——————————————Node:" Text: "
|—————————————Node:) Text: )
|———————————Node:. Text: .
|———————————Node:field_identifier Text: arg
|——————————Node:argument_list Text: (interfaceName)
|———————————Node:( Text: (
|———————————Node:identifier Text: interfaceName
|———————————Node:) Text: )
|—————————Node:, Text: ,
|—————————Node:qualified_identifier Text: QCanBusDevice::ConnectionError
|——————————Node:namespace_identifier Text: QCanBusDevice
|——————————Node::: Text: ::
|——————————Node:identifier Text: ConnectionError
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:return_statement Text: return false;
|———————Node:return Text: return
|———————Node:false Text: false
|———————Node:; Text: ;
|——————Node:} Text: }
|———Node:return_statement Text: return true;
|————Node:return Text: return
|————Node:true Text: true
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void SystecCanBackendPrivate::setupDefaultConfigurations()
{
    Q_Q(SystecCanBackend);

    q->setConfigurationParameter(QCanBusDevice::BitRateKey, 500000);
    q->setConfigurationParameter(QCanBusDevice::ReceiveOwnKey, false);
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: SystecCanBackendPrivate::setupDefaultConfigurations()
|———Node:qualified_identifier Text: SystecCanBackendPrivate::setupDefaultConfigurations
|————Node:namespace_identifier Text: SystecCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: setupDefaultConfigurations
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(SystecCanBackend);

    q->setConfigurationParameter(QCanBusDevice::BitRateKey, 500000);
    q->setConfigurationParameter(QCanBusDevice::ReceiveOwnKey, false);
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(SystecCanBackend);
|————Node:call_expression Text: Q_Q(SystecCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (SystecCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: SystecCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: q->setConfigurationParameter(QCanBusDevice::BitRateKey, 500000);
|————Node:call_expression Text: q->setConfigurationParameter(QCanBusDevice::BitRateKey, 500000)
|—————Node:field_expression Text: q->setConfigurationParameter
|——————Node:identifier Text: q
|——————Node:-> Text: ->
|——————Node:field_identifier Text: setConfigurationParameter
|—————Node:argument_list Text: (QCanBusDevice::BitRateKey, 500000)
|——————Node:( Text: (
|——————Node:qualified_identifier Text: QCanBusDevice::BitRateKey
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: BitRateKey
|——————Node:, Text: ,
|——————Node:number_literal Text: 500000
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: q->setConfigurationParameter(QCanBusDevice::ReceiveOwnKey, false);
|————Node:call_expression Text: q->setConfigurationParameter(QCanBusDevice::ReceiveOwnKey, false)
|—————Node:field_expression Text: q->setConfigurationParameter
|——————Node:identifier Text: q
|——————Node:-> Text: ->
|——————Node:field_identifier Text: setConfigurationParameter
|—————Node:argument_list Text: (QCanBusDevice::ReceiveOwnKey, false)
|——————Node:( Text: (
|——————Node:qualified_identifier Text: QCanBusDevice::ReceiveOwnKey
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: ReceiveOwnKey
|——————Node:, Text: ,
|——————Node:false Text: false
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: QString SystecCanBackendPrivate::systemErrorString(int errorCode)
{
    switch (errorCode) {
    case USBCAN_ERR_RESOURCE:
        return SystecCanBackend::tr("Could not create a resource (memory, handle, ...)");
    case USBCAN_ERR_MAXMODULES:
        return SystecCanBackend::tr("The maximum number of open modules is exceeded");
    case USBCAN_ERR_HWINUSE:
        return SystecCanBackend::tr("The module is already in use");
    case USBCAN_ERR_ILLVERSION:
        return SystecCanBackend::tr("The software versions of the module and library are incompatible");
    case USBCAN_ERR_ILLHW:
        return SystecCanBackend::tr("The module with the corresponding device number is not connected");
    case USBCAN_ERR_ILLHANDLE:
        return SystecCanBackend::tr("Wrong USB-CAN-Handle handed over to the function");
    case USBCAN_ERR_ILLPARAM:
        return SystecCanBackend::tr("Wrong parameter handed over to the function");
    case USBCAN_ERR_BUSY:
        return SystecCanBackend::tr("Instruction can not be processed at this time");
    case USBCAN_ERR_TIMEOUT:
        return SystecCanBackend::tr("No answer from the module");
    case USBCAN_ERR_IOFAILED:
        return SystecCanBackend::tr("A request for the driver failed");
    case USBCAN_ERR_DLL_TXFULL:
        return SystecCanBackend::tr("The message did not fit into the transmission queue");
    case USBCAN_ERR_MAXINSTANCES:
        return SystecCanBackend::tr("Maximum number of applications is reached");
    case USBCAN_ERR_CANNOTINIT:
        return SystecCanBackend::tr("CAN-interface is not yet initialized");
    case USBCAN_ERR_DISCONNECT:
        return SystecCanBackend::tr("USB-CANmodul was disconnected");
    case USBCAN_ERR_NOHWCLASS:
        return SystecCanBackend::tr("The needed device class does not exist");
    case USBCAN_ERR_ILLCHANNEL:
        return SystecCanBackend::tr("Illegal CAN channel for GW-001/GW-002");
    case USBCAN_ERR_ILLHWTYPE:
        return SystecCanBackend::tr("The API function can not be used with this hardware");
    case USBCAN_ERR_SERVER_TIMEOUT:
        return SystecCanBackend::tr("The command server did not send a reply to a command");
    default:
        return SystecCanBackend::tr("Unknown error code '%1'.").arg(errorCode);
    }
}
|——Node:type_identifier Text: QString
|——Node:function_declarator Text: SystecCanBackendPrivate::systemErrorString(int errorCode)
|———Node:qualified_identifier Text: SystecCanBackendPrivate::systemErrorString
|————Node:namespace_identifier Text: SystecCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: systemErrorString
|———Node:parameter_list Text: (int errorCode)
|————Node:( Text: (
|————Node:parameter_declaration Text: int errorCode
|—————Node:primitive_type Text: int
|—————Node:identifier Text: errorCode
|————Node:) Text: )
|——Node:compound_statement Text: {
    switch (errorCode) {
    case USBCAN_ERR_RESOURCE:
        return SystecCanBackend::tr("Could not create a resource (memory, handle, ...)");
    case USBCAN_ERR_MAXMODULES:
        return SystecCanBackend::tr("The maximum number of open modules is exceeded");
    case USBCAN_ERR_HWINUSE:
        return SystecCanBackend::tr("The module is already in use");
    case USBCAN_ERR_ILLVERSION:
        return SystecCanBackend::tr("The software versions of the module and library are incompatible");
    case USBCAN_ERR_ILLHW:
        return SystecCanBackend::tr("The module with the corresponding device number is not connected");
    case USBCAN_ERR_ILLHANDLE:
        return SystecCanBackend::tr("Wrong USB-CAN-Handle handed over to the function");
    case USBCAN_ERR_ILLPARAM:
        return SystecCanBackend::tr("Wrong parameter handed over to the function");
    case USBCAN_ERR_BUSY:
        return SystecCanBackend::tr("Instruction can not be processed at this time");
    case USBCAN_ERR_TIMEOUT:
        return SystecCanBackend::tr("No answer from the module");
    case USBCAN_ERR_IOFAILED:
        return SystecCanBackend::tr("A request for the driver failed");
    case USBCAN_ERR_DLL_TXFULL:
        return SystecCanBackend::tr("The message did not fit into the transmission queue");
    case USBCAN_ERR_MAXINSTANCES:
        return SystecCanBackend::tr("Maximum number of applications is reached");
    case USBCAN_ERR_CANNOTINIT:
        return SystecCanBackend::tr("CAN-interface is not yet initialized");
    case USBCAN_ERR_DISCONNECT:
        return SystecCanBackend::tr("USB-CANmodul was disconnected");
    case USBCAN_ERR_NOHWCLASS:
        return SystecCanBackend::tr("The needed device class does not exist");
    case USBCAN_ERR_ILLCHANNEL:
        return SystecCanBackend::tr("Illegal CAN channel for GW-001/GW-002");
    case USBCAN_ERR_ILLHWTYPE:
        return SystecCanBackend::tr("The API function can not be used with this hardware");
    case USBCAN_ERR_SERVER_TIMEOUT:
        return SystecCanBackend::tr("The command server did not send a reply to a command");
    default:
        return SystecCanBackend::tr("Unknown error code '%1'.").arg(errorCode);
    }
}
|———Node:{ Text: {
|———Node:switch_statement Text: switch (errorCode) {
    case USBCAN_ERR_RESOURCE:
        return SystecCanBackend::tr("Could not create a resource (memory, handle, ...)");
    case USBCAN_ERR_MAXMODULES:
        return SystecCanBackend::tr("The maximum number of open modules is exceeded");
    case USBCAN_ERR_HWINUSE:
        return SystecCanBackend::tr("The module is already in use");
    case USBCAN_ERR_ILLVERSION:
        return SystecCanBackend::tr("The software versions of the module and library are incompatible");
    case USBCAN_ERR_ILLHW:
        return SystecCanBackend::tr("The module with the corresponding device number is not connected");
    case USBCAN_ERR_ILLHANDLE:
        return SystecCanBackend::tr("Wrong USB-CAN-Handle handed over to the function");
    case USBCAN_ERR_ILLPARAM:
        return SystecCanBackend::tr("Wrong parameter handed over to the function");
    case USBCAN_ERR_BUSY:
        return SystecCanBackend::tr("Instruction can not be processed at this time");
    case USBCAN_ERR_TIMEOUT:
        return SystecCanBackend::tr("No answer from the module");
    case USBCAN_ERR_IOFAILED:
        return SystecCanBackend::tr("A request for the driver failed");
    case USBCAN_ERR_DLL_TXFULL:
        return SystecCanBackend::tr("The message did not fit into the transmission queue");
    case USBCAN_ERR_MAXINSTANCES:
        return SystecCanBackend::tr("Maximum number of applications is reached");
    case USBCAN_ERR_CANNOTINIT:
        return SystecCanBackend::tr("CAN-interface is not yet initialized");
    case USBCAN_ERR_DISCONNECT:
        return SystecCanBackend::tr("USB-CANmodul was disconnected");
    case USBCAN_ERR_NOHWCLASS:
        return SystecCanBackend::tr("The needed device class does not exist");
    case USBCAN_ERR_ILLCHANNEL:
        return SystecCanBackend::tr("Illegal CAN channel for GW-001/GW-002");
    case USBCAN_ERR_ILLHWTYPE:
        return SystecCanBackend::tr("The API function can not be used with this hardware");
    case USBCAN_ERR_SERVER_TIMEOUT:
        return SystecCanBackend::tr("The command server did not send a reply to a command");
    default:
        return SystecCanBackend::tr("Unknown error code '%1'.").arg(errorCode);
    }
|————Node:switch Text: switch
|————Node:condition_clause Text: (errorCode)
|—————Node:( Text: (
|—————Node:identifier Text: errorCode
|—————Node:) Text: )
|————Node:compound_statement Text: {
    case USBCAN_ERR_RESOURCE:
        return SystecCanBackend::tr("Could not create a resource (memory, handle, ...)");
    case USBCAN_ERR_MAXMODULES:
        return SystecCanBackend::tr("The maximum number of open modules is exceeded");
    case USBCAN_ERR_HWINUSE:
        return SystecCanBackend::tr("The module is already in use");
    case USBCAN_ERR_ILLVERSION:
        return SystecCanBackend::tr("The software versions of the module and library are incompatible");
    case USBCAN_ERR_ILLHW:
        return SystecCanBackend::tr("The module with the corresponding device number is not connected");
    case USBCAN_ERR_ILLHANDLE:
        return SystecCanBackend::tr("Wrong USB-CAN-Handle handed over to the function");
    case USBCAN_ERR_ILLPARAM:
        return SystecCanBackend::tr("Wrong parameter handed over to the function");
    case USBCAN_ERR_BUSY:
        return SystecCanBackend::tr("Instruction can not be processed at this time");
    case USBCAN_ERR_TIMEOUT:
        return SystecCanBackend::tr("No answer from the module");
    case USBCAN_ERR_IOFAILED:
        return SystecCanBackend::tr("A request for the driver failed");
    case USBCAN_ERR_DLL_TXFULL:
        return SystecCanBackend::tr("The message did not fit into the transmission queue");
    case USBCAN_ERR_MAXINSTANCES:
        return SystecCanBackend::tr("Maximum number of applications is reached");
    case USBCAN_ERR_CANNOTINIT:
        return SystecCanBackend::tr("CAN-interface is not yet initialized");
    case USBCAN_ERR_DISCONNECT:
        return SystecCanBackend::tr("USB-CANmodul was disconnected");
    case USBCAN_ERR_NOHWCLASS:
        return SystecCanBackend::tr("The needed device class does not exist");
    case USBCAN_ERR_ILLCHANNEL:
        return SystecCanBackend::tr("Illegal CAN channel for GW-001/GW-002");
    case USBCAN_ERR_ILLHWTYPE:
        return SystecCanBackend::tr("The API function can not be used with this hardware");
    case USBCAN_ERR_SERVER_TIMEOUT:
        return SystecCanBackend::tr("The command server did not send a reply to a command");
    default:
        return SystecCanBackend::tr("Unknown error code '%1'.").arg(errorCode);
    }
|—————Node:{ Text: {
|—————Node:case_statement Text: case USBCAN_ERR_RESOURCE:
        return SystecCanBackend::tr("Could not create a resource (memory, handle, ...)");
|——————Node:case Text: case
|——————Node:identifier Text: USBCAN_ERR_RESOURCE
|——————Node:: Text: :
|——————Node:return_statement Text: return SystecCanBackend::tr("Could not create a resource (memory, handle, ...)");
|———————Node:return Text: return
|———————Node:call_expression Text: SystecCanBackend::tr("Could not create a resource (memory, handle, ...)")
|————————Node:qualified_identifier Text: SystecCanBackend::tr
|—————————Node:namespace_identifier Text: SystecCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("Could not create a resource (memory, handle, ...)")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Could not create a resource (memory, handle, ...)"
|——————————Node:" Text: "
|——————————Node:string_content Text: Could not create a resource (memory, handle, ...)
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case USBCAN_ERR_MAXMODULES:
        return SystecCanBackend::tr("The maximum number of open modules is exceeded");
|——————Node:case Text: case
|——————Node:identifier Text: USBCAN_ERR_MAXMODULES
|——————Node:: Text: :
|——————Node:return_statement Text: return SystecCanBackend::tr("The maximum number of open modules is exceeded");
|———————Node:return Text: return
|———————Node:call_expression Text: SystecCanBackend::tr("The maximum number of open modules is exceeded")
|————————Node:qualified_identifier Text: SystecCanBackend::tr
|—————————Node:namespace_identifier Text: SystecCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("The maximum number of open modules is exceeded")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "The maximum number of open modules is exceeded"
|——————————Node:" Text: "
|——————————Node:string_content Text: The maximum number of open modules is exceeded
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case USBCAN_ERR_HWINUSE:
        return SystecCanBackend::tr("The module is already in use");
|——————Node:case Text: case
|——————Node:identifier Text: USBCAN_ERR_HWINUSE
|——————Node:: Text: :
|——————Node:return_statement Text: return SystecCanBackend::tr("The module is already in use");
|———————Node:return Text: return
|———————Node:call_expression Text: SystecCanBackend::tr("The module is already in use")
|————————Node:qualified_identifier Text: SystecCanBackend::tr
|—————————Node:namespace_identifier Text: SystecCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("The module is already in use")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "The module is already in use"
|——————————Node:" Text: "
|——————————Node:string_content Text: The module is already in use
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case USBCAN_ERR_ILLVERSION:
        return SystecCanBackend::tr("The software versions of the module and library are incompatible");
|——————Node:case Text: case
|——————Node:identifier Text: USBCAN_ERR_ILLVERSION
|——————Node:: Text: :
|——————Node:return_statement Text: return SystecCanBackend::tr("The software versions of the module and library are incompatible");
|———————Node:return Text: return
|———————Node:call_expression Text: SystecCanBackend::tr("The software versions of the module and library are incompatible")
|————————Node:qualified_identifier Text: SystecCanBackend::tr
|—————————Node:namespace_identifier Text: SystecCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("The software versions of the module and library are incompatible")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "The software versions of the module and library are incompatible"
|——————————Node:" Text: "
|——————————Node:string_content Text: The software versions of the module and library are incompatible
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case USBCAN_ERR_ILLHW:
        return SystecCanBackend::tr("The module with the corresponding device number is not connected");
|——————Node:case Text: case
|——————Node:identifier Text: USBCAN_ERR_ILLHW
|——————Node:: Text: :
|——————Node:return_statement Text: return SystecCanBackend::tr("The module with the corresponding device number is not connected");
|———————Node:return Text: return
|———————Node:call_expression Text: SystecCanBackend::tr("The module with the corresponding device number is not connected")
|————————Node:qualified_identifier Text: SystecCanBackend::tr
|—————————Node:namespace_identifier Text: SystecCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("The module with the corresponding device number is not connected")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "The module with the corresponding device number is not connected"
|——————————Node:" Text: "
|——————————Node:string_content Text: The module with the corresponding device number is not connected
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case USBCAN_ERR_ILLHANDLE:
        return SystecCanBackend::tr("Wrong USB-CAN-Handle handed over to the function");
|——————Node:case Text: case
|——————Node:identifier Text: USBCAN_ERR_ILLHANDLE
|——————Node:: Text: :
|——————Node:return_statement Text: return SystecCanBackend::tr("Wrong USB-CAN-Handle handed over to the function");
|———————Node:return Text: return
|———————Node:call_expression Text: SystecCanBackend::tr("Wrong USB-CAN-Handle handed over to the function")
|————————Node:qualified_identifier Text: SystecCanBackend::tr
|—————————Node:namespace_identifier Text: SystecCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("Wrong USB-CAN-Handle handed over to the function")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Wrong USB-CAN-Handle handed over to the function"
|——————————Node:" Text: "
|——————————Node:string_content Text: Wrong USB-CAN-Handle handed over to the function
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case USBCAN_ERR_ILLPARAM:
        return SystecCanBackend::tr("Wrong parameter handed over to the function");
|——————Node:case Text: case
|——————Node:identifier Text: USBCAN_ERR_ILLPARAM
|——————Node:: Text: :
|——————Node:return_statement Text: return SystecCanBackend::tr("Wrong parameter handed over to the function");
|———————Node:return Text: return
|———————Node:call_expression Text: SystecCanBackend::tr("Wrong parameter handed over to the function")
|————————Node:qualified_identifier Text: SystecCanBackend::tr
|—————————Node:namespace_identifier Text: SystecCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("Wrong parameter handed over to the function")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Wrong parameter handed over to the function"
|——————————Node:" Text: "
|——————————Node:string_content Text: Wrong parameter handed over to the function
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case USBCAN_ERR_BUSY:
        return SystecCanBackend::tr("Instruction can not be processed at this time");
|——————Node:case Text: case
|——————Node:identifier Text: USBCAN_ERR_BUSY
|——————Node:: Text: :
|——————Node:return_statement Text: return SystecCanBackend::tr("Instruction can not be processed at this time");
|———————Node:return Text: return
|———————Node:call_expression Text: SystecCanBackend::tr("Instruction can not be processed at this time")
|————————Node:qualified_identifier Text: SystecCanBackend::tr
|—————————Node:namespace_identifier Text: SystecCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("Instruction can not be processed at this time")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Instruction can not be processed at this time"
|——————————Node:" Text: "
|——————————Node:string_content Text: Instruction can not be processed at this time
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case USBCAN_ERR_TIMEOUT:
        return SystecCanBackend::tr("No answer from the module");
|——————Node:case Text: case
|——————Node:identifier Text: USBCAN_ERR_TIMEOUT
|——————Node:: Text: :
|——————Node:return_statement Text: return SystecCanBackend::tr("No answer from the module");
|———————Node:return Text: return
|———————Node:call_expression Text: SystecCanBackend::tr("No answer from the module")
|————————Node:qualified_identifier Text: SystecCanBackend::tr
|—————————Node:namespace_identifier Text: SystecCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("No answer from the module")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "No answer from the module"
|——————————Node:" Text: "
|——————————Node:string_content Text: No answer from the module
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case USBCAN_ERR_IOFAILED:
        return SystecCanBackend::tr("A request for the driver failed");
|——————Node:case Text: case
|——————Node:identifier Text: USBCAN_ERR_IOFAILED
|——————Node:: Text: :
|——————Node:return_statement Text: return SystecCanBackend::tr("A request for the driver failed");
|———————Node:return Text: return
|———————Node:call_expression Text: SystecCanBackend::tr("A request for the driver failed")
|————————Node:qualified_identifier Text: SystecCanBackend::tr
|—————————Node:namespace_identifier Text: SystecCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("A request for the driver failed")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "A request for the driver failed"
|——————————Node:" Text: "
|——————————Node:string_content Text: A request for the driver failed
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case USBCAN_ERR_DLL_TXFULL:
        return SystecCanBackend::tr("The message did not fit into the transmission queue");
|——————Node:case Text: case
|——————Node:identifier Text: USBCAN_ERR_DLL_TXFULL
|——————Node:: Text: :
|——————Node:return_statement Text: return SystecCanBackend::tr("The message did not fit into the transmission queue");
|———————Node:return Text: return
|———————Node:call_expression Text: SystecCanBackend::tr("The message did not fit into the transmission queue")
|————————Node:qualified_identifier Text: SystecCanBackend::tr
|—————————Node:namespace_identifier Text: SystecCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("The message did not fit into the transmission queue")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "The message did not fit into the transmission queue"
|——————————Node:" Text: "
|——————————Node:string_content Text: The message did not fit into the transmission queue
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case USBCAN_ERR_MAXINSTANCES:
        return SystecCanBackend::tr("Maximum number of applications is reached");
|——————Node:case Text: case
|——————Node:identifier Text: USBCAN_ERR_MAXINSTANCES
|——————Node:: Text: :
|——————Node:return_statement Text: return SystecCanBackend::tr("Maximum number of applications is reached");
|———————Node:return Text: return
|———————Node:call_expression Text: SystecCanBackend::tr("Maximum number of applications is reached")
|————————Node:qualified_identifier Text: SystecCanBackend::tr
|—————————Node:namespace_identifier Text: SystecCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("Maximum number of applications is reached")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Maximum number of applications is reached"
|——————————Node:" Text: "
|——————————Node:string_content Text: Maximum number of applications is reached
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case USBCAN_ERR_CANNOTINIT:
        return SystecCanBackend::tr("CAN-interface is not yet initialized");
|——————Node:case Text: case
|——————Node:identifier Text: USBCAN_ERR_CANNOTINIT
|——————Node:: Text: :
|——————Node:return_statement Text: return SystecCanBackend::tr("CAN-interface is not yet initialized");
|———————Node:return Text: return
|———————Node:call_expression Text: SystecCanBackend::tr("CAN-interface is not yet initialized")
|————————Node:qualified_identifier Text: SystecCanBackend::tr
|—————————Node:namespace_identifier Text: SystecCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("CAN-interface is not yet initialized")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "CAN-interface is not yet initialized"
|——————————Node:" Text: "
|——————————Node:string_content Text: CAN-interface is not yet initialized
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case USBCAN_ERR_DISCONNECT:
        return SystecCanBackend::tr("USB-CANmodul was disconnected");
|——————Node:case Text: case
|——————Node:identifier Text: USBCAN_ERR_DISCONNECT
|——————Node:: Text: :
|——————Node:return_statement Text: return SystecCanBackend::tr("USB-CANmodul was disconnected");
|———————Node:return Text: return
|———————Node:call_expression Text: SystecCanBackend::tr("USB-CANmodul was disconnected")
|————————Node:qualified_identifier Text: SystecCanBackend::tr
|—————————Node:namespace_identifier Text: SystecCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("USB-CANmodul was disconnected")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "USB-CANmodul was disconnected"
|——————————Node:" Text: "
|——————————Node:string_content Text: USB-CANmodul was disconnected
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case USBCAN_ERR_NOHWCLASS:
        return SystecCanBackend::tr("The needed device class does not exist");
|——————Node:case Text: case
|——————Node:identifier Text: USBCAN_ERR_NOHWCLASS
|——————Node:: Text: :
|——————Node:return_statement Text: return SystecCanBackend::tr("The needed device class does not exist");
|———————Node:return Text: return
|———————Node:call_expression Text: SystecCanBackend::tr("The needed device class does not exist")
|————————Node:qualified_identifier Text: SystecCanBackend::tr
|—————————Node:namespace_identifier Text: SystecCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("The needed device class does not exist")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "The needed device class does not exist"
|——————————Node:" Text: "
|——————————Node:string_content Text: The needed device class does not exist
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case USBCAN_ERR_ILLCHANNEL:
        return SystecCanBackend::tr("Illegal CAN channel for GW-001/GW-002");
|——————Node:case Text: case
|——————Node:identifier Text: USBCAN_ERR_ILLCHANNEL
|——————Node:: Text: :
|——————Node:return_statement Text: return SystecCanBackend::tr("Illegal CAN channel for GW-001/GW-002");
|———————Node:return Text: return
|———————Node:call_expression Text: SystecCanBackend::tr("Illegal CAN channel for GW-001/GW-002")
|————————Node:qualified_identifier Text: SystecCanBackend::tr
|—————————Node:namespace_identifier Text: SystecCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("Illegal CAN channel for GW-001/GW-002")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "Illegal CAN channel for GW-001/GW-002"
|——————————Node:" Text: "
|——————————Node:string_content Text: Illegal CAN channel for GW-001/GW-002
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case USBCAN_ERR_ILLHWTYPE:
        return SystecCanBackend::tr("The API function can not be used with this hardware");
|——————Node:case Text: case
|——————Node:identifier Text: USBCAN_ERR_ILLHWTYPE
|——————Node:: Text: :
|——————Node:return_statement Text: return SystecCanBackend::tr("The API function can not be used with this hardware");
|———————Node:return Text: return
|———————Node:call_expression Text: SystecCanBackend::tr("The API function can not be used with this hardware")
|————————Node:qualified_identifier Text: SystecCanBackend::tr
|—————————Node:namespace_identifier Text: SystecCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("The API function can not be used with this hardware")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "The API function can not be used with this hardware"
|——————————Node:" Text: "
|——————————Node:string_content Text: The API function can not be used with this hardware
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: case USBCAN_ERR_SERVER_TIMEOUT:
        return SystecCanBackend::tr("The command server did not send a reply to a command");
|——————Node:case Text: case
|——————Node:identifier Text: USBCAN_ERR_SERVER_TIMEOUT
|——————Node:: Text: :
|——————Node:return_statement Text: return SystecCanBackend::tr("The command server did not send a reply to a command");
|———————Node:return Text: return
|———————Node:call_expression Text: SystecCanBackend::tr("The command server did not send a reply to a command")
|————————Node:qualified_identifier Text: SystecCanBackend::tr
|—————————Node:namespace_identifier Text: SystecCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: tr
|————————Node:argument_list Text: ("The command server did not send a reply to a command")
|—————————Node:( Text: (
|—————————Node:string_literal Text: "The command server did not send a reply to a command"
|——————————Node:" Text: "
|——————————Node:string_content Text: The command server did not send a reply to a command
|——————————Node:" Text: "
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:case_statement Text: default:
        return SystecCanBackend::tr("Unknown error code '%1'.").arg(errorCode);
|——————Node:default Text: default
|——————Node:: Text: :
|——————Node:return_statement Text: return SystecCanBackend::tr("Unknown error code '%1'.").arg(errorCode);
|———————Node:return Text: return
|———————Node:call_expression Text: SystecCanBackend::tr("Unknown error code '%1'.").arg(errorCode)
|————————Node:field_expression Text: SystecCanBackend::tr("Unknown error code '%1'.").arg
|—————————Node:call_expression Text: SystecCanBackend::tr("Unknown error code '%1'.")
|——————————Node:qualified_identifier Text: SystecCanBackend::tr
|———————————Node:namespace_identifier Text: SystecCanBackend
|———————————Node::: Text: ::
|———————————Node:identifier Text: tr
|——————————Node:argument_list Text: ("Unknown error code '%1'.")
|———————————Node:( Text: (
|———————————Node:string_literal Text: "Unknown error code '%1'."
|————————————Node:" Text: "
|————————————Node:string_content Text: Unknown error code '%1'.
|————————————Node:" Text: "
|———————————Node:) Text: )
|—————————Node:. Text: .
|—————————Node:field_identifier Text: arg
|————————Node:argument_list Text: (errorCode)
|—————————Node:( Text: (
|—————————Node:identifier Text: errorCode
|—————————Node:) Text: )
|———————Node:; Text: ;
|—————Node:} Text: }
|———Node:} Text: }
|—Node:function_definition Text: void SystecCanBackendPrivate::enableWriteNotification(bool enable)
{
    Q_Q(SystecCanBackend);

    if (outgoingEventNotifier) {
        if (enable) {
            if (!outgoingEventNotifier->isActive())
                outgoingEventNotifier->start();
        } else {
            outgoingEventNotifier->stop();
        }
    } else if (enable) {
        outgoingEventNotifier = new OutgoingEventNotifier(this, q);
        outgoingEventNotifier->start(0);
    }
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: SystecCanBackendPrivate::enableWriteNotification(bool enable)
|———Node:qualified_identifier Text: SystecCanBackendPrivate::enableWriteNotification
|————Node:namespace_identifier Text: SystecCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: enableWriteNotification
|———Node:parameter_list Text: (bool enable)
|————Node:( Text: (
|————Node:parameter_declaration Text: bool enable
|—————Node:primitive_type Text: bool
|—————Node:identifier Text: enable
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(SystecCanBackend);

    if (outgoingEventNotifier) {
        if (enable) {
            if (!outgoingEventNotifier->isActive())
                outgoingEventNotifier->start();
        } else {
            outgoingEventNotifier->stop();
        }
    } else if (enable) {
        outgoingEventNotifier = new OutgoingEventNotifier(this, q);
        outgoingEventNotifier->start(0);
    }
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(SystecCanBackend);
|————Node:call_expression Text: Q_Q(SystecCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (SystecCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: SystecCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (outgoingEventNotifier) {
        if (enable) {
            if (!outgoingEventNotifier->isActive())
                outgoingEventNotifier->start();
        } else {
            outgoingEventNotifier->stop();
        }
    } else if (enable) {
        outgoingEventNotifier = new OutgoingEventNotifier(this, q);
        outgoingEventNotifier->start(0);
    }
|————Node:if Text: if
|————Node:condition_clause Text: (outgoingEventNotifier)
|—————Node:( Text: (
|—————Node:identifier Text: outgoingEventNotifier
|—————Node:) Text: )
|————Node:compound_statement Text: {
        if (enable) {
            if (!outgoingEventNotifier->isActive())
                outgoingEventNotifier->start();
        } else {
            outgoingEventNotifier->stop();
        }
    }
|—————Node:{ Text: {
|—————Node:if_statement Text: if (enable) {
            if (!outgoingEventNotifier->isActive())
                outgoingEventNotifier->start();
        } else {
            outgoingEventNotifier->stop();
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (enable)
|———————Node:( Text: (
|———————Node:identifier Text: enable
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            if (!outgoingEventNotifier->isActive())
                outgoingEventNotifier->start();
        }
|———————Node:{ Text: {
|———————Node:if_statement Text: if (!outgoingEventNotifier->isActive())
                outgoingEventNotifier->start();
|————————Node:if Text: if
|————————Node:condition_clause Text: (!outgoingEventNotifier->isActive())
|—————————Node:( Text: (
|—————————Node:unary_expression Text: !outgoingEventNotifier->isActive()
|——————————Node:! Text: !
|——————————Node:call_expression Text: outgoingEventNotifier->isActive()
|———————————Node:field_expression Text: outgoingEventNotifier->isActive
|————————————Node:identifier Text: outgoingEventNotifier
|————————————Node:-> Text: ->
|————————————Node:field_identifier Text: isActive
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|—————————Node:) Text: )
|————————Node:expression_statement Text: outgoingEventNotifier->start();
|—————————Node:call_expression Text: outgoingEventNotifier->start()
|——————————Node:field_expression Text: outgoingEventNotifier->start
|———————————Node:identifier Text: outgoingEventNotifier
|———————————Node:-> Text: ->
|———————————Node:field_identifier Text: start
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:; Text: ;
|———————Node:} Text: }
|——————Node:else_clause Text: else {
            outgoingEventNotifier->stop();
        }
|———————Node:else Text: else
|———————Node:compound_statement Text: {
            outgoingEventNotifier->stop();
        }
|————————Node:{ Text: {
|————————Node:expression_statement Text: outgoingEventNotifier->stop();
|—————————Node:call_expression Text: outgoingEventNotifier->stop()
|——————————Node:field_expression Text: outgoingEventNotifier->stop
|———————————Node:identifier Text: outgoingEventNotifier
|———————————Node:-> Text: ->
|———————————Node:field_identifier Text: stop
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:} Text: }
|—————Node:} Text: }
|————Node:else_clause Text: else if (enable) {
        outgoingEventNotifier = new OutgoingEventNotifier(this, q);
        outgoingEventNotifier->start(0);
    }
|—————Node:else Text: else
|—————Node:if_statement Text: if (enable) {
        outgoingEventNotifier = new OutgoingEventNotifier(this, q);
        outgoingEventNotifier->start(0);
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: (enable)
|———————Node:( Text: (
|———————Node:identifier Text: enable
|———————Node:) Text: )
|——————Node:compound_statement Text: {
        outgoingEventNotifier = new OutgoingEventNotifier(this, q);
        outgoingEventNotifier->start(0);
    }
|———————Node:{ Text: {
|———————Node:expression_statement Text: outgoingEventNotifier = new OutgoingEventNotifier(this, q);
|————————Node:assignment_expression Text: outgoingEventNotifier = new OutgoingEventNotifier(this, q)
|—————————Node:identifier Text: outgoingEventNotifier
|—————————Node:= Text: =
|—————————Node:new_expression Text: new OutgoingEventNotifier(this, q)
|——————————Node:new Text: new
|——————————Node:type_identifier Text: OutgoingEventNotifier
|——————————Node:argument_list Text: (this, q)
|———————————Node:( Text: (
|———————————Node:this Text: this
|———————————Node:, Text: ,
|———————————Node:identifier Text: q
|———————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: outgoingEventNotifier->start(0);
|————————Node:call_expression Text: outgoingEventNotifier->start(0)
|—————————Node:field_expression Text: outgoingEventNotifier->start
|——————————Node:identifier Text: outgoingEventNotifier
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: start
|—————————Node:argument_list Text: (0)
|——————————Node:( Text: (
|——————————Node:number_literal Text: 0
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|———Node:} Text: }
|—Node:function_definition Text: void SystecCanBackendPrivate::startWrite()
{
    Q_Q(SystecCanBackend);

    if (!q->hasOutgoingFrames()) {
        enableWriteNotification(false);
        return;
    }

    const QCanBusFrame frame = q->dequeueOutgoingFrame();
    const QByteArray payload = frame.payload();
    const qsizetype payloadSize = payload.size();

    tCanMsgStruct message = {};

    message.m_dwID = frame.frameId();
    message.m_bDLC = quint8(payloadSize);

    message.m_bFF = frame.hasExtendedFrameFormat() ? USBCAN_MSG_FF_EXT : USBCAN_MSG_FF_STD;

    if (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
        message.m_bFF |= USBCAN_MSG_FF_RTR; // remote request frame without payload
    else
        ::memcpy(message.m_bData, payload.constData(), payloadSize);

    const UCANRET result = ::UcanWriteCanMsgEx(handle, channel, &message, nullptr);
    if (Q_UNLIKELY(result != USBCAN_SUCCESSFUL))
        q->setError(systemErrorString(result), QCanBusDevice::WriteError);
    else
        emit q->framesWritten(qint64(1));

    if (q->hasOutgoingFrames())
        enableWriteNotification(true);
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: SystecCanBackendPrivate::startWrite()
|———Node:qualified_identifier Text: SystecCanBackendPrivate::startWrite
|————Node:namespace_identifier Text: SystecCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: startWrite
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(SystecCanBackend);

    if (!q->hasOutgoingFrames()) {
        enableWriteNotification(false);
        return;
    }

    const QCanBusFrame frame = q->dequeueOutgoingFrame();
    const QByteArray payload = frame.payload();
    const qsizetype payloadSize = payload.size();

    tCanMsgStruct message = {};

    message.m_dwID = frame.frameId();
    message.m_bDLC = quint8(payloadSize);

    message.m_bFF = frame.hasExtendedFrameFormat() ? USBCAN_MSG_FF_EXT : USBCAN_MSG_FF_STD;

    if (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
        message.m_bFF |= USBCAN_MSG_FF_RTR; // remote request frame without payload
    else
        ::memcpy(message.m_bData, payload.constData(), payloadSize);

    const UCANRET result = ::UcanWriteCanMsgEx(handle, channel, &message, nullptr);
    if (Q_UNLIKELY(result != USBCAN_SUCCESSFUL))
        q->setError(systemErrorString(result), QCanBusDevice::WriteError);
    else
        emit q->framesWritten(qint64(1));

    if (q->hasOutgoingFrames())
        enableWriteNotification(true);
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(SystecCanBackend);
|————Node:call_expression Text: Q_Q(SystecCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (SystecCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: SystecCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (!q->hasOutgoingFrames()) {
        enableWriteNotification(false);
        return;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (!q->hasOutgoingFrames())
|—————Node:( Text: (
|—————Node:unary_expression Text: !q->hasOutgoingFrames()
|——————Node:! Text: !
|——————Node:call_expression Text: q->hasOutgoingFrames()
|———————Node:field_expression Text: q->hasOutgoingFrames
|————————Node:identifier Text: q
|————————Node:-> Text: ->
|————————Node:field_identifier Text: hasOutgoingFrames
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        enableWriteNotification(false);
        return;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: enableWriteNotification(false);
|——————Node:call_expression Text: enableWriteNotification(false)
|———————Node:identifier Text: enableWriteNotification
|———————Node:argument_list Text: (false)
|————————Node:( Text: (
|————————Node:false Text: false
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return;
|——————Node:return Text: return
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:declaration Text: const QCanBusFrame frame = q->dequeueOutgoingFrame();
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: QCanBusFrame
|————Node:init_declarator Text: frame = q->dequeueOutgoingFrame()
|—————Node:identifier Text: frame
|—————Node:= Text: =
|—————Node:call_expression Text: q->dequeueOutgoingFrame()
|——————Node:field_expression Text: q->dequeueOutgoingFrame
|———————Node:identifier Text: q
|———————Node:-> Text: ->
|———————Node:field_identifier Text: dequeueOutgoingFrame
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: const QByteArray payload = frame.payload();
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: QByteArray
|————Node:init_declarator Text: payload = frame.payload()
|—————Node:identifier Text: payload
|—————Node:= Text: =
|—————Node:call_expression Text: frame.payload()
|——————Node:field_expression Text: frame.payload
|———————Node:identifier Text: frame
|———————Node:. Text: .
|———————Node:field_identifier Text: payload
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: const qsizetype payloadSize = payload.size();
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: qsizetype
|————Node:init_declarator Text: payloadSize = payload.size()
|—————Node:identifier Text: payloadSize
|—————Node:= Text: =
|—————Node:call_expression Text: payload.size()
|——————Node:field_expression Text: payload.size
|———————Node:identifier Text: payload
|———————Node:. Text: .
|———————Node:field_identifier Text: size
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: tCanMsgStruct message = {};
|————Node:type_identifier Text: tCanMsgStruct
|————Node:init_declarator Text: message = {}
|—————Node:identifier Text: message
|—————Node:= Text: =
|—————Node:initializer_list Text: {}
|——————Node:{ Text: {
|——————Node:} Text: }
|————Node:; Text: ;
|———Node:expression_statement Text: message.m_dwID = frame.frameId();
|————Node:assignment_expression Text: message.m_dwID = frame.frameId()
|—————Node:field_expression Text: message.m_dwID
|——————Node:identifier Text: message
|——————Node:. Text: .
|——————Node:field_identifier Text: m_dwID
|—————Node:= Text: =
|—————Node:call_expression Text: frame.frameId()
|——————Node:field_expression Text: frame.frameId
|———————Node:identifier Text: frame
|———————Node:. Text: .
|———————Node:field_identifier Text: frameId
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: message.m_bDLC = quint8(payloadSize);
|————Node:assignment_expression Text: message.m_bDLC = quint8(payloadSize)
|—————Node:field_expression Text: message.m_bDLC
|——————Node:identifier Text: message
|——————Node:. Text: .
|——————Node:field_identifier Text: m_bDLC
|—————Node:= Text: =
|—————Node:call_expression Text: quint8(payloadSize)
|——————Node:identifier Text: quint8
|——————Node:argument_list Text: (payloadSize)
|———————Node:( Text: (
|———————Node:identifier Text: payloadSize
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: message.m_bFF = frame.hasExtendedFrameFormat() ? USBCAN_MSG_FF_EXT : USBCAN_MSG_FF_STD;
|————Node:assignment_expression Text: message.m_bFF = frame.hasExtendedFrameFormat() ? USBCAN_MSG_FF_EXT : USBCAN_MSG_FF_STD
|—————Node:field_expression Text: message.m_bFF
|——————Node:identifier Text: message
|——————Node:. Text: .
|——————Node:field_identifier Text: m_bFF
|—————Node:= Text: =
|—————Node:conditional_expression Text: frame.hasExtendedFrameFormat() ? USBCAN_MSG_FF_EXT : USBCAN_MSG_FF_STD
|——————Node:call_expression Text: frame.hasExtendedFrameFormat()
|———————Node:field_expression Text: frame.hasExtendedFrameFormat
|————————Node:identifier Text: frame
|————————Node:. Text: .
|————————Node:field_identifier Text: hasExtendedFrameFormat
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:? Text: ?
|——————Node:identifier Text: USBCAN_MSG_FF_EXT
|——————Node:: Text: :
|——————Node:identifier Text: USBCAN_MSG_FF_STD
|————Node:; Text: ;
|———Node:if_statement Text: if (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
        message.m_bFF |= USBCAN_MSG_FF_RTR; // remote request frame without payload
    else
        ::memcpy(message.m_bData, payload.constData(), payloadSize);
|————Node:if Text: if
|————Node:condition_clause Text: (frame.frameType() == QCanBusFrame::RemoteRequestFrame)
|—————Node:( Text: (
|—————Node:binary_expression Text: frame.frameType() == QCanBusFrame::RemoteRequestFrame
|——————Node:call_expression Text: frame.frameType()
|———————Node:field_expression Text: frame.frameType
|————————Node:identifier Text: frame
|————————Node:. Text: .
|————————Node:field_identifier Text: frameType
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:== Text: ==
|——————Node:qualified_identifier Text: QCanBusFrame::RemoteRequestFrame
|———————Node:namespace_identifier Text: QCanBusFrame
|———————Node::: Text: ::
|———————Node:identifier Text: RemoteRequestFrame
|—————Node:) Text: )
|————Node:expression_statement Text: message.m_bFF |= USBCAN_MSG_FF_RTR;
|—————Node:assignment_expression Text: message.m_bFF |= USBCAN_MSG_FF_RTR
|——————Node:field_expression Text: message.m_bFF
|———————Node:identifier Text: message
|———————Node:. Text: .
|———————Node:field_identifier Text: m_bFF
|——————Node:|= Text: |=
|——————Node:identifier Text: USBCAN_MSG_FF_RTR
|—————Node:; Text: ;
|————Node:comment
|————Node:else_clause Text: else
        ::memcpy(message.m_bData, payload.constData(), payloadSize);
|—————Node:else Text: else
|—————Node:expression_statement Text: ::memcpy(message.m_bData, payload.constData(), payloadSize);
|——————Node:call_expression Text: ::memcpy(message.m_bData, payload.constData(), payloadSize)
|———————Node:qualified_identifier Text: ::memcpy
|————————Node::: Text: ::
|————————Node:identifier Text: memcpy
|———————Node:argument_list Text: (message.m_bData, payload.constData(), payloadSize)
|————————Node:( Text: (
|————————Node:field_expression Text: message.m_bData
|—————————Node:identifier Text: message
|—————————Node:. Text: .
|—————————Node:field_identifier Text: m_bData
|————————Node:, Text: ,
|————————Node:call_expression Text: payload.constData()
|—————————Node:field_expression Text: payload.constData
|——————————Node:identifier Text: payload
|——————————Node:. Text: .
|——————————Node:field_identifier Text: constData
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:identifier Text: payloadSize
|————————Node:) Text: )
|——————Node:; Text: ;
|———Node:declaration Text: const UCANRET result = ::UcanWriteCanMsgEx(handle, channel, &message, nullptr);
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: UCANRET
|————Node:init_declarator Text: result = ::UcanWriteCanMsgEx(handle, channel, &message, nullptr)
|—————Node:identifier Text: result
|—————Node:= Text: =
|—————Node:call_expression Text: ::UcanWriteCanMsgEx(handle, channel, &message, nullptr)
|——————Node:qualified_identifier Text: ::UcanWriteCanMsgEx
|———————Node::: Text: ::
|———————Node:identifier Text: UcanWriteCanMsgEx
|——————Node:argument_list Text: (handle, channel, &message, nullptr)
|———————Node:( Text: (
|———————Node:identifier Text: handle
|———————Node:, Text: ,
|———————Node:identifier Text: channel
|———————Node:, Text: ,
|———————Node:pointer_expression Text: &message
|————————Node:& Text: &
|————————Node:identifier Text: message
|———————Node:, Text: ,
|———————Node:null Text: nullptr
|————————Node:nullptr Text: nullptr
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(result != USBCAN_SUCCESSFUL))
        q->setError(systemErrorString(result), QCanBusDevice::WriteError);
    else
        emit q->framesWritten(qint64(1));
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(result != USBCAN_SUCCESSFUL))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(result != USBCAN_SUCCESSFUL)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (result != USBCAN_SUCCESSFUL)
|———————Node:( Text: (
|———————Node:binary_expression Text: result != USBCAN_SUCCESSFUL
|————————Node:identifier Text: result
|————————Node:!= Text: !=
|————————Node:identifier Text: USBCAN_SUCCESSFUL
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:expression_statement Text: q->setError(systemErrorString(result), QCanBusDevice::WriteError);
|—————Node:call_expression Text: q->setError(systemErrorString(result), QCanBusDevice::WriteError)
|——————Node:field_expression Text: q->setError
|———————Node:identifier Text: q
|———————Node:-> Text: ->
|———————Node:field_identifier Text: setError
|——————Node:argument_list Text: (systemErrorString(result), QCanBusDevice::WriteError)
|———————Node:( Text: (
|———————Node:call_expression Text: systemErrorString(result)
|————————Node:identifier Text: systemErrorString
|————————Node:argument_list Text: (result)
|—————————Node:( Text: (
|—————————Node:identifier Text: result
|—————————Node:) Text: )
|———————Node:, Text: ,
|———————Node:qualified_identifier Text: QCanBusDevice::WriteError
|————————Node:namespace_identifier Text: QCanBusDevice
|————————Node::: Text: ::
|————————Node:identifier Text: WriteError
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:else_clause Text: else
        emit q->framesWritten(qint64(1));
|—————Node:else Text: else
|—————Node:expression_statement Text: emit q->framesWritten(qint64(1));
|——————Node:call_expression Text: emit q->framesWritten(qint64(1))
|———————Node:field_expression Text: emit q->framesWritten
|————————Node:identifier Text: emit
|————————Node:ERROR Text: q
|—————————Node:identifier Text: q
|————————Node:-> Text: ->
|————————Node:field_identifier Text: framesWritten
|———————Node:argument_list Text: (qint64(1))
|————————Node:( Text: (
|————————Node:call_expression Text: qint64(1)
|—————————Node:identifier Text: qint64
|—————————Node:argument_list Text: (1)
|——————————Node:( Text: (
|——————————Node:number_literal Text: 1
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|———Node:if_statement Text: if (q->hasOutgoingFrames())
        enableWriteNotification(true);
|————Node:if Text: if
|————Node:condition_clause Text: (q->hasOutgoingFrames())
|—————Node:( Text: (
|—————Node:call_expression Text: q->hasOutgoingFrames()
|——————Node:field_expression Text: q->hasOutgoingFrames
|———————Node:identifier Text: q
|———————Node:-> Text: ->
|———————Node:field_identifier Text: hasOutgoingFrames
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:expression_statement Text: enableWriteNotification(true);
|—————Node:call_expression Text: enableWriteNotification(true)
|——————Node:identifier Text: enableWriteNotification
|——————Node:argument_list Text: (true)
|———————Node:( Text: (
|———————Node:true Text: true
|———————Node:) Text: )
|—————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void SystecCanBackendPrivate::readAllReceivedMessages()
{
    Q_Q(SystecCanBackend);

    QList<QCanBusFrame> newFrames;

    for (;;) {
        tCanMsgStruct message = {};

        const UCANRET result = ::UcanReadCanMsgEx(handle, &channel, &message, nullptr);
        if (result == USBCAN_WARN_NODATA)
            break;

        if (Q_UNLIKELY(result != USBCAN_SUCCESSFUL)) {
            // handle errors

            q->setError(systemErrorString(result), QCanBusDevice::ReadError);
            break;
        }

        QCanBusFrame frame(message.m_dwID,
                           QByteArray(reinterpret_cast<const char *>(message.m_bData),
                                      int(message.m_bDLC)));

        // TODO: Timestamp can also be set to 100 us resolution with kUcanModeHighResTimer
        frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(message.m_dwTime * 1000));
        frame.setExtendedFrameFormat(message.m_bFF & USBCAN_MSG_FF_EXT);
        frame.setLocalEcho(message.m_bFF & USBCAN_MSG_FF_ECHO);
        frame.setFrameType((message.m_bFF & USBCAN_MSG_FF_RTR)
                           ? QCanBusFrame::RemoteRequestFrame
                           : QCanBusFrame::DataFrame);

        newFrames.append(std::move(frame));
    }

    q->enqueueReceivedFrames(newFrames);
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: SystecCanBackendPrivate::readAllReceivedMessages()
|———Node:qualified_identifier Text: SystecCanBackendPrivate::readAllReceivedMessages
|————Node:namespace_identifier Text: SystecCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: readAllReceivedMessages
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(SystecCanBackend);

    QList<QCanBusFrame> newFrames;

    for (;;) {
        tCanMsgStruct message = {};

        const UCANRET result = ::UcanReadCanMsgEx(handle, &channel, &message, nullptr);
        if (result == USBCAN_WARN_NODATA)
            break;

        if (Q_UNLIKELY(result != USBCAN_SUCCESSFUL)) {
            // handle errors

            q->setError(systemErrorString(result), QCanBusDevice::ReadError);
            break;
        }

        QCanBusFrame frame(message.m_dwID,
                           QByteArray(reinterpret_cast<const char *>(message.m_bData),
                                      int(message.m_bDLC)));

        // TODO: Timestamp can also be set to 100 us resolution with kUcanModeHighResTimer
        frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(message.m_dwTime * 1000));
        frame.setExtendedFrameFormat(message.m_bFF & USBCAN_MSG_FF_EXT);
        frame.setLocalEcho(message.m_bFF & USBCAN_MSG_FF_ECHO);
        frame.setFrameType((message.m_bFF & USBCAN_MSG_FF_RTR)
                           ? QCanBusFrame::RemoteRequestFrame
                           : QCanBusFrame::DataFrame);

        newFrames.append(std::move(frame));
    }

    q->enqueueReceivedFrames(newFrames);
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(SystecCanBackend);
|————Node:call_expression Text: Q_Q(SystecCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (SystecCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: SystecCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: QList<QCanBusFrame> newFrames;
|————Node:template_type Text: QList<QCanBusFrame>
|—————Node:type_identifier Text: QList
|—————Node:template_argument_list Text: <QCanBusFrame>
|——————Node:< Text: <
|——————Node:type_descriptor Text: QCanBusFrame
|———————Node:type_identifier Text: QCanBusFrame
|——————Node:> Text: >
|————Node:identifier Text: newFrames
|————Node:; Text: ;
|———Node:for_statement Text: for (;;) {
        tCanMsgStruct message = {};

        const UCANRET result = ::UcanReadCanMsgEx(handle, &channel, &message, nullptr);
        if (result == USBCAN_WARN_NODATA)
            break;

        if (Q_UNLIKELY(result != USBCAN_SUCCESSFUL)) {
            // handle errors

            q->setError(systemErrorString(result), QCanBusDevice::ReadError);
            break;
        }

        QCanBusFrame frame(message.m_dwID,
                           QByteArray(reinterpret_cast<const char *>(message.m_bData),
                                      int(message.m_bDLC)));

        // TODO: Timestamp can also be set to 100 us resolution with kUcanModeHighResTimer
        frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(message.m_dwTime * 1000));
        frame.setExtendedFrameFormat(message.m_bFF & USBCAN_MSG_FF_EXT);
        frame.setLocalEcho(message.m_bFF & USBCAN_MSG_FF_ECHO);
        frame.setFrameType((message.m_bFF & USBCAN_MSG_FF_RTR)
                           ? QCanBusFrame::RemoteRequestFrame
                           : QCanBusFrame::DataFrame);

        newFrames.append(std::move(frame));
    }
|————Node:for Text: for
|————Node:( Text: (
|————Node:; Text: ;
|————Node:; Text: ;
|————Node:) Text: )
|————Node:compound_statement Text: {
        tCanMsgStruct message = {};

        const UCANRET result = ::UcanReadCanMsgEx(handle, &channel, &message, nullptr);
        if (result == USBCAN_WARN_NODATA)
            break;

        if (Q_UNLIKELY(result != USBCAN_SUCCESSFUL)) {
            // handle errors

            q->setError(systemErrorString(result), QCanBusDevice::ReadError);
            break;
        }

        QCanBusFrame frame(message.m_dwID,
                           QByteArray(reinterpret_cast<const char *>(message.m_bData),
                                      int(message.m_bDLC)));

        // TODO: Timestamp can also be set to 100 us resolution with kUcanModeHighResTimer
        frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(message.m_dwTime * 1000));
        frame.setExtendedFrameFormat(message.m_bFF & USBCAN_MSG_FF_EXT);
        frame.setLocalEcho(message.m_bFF & USBCAN_MSG_FF_ECHO);
        frame.setFrameType((message.m_bFF & USBCAN_MSG_FF_RTR)
                           ? QCanBusFrame::RemoteRequestFrame
                           : QCanBusFrame::DataFrame);

        newFrames.append(std::move(frame));
    }
|—————Node:{ Text: {
|—————Node:declaration Text: tCanMsgStruct message = {};
|——————Node:type_identifier Text: tCanMsgStruct
|——————Node:init_declarator Text: message = {}
|———————Node:identifier Text: message
|———————Node:= Text: =
|———————Node:initializer_list Text: {}
|————————Node:{ Text: {
|————————Node:} Text: }
|——————Node:; Text: ;
|—————Node:declaration Text: const UCANRET result = ::UcanReadCanMsgEx(handle, &channel, &message, nullptr);
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:type_identifier Text: UCANRET
|——————Node:init_declarator Text: result = ::UcanReadCanMsgEx(handle, &channel, &message, nullptr)
|———————Node:identifier Text: result
|———————Node:= Text: =
|———————Node:call_expression Text: ::UcanReadCanMsgEx(handle, &channel, &message, nullptr)
|————————Node:qualified_identifier Text: ::UcanReadCanMsgEx
|—————————Node::: Text: ::
|—————————Node:identifier Text: UcanReadCanMsgEx
|————————Node:argument_list Text: (handle, &channel, &message, nullptr)
|—————————Node:( Text: (
|—————————Node:identifier Text: handle
|—————————Node:, Text: ,
|—————————Node:pointer_expression Text: &channel
|——————————Node:& Text: &
|——————————Node:identifier Text: channel
|—————————Node:, Text: ,
|—————————Node:pointer_expression Text: &message
|——————————Node:& Text: &
|——————————Node:identifier Text: message
|—————————Node:, Text: ,
|—————————Node:null Text: nullptr
|——————————Node:nullptr Text: nullptr
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (result == USBCAN_WARN_NODATA)
            break;
|——————Node:if Text: if
|——————Node:condition_clause Text: (result == USBCAN_WARN_NODATA)
|———————Node:( Text: (
|———————Node:binary_expression Text: result == USBCAN_WARN_NODATA
|————————Node:identifier Text: result
|————————Node:== Text: ==
|————————Node:identifier Text: USBCAN_WARN_NODATA
|———————Node:) Text: )
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:if_statement Text: if (Q_UNLIKELY(result != USBCAN_SUCCESSFUL)) {
            // handle errors

            q->setError(systemErrorString(result), QCanBusDevice::ReadError);
            break;
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (Q_UNLIKELY(result != USBCAN_SUCCESSFUL))
|———————Node:( Text: (
|———————Node:call_expression Text: Q_UNLIKELY(result != USBCAN_SUCCESSFUL)
|————————Node:identifier Text: Q_UNLIKELY
|————————Node:argument_list Text: (result != USBCAN_SUCCESSFUL)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: result != USBCAN_SUCCESSFUL
|——————————Node:identifier Text: result
|——————————Node:!= Text: !=
|——————————Node:identifier Text: USBCAN_SUCCESSFUL
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            // handle errors

            q->setError(systemErrorString(result), QCanBusDevice::ReadError);
            break;
        }
|———————Node:{ Text: {
|———————Node:comment
|———————Node:expression_statement Text: q->setError(systemErrorString(result), QCanBusDevice::ReadError);
|————————Node:call_expression Text: q->setError(systemErrorString(result), QCanBusDevice::ReadError)
|—————————Node:field_expression Text: q->setError
|——————————Node:identifier Text: q
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: setError
|—————————Node:argument_list Text: (systemErrorString(result), QCanBusDevice::ReadError)
|——————————Node:( Text: (
|——————————Node:call_expression Text: systemErrorString(result)
|———————————Node:identifier Text: systemErrorString
|———————————Node:argument_list Text: (result)
|————————————Node:( Text: (
|————————————Node:identifier Text: result
|————————————Node:) Text: )
|——————————Node:, Text: ,
|——————————Node:qualified_identifier Text: QCanBusDevice::ReadError
|———————————Node:namespace_identifier Text: QCanBusDevice
|———————————Node::: Text: ::
|———————————Node:identifier Text: ReadError
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:break_statement Text: break;
|————————Node:break Text: break
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:declaration Text: QCanBusFrame frame(message.m_dwID,
                           QByteArray(reinterpret_cast<const char *>(message.m_bData),
                                      int(message.m_bDLC)));
|——————Node:type_identifier Text: QCanBusFrame
|——————Node:init_declarator Text: frame(message.m_dwID,
                           QByteArray(reinterpret_cast<const char *>(message.m_bData),
                                      int(message.m_bDLC)))
|———————Node:identifier Text: frame
|———————Node:argument_list Text: (message.m_dwID,
                           QByteArray(reinterpret_cast<const char *>(message.m_bData),
                                      int(message.m_bDLC)))
|————————Node:( Text: (
|————————Node:field_expression Text: message.m_dwID
|—————————Node:identifier Text: message
|—————————Node:. Text: .
|—————————Node:field_identifier Text: m_dwID
|————————Node:, Text: ,
|————————Node:call_expression Text: QByteArray(reinterpret_cast<const char *>(message.m_bData),
                                      int(message.m_bDLC))
|—————————Node:identifier Text: QByteArray
|—————————Node:argument_list Text: (reinterpret_cast<const char *>(message.m_bData),
                                      int(message.m_bDLC))
|——————————Node:( Text: (
|——————————Node:call_expression Text: reinterpret_cast<const char *>(message.m_bData)
|———————————Node:template_function Text: reinterpret_cast<const char *>
|————————————Node:identifier Text: reinterpret_cast
|————————————Node:template_argument_list Text: <const char *>
|—————————————Node:< Text: <
|—————————————Node:type_descriptor Text: const char *
|——————————————Node:type_qualifier Text: const
|———————————————Node:const Text: const
|——————————————Node:primitive_type Text: char
|——————————————Node:abstract_pointer_declarator Text: *
|———————————————Node:* Text: *
|—————————————Node:> Text: >
|———————————Node:argument_list Text: (message.m_bData)
|————————————Node:( Text: (
|————————————Node:field_expression Text: message.m_bData
|—————————————Node:identifier Text: message
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: m_bData
|————————————Node:) Text: )
|——————————Node:, Text: ,
|——————————Node:call_expression Text: int(message.m_bDLC)
|———————————Node:primitive_type Text: int
|———————————Node:argument_list Text: (message.m_bDLC)
|————————————Node:( Text: (
|————————————Node:field_expression Text: message.m_bDLC
|—————————————Node:identifier Text: message
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: m_bDLC
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment
|—————Node:expression_statement Text: frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(message.m_dwTime * 1000));
|——————Node:call_expression Text: frame.setTimeStamp(QCanBusFrame::TimeStamp::fromMicroSeconds(message.m_dwTime * 1000))
|———————Node:field_expression Text: frame.setTimeStamp
|————————Node:identifier Text: frame
|————————Node:. Text: .
|————————Node:field_identifier Text: setTimeStamp
|———————Node:argument_list Text: (QCanBusFrame::TimeStamp::fromMicroSeconds(message.m_dwTime * 1000))
|————————Node:( Text: (
|————————Node:call_expression Text: QCanBusFrame::TimeStamp::fromMicroSeconds(message.m_dwTime * 1000)
|—————————Node:qualified_identifier Text: QCanBusFrame::TimeStamp::fromMicroSeconds
|——————————Node:namespace_identifier Text: QCanBusFrame
|——————————Node::: Text: ::
|——————————Node:qualified_identifier Text: TimeStamp::fromMicroSeconds
|———————————Node:namespace_identifier Text: TimeStamp
|———————————Node::: Text: ::
|———————————Node:identifier Text: fromMicroSeconds
|—————————Node:argument_list Text: (message.m_dwTime * 1000)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: message.m_dwTime * 1000
|———————————Node:field_expression Text: message.m_dwTime
|————————————Node:identifier Text: message
|————————————Node:. Text: .
|————————————Node:field_identifier Text: m_dwTime
|———————————Node:* Text: *
|———————————Node:number_literal Text: 1000
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: frame.setExtendedFrameFormat(message.m_bFF & USBCAN_MSG_FF_EXT);
|——————Node:call_expression Text: frame.setExtendedFrameFormat(message.m_bFF & USBCAN_MSG_FF_EXT)
|———————Node:field_expression Text: frame.setExtendedFrameFormat
|————————Node:identifier Text: frame
|————————Node:. Text: .
|————————Node:field_identifier Text: setExtendedFrameFormat
|———————Node:argument_list Text: (message.m_bFF & USBCAN_MSG_FF_EXT)
|————————Node:( Text: (
|————————Node:binary_expression Text: message.m_bFF & USBCAN_MSG_FF_EXT
|—————————Node:field_expression Text: message.m_bFF
|——————————Node:identifier Text: message
|——————————Node:. Text: .
|——————————Node:field_identifier Text: m_bFF
|—————————Node:& Text: &
|—————————Node:identifier Text: USBCAN_MSG_FF_EXT
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: frame.setLocalEcho(message.m_bFF & USBCAN_MSG_FF_ECHO);
|——————Node:call_expression Text: frame.setLocalEcho(message.m_bFF & USBCAN_MSG_FF_ECHO)
|———————Node:field_expression Text: frame.setLocalEcho
|————————Node:identifier Text: frame
|————————Node:. Text: .
|————————Node:field_identifier Text: setLocalEcho
|———————Node:argument_list Text: (message.m_bFF & USBCAN_MSG_FF_ECHO)
|————————Node:( Text: (
|————————Node:binary_expression Text: message.m_bFF & USBCAN_MSG_FF_ECHO
|—————————Node:field_expression Text: message.m_bFF
|——————————Node:identifier Text: message
|——————————Node:. Text: .
|——————————Node:field_identifier Text: m_bFF
|—————————Node:& Text: &
|—————————Node:identifier Text: USBCAN_MSG_FF_ECHO
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: frame.setFrameType((message.m_bFF & USBCAN_MSG_FF_RTR)
                           ? QCanBusFrame::RemoteRequestFrame
                           : QCanBusFrame::DataFrame);
|——————Node:call_expression Text: frame.setFrameType((message.m_bFF & USBCAN_MSG_FF_RTR)
                           ? QCanBusFrame::RemoteRequestFrame
                           : QCanBusFrame::DataFrame)
|———————Node:field_expression Text: frame.setFrameType
|————————Node:identifier Text: frame
|————————Node:. Text: .
|————————Node:field_identifier Text: setFrameType
|———————Node:argument_list Text: ((message.m_bFF & USBCAN_MSG_FF_RTR)
                           ? QCanBusFrame::RemoteRequestFrame
                           : QCanBusFrame::DataFrame)
|————————Node:( Text: (
|————————Node:conditional_expression Text: (message.m_bFF & USBCAN_MSG_FF_RTR)
                           ? QCanBusFrame::RemoteRequestFrame
                           : QCanBusFrame::DataFrame
|—————————Node:parenthesized_expression Text: (message.m_bFF & USBCAN_MSG_FF_RTR)
|——————————Node:( Text: (
|——————————Node:binary_expression Text: message.m_bFF & USBCAN_MSG_FF_RTR
|———————————Node:field_expression Text: message.m_bFF
|————————————Node:identifier Text: message
|————————————Node:. Text: .
|————————————Node:field_identifier Text: m_bFF
|———————————Node:& Text: &
|———————————Node:identifier Text: USBCAN_MSG_FF_RTR
|——————————Node:) Text: )
|—————————Node:? Text: ?
|—————————Node:qualified_identifier Text: QCanBusFrame::RemoteRequestFrame
|——————————Node:namespace_identifier Text: QCanBusFrame
|——————————Node::: Text: ::
|——————————Node:identifier Text: RemoteRequestFrame
|—————————Node:: Text: :
|—————————Node:qualified_identifier Text: QCanBusFrame::DataFrame
|——————————Node:namespace_identifier Text: QCanBusFrame
|——————————Node::: Text: ::
|——————————Node:identifier Text: DataFrame
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: newFrames.append(std::move(frame));
|——————Node:call_expression Text: newFrames.append(std::move(frame))
|———————Node:field_expression Text: newFrames.append
|————————Node:identifier Text: newFrames
|————————Node:. Text: .
|————————Node:field_identifier Text: append
|———————Node:argument_list Text: (std::move(frame))
|————————Node:( Text: (
|————————Node:call_expression Text: std::move(frame)
|—————————Node:qualified_identifier Text: std::move
|——————————Node:namespace_identifier Text: std
|——————————Node::: Text: ::
|——————————Node:identifier Text: move
|—————————Node:argument_list Text: (frame)
|——————————Node:( Text: (
|——————————Node:identifier Text: frame
|——————————Node:) Text: )
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: q->enqueueReceivedFrames(newFrames);
|————Node:call_expression Text: q->enqueueReceivedFrames(newFrames)
|—————Node:field_expression Text: q->enqueueReceivedFrames
|——————Node:identifier Text: q
|——————Node:-> Text: ->
|——————Node:field_identifier Text: enqueueReceivedFrames
|—————Node:argument_list Text: (newFrames)
|——————Node:( Text: (
|——————Node:identifier Text: newFrames
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: bool SystecCanBackendPrivate::verifyBitRate(int bitrate)
{
    Q_Q(SystecCanBackend);

    if (Q_UNLIKELY(q->state() != QCanBusDevice::UnconnectedState)) {
        q->setError(SystecCanBackend::tr("Cannot configure bitrate for open device"),
                    QCanBusDevice::ConfigurationError);
        return false;
    }

    if (Q_UNLIKELY(bitrateCodeFromBitrate(bitrate) == 0)) {
        q->setError(SystecCanBackend::tr("Unsupported bitrate %1.").arg(bitrate),
                    QCanBusDevice::ConfigurationError);
        return false;
    }

    return true;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: SystecCanBackendPrivate::verifyBitRate(int bitrate)
|———Node:qualified_identifier Text: SystecCanBackendPrivate::verifyBitRate
|————Node:namespace_identifier Text: SystecCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: verifyBitRate
|———Node:parameter_list Text: (int bitrate)
|————Node:( Text: (
|————Node:parameter_declaration Text: int bitrate
|—————Node:primitive_type Text: int
|—————Node:identifier Text: bitrate
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(SystecCanBackend);

    if (Q_UNLIKELY(q->state() != QCanBusDevice::UnconnectedState)) {
        q->setError(SystecCanBackend::tr("Cannot configure bitrate for open device"),
                    QCanBusDevice::ConfigurationError);
        return false;
    }

    if (Q_UNLIKELY(bitrateCodeFromBitrate(bitrate) == 0)) {
        q->setError(SystecCanBackend::tr("Unsupported bitrate %1.").arg(bitrate),
                    QCanBusDevice::ConfigurationError);
        return false;
    }

    return true;
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(SystecCanBackend);
|————Node:call_expression Text: Q_Q(SystecCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (SystecCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: SystecCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(q->state() != QCanBusDevice::UnconnectedState)) {
        q->setError(SystecCanBackend::tr("Cannot configure bitrate for open device"),
                    QCanBusDevice::ConfigurationError);
        return false;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(q->state() != QCanBusDevice::UnconnectedState))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(q->state() != QCanBusDevice::UnconnectedState)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (q->state() != QCanBusDevice::UnconnectedState)
|———————Node:( Text: (
|———————Node:binary_expression Text: q->state() != QCanBusDevice::UnconnectedState
|————————Node:call_expression Text: q->state()
|—————————Node:field_expression Text: q->state
|——————————Node:identifier Text: q
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: state
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:!= Text: !=
|————————Node:qualified_identifier Text: QCanBusDevice::UnconnectedState
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:identifier Text: UnconnectedState
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        q->setError(SystecCanBackend::tr("Cannot configure bitrate for open device"),
                    QCanBusDevice::ConfigurationError);
        return false;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: q->setError(SystecCanBackend::tr("Cannot configure bitrate for open device"),
                    QCanBusDevice::ConfigurationError);
|——————Node:call_expression Text: q->setError(SystecCanBackend::tr("Cannot configure bitrate for open device"),
                    QCanBusDevice::ConfigurationError)
|———————Node:field_expression Text: q->setError
|————————Node:identifier Text: q
|————————Node:-> Text: ->
|————————Node:field_identifier Text: setError
|———————Node:argument_list Text: (SystecCanBackend::tr("Cannot configure bitrate for open device"),
                    QCanBusDevice::ConfigurationError)
|————————Node:( Text: (
|————————Node:call_expression Text: SystecCanBackend::tr("Cannot configure bitrate for open device")
|—————————Node:qualified_identifier Text: SystecCanBackend::tr
|——————————Node:namespace_identifier Text: SystecCanBackend
|——————————Node::: Text: ::
|——————————Node:identifier Text: tr
|—————————Node:argument_list Text: ("Cannot configure bitrate for open device")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "Cannot configure bitrate for open device"
|———————————Node:" Text: "
|———————————Node:string_content Text: Cannot configure bitrate for open device
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:qualified_identifier Text: QCanBusDevice::ConfigurationError
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:identifier Text: ConfigurationError
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return false;
|——————Node:return Text: return
|——————Node:false Text: false
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:if_statement Text: if (Q_UNLIKELY(bitrateCodeFromBitrate(bitrate) == 0)) {
        q->setError(SystecCanBackend::tr("Unsupported bitrate %1.").arg(bitrate),
                    QCanBusDevice::ConfigurationError);
        return false;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(bitrateCodeFromBitrate(bitrate) == 0))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(bitrateCodeFromBitrate(bitrate) == 0)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (bitrateCodeFromBitrate(bitrate) == 0)
|———————Node:( Text: (
|———————Node:binary_expression Text: bitrateCodeFromBitrate(bitrate) == 0
|————————Node:call_expression Text: bitrateCodeFromBitrate(bitrate)
|—————————Node:identifier Text: bitrateCodeFromBitrate
|—————————Node:argument_list Text: (bitrate)
|——————————Node:( Text: (
|——————————Node:identifier Text: bitrate
|——————————Node:) Text: )
|————————Node:== Text: ==
|————————Node:number_literal Text: 0
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        q->setError(SystecCanBackend::tr("Unsupported bitrate %1.").arg(bitrate),
                    QCanBusDevice::ConfigurationError);
        return false;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: q->setError(SystecCanBackend::tr("Unsupported bitrate %1.").arg(bitrate),
                    QCanBusDevice::ConfigurationError);
|——————Node:call_expression Text: q->setError(SystecCanBackend::tr("Unsupported bitrate %1.").arg(bitrate),
                    QCanBusDevice::ConfigurationError)
|———————Node:field_expression Text: q->setError
|————————Node:identifier Text: q
|————————Node:-> Text: ->
|————————Node:field_identifier Text: setError
|———————Node:argument_list Text: (SystecCanBackend::tr("Unsupported bitrate %1.").arg(bitrate),
                    QCanBusDevice::ConfigurationError)
|————————Node:( Text: (
|————————Node:call_expression Text: SystecCanBackend::tr("Unsupported bitrate %1.").arg(bitrate)
|—————————Node:field_expression Text: SystecCanBackend::tr("Unsupported bitrate %1.").arg
|——————————Node:call_expression Text: SystecCanBackend::tr("Unsupported bitrate %1.")
|———————————Node:qualified_identifier Text: SystecCanBackend::tr
|————————————Node:namespace_identifier Text: SystecCanBackend
|————————————Node::: Text: ::
|————————————Node:identifier Text: tr
|———————————Node:argument_list Text: ("Unsupported bitrate %1.")
|————————————Node:( Text: (
|————————————Node:string_literal Text: "Unsupported bitrate %1."
|—————————————Node:" Text: "
|—————————————Node:string_content Text: Unsupported bitrate %1.
|—————————————Node:" Text: "
|————————————Node:) Text: )
|——————————Node:. Text: .
|——————————Node:field_identifier Text: arg
|—————————Node:argument_list Text: (bitrate)
|——————————Node:( Text: (
|——————————Node:identifier Text: bitrate
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:qualified_identifier Text: QCanBusDevice::ConfigurationError
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:identifier Text: ConfigurationError
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return false;
|——————Node:return Text: return
|——————Node:false Text: false
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return true;
|————Node:return Text: return
|————Node:true Text: true
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void SystecCanBackendPrivate::resetController()
{
    ::UcanResetCan(handle);
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: SystecCanBackendPrivate::resetController()
|———Node:qualified_identifier Text: SystecCanBackendPrivate::resetController
|————Node:namespace_identifier Text: SystecCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: resetController
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    ::UcanResetCan(handle);
}
|———Node:{ Text: {
|———Node:expression_statement Text: ::UcanResetCan(handle);
|————Node:call_expression Text: ::UcanResetCan(handle)
|—————Node:qualified_identifier Text: ::UcanResetCan
|——————Node::: Text: ::
|——————Node:identifier Text: UcanResetCan
|—————Node:argument_list Text: (handle)
|——————Node:( Text: (
|——————Node:identifier Text: handle
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: QCanBusDevice::CanBusStatus SystecCanBackendPrivate::busStatus()
{
    Q_Q(SystecCanBackend);

    tStatusStruct status = {};
    const UCANRET result = ::UcanGetStatus(handle, &status);

    if (Q_UNLIKELY(result != USBCAN_SUCCESSFUL)) {
        qCWarning(QT_CANBUS_PLUGINS_SYSTECCAN, "Can not query CAN bus status.");
        q->setError(SystecCanBackend::tr("Can not query CAN bus status."), QCanBusDevice::ConfigurationError);
        return QCanBusDevice::CanBusStatus::Unknown;
    }

    if (status.m_wCanStatus & USBCAN_CANERR_BUSOFF)
        return QCanBusDevice::CanBusStatus::BusOff;

    if (status.m_wCanStatus & USBCAN_CANERR_BUSHEAVY)
        return QCanBusDevice::CanBusStatus::Error;

    if (status.m_wCanStatus & USBCAN_CANERR_BUSLIGHT)
        return QCanBusDevice::CanBusStatus::Warning;

    if (status.m_wCanStatus == USBCAN_CANERR_OK)
        return QCanBusDevice::CanBusStatus::Good;

    return QCanBusDevice::CanBusStatus::Unknown;
}
|——Node:qualified_identifier Text: QCanBusDevice::CanBusStatus
|———Node:namespace_identifier Text: QCanBusDevice
|———Node::: Text: ::
|———Node:type_identifier Text: CanBusStatus
|——Node:function_declarator Text: SystecCanBackendPrivate::busStatus()
|———Node:qualified_identifier Text: SystecCanBackendPrivate::busStatus
|————Node:namespace_identifier Text: SystecCanBackendPrivate
|————Node::: Text: ::
|————Node:identifier Text: busStatus
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_Q(SystecCanBackend);

    tStatusStruct status = {};
    const UCANRET result = ::UcanGetStatus(handle, &status);

    if (Q_UNLIKELY(result != USBCAN_SUCCESSFUL)) {
        qCWarning(QT_CANBUS_PLUGINS_SYSTECCAN, "Can not query CAN bus status.");
        q->setError(SystecCanBackend::tr("Can not query CAN bus status."), QCanBusDevice::ConfigurationError);
        return QCanBusDevice::CanBusStatus::Unknown;
    }

    if (status.m_wCanStatus & USBCAN_CANERR_BUSOFF)
        return QCanBusDevice::CanBusStatus::BusOff;

    if (status.m_wCanStatus & USBCAN_CANERR_BUSHEAVY)
        return QCanBusDevice::CanBusStatus::Error;

    if (status.m_wCanStatus & USBCAN_CANERR_BUSLIGHT)
        return QCanBusDevice::CanBusStatus::Warning;

    if (status.m_wCanStatus == USBCAN_CANERR_OK)
        return QCanBusDevice::CanBusStatus::Good;

    return QCanBusDevice::CanBusStatus::Unknown;
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_Q(SystecCanBackend);
|————Node:call_expression Text: Q_Q(SystecCanBackend)
|—————Node:identifier Text: Q_Q
|—————Node:argument_list Text: (SystecCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: SystecCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: tStatusStruct status = {};
|————Node:type_identifier Text: tStatusStruct
|————Node:init_declarator Text: status = {}
|—————Node:identifier Text: status
|—————Node:= Text: =
|—————Node:initializer_list Text: {}
|——————Node:{ Text: {
|——————Node:} Text: }
|————Node:; Text: ;
|———Node:declaration Text: const UCANRET result = ::UcanGetStatus(handle, &status);
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:type_identifier Text: UCANRET
|————Node:init_declarator Text: result = ::UcanGetStatus(handle, &status)
|—————Node:identifier Text: result
|—————Node:= Text: =
|—————Node:call_expression Text: ::UcanGetStatus(handle, &status)
|——————Node:qualified_identifier Text: ::UcanGetStatus
|———————Node::: Text: ::
|———————Node:identifier Text: UcanGetStatus
|——————Node:argument_list Text: (handle, &status)
|———————Node:( Text: (
|———————Node:identifier Text: handle
|———————Node:, Text: ,
|———————Node:pointer_expression Text: &status
|————————Node:& Text: &
|————————Node:identifier Text: status
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(result != USBCAN_SUCCESSFUL)) {
        qCWarning(QT_CANBUS_PLUGINS_SYSTECCAN, "Can not query CAN bus status.");
        q->setError(SystecCanBackend::tr("Can not query CAN bus status."), QCanBusDevice::ConfigurationError);
        return QCanBusDevice::CanBusStatus::Unknown;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(result != USBCAN_SUCCESSFUL))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(result != USBCAN_SUCCESSFUL)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (result != USBCAN_SUCCESSFUL)
|———————Node:( Text: (
|———————Node:binary_expression Text: result != USBCAN_SUCCESSFUL
|————————Node:identifier Text: result
|————————Node:!= Text: !=
|————————Node:identifier Text: USBCAN_SUCCESSFUL
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        qCWarning(QT_CANBUS_PLUGINS_SYSTECCAN, "Can not query CAN bus status.");
        q->setError(SystecCanBackend::tr("Can not query CAN bus status."), QCanBusDevice::ConfigurationError);
        return QCanBusDevice::CanBusStatus::Unknown;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: qCWarning(QT_CANBUS_PLUGINS_SYSTECCAN, "Can not query CAN bus status.");
|——————Node:call_expression Text: qCWarning(QT_CANBUS_PLUGINS_SYSTECCAN, "Can not query CAN bus status.")
|———————Node:identifier Text: qCWarning
|———————Node:argument_list Text: (QT_CANBUS_PLUGINS_SYSTECCAN, "Can not query CAN bus status.")
|————————Node:( Text: (
|————————Node:identifier Text: QT_CANBUS_PLUGINS_SYSTECCAN
|————————Node:, Text: ,
|————————Node:string_literal Text: "Can not query CAN bus status."
|—————————Node:" Text: "
|—————————Node:string_content Text: Can not query CAN bus status.
|—————————Node:" Text: "
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: q->setError(SystecCanBackend::tr("Can not query CAN bus status."), QCanBusDevice::ConfigurationError);
|——————Node:call_expression Text: q->setError(SystecCanBackend::tr("Can not query CAN bus status."), QCanBusDevice::ConfigurationError)
|———————Node:field_expression Text: q->setError
|————————Node:identifier Text: q
|————————Node:-> Text: ->
|————————Node:field_identifier Text: setError
|———————Node:argument_list Text: (SystecCanBackend::tr("Can not query CAN bus status."), QCanBusDevice::ConfigurationError)
|————————Node:( Text: (
|————————Node:call_expression Text: SystecCanBackend::tr("Can not query CAN bus status.")
|—————————Node:qualified_identifier Text: SystecCanBackend::tr
|——————————Node:namespace_identifier Text: SystecCanBackend
|——————————Node::: Text: ::
|——————————Node:identifier Text: tr
|—————————Node:argument_list Text: ("Can not query CAN bus status.")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "Can not query CAN bus status."
|———————————Node:" Text: "
|———————————Node:string_content Text: Can not query CAN bus status.
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:qualified_identifier Text: QCanBusDevice::ConfigurationError
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:identifier Text: ConfigurationError
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return QCanBusDevice::CanBusStatus::Unknown;
|——————Node:return Text: return
|——————Node:qualified_identifier Text: QCanBusDevice::CanBusStatus::Unknown
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:qualified_identifier Text: CanBusStatus::Unknown
|————————Node:namespace_identifier Text: CanBusStatus
|————————Node::: Text: ::
|————————Node:identifier Text: Unknown
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:if_statement Text: if (status.m_wCanStatus & USBCAN_CANERR_BUSOFF)
        return QCanBusDevice::CanBusStatus::BusOff;
|————Node:if Text: if
|————Node:condition_clause Text: (status.m_wCanStatus & USBCAN_CANERR_BUSOFF)
|—————Node:( Text: (
|—————Node:binary_expression Text: status.m_wCanStatus & USBCAN_CANERR_BUSOFF
|——————Node:field_expression Text: status.m_wCanStatus
|———————Node:identifier Text: status
|———————Node:. Text: .
|———————Node:field_identifier Text: m_wCanStatus
|——————Node:& Text: &
|——————Node:identifier Text: USBCAN_CANERR_BUSOFF
|—————Node:) Text: )
|————Node:return_statement Text: return QCanBusDevice::CanBusStatus::BusOff;
|—————Node:return Text: return
|—————Node:qualified_identifier Text: QCanBusDevice::CanBusStatus::BusOff
|——————Node:namespace_identifier Text: QCanBusDevice
|——————Node::: Text: ::
|——————Node:qualified_identifier Text: CanBusStatus::BusOff
|———————Node:namespace_identifier Text: CanBusStatus
|———————Node::: Text: ::
|———————Node:identifier Text: BusOff
|—————Node:; Text: ;
|———Node:if_statement Text: if (status.m_wCanStatus & USBCAN_CANERR_BUSHEAVY)
        return QCanBusDevice::CanBusStatus::Error;
|————Node:if Text: if
|————Node:condition_clause Text: (status.m_wCanStatus & USBCAN_CANERR_BUSHEAVY)
|—————Node:( Text: (
|—————Node:binary_expression Text: status.m_wCanStatus & USBCAN_CANERR_BUSHEAVY
|——————Node:field_expression Text: status.m_wCanStatus
|———————Node:identifier Text: status
|———————Node:. Text: .
|———————Node:field_identifier Text: m_wCanStatus
|——————Node:& Text: &
|——————Node:identifier Text: USBCAN_CANERR_BUSHEAVY
|—————Node:) Text: )
|————Node:return_statement Text: return QCanBusDevice::CanBusStatus::Error;
|—————Node:return Text: return
|—————Node:qualified_identifier Text: QCanBusDevice::CanBusStatus::Error
|——————Node:namespace_identifier Text: QCanBusDevice
|——————Node::: Text: ::
|——————Node:qualified_identifier Text: CanBusStatus::Error
|———————Node:namespace_identifier Text: CanBusStatus
|———————Node::: Text: ::
|———————Node:identifier Text: Error
|—————Node:; Text: ;
|———Node:if_statement Text: if (status.m_wCanStatus & USBCAN_CANERR_BUSLIGHT)
        return QCanBusDevice::CanBusStatus::Warning;
|————Node:if Text: if
|————Node:condition_clause Text: (status.m_wCanStatus & USBCAN_CANERR_BUSLIGHT)
|—————Node:( Text: (
|—————Node:binary_expression Text: status.m_wCanStatus & USBCAN_CANERR_BUSLIGHT
|——————Node:field_expression Text: status.m_wCanStatus
|———————Node:identifier Text: status
|———————Node:. Text: .
|———————Node:field_identifier Text: m_wCanStatus
|——————Node:& Text: &
|——————Node:identifier Text: USBCAN_CANERR_BUSLIGHT
|—————Node:) Text: )
|————Node:return_statement Text: return QCanBusDevice::CanBusStatus::Warning;
|—————Node:return Text: return
|—————Node:qualified_identifier Text: QCanBusDevice::CanBusStatus::Warning
|——————Node:namespace_identifier Text: QCanBusDevice
|——————Node::: Text: ::
|——————Node:qualified_identifier Text: CanBusStatus::Warning
|———————Node:namespace_identifier Text: CanBusStatus
|———————Node::: Text: ::
|———————Node:identifier Text: Warning
|—————Node:; Text: ;
|———Node:if_statement Text: if (status.m_wCanStatus == USBCAN_CANERR_OK)
        return QCanBusDevice::CanBusStatus::Good;
|————Node:if Text: if
|————Node:condition_clause Text: (status.m_wCanStatus == USBCAN_CANERR_OK)
|—————Node:( Text: (
|—————Node:binary_expression Text: status.m_wCanStatus == USBCAN_CANERR_OK
|——————Node:field_expression Text: status.m_wCanStatus
|———————Node:identifier Text: status
|———————Node:. Text: .
|———————Node:field_identifier Text: m_wCanStatus
|——————Node:== Text: ==
|——————Node:identifier Text: USBCAN_CANERR_OK
|—————Node:) Text: )
|————Node:return_statement Text: return QCanBusDevice::CanBusStatus::Good;
|—————Node:return Text: return
|—————Node:qualified_identifier Text: QCanBusDevice::CanBusStatus::Good
|——————Node:namespace_identifier Text: QCanBusDevice
|——————Node::: Text: ::
|——————Node:qualified_identifier Text: CanBusStatus::Good
|———————Node:namespace_identifier Text: CanBusStatus
|———————Node::: Text: ::
|———————Node:identifier Text: Good
|—————Node:; Text: ;
|———Node:return_statement Text: return QCanBusDevice::CanBusStatus::Unknown;
|————Node:return Text: return
|————Node:qualified_identifier Text: QCanBusDevice::CanBusStatus::Unknown
|—————Node:namespace_identifier Text: QCanBusDevice
|—————Node::: Text: ::
|—————Node:qualified_identifier Text: CanBusStatus::Unknown
|——————Node:namespace_identifier Text: CanBusStatus
|——————Node::: Text: ::
|——————Node:identifier Text: Unknown
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: SystecCanBackend::SystecCanBackend(const QString &name, QObject *parent) :
    QCanBusDevice(parent),
    d_ptr(new SystecCanBackendPrivate(this))
{
    Q_D(SystecCanBackend);

    d->setupChannel(name);
    d->setupDefaultConfigurations();

    std::function<void()> f = std::bind(&SystecCanBackend::resetController, this);
    setResetControllerFunction(f);

    std::function<CanBusStatus()> g = std::bind(&SystecCanBackend::busStatus, this);
    setCanBusStatusGetter(g);
}
|——Node:function_declarator Text: SystecCanBackend::SystecCanBackend(const QString &name, QObject *parent)
|———Node:qualified_identifier Text: SystecCanBackend::SystecCanBackend
|————Node:namespace_identifier Text: SystecCanBackend
|————Node::: Text: ::
|————Node:identifier Text: SystecCanBackend
|———Node:parameter_list Text: (const QString &name, QObject *parent)
|————Node:( Text: (
|————Node:parameter_declaration Text: const QString &name
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: QString
|—————Node:reference_declarator Text: &name
|——————Node:& Text: &
|——————Node:identifier Text: name
|————Node:, Text: ,
|————Node:parameter_declaration Text: QObject *parent
|—————Node:type_identifier Text: QObject
|—————Node:pointer_declarator Text: *parent
|——————Node:* Text: *
|——————Node:identifier Text: parent
|————Node:) Text: )
|——Node:field_initializer_list Text: :
    QCanBusDevice(parent),
    d_ptr(new SystecCanBackendPrivate(this))
|———Node:: Text: :
|———Node:field_initializer Text: QCanBusDevice(parent)
|————Node:field_identifier Text: QCanBusDevice
|————Node:argument_list Text: (parent)
|—————Node:( Text: (
|—————Node:identifier Text: parent
|—————Node:) Text: )
|———Node:, Text: ,
|———Node:field_initializer Text: d_ptr(new SystecCanBackendPrivate(this))
|————Node:field_identifier Text: d_ptr
|————Node:argument_list Text: (new SystecCanBackendPrivate(this))
|—————Node:( Text: (
|—————Node:new_expression Text: new SystecCanBackendPrivate(this)
|——————Node:new Text: new
|——————Node:type_identifier Text: SystecCanBackendPrivate
|——————Node:argument_list Text: (this)
|———————Node:( Text: (
|———————Node:this Text: this
|———————Node:) Text: )
|—————Node:) Text: )
|——Node:compound_statement Text: {
    Q_D(SystecCanBackend);

    d->setupChannel(name);
    d->setupDefaultConfigurations();

    std::function<void()> f = std::bind(&SystecCanBackend::resetController, this);
    setResetControllerFunction(f);

    std::function<CanBusStatus()> g = std::bind(&SystecCanBackend::busStatus, this);
    setCanBusStatusGetter(g);
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_D(SystecCanBackend);
|————Node:call_expression Text: Q_D(SystecCanBackend)
|—————Node:identifier Text: Q_D
|—————Node:argument_list Text: (SystecCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: SystecCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: d->setupChannel(name);
|————Node:call_expression Text: d->setupChannel(name)
|—————Node:field_expression Text: d->setupChannel
|——————Node:identifier Text: d
|——————Node:-> Text: ->
|——————Node:field_identifier Text: setupChannel
|—————Node:argument_list Text: (name)
|——————Node:( Text: (
|——————Node:identifier Text: name
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: d->setupDefaultConfigurations();
|————Node:call_expression Text: d->setupDefaultConfigurations()
|—————Node:field_expression Text: d->setupDefaultConfigurations
|——————Node:identifier Text: d
|——————Node:-> Text: ->
|——————Node:field_identifier Text: setupDefaultConfigurations
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: std::function<void()> f = std::bind(&SystecCanBackend::resetController, this);
|————Node:qualified_identifier Text: std::function<void()>
|—————Node:namespace_identifier Text: std
|—————Node::: Text: ::
|—————Node:template_type Text: function<void()>
|——————Node:type_identifier Text: function
|——————Node:template_argument_list Text: <void()>
|———————Node:< Text: <
|———————Node:type_descriptor Text: void()
|————————Node:primitive_type Text: void
|————————Node:abstract_function_declarator Text: ()
|—————————Node:parameter_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|———————Node:> Text: >
|————Node:init_declarator Text: f = std::bind(&SystecCanBackend::resetController, this)
|—————Node:identifier Text: f
|—————Node:= Text: =
|—————Node:call_expression Text: std::bind(&SystecCanBackend::resetController, this)
|——————Node:qualified_identifier Text: std::bind
|———————Node:namespace_identifier Text: std
|———————Node::: Text: ::
|———————Node:identifier Text: bind
|——————Node:argument_list Text: (&SystecCanBackend::resetController, this)
|———————Node:( Text: (
|———————Node:pointer_expression Text: &SystecCanBackend::resetController
|————————Node:& Text: &
|————————Node:qualified_identifier Text: SystecCanBackend::resetController
|—————————Node:namespace_identifier Text: SystecCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: resetController
|———————Node:, Text: ,
|———————Node:this Text: this
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: setResetControllerFunction(f);
|————Node:call_expression Text: setResetControllerFunction(f)
|—————Node:identifier Text: setResetControllerFunction
|—————Node:argument_list Text: (f)
|——————Node:( Text: (
|——————Node:identifier Text: f
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: std::function<CanBusStatus()> g = std::bind(&SystecCanBackend::busStatus, this);
|————Node:qualified_identifier Text: std::function<CanBusStatus()>
|—————Node:namespace_identifier Text: std
|—————Node::: Text: ::
|—————Node:template_type Text: function<CanBusStatus()>
|——————Node:type_identifier Text: function
|——————Node:template_argument_list Text: <CanBusStatus()>
|———————Node:< Text: <
|———————Node:type_descriptor Text: CanBusStatus()
|————————Node:type_identifier Text: CanBusStatus
|————————Node:abstract_function_declarator Text: ()
|—————————Node:parameter_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|———————Node:> Text: >
|————Node:init_declarator Text: g = std::bind(&SystecCanBackend::busStatus, this)
|—————Node:identifier Text: g
|—————Node:= Text: =
|—————Node:call_expression Text: std::bind(&SystecCanBackend::busStatus, this)
|——————Node:qualified_identifier Text: std::bind
|———————Node:namespace_identifier Text: std
|———————Node::: Text: ::
|———————Node:identifier Text: bind
|——————Node:argument_list Text: (&SystecCanBackend::busStatus, this)
|———————Node:( Text: (
|———————Node:pointer_expression Text: &SystecCanBackend::busStatus
|————————Node:& Text: &
|————————Node:qualified_identifier Text: SystecCanBackend::busStatus
|—————————Node:namespace_identifier Text: SystecCanBackend
|—————————Node::: Text: ::
|—————————Node:identifier Text: busStatus
|———————Node:, Text: ,
|———————Node:this Text: this
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: setCanBusStatusGetter(g);
|————Node:call_expression Text: setCanBusStatusGetter(g)
|—————Node:identifier Text: setCanBusStatusGetter
|—————Node:argument_list Text: (g)
|——————Node:( Text: (
|——————Node:identifier Text: g
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: SystecCanBackend::~SystecCanBackend()
{
    if (state() == QCanBusDevice::ConnectedState)
        close();

    delete d_ptr;
}
|——Node:function_declarator Text: SystecCanBackend::~SystecCanBackend()
|———Node:qualified_identifier Text: SystecCanBackend::~SystecCanBackend
|————Node:namespace_identifier Text: SystecCanBackend
|————Node::: Text: ::
|————Node:destructor_name Text: ~SystecCanBackend
|—————Node:~ Text: ~
|—————Node:identifier Text: SystecCanBackend
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    if (state() == QCanBusDevice::ConnectedState)
        close();

    delete d_ptr;
}
|———Node:{ Text: {
|———Node:if_statement Text: if (state() == QCanBusDevice::ConnectedState)
        close();
|————Node:if Text: if
|————Node:condition_clause Text: (state() == QCanBusDevice::ConnectedState)
|—————Node:( Text: (
|—————Node:binary_expression Text: state() == QCanBusDevice::ConnectedState
|——————Node:call_expression Text: state()
|———————Node:identifier Text: state
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:== Text: ==
|——————Node:qualified_identifier Text: QCanBusDevice::ConnectedState
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: ConnectedState
|—————Node:) Text: )
|————Node:expression_statement Text: close();
|—————Node:call_expression Text: close()
|——————Node:identifier Text: close
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|———Node:expression_statement Text: delete d_ptr;
|————Node:delete_expression Text: delete d_ptr
|—————Node:delete Text: delete
|—————Node:identifier Text: d_ptr
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: bool SystecCanBackend::open()
{
    Q_D(SystecCanBackend);

    if (!d->open())
        return false;

    // Apply all stored configurations except bitrate and receive own,
    // because these cannot be applied after opening the device
    const auto keys = configurationKeys();
    for (ConfigurationKey key : keys) {
        if (key == BitRateKey || key == ReceiveOwnKey)
            continue;
        const QVariant param = configurationParameter(key);
        const bool success = d->setConfigurationParameter(key, param);
        if (Q_UNLIKELY(!success)) {
            qCWarning(QT_CANBUS_PLUGINS_SYSTECCAN, "Cannot apply parameter %d with value %ls.",
                      key, qUtf16Printable(param.toString()));
        }
    }

    setState(QCanBusDevice::ConnectedState);
    return true;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: SystecCanBackend::open()
|———Node:qualified_identifier Text: SystecCanBackend::open
|————Node:namespace_identifier Text: SystecCanBackend
|————Node::: Text: ::
|————Node:identifier Text: open
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_D(SystecCanBackend);

    if (!d->open())
        return false;

    // Apply all stored configurations except bitrate and receive own,
    // because these cannot be applied after opening the device
    const auto keys = configurationKeys();
    for (ConfigurationKey key : keys) {
        if (key == BitRateKey || key == ReceiveOwnKey)
            continue;
        const QVariant param = configurationParameter(key);
        const bool success = d->setConfigurationParameter(key, param);
        if (Q_UNLIKELY(!success)) {
            qCWarning(QT_CANBUS_PLUGINS_SYSTECCAN, "Cannot apply parameter %d with value %ls.",
                      key, qUtf16Printable(param.toString()));
        }
    }

    setState(QCanBusDevice::ConnectedState);
    return true;
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_D(SystecCanBackend);
|————Node:call_expression Text: Q_D(SystecCanBackend)
|—————Node:identifier Text: Q_D
|—————Node:argument_list Text: (SystecCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: SystecCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (!d->open())
        return false;
|————Node:if Text: if
|————Node:condition_clause Text: (!d->open())
|—————Node:( Text: (
|—————Node:unary_expression Text: !d->open()
|——————Node:! Text: !
|——————Node:call_expression Text: d->open()
|———————Node:field_expression Text: d->open
|————————Node:identifier Text: d
|————————Node:-> Text: ->
|————————Node:field_identifier Text: open
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|—————Node:) Text: )
|————Node:return_statement Text: return false;
|—————Node:return Text: return
|—————Node:false Text: false
|—————Node:; Text: ;
|———Node:comment
|———Node:comment
|———Node:declaration Text: const auto keys = configurationKeys();
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:placeholder_type_specifier Text: auto
|—————Node:auto Text: auto
|————Node:init_declarator Text: keys = configurationKeys()
|—————Node:identifier Text: keys
|—————Node:= Text: =
|—————Node:call_expression Text: configurationKeys()
|——————Node:identifier Text: configurationKeys
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:for_range_loop Text: for (ConfigurationKey key : keys) {
        if (key == BitRateKey || key == ReceiveOwnKey)
            continue;
        const QVariant param = configurationParameter(key);
        const bool success = d->setConfigurationParameter(key, param);
        if (Q_UNLIKELY(!success)) {
            qCWarning(QT_CANBUS_PLUGINS_SYSTECCAN, "Cannot apply parameter %d with value %ls.",
                      key, qUtf16Printable(param.toString()));
        }
    }
|————Node:for Text: for
|————Node:( Text: (
|————Node:type_identifier Text: ConfigurationKey
|————Node:identifier Text: key
|————Node:: Text: :
|————Node:identifier Text: keys
|————Node:) Text: )
|————Node:compound_statement Text: {
        if (key == BitRateKey || key == ReceiveOwnKey)
            continue;
        const QVariant param = configurationParameter(key);
        const bool success = d->setConfigurationParameter(key, param);
        if (Q_UNLIKELY(!success)) {
            qCWarning(QT_CANBUS_PLUGINS_SYSTECCAN, "Cannot apply parameter %d with value %ls.",
                      key, qUtf16Printable(param.toString()));
        }
    }
|—————Node:{ Text: {
|—————Node:if_statement Text: if (key == BitRateKey || key == ReceiveOwnKey)
            continue;
|——————Node:if Text: if
|——————Node:condition_clause Text: (key == BitRateKey || key == ReceiveOwnKey)
|———————Node:( Text: (
|———————Node:binary_expression Text: key == BitRateKey || key == ReceiveOwnKey
|————————Node:binary_expression Text: key == BitRateKey
|—————————Node:identifier Text: key
|—————————Node:== Text: ==
|—————————Node:identifier Text: BitRateKey
|————————Node:|| Text: ||
|————————Node:binary_expression Text: key == ReceiveOwnKey
|—————————Node:identifier Text: key
|—————————Node:== Text: ==
|—————————Node:identifier Text: ReceiveOwnKey
|———————Node:) Text: )
|——————Node:continue_statement Text: continue;
|———————Node:continue Text: continue
|———————Node:; Text: ;
|—————Node:declaration Text: const QVariant param = configurationParameter(key);
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:type_identifier Text: QVariant
|——————Node:init_declarator Text: param = configurationParameter(key)
|———————Node:identifier Text: param
|———————Node:= Text: =
|———————Node:call_expression Text: configurationParameter(key)
|————————Node:identifier Text: configurationParameter
|————————Node:argument_list Text: (key)
|—————————Node:( Text: (
|—————————Node:identifier Text: key
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:declaration Text: const bool success = d->setConfigurationParameter(key, param);
|——————Node:type_qualifier Text: const
|———————Node:const Text: const
|——————Node:primitive_type Text: bool
|——————Node:init_declarator Text: success = d->setConfigurationParameter(key, param)
|———————Node:identifier Text: success
|———————Node:= Text: =
|———————Node:call_expression Text: d->setConfigurationParameter(key, param)
|————————Node:field_expression Text: d->setConfigurationParameter
|—————————Node:identifier Text: d
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: setConfigurationParameter
|————————Node:argument_list Text: (key, param)
|—————————Node:( Text: (
|—————————Node:identifier Text: key
|—————————Node:, Text: ,
|—————————Node:identifier Text: param
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (Q_UNLIKELY(!success)) {
            qCWarning(QT_CANBUS_PLUGINS_SYSTECCAN, "Cannot apply parameter %d with value %ls.",
                      key, qUtf16Printable(param.toString()));
        }
|——————Node:if Text: if
|——————Node:condition_clause Text: (Q_UNLIKELY(!success))
|———————Node:( Text: (
|———————Node:call_expression Text: Q_UNLIKELY(!success)
|————————Node:identifier Text: Q_UNLIKELY
|————————Node:argument_list Text: (!success)
|—————————Node:( Text: (
|—————————Node:unary_expression Text: !success
|——————————Node:! Text: !
|——————————Node:identifier Text: success
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {
            qCWarning(QT_CANBUS_PLUGINS_SYSTECCAN, "Cannot apply parameter %d with value %ls.",
                      key, qUtf16Printable(param.toString()));
        }
|———————Node:{ Text: {
|———————Node:expression_statement Text: qCWarning(QT_CANBUS_PLUGINS_SYSTECCAN, "Cannot apply parameter %d with value %ls.",
                      key, qUtf16Printable(param.toString()));
|————————Node:call_expression Text: qCWarning(QT_CANBUS_PLUGINS_SYSTECCAN, "Cannot apply parameter %d with value %ls.",
                      key, qUtf16Printable(param.toString()))
|—————————Node:identifier Text: qCWarning
|—————————Node:argument_list Text: (QT_CANBUS_PLUGINS_SYSTECCAN, "Cannot apply parameter %d with value %ls.",
                      key, qUtf16Printable(param.toString()))
|——————————Node:( Text: (
|——————————Node:identifier Text: QT_CANBUS_PLUGINS_SYSTECCAN
|——————————Node:, Text: ,
|——————————Node:string_literal Text: "Cannot apply parameter %d with value %ls."
|———————————Node:" Text: "
|———————————Node:string_content Text: Cannot apply parameter %d with value %ls.
|———————————Node:" Text: "
|——————————Node:, Text: ,
|——————————Node:identifier Text: key
|——————————Node:, Text: ,
|——————————Node:call_expression Text: qUtf16Printable(param.toString())
|———————————Node:identifier Text: qUtf16Printable
|———————————Node:argument_list Text: (param.toString())
|————————————Node:( Text: (
|————————————Node:call_expression Text: param.toString()
|—————————————Node:field_expression Text: param.toString
|——————————————Node:identifier Text: param
|——————————————Node:. Text: .
|——————————————Node:field_identifier Text: toString
|—————————————Node:argument_list Text: ()
|——————————————Node:( Text: (
|——————————————Node:) Text: )
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:expression_statement Text: setState(QCanBusDevice::ConnectedState);
|————Node:call_expression Text: setState(QCanBusDevice::ConnectedState)
|—————Node:identifier Text: setState
|—————Node:argument_list Text: (QCanBusDevice::ConnectedState)
|——————Node:( Text: (
|——————Node:qualified_identifier Text: QCanBusDevice::ConnectedState
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: ConnectedState
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return true;
|————Node:return Text: return
|————Node:true Text: true
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void SystecCanBackend::close()
{
    Q_D(SystecCanBackend);

    d->close();

    setState(QCanBusDevice::UnconnectedState);
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: SystecCanBackend::close()
|———Node:qualified_identifier Text: SystecCanBackend::close
|————Node:namespace_identifier Text: SystecCanBackend
|————Node::: Text: ::
|————Node:identifier Text: close
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_D(SystecCanBackend);

    d->close();

    setState(QCanBusDevice::UnconnectedState);
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_D(SystecCanBackend);
|————Node:call_expression Text: Q_D(SystecCanBackend)
|—————Node:identifier Text: Q_D
|—————Node:argument_list Text: (SystecCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: SystecCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: d->close();
|————Node:call_expression Text: d->close()
|—————Node:field_expression Text: d->close
|——————Node:identifier Text: d
|——————Node:-> Text: ->
|——————Node:field_identifier Text: close
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: setState(QCanBusDevice::UnconnectedState);
|————Node:call_expression Text: setState(QCanBusDevice::UnconnectedState)
|—————Node:identifier Text: setState
|—————Node:argument_list Text: (QCanBusDevice::UnconnectedState)
|——————Node:( Text: (
|——————Node:qualified_identifier Text: QCanBusDevice::UnconnectedState
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: UnconnectedState
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void SystecCanBackend::setConfigurationParameter(ConfigurationKey key, const QVariant &value)
{
    Q_D(SystecCanBackend);

    if (d->setConfigurationParameter(key, value))
        QCanBusDevice::setConfigurationParameter(key, value);
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: SystecCanBackend::setConfigurationParameter(ConfigurationKey key, const QVariant &value)
|———Node:qualified_identifier Text: SystecCanBackend::setConfigurationParameter
|————Node:namespace_identifier Text: SystecCanBackend
|————Node::: Text: ::
|————Node:identifier Text: setConfigurationParameter
|———Node:parameter_list Text: (ConfigurationKey key, const QVariant &value)
|————Node:( Text: (
|————Node:parameter_declaration Text: ConfigurationKey key
|—————Node:type_identifier Text: ConfigurationKey
|—————Node:identifier Text: key
|————Node:, Text: ,
|————Node:parameter_declaration Text: const QVariant &value
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: QVariant
|—————Node:reference_declarator Text: &value
|——————Node:& Text: &
|——————Node:identifier Text: value
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_D(SystecCanBackend);

    if (d->setConfigurationParameter(key, value))
        QCanBusDevice::setConfigurationParameter(key, value);
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_D(SystecCanBackend);
|————Node:call_expression Text: Q_D(SystecCanBackend)
|—————Node:identifier Text: Q_D
|—————Node:argument_list Text: (SystecCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: SystecCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (d->setConfigurationParameter(key, value))
        QCanBusDevice::setConfigurationParameter(key, value);
|————Node:if Text: if
|————Node:condition_clause Text: (d->setConfigurationParameter(key, value))
|—————Node:( Text: (
|—————Node:call_expression Text: d->setConfigurationParameter(key, value)
|——————Node:field_expression Text: d->setConfigurationParameter
|———————Node:identifier Text: d
|———————Node:-> Text: ->
|———————Node:field_identifier Text: setConfigurationParameter
|——————Node:argument_list Text: (key, value)
|———————Node:( Text: (
|———————Node:identifier Text: key
|———————Node:, Text: ,
|———————Node:identifier Text: value
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:expression_statement Text: QCanBusDevice::setConfigurationParameter(key, value);
|—————Node:call_expression Text: QCanBusDevice::setConfigurationParameter(key, value)
|——————Node:qualified_identifier Text: QCanBusDevice::setConfigurationParameter
|———————Node:namespace_identifier Text: QCanBusDevice
|———————Node::: Text: ::
|———————Node:identifier Text: setConfigurationParameter
|——————Node:argument_list Text: (key, value)
|———————Node:( Text: (
|———————Node:identifier Text: key
|———————Node:, Text: ,
|———————Node:identifier Text: value
|———————Node:) Text: )
|—————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: bool SystecCanBackend::writeFrame(const QCanBusFrame &newData)
{
    Q_D(SystecCanBackend);

    if (Q_UNLIKELY(state() != QCanBusDevice::ConnectedState))
        return false;

    if (Q_UNLIKELY(!newData.isValid())) {
        setError(tr("Cannot write invalid QCanBusFrame"), QCanBusDevice::WriteError);
        return false;
    }

    const QCanBusFrame::FrameType type = newData.frameType();
    if (Q_UNLIKELY(type != QCanBusFrame::DataFrame && type != QCanBusFrame::RemoteRequestFrame)) {
        setError(tr("Unable to write a frame with unacceptable type"),
                 QCanBusDevice::WriteError);
        return false;
    }

    // CAN FD frame format is not supported by the hardware yet
    if (Q_UNLIKELY(newData.hasFlexibleDataRateFormat())) {
        setError(tr("CAN FD frame format not supported"), QCanBusDevice::WriteError);
        return false;
    }

    enqueueOutgoingFrame(newData);
    d->enableWriteNotification(true);

    return true;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: SystecCanBackend::writeFrame(const QCanBusFrame &newData)
|———Node:qualified_identifier Text: SystecCanBackend::writeFrame
|————Node:namespace_identifier Text: SystecCanBackend
|————Node::: Text: ::
|————Node:identifier Text: writeFrame
|———Node:parameter_list Text: (const QCanBusFrame &newData)
|————Node:( Text: (
|————Node:parameter_declaration Text: const QCanBusFrame &newData
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: QCanBusFrame
|—————Node:reference_declarator Text: &newData
|——————Node:& Text: &
|——————Node:identifier Text: newData
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_D(SystecCanBackend);

    if (Q_UNLIKELY(state() != QCanBusDevice::ConnectedState))
        return false;

    if (Q_UNLIKELY(!newData.isValid())) {
        setError(tr("Cannot write invalid QCanBusFrame"), QCanBusDevice::WriteError);
        return false;
    }

    const QCanBusFrame::FrameType type = newData.frameType();
    if (Q_UNLIKELY(type != QCanBusFrame::DataFrame && type != QCanBusFrame::RemoteRequestFrame)) {
        setError(tr("Unable to write a frame with unacceptable type"),
                 QCanBusDevice::WriteError);
        return false;
    }

    // CAN FD frame format is not supported by the hardware yet
    if (Q_UNLIKELY(newData.hasFlexibleDataRateFormat())) {
        setError(tr("CAN FD frame format not supported"), QCanBusDevice::WriteError);
        return false;
    }

    enqueueOutgoingFrame(newData);
    d->enableWriteNotification(true);

    return true;
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_D(SystecCanBackend);
|————Node:call_expression Text: Q_D(SystecCanBackend)
|—————Node:identifier Text: Q_D
|—————Node:argument_list Text: (SystecCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: SystecCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(state() != QCanBusDevice::ConnectedState))
        return false;
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(state() != QCanBusDevice::ConnectedState))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(state() != QCanBusDevice::ConnectedState)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (state() != QCanBusDevice::ConnectedState)
|———————Node:( Text: (
|———————Node:binary_expression Text: state() != QCanBusDevice::ConnectedState
|————————Node:call_expression Text: state()
|—————————Node:identifier Text: state
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:!= Text: !=
|————————Node:qualified_identifier Text: QCanBusDevice::ConnectedState
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:identifier Text: ConnectedState
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:return_statement Text: return false;
|—————Node:return Text: return
|—————Node:false Text: false
|—————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(!newData.isValid())) {
        setError(tr("Cannot write invalid QCanBusFrame"), QCanBusDevice::WriteError);
        return false;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(!newData.isValid()))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(!newData.isValid())
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (!newData.isValid())
|———————Node:( Text: (
|———————Node:unary_expression Text: !newData.isValid()
|————————Node:! Text: !
|————————Node:call_expression Text: newData.isValid()
|—————————Node:field_expression Text: newData.isValid
|——————————Node:identifier Text: newData
|——————————Node:. Text: .
|——————————Node:field_identifier Text: isValid
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        setError(tr("Cannot write invalid QCanBusFrame"), QCanBusDevice::WriteError);
        return false;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: setError(tr("Cannot write invalid QCanBusFrame"), QCanBusDevice::WriteError);
|——————Node:call_expression Text: setError(tr("Cannot write invalid QCanBusFrame"), QCanBusDevice::WriteError)
|———————Node:identifier Text: setError
|———————Node:argument_list Text: (tr("Cannot write invalid QCanBusFrame"), QCanBusDevice::WriteError)
|————————Node:( Text: (
|————————Node:call_expression Text: tr("Cannot write invalid QCanBusFrame")
|—————————Node:identifier Text: tr
|—————————Node:argument_list Text: ("Cannot write invalid QCanBusFrame")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "Cannot write invalid QCanBusFrame"
|———————————Node:" Text: "
|———————————Node:string_content Text: Cannot write invalid QCanBusFrame
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:qualified_identifier Text: QCanBusDevice::WriteError
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:identifier Text: WriteError
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return false;
|——————Node:return Text: return
|——————Node:false Text: false
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:declaration Text: const QCanBusFrame::FrameType type = newData.frameType();
|————Node:type_qualifier Text: const
|—————Node:const Text: const
|————Node:qualified_identifier Text: QCanBusFrame::FrameType
|—————Node:namespace_identifier Text: QCanBusFrame
|—————Node::: Text: ::
|—————Node:type_identifier Text: FrameType
|————Node:init_declarator Text: type = newData.frameType()
|—————Node:identifier Text: type
|—————Node:= Text: =
|—————Node:call_expression Text: newData.frameType()
|——————Node:field_expression Text: newData.frameType
|———————Node:identifier Text: newData
|———————Node:. Text: .
|———————Node:field_identifier Text: frameType
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (Q_UNLIKELY(type != QCanBusFrame::DataFrame && type != QCanBusFrame::RemoteRequestFrame)) {
        setError(tr("Unable to write a frame with unacceptable type"),
                 QCanBusDevice::WriteError);
        return false;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(type != QCanBusFrame::DataFrame && type != QCanBusFrame::RemoteRequestFrame))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(type != QCanBusFrame::DataFrame && type != QCanBusFrame::RemoteRequestFrame)
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (type != QCanBusFrame::DataFrame && type != QCanBusFrame::RemoteRequestFrame)
|———————Node:( Text: (
|———————Node:binary_expression Text: type != QCanBusFrame::DataFrame && type != QCanBusFrame::RemoteRequestFrame
|————————Node:binary_expression Text: type != QCanBusFrame::DataFrame
|—————————Node:identifier Text: type
|—————————Node:!= Text: !=
|—————————Node:qualified_identifier Text: QCanBusFrame::DataFrame
|——————————Node:namespace_identifier Text: QCanBusFrame
|——————————Node::: Text: ::
|——————————Node:identifier Text: DataFrame
|————————Node:&& Text: &&
|————————Node:binary_expression Text: type != QCanBusFrame::RemoteRequestFrame
|—————————Node:identifier Text: type
|—————————Node:!= Text: !=
|—————————Node:qualified_identifier Text: QCanBusFrame::RemoteRequestFrame
|——————————Node:namespace_identifier Text: QCanBusFrame
|——————————Node::: Text: ::
|——————————Node:identifier Text: RemoteRequestFrame
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        setError(tr("Unable to write a frame with unacceptable type"),
                 QCanBusDevice::WriteError);
        return false;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: setError(tr("Unable to write a frame with unacceptable type"),
                 QCanBusDevice::WriteError);
|——————Node:call_expression Text: setError(tr("Unable to write a frame with unacceptable type"),
                 QCanBusDevice::WriteError)
|———————Node:identifier Text: setError
|———————Node:argument_list Text: (tr("Unable to write a frame with unacceptable type"),
                 QCanBusDevice::WriteError)
|————————Node:( Text: (
|————————Node:call_expression Text: tr("Unable to write a frame with unacceptable type")
|—————————Node:identifier Text: tr
|—————————Node:argument_list Text: ("Unable to write a frame with unacceptable type")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "Unable to write a frame with unacceptable type"
|———————————Node:" Text: "
|———————————Node:string_content Text: Unable to write a frame with unacceptable type
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:qualified_identifier Text: QCanBusDevice::WriteError
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:identifier Text: WriteError
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return false;
|——————Node:return Text: return
|——————Node:false Text: false
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:if_statement Text: if (Q_UNLIKELY(newData.hasFlexibleDataRateFormat())) {
        setError(tr("CAN FD frame format not supported"), QCanBusDevice::WriteError);
        return false;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (Q_UNLIKELY(newData.hasFlexibleDataRateFormat()))
|—————Node:( Text: (
|—————Node:call_expression Text: Q_UNLIKELY(newData.hasFlexibleDataRateFormat())
|——————Node:identifier Text: Q_UNLIKELY
|——————Node:argument_list Text: (newData.hasFlexibleDataRateFormat())
|———————Node:( Text: (
|———————Node:call_expression Text: newData.hasFlexibleDataRateFormat()
|————————Node:field_expression Text: newData.hasFlexibleDataRateFormat
|—————————Node:identifier Text: newData
|—————————Node:. Text: .
|—————————Node:field_identifier Text: hasFlexibleDataRateFormat
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
        setError(tr("CAN FD frame format not supported"), QCanBusDevice::WriteError);
        return false;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: setError(tr("CAN FD frame format not supported"), QCanBusDevice::WriteError);
|——————Node:call_expression Text: setError(tr("CAN FD frame format not supported"), QCanBusDevice::WriteError)
|———————Node:identifier Text: setError
|———————Node:argument_list Text: (tr("CAN FD frame format not supported"), QCanBusDevice::WriteError)
|————————Node:( Text: (
|————————Node:call_expression Text: tr("CAN FD frame format not supported")
|—————————Node:identifier Text: tr
|—————————Node:argument_list Text: ("CAN FD frame format not supported")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "CAN FD frame format not supported"
|———————————Node:" Text: "
|———————————Node:string_content Text: CAN FD frame format not supported
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:qualified_identifier Text: QCanBusDevice::WriteError
|—————————Node:namespace_identifier Text: QCanBusDevice
|—————————Node::: Text: ::
|—————————Node:identifier Text: WriteError
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:return_statement Text: return false;
|——————Node:return Text: return
|——————Node:false Text: false
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: enqueueOutgoingFrame(newData);
|————Node:call_expression Text: enqueueOutgoingFrame(newData)
|—————Node:identifier Text: enqueueOutgoingFrame
|—————Node:argument_list Text: (newData)
|——————Node:( Text: (
|——————Node:identifier Text: newData
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: d->enableWriteNotification(true);
|————Node:call_expression Text: d->enableWriteNotification(true)
|—————Node:field_expression Text: d->enableWriteNotification
|——————Node:identifier Text: d
|——————Node:-> Text: ->
|——————Node:field_identifier Text: enableWriteNotification
|—————Node:argument_list Text: (true)
|——————Node:( Text: (
|——————Node:true Text: true
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return true;
|————Node:return Text: return
|————Node:true Text: true
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: QString SystecCanBackend::interpretErrorFrame(const QCanBusFrame &errorFrame)
{
    Q_UNUSED(errorFrame);

    return QString();
}
|——Node:type_identifier Text: QString
|——Node:function_declarator Text: SystecCanBackend::interpretErrorFrame(const QCanBusFrame &errorFrame)
|———Node:qualified_identifier Text: SystecCanBackend::interpretErrorFrame
|————Node:namespace_identifier Text: SystecCanBackend
|————Node::: Text: ::
|————Node:identifier Text: interpretErrorFrame
|———Node:parameter_list Text: (const QCanBusFrame &errorFrame)
|————Node:( Text: (
|————Node:parameter_declaration Text: const QCanBusFrame &errorFrame
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: QCanBusFrame
|—————Node:reference_declarator Text: &errorFrame
|——————Node:& Text: &
|——————Node:identifier Text: errorFrame
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_UNUSED(errorFrame);

    return QString();
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_UNUSED(errorFrame);
|————Node:call_expression Text: Q_UNUSED(errorFrame)
|—————Node:identifier Text: Q_UNUSED
|—————Node:argument_list Text: (errorFrame)
|——————Node:( Text: (
|——————Node:identifier Text: errorFrame
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return QString();
|————Node:return Text: return
|————Node:call_expression Text: QString()
|—————Node:identifier Text: QString
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void SystecCanBackend::resetController()
{
    Q_D(SystecCanBackend);
    d->resetController();
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: SystecCanBackend::resetController()
|———Node:qualified_identifier Text: SystecCanBackend::resetController
|————Node:namespace_identifier Text: SystecCanBackend
|————Node::: Text: ::
|————Node:identifier Text: resetController
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_D(SystecCanBackend);
    d->resetController();
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_D(SystecCanBackend);
|————Node:call_expression Text: Q_D(SystecCanBackend)
|—————Node:identifier Text: Q_D
|—————Node:argument_list Text: (SystecCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: SystecCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: d->resetController();
|————Node:call_expression Text: d->resetController()
|—————Node:field_expression Text: d->resetController
|——————Node:identifier Text: d
|——————Node:-> Text: ->
|——————Node:field_identifier Text: resetController
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: QCanBusDevice::CanBusStatus SystecCanBackend::busStatus()
{
    Q_D(SystecCanBackend);

    return d->busStatus();
}
|——Node:qualified_identifier Text: QCanBusDevice::CanBusStatus
|———Node:namespace_identifier Text: QCanBusDevice
|———Node::: Text: ::
|———Node:type_identifier Text: CanBusStatus
|——Node:function_declarator Text: SystecCanBackend::busStatus()
|———Node:qualified_identifier Text: SystecCanBackend::busStatus
|————Node:namespace_identifier Text: SystecCanBackend
|————Node::: Text: ::
|————Node:identifier Text: busStatus
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    Q_D(SystecCanBackend);

    return d->busStatus();
}
|———Node:{ Text: {
|———Node:expression_statement Text: Q_D(SystecCanBackend);
|————Node:call_expression Text: Q_D(SystecCanBackend)
|—————Node:identifier Text: Q_D
|—————Node:argument_list Text: (SystecCanBackend)
|——————Node:( Text: (
|——————Node:identifier Text: SystecCanBackend
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return d->busStatus();
|————Node:return Text: return
|————Node:call_expression Text: d->busStatus()
|—————Node:field_expression Text: d->busStatus
|——————Node:identifier Text: d
|——————Node:-> Text: ->
|——————Node:field_identifier Text: busStatus
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:expression_statement Text: QT_END_NAMESPACE
|——Node:identifier Text: QT_END_NAMESPACE
|——Node:; Text: 
