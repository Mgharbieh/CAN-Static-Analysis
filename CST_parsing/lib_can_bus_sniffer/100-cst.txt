lib_can_bus_sniffer-src\lib_CAN_bus_decode.c

|Node:translation_unit
|—Node:comment
|—Node:comment
|—Node:preproc_include Text: #include "lib_CAN_bus_decode.h"

|——Node:#include Text: #include
|——Node:string_literal Text: "lib_CAN_bus_decode.h"
|———Node:" Text: "
|———Node:string_content Text: lib_CAN_bus_decode.h
|———Node:" Text: "
|—Node:comment
|—Node:preproc_def Text: #define MAX_NUM_FILTERS 25

|——Node:#define Text: #define
|——Node:identifier Text: MAX_NUM_FILTERS
|——Node:preproc_arg Text: 25
|—Node:declaration Text: uint16_t active_filters[MAX_NUM_FILTERS];
|——Node:primitive_type Text: uint16_t
|——Node:array_declarator Text: active_filters[MAX_NUM_FILTERS]
|———Node:identifier Text: active_filters
|———Node:[ Text: [
|———Node:identifier Text: MAX_NUM_FILTERS
|———Node:] Text: ]
|——Node:; Text: ;
|—Node:preproc_def Text: #define RESERVED_FILTER 0xFFFF

|——Node:#define Text: #define
|——Node:identifier Text: RESERVED_FILTER
|——Node:preproc_arg Text: 0xFFFF
|—Node:comment
|—Node:function_definition Text: void CAN_Decode_Initialize( PCAN_DECODE_PACKET_MANAGER dev )
{
	/* Clear the PID count */
    dev->num_pids = 0;

    /* Clear the active filters */
    for( uint8_t i = 0; i < MAX_NUM_FILTERS; i++ )
    	active_filters[i] = RESERVED_FILTER;

    for( uint8_t i = 0; i < NUM_CAN_DECODE; i++ )
    {
    	dev->stream[i] = NULL;
    }

    /* Verify the CAN bus filter callback has been assigned */
    if( dev->filter != NULL )
		dev->status |= CAN_DECODE_INIT;
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: CAN_Decode_Initialize( PCAN_DECODE_PACKET_MANAGER dev )
|———Node:identifier Text: CAN_Decode_Initialize
|———Node:parameter_list Text: ( PCAN_DECODE_PACKET_MANAGER dev )
|————Node:( Text: (
|————Node:parameter_declaration Text: PCAN_DECODE_PACKET_MANAGER dev
|—————Node:type_identifier Text: PCAN_DECODE_PACKET_MANAGER
|—————Node:identifier Text: dev
|————Node:) Text: )
|——Node:compound_statement Text: {
	/* Clear the PID count */
    dev->num_pids = 0;

    /* Clear the active filters */
    for( uint8_t i = 0; i < MAX_NUM_FILTERS; i++ )
    	active_filters[i] = RESERVED_FILTER;

    for( uint8_t i = 0; i < NUM_CAN_DECODE; i++ )
    {
    	dev->stream[i] = NULL;
    }

    /* Verify the CAN bus filter callback has been assigned */
    if( dev->filter != NULL )
		dev->status |= CAN_DECODE_INIT;
}
|———Node:{ Text: {
|———Node:comment
|———Node:expression_statement Text: dev->num_pids = 0;
|————Node:assignment_expression Text: dev->num_pids = 0
|—————Node:field_expression Text: dev->num_pids
|——————Node:identifier Text: dev
|——————Node:-> Text: ->
|——————Node:field_identifier Text: num_pids
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:for_statement Text: for( uint8_t i = 0; i < MAX_NUM_FILTERS; i++ )
    	active_filters[i] = RESERVED_FILTER;
|————Node:for Text: for
|————Node:( Text: (
|————Node:declaration Text: uint8_t i = 0;
|—————Node:primitive_type Text: uint8_t
|—————Node:init_declarator Text: i = 0
|——————Node:identifier Text: i
|——————Node:= Text: =
|——————Node:number_literal Text: 0
|—————Node:; Text: ;
|————Node:binary_expression Text: i < MAX_NUM_FILTERS
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:identifier Text: MAX_NUM_FILTERS
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:expression_statement Text: active_filters[i] = RESERVED_FILTER;
|—————Node:assignment_expression Text: active_filters[i] = RESERVED_FILTER
|——————Node:subscript_expression Text: active_filters[i]
|———————Node:identifier Text: active_filters
|———————Node:[ Text: [
|———————Node:identifier Text: i
|———————Node:] Text: ]
|——————Node:= Text: =
|——————Node:identifier Text: RESERVED_FILTER
|—————Node:; Text: ;
|———Node:for_statement Text: for( uint8_t i = 0; i < NUM_CAN_DECODE; i++ )
    {
    	dev->stream[i] = NULL;
    }
|————Node:for Text: for
|————Node:( Text: (
|————Node:declaration Text: uint8_t i = 0;
|—————Node:primitive_type Text: uint8_t
|—————Node:init_declarator Text: i = 0
|——————Node:identifier Text: i
|——————Node:= Text: =
|——————Node:number_literal Text: 0
|—————Node:; Text: ;
|————Node:binary_expression Text: i < NUM_CAN_DECODE
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:identifier Text: NUM_CAN_DECODE
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    	dev->stream[i] = NULL;
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: dev->stream[i] = NULL;
|——————Node:assignment_expression Text: dev->stream[i] = NULL
|———————Node:subscript_expression Text: dev->stream[i]
|————————Node:field_expression Text: dev->stream
|—————————Node:identifier Text: dev
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: stream
|————————Node:[ Text: [
|————————Node:identifier Text: i
|————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:null Text: NULL
|————————Node:NULL Text: NULL
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:if_statement Text: if( dev->filter != NULL )
		dev->status |= CAN_DECODE_INIT;
|————Node:if Text: if
|————Node:parenthesized_expression Text: ( dev->filter != NULL )
|—————Node:( Text: (
|—————Node:binary_expression Text: dev->filter != NULL
|——————Node:field_expression Text: dev->filter
|———————Node:identifier Text: dev
|———————Node:-> Text: ->
|———————Node:field_identifier Text: filter
|——————Node:!= Text: !=
|——————Node:null Text: NULL
|———————Node:NULL Text: NULL
|—————Node:) Text: )
|————Node:expression_statement Text: dev->status |= CAN_DECODE_INIT;
|—————Node:assignment_expression Text: dev->status |= CAN_DECODE_INIT
|——————Node:field_expression Text: dev->status
|———————Node:identifier Text: dev
|———————Node:-> Text: ->
|———————Node:field_identifier Text: status
|——————Node:|= Text: |=
|——————Node:identifier Text: CAN_DECODE_INIT
|—————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: PID_SUPPORTED_STATUS CAN_Decode_Supported( PTR_PID_DATA pid )
{
    switch( pid->pid )
    {
        #ifdef DECODE_ENGINE_RPM_PID
		case DECODE_ENGINE_RPM_PID:
        #endif

        #ifdef DECODE_ACCEL_PEDAL_POS_PID
		case DECODE_ACCEL_PEDAL_POS_PID:
        #endif

        #ifdef DECODE_ENGINE_OIL_TEMP_PID
		case DECODE_ENGINE_OIL_TEMP_PID:
        #endif

        #ifdef DECODE_BOOST_PRESSURE_PID
		case DECODE_BOOST_PRESSURE_PID:
        #endif
            return PID_SUPPORTED;

        default:
            return PID_NOT_SUPPORTED;
    }
}
|——Node:type_identifier Text: PID_SUPPORTED_STATUS
|——Node:function_declarator Text: CAN_Decode_Supported( PTR_PID_DATA pid )
|———Node:identifier Text: CAN_Decode_Supported
|———Node:parameter_list Text: ( PTR_PID_DATA pid )
|————Node:( Text: (
|————Node:parameter_declaration Text: PTR_PID_DATA pid
|—————Node:type_identifier Text: PTR_PID_DATA
|—————Node:identifier Text: pid
|————Node:) Text: )
|——Node:compound_statement Text: {
    switch( pid->pid )
    {
        #ifdef DECODE_ENGINE_RPM_PID
		case DECODE_ENGINE_RPM_PID:
        #endif

        #ifdef DECODE_ACCEL_PEDAL_POS_PID
		case DECODE_ACCEL_PEDAL_POS_PID:
        #endif

        #ifdef DECODE_ENGINE_OIL_TEMP_PID
		case DECODE_ENGINE_OIL_TEMP_PID:
        #endif

        #ifdef DECODE_BOOST_PRESSURE_PID
		case DECODE_BOOST_PRESSURE_PID:
        #endif
            return PID_SUPPORTED;

        default:
            return PID_NOT_SUPPORTED;
    }
}
|———Node:{ Text: {
|———Node:switch_statement Text: switch( pid->pid )
    {
        #ifdef DECODE_ENGINE_RPM_PID
		case DECODE_ENGINE_RPM_PID:
        #endif

        #ifdef DECODE_ACCEL_PEDAL_POS_PID
		case DECODE_ACCEL_PEDAL_POS_PID:
        #endif

        #ifdef DECODE_ENGINE_OIL_TEMP_PID
		case DECODE_ENGINE_OIL_TEMP_PID:
        #endif

        #ifdef DECODE_BOOST_PRESSURE_PID
		case DECODE_BOOST_PRESSURE_PID:
        #endif
            return PID_SUPPORTED;

        default:
            return PID_NOT_SUPPORTED;
    }
|————Node:switch Text: switch
|————Node:parenthesized_expression Text: ( pid->pid )
|—————Node:( Text: (
|—————Node:field_expression Text: pid->pid
|——————Node:identifier Text: pid
|——————Node:-> Text: ->
|——————Node:field_identifier Text: pid
|—————Node:) Text: )
|————Node:compound_statement Text: {
        #ifdef DECODE_ENGINE_RPM_PID
		case DECODE_ENGINE_RPM_PID:
        #endif

        #ifdef DECODE_ACCEL_PEDAL_POS_PID
		case DECODE_ACCEL_PEDAL_POS_PID:
        #endif

        #ifdef DECODE_ENGINE_OIL_TEMP_PID
		case DECODE_ENGINE_OIL_TEMP_PID:
        #endif

        #ifdef DECODE_BOOST_PRESSURE_PID
		case DECODE_BOOST_PRESSURE_PID:
        #endif
            return PID_SUPPORTED;

        default:
            return PID_NOT_SUPPORTED;
    }
|—————Node:{ Text: {
|—————Node:preproc_ifdef Text: #ifdef DECODE_ENGINE_RPM_PID
		case DECODE_ENGINE_RPM_PID:
        #endif
|——————Node:#ifdef Text: #ifdef
|——————Node:identifier Text: DECODE_ENGINE_RPM_PID
|——————Node:case_statement Text: case DECODE_ENGINE_RPM_PID:
|———————Node:case Text: case
|———————Node:identifier Text: DECODE_ENGINE_RPM_PID
|———————Node:: Text: :
|——————Node:#endif Text: #endif
|—————Node:preproc_ifdef Text: #ifdef DECODE_ACCEL_PEDAL_POS_PID
		case DECODE_ACCEL_PEDAL_POS_PID:
        #endif
|——————Node:#ifdef Text: #ifdef
|——————Node:identifier Text: DECODE_ACCEL_PEDAL_POS_PID
|——————Node:case_statement Text: case DECODE_ACCEL_PEDAL_POS_PID:
|———————Node:case Text: case
|———————Node:identifier Text: DECODE_ACCEL_PEDAL_POS_PID
|———————Node:: Text: :
|——————Node:#endif Text: #endif
|—————Node:preproc_ifdef Text: #ifdef DECODE_ENGINE_OIL_TEMP_PID
		case DECODE_ENGINE_OIL_TEMP_PID:
        #endif
|——————Node:#ifdef Text: #ifdef
|——————Node:identifier Text: DECODE_ENGINE_OIL_TEMP_PID
|——————Node:case_statement Text: case DECODE_ENGINE_OIL_TEMP_PID:
|———————Node:case Text: case
|———————Node:identifier Text: DECODE_ENGINE_OIL_TEMP_PID
|———————Node:: Text: :
|——————Node:#endif Text: #endif
|—————Node:preproc_ifdef Text: #ifdef DECODE_BOOST_PRESSURE_PID
		case DECODE_BOOST_PRESSURE_PID:
        #endif
|——————Node:#ifdef Text: #ifdef
|——————Node:identifier Text: DECODE_BOOST_PRESSURE_PID
|——————Node:case_statement Text: case DECODE_BOOST_PRESSURE_PID:
|———————Node:case Text: case
|———————Node:identifier Text: DECODE_BOOST_PRESSURE_PID
|———————Node:: Text: :
|——————Node:#endif Text: #endif
|—————Node:return_statement Text: return PID_SUPPORTED;
|——————Node:return Text: return
|——————Node:identifier Text: PID_SUPPORTED
|——————Node:; Text: ;
|—————Node:case_statement Text: default:
            return PID_NOT_SUPPORTED;
|——————Node:default Text: default
|——————Node:: Text: :
|——————Node:return_statement Text: return PID_NOT_SUPPORTED;
|———————Node:return Text: return
|———————Node:identifier Text: PID_NOT_SUPPORTED
|———————Node:; Text: ;
|—————Node:} Text: }
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: static void add_filter(  PCAN_DECODE_PACKET_MANAGER dev, uint16_t id )
{
    /* Check what filters are currently active */
    for( uint8_t i = 0; i < MAX_NUM_FILTERS; i++ )
    {
        /* If the filter ID is already present, then there is no need  *
         * to add another filter. So we can break out of this function */
        if( active_filters[i] == id ) { return; }

        /* Increment until an open slot is available and add the new   *
         * filter to the device.                                       */
        else if( active_filters[i] == RESERVED_FILTER )
        {
        	/* Copy the ID to the filter slot */
            active_filters[i] = id;

            /* Request the filter from the hardware peripheral.       *
             * TODO: Error handle, what if the hardware fails or if   *
             * the hardware runs out of mailboxes?                    */
            dev->filter( id );

            return;
        }
    }
}
|——Node:storage_class_specifier Text: static
|———Node:static Text: static
|——Node:primitive_type Text: void
|——Node:function_declarator Text: add_filter(  PCAN_DECODE_PACKET_MANAGER dev, uint16_t id )
|———Node:identifier Text: add_filter
|———Node:parameter_list Text: (  PCAN_DECODE_PACKET_MANAGER dev, uint16_t id )
|————Node:( Text: (
|————Node:parameter_declaration Text: PCAN_DECODE_PACKET_MANAGER dev
|—————Node:type_identifier Text: PCAN_DECODE_PACKET_MANAGER
|—————Node:identifier Text: dev
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint16_t id
|—————Node:primitive_type Text: uint16_t
|—————Node:identifier Text: id
|————Node:) Text: )
|——Node:compound_statement Text: {
    /* Check what filters are currently active */
    for( uint8_t i = 0; i < MAX_NUM_FILTERS; i++ )
    {
        /* If the filter ID is already present, then there is no need  *
         * to add another filter. So we can break out of this function */
        if( active_filters[i] == id ) { return; }

        /* Increment until an open slot is available and add the new   *
         * filter to the device.                                       */
        else if( active_filters[i] == RESERVED_FILTER )
        {
        	/* Copy the ID to the filter slot */
            active_filters[i] = id;

            /* Request the filter from the hardware peripheral.       *
             * TODO: Error handle, what if the hardware fails or if   *
             * the hardware runs out of mailboxes?                    */
            dev->filter( id );

            return;
        }
    }
}
|———Node:{ Text: {
|———Node:comment
|———Node:for_statement Text: for( uint8_t i = 0; i < MAX_NUM_FILTERS; i++ )
    {
        /* If the filter ID is already present, then there is no need  *
         * to add another filter. So we can break out of this function */
        if( active_filters[i] == id ) { return; }

        /* Increment until an open slot is available and add the new   *
         * filter to the device.                                       */
        else if( active_filters[i] == RESERVED_FILTER )
        {
        	/* Copy the ID to the filter slot */
            active_filters[i] = id;

            /* Request the filter from the hardware peripheral.       *
             * TODO: Error handle, what if the hardware fails or if   *
             * the hardware runs out of mailboxes?                    */
            dev->filter( id );

            return;
        }
    }
|————Node:for Text: for
|————Node:( Text: (
|————Node:declaration Text: uint8_t i = 0;
|—————Node:primitive_type Text: uint8_t
|—————Node:init_declarator Text: i = 0
|——————Node:identifier Text: i
|——————Node:= Text: =
|——————Node:number_literal Text: 0
|—————Node:; Text: ;
|————Node:binary_expression Text: i < MAX_NUM_FILTERS
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:identifier Text: MAX_NUM_FILTERS
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
        /* If the filter ID is already present, then there is no need  *
         * to add another filter. So we can break out of this function */
        if( active_filters[i] == id ) { return; }

        /* Increment until an open slot is available and add the new   *
         * filter to the device.                                       */
        else if( active_filters[i] == RESERVED_FILTER )
        {
        	/* Copy the ID to the filter slot */
            active_filters[i] = id;

            /* Request the filter from the hardware peripheral.       *
             * TODO: Error handle, what if the hardware fails or if   *
             * the hardware runs out of mailboxes?                    */
            dev->filter( id );

            return;
        }
    }
|—————Node:{ Text: {
|—————Node:comment
|—————Node:if_statement Text: if( active_filters[i] == id ) { return; }

        /* Increment until an open slot is available and add the new   *
         * filter to the device.                                       */
        else if( active_filters[i] == RESERVED_FILTER )
        {
        	/* Copy the ID to the filter slot */
            active_filters[i] = id;

            /* Request the filter from the hardware peripheral.       *
             * TODO: Error handle, what if the hardware fails or if   *
             * the hardware runs out of mailboxes?                    */
            dev->filter( id );

            return;
        }
|——————Node:if Text: if
|——————Node:parenthesized_expression Text: ( active_filters[i] == id )
|———————Node:( Text: (
|———————Node:binary_expression Text: active_filters[i] == id
|————————Node:subscript_expression Text: active_filters[i]
|—————————Node:identifier Text: active_filters
|—————————Node:[ Text: [
|—————————Node:identifier Text: i
|—————————Node:] Text: ]
|————————Node:== Text: ==
|————————Node:identifier Text: id
|———————Node:) Text: )
|——————Node:compound_statement Text: { return; }
|———————Node:{ Text: {
|———————Node:return_statement Text: return;
|————————Node:return Text: return
|————————Node:; Text: ;
|———————Node:} Text: }
|——————Node:comment
|——————Node:else_clause Text: else if( active_filters[i] == RESERVED_FILTER )
        {
        	/* Copy the ID to the filter slot */
            active_filters[i] = id;

            /* Request the filter from the hardware peripheral.       *
             * TODO: Error handle, what if the hardware fails or if   *
             * the hardware runs out of mailboxes?                    */
            dev->filter( id );

            return;
        }
|———————Node:else Text: else
|———————Node:if_statement Text: if( active_filters[i] == RESERVED_FILTER )
        {
        	/* Copy the ID to the filter slot */
            active_filters[i] = id;

            /* Request the filter from the hardware peripheral.       *
             * TODO: Error handle, what if the hardware fails or if   *
             * the hardware runs out of mailboxes?                    */
            dev->filter( id );

            return;
        }
|————————Node:if Text: if
|————————Node:parenthesized_expression Text: ( active_filters[i] == RESERVED_FILTER )
|—————————Node:( Text: (
|—————————Node:binary_expression Text: active_filters[i] == RESERVED_FILTER
|——————————Node:subscript_expression Text: active_filters[i]
|———————————Node:identifier Text: active_filters
|———————————Node:[ Text: [
|———————————Node:identifier Text: i
|———————————Node:] Text: ]
|——————————Node:== Text: ==
|——————————Node:identifier Text: RESERVED_FILTER
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
        	/* Copy the ID to the filter slot */
            active_filters[i] = id;

            /* Request the filter from the hardware peripheral.       *
             * TODO: Error handle, what if the hardware fails or if   *
             * the hardware runs out of mailboxes?                    */
            dev->filter( id );

            return;
        }
|—————————Node:{ Text: {
|—————————Node:comment
|—————————Node:expression_statement Text: active_filters[i] = id;
|——————————Node:assignment_expression Text: active_filters[i] = id
|———————————Node:subscript_expression Text: active_filters[i]
|————————————Node:identifier Text: active_filters
|————————————Node:[ Text: [
|————————————Node:identifier Text: i
|————————————Node:] Text: ]
|———————————Node:= Text: =
|———————————Node:identifier Text: id
|——————————Node:; Text: ;
|—————————Node:comment
|—————————Node:expression_statement Text: dev->filter( id );
|——————————Node:call_expression Text: dev->filter( id )
|———————————Node:field_expression Text: dev->filter
|————————————Node:identifier Text: dev
|————————————Node:-> Text: ->
|————————————Node:field_identifier Text: filter
|———————————Node:argument_list Text: ( id )
|————————————Node:( Text: (
|————————————Node:identifier Text: id
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:return_statement Text: return;
|——————————Node:return Text: return
|——————————Node:; Text: ;
|—————————Node:} Text: }
|—————Node:} Text: }
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: PID_SUPPORTED_STATUS CAN_Decode_Add_PID( PCAN_DECODE_PACKET_MANAGER dev, PTR_PID_DATA pid )
{
	/* Check to see if the PID can be decoded by the library          */
	if( CAN_Decode_Supported( pid ) == PID_SUPPORTED )
	{
		/* Determine what arbitration ID needs to be monitored to     *
		 * obtain the PID data.	                                      */
		switch( pid->pid )
		{

			#ifdef DECODE_ENGINE_RPM_PID
			case DECODE_ENGINE_RPM_PID:
				add_filter( dev, DECODE_ENGINE_RRPM_ID );
				break;
			#endif

			#ifdef DECODE_ACCEL_PEDAL_POS_PID
			case DECODE_ACCEL_PEDAL_POS_PID:
				add_filter( dev, DECODE_ACCEL_PEDAL_POS_ID );
				break;
			#endif

			#ifdef DECODE_ENGINE_OIL_TEMP_PID
			case DECODE_ENGINE_OIL_TEMP_PID:
				add_filter( dev, DECODE_ENGINE_OIL_TEMP_ID );
				break;
			#endif

			#ifdef DECODE_BOOST_PRESSURE_PID
			case DECODE_BOOST_PRESSURE_PID:
				add_filter( dev, DECODE_BOOST_PRESSURE_ID );
				break;
			#endif
		}

		dev->stream[dev->num_pids] = pid;

		/* Increment the number of PIDs being streamed */
		dev->num_pids++;

		/* PID is supported and the filter is configured */
		return PID_SUPPORTED;
	}

	/* This PID is not supported, no filters were added */
	else { return PID_NOT_SUPPORTED; }
}
|——Node:type_identifier Text: PID_SUPPORTED_STATUS
|——Node:function_declarator Text: CAN_Decode_Add_PID( PCAN_DECODE_PACKET_MANAGER dev, PTR_PID_DATA pid )
|———Node:identifier Text: CAN_Decode_Add_PID
|———Node:parameter_list Text: ( PCAN_DECODE_PACKET_MANAGER dev, PTR_PID_DATA pid )
|————Node:( Text: (
|————Node:parameter_declaration Text: PCAN_DECODE_PACKET_MANAGER dev
|—————Node:type_identifier Text: PCAN_DECODE_PACKET_MANAGER
|—————Node:identifier Text: dev
|————Node:, Text: ,
|————Node:parameter_declaration Text: PTR_PID_DATA pid
|—————Node:type_identifier Text: PTR_PID_DATA
|—————Node:identifier Text: pid
|————Node:) Text: )
|——Node:compound_statement Text: {
	/* Check to see if the PID can be decoded by the library          */
	if( CAN_Decode_Supported( pid ) == PID_SUPPORTED )
	{
		/* Determine what arbitration ID needs to be monitored to     *
		 * obtain the PID data.	                                      */
		switch( pid->pid )
		{

			#ifdef DECODE_ENGINE_RPM_PID
			case DECODE_ENGINE_RPM_PID:
				add_filter( dev, DECODE_ENGINE_RRPM_ID );
				break;
			#endif

			#ifdef DECODE_ACCEL_PEDAL_POS_PID
			case DECODE_ACCEL_PEDAL_POS_PID:
				add_filter( dev, DECODE_ACCEL_PEDAL_POS_ID );
				break;
			#endif

			#ifdef DECODE_ENGINE_OIL_TEMP_PID
			case DECODE_ENGINE_OIL_TEMP_PID:
				add_filter( dev, DECODE_ENGINE_OIL_TEMP_ID );
				break;
			#endif

			#ifdef DECODE_BOOST_PRESSURE_PID
			case DECODE_BOOST_PRESSURE_PID:
				add_filter( dev, DECODE_BOOST_PRESSURE_ID );
				break;
			#endif
		}

		dev->stream[dev->num_pids] = pid;

		/* Increment the number of PIDs being streamed */
		dev->num_pids++;

		/* PID is supported and the filter is configured */
		return PID_SUPPORTED;
	}

	/* This PID is not supported, no filters were added */
	else { return PID_NOT_SUPPORTED; }
}
|———Node:{ Text: {
|———Node:comment
|———Node:if_statement Text: if( CAN_Decode_Supported( pid ) == PID_SUPPORTED )
	{
		/* Determine what arbitration ID needs to be monitored to     *
		 * obtain the PID data.	                                      */
		switch( pid->pid )
		{

			#ifdef DECODE_ENGINE_RPM_PID
			case DECODE_ENGINE_RPM_PID:
				add_filter( dev, DECODE_ENGINE_RRPM_ID );
				break;
			#endif

			#ifdef DECODE_ACCEL_PEDAL_POS_PID
			case DECODE_ACCEL_PEDAL_POS_PID:
				add_filter( dev, DECODE_ACCEL_PEDAL_POS_ID );
				break;
			#endif

			#ifdef DECODE_ENGINE_OIL_TEMP_PID
			case DECODE_ENGINE_OIL_TEMP_PID:
				add_filter( dev, DECODE_ENGINE_OIL_TEMP_ID );
				break;
			#endif

			#ifdef DECODE_BOOST_PRESSURE_PID
			case DECODE_BOOST_PRESSURE_PID:
				add_filter( dev, DECODE_BOOST_PRESSURE_ID );
				break;
			#endif
		}

		dev->stream[dev->num_pids] = pid;

		/* Increment the number of PIDs being streamed */
		dev->num_pids++;

		/* PID is supported and the filter is configured */
		return PID_SUPPORTED;
	}

	/* This PID is not supported, no filters were added */
	else { return PID_NOT_SUPPORTED; }
|————Node:if Text: if
|————Node:parenthesized_expression Text: ( CAN_Decode_Supported( pid ) == PID_SUPPORTED )
|—————Node:( Text: (
|—————Node:binary_expression Text: CAN_Decode_Supported( pid ) == PID_SUPPORTED
|——————Node:call_expression Text: CAN_Decode_Supported( pid )
|———————Node:identifier Text: CAN_Decode_Supported
|———————Node:argument_list Text: ( pid )
|————————Node:( Text: (
|————————Node:identifier Text: pid
|————————Node:) Text: )
|——————Node:== Text: ==
|——————Node:identifier Text: PID_SUPPORTED
|—————Node:) Text: )
|————Node:compound_statement Text: {
		/* Determine what arbitration ID needs to be monitored to     *
		 * obtain the PID data.	                                      */
		switch( pid->pid )
		{

			#ifdef DECODE_ENGINE_RPM_PID
			case DECODE_ENGINE_RPM_PID:
				add_filter( dev, DECODE_ENGINE_RRPM_ID );
				break;
			#endif

			#ifdef DECODE_ACCEL_PEDAL_POS_PID
			case DECODE_ACCEL_PEDAL_POS_PID:
				add_filter( dev, DECODE_ACCEL_PEDAL_POS_ID );
				break;
			#endif

			#ifdef DECODE_ENGINE_OIL_TEMP_PID
			case DECODE_ENGINE_OIL_TEMP_PID:
				add_filter( dev, DECODE_ENGINE_OIL_TEMP_ID );
				break;
			#endif

			#ifdef DECODE_BOOST_PRESSURE_PID
			case DECODE_BOOST_PRESSURE_PID:
				add_filter( dev, DECODE_BOOST_PRESSURE_ID );
				break;
			#endif
		}

		dev->stream[dev->num_pids] = pid;

		/* Increment the number of PIDs being streamed */
		dev->num_pids++;

		/* PID is supported and the filter is configured */
		return PID_SUPPORTED;
	}
|—————Node:{ Text: {
|—————Node:comment
|—————Node:switch_statement Text: switch( pid->pid )
		{

			#ifdef DECODE_ENGINE_RPM_PID
			case DECODE_ENGINE_RPM_PID:
				add_filter( dev, DECODE_ENGINE_RRPM_ID );
				break;
			#endif

			#ifdef DECODE_ACCEL_PEDAL_POS_PID
			case DECODE_ACCEL_PEDAL_POS_PID:
				add_filter( dev, DECODE_ACCEL_PEDAL_POS_ID );
				break;
			#endif

			#ifdef DECODE_ENGINE_OIL_TEMP_PID
			case DECODE_ENGINE_OIL_TEMP_PID:
				add_filter( dev, DECODE_ENGINE_OIL_TEMP_ID );
				break;
			#endif

			#ifdef DECODE_BOOST_PRESSURE_PID
			case DECODE_BOOST_PRESSURE_PID:
				add_filter( dev, DECODE_BOOST_PRESSURE_ID );
				break;
			#endif
		}
|——————Node:switch Text: switch
|——————Node:parenthesized_expression Text: ( pid->pid )
|———————Node:( Text: (
|———————Node:field_expression Text: pid->pid
|————————Node:identifier Text: pid
|————————Node:-> Text: ->
|————————Node:field_identifier Text: pid
|———————Node:) Text: )
|——————Node:compound_statement Text: {

			#ifdef DECODE_ENGINE_RPM_PID
			case DECODE_ENGINE_RPM_PID:
				add_filter( dev, DECODE_ENGINE_RRPM_ID );
				break;
			#endif

			#ifdef DECODE_ACCEL_PEDAL_POS_PID
			case DECODE_ACCEL_PEDAL_POS_PID:
				add_filter( dev, DECODE_ACCEL_PEDAL_POS_ID );
				break;
			#endif

			#ifdef DECODE_ENGINE_OIL_TEMP_PID
			case DECODE_ENGINE_OIL_TEMP_PID:
				add_filter( dev, DECODE_ENGINE_OIL_TEMP_ID );
				break;
			#endif

			#ifdef DECODE_BOOST_PRESSURE_PID
			case DECODE_BOOST_PRESSURE_PID:
				add_filter( dev, DECODE_BOOST_PRESSURE_ID );
				break;
			#endif
		}
|———————Node:{ Text: {
|———————Node:preproc_ifdef Text: #ifdef DECODE_ENGINE_RPM_PID
			case DECODE_ENGINE_RPM_PID:
				add_filter( dev, DECODE_ENGINE_RRPM_ID );
				break;
			#endif
|————————Node:#ifdef Text: #ifdef
|————————Node:identifier Text: DECODE_ENGINE_RPM_PID
|————————Node:case_statement Text: case DECODE_ENGINE_RPM_PID:
				add_filter( dev, DECODE_ENGINE_RRPM_ID );
				break;
|—————————Node:case Text: case
|—————————Node:identifier Text: DECODE_ENGINE_RPM_PID
|—————————Node:: Text: :
|—————————Node:expression_statement Text: add_filter( dev, DECODE_ENGINE_RRPM_ID );
|——————————Node:call_expression Text: add_filter( dev, DECODE_ENGINE_RRPM_ID )
|———————————Node:identifier Text: add_filter
|———————————Node:argument_list Text: ( dev, DECODE_ENGINE_RRPM_ID )
|————————————Node:( Text: (
|————————————Node:identifier Text: dev
|————————————Node:, Text: ,
|————————————Node:identifier Text: DECODE_ENGINE_RRPM_ID
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:break_statement Text: break;
|——————————Node:break Text: break
|——————————Node:; Text: ;
|————————Node:#endif Text: #endif
|———————Node:preproc_ifdef Text: #ifdef DECODE_ACCEL_PEDAL_POS_PID
			case DECODE_ACCEL_PEDAL_POS_PID:
				add_filter( dev, DECODE_ACCEL_PEDAL_POS_ID );
				break;
			#endif
|————————Node:#ifdef Text: #ifdef
|————————Node:identifier Text: DECODE_ACCEL_PEDAL_POS_PID
|————————Node:case_statement Text: case DECODE_ACCEL_PEDAL_POS_PID:
				add_filter( dev, DECODE_ACCEL_PEDAL_POS_ID );
				break;
|—————————Node:case Text: case
|—————————Node:identifier Text: DECODE_ACCEL_PEDAL_POS_PID
|—————————Node:: Text: :
|—————————Node:expression_statement Text: add_filter( dev, DECODE_ACCEL_PEDAL_POS_ID );
|——————————Node:call_expression Text: add_filter( dev, DECODE_ACCEL_PEDAL_POS_ID )
|———————————Node:identifier Text: add_filter
|———————————Node:argument_list Text: ( dev, DECODE_ACCEL_PEDAL_POS_ID )
|————————————Node:( Text: (
|————————————Node:identifier Text: dev
|————————————Node:, Text: ,
|————————————Node:identifier Text: DECODE_ACCEL_PEDAL_POS_ID
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:break_statement Text: break;
|——————————Node:break Text: break
|——————————Node:; Text: ;
|————————Node:#endif Text: #endif
|———————Node:preproc_ifdef Text: #ifdef DECODE_ENGINE_OIL_TEMP_PID
			case DECODE_ENGINE_OIL_TEMP_PID:
				add_filter( dev, DECODE_ENGINE_OIL_TEMP_ID );
				break;
			#endif
|————————Node:#ifdef Text: #ifdef
|————————Node:identifier Text: DECODE_ENGINE_OIL_TEMP_PID
|————————Node:case_statement Text: case DECODE_ENGINE_OIL_TEMP_PID:
				add_filter( dev, DECODE_ENGINE_OIL_TEMP_ID );
				break;
|—————————Node:case Text: case
|—————————Node:identifier Text: DECODE_ENGINE_OIL_TEMP_PID
|—————————Node:: Text: :
|—————————Node:expression_statement Text: add_filter( dev, DECODE_ENGINE_OIL_TEMP_ID );
|——————————Node:call_expression Text: add_filter( dev, DECODE_ENGINE_OIL_TEMP_ID )
|———————————Node:identifier Text: add_filter
|———————————Node:argument_list Text: ( dev, DECODE_ENGINE_OIL_TEMP_ID )
|————————————Node:( Text: (
|————————————Node:identifier Text: dev
|————————————Node:, Text: ,
|————————————Node:identifier Text: DECODE_ENGINE_OIL_TEMP_ID
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:break_statement Text: break;
|——————————Node:break Text: break
|——————————Node:; Text: ;
|————————Node:#endif Text: #endif
|———————Node:preproc_ifdef Text: #ifdef DECODE_BOOST_PRESSURE_PID
			case DECODE_BOOST_PRESSURE_PID:
				add_filter( dev, DECODE_BOOST_PRESSURE_ID );
				break;
			#endif
|————————Node:#ifdef Text: #ifdef
|————————Node:identifier Text: DECODE_BOOST_PRESSURE_PID
|————————Node:case_statement Text: case DECODE_BOOST_PRESSURE_PID:
				add_filter( dev, DECODE_BOOST_PRESSURE_ID );
				break;
|—————————Node:case Text: case
|—————————Node:identifier Text: DECODE_BOOST_PRESSURE_PID
|—————————Node:: Text: :
|—————————Node:expression_statement Text: add_filter( dev, DECODE_BOOST_PRESSURE_ID );
|——————————Node:call_expression Text: add_filter( dev, DECODE_BOOST_PRESSURE_ID )
|———————————Node:identifier Text: add_filter
|———————————Node:argument_list Text: ( dev, DECODE_BOOST_PRESSURE_ID )
|————————————Node:( Text: (
|————————————Node:identifier Text: dev
|————————————Node:, Text: ,
|————————————Node:identifier Text: DECODE_BOOST_PRESSURE_ID
|————————————Node:) Text: )
|——————————Node:; Text: ;
|—————————Node:break_statement Text: break;
|——————————Node:break Text: break
|——————————Node:; Text: ;
|————————Node:#endif Text: #endif
|———————Node:} Text: }
|—————Node:expression_statement Text: dev->stream[dev->num_pids] = pid;
|——————Node:assignment_expression Text: dev->stream[dev->num_pids] = pid
|———————Node:subscript_expression Text: dev->stream[dev->num_pids]
|————————Node:field_expression Text: dev->stream
|—————————Node:identifier Text: dev
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: stream
|————————Node:[ Text: [
|————————Node:field_expression Text: dev->num_pids
|—————————Node:identifier Text: dev
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: num_pids
|————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:identifier Text: pid
|——————Node:; Text: ;
|—————Node:comment
|—————Node:expression_statement Text: dev->num_pids++;
|——————Node:update_expression Text: dev->num_pids++
|———————Node:field_expression Text: dev->num_pids
|————————Node:identifier Text: dev
|————————Node:-> Text: ->
|————————Node:field_identifier Text: num_pids
|———————Node:++ Text: ++
|——————Node:; Text: ;
|—————Node:comment
|—————Node:return_statement Text: return PID_SUPPORTED;
|——————Node:return Text: return
|——————Node:identifier Text: PID_SUPPORTED
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:comment
|————Node:else_clause Text: else { return PID_NOT_SUPPORTED; }
|—————Node:else Text: else
|—————Node:compound_statement Text: { return PID_NOT_SUPPORTED; }
|——————Node:{ Text: {
|——————Node:return_statement Text: return PID_NOT_SUPPORTED;
|———————Node:return Text: return
|———————Node:identifier Text: PID_NOT_SUPPORTED
|———————Node:; Text: ;
|——————Node:} Text: }
|———Node:} Text: }
|—Node:function_definition Text: void CAN_Decode_Remove_PID( PCAN_DECODE_PACKET_MANAGER dev, PTR_PID_DATA pid )
{
    for( uint8_t i = 0; i < dev->num_pids; i++ )
    {
    	if( dev->stream[i] == pid )
    		dev->stream[i] = NULL;
    }
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: CAN_Decode_Remove_PID( PCAN_DECODE_PACKET_MANAGER dev, PTR_PID_DATA pid )
|———Node:identifier Text: CAN_Decode_Remove_PID
|———Node:parameter_list Text: ( PCAN_DECODE_PACKET_MANAGER dev, PTR_PID_DATA pid )
|————Node:( Text: (
|————Node:parameter_declaration Text: PCAN_DECODE_PACKET_MANAGER dev
|—————Node:type_identifier Text: PCAN_DECODE_PACKET_MANAGER
|—————Node:identifier Text: dev
|————Node:, Text: ,
|————Node:parameter_declaration Text: PTR_PID_DATA pid
|—————Node:type_identifier Text: PTR_PID_DATA
|—————Node:identifier Text: pid
|————Node:) Text: )
|——Node:compound_statement Text: {
    for( uint8_t i = 0; i < dev->num_pids; i++ )
    {
    	if( dev->stream[i] == pid )
    		dev->stream[i] = NULL;
    }
}
|———Node:{ Text: {
|———Node:for_statement Text: for( uint8_t i = 0; i < dev->num_pids; i++ )
    {
    	if( dev->stream[i] == pid )
    		dev->stream[i] = NULL;
    }
|————Node:for Text: for
|————Node:( Text: (
|————Node:declaration Text: uint8_t i = 0;
|—————Node:primitive_type Text: uint8_t
|—————Node:init_declarator Text: i = 0
|——————Node:identifier Text: i
|——————Node:= Text: =
|——————Node:number_literal Text: 0
|—————Node:; Text: ;
|————Node:binary_expression Text: i < dev->num_pids
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:field_expression Text: dev->num_pids
|——————Node:identifier Text: dev
|——————Node:-> Text: ->
|——————Node:field_identifier Text: num_pids
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    	if( dev->stream[i] == pid )
    		dev->stream[i] = NULL;
    }
|—————Node:{ Text: {
|—————Node:if_statement Text: if( dev->stream[i] == pid )
    		dev->stream[i] = NULL;
|——————Node:if Text: if
|——————Node:parenthesized_expression Text: ( dev->stream[i] == pid )
|———————Node:( Text: (
|———————Node:binary_expression Text: dev->stream[i] == pid
|————————Node:subscript_expression Text: dev->stream[i]
|—————————Node:field_expression Text: dev->stream
|——————————Node:identifier Text: dev
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: stream
|—————————Node:[ Text: [
|—————————Node:identifier Text: i
|—————————Node:] Text: ]
|————————Node:== Text: ==
|————————Node:identifier Text: pid
|———————Node:) Text: )
|——————Node:expression_statement Text: dev->stream[i] = NULL;
|———————Node:assignment_expression Text: dev->stream[i] = NULL
|————————Node:subscript_expression Text: dev->stream[i]
|—————————Node:field_expression Text: dev->stream
|——————————Node:identifier Text: dev
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: stream
|—————————Node:[ Text: [
|—————————Node:identifier Text: i
|—————————Node:] Text: ]
|————————Node:= Text: =
|————————Node:null Text: NULL
|—————————Node:NULL Text: NULL
|———————Node:; Text: ;
|—————Node:} Text: }
|———Node:} Text: }
|—Node:function_definition Text: void CAN_Decode_Add_Packet( PCAN_DECODE_PACKET_MANAGER dev, uint16_t arbitration_id, uint8_t* packet_data )
{
	/* Check all of the PIDs */
    for( uint8_t i = 0; i < dev->num_pids; i++ )
    {
    	if( dev->stream[i] != NULL )
    	{
			switch( arbitration_id )
			{
				case DECODE_ENGINE_RRPM_ID:
					/* Engine RPM */
					if( dev->stream[i]->pid == MODE1_ENGINE_RPM )
						dev->stream[i]->pid_value = (float)(((uint32_t)(packet_data[4] & 0xF) << 8) | (uint32_t)(packet_data[5])) * (float)2;
					break;

				case DECODE_ACCEL_PEDAL_POS_ID:
					/* Accelerator Pedal */
					if( dev->stream[i]->pid == DECODE_ACCEL_PEDAL_POS_PID )
						dev->stream[i]->pid_value = (float)(((uint32_t)(packet_data[0] & 0x3) << 8) | (uint32_t)(packet_data[1])) / (float)10;
					break;
				case DECODE_ENGINE_OIL_TEMP_ID:
					/* Engine Oil Temperature */
					if( dev->stream[i]->pid == DECODE_ENGINE_OIL_TEMP_PID )
						dev->stream[i]->pid_value = (float)packet_data[7] - (float)60;

					/* Boost Pressure */
					else if( dev->stream[i]->pid == DECODE_BOOST_PRESSURE_PID )
						dev->stream[i]->pid_value = (float)packet_data[5];
					break;
			}
    	}
    }
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: CAN_Decode_Add_Packet( PCAN_DECODE_PACKET_MANAGER dev, uint16_t arbitration_id, uint8_t* packet_data )
|———Node:identifier Text: CAN_Decode_Add_Packet
|———Node:parameter_list Text: ( PCAN_DECODE_PACKET_MANAGER dev, uint16_t arbitration_id, uint8_t* packet_data )
|————Node:( Text: (
|————Node:parameter_declaration Text: PCAN_DECODE_PACKET_MANAGER dev
|—————Node:type_identifier Text: PCAN_DECODE_PACKET_MANAGER
|—————Node:identifier Text: dev
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint16_t arbitration_id
|—————Node:primitive_type Text: uint16_t
|—————Node:identifier Text: arbitration_id
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint8_t* packet_data
|—————Node:primitive_type Text: uint8_t
|—————Node:pointer_declarator Text: * packet_data
|——————Node:* Text: *
|——————Node:identifier Text: packet_data
|————Node:) Text: )
|——Node:compound_statement Text: {
	/* Check all of the PIDs */
    for( uint8_t i = 0; i < dev->num_pids; i++ )
    {
    	if( dev->stream[i] != NULL )
    	{
			switch( arbitration_id )
			{
				case DECODE_ENGINE_RRPM_ID:
					/* Engine RPM */
					if( dev->stream[i]->pid == MODE1_ENGINE_RPM )
						dev->stream[i]->pid_value = (float)(((uint32_t)(packet_data[4] & 0xF) << 8) | (uint32_t)(packet_data[5])) * (float)2;
					break;

				case DECODE_ACCEL_PEDAL_POS_ID:
					/* Accelerator Pedal */
					if( dev->stream[i]->pid == DECODE_ACCEL_PEDAL_POS_PID )
						dev->stream[i]->pid_value = (float)(((uint32_t)(packet_data[0] & 0x3) << 8) | (uint32_t)(packet_data[1])) / (float)10;
					break;
				case DECODE_ENGINE_OIL_TEMP_ID:
					/* Engine Oil Temperature */
					if( dev->stream[i]->pid == DECODE_ENGINE_OIL_TEMP_PID )
						dev->stream[i]->pid_value = (float)packet_data[7] - (float)60;

					/* Boost Pressure */
					else if( dev->stream[i]->pid == DECODE_BOOST_PRESSURE_PID )
						dev->stream[i]->pid_value = (float)packet_data[5];
					break;
			}
    	}
    }
}
|———Node:{ Text: {
|———Node:comment
|———Node:for_statement Text: for( uint8_t i = 0; i < dev->num_pids; i++ )
    {
    	if( dev->stream[i] != NULL )
    	{
			switch( arbitration_id )
			{
				case DECODE_ENGINE_RRPM_ID:
					/* Engine RPM */
					if( dev->stream[i]->pid == MODE1_ENGINE_RPM )
						dev->stream[i]->pid_value = (float)(((uint32_t)(packet_data[4] & 0xF) << 8) | (uint32_t)(packet_data[5])) * (float)2;
					break;

				case DECODE_ACCEL_PEDAL_POS_ID:
					/* Accelerator Pedal */
					if( dev->stream[i]->pid == DECODE_ACCEL_PEDAL_POS_PID )
						dev->stream[i]->pid_value = (float)(((uint32_t)(packet_data[0] & 0x3) << 8) | (uint32_t)(packet_data[1])) / (float)10;
					break;
				case DECODE_ENGINE_OIL_TEMP_ID:
					/* Engine Oil Temperature */
					if( dev->stream[i]->pid == DECODE_ENGINE_OIL_TEMP_PID )
						dev->stream[i]->pid_value = (float)packet_data[7] - (float)60;

					/* Boost Pressure */
					else if( dev->stream[i]->pid == DECODE_BOOST_PRESSURE_PID )
						dev->stream[i]->pid_value = (float)packet_data[5];
					break;
			}
    	}
    }
|————Node:for Text: for
|————Node:( Text: (
|————Node:declaration Text: uint8_t i = 0;
|—————Node:primitive_type Text: uint8_t
|—————Node:init_declarator Text: i = 0
|——————Node:identifier Text: i
|——————Node:= Text: =
|——————Node:number_literal Text: 0
|—————Node:; Text: ;
|————Node:binary_expression Text: i < dev->num_pids
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:field_expression Text: dev->num_pids
|——————Node:identifier Text: dev
|——————Node:-> Text: ->
|——————Node:field_identifier Text: num_pids
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    	if( dev->stream[i] != NULL )
    	{
			switch( arbitration_id )
			{
				case DECODE_ENGINE_RRPM_ID:
					/* Engine RPM */
					if( dev->stream[i]->pid == MODE1_ENGINE_RPM )
						dev->stream[i]->pid_value = (float)(((uint32_t)(packet_data[4] & 0xF) << 8) | (uint32_t)(packet_data[5])) * (float)2;
					break;

				case DECODE_ACCEL_PEDAL_POS_ID:
					/* Accelerator Pedal */
					if( dev->stream[i]->pid == DECODE_ACCEL_PEDAL_POS_PID )
						dev->stream[i]->pid_value = (float)(((uint32_t)(packet_data[0] & 0x3) << 8) | (uint32_t)(packet_data[1])) / (float)10;
					break;
				case DECODE_ENGINE_OIL_TEMP_ID:
					/* Engine Oil Temperature */
					if( dev->stream[i]->pid == DECODE_ENGINE_OIL_TEMP_PID )
						dev->stream[i]->pid_value = (float)packet_data[7] - (float)60;

					/* Boost Pressure */
					else if( dev->stream[i]->pid == DECODE_BOOST_PRESSURE_PID )
						dev->stream[i]->pid_value = (float)packet_data[5];
					break;
			}
    	}
    }
|—————Node:{ Text: {
|—————Node:if_statement Text: if( dev->stream[i] != NULL )
    	{
			switch( arbitration_id )
			{
				case DECODE_ENGINE_RRPM_ID:
					/* Engine RPM */
					if( dev->stream[i]->pid == MODE1_ENGINE_RPM )
						dev->stream[i]->pid_value = (float)(((uint32_t)(packet_data[4] & 0xF) << 8) | (uint32_t)(packet_data[5])) * (float)2;
					break;

				case DECODE_ACCEL_PEDAL_POS_ID:
					/* Accelerator Pedal */
					if( dev->stream[i]->pid == DECODE_ACCEL_PEDAL_POS_PID )
						dev->stream[i]->pid_value = (float)(((uint32_t)(packet_data[0] & 0x3) << 8) | (uint32_t)(packet_data[1])) / (float)10;
					break;
				case DECODE_ENGINE_OIL_TEMP_ID:
					/* Engine Oil Temperature */
					if( dev->stream[i]->pid == DECODE_ENGINE_OIL_TEMP_PID )
						dev->stream[i]->pid_value = (float)packet_data[7] - (float)60;

					/* Boost Pressure */
					else if( dev->stream[i]->pid == DECODE_BOOST_PRESSURE_PID )
						dev->stream[i]->pid_value = (float)packet_data[5];
					break;
			}
    	}
|——————Node:if Text: if
|——————Node:parenthesized_expression Text: ( dev->stream[i] != NULL )
|———————Node:( Text: (
|———————Node:binary_expression Text: dev->stream[i] != NULL
|————————Node:subscript_expression Text: dev->stream[i]
|—————————Node:field_expression Text: dev->stream
|——————————Node:identifier Text: dev
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: stream
|—————————Node:[ Text: [
|—————————Node:identifier Text: i
|—————————Node:] Text: ]
|————————Node:!= Text: !=
|————————Node:null Text: NULL
|—————————Node:NULL Text: NULL
|———————Node:) Text: )
|——————Node:compound_statement Text: {
			switch( arbitration_id )
			{
				case DECODE_ENGINE_RRPM_ID:
					/* Engine RPM */
					if( dev->stream[i]->pid == MODE1_ENGINE_RPM )
						dev->stream[i]->pid_value = (float)(((uint32_t)(packet_data[4] & 0xF) << 8) | (uint32_t)(packet_data[5])) * (float)2;
					break;

				case DECODE_ACCEL_PEDAL_POS_ID:
					/* Accelerator Pedal */
					if( dev->stream[i]->pid == DECODE_ACCEL_PEDAL_POS_PID )
						dev->stream[i]->pid_value = (float)(((uint32_t)(packet_data[0] & 0x3) << 8) | (uint32_t)(packet_data[1])) / (float)10;
					break;
				case DECODE_ENGINE_OIL_TEMP_ID:
					/* Engine Oil Temperature */
					if( dev->stream[i]->pid == DECODE_ENGINE_OIL_TEMP_PID )
						dev->stream[i]->pid_value = (float)packet_data[7] - (float)60;

					/* Boost Pressure */
					else if( dev->stream[i]->pid == DECODE_BOOST_PRESSURE_PID )
						dev->stream[i]->pid_value = (float)packet_data[5];
					break;
			}
    	}
|———————Node:{ Text: {
|———————Node:switch_statement Text: switch( arbitration_id )
			{
				case DECODE_ENGINE_RRPM_ID:
					/* Engine RPM */
					if( dev->stream[i]->pid == MODE1_ENGINE_RPM )
						dev->stream[i]->pid_value = (float)(((uint32_t)(packet_data[4] & 0xF) << 8) | (uint32_t)(packet_data[5])) * (float)2;
					break;

				case DECODE_ACCEL_PEDAL_POS_ID:
					/* Accelerator Pedal */
					if( dev->stream[i]->pid == DECODE_ACCEL_PEDAL_POS_PID )
						dev->stream[i]->pid_value = (float)(((uint32_t)(packet_data[0] & 0x3) << 8) | (uint32_t)(packet_data[1])) / (float)10;
					break;
				case DECODE_ENGINE_OIL_TEMP_ID:
					/* Engine Oil Temperature */
					if( dev->stream[i]->pid == DECODE_ENGINE_OIL_TEMP_PID )
						dev->stream[i]->pid_value = (float)packet_data[7] - (float)60;

					/* Boost Pressure */
					else if( dev->stream[i]->pid == DECODE_BOOST_PRESSURE_PID )
						dev->stream[i]->pid_value = (float)packet_data[5];
					break;
			}
|————————Node:switch Text: switch
|————————Node:parenthesized_expression Text: ( arbitration_id )
|—————————Node:( Text: (
|—————————Node:identifier Text: arbitration_id
|—————————Node:) Text: )
|————————Node:compound_statement Text: {
				case DECODE_ENGINE_RRPM_ID:
					/* Engine RPM */
					if( dev->stream[i]->pid == MODE1_ENGINE_RPM )
						dev->stream[i]->pid_value = (float)(((uint32_t)(packet_data[4] & 0xF) << 8) | (uint32_t)(packet_data[5])) * (float)2;
					break;

				case DECODE_ACCEL_PEDAL_POS_ID:
					/* Accelerator Pedal */
					if( dev->stream[i]->pid == DECODE_ACCEL_PEDAL_POS_PID )
						dev->stream[i]->pid_value = (float)(((uint32_t)(packet_data[0] & 0x3) << 8) | (uint32_t)(packet_data[1])) / (float)10;
					break;
				case DECODE_ENGINE_OIL_TEMP_ID:
					/* Engine Oil Temperature */
					if( dev->stream[i]->pid == DECODE_ENGINE_OIL_TEMP_PID )
						dev->stream[i]->pid_value = (float)packet_data[7] - (float)60;

					/* Boost Pressure */
					else if( dev->stream[i]->pid == DECODE_BOOST_PRESSURE_PID )
						dev->stream[i]->pid_value = (float)packet_data[5];
					break;
			}
|—————————Node:{ Text: {
|—————————Node:case_statement Text: case DECODE_ENGINE_RRPM_ID:
					/* Engine RPM */
					if( dev->stream[i]->pid == MODE1_ENGINE_RPM )
						dev->stream[i]->pid_value = (float)(((uint32_t)(packet_data[4] & 0xF) << 8) | (uint32_t)(packet_data[5])) * (float)2;
					break;
|——————————Node:case Text: case
|——————————Node:identifier Text: DECODE_ENGINE_RRPM_ID
|——————————Node:: Text: :
|——————————Node:comment
|——————————Node:if_statement Text: if( dev->stream[i]->pid == MODE1_ENGINE_RPM )
						dev->stream[i]->pid_value = (float)(((uint32_t)(packet_data[4] & 0xF) << 8) | (uint32_t)(packet_data[5])) * (float)2;
|———————————Node:if Text: if
|———————————Node:parenthesized_expression Text: ( dev->stream[i]->pid == MODE1_ENGINE_RPM )
|————————————Node:( Text: (
|————————————Node:binary_expression Text: dev->stream[i]->pid == MODE1_ENGINE_RPM
|—————————————Node:field_expression Text: dev->stream[i]->pid
|——————————————Node:subscript_expression Text: dev->stream[i]
|———————————————Node:field_expression Text: dev->stream
|————————————————Node:identifier Text: dev
|————————————————Node:-> Text: ->
|————————————————Node:field_identifier Text: stream
|———————————————Node:[ Text: [
|———————————————Node:identifier Text: i
|———————————————Node:] Text: ]
|——————————————Node:-> Text: ->
|——————————————Node:field_identifier Text: pid
|—————————————Node:== Text: ==
|—————————————Node:identifier Text: MODE1_ENGINE_RPM
|————————————Node:) Text: )
|———————————Node:expression_statement Text: dev->stream[i]->pid_value = (float)(((uint32_t)(packet_data[4] & 0xF) << 8) | (uint32_t)(packet_data[5])) * (float)2;
|————————————Node:assignment_expression Text: dev->stream[i]->pid_value = (float)(((uint32_t)(packet_data[4] & 0xF) << 8) | (uint32_t)(packet_data[5])) * (float)2
|—————————————Node:field_expression Text: dev->stream[i]->pid_value
|——————————————Node:subscript_expression Text: dev->stream[i]
|———————————————Node:field_expression Text: dev->stream
|————————————————Node:identifier Text: dev
|————————————————Node:-> Text: ->
|————————————————Node:field_identifier Text: stream
|———————————————Node:[ Text: [
|———————————————Node:identifier Text: i
|———————————————Node:] Text: ]
|——————————————Node:-> Text: ->
|——————————————Node:field_identifier Text: pid_value
|—————————————Node:= Text: =
|—————————————Node:binary_expression Text: (float)(((uint32_t)(packet_data[4] & 0xF) << 8) | (uint32_t)(packet_data[5])) * (float)2
|——————————————Node:cast_expression Text: (float)(((uint32_t)(packet_data[4] & 0xF) << 8) | (uint32_t)(packet_data[5]))
|———————————————Node:( Text: (
|———————————————Node:type_descriptor Text: float
|————————————————Node:primitive_type Text: float
|———————————————Node:) Text: )
|———————————————Node:parenthesized_expression Text: (((uint32_t)(packet_data[4] & 0xF) << 8) | (uint32_t)(packet_data[5]))
|————————————————Node:( Text: (
|————————————————Node:binary_expression Text: ((uint32_t)(packet_data[4] & 0xF) << 8) | (uint32_t)(packet_data[5])
|—————————————————Node:parenthesized_expression Text: ((uint32_t)(packet_data[4] & 0xF) << 8)
|——————————————————Node:( Text: (
|——————————————————Node:binary_expression Text: (uint32_t)(packet_data[4] & 0xF) << 8
|———————————————————Node:cast_expression Text: (uint32_t)(packet_data[4] & 0xF)
|————————————————————Node:( Text: (
|————————————————————Node:type_descriptor Text: uint32_t
|—————————————————————Node:primitive_type Text: uint32_t
|————————————————————Node:) Text: )
|————————————————————Node:parenthesized_expression Text: (packet_data[4] & 0xF)
|—————————————————————Node:( Text: (
|—————————————————————Node:binary_expression Text: packet_data[4] & 0xF
|——————————————————————Node:subscript_expression Text: packet_data[4]
|———————————————————————Node:identifier Text: packet_data
|———————————————————————Node:[ Text: [
|———————————————————————Node:number_literal Text: 4
|———————————————————————Node:] Text: ]
|——————————————————————Node:& Text: &
|——————————————————————Node:number_literal Text: 0xF
|—————————————————————Node:) Text: )
|———————————————————Node:<< Text: <<
|———————————————————Node:number_literal Text: 8
|——————————————————Node:) Text: )
|—————————————————Node:| Text: |
|—————————————————Node:cast_expression Text: (uint32_t)(packet_data[5])
|——————————————————Node:( Text: (
|——————————————————Node:type_descriptor Text: uint32_t
|———————————————————Node:primitive_type Text: uint32_t
|——————————————————Node:) Text: )
|——————————————————Node:parenthesized_expression Text: (packet_data[5])
|———————————————————Node:( Text: (
|———————————————————Node:subscript_expression Text: packet_data[5]
|————————————————————Node:identifier Text: packet_data
|————————————————————Node:[ Text: [
|————————————————————Node:number_literal Text: 5
|————————————————————Node:] Text: ]
|———————————————————Node:) Text: )
|————————————————Node:) Text: )
|——————————————Node:* Text: *
|——————————————Node:cast_expression Text: (float)2
|———————————————Node:( Text: (
|———————————————Node:type_descriptor Text: float
|————————————————Node:primitive_type Text: float
|———————————————Node:) Text: )
|———————————————Node:number_literal Text: 2
|————————————Node:; Text: ;
|——————————Node:break_statement Text: break;
|———————————Node:break Text: break
|———————————Node:; Text: ;
|—————————Node:case_statement Text: case DECODE_ACCEL_PEDAL_POS_ID:
					/* Accelerator Pedal */
					if( dev->stream[i]->pid == DECODE_ACCEL_PEDAL_POS_PID )
						dev->stream[i]->pid_value = (float)(((uint32_t)(packet_data[0] & 0x3) << 8) | (uint32_t)(packet_data[1])) / (float)10;
					break;
|——————————Node:case Text: case
|——————————Node:identifier Text: DECODE_ACCEL_PEDAL_POS_ID
|——————————Node:: Text: :
|——————————Node:comment
|——————————Node:if_statement Text: if( dev->stream[i]->pid == DECODE_ACCEL_PEDAL_POS_PID )
						dev->stream[i]->pid_value = (float)(((uint32_t)(packet_data[0] & 0x3) << 8) | (uint32_t)(packet_data[1])) / (float)10;
|———————————Node:if Text: if
|———————————Node:parenthesized_expression Text: ( dev->stream[i]->pid == DECODE_ACCEL_PEDAL_POS_PID )
|————————————Node:( Text: (
|————————————Node:binary_expression Text: dev->stream[i]->pid == DECODE_ACCEL_PEDAL_POS_PID
|—————————————Node:field_expression Text: dev->stream[i]->pid
|——————————————Node:subscript_expression Text: dev->stream[i]
|———————————————Node:field_expression Text: dev->stream
|————————————————Node:identifier Text: dev
|————————————————Node:-> Text: ->
|————————————————Node:field_identifier Text: stream
|———————————————Node:[ Text: [
|———————————————Node:identifier Text: i
|———————————————Node:] Text: ]
|——————————————Node:-> Text: ->
|——————————————Node:field_identifier Text: pid
|—————————————Node:== Text: ==
|—————————————Node:identifier Text: DECODE_ACCEL_PEDAL_POS_PID
|————————————Node:) Text: )
|———————————Node:expression_statement Text: dev->stream[i]->pid_value = (float)(((uint32_t)(packet_data[0] & 0x3) << 8) | (uint32_t)(packet_data[1])) / (float)10;
|————————————Node:assignment_expression Text: dev->stream[i]->pid_value = (float)(((uint32_t)(packet_data[0] & 0x3) << 8) | (uint32_t)(packet_data[1])) / (float)10
|—————————————Node:field_expression Text: dev->stream[i]->pid_value
|——————————————Node:subscript_expression Text: dev->stream[i]
|———————————————Node:field_expression Text: dev->stream
|————————————————Node:identifier Text: dev
|————————————————Node:-> Text: ->
|————————————————Node:field_identifier Text: stream
|———————————————Node:[ Text: [
|———————————————Node:identifier Text: i
|———————————————Node:] Text: ]
|——————————————Node:-> Text: ->
|——————————————Node:field_identifier Text: pid_value
|—————————————Node:= Text: =
|—————————————Node:binary_expression Text: (float)(((uint32_t)(packet_data[0] & 0x3) << 8) | (uint32_t)(packet_data[1])) / (float)10
|——————————————Node:cast_expression Text: (float)(((uint32_t)(packet_data[0] & 0x3) << 8) | (uint32_t)(packet_data[1]))
|———————————————Node:( Text: (
|———————————————Node:type_descriptor Text: float
|————————————————Node:primitive_type Text: float
|———————————————Node:) Text: )
|———————————————Node:parenthesized_expression Text: (((uint32_t)(packet_data[0] & 0x3) << 8) | (uint32_t)(packet_data[1]))
|————————————————Node:( Text: (
|————————————————Node:binary_expression Text: ((uint32_t)(packet_data[0] & 0x3) << 8) | (uint32_t)(packet_data[1])
|—————————————————Node:parenthesized_expression Text: ((uint32_t)(packet_data[0] & 0x3) << 8)
|——————————————————Node:( Text: (
|——————————————————Node:binary_expression Text: (uint32_t)(packet_data[0] & 0x3) << 8
|———————————————————Node:cast_expression Text: (uint32_t)(packet_data[0] & 0x3)
|————————————————————Node:( Text: (
|————————————————————Node:type_descriptor Text: uint32_t
|—————————————————————Node:primitive_type Text: uint32_t
|————————————————————Node:) Text: )
|————————————————————Node:parenthesized_expression Text: (packet_data[0] & 0x3)
|—————————————————————Node:( Text: (
|—————————————————————Node:binary_expression Text: packet_data[0] & 0x3
|——————————————————————Node:subscript_expression Text: packet_data[0]
|———————————————————————Node:identifier Text: packet_data
|———————————————————————Node:[ Text: [
|———————————————————————Node:number_literal Text: 0
|———————————————————————Node:] Text: ]
|——————————————————————Node:& Text: &
|——————————————————————Node:number_literal Text: 0x3
|—————————————————————Node:) Text: )
|———————————————————Node:<< Text: <<
|———————————————————Node:number_literal Text: 8
|——————————————————Node:) Text: )
|—————————————————Node:| Text: |
|—————————————————Node:cast_expression Text: (uint32_t)(packet_data[1])
|——————————————————Node:( Text: (
|——————————————————Node:type_descriptor Text: uint32_t
|———————————————————Node:primitive_type Text: uint32_t
|——————————————————Node:) Text: )
|——————————————————Node:parenthesized_expression Text: (packet_data[1])
|———————————————————Node:( Text: (
|———————————————————Node:subscript_expression Text: packet_data[1]
|————————————————————Node:identifier Text: packet_data
|————————————————————Node:[ Text: [
|————————————————————Node:number_literal Text: 1
|————————————————————Node:] Text: ]
|———————————————————Node:) Text: )
|————————————————Node:) Text: )
|——————————————Node:/ Text: /
|——————————————Node:cast_expression Text: (float)10
|———————————————Node:( Text: (
|———————————————Node:type_descriptor Text: float
|————————————————Node:primitive_type Text: float
|———————————————Node:) Text: )
|———————————————Node:number_literal Text: 10
|————————————Node:; Text: ;
|——————————Node:break_statement Text: break;
|———————————Node:break Text: break
|———————————Node:; Text: ;
|—————————Node:case_statement Text: case DECODE_ENGINE_OIL_TEMP_ID:
					/* Engine Oil Temperature */
					if( dev->stream[i]->pid == DECODE_ENGINE_OIL_TEMP_PID )
						dev->stream[i]->pid_value = (float)packet_data[7] - (float)60;

					/* Boost Pressure */
					else if( dev->stream[i]->pid == DECODE_BOOST_PRESSURE_PID )
						dev->stream[i]->pid_value = (float)packet_data[5];
					break;
|——————————Node:case Text: case
|——————————Node:identifier Text: DECODE_ENGINE_OIL_TEMP_ID
|——————————Node:: Text: :
|——————————Node:comment
|——————————Node:if_statement Text: if( dev->stream[i]->pid == DECODE_ENGINE_OIL_TEMP_PID )
						dev->stream[i]->pid_value = (float)packet_data[7] - (float)60;

					/* Boost Pressure */
					else if( dev->stream[i]->pid == DECODE_BOOST_PRESSURE_PID )
						dev->stream[i]->pid_value = (float)packet_data[5];
|———————————Node:if Text: if
|———————————Node:parenthesized_expression Text: ( dev->stream[i]->pid == DECODE_ENGINE_OIL_TEMP_PID )
|————————————Node:( Text: (
|————————————Node:binary_expression Text: dev->stream[i]->pid == DECODE_ENGINE_OIL_TEMP_PID
|—————————————Node:field_expression Text: dev->stream[i]->pid
|——————————————Node:subscript_expression Text: dev->stream[i]
|———————————————Node:field_expression Text: dev->stream
|————————————————Node:identifier Text: dev
|————————————————Node:-> Text: ->
|————————————————Node:field_identifier Text: stream
|———————————————Node:[ Text: [
|———————————————Node:identifier Text: i
|———————————————Node:] Text: ]
|——————————————Node:-> Text: ->
|——————————————Node:field_identifier Text: pid
|—————————————Node:== Text: ==
|—————————————Node:identifier Text: DECODE_ENGINE_OIL_TEMP_PID
|————————————Node:) Text: )
|———————————Node:expression_statement Text: dev->stream[i]->pid_value = (float)packet_data[7] - (float)60;
|————————————Node:assignment_expression Text: dev->stream[i]->pid_value = (float)packet_data[7] - (float)60
|—————————————Node:field_expression Text: dev->stream[i]->pid_value
|——————————————Node:subscript_expression Text: dev->stream[i]
|———————————————Node:field_expression Text: dev->stream
|————————————————Node:identifier Text: dev
|————————————————Node:-> Text: ->
|————————————————Node:field_identifier Text: stream
|———————————————Node:[ Text: [
|———————————————Node:identifier Text: i
|———————————————Node:] Text: ]
|——————————————Node:-> Text: ->
|——————————————Node:field_identifier Text: pid_value
|—————————————Node:= Text: =
|—————————————Node:binary_expression Text: (float)packet_data[7] - (float)60
|——————————————Node:cast_expression Text: (float)packet_data[7]
|———————————————Node:( Text: (
|———————————————Node:type_descriptor Text: float
|————————————————Node:primitive_type Text: float
|———————————————Node:) Text: )
|———————————————Node:subscript_expression Text: packet_data[7]
|————————————————Node:identifier Text: packet_data
|————————————————Node:[ Text: [
|————————————————Node:number_literal Text: 7
|————————————————Node:] Text: ]
|——————————————Node:- Text: -
|——————————————Node:cast_expression Text: (float)60
|———————————————Node:( Text: (
|———————————————Node:type_descriptor Text: float
|————————————————Node:primitive_type Text: float
|———————————————Node:) Text: )
|———————————————Node:number_literal Text: 60
|————————————Node:; Text: ;
|———————————Node:comment
|———————————Node:else_clause Text: else if( dev->stream[i]->pid == DECODE_BOOST_PRESSURE_PID )
						dev->stream[i]->pid_value = (float)packet_data[5];
|————————————Node:else Text: else
|————————————Node:if_statement Text: if( dev->stream[i]->pid == DECODE_BOOST_PRESSURE_PID )
						dev->stream[i]->pid_value = (float)packet_data[5];
|—————————————Node:if Text: if
|—————————————Node:parenthesized_expression Text: ( dev->stream[i]->pid == DECODE_BOOST_PRESSURE_PID )
|——————————————Node:( Text: (
|——————————————Node:binary_expression Text: dev->stream[i]->pid == DECODE_BOOST_PRESSURE_PID
|———————————————Node:field_expression Text: dev->stream[i]->pid
|————————————————Node:subscript_expression Text: dev->stream[i]
|—————————————————Node:field_expression Text: dev->stream
|——————————————————Node:identifier Text: dev
|——————————————————Node:-> Text: ->
|——————————————————Node:field_identifier Text: stream
|—————————————————Node:[ Text: [
|—————————————————Node:identifier Text: i
|—————————————————Node:] Text: ]
|————————————————Node:-> Text: ->
|————————————————Node:field_identifier Text: pid
|———————————————Node:== Text: ==
|———————————————Node:identifier Text: DECODE_BOOST_PRESSURE_PID
|——————————————Node:) Text: )
|—————————————Node:expression_statement Text: dev->stream[i]->pid_value = (float)packet_data[5];
|——————————————Node:assignment_expression Text: dev->stream[i]->pid_value = (float)packet_data[5]
|———————————————Node:field_expression Text: dev->stream[i]->pid_value
|————————————————Node:subscript_expression Text: dev->stream[i]
|—————————————————Node:field_expression Text: dev->stream
|——————————————————Node:identifier Text: dev
|——————————————————Node:-> Text: ->
|——————————————————Node:field_identifier Text: stream
|—————————————————Node:[ Text: [
|—————————————————Node:identifier Text: i
|—————————————————Node:] Text: ]
|————————————————Node:-> Text: ->
|————————————————Node:field_identifier Text: pid_value
|———————————————Node:= Text: =
|———————————————Node:cast_expression Text: (float)packet_data[5]
|————————————————Node:( Text: (
|————————————————Node:type_descriptor Text: float
|—————————————————Node:primitive_type Text: float
|————————————————Node:) Text: )
|————————————————Node:subscript_expression Text: packet_data[5]
|—————————————————Node:identifier Text: packet_data
|—————————————————Node:[ Text: [
|—————————————————Node:number_literal Text: 5
|—————————————————Node:] Text: ]
|——————————————Node:; Text: ;
|——————————Node:break_statement Text: break;
|———————————Node:break Text: break
|———————————Node:; Text: ;
|—————————Node:} Text: }
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:} Text: }
