Seeed_Arduino_CAN-src\mcp2518fd_can.h

|Node:translation_unit
|â€”Node:preproc_ifdef Text: #ifndef _MCP2518FD_H_
#define _MCP2518FD_H_

#include "mcp2518fd_can_dfs.h"
#include "mcp_can.h"
#include <Arduino.h>
#include <SPI.h>

// *****************************************************************************
// *****************************************************************************
//! Reset DUT

// Code anchor for break points
#define Nop() asm("nop")

// Index to SPI channel
// Used when multiple MCP25xxFD are connected to the same SPI interface, but
// with different CS
#define SPI_DEFAULT_BUFFER_LENGTH 96

// extern SPIClass* pSPI;
#define spi_readwrite pSPI->transfer
#define spi_read() spi_readwrite(0x00)
#define spi_write(spi_val) spi_readwrite(spi_val)
#define SPI_BEGIN()                                                            \
  pSPI->beginTransaction(SPISettings(4000000, MSBFIRST, SPI_MODE0))
#define SPI_END() pSPI->endTransaction();

// *****************************************************************************
// *****************************************************************************
// Section: Defines

#define CRCBASE 0xFFFF
#define CRCUPPER 1

//! Reverse order of bits in byte
const uint8_t BitReverseTable256[256] = {
    0x00, 0x80, 0x40, 0xC0, 0x20, 0xA0, 0x60, 0xE0, 0x10, 0x90, 0x50, 0xD0,
    0x30, 0xB0, 0x70, 0xF0, 0x08, 0x88, 0x48, 0xC8, 0x28, 0xA8, 0x68, 0xE8,
    0x18, 0x98, 0x58, 0xD8, 0x38, 0xB8, 0x78, 0xF8, 0x04, 0x84, 0x44, 0xC4,
    0x24, 0xA4, 0x64, 0xE4, 0x14, 0x94, 0x54, 0xD4, 0x34, 0xB4, 0x74, 0xF4,
    0x0C, 0x8C, 0x4C, 0xCC, 0x2C, 0xAC, 0x6C, 0xEC, 0x1C, 0x9C, 0x5C, 0xDC,
    0x3C, 0xBC, 0x7C, 0xFC, 0x02, 0x82, 0x42, 0xC2, 0x22, 0xA2, 0x62, 0xE2,
    0x12, 0x92, 0x52, 0xD2, 0x32, 0xB2, 0x72, 0xF2, 0x0A, 0x8A, 0x4A, 0xCA,
    0x2A, 0xAA, 0x6A, 0xEA, 0x1A, 0x9A, 0x5A, 0xDA, 0x3A, 0xBA, 0x7A, 0xFA,
    0x06, 0x86, 0x46, 0xC6, 0x26, 0xA6, 0x66, 0xE6, 0x16, 0x96, 0x56, 0xD6,
    0x36, 0xB6, 0x76, 0xF6, 0x0E, 0x8E, 0x4E, 0xCE, 0x2E, 0xAE, 0x6E, 0xEE,
    0x1E, 0x9E, 0x5E, 0xDE, 0x3E, 0xBE, 0x7E, 0xFE, 0x01, 0x81, 0x41, 0xC1,
    0x21, 0xA1, 0x61, 0xE1, 0x11, 0x91, 0x51, 0xD1, 0x31, 0xB1, 0x71, 0xF1,
    0x09, 0x89, 0x49, 0xC9, 0x29, 0xA9, 0x69, 0xE9, 0x19, 0x99, 0x59, 0xD9,
    0x39, 0xB9, 0x79, 0xF9, 0x05, 0x85, 0x45, 0xC5, 0x25, 0xA5, 0x65, 0xE5,
    0x15, 0x95, 0x55, 0xD5, 0x35, 0xB5, 0x75, 0xF5, 0x0D, 0x8D, 0x4D, 0xCD,
    0x2D, 0xAD, 0x6D, 0xED, 0x1D, 0x9D, 0x5D, 0xDD, 0x3D, 0xBD, 0x7D, 0xFD,
    0x03, 0x83, 0x43, 0xC3, 0x23, 0xA3, 0x63, 0xE3, 0x13, 0x93, 0x53, 0xD3,
    0x33, 0xB3, 0x73, 0xF3, 0x0B, 0x8B, 0x4B, 0xCB, 0x2B, 0xAB, 0x6B, 0xEB,
    0x1B, 0x9B, 0x5B, 0xDB, 0x3B, 0xBB, 0x7B, 0xFB, 0x07, 0x87, 0x47, 0xC7,
    0x27, 0xA7, 0x67, 0xE7, 0x17, 0x97, 0x57, 0xD7, 0x37, 0xB7, 0x77, 0xF7,
    0x0F, 0x8F, 0x4F, 0xCF, 0x2F, 0xAF, 0x6F, 0xEF, 0x1F, 0x9F, 0x5F, 0xDF,
    0x3F, 0xBF, 0x7F, 0xFF};

//! Look-up table for CRC calculation
const uint16_t crc16_table[256] = {
    0x0000, 0x8005, 0x800F, 0x000A, 0x801B, 0x001E, 0x0014, 0x8011, 0x8033,
    0x0036, 0x003C, 0x8039, 0x0028, 0x802D, 0x8027, 0x0022, 0x8063, 0x0066,
    0x006C, 0x8069, 0x0078, 0x807D, 0x8077, 0x0072, 0x0050, 0x8055, 0x805F,
    0x005A, 0x804B, 0x004E, 0x0044, 0x8041, 0x80C3, 0x00C6, 0x00CC, 0x80C9,
    0x00D8, 0x80DD, 0x80D7, 0x00D2, 0x00F0, 0x80F5, 0x80FF, 0x00FA, 0x80EB,
    0x00EE, 0x00E4, 0x80E1, 0x00A0, 0x80A5, 0x80AF, 0x00AA, 0x80BB, 0x00BE,
    0x00B4, 0x80B1, 0x8093, 0x0096, 0x009C, 0x8099, 0x0088, 0x808D, 0x8087,
    0x0082, 0x8183, 0x0186, 0x018C, 0x8189, 0x0198, 0x819D, 0x8197, 0x0192,
    0x01B0, 0x81B5, 0x81BF, 0x01BA, 0x81AB, 0x01AE, 0x01A4, 0x81A1, 0x01E0,
    0x81E5, 0x81EF, 0x01EA, 0x81FB, 0x01FE, 0x01F4, 0x81F1, 0x81D3, 0x01D6,
    0x01DC, 0x81D9, 0x01C8, 0x81CD, 0x81C7, 0x01C2, 0x0140, 0x8145, 0x814F,
    0x014A, 0x815B, 0x015E, 0x0154, 0x8151, 0x8173, 0x0176, 0x017C, 0x8179,
    0x0168, 0x816D, 0x8167, 0x0162, 0x8123, 0x0126, 0x012C, 0x8129, 0x0138,
    0x813D, 0x8137, 0x0132, 0x0110, 0x8115, 0x811F, 0x011A, 0x810B, 0x010E,
    0x0104, 0x8101, 0x8303, 0x0306, 0x030C, 0x8309, 0x0318, 0x831D, 0x8317,
    0x0312, 0x0330, 0x8335, 0x833F, 0x033A, 0x832B, 0x032E, 0x0324, 0x8321,
    0x0360, 0x8365, 0x836F, 0x036A, 0x837B, 0x037E, 0x0374, 0x8371, 0x8353,
    0x0356, 0x035C, 0x8359, 0x0348, 0x834D, 0x8347, 0x0342, 0x03C0, 0x83C5,
    0x83CF, 0x03CA, 0x83DB, 0x03DE, 0x03D4, 0x83D1, 0x83F3, 0x03F6, 0x03FC,
    0x83F9, 0x03E8, 0x83ED, 0x83E7, 0x03E2, 0x83A3, 0x03A6, 0x03AC, 0x83A9,
    0x03B8, 0x83BD, 0x83B7, 0x03B2, 0x0390, 0x8395, 0x839F, 0x039A, 0x838B,
    0x038E, 0x0384, 0x8381, 0x0280, 0x8285, 0x828F, 0x028A, 0x829B, 0x029E,
    0x0294, 0x8291, 0x82B3, 0x02B6, 0x02BC, 0x82B9, 0x02A8, 0x82AD, 0x82A7,
    0x02A2, 0x82E3, 0x02E6, 0x02EC, 0x82E9, 0x02F8, 0x82FD, 0x82F7, 0x02F2,
    0x02D0, 0x82D5, 0x82DF, 0x02DA, 0x82CB, 0x02CE, 0x02C4, 0x82C1, 0x8243,
    0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257, 0x0252, 0x0270, 0x8275,
    0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261, 0x0220, 0x8225, 0x822F,
    0x022A, 0x823B, 0x023E, 0x0234, 0x8231, 0x8213, 0x0216, 0x021C, 0x8219,
    0x0208, 0x820D, 0x8207, 0x0202};

class SPIClass;

class mcp2518fd : public MCP_CAN {
public:
  mcp2518fd(byte _CS) : MCP_CAN(_CS), nReservedTx(0){};

public:
  virtual void
  enableTxInterrupt(bool enable = true); // enable transmit interrupt
  virtual void reserveTxBuffers(byte nTxBuf = 0) {
    nReservedTx = (nTxBuf < 3 ? nTxBuf : 3 - 1);
  }
  virtual byte getLastTxBuffer() {
    return 3 - 1; // read index of last tx buffer
  }
  virtual byte begin(byte speedset,
                     const byte clockset = CAN_SYSCLK_40M); // init can
  virtual byte init_Mask(byte num, byte ext, unsigned long ulData);
  virtual byte init_Filt(byte num, byte ext,
                         unsigned long ulData); // init filters
  virtual void setSleepWakeup(const byte enable);
  virtual byte sleep();
  virtual byte wake();
  virtual byte setMode(const byte opMode);
  virtual byte getMode();
  virtual byte sendMsgBuf(unsigned long id, byte ext, byte rtrBit, byte len,
                          const byte *buf, bool wait_sent = true);
  virtual byte sendMsgBuf(unsigned long id, byte ext, byte len, const byte *buf,
                          bool wait_sent = true);
  virtual byte readMsgBuf(byte *len, byte *buf);
  virtual byte readMsgBufID(unsigned long *ID, byte *len, byte *buf);
  virtual byte checkReceive(void);
  virtual byte checkError(void);
  virtual unsigned long getCanId(void);
  virtual byte isRemoteRequest(void);
  virtual byte isExtendedFrame(void);
  virtual byte readMsgBufID(byte status, volatile unsigned long *id,
                            volatile byte *ext, volatile byte *rtr,
                            volatile byte *len,
                            volatile byte *buf); // read buf with object ID
  virtual byte trySendMsgBuf(unsigned long id, byte ext, byte rtrBit, byte len,
                             const byte *buf, byte iTxBuf = 0xff);
  virtual byte sendMsgBuf(byte status, unsigned long id, byte ext, byte rtrBit,
                          byte len, volatile const byte *buf);
  virtual void clearBufferTransmitIfFlags(byte flags = 0);
  virtual byte readRxTxStatus(void);
  virtual byte checkClearRxStatus(byte *status);
  virtual byte checkClearTxStatus(byte *status, byte iTxBuf = 0xff);
  virtual bool mcpPinMode(const byte pin, const byte mode);
  virtual bool mcpDigitalWrite(const byte pin, const byte mode);
  virtual byte mcpDigitalRead(const byte pin);

private:
  byte mcp2518fd_readMsgBufID(volatile byte *len, volatile byte *buf);
  byte mcp2518fd_sendMsg(const byte *buf, byte len, unsigned long id, byte ext,
                         byte rtr, bool wait_sent);
  int8_t mcp2518fd_receiveMsg();

private:
  uint8_t mcp2518fd_init(byte speedset, const byte clock); // mcp2518fdinit
  int8_t mcp2518fd_reset(void);                            // reset mcp2518fd
  int8_t mcp2518fd_EccEnable(void);                        // Section: ECC
  int8_t mcp2518fd_RamInit(uint8_t d);
  int8_t mcp2518fd_ConfigureObjectReset(CAN_CONFIG *config);
  int8_t mcp2518fd_Configure(CAN_CONFIG *config);
  int8_t
  mcp2518fd_TransmitChannelConfigureObjectReset(CAN_TX_FIFO_CONFIG *config);
  int8_t mcp2518fd_TransmitChannelConfigure(CAN_FIFO_CHANNEL channel,
                                            CAN_TX_FIFO_CONFIG *config);
  int8_t
  mcp2518fd_ReceiveChannelConfigureObjectReset(CAN_RX_FIFO_CONFIG *config);
  int8_t mcp2518fd_ReceiveChannelConfigure(CAN_FIFO_CHANNEL channel,
                                           CAN_RX_FIFO_CONFIG *config);
  int8_t mcp2518fd_FilterObjectConfigure(CAN_FILTER filter,
                                         CAN_FILTEROBJ_ID *id);
  int8_t mcp2518fd_FilterMaskConfigure(CAN_FILTER filter, CAN_MASKOBJ_ID *mask);
  int8_t mcp2518fd_FilterToFifoLink(CAN_FILTER filter, CAN_FIFO_CHANNEL channel,
                                    bool enable);
  int8_t mcp2518fd_BitTimeConfigure(MCP2518FD_BITTIME_SETUP bitTime,
                                    CAN_SSP_MODE sspMode, CAN_SYSCLK_SPEED clk);
  int8_t mcp2518fd_GpioModeConfigure(GPIO_PIN_MODE gpio0, GPIO_PIN_MODE gpio1);
  int8_t mcp2518fd_TransmitChannelEventEnable(CAN_FIFO_CHANNEL channel,
                                              CAN_TX_FIFO_EVENT flags);
  int8_t mcp2518fd_ReceiveChannelEventEnable(CAN_FIFO_CHANNEL channel,
                                             CAN_RX_FIFO_EVENT flags);
  int8_t mcp2518fd_ModuleEventEnable(CAN_MODULE_EVENT flags);
  int8_t mcp2518fd_OperationModeSelect(CAN_OPERATION_MODE opMode);
  CAN_OPERATION_MODE mcp2518fd_OperationModeGet();
  void mcp2518fd_TransmitMessageQueue();
  int8_t mcp2518fd_TransmitChannelEventGet(CAN_FIFO_CHANNEL channel,
                                           CAN_TX_FIFO_EVENT *flags);
  int8_t mcp2518fd_ErrorCountStateGet(uint8_t *tec, uint8_t *rec,
                                      CAN_ERROR_STATE *flags);
  int8_t mcp2518fd_TransmitChannelLoad(CAN_FIFO_CHANNEL channel,
                                       CAN_TX_MSGOBJ *txObj, uint8_t *txd,
                                       uint32_t txdNumBytes, bool flush);
  int8_t mcp2518fd_ReceiveChannelEventGet(CAN_FIFO_CHANNEL channel,
                                          CAN_RX_FIFO_EVENT *flags);
  int8_t mcp2518fd_ReceiveMessageGet(CAN_FIFO_CHANNEL channel,
                                     CAN_RX_MSGOBJ *rxObj, uint8_t *rxd,
                                     uint8_t nBytes);
  int8_t mcp2518fd_ReceiveChannelUpdate(CAN_FIFO_CHANNEL channel);
  int8_t mcp2518fd_TransmitChannelUpdate(CAN_FIFO_CHANNEL channel, bool flush);
  int8_t mcp2518fd_ReceiveChannelStatusGet(CAN_FIFO_CHANNEL channel,
                                           CAN_RX_FIFO_STATUS *status);
  int8_t mcp2518fd_ErrorStateGet(CAN_ERROR_STATE *flags);
  int8_t mcp2518fd_ModuleEventRxCodeGet(CAN_RXCODE *rxCode);
  int8_t mcp2518fd_ModuleEventTxCodeGet(CAN_TXCODE *txCode);
  int8_t mcp2518fd_TransmitChannelEventAttemptClear(CAN_FIFO_CHANNEL channel);

  int8_t mcp2518fd_LowPowerModeEnable();
  int8_t mcp2518fd_LowPowerModeDisable();

  int8_t mcp2518fd_ReadByte(uint16_t address, uint8_t *rxd);
  int8_t mcp2518fd_WriteByte(uint16_t address, uint8_t txd);
  int8_t mcp2518fd_ReadWord(uint16_t address, uint32_t *rxd);
  int8_t mcp2518fd_WriteWord(uint16_t address, uint32_t txd);
  int8_t mcp2518fd_ReadHalfWord(uint16_t address, uint16_t *rxd);
  int8_t mcp2518fd_WriteHalfWord(uint16_t address, uint16_t txd);
  int8_t mcp2518fd_ReadByteArray(uint16_t address, uint8_t *rxd,
                                 uint16_t nBytes);
  int8_t mcp2518fd_WriteByteArray(uint16_t address, uint8_t *txd,
                                  uint16_t nBytes);
  int8_t mcp2518fd_WriteByteSafe(uint16_t address, uint8_t txd);
  int8_t mcp2518fd_WriteWordSafe(uint16_t address, uint32_t txd);
  int8_t mcp2518fd_ReadByteArrayWithCRC(uint16_t address, uint8_t *rxd,
                                        uint16_t nBytes, bool fromRam,
                                        bool *crcIsCorrect);
  int8_t mcp2518fd_WriteByteArrayWithCRC(uint16_t address, uint8_t *txd,
                                         uint16_t nBytes, bool fromRam);
  int8_t mcp2518fd_ReadWordArray(uint16_t address, uint32_t *rxd,
                                 uint16_t nWords);
  int8_t mcp2518fd_WriteWordArray(uint16_t address, uint32_t *txd,
                                  uint16_t nWords);

private:
  int8_t
  mcp2518fd_BitTimeConfigureNominal40MHz(MCP2518FD_BITTIME_SETUP bitTime);
  int8_t mcp2518fd_BitTimeConfigureData40MHz(MCP2518FD_BITTIME_SETUP bitTime,
                                             CAN_SSP_MODE sspMode);
  int8_t
  mcp2518fd_BitTimeConfigureNominal20MHz(MCP2518FD_BITTIME_SETUP bitTime);
  int8_t mcp2518fd_BitTimeConfigureData20MHz(MCP2518FD_BITTIME_SETUP bitTime,
                                             CAN_SSP_MODE sspMode);
  int8_t
  mcp2518fd_BitTimeConfigureNominal10MHz(MCP2518FD_BITTIME_SETUP bitTime);
  int8_t mcp2518fd_BitTimeConfigureData10MHz(MCP2518FD_BITTIME_SETUP bitTime,
                                             CAN_SSP_MODE sspMode);

  byte ext_flg; // identifier xxxID
  // either extended (the 29 LSB) or standard (the 11 LSB)
  unsigned long can_id; // can id
  byte rtr;             // rtr
  byte nReservedTx;     // Count of tx buffers for reserved send
  CAN_OPERATION_MODE mcpMode = CAN_CLASSIC_MODE; // Current controller mode
};
#endif
|â€”â€”Node:#ifndef Text: #ifndef
|â€”â€”Node:identifier Text: _MCP2518FD_H_
|â€”â€”Node:preproc_def Text: #define _MCP2518FD_H_

|â€”â€”â€”Node:#define Text: #define
|â€”â€”â€”Node:identifier Text: _MCP2518FD_H_
|â€”â€”Node:preproc_include Text: #include "mcp2518fd_can_dfs.h"

|â€”â€”â€”Node:#include Text: #include
|â€”â€”â€”Node:string_literal Text: "mcp2518fd_can_dfs.h"
|â€”â€”â€”â€”Node:" Text: "
|â€”â€”â€”â€”Node:string_content Text: mcp2518fd_can_dfs.h
|â€”â€”â€”â€”Node:" Text: "
|â€”â€”Node:preproc_include Text: #include "mcp_can.h"

|â€”â€”â€”Node:#include Text: #include
|â€”â€”â€”Node:string_literal Text: "mcp_can.h"
|â€”â€”â€”â€”Node:" Text: "
|â€”â€”â€”â€”Node:string_content Text: mcp_can.h
|â€”â€”â€”â€”Node:" Text: "
|â€”â€”Node:preproc_include Text: #include <Arduino.h>

|â€”â€”â€”Node:#include Text: #include
|â€”â€”â€”Node:system_lib_string Text: <Arduino.h>
|â€”â€”Node:preproc_include Text: #include <SPI.h>

|â€”â€”â€”Node:#include Text: #include
|â€”â€”â€”Node:system_lib_string Text: <SPI.h>
|â€”â€”Node:comment
|â€”â€”Node:comment
|â€”â€”Node:comment
|â€”â€”Node:comment
|â€”â€”Node:preproc_function_def Text: #define Nop() asm("nop")

|â€”â€”â€”Node:#define Text: #define
|â€”â€”â€”Node:identifier Text: Nop
|â€”â€”â€”Node:preproc_params Text: ()
|â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:preproc_arg Text: asm("nop")
|â€”â€”Node:comment
|â€”â€”Node:comment
|â€”â€”Node:comment
|â€”â€”Node:preproc_def Text: #define SPI_DEFAULT_BUFFER_LENGTH 96

|â€”â€”â€”Node:#define Text: #define
|â€”â€”â€”Node:identifier Text: SPI_DEFAULT_BUFFER_LENGTH
|â€”â€”â€”Node:preproc_arg Text: 96
|â€”â€”Node:comment
|â€”â€”Node:preproc_def Text: #define spi_readwrite pSPI->transfer

|â€”â€”â€”Node:#define Text: #define
|â€”â€”â€”Node:identifier Text: spi_readwrite
|â€”â€”â€”Node:preproc_arg Text: pSPI->transfer
|â€”â€”Node:preproc_function_def Text: #define spi_read() spi_readwrite(0x00)

|â€”â€”â€”Node:#define Text: #define
|â€”â€”â€”Node:identifier Text: spi_read
|â€”â€”â€”Node:preproc_params Text: ()
|â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:preproc_arg Text: spi_readwrite(0x00)
|â€”â€”Node:preproc_function_def Text: #define spi_write(spi_val) spi_readwrite(spi_val)

|â€”â€”â€”Node:#define Text: #define
|â€”â€”â€”Node:identifier Text: spi_write
|â€”â€”â€”Node:preproc_params Text: (spi_val)
|â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”Node:identifier Text: spi_val
|â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:preproc_arg Text: spi_readwrite(spi_val)
|â€”â€”Node:preproc_function_def Text: #define SPI_BEGIN()                                                            \
  pSPI->beginTransaction(SPISettings(4000000, MSBFIRST, SPI_MODE0))

|â€”â€”â€”Node:#define Text: #define
|â€”â€”â€”Node:identifier Text: SPI_BEGIN
|â€”â€”â€”Node:preproc_params Text: ()
|â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:preproc_arg Text: pSPI->beginTransaction(SPISettings(4000000, MSBFIRST, SPI_MODE0))
|â€”â€”Node:preproc_function_def Text: #define SPI_END() pSPI->endTransaction();

|â€”â€”â€”Node:#define Text: #define
|â€”â€”â€”Node:identifier Text: SPI_END
|â€”â€”â€”Node:preproc_params Text: ()
|â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:preproc_arg Text: pSPI->endTransaction();
|â€”â€”Node:comment
|â€”â€”Node:comment
|â€”â€”Node:comment
|â€”â€”Node:preproc_def Text: #define CRCBASE 0xFFFF

|â€”â€”â€”Node:#define Text: #define
|â€”â€”â€”Node:identifier Text: CRCBASE
|â€”â€”â€”Node:preproc_arg Text: 0xFFFF
|â€”â€”Node:preproc_def Text: #define CRCUPPER 1

|â€”â€”â€”Node:#define Text: #define
|â€”â€”â€”Node:identifier Text: CRCUPPER
|â€”â€”â€”Node:preproc_arg Text: 1
|â€”â€”Node:comment
|â€”â€”Node:declaration Text: const uint8_t BitReverseTable256[256] = {
    0x00, 0x80, 0x40, 0xC0, 0x20, 0xA0, 0x60, 0xE0, 0x10, 0x90, 0x50, 0xD0,
    0x30, 0xB0, 0x70, 0xF0, 0x08, 0x88, 0x48, 0xC8, 0x28, 0xA8, 0x68, 0xE8,
    0x18, 0x98, 0x58, 0xD8, 0x38, 0xB8, 0x78, 0xF8, 0x04, 0x84, 0x44, 0xC4,
    0x24, 0xA4, 0x64, 0xE4, 0x14, 0x94, 0x54, 0xD4, 0x34, 0xB4, 0x74, 0xF4,
    0x0C, 0x8C, 0x4C, 0xCC, 0x2C, 0xAC, 0x6C, 0xEC, 0x1C, 0x9C, 0x5C, 0xDC,
    0x3C, 0xBC, 0x7C, 0xFC, 0x02, 0x82, 0x42, 0xC2, 0x22, 0xA2, 0x62, 0xE2,
    0x12, 0x92, 0x52, 0xD2, 0x32, 0xB2, 0x72, 0xF2, 0x0A, 0x8A, 0x4A, 0xCA,
    0x2A, 0xAA, 0x6A, 0xEA, 0x1A, 0x9A, 0x5A, 0xDA, 0x3A, 0xBA, 0x7A, 0xFA,
    0x06, 0x86, 0x46, 0xC6, 0x26, 0xA6, 0x66, 0xE6, 0x16, 0x96, 0x56, 0xD6,
    0x36, 0xB6, 0x76, 0xF6, 0x0E, 0x8E, 0x4E, 0xCE, 0x2E, 0xAE, 0x6E, 0xEE,
    0x1E, 0x9E, 0x5E, 0xDE, 0x3E, 0xBE, 0x7E, 0xFE, 0x01, 0x81, 0x41, 0xC1,
    0x21, 0xA1, 0x61, 0xE1, 0x11, 0x91, 0x51, 0xD1, 0x31, 0xB1, 0x71, 0xF1,
    0x09, 0x89, 0x49, 0xC9, 0x29, 0xA9, 0x69, 0xE9, 0x19, 0x99, 0x59, 0xD9,
    0x39, 0xB9, 0x79, 0xF9, 0x05, 0x85, 0x45, 0xC5, 0x25, 0xA5, 0x65, 0xE5,
    0x15, 0x95, 0x55, 0xD5, 0x35, 0xB5, 0x75, 0xF5, 0x0D, 0x8D, 0x4D, 0xCD,
    0x2D, 0xAD, 0x6D, 0xED, 0x1D, 0x9D, 0x5D, 0xDD, 0x3D, 0xBD, 0x7D, 0xFD,
    0x03, 0x83, 0x43, 0xC3, 0x23, 0xA3, 0x63, 0xE3, 0x13, 0x93, 0x53, 0xD3,
    0x33, 0xB3, 0x73, 0xF3, 0x0B, 0x8B, 0x4B, 0xCB, 0x2B, 0xAB, 0x6B, 0xEB,
    0x1B, 0x9B, 0x5B, 0xDB, 0x3B, 0xBB, 0x7B, 0xFB, 0x07, 0x87, 0x47, 0xC7,
    0x27, 0xA7, 0x67, 0xE7, 0x17, 0x97, 0x57, 0xD7, 0x37, 0xB7, 0x77, 0xF7,
    0x0F, 0x8F, 0x4F, 0xCF, 0x2F, 0xAF, 0x6F, 0xEF, 0x1F, 0x9F, 0x5F, 0xDF,
    0x3F, 0xBF, 0x7F, 0xFF};
|â€”â€”â€”Node:type_qualifier Text: const
|â€”â€”â€”â€”Node:const Text: const
|â€”â€”â€”Node:primitive_type Text: uint8_t
|â€”â€”â€”Node:init_declarator Text: BitReverseTable256[256] = {
    0x00, 0x80, 0x40, 0xC0, 0x20, 0xA0, 0x60, 0xE0, 0x10, 0x90, 0x50, 0xD0,
    0x30, 0xB0, 0x70, 0xF0, 0x08, 0x88, 0x48, 0xC8, 0x28, 0xA8, 0x68, 0xE8,
    0x18, 0x98, 0x58, 0xD8, 0x38, 0xB8, 0x78, 0xF8, 0x04, 0x84, 0x44, 0xC4,
    0x24, 0xA4, 0x64, 0xE4, 0x14, 0x94, 0x54, 0xD4, 0x34, 0xB4, 0x74, 0xF4,
    0x0C, 0x8C, 0x4C, 0xCC, 0x2C, 0xAC, 0x6C, 0xEC, 0x1C, 0x9C, 0x5C, 0xDC,
    0x3C, 0xBC, 0x7C, 0xFC, 0x02, 0x82, 0x42, 0xC2, 0x22, 0xA2, 0x62, 0xE2,
    0x12, 0x92, 0x52, 0xD2, 0x32, 0xB2, 0x72, 0xF2, 0x0A, 0x8A, 0x4A, 0xCA,
    0x2A, 0xAA, 0x6A, 0xEA, 0x1A, 0x9A, 0x5A, 0xDA, 0x3A, 0xBA, 0x7A, 0xFA,
    0x06, 0x86, 0x46, 0xC6, 0x26, 0xA6, 0x66, 0xE6, 0x16, 0x96, 0x56, 0xD6,
    0x36, 0xB6, 0x76, 0xF6, 0x0E, 0x8E, 0x4E, 0xCE, 0x2E, 0xAE, 0x6E, 0xEE,
    0x1E, 0x9E, 0x5E, 0xDE, 0x3E, 0xBE, 0x7E, 0xFE, 0x01, 0x81, 0x41, 0xC1,
    0x21, 0xA1, 0x61, 0xE1, 0x11, 0x91, 0x51, 0xD1, 0x31, 0xB1, 0x71, 0xF1,
    0x09, 0x89, 0x49, 0xC9, 0x29, 0xA9, 0x69, 0xE9, 0x19, 0x99, 0x59, 0xD9,
    0x39, 0xB9, 0x79, 0xF9, 0x05, 0x85, 0x45, 0xC5, 0x25, 0xA5, 0x65, 0xE5,
    0x15, 0x95, 0x55, 0xD5, 0x35, 0xB5, 0x75, 0xF5, 0x0D, 0x8D, 0x4D, 0xCD,
    0x2D, 0xAD, 0x6D, 0xED, 0x1D, 0x9D, 0x5D, 0xDD, 0x3D, 0xBD, 0x7D, 0xFD,
    0x03, 0x83, 0x43, 0xC3, 0x23, 0xA3, 0x63, 0xE3, 0x13, 0x93, 0x53, 0xD3,
    0x33, 0xB3, 0x73, 0xF3, 0x0B, 0x8B, 0x4B, 0xCB, 0x2B, 0xAB, 0x6B, 0xEB,
    0x1B, 0x9B, 0x5B, 0xDB, 0x3B, 0xBB, 0x7B, 0xFB, 0x07, 0x87, 0x47, 0xC7,
    0x27, 0xA7, 0x67, 0xE7, 0x17, 0x97, 0x57, 0xD7, 0x37, 0xB7, 0x77, 0xF7,
    0x0F, 0x8F, 0x4F, 0xCF, 0x2F, 0xAF, 0x6F, 0xEF, 0x1F, 0x9F, 0x5F, 0xDF,
    0x3F, 0xBF, 0x7F, 0xFF}
|â€”â€”â€”â€”Node:array_declarator Text: BitReverseTable256[256]
|â€”â€”â€”â€”â€”Node:identifier Text: BitReverseTable256
|â€”â€”â€”â€”â€”Node:[ Text: [
|â€”â€”â€”â€”â€”Node:number_literal Text: 256
|â€”â€”â€”â€”â€”Node:] Text: ]
|â€”â€”â€”â€”Node:= Text: =
|â€”â€”â€”â€”Node:initializer_list Text: {
    0x00, 0x80, 0x40, 0xC0, 0x20, 0xA0, 0x60, 0xE0, 0x10, 0x90, 0x50, 0xD0,
    0x30, 0xB0, 0x70, 0xF0, 0x08, 0x88, 0x48, 0xC8, 0x28, 0xA8, 0x68, 0xE8,
    0x18, 0x98, 0x58, 0xD8, 0x38, 0xB8, 0x78, 0xF8, 0x04, 0x84, 0x44, 0xC4,
    0x24, 0xA4, 0x64, 0xE4, 0x14, 0x94, 0x54, 0xD4, 0x34, 0xB4, 0x74, 0xF4,
    0x0C, 0x8C, 0x4C, 0xCC, 0x2C, 0xAC, 0x6C, 0xEC, 0x1C, 0x9C, 0x5C, 0xDC,
    0x3C, 0xBC, 0x7C, 0xFC, 0x02, 0x82, 0x42, 0xC2, 0x22, 0xA2, 0x62, 0xE2,
    0x12, 0x92, 0x52, 0xD2, 0x32, 0xB2, 0x72, 0xF2, 0x0A, 0x8A, 0x4A, 0xCA,
    0x2A, 0xAA, 0x6A, 0xEA, 0x1A, 0x9A, 0x5A, 0xDA, 0x3A, 0xBA, 0x7A, 0xFA,
    0x06, 0x86, 0x46, 0xC6, 0x26, 0xA6, 0x66, 0xE6, 0x16, 0x96, 0x56, 0xD6,
    0x36, 0xB6, 0x76, 0xF6, 0x0E, 0x8E, 0x4E, 0xCE, 0x2E, 0xAE, 0x6E, 0xEE,
    0x1E, 0x9E, 0x5E, 0xDE, 0x3E, 0xBE, 0x7E, 0xFE, 0x01, 0x81, 0x41, 0xC1,
    0x21, 0xA1, 0x61, 0xE1, 0x11, 0x91, 0x51, 0xD1, 0x31, 0xB1, 0x71, 0xF1,
    0x09, 0x89, 0x49, 0xC9, 0x29, 0xA9, 0x69, 0xE9, 0x19, 0x99, 0x59, 0xD9,
    0x39, 0xB9, 0x79, 0xF9, 0x05, 0x85, 0x45, 0xC5, 0x25, 0xA5, 0x65, 0xE5,
    0x15, 0x95, 0x55, 0xD5, 0x35, 0xB5, 0x75, 0xF5, 0x0D, 0x8D, 0x4D, 0xCD,
    0x2D, 0xAD, 0x6D, 0xED, 0x1D, 0x9D, 0x5D, 0xDD, 0x3D, 0xBD, 0x7D, 0xFD,
    0x03, 0x83, 0x43, 0xC3, 0x23, 0xA3, 0x63, 0xE3, 0x13, 0x93, 0x53, 0xD3,
    0x33, 0xB3, 0x73, 0xF3, 0x0B, 0x8B, 0x4B, 0xCB, 0x2B, 0xAB, 0x6B, 0xEB,
    0x1B, 0x9B, 0x5B, 0xDB, 0x3B, 0xBB, 0x7B, 0xFB, 0x07, 0x87, 0x47, 0xC7,
    0x27, 0xA7, 0x67, 0xE7, 0x17, 0x97, 0x57, 0xD7, 0x37, 0xB7, 0x77, 0xF7,
    0x0F, 0x8F, 0x4F, 0xCF, 0x2F, 0xAF, 0x6F, 0xEF, 0x1F, 0x9F, 0x5F, 0xDF,
    0x3F, 0xBF, 0x7F, 0xFF}
|â€”â€”â€”â€”â€”Node:{ Text: {
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x00
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x80
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x40
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xC0
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x20
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xA0
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x60
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xE0
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x10
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x90
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x50
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xD0
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x30
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xB0
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x70
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xF0
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x08
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x88
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x48
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xC8
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x28
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xA8
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x68
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xE8
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x18
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x98
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x58
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xD8
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x38
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xB8
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x78
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xF8
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x04
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x84
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x44
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xC4
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x24
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xA4
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x64
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xE4
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x14
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x94
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x54
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xD4
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x34
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xB4
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x74
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xF4
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0C
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8C
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x4C
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xCC
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x2C
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xAC
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x6C
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xEC
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x1C
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x9C
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x5C
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xDC
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x3C
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xBC
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x7C
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xFC
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x02
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x82
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x42
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xC2
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x22
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xA2
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x62
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xE2
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x12
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x92
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x52
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xD2
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x32
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xB2
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x72
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xF2
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0A
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8A
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x4A
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xCA
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x2A
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xAA
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x6A
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xEA
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x1A
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x9A
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x5A
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xDA
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x3A
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xBA
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x7A
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xFA
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x06
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x86
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x46
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xC6
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x26
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xA6
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x66
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xE6
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x16
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x96
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x56
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xD6
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x36
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xB6
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x76
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xF6
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0E
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8E
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x4E
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xCE
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x2E
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xAE
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x6E
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xEE
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x1E
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x9E
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x5E
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xDE
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x3E
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xBE
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x7E
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xFE
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x01
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x81
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x41
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xC1
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x21
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xA1
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x61
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xE1
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x11
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x91
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x51
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xD1
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x31
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xB1
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x71
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xF1
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x09
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x89
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x49
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xC9
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x29
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xA9
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x69
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xE9
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x19
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x99
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x59
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xD9
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x39
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xB9
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x79
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xF9
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x05
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x85
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x45
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xC5
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x25
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xA5
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x65
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xE5
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x15
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x95
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x55
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xD5
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x35
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xB5
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x75
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xF5
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0D
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8D
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x4D
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xCD
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x2D
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xAD
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x6D
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xED
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x1D
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x9D
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x5D
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xDD
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x3D
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xBD
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x7D
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xFD
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x03
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x83
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x43
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xC3
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x23
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xA3
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x63
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xE3
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x13
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x93
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x53
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xD3
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x33
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xB3
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x73
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xF3
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0B
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8B
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x4B
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xCB
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x2B
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xAB
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x6B
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xEB
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x1B
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x9B
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x5B
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xDB
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x3B
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xBB
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x7B
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xFB
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x07
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x87
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x47
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xC7
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x27
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xA7
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x67
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xE7
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x17
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x97
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x57
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xD7
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x37
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xB7
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x77
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xF7
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0F
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8F
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x4F
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xCF
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x2F
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xAF
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x6F
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xEF
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x1F
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x9F
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x5F
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xDF
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x3F
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xBF
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x7F
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0xFF
|â€”â€”â€”â€”â€”Node:} Text: }
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:comment
|â€”â€”Node:declaration Text: const uint16_t crc16_table[256] = {
    0x0000, 0x8005, 0x800F, 0x000A, 0x801B, 0x001E, 0x0014, 0x8011, 0x8033,
    0x0036, 0x003C, 0x8039, 0x0028, 0x802D, 0x8027, 0x0022, 0x8063, 0x0066,
    0x006C, 0x8069, 0x0078, 0x807D, 0x8077, 0x0072, 0x0050, 0x8055, 0x805F,
    0x005A, 0x804B, 0x004E, 0x0044, 0x8041, 0x80C3, 0x00C6, 0x00CC, 0x80C9,
    0x00D8, 0x80DD, 0x80D7, 0x00D2, 0x00F0, 0x80F5, 0x80FF, 0x00FA, 0x80EB,
    0x00EE, 0x00E4, 0x80E1, 0x00A0, 0x80A5, 0x80AF, 0x00AA, 0x80BB, 0x00BE,
    0x00B4, 0x80B1, 0x8093, 0x0096, 0x009C, 0x8099, 0x0088, 0x808D, 0x8087,
    0x0082, 0x8183, 0x0186, 0x018C, 0x8189, 0x0198, 0x819D, 0x8197, 0x0192,
    0x01B0, 0x81B5, 0x81BF, 0x01BA, 0x81AB, 0x01AE, 0x01A4, 0x81A1, 0x01E0,
    0x81E5, 0x81EF, 0x01EA, 0x81FB, 0x01FE, 0x01F4, 0x81F1, 0x81D3, 0x01D6,
    0x01DC, 0x81D9, 0x01C8, 0x81CD, 0x81C7, 0x01C2, 0x0140, 0x8145, 0x814F,
    0x014A, 0x815B, 0x015E, 0x0154, 0x8151, 0x8173, 0x0176, 0x017C, 0x8179,
    0x0168, 0x816D, 0x8167, 0x0162, 0x8123, 0x0126, 0x012C, 0x8129, 0x0138,
    0x813D, 0x8137, 0x0132, 0x0110, 0x8115, 0x811F, 0x011A, 0x810B, 0x010E,
    0x0104, 0x8101, 0x8303, 0x0306, 0x030C, 0x8309, 0x0318, 0x831D, 0x8317,
    0x0312, 0x0330, 0x8335, 0x833F, 0x033A, 0x832B, 0x032E, 0x0324, 0x8321,
    0x0360, 0x8365, 0x836F, 0x036A, 0x837B, 0x037E, 0x0374, 0x8371, 0x8353,
    0x0356, 0x035C, 0x8359, 0x0348, 0x834D, 0x8347, 0x0342, 0x03C0, 0x83C5,
    0x83CF, 0x03CA, 0x83DB, 0x03DE, 0x03D4, 0x83D1, 0x83F3, 0x03F6, 0x03FC,
    0x83F9, 0x03E8, 0x83ED, 0x83E7, 0x03E2, 0x83A3, 0x03A6, 0x03AC, 0x83A9,
    0x03B8, 0x83BD, 0x83B7, 0x03B2, 0x0390, 0x8395, 0x839F, 0x039A, 0x838B,
    0x038E, 0x0384, 0x8381, 0x0280, 0x8285, 0x828F, 0x028A, 0x829B, 0x029E,
    0x0294, 0x8291, 0x82B3, 0x02B6, 0x02BC, 0x82B9, 0x02A8, 0x82AD, 0x82A7,
    0x02A2, 0x82E3, 0x02E6, 0x02EC, 0x82E9, 0x02F8, 0x82FD, 0x82F7, 0x02F2,
    0x02D0, 0x82D5, 0x82DF, 0x02DA, 0x82CB, 0x02CE, 0x02C4, 0x82C1, 0x8243,
    0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257, 0x0252, 0x0270, 0x8275,
    0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261, 0x0220, 0x8225, 0x822F,
    0x022A, 0x823B, 0x023E, 0x0234, 0x8231, 0x8213, 0x0216, 0x021C, 0x8219,
    0x0208, 0x820D, 0x8207, 0x0202};
|â€”â€”â€”Node:type_qualifier Text: const
|â€”â€”â€”â€”Node:const Text: const
|â€”â€”â€”Node:primitive_type Text: uint16_t
|â€”â€”â€”Node:init_declarator Text: crc16_table[256] = {
    0x0000, 0x8005, 0x800F, 0x000A, 0x801B, 0x001E, 0x0014, 0x8011, 0x8033,
    0x0036, 0x003C, 0x8039, 0x0028, 0x802D, 0x8027, 0x0022, 0x8063, 0x0066,
    0x006C, 0x8069, 0x0078, 0x807D, 0x8077, 0x0072, 0x0050, 0x8055, 0x805F,
    0x005A, 0x804B, 0x004E, 0x0044, 0x8041, 0x80C3, 0x00C6, 0x00CC, 0x80C9,
    0x00D8, 0x80DD, 0x80D7, 0x00D2, 0x00F0, 0x80F5, 0x80FF, 0x00FA, 0x80EB,
    0x00EE, 0x00E4, 0x80E1, 0x00A0, 0x80A5, 0x80AF, 0x00AA, 0x80BB, 0x00BE,
    0x00B4, 0x80B1, 0x8093, 0x0096, 0x009C, 0x8099, 0x0088, 0x808D, 0x8087,
    0x0082, 0x8183, 0x0186, 0x018C, 0x8189, 0x0198, 0x819D, 0x8197, 0x0192,
    0x01B0, 0x81B5, 0x81BF, 0x01BA, 0x81AB, 0x01AE, 0x01A4, 0x81A1, 0x01E0,
    0x81E5, 0x81EF, 0x01EA, 0x81FB, 0x01FE, 0x01F4, 0x81F1, 0x81D3, 0x01D6,
    0x01DC, 0x81D9, 0x01C8, 0x81CD, 0x81C7, 0x01C2, 0x0140, 0x8145, 0x814F,
    0x014A, 0x815B, 0x015E, 0x0154, 0x8151, 0x8173, 0x0176, 0x017C, 0x8179,
    0x0168, 0x816D, 0x8167, 0x0162, 0x8123, 0x0126, 0x012C, 0x8129, 0x0138,
    0x813D, 0x8137, 0x0132, 0x0110, 0x8115, 0x811F, 0x011A, 0x810B, 0x010E,
    0x0104, 0x8101, 0x8303, 0x0306, 0x030C, 0x8309, 0x0318, 0x831D, 0x8317,
    0x0312, 0x0330, 0x8335, 0x833F, 0x033A, 0x832B, 0x032E, 0x0324, 0x8321,
    0x0360, 0x8365, 0x836F, 0x036A, 0x837B, 0x037E, 0x0374, 0x8371, 0x8353,
    0x0356, 0x035C, 0x8359, 0x0348, 0x834D, 0x8347, 0x0342, 0x03C0, 0x83C5,
    0x83CF, 0x03CA, 0x83DB, 0x03DE, 0x03D4, 0x83D1, 0x83F3, 0x03F6, 0x03FC,
    0x83F9, 0x03E8, 0x83ED, 0x83E7, 0x03E2, 0x83A3, 0x03A6, 0x03AC, 0x83A9,
    0x03B8, 0x83BD, 0x83B7, 0x03B2, 0x0390, 0x8395, 0x839F, 0x039A, 0x838B,
    0x038E, 0x0384, 0x8381, 0x0280, 0x8285, 0x828F, 0x028A, 0x829B, 0x029E,
    0x0294, 0x8291, 0x82B3, 0x02B6, 0x02BC, 0x82B9, 0x02A8, 0x82AD, 0x82A7,
    0x02A2, 0x82E3, 0x02E6, 0x02EC, 0x82E9, 0x02F8, 0x82FD, 0x82F7, 0x02F2,
    0x02D0, 0x82D5, 0x82DF, 0x02DA, 0x82CB, 0x02CE, 0x02C4, 0x82C1, 0x8243,
    0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257, 0x0252, 0x0270, 0x8275,
    0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261, 0x0220, 0x8225, 0x822F,
    0x022A, 0x823B, 0x023E, 0x0234, 0x8231, 0x8213, 0x0216, 0x021C, 0x8219,
    0x0208, 0x820D, 0x8207, 0x0202}
|â€”â€”â€”â€”Node:array_declarator Text: crc16_table[256]
|â€”â€”â€”â€”â€”Node:identifier Text: crc16_table
|â€”â€”â€”â€”â€”Node:[ Text: [
|â€”â€”â€”â€”â€”Node:number_literal Text: 256
|â€”â€”â€”â€”â€”Node:] Text: ]
|â€”â€”â€”â€”Node:= Text: =
|â€”â€”â€”â€”Node:initializer_list Text: {
    0x0000, 0x8005, 0x800F, 0x000A, 0x801B, 0x001E, 0x0014, 0x8011, 0x8033,
    0x0036, 0x003C, 0x8039, 0x0028, 0x802D, 0x8027, 0x0022, 0x8063, 0x0066,
    0x006C, 0x8069, 0x0078, 0x807D, 0x8077, 0x0072, 0x0050, 0x8055, 0x805F,
    0x005A, 0x804B, 0x004E, 0x0044, 0x8041, 0x80C3, 0x00C6, 0x00CC, 0x80C9,
    0x00D8, 0x80DD, 0x80D7, 0x00D2, 0x00F0, 0x80F5, 0x80FF, 0x00FA, 0x80EB,
    0x00EE, 0x00E4, 0x80E1, 0x00A0, 0x80A5, 0x80AF, 0x00AA, 0x80BB, 0x00BE,
    0x00B4, 0x80B1, 0x8093, 0x0096, 0x009C, 0x8099, 0x0088, 0x808D, 0x8087,
    0x0082, 0x8183, 0x0186, 0x018C, 0x8189, 0x0198, 0x819D, 0x8197, 0x0192,
    0x01B0, 0x81B5, 0x81BF, 0x01BA, 0x81AB, 0x01AE, 0x01A4, 0x81A1, 0x01E0,
    0x81E5, 0x81EF, 0x01EA, 0x81FB, 0x01FE, 0x01F4, 0x81F1, 0x81D3, 0x01D6,
    0x01DC, 0x81D9, 0x01C8, 0x81CD, 0x81C7, 0x01C2, 0x0140, 0x8145, 0x814F,
    0x014A, 0x815B, 0x015E, 0x0154, 0x8151, 0x8173, 0x0176, 0x017C, 0x8179,
    0x0168, 0x816D, 0x8167, 0x0162, 0x8123, 0x0126, 0x012C, 0x8129, 0x0138,
    0x813D, 0x8137, 0x0132, 0x0110, 0x8115, 0x811F, 0x011A, 0x810B, 0x010E,
    0x0104, 0x8101, 0x8303, 0x0306, 0x030C, 0x8309, 0x0318, 0x831D, 0x8317,
    0x0312, 0x0330, 0x8335, 0x833F, 0x033A, 0x832B, 0x032E, 0x0324, 0x8321,
    0x0360, 0x8365, 0x836F, 0x036A, 0x837B, 0x037E, 0x0374, 0x8371, 0x8353,
    0x0356, 0x035C, 0x8359, 0x0348, 0x834D, 0x8347, 0x0342, 0x03C0, 0x83C5,
    0x83CF, 0x03CA, 0x83DB, 0x03DE, 0x03D4, 0x83D1, 0x83F3, 0x03F6, 0x03FC,
    0x83F9, 0x03E8, 0x83ED, 0x83E7, 0x03E2, 0x83A3, 0x03A6, 0x03AC, 0x83A9,
    0x03B8, 0x83BD, 0x83B7, 0x03B2, 0x0390, 0x8395, 0x839F, 0x039A, 0x838B,
    0x038E, 0x0384, 0x8381, 0x0280, 0x8285, 0x828F, 0x028A, 0x829B, 0x029E,
    0x0294, 0x8291, 0x82B3, 0x02B6, 0x02BC, 0x82B9, 0x02A8, 0x82AD, 0x82A7,
    0x02A2, 0x82E3, 0x02E6, 0x02EC, 0x82E9, 0x02F8, 0x82FD, 0x82F7, 0x02F2,
    0x02D0, 0x82D5, 0x82DF, 0x02DA, 0x82CB, 0x02CE, 0x02C4, 0x82C1, 0x8243,
    0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257, 0x0252, 0x0270, 0x8275,
    0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261, 0x0220, 0x8225, 0x822F,
    0x022A, 0x823B, 0x023E, 0x0234, 0x8231, 0x8213, 0x0216, 0x021C, 0x8219,
    0x0208, 0x820D, 0x8207, 0x0202}
|â€”â€”â€”â€”â€”Node:{ Text: {
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0000
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8005
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x800F
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x000A
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x801B
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x001E
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0014
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8011
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8033
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0036
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x003C
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8039
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0028
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x802D
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8027
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0022
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8063
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0066
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x006C
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8069
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0078
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x807D
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8077
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0072
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0050
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8055
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x805F
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x005A
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x804B
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x004E
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0044
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8041
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x80C3
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x00C6
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x00CC
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x80C9
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x00D8
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x80DD
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x80D7
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x00D2
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x00F0
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x80F5
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x80FF
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x00FA
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x80EB
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x00EE
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x00E4
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x80E1
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x00A0
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x80A5
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x80AF
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x00AA
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x80BB
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x00BE
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x00B4
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x80B1
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8093
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0096
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x009C
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8099
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0088
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x808D
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8087
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0082
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8183
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0186
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x018C
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8189
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0198
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x819D
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8197
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0192
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x01B0
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x81B5
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x81BF
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x01BA
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x81AB
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x01AE
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x01A4
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x81A1
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x01E0
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x81E5
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x81EF
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x01EA
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x81FB
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x01FE
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x01F4
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x81F1
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x81D3
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x01D6
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x01DC
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x81D9
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x01C8
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x81CD
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x81C7
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x01C2
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0140
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8145
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x814F
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x014A
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x815B
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x015E
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0154
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8151
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8173
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0176
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x017C
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8179
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0168
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x816D
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8167
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0162
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8123
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0126
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x012C
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8129
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0138
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x813D
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8137
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0132
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0110
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8115
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x811F
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x011A
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x810B
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x010E
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0104
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8101
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8303
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0306
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x030C
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8309
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0318
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x831D
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8317
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0312
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0330
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8335
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x833F
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x033A
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x832B
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x032E
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0324
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8321
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0360
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8365
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x836F
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x036A
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x837B
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x037E
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0374
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8371
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8353
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0356
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x035C
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8359
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0348
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x834D
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8347
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0342
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x03C0
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x83C5
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x83CF
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x03CA
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x83DB
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x03DE
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x03D4
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x83D1
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x83F3
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x03F6
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x03FC
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x83F9
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x03E8
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x83ED
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x83E7
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x03E2
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x83A3
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x03A6
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x03AC
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x83A9
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x03B8
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x83BD
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x83B7
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x03B2
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0390
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8395
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x839F
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x039A
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x838B
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x038E
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0384
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8381
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0280
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8285
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x828F
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x028A
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x829B
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x029E
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0294
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8291
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x82B3
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x02B6
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x02BC
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x82B9
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x02A8
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x82AD
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x82A7
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x02A2
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x82E3
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x02E6
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x02EC
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x82E9
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x02F8
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x82FD
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x82F7
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x02F2
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x02D0
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x82D5
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x82DF
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x02DA
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x82CB
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x02CE
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x02C4
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x82C1
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8243
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0246
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x024C
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8249
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0258
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x825D
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8257
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0252
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0270
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8275
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x827F
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x027A
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x826B
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x026E
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0264
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8261
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0220
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8225
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x822F
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x022A
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x823B
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x023E
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0234
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8231
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8213
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0216
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x021C
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8219
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0208
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x820D
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x8207
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:number_literal Text: 0x0202
|â€”â€”â€”â€”â€”Node:} Text: }
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: class SPIClass;
|â€”â€”â€”Node:type_identifier Text: class
|â€”â€”â€”Node:identifier Text: SPIClass
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:function_definition Text: class mcp2518fd : public MCP_CAN {
public:
  mcp2518fd(byte _CS) : MCP_CAN(_CS), nReservedTx(0){};

public:
  virtual void
  enableTxInterrupt(bool enable = true); // enable transmit interrupt
  virtual void reserveTxBuffers(byte nTxBuf = 0) {
    nReservedTx = (nTxBuf < 3 ? nTxBuf : 3 - 1);
  }
|â€”â€”â€”Node:type_identifier Text: class
|â€”â€”â€”Node:identifier Text: mcp2518fd
|â€”â€”â€”Node:ERROR Text: : public MCP_CAN
|â€”â€”â€”â€”Node:: Text: :
|â€”â€”â€”â€”Node:identifier Text: public
|â€”â€”â€”â€”Node:identifier Text: MCP_CAN
|â€”â€”â€”Node:compound_statement Text: {
public:
  mcp2518fd(byte _CS) : MCP_CAN(_CS), nReservedTx(0){};

public:
  virtual void
  enableTxInterrupt(bool enable = true); // enable transmit interrupt
  virtual void reserveTxBuffers(byte nTxBuf = 0) {
    nReservedTx = (nTxBuf < 3 ? nTxBuf : 3 - 1);
  }
|â€”â€”â€”â€”Node:{ Text: {
|â€”â€”â€”â€”Node:labeled_statement Text: public:
  mcp2518fd(byte _CS) : MCP_CAN(_CS), nReservedTx(0){};
|â€”â€”â€”â€”â€”Node:statement_identifier Text: public
|â€”â€”â€”â€”â€”Node:: Text: :
|â€”â€”â€”â€”â€”Node:declaration Text: mcp2518fd(byte _CS) : MCP_CAN(_CS), nReservedTx(0){};
|â€”â€”â€”â€”â€”â€”Node:macro_type_specifier Text: mcp2518fd(byte _CS)
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: mcp2518fd
|â€”â€”â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”â€”â€”Node:ERROR Text: byte
|â€”â€”â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”â€”Node:type_descriptor Text: _CS
|â€”â€”â€”â€”â€”â€”â€”â€”Node:type_identifier Text: _CS
|â€”â€”â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”â€”â€”â€”Node:ERROR Text: :
|â€”â€”â€”â€”â€”â€”â€”Node:: Text: :
|â€”â€”â€”â€”â€”â€”Node:function_declarator Text: MCP_CAN(_CS)
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: MCP_CAN
|â€”â€”â€”â€”â€”â€”â€”Node:parameter_list Text: (_CS)
|â€”â€”â€”â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”â€”â€”â€”Node:parameter_declaration Text: _CS
|â€”â€”â€”â€”â€”â€”â€”â€”â€”Node:type_identifier Text: _CS
|â€”â€”â€”â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”â€”â€”â€”Node:ERROR Text: , nReservedTx(0){}
|â€”â€”â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”â€”â€”Node:function_declarator Text: nReservedTx(0)
|â€”â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: nReservedTx
|â€”â€”â€”â€”â€”â€”â€”â€”Node:parameter_list Text: (0)
|â€”â€”â€”â€”â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”â€”â€”â€”â€”Node:ERROR Text: 0
|â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”Node:number_literal Text: 0
|â€”â€”â€”â€”â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”â€”â€”â€”â€”Node:{ Text: {
|â€”â€”â€”â€”â€”â€”â€”Node:} Text: }
|â€”â€”â€”â€”â€”â€”Node:; Text: ;
|â€”â€”â€”â€”Node:labeled_statement Text: public:
  virtual void
  enableTxInterrupt(bool enable = true);
|â€”â€”â€”â€”â€”Node:statement_identifier Text: public
|â€”â€”â€”â€”â€”Node:: Text: :
|â€”â€”â€”â€”â€”Node:declaration Text: virtual void
  enableTxInterrupt(bool enable = true);
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: virtual
|â€”â€”â€”â€”â€”â€”Node:ERROR Text: void
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: void
|â€”â€”â€”â€”â€”â€”Node:init_declarator Text: enableTxInterrupt(bool enable = true
|â€”â€”â€”â€”â€”â€”â€”Node:function_declarator Text: enableTxInterrupt(bool enable
|â€”â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: enableTxInterrupt
|â€”â€”â€”â€”â€”â€”â€”â€”Node:parameter_list Text: (bool enable
|â€”â€”â€”â€”â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”â€”â€”â€”â€”Node:parameter_declaration Text: bool enable
|â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”Node:primitive_type Text: bool
|â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: enable
|â€”â€”â€”â€”â€”â€”â€”â€”â€”Node:) Text: 
|â€”â€”â€”â€”â€”â€”â€”Node:= Text: =
|â€”â€”â€”â€”â€”â€”â€”Node:true Text: true
|â€”â€”â€”â€”â€”â€”Node:ERROR Text: )
|â€”â€”â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”â€”â€”â€”Node:; Text: ;
|â€”â€”â€”â€”Node:comment
|â€”â€”â€”â€”Node:declaration Text: virtual void reserveTxBuffers(byte nTxBuf = 0) {
    nReservedTx = (nTxBuf < 3 ? nTxBuf : 3 - 1);
|â€”â€”â€”â€”â€”Node:type_identifier Text: virtual
|â€”â€”â€”â€”â€”Node:ERROR Text: void
|â€”â€”â€”â€”â€”â€”Node:identifier Text: void
|â€”â€”â€”â€”â€”Node:init_declarator Text: reserveTxBuffers(byte nTxBuf = 0) {
    nReservedTx = (nTxBuf < 3 ? nTxBuf : 3 - 1)
|â€”â€”â€”â€”â€”â€”Node:function_declarator Text: reserveTxBuffers(byte nTxBuf
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: reserveTxBuffers
|â€”â€”â€”â€”â€”â€”â€”Node:parameter_list Text: (byte nTxBuf
|â€”â€”â€”â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”â€”â€”â€”Node:parameter_declaration Text: byte nTxBuf
|â€”â€”â€”â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: nTxBuf
|â€”â€”â€”â€”â€”â€”â€”â€”Node:) Text: 
|â€”â€”â€”â€”â€”â€”Node:= Text: =
|â€”â€”â€”â€”â€”â€”Node:ERROR Text: 0)
|â€”â€”â€”â€”â€”â€”â€”Node:number_literal Text: 0
|â€”â€”â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”â€”â€”â€”Node:initializer_list Text: {
    nReservedTx = (nTxBuf < 3 ? nTxBuf : 3 - 1)
|â€”â€”â€”â€”â€”â€”â€”Node:{ Text: {
|â€”â€”â€”â€”â€”â€”â€”Node:assignment_expression Text: nReservedTx = (nTxBuf < 3 ? nTxBuf : 3 - 1)
|â€”â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: nReservedTx
|â€”â€”â€”â€”â€”â€”â€”â€”Node:= Text: =
|â€”â€”â€”â€”â€”â€”â€”â€”Node:parenthesized_expression Text: (nTxBuf < 3 ? nTxBuf : 3 - 1)
|â€”â€”â€”â€”â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”â€”â€”â€”â€”Node:conditional_expression Text: nTxBuf < 3 ? nTxBuf : 3 - 1
|â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”Node:binary_expression Text: nTxBuf < 3
|â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: nTxBuf
|â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”Node:< Text: <
|â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”Node:number_literal Text: 3
|â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”Node:? Text: ?
|â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: nTxBuf
|â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”Node:: Text: :
|â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”Node:binary_expression Text: 3 - 1
|â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”Node:number_literal Text: 3
|â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”Node:- Text: -
|â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”Node:number_literal Text: 1
|â€”â€”â€”â€”â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”â€”â€”â€”â€”Node:} Text: 
|â€”â€”â€”â€”â€”Node:; Text: ;
|â€”â€”â€”â€”Node:} Text: }
|â€”â€”Node:function_definition Text: virtual byte getLastTxBuffer() {
    return 3 - 1; // read index of last tx buffer
  }
|â€”â€”â€”Node:type_identifier Text: virtual
|â€”â€”â€”Node:ERROR Text: byte
|â€”â€”â€”â€”Node:identifier Text: byte
|â€”â€”â€”Node:function_declarator Text: getLastTxBuffer()
|â€”â€”â€”â€”Node:identifier Text: getLastTxBuffer
|â€”â€”â€”â€”Node:parameter_list Text: ()
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:compound_statement Text: {
    return 3 - 1; // read index of last tx buffer
  }
|â€”â€”â€”â€”Node:{ Text: {
|â€”â€”â€”â€”Node:return_statement Text: return 3 - 1;
|â€”â€”â€”â€”â€”Node:return Text: return
|â€”â€”â€”â€”â€”Node:binary_expression Text: 3 - 1
|â€”â€”â€”â€”â€”â€”Node:number_literal Text: 3
|â€”â€”â€”â€”â€”â€”Node:- Text: -
|â€”â€”â€”â€”â€”â€”Node:number_literal Text: 1
|â€”â€”â€”â€”â€”Node:; Text: ;
|â€”â€”â€”â€”Node:comment
|â€”â€”â€”â€”Node:} Text: }
|â€”â€”Node:declaration Text: virtual byte begin(byte speedset,
                     const byte clockset = CAN_SYSCLK_40M);
|â€”â€”â€”Node:type_identifier Text: virtual
|â€”â€”â€”Node:ERROR Text: byte
|â€”â€”â€”â€”Node:identifier Text: byte
|â€”â€”â€”Node:function_declarator Text: begin(byte speedset,
                     const byte clockset = CAN_SYSCLK_40M)
|â€”â€”â€”â€”Node:identifier Text: begin
|â€”â€”â€”â€”Node:parameter_list Text: (byte speedset,
                     const byte clockset = CAN_SYSCLK_40M)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: byte speedset
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”Node:identifier Text: speedset
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: const byte clockset = CAN_SYSCLK_40M
|â€”â€”â€”â€”â€”â€”Node:type_qualifier Text: const
|â€”â€”â€”â€”â€”â€”â€”Node:const Text: const
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”Node:ERROR Text: clockset =
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: clockset
|â€”â€”â€”â€”â€”â€”â€”Node:= Text: =
|â€”â€”â€”â€”â€”â€”Node:identifier Text: CAN_SYSCLK_40M
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:comment
|â€”â€”Node:declaration Text: virtual byte init_Mask(byte num, byte ext, unsigned long ulData);
|â€”â€”â€”Node:type_identifier Text: virtual
|â€”â€”â€”Node:ERROR Text: byte
|â€”â€”â€”â€”Node:identifier Text: byte
|â€”â€”â€”Node:function_declarator Text: init_Mask(byte num, byte ext, unsigned long ulData)
|â€”â€”â€”â€”Node:identifier Text: init_Mask
|â€”â€”â€”â€”Node:parameter_list Text: (byte num, byte ext, unsigned long ulData)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: byte num
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”Node:identifier Text: num
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: byte ext
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”Node:identifier Text: ext
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: unsigned long ulData
|â€”â€”â€”â€”â€”â€”Node:sized_type_specifier Text: unsigned long
|â€”â€”â€”â€”â€”â€”â€”Node:unsigned Text: unsigned
|â€”â€”â€”â€”â€”â€”â€”Node:long Text: long
|â€”â€”â€”â€”â€”â€”Node:identifier Text: ulData
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: virtual byte init_Filt(byte num, byte ext,
                         unsigned long ulData);
|â€”â€”â€”Node:type_identifier Text: virtual
|â€”â€”â€”Node:ERROR Text: byte
|â€”â€”â€”â€”Node:identifier Text: byte
|â€”â€”â€”Node:function_declarator Text: init_Filt(byte num, byte ext,
                         unsigned long ulData)
|â€”â€”â€”â€”Node:identifier Text: init_Filt
|â€”â€”â€”â€”Node:parameter_list Text: (byte num, byte ext,
                         unsigned long ulData)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: byte num
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”Node:identifier Text: num
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: byte ext
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”Node:identifier Text: ext
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: unsigned long ulData
|â€”â€”â€”â€”â€”â€”Node:sized_type_specifier Text: unsigned long
|â€”â€”â€”â€”â€”â€”â€”Node:unsigned Text: unsigned
|â€”â€”â€”â€”â€”â€”â€”Node:long Text: long
|â€”â€”â€”â€”â€”â€”Node:identifier Text: ulData
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:comment
|â€”â€”Node:declaration Text: virtual void setSleepWakeup(const byte enable);
|â€”â€”â€”Node:type_identifier Text: virtual
|â€”â€”â€”Node:ERROR Text: void
|â€”â€”â€”â€”Node:identifier Text: void
|â€”â€”â€”Node:function_declarator Text: setSleepWakeup(const byte enable)
|â€”â€”â€”â€”Node:identifier Text: setSleepWakeup
|â€”â€”â€”â€”Node:parameter_list Text: (const byte enable)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: const byte enable
|â€”â€”â€”â€”â€”â€”Node:type_qualifier Text: const
|â€”â€”â€”â€”â€”â€”â€”Node:const Text: const
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”Node:identifier Text: enable
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: virtual byte sleep();
|â€”â€”â€”Node:type_identifier Text: virtual
|â€”â€”â€”Node:ERROR Text: byte
|â€”â€”â€”â€”Node:identifier Text: byte
|â€”â€”â€”Node:function_declarator Text: sleep()
|â€”â€”â€”â€”Node:identifier Text: sleep
|â€”â€”â€”â€”Node:parameter_list Text: ()
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: virtual byte wake();
|â€”â€”â€”Node:type_identifier Text: virtual
|â€”â€”â€”Node:ERROR Text: byte
|â€”â€”â€”â€”Node:identifier Text: byte
|â€”â€”â€”Node:function_declarator Text: wake()
|â€”â€”â€”â€”Node:identifier Text: wake
|â€”â€”â€”â€”Node:parameter_list Text: ()
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: virtual byte setMode(const byte opMode);
|â€”â€”â€”Node:type_identifier Text: virtual
|â€”â€”â€”Node:ERROR Text: byte
|â€”â€”â€”â€”Node:identifier Text: byte
|â€”â€”â€”Node:function_declarator Text: setMode(const byte opMode)
|â€”â€”â€”â€”Node:identifier Text: setMode
|â€”â€”â€”â€”Node:parameter_list Text: (const byte opMode)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: const byte opMode
|â€”â€”â€”â€”â€”â€”Node:type_qualifier Text: const
|â€”â€”â€”â€”â€”â€”â€”Node:const Text: const
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”Node:identifier Text: opMode
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: virtual byte getMode();
|â€”â€”â€”Node:type_identifier Text: virtual
|â€”â€”â€”Node:ERROR Text: byte
|â€”â€”â€”â€”Node:identifier Text: byte
|â€”â€”â€”Node:function_declarator Text: getMode()
|â€”â€”â€”â€”Node:identifier Text: getMode
|â€”â€”â€”â€”Node:parameter_list Text: ()
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: virtual byte sendMsgBuf(unsigned long id, byte ext, byte rtrBit, byte len,
                          const byte *buf, bool wait_sent = true);
|â€”â€”â€”Node:type_identifier Text: virtual
|â€”â€”â€”Node:ERROR Text: byte
|â€”â€”â€”â€”Node:identifier Text: byte
|â€”â€”â€”Node:init_declarator Text: sendMsgBuf(unsigned long id, byte ext, byte rtrBit, byte len,
                          const byte *buf, bool wait_sent = true
|â€”â€”â€”â€”Node:function_declarator Text: sendMsgBuf(unsigned long id, byte ext, byte rtrBit, byte len,
                          const byte *buf, bool wait_sent
|â€”â€”â€”â€”â€”Node:identifier Text: sendMsgBuf
|â€”â€”â€”â€”â€”Node:parameter_list Text: (unsigned long id, byte ext, byte rtrBit, byte len,
                          const byte *buf, bool wait_sent
|â€”â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”â€”Node:parameter_declaration Text: unsigned long id
|â€”â€”â€”â€”â€”â€”â€”Node:sized_type_specifier Text: unsigned long
|â€”â€”â€”â€”â€”â€”â€”â€”Node:unsigned Text: unsigned
|â€”â€”â€”â€”â€”â€”â€”â€”Node:long Text: long
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: id
|â€”â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”â€”Node:parameter_declaration Text: byte ext
|â€”â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: ext
|â€”â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”â€”Node:parameter_declaration Text: byte rtrBit
|â€”â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: rtrBit
|â€”â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”â€”Node:parameter_declaration Text: byte len
|â€”â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: len
|â€”â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”â€”Node:parameter_declaration Text: const byte *buf
|â€”â€”â€”â€”â€”â€”â€”Node:type_qualifier Text: const
|â€”â€”â€”â€”â€”â€”â€”â€”Node:const Text: const
|â€”â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *buf
|â€”â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: buf
|â€”â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”â€”Node:parameter_declaration Text: bool wait_sent
|â€”â€”â€”â€”â€”â€”â€”Node:primitive_type Text: bool
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: wait_sent
|â€”â€”â€”â€”â€”â€”Node:) Text: 
|â€”â€”â€”â€”Node:= Text: =
|â€”â€”â€”â€”Node:true Text: true
|â€”â€”â€”Node:ERROR Text: )
|â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: virtual byte sendMsgBuf(unsigned long id, byte ext, byte len, const byte *buf,
                          bool wait_sent = true);
|â€”â€”â€”Node:type_identifier Text: virtual
|â€”â€”â€”Node:ERROR Text: byte
|â€”â€”â€”â€”Node:identifier Text: byte
|â€”â€”â€”Node:init_declarator Text: sendMsgBuf(unsigned long id, byte ext, byte len, const byte *buf,
                          bool wait_sent = true
|â€”â€”â€”â€”Node:function_declarator Text: sendMsgBuf(unsigned long id, byte ext, byte len, const byte *buf,
                          bool wait_sent
|â€”â€”â€”â€”â€”Node:identifier Text: sendMsgBuf
|â€”â€”â€”â€”â€”Node:parameter_list Text: (unsigned long id, byte ext, byte len, const byte *buf,
                          bool wait_sent
|â€”â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”â€”Node:parameter_declaration Text: unsigned long id
|â€”â€”â€”â€”â€”â€”â€”Node:sized_type_specifier Text: unsigned long
|â€”â€”â€”â€”â€”â€”â€”â€”Node:unsigned Text: unsigned
|â€”â€”â€”â€”â€”â€”â€”â€”Node:long Text: long
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: id
|â€”â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”â€”Node:parameter_declaration Text: byte ext
|â€”â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: ext
|â€”â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”â€”Node:parameter_declaration Text: byte len
|â€”â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: len
|â€”â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”â€”Node:parameter_declaration Text: const byte *buf
|â€”â€”â€”â€”â€”â€”â€”Node:type_qualifier Text: const
|â€”â€”â€”â€”â€”â€”â€”â€”Node:const Text: const
|â€”â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *buf
|â€”â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: buf
|â€”â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”â€”Node:parameter_declaration Text: bool wait_sent
|â€”â€”â€”â€”â€”â€”â€”Node:primitive_type Text: bool
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: wait_sent
|â€”â€”â€”â€”â€”â€”Node:) Text: 
|â€”â€”â€”â€”Node:= Text: =
|â€”â€”â€”â€”Node:true Text: true
|â€”â€”â€”Node:ERROR Text: )
|â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: virtual byte readMsgBuf(byte *len, byte *buf);
|â€”â€”â€”Node:type_identifier Text: virtual
|â€”â€”â€”Node:ERROR Text: byte
|â€”â€”â€”â€”Node:identifier Text: byte
|â€”â€”â€”Node:function_declarator Text: readMsgBuf(byte *len, byte *buf)
|â€”â€”â€”â€”Node:identifier Text: readMsgBuf
|â€”â€”â€”â€”Node:parameter_list Text: (byte *len, byte *buf)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: byte *len
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *len
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: len
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: byte *buf
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *buf
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: buf
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: virtual byte readMsgBufID(unsigned long *ID, byte *len, byte *buf);
|â€”â€”â€”Node:type_identifier Text: virtual
|â€”â€”â€”Node:ERROR Text: byte
|â€”â€”â€”â€”Node:identifier Text: byte
|â€”â€”â€”Node:function_declarator Text: readMsgBufID(unsigned long *ID, byte *len, byte *buf)
|â€”â€”â€”â€”Node:identifier Text: readMsgBufID
|â€”â€”â€”â€”Node:parameter_list Text: (unsigned long *ID, byte *len, byte *buf)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: unsigned long *ID
|â€”â€”â€”â€”â€”â€”Node:sized_type_specifier Text: unsigned long
|â€”â€”â€”â€”â€”â€”â€”Node:unsigned Text: unsigned
|â€”â€”â€”â€”â€”â€”â€”Node:long Text: long
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *ID
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: ID
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: byte *len
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *len
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: len
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: byte *buf
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *buf
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: buf
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: virtual byte checkReceive(void);
|â€”â€”â€”Node:type_identifier Text: virtual
|â€”â€”â€”Node:ERROR Text: byte
|â€”â€”â€”â€”Node:identifier Text: byte
|â€”â€”â€”Node:function_declarator Text: checkReceive(void)
|â€”â€”â€”â€”Node:identifier Text: checkReceive
|â€”â€”â€”â€”Node:parameter_list Text: (void)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: void
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: void
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: virtual byte checkError(void);
|â€”â€”â€”Node:type_identifier Text: virtual
|â€”â€”â€”Node:ERROR Text: byte
|â€”â€”â€”â€”Node:identifier Text: byte
|â€”â€”â€”Node:function_declarator Text: checkError(void)
|â€”â€”â€”â€”Node:identifier Text: checkError
|â€”â€”â€”â€”Node:parameter_list Text: (void)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: void
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: void
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: virtual unsigned long getCanId(void);
|â€”â€”â€”Node:sized_type_specifier Text: virtual unsigned long
|â€”â€”â€”â€”Node:type_identifier Text: virtual
|â€”â€”â€”â€”Node:unsigned Text: unsigned
|â€”â€”â€”â€”Node:long Text: long
|â€”â€”â€”Node:function_declarator Text: getCanId(void)
|â€”â€”â€”â€”Node:identifier Text: getCanId
|â€”â€”â€”â€”Node:parameter_list Text: (void)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: void
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: void
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: virtual byte isRemoteRequest(void);
|â€”â€”â€”Node:type_identifier Text: virtual
|â€”â€”â€”Node:ERROR Text: byte
|â€”â€”â€”â€”Node:identifier Text: byte
|â€”â€”â€”Node:function_declarator Text: isRemoteRequest(void)
|â€”â€”â€”â€”Node:identifier Text: isRemoteRequest
|â€”â€”â€”â€”Node:parameter_list Text: (void)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: void
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: void
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: virtual byte isExtendedFrame(void);
|â€”â€”â€”Node:type_identifier Text: virtual
|â€”â€”â€”Node:ERROR Text: byte
|â€”â€”â€”â€”Node:identifier Text: byte
|â€”â€”â€”Node:function_declarator Text: isExtendedFrame(void)
|â€”â€”â€”â€”Node:identifier Text: isExtendedFrame
|â€”â€”â€”â€”Node:parameter_list Text: (void)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: void
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: void
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: virtual byte readMsgBufID(byte status, volatile unsigned long *id,
                            volatile byte *ext, volatile byte *rtr,
                            volatile byte *len,
                            volatile byte *buf);
|â€”â€”â€”Node:type_identifier Text: virtual
|â€”â€”â€”Node:ERROR Text: byte
|â€”â€”â€”â€”Node:identifier Text: byte
|â€”â€”â€”Node:function_declarator Text: readMsgBufID(byte status, volatile unsigned long *id,
                            volatile byte *ext, volatile byte *rtr,
                            volatile byte *len,
                            volatile byte *buf)
|â€”â€”â€”â€”Node:identifier Text: readMsgBufID
|â€”â€”â€”â€”Node:parameter_list Text: (byte status, volatile unsigned long *id,
                            volatile byte *ext, volatile byte *rtr,
                            volatile byte *len,
                            volatile byte *buf)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: byte status
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”Node:identifier Text: status
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: volatile unsigned long *id
|â€”â€”â€”â€”â€”â€”Node:type_qualifier Text: volatile
|â€”â€”â€”â€”â€”â€”â€”Node:volatile Text: volatile
|â€”â€”â€”â€”â€”â€”Node:sized_type_specifier Text: unsigned long
|â€”â€”â€”â€”â€”â€”â€”Node:unsigned Text: unsigned
|â€”â€”â€”â€”â€”â€”â€”Node:long Text: long
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *id
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: id
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: volatile byte *ext
|â€”â€”â€”â€”â€”â€”Node:type_qualifier Text: volatile
|â€”â€”â€”â€”â€”â€”â€”Node:volatile Text: volatile
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *ext
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: ext
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: volatile byte *rtr
|â€”â€”â€”â€”â€”â€”Node:type_qualifier Text: volatile
|â€”â€”â€”â€”â€”â€”â€”Node:volatile Text: volatile
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *rtr
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: rtr
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: volatile byte *len
|â€”â€”â€”â€”â€”â€”Node:type_qualifier Text: volatile
|â€”â€”â€”â€”â€”â€”â€”Node:volatile Text: volatile
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *len
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: len
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: volatile byte *buf
|â€”â€”â€”â€”â€”â€”Node:type_qualifier Text: volatile
|â€”â€”â€”â€”â€”â€”â€”Node:volatile Text: volatile
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *buf
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: buf
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:comment
|â€”â€”Node:declaration Text: virtual byte trySendMsgBuf(unsigned long id, byte ext, byte rtrBit, byte len,
                             const byte *buf, byte iTxBuf = 0xff);
|â€”â€”â€”Node:type_identifier Text: virtual
|â€”â€”â€”Node:ERROR Text: byte
|â€”â€”â€”â€”Node:identifier Text: byte
|â€”â€”â€”Node:init_declarator Text: trySendMsgBuf(unsigned long id, byte ext, byte rtrBit, byte len,
                             const byte *buf, byte iTxBuf = 0xff
|â€”â€”â€”â€”Node:function_declarator Text: trySendMsgBuf(unsigned long id, byte ext, byte rtrBit, byte len,
                             const byte *buf, byte iTxBuf
|â€”â€”â€”â€”â€”Node:identifier Text: trySendMsgBuf
|â€”â€”â€”â€”â€”Node:parameter_list Text: (unsigned long id, byte ext, byte rtrBit, byte len,
                             const byte *buf, byte iTxBuf
|â€”â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”â€”Node:parameter_declaration Text: unsigned long id
|â€”â€”â€”â€”â€”â€”â€”Node:sized_type_specifier Text: unsigned long
|â€”â€”â€”â€”â€”â€”â€”â€”Node:unsigned Text: unsigned
|â€”â€”â€”â€”â€”â€”â€”â€”Node:long Text: long
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: id
|â€”â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”â€”Node:parameter_declaration Text: byte ext
|â€”â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: ext
|â€”â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”â€”Node:parameter_declaration Text: byte rtrBit
|â€”â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: rtrBit
|â€”â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”â€”Node:parameter_declaration Text: byte len
|â€”â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: len
|â€”â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”â€”Node:parameter_declaration Text: const byte *buf
|â€”â€”â€”â€”â€”â€”â€”Node:type_qualifier Text: const
|â€”â€”â€”â€”â€”â€”â€”â€”Node:const Text: const
|â€”â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *buf
|â€”â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: buf
|â€”â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”â€”Node:parameter_declaration Text: byte iTxBuf
|â€”â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: iTxBuf
|â€”â€”â€”â€”â€”â€”Node:) Text: 
|â€”â€”â€”â€”Node:= Text: =
|â€”â€”â€”â€”Node:number_literal Text: 0xff
|â€”â€”â€”Node:ERROR Text: )
|â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: virtual byte sendMsgBuf(byte status, unsigned long id, byte ext, byte rtrBit,
                          byte len, volatile const byte *buf);
|â€”â€”â€”Node:type_identifier Text: virtual
|â€”â€”â€”Node:ERROR Text: byte
|â€”â€”â€”â€”Node:identifier Text: byte
|â€”â€”â€”Node:function_declarator Text: sendMsgBuf(byte status, unsigned long id, byte ext, byte rtrBit,
                          byte len, volatile const byte *buf)
|â€”â€”â€”â€”Node:identifier Text: sendMsgBuf
|â€”â€”â€”â€”Node:parameter_list Text: (byte status, unsigned long id, byte ext, byte rtrBit,
                          byte len, volatile const byte *buf)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: byte status
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”Node:identifier Text: status
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: unsigned long id
|â€”â€”â€”â€”â€”â€”Node:sized_type_specifier Text: unsigned long
|â€”â€”â€”â€”â€”â€”â€”Node:unsigned Text: unsigned
|â€”â€”â€”â€”â€”â€”â€”Node:long Text: long
|â€”â€”â€”â€”â€”â€”Node:identifier Text: id
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: byte ext
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”Node:identifier Text: ext
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: byte rtrBit
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”Node:identifier Text: rtrBit
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: byte len
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”Node:identifier Text: len
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: volatile const byte *buf
|â€”â€”â€”â€”â€”â€”Node:type_qualifier Text: volatile
|â€”â€”â€”â€”â€”â€”â€”Node:volatile Text: volatile
|â€”â€”â€”â€”â€”â€”Node:type_qualifier Text: const
|â€”â€”â€”â€”â€”â€”â€”Node:const Text: const
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *buf
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: buf
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: virtual void clearBufferTransmitIfFlags(byte flags = 0);
|â€”â€”â€”Node:type_identifier Text: virtual
|â€”â€”â€”Node:ERROR Text: void
|â€”â€”â€”â€”Node:identifier Text: void
|â€”â€”â€”Node:init_declarator Text: clearBufferTransmitIfFlags(byte flags = 0
|â€”â€”â€”â€”Node:function_declarator Text: clearBufferTransmitIfFlags(byte flags
|â€”â€”â€”â€”â€”Node:identifier Text: clearBufferTransmitIfFlags
|â€”â€”â€”â€”â€”Node:parameter_list Text: (byte flags
|â€”â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”â€”Node:parameter_declaration Text: byte flags
|â€”â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: flags
|â€”â€”â€”â€”â€”â€”Node:) Text: 
|â€”â€”â€”â€”Node:= Text: =
|â€”â€”â€”â€”Node:number_literal Text: 0
|â€”â€”â€”Node:ERROR Text: )
|â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: virtual byte readRxTxStatus(void);
|â€”â€”â€”Node:type_identifier Text: virtual
|â€”â€”â€”Node:ERROR Text: byte
|â€”â€”â€”â€”Node:identifier Text: byte
|â€”â€”â€”Node:function_declarator Text: readRxTxStatus(void)
|â€”â€”â€”â€”Node:identifier Text: readRxTxStatus
|â€”â€”â€”â€”Node:parameter_list Text: (void)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: void
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: void
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: virtual byte checkClearRxStatus(byte *status);
|â€”â€”â€”Node:type_identifier Text: virtual
|â€”â€”â€”Node:ERROR Text: byte
|â€”â€”â€”â€”Node:identifier Text: byte
|â€”â€”â€”Node:function_declarator Text: checkClearRxStatus(byte *status)
|â€”â€”â€”â€”Node:identifier Text: checkClearRxStatus
|â€”â€”â€”â€”Node:parameter_list Text: (byte *status)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: byte *status
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *status
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: status
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: virtual byte checkClearTxStatus(byte *status, byte iTxBuf = 0xff);
|â€”â€”â€”Node:type_identifier Text: virtual
|â€”â€”â€”Node:ERROR Text: byte
|â€”â€”â€”â€”Node:identifier Text: byte
|â€”â€”â€”Node:init_declarator Text: checkClearTxStatus(byte *status, byte iTxBuf = 0xff
|â€”â€”â€”â€”Node:function_declarator Text: checkClearTxStatus(byte *status, byte iTxBuf
|â€”â€”â€”â€”â€”Node:identifier Text: checkClearTxStatus
|â€”â€”â€”â€”â€”Node:parameter_list Text: (byte *status, byte iTxBuf
|â€”â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”â€”Node:parameter_declaration Text: byte *status
|â€”â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *status
|â€”â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: status
|â€”â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”â€”Node:parameter_declaration Text: byte iTxBuf
|â€”â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: iTxBuf
|â€”â€”â€”â€”â€”â€”Node:) Text: 
|â€”â€”â€”â€”Node:= Text: =
|â€”â€”â€”â€”Node:number_literal Text: 0xff
|â€”â€”â€”Node:ERROR Text: )
|â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: virtual bool mcpPinMode(const byte pin, const byte mode);
|â€”â€”â€”Node:type_identifier Text: virtual
|â€”â€”â€”Node:ERROR Text: bool
|â€”â€”â€”â€”Node:identifier Text: bool
|â€”â€”â€”Node:function_declarator Text: mcpPinMode(const byte pin, const byte mode)
|â€”â€”â€”â€”Node:identifier Text: mcpPinMode
|â€”â€”â€”â€”Node:parameter_list Text: (const byte pin, const byte mode)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: const byte pin
|â€”â€”â€”â€”â€”â€”Node:type_qualifier Text: const
|â€”â€”â€”â€”â€”â€”â€”Node:const Text: const
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”Node:identifier Text: pin
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: const byte mode
|â€”â€”â€”â€”â€”â€”Node:type_qualifier Text: const
|â€”â€”â€”â€”â€”â€”â€”Node:const Text: const
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”Node:identifier Text: mode
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: virtual bool mcpDigitalWrite(const byte pin, const byte mode);
|â€”â€”â€”Node:type_identifier Text: virtual
|â€”â€”â€”Node:ERROR Text: bool
|â€”â€”â€”â€”Node:identifier Text: bool
|â€”â€”â€”Node:function_declarator Text: mcpDigitalWrite(const byte pin, const byte mode)
|â€”â€”â€”â€”Node:identifier Text: mcpDigitalWrite
|â€”â€”â€”â€”Node:parameter_list Text: (const byte pin, const byte mode)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: const byte pin
|â€”â€”â€”â€”â€”â€”Node:type_qualifier Text: const
|â€”â€”â€”â€”â€”â€”â€”Node:const Text: const
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”Node:identifier Text: pin
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: const byte mode
|â€”â€”â€”â€”â€”â€”Node:type_qualifier Text: const
|â€”â€”â€”â€”â€”â€”â€”Node:const Text: const
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”Node:identifier Text: mode
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: virtual byte mcpDigitalRead(const byte pin);
|â€”â€”â€”Node:type_identifier Text: virtual
|â€”â€”â€”Node:ERROR Text: byte
|â€”â€”â€”â€”Node:identifier Text: byte
|â€”â€”â€”Node:function_declarator Text: mcpDigitalRead(const byte pin)
|â€”â€”â€”â€”Node:identifier Text: mcpDigitalRead
|â€”â€”â€”â€”Node:parameter_list Text: (const byte pin)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: const byte pin
|â€”â€”â€”â€”â€”â€”Node:type_qualifier Text: const
|â€”â€”â€”â€”â€”â€”â€”Node:const Text: const
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”Node:identifier Text: pin
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:labeled_statement Text: private:
  byte mcp2518fd_readMsgBufID(volatile byte *len, volatile byte *buf);
|â€”â€”â€”Node:statement_identifier Text: private
|â€”â€”â€”Node:: Text: :
|â€”â€”â€”Node:declaration Text: byte mcp2518fd_readMsgBufID(volatile byte *len, volatile byte *buf);
|â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”Node:function_declarator Text: mcp2518fd_readMsgBufID(volatile byte *len, volatile byte *buf)
|â€”â€”â€”â€”â€”Node:identifier Text: mcp2518fd_readMsgBufID
|â€”â€”â€”â€”â€”Node:parameter_list Text: (volatile byte *len, volatile byte *buf)
|â€”â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”â€”Node:parameter_declaration Text: volatile byte *len
|â€”â€”â€”â€”â€”â€”â€”Node:type_qualifier Text: volatile
|â€”â€”â€”â€”â€”â€”â€”â€”Node:volatile Text: volatile
|â€”â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *len
|â€”â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: len
|â€”â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”â€”Node:parameter_declaration Text: volatile byte *buf
|â€”â€”â€”â€”â€”â€”â€”Node:type_qualifier Text: volatile
|â€”â€”â€”â€”â€”â€”â€”â€”Node:volatile Text: volatile
|â€”â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *buf
|â€”â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: buf
|â€”â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: byte mcp2518fd_sendMsg(const byte *buf, byte len, unsigned long id, byte ext,
                         byte rtr, bool wait_sent);
|â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_sendMsg(const byte *buf, byte len, unsigned long id, byte ext,
                         byte rtr, bool wait_sent)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_sendMsg
|â€”â€”â€”â€”Node:parameter_list Text: (const byte *buf, byte len, unsigned long id, byte ext,
                         byte rtr, bool wait_sent)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: const byte *buf
|â€”â€”â€”â€”â€”â€”Node:type_qualifier Text: const
|â€”â€”â€”â€”â€”â€”â€”Node:const Text: const
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *buf
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: buf
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: byte len
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”Node:identifier Text: len
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: unsigned long id
|â€”â€”â€”â€”â€”â€”Node:sized_type_specifier Text: unsigned long
|â€”â€”â€”â€”â€”â€”â€”Node:unsigned Text: unsigned
|â€”â€”â€”â€”â€”â€”â€”Node:long Text: long
|â€”â€”â€”â€”â€”â€”Node:identifier Text: id
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: byte ext
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”Node:identifier Text: ext
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: byte rtr
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”Node:identifier Text: rtr
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: bool wait_sent
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: bool
|â€”â€”â€”â€”â€”â€”Node:identifier Text: wait_sent
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_receiveMsg();
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_receiveMsg()
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_receiveMsg
|â€”â€”â€”â€”Node:parameter_list Text: ()
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:labeled_statement Text: private:
  uint8_t mcp2518fd_init(byte speedset, const byte clock);
|â€”â€”â€”Node:statement_identifier Text: private
|â€”â€”â€”Node:: Text: :
|â€”â€”â€”Node:declaration Text: uint8_t mcp2518fd_init(byte speedset, const byte clock);
|â€”â€”â€”â€”Node:primitive_type Text: uint8_t
|â€”â€”â€”â€”Node:function_declarator Text: mcp2518fd_init(byte speedset, const byte clock)
|â€”â€”â€”â€”â€”Node:identifier Text: mcp2518fd_init
|â€”â€”â€”â€”â€”Node:parameter_list Text: (byte speedset, const byte clock)
|â€”â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”â€”Node:parameter_declaration Text: byte speedset
|â€”â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: speedset
|â€”â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”â€”Node:parameter_declaration Text: const byte clock
|â€”â€”â€”â€”â€”â€”â€”Node:type_qualifier Text: const
|â€”â€”â€”â€”â€”â€”â€”â€”Node:const Text: const
|â€”â€”â€”â€”â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: clock
|â€”â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”â€”Node:; Text: ;
|â€”â€”Node:comment
|â€”â€”Node:declaration Text: int8_t mcp2518fd_reset(void);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_reset(void)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_reset
|â€”â€”â€”â€”Node:parameter_list Text: (void)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: void
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: void
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:comment
|â€”â€”Node:declaration Text: int8_t mcp2518fd_EccEnable(void);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_EccEnable(void)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_EccEnable
|â€”â€”â€”â€”Node:parameter_list Text: (void)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: void
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: void
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:comment
|â€”â€”Node:declaration Text: int8_t mcp2518fd_RamInit(uint8_t d);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_RamInit(uint8_t d)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_RamInit
|â€”â€”â€”â€”Node:parameter_list Text: (uint8_t d)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint8_t d
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint8_t
|â€”â€”â€”â€”â€”â€”Node:identifier Text: d
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_ConfigureObjectReset(CAN_CONFIG *config);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_ConfigureObjectReset(CAN_CONFIG *config)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_ConfigureObjectReset
|â€”â€”â€”â€”Node:parameter_list Text: (CAN_CONFIG *config)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_CONFIG *config
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_CONFIG
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *config
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: config
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_Configure(CAN_CONFIG *config);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_Configure(CAN_CONFIG *config)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_Configure
|â€”â€”â€”â€”Node:parameter_list Text: (CAN_CONFIG *config)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_CONFIG *config
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_CONFIG
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *config
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: config
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t
  mcp2518fd_TransmitChannelConfigureObjectReset(CAN_TX_FIFO_CONFIG *config);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_TransmitChannelConfigureObjectReset(CAN_TX_FIFO_CONFIG *config)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_TransmitChannelConfigureObjectReset
|â€”â€”â€”â€”Node:parameter_list Text: (CAN_TX_FIFO_CONFIG *config)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_TX_FIFO_CONFIG *config
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_TX_FIFO_CONFIG
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *config
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: config
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_TransmitChannelConfigure(CAN_FIFO_CHANNEL channel,
                                            CAN_TX_FIFO_CONFIG *config);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_TransmitChannelConfigure(CAN_FIFO_CHANNEL channel,
                                            CAN_TX_FIFO_CONFIG *config)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_TransmitChannelConfigure
|â€”â€”â€”â€”Node:parameter_list Text: (CAN_FIFO_CHANNEL channel,
                                            CAN_TX_FIFO_CONFIG *config)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_FIFO_CHANNEL channel
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_FIFO_CHANNEL
|â€”â€”â€”â€”â€”â€”Node:identifier Text: channel
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_TX_FIFO_CONFIG *config
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_TX_FIFO_CONFIG
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *config
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: config
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t
  mcp2518fd_ReceiveChannelConfigureObjectReset(CAN_RX_FIFO_CONFIG *config);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_ReceiveChannelConfigureObjectReset(CAN_RX_FIFO_CONFIG *config)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_ReceiveChannelConfigureObjectReset
|â€”â€”â€”â€”Node:parameter_list Text: (CAN_RX_FIFO_CONFIG *config)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_RX_FIFO_CONFIG *config
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_RX_FIFO_CONFIG
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *config
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: config
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_ReceiveChannelConfigure(CAN_FIFO_CHANNEL channel,
                                           CAN_RX_FIFO_CONFIG *config);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_ReceiveChannelConfigure(CAN_FIFO_CHANNEL channel,
                                           CAN_RX_FIFO_CONFIG *config)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_ReceiveChannelConfigure
|â€”â€”â€”â€”Node:parameter_list Text: (CAN_FIFO_CHANNEL channel,
                                           CAN_RX_FIFO_CONFIG *config)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_FIFO_CHANNEL channel
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_FIFO_CHANNEL
|â€”â€”â€”â€”â€”â€”Node:identifier Text: channel
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_RX_FIFO_CONFIG *config
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_RX_FIFO_CONFIG
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *config
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: config
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_FilterObjectConfigure(CAN_FILTER filter,
                                         CAN_FILTEROBJ_ID *id);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_FilterObjectConfigure(CAN_FILTER filter,
                                         CAN_FILTEROBJ_ID *id)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_FilterObjectConfigure
|â€”â€”â€”â€”Node:parameter_list Text: (CAN_FILTER filter,
                                         CAN_FILTEROBJ_ID *id)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_FILTER filter
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_FILTER
|â€”â€”â€”â€”â€”â€”Node:identifier Text: filter
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_FILTEROBJ_ID *id
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_FILTEROBJ_ID
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *id
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: id
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_FilterMaskConfigure(CAN_FILTER filter, CAN_MASKOBJ_ID *mask);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_FilterMaskConfigure(CAN_FILTER filter, CAN_MASKOBJ_ID *mask)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_FilterMaskConfigure
|â€”â€”â€”â€”Node:parameter_list Text: (CAN_FILTER filter, CAN_MASKOBJ_ID *mask)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_FILTER filter
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_FILTER
|â€”â€”â€”â€”â€”â€”Node:identifier Text: filter
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_MASKOBJ_ID *mask
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_MASKOBJ_ID
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *mask
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: mask
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_FilterToFifoLink(CAN_FILTER filter, CAN_FIFO_CHANNEL channel,
                                    bool enable);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_FilterToFifoLink(CAN_FILTER filter, CAN_FIFO_CHANNEL channel,
                                    bool enable)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_FilterToFifoLink
|â€”â€”â€”â€”Node:parameter_list Text: (CAN_FILTER filter, CAN_FIFO_CHANNEL channel,
                                    bool enable)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_FILTER filter
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_FILTER
|â€”â€”â€”â€”â€”â€”Node:identifier Text: filter
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_FIFO_CHANNEL channel
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_FIFO_CHANNEL
|â€”â€”â€”â€”â€”â€”Node:identifier Text: channel
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: bool enable
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: bool
|â€”â€”â€”â€”â€”â€”Node:identifier Text: enable
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_BitTimeConfigure(MCP2518FD_BITTIME_SETUP bitTime,
                                    CAN_SSP_MODE sspMode, CAN_SYSCLK_SPEED clk);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_BitTimeConfigure(MCP2518FD_BITTIME_SETUP bitTime,
                                    CAN_SSP_MODE sspMode, CAN_SYSCLK_SPEED clk)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_BitTimeConfigure
|â€”â€”â€”â€”Node:parameter_list Text: (MCP2518FD_BITTIME_SETUP bitTime,
                                    CAN_SSP_MODE sspMode, CAN_SYSCLK_SPEED clk)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: MCP2518FD_BITTIME_SETUP bitTime
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: MCP2518FD_BITTIME_SETUP
|â€”â€”â€”â€”â€”â€”Node:identifier Text: bitTime
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_SSP_MODE sspMode
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_SSP_MODE
|â€”â€”â€”â€”â€”â€”Node:identifier Text: sspMode
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_SYSCLK_SPEED clk
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_SYSCLK_SPEED
|â€”â€”â€”â€”â€”â€”Node:identifier Text: clk
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_GpioModeConfigure(GPIO_PIN_MODE gpio0, GPIO_PIN_MODE gpio1);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_GpioModeConfigure(GPIO_PIN_MODE gpio0, GPIO_PIN_MODE gpio1)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_GpioModeConfigure
|â€”â€”â€”â€”Node:parameter_list Text: (GPIO_PIN_MODE gpio0, GPIO_PIN_MODE gpio1)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: GPIO_PIN_MODE gpio0
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: GPIO_PIN_MODE
|â€”â€”â€”â€”â€”â€”Node:identifier Text: gpio0
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: GPIO_PIN_MODE gpio1
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: GPIO_PIN_MODE
|â€”â€”â€”â€”â€”â€”Node:identifier Text: gpio1
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_TransmitChannelEventEnable(CAN_FIFO_CHANNEL channel,
                                              CAN_TX_FIFO_EVENT flags);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_TransmitChannelEventEnable(CAN_FIFO_CHANNEL channel,
                                              CAN_TX_FIFO_EVENT flags)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_TransmitChannelEventEnable
|â€”â€”â€”â€”Node:parameter_list Text: (CAN_FIFO_CHANNEL channel,
                                              CAN_TX_FIFO_EVENT flags)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_FIFO_CHANNEL channel
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_FIFO_CHANNEL
|â€”â€”â€”â€”â€”â€”Node:identifier Text: channel
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_TX_FIFO_EVENT flags
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_TX_FIFO_EVENT
|â€”â€”â€”â€”â€”â€”Node:identifier Text: flags
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_ReceiveChannelEventEnable(CAN_FIFO_CHANNEL channel,
                                             CAN_RX_FIFO_EVENT flags);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_ReceiveChannelEventEnable(CAN_FIFO_CHANNEL channel,
                                             CAN_RX_FIFO_EVENT flags)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_ReceiveChannelEventEnable
|â€”â€”â€”â€”Node:parameter_list Text: (CAN_FIFO_CHANNEL channel,
                                             CAN_RX_FIFO_EVENT flags)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_FIFO_CHANNEL channel
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_FIFO_CHANNEL
|â€”â€”â€”â€”â€”â€”Node:identifier Text: channel
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_RX_FIFO_EVENT flags
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_RX_FIFO_EVENT
|â€”â€”â€”â€”â€”â€”Node:identifier Text: flags
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_ModuleEventEnable(CAN_MODULE_EVENT flags);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_ModuleEventEnable(CAN_MODULE_EVENT flags)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_ModuleEventEnable
|â€”â€”â€”â€”Node:parameter_list Text: (CAN_MODULE_EVENT flags)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_MODULE_EVENT flags
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_MODULE_EVENT
|â€”â€”â€”â€”â€”â€”Node:identifier Text: flags
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_OperationModeSelect(CAN_OPERATION_MODE opMode);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_OperationModeSelect(CAN_OPERATION_MODE opMode)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_OperationModeSelect
|â€”â€”â€”â€”Node:parameter_list Text: (CAN_OPERATION_MODE opMode)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_OPERATION_MODE opMode
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_OPERATION_MODE
|â€”â€”â€”â€”â€”â€”Node:identifier Text: opMode
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: CAN_OPERATION_MODE mcp2518fd_OperationModeGet();
|â€”â€”â€”Node:type_identifier Text: CAN_OPERATION_MODE
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_OperationModeGet()
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_OperationModeGet
|â€”â€”â€”â€”Node:parameter_list Text: ()
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: void mcp2518fd_TransmitMessageQueue();
|â€”â€”â€”Node:primitive_type Text: void
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_TransmitMessageQueue()
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_TransmitMessageQueue
|â€”â€”â€”â€”Node:parameter_list Text: ()
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_TransmitChannelEventGet(CAN_FIFO_CHANNEL channel,
                                           CAN_TX_FIFO_EVENT *flags);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_TransmitChannelEventGet(CAN_FIFO_CHANNEL channel,
                                           CAN_TX_FIFO_EVENT *flags)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_TransmitChannelEventGet
|â€”â€”â€”â€”Node:parameter_list Text: (CAN_FIFO_CHANNEL channel,
                                           CAN_TX_FIFO_EVENT *flags)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_FIFO_CHANNEL channel
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_FIFO_CHANNEL
|â€”â€”â€”â€”â€”â€”Node:identifier Text: channel
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_TX_FIFO_EVENT *flags
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_TX_FIFO_EVENT
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *flags
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: flags
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_ErrorCountStateGet(uint8_t *tec, uint8_t *rec,
                                      CAN_ERROR_STATE *flags);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_ErrorCountStateGet(uint8_t *tec, uint8_t *rec,
                                      CAN_ERROR_STATE *flags)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_ErrorCountStateGet
|â€”â€”â€”â€”Node:parameter_list Text: (uint8_t *tec, uint8_t *rec,
                                      CAN_ERROR_STATE *flags)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint8_t *tec
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint8_t
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *tec
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: tec
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint8_t *rec
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint8_t
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *rec
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: rec
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_ERROR_STATE *flags
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_ERROR_STATE
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *flags
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: flags
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_TransmitChannelLoad(CAN_FIFO_CHANNEL channel,
                                       CAN_TX_MSGOBJ *txObj, uint8_t *txd,
                                       uint32_t txdNumBytes, bool flush);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_TransmitChannelLoad(CAN_FIFO_CHANNEL channel,
                                       CAN_TX_MSGOBJ *txObj, uint8_t *txd,
                                       uint32_t txdNumBytes, bool flush)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_TransmitChannelLoad
|â€”â€”â€”â€”Node:parameter_list Text: (CAN_FIFO_CHANNEL channel,
                                       CAN_TX_MSGOBJ *txObj, uint8_t *txd,
                                       uint32_t txdNumBytes, bool flush)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_FIFO_CHANNEL channel
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_FIFO_CHANNEL
|â€”â€”â€”â€”â€”â€”Node:identifier Text: channel
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_TX_MSGOBJ *txObj
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_TX_MSGOBJ
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *txObj
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: txObj
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint8_t *txd
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint8_t
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *txd
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: txd
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint32_t txdNumBytes
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint32_t
|â€”â€”â€”â€”â€”â€”Node:identifier Text: txdNumBytes
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: bool flush
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: bool
|â€”â€”â€”â€”â€”â€”Node:identifier Text: flush
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_ReceiveChannelEventGet(CAN_FIFO_CHANNEL channel,
                                          CAN_RX_FIFO_EVENT *flags);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_ReceiveChannelEventGet(CAN_FIFO_CHANNEL channel,
                                          CAN_RX_FIFO_EVENT *flags)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_ReceiveChannelEventGet
|â€”â€”â€”â€”Node:parameter_list Text: (CAN_FIFO_CHANNEL channel,
                                          CAN_RX_FIFO_EVENT *flags)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_FIFO_CHANNEL channel
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_FIFO_CHANNEL
|â€”â€”â€”â€”â€”â€”Node:identifier Text: channel
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_RX_FIFO_EVENT *flags
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_RX_FIFO_EVENT
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *flags
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: flags
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_ReceiveMessageGet(CAN_FIFO_CHANNEL channel,
                                     CAN_RX_MSGOBJ *rxObj, uint8_t *rxd,
                                     uint8_t nBytes);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_ReceiveMessageGet(CAN_FIFO_CHANNEL channel,
                                     CAN_RX_MSGOBJ *rxObj, uint8_t *rxd,
                                     uint8_t nBytes)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_ReceiveMessageGet
|â€”â€”â€”â€”Node:parameter_list Text: (CAN_FIFO_CHANNEL channel,
                                     CAN_RX_MSGOBJ *rxObj, uint8_t *rxd,
                                     uint8_t nBytes)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_FIFO_CHANNEL channel
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_FIFO_CHANNEL
|â€”â€”â€”â€”â€”â€”Node:identifier Text: channel
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_RX_MSGOBJ *rxObj
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_RX_MSGOBJ
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *rxObj
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: rxObj
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint8_t *rxd
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint8_t
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *rxd
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: rxd
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint8_t nBytes
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint8_t
|â€”â€”â€”â€”â€”â€”Node:identifier Text: nBytes
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_ReceiveChannelUpdate(CAN_FIFO_CHANNEL channel);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_ReceiveChannelUpdate(CAN_FIFO_CHANNEL channel)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_ReceiveChannelUpdate
|â€”â€”â€”â€”Node:parameter_list Text: (CAN_FIFO_CHANNEL channel)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_FIFO_CHANNEL channel
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_FIFO_CHANNEL
|â€”â€”â€”â€”â€”â€”Node:identifier Text: channel
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_TransmitChannelUpdate(CAN_FIFO_CHANNEL channel, bool flush);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_TransmitChannelUpdate(CAN_FIFO_CHANNEL channel, bool flush)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_TransmitChannelUpdate
|â€”â€”â€”â€”Node:parameter_list Text: (CAN_FIFO_CHANNEL channel, bool flush)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_FIFO_CHANNEL channel
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_FIFO_CHANNEL
|â€”â€”â€”â€”â€”â€”Node:identifier Text: channel
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: bool flush
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: bool
|â€”â€”â€”â€”â€”â€”Node:identifier Text: flush
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_ReceiveChannelStatusGet(CAN_FIFO_CHANNEL channel,
                                           CAN_RX_FIFO_STATUS *status);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_ReceiveChannelStatusGet(CAN_FIFO_CHANNEL channel,
                                           CAN_RX_FIFO_STATUS *status)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_ReceiveChannelStatusGet
|â€”â€”â€”â€”Node:parameter_list Text: (CAN_FIFO_CHANNEL channel,
                                           CAN_RX_FIFO_STATUS *status)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_FIFO_CHANNEL channel
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_FIFO_CHANNEL
|â€”â€”â€”â€”â€”â€”Node:identifier Text: channel
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_RX_FIFO_STATUS *status
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_RX_FIFO_STATUS
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *status
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: status
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_ErrorStateGet(CAN_ERROR_STATE *flags);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_ErrorStateGet(CAN_ERROR_STATE *flags)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_ErrorStateGet
|â€”â€”â€”â€”Node:parameter_list Text: (CAN_ERROR_STATE *flags)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_ERROR_STATE *flags
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_ERROR_STATE
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *flags
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: flags
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_ModuleEventRxCodeGet(CAN_RXCODE *rxCode);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_ModuleEventRxCodeGet(CAN_RXCODE *rxCode)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_ModuleEventRxCodeGet
|â€”â€”â€”â€”Node:parameter_list Text: (CAN_RXCODE *rxCode)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_RXCODE *rxCode
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_RXCODE
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *rxCode
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: rxCode
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_ModuleEventTxCodeGet(CAN_TXCODE *txCode);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_ModuleEventTxCodeGet(CAN_TXCODE *txCode)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_ModuleEventTxCodeGet
|â€”â€”â€”â€”Node:parameter_list Text: (CAN_TXCODE *txCode)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_TXCODE *txCode
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_TXCODE
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *txCode
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: txCode
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_TransmitChannelEventAttemptClear(CAN_FIFO_CHANNEL channel);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_TransmitChannelEventAttemptClear(CAN_FIFO_CHANNEL channel)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_TransmitChannelEventAttemptClear
|â€”â€”â€”â€”Node:parameter_list Text: (CAN_FIFO_CHANNEL channel)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_FIFO_CHANNEL channel
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_FIFO_CHANNEL
|â€”â€”â€”â€”â€”â€”Node:identifier Text: channel
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_LowPowerModeEnable();
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_LowPowerModeEnable()
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_LowPowerModeEnable
|â€”â€”â€”â€”Node:parameter_list Text: ()
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_LowPowerModeDisable();
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_LowPowerModeDisable()
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_LowPowerModeDisable
|â€”â€”â€”â€”Node:parameter_list Text: ()
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_ReadByte(uint16_t address, uint8_t *rxd);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_ReadByte(uint16_t address, uint8_t *rxd)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_ReadByte
|â€”â€”â€”â€”Node:parameter_list Text: (uint16_t address, uint8_t *rxd)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint16_t address
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint16_t
|â€”â€”â€”â€”â€”â€”Node:identifier Text: address
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint8_t *rxd
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint8_t
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *rxd
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: rxd
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_WriteByte(uint16_t address, uint8_t txd);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_WriteByte(uint16_t address, uint8_t txd)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_WriteByte
|â€”â€”â€”â€”Node:parameter_list Text: (uint16_t address, uint8_t txd)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint16_t address
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint16_t
|â€”â€”â€”â€”â€”â€”Node:identifier Text: address
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint8_t txd
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint8_t
|â€”â€”â€”â€”â€”â€”Node:identifier Text: txd
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_ReadWord(uint16_t address, uint32_t *rxd);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_ReadWord(uint16_t address, uint32_t *rxd)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_ReadWord
|â€”â€”â€”â€”Node:parameter_list Text: (uint16_t address, uint32_t *rxd)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint16_t address
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint16_t
|â€”â€”â€”â€”â€”â€”Node:identifier Text: address
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint32_t *rxd
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint32_t
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *rxd
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: rxd
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_WriteWord(uint16_t address, uint32_t txd);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_WriteWord(uint16_t address, uint32_t txd)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_WriteWord
|â€”â€”â€”â€”Node:parameter_list Text: (uint16_t address, uint32_t txd)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint16_t address
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint16_t
|â€”â€”â€”â€”â€”â€”Node:identifier Text: address
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint32_t txd
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint32_t
|â€”â€”â€”â€”â€”â€”Node:identifier Text: txd
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_ReadHalfWord(uint16_t address, uint16_t *rxd);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_ReadHalfWord(uint16_t address, uint16_t *rxd)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_ReadHalfWord
|â€”â€”â€”â€”Node:parameter_list Text: (uint16_t address, uint16_t *rxd)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint16_t address
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint16_t
|â€”â€”â€”â€”â€”â€”Node:identifier Text: address
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint16_t *rxd
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint16_t
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *rxd
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: rxd
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_WriteHalfWord(uint16_t address, uint16_t txd);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_WriteHalfWord(uint16_t address, uint16_t txd)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_WriteHalfWord
|â€”â€”â€”â€”Node:parameter_list Text: (uint16_t address, uint16_t txd)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint16_t address
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint16_t
|â€”â€”â€”â€”â€”â€”Node:identifier Text: address
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint16_t txd
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint16_t
|â€”â€”â€”â€”â€”â€”Node:identifier Text: txd
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_ReadByteArray(uint16_t address, uint8_t *rxd,
                                 uint16_t nBytes);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_ReadByteArray(uint16_t address, uint8_t *rxd,
                                 uint16_t nBytes)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_ReadByteArray
|â€”â€”â€”â€”Node:parameter_list Text: (uint16_t address, uint8_t *rxd,
                                 uint16_t nBytes)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint16_t address
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint16_t
|â€”â€”â€”â€”â€”â€”Node:identifier Text: address
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint8_t *rxd
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint8_t
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *rxd
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: rxd
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint16_t nBytes
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint16_t
|â€”â€”â€”â€”â€”â€”Node:identifier Text: nBytes
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_WriteByteArray(uint16_t address, uint8_t *txd,
                                  uint16_t nBytes);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_WriteByteArray(uint16_t address, uint8_t *txd,
                                  uint16_t nBytes)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_WriteByteArray
|â€”â€”â€”â€”Node:parameter_list Text: (uint16_t address, uint8_t *txd,
                                  uint16_t nBytes)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint16_t address
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint16_t
|â€”â€”â€”â€”â€”â€”Node:identifier Text: address
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint8_t *txd
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint8_t
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *txd
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: txd
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint16_t nBytes
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint16_t
|â€”â€”â€”â€”â€”â€”Node:identifier Text: nBytes
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_WriteByteSafe(uint16_t address, uint8_t txd);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_WriteByteSafe(uint16_t address, uint8_t txd)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_WriteByteSafe
|â€”â€”â€”â€”Node:parameter_list Text: (uint16_t address, uint8_t txd)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint16_t address
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint16_t
|â€”â€”â€”â€”â€”â€”Node:identifier Text: address
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint8_t txd
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint8_t
|â€”â€”â€”â€”â€”â€”Node:identifier Text: txd
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_WriteWordSafe(uint16_t address, uint32_t txd);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_WriteWordSafe(uint16_t address, uint32_t txd)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_WriteWordSafe
|â€”â€”â€”â€”Node:parameter_list Text: (uint16_t address, uint32_t txd)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint16_t address
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint16_t
|â€”â€”â€”â€”â€”â€”Node:identifier Text: address
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint32_t txd
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint32_t
|â€”â€”â€”â€”â€”â€”Node:identifier Text: txd
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_ReadByteArrayWithCRC(uint16_t address, uint8_t *rxd,
                                        uint16_t nBytes, bool fromRam,
                                        bool *crcIsCorrect);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_ReadByteArrayWithCRC(uint16_t address, uint8_t *rxd,
                                        uint16_t nBytes, bool fromRam,
                                        bool *crcIsCorrect)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_ReadByteArrayWithCRC
|â€”â€”â€”â€”Node:parameter_list Text: (uint16_t address, uint8_t *rxd,
                                        uint16_t nBytes, bool fromRam,
                                        bool *crcIsCorrect)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint16_t address
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint16_t
|â€”â€”â€”â€”â€”â€”Node:identifier Text: address
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint8_t *rxd
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint8_t
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *rxd
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: rxd
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint16_t nBytes
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint16_t
|â€”â€”â€”â€”â€”â€”Node:identifier Text: nBytes
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: bool fromRam
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: bool
|â€”â€”â€”â€”â€”â€”Node:identifier Text: fromRam
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: bool *crcIsCorrect
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: bool
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *crcIsCorrect
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: crcIsCorrect
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_WriteByteArrayWithCRC(uint16_t address, uint8_t *txd,
                                         uint16_t nBytes, bool fromRam);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_WriteByteArrayWithCRC(uint16_t address, uint8_t *txd,
                                         uint16_t nBytes, bool fromRam)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_WriteByteArrayWithCRC
|â€”â€”â€”â€”Node:parameter_list Text: (uint16_t address, uint8_t *txd,
                                         uint16_t nBytes, bool fromRam)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint16_t address
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint16_t
|â€”â€”â€”â€”â€”â€”Node:identifier Text: address
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint8_t *txd
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint8_t
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *txd
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: txd
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint16_t nBytes
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint16_t
|â€”â€”â€”â€”â€”â€”Node:identifier Text: nBytes
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: bool fromRam
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: bool
|â€”â€”â€”â€”â€”â€”Node:identifier Text: fromRam
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_ReadWordArray(uint16_t address, uint32_t *rxd,
                                 uint16_t nWords);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_ReadWordArray(uint16_t address, uint32_t *rxd,
                                 uint16_t nWords)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_ReadWordArray
|â€”â€”â€”â€”Node:parameter_list Text: (uint16_t address, uint32_t *rxd,
                                 uint16_t nWords)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint16_t address
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint16_t
|â€”â€”â€”â€”â€”â€”Node:identifier Text: address
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint32_t *rxd
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint32_t
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *rxd
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: rxd
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint16_t nWords
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint16_t
|â€”â€”â€”â€”â€”â€”Node:identifier Text: nWords
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_WriteWordArray(uint16_t address, uint32_t *txd,
                                  uint16_t nWords);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_WriteWordArray(uint16_t address, uint32_t *txd,
                                  uint16_t nWords)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_WriteWordArray
|â€”â€”â€”â€”Node:parameter_list Text: (uint16_t address, uint32_t *txd,
                                  uint16_t nWords)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint16_t address
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint16_t
|â€”â€”â€”â€”â€”â€”Node:identifier Text: address
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint32_t *txd
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint32_t
|â€”â€”â€”â€”â€”â€”Node:pointer_declarator Text: *txd
|â€”â€”â€”â€”â€”â€”â€”Node:* Text: *
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: txd
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: uint16_t nWords
|â€”â€”â€”â€”â€”â€”Node:primitive_type Text: uint16_t
|â€”â€”â€”â€”â€”â€”Node:identifier Text: nWords
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:labeled_statement Text: private:
  int8_t
  mcp2518fd_BitTimeConfigureNominal40MHz(MCP2518FD_BITTIME_SETUP bitTime);
|â€”â€”â€”Node:statement_identifier Text: private
|â€”â€”â€”Node:: Text: :
|â€”â€”â€”Node:declaration Text: int8_t
  mcp2518fd_BitTimeConfigureNominal40MHz(MCP2518FD_BITTIME_SETUP bitTime);
|â€”â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”â€”Node:function_declarator Text: mcp2518fd_BitTimeConfigureNominal40MHz(MCP2518FD_BITTIME_SETUP bitTime)
|â€”â€”â€”â€”â€”Node:identifier Text: mcp2518fd_BitTimeConfigureNominal40MHz
|â€”â€”â€”â€”â€”Node:parameter_list Text: (MCP2518FD_BITTIME_SETUP bitTime)
|â€”â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”â€”Node:parameter_declaration Text: MCP2518FD_BITTIME_SETUP bitTime
|â€”â€”â€”â€”â€”â€”â€”Node:type_identifier Text: MCP2518FD_BITTIME_SETUP
|â€”â€”â€”â€”â€”â€”â€”Node:identifier Text: bitTime
|â€”â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_BitTimeConfigureData40MHz(MCP2518FD_BITTIME_SETUP bitTime,
                                             CAN_SSP_MODE sspMode);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_BitTimeConfigureData40MHz(MCP2518FD_BITTIME_SETUP bitTime,
                                             CAN_SSP_MODE sspMode)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_BitTimeConfigureData40MHz
|â€”â€”â€”â€”Node:parameter_list Text: (MCP2518FD_BITTIME_SETUP bitTime,
                                             CAN_SSP_MODE sspMode)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: MCP2518FD_BITTIME_SETUP bitTime
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: MCP2518FD_BITTIME_SETUP
|â€”â€”â€”â€”â€”â€”Node:identifier Text: bitTime
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_SSP_MODE sspMode
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_SSP_MODE
|â€”â€”â€”â€”â€”â€”Node:identifier Text: sspMode
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t
  mcp2518fd_BitTimeConfigureNominal20MHz(MCP2518FD_BITTIME_SETUP bitTime);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_BitTimeConfigureNominal20MHz(MCP2518FD_BITTIME_SETUP bitTime)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_BitTimeConfigureNominal20MHz
|â€”â€”â€”â€”Node:parameter_list Text: (MCP2518FD_BITTIME_SETUP bitTime)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: MCP2518FD_BITTIME_SETUP bitTime
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: MCP2518FD_BITTIME_SETUP
|â€”â€”â€”â€”â€”â€”Node:identifier Text: bitTime
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_BitTimeConfigureData20MHz(MCP2518FD_BITTIME_SETUP bitTime,
                                             CAN_SSP_MODE sspMode);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_BitTimeConfigureData20MHz(MCP2518FD_BITTIME_SETUP bitTime,
                                             CAN_SSP_MODE sspMode)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_BitTimeConfigureData20MHz
|â€”â€”â€”â€”Node:parameter_list Text: (MCP2518FD_BITTIME_SETUP bitTime,
                                             CAN_SSP_MODE sspMode)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: MCP2518FD_BITTIME_SETUP bitTime
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: MCP2518FD_BITTIME_SETUP
|â€”â€”â€”â€”â€”â€”Node:identifier Text: bitTime
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_SSP_MODE sspMode
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_SSP_MODE
|â€”â€”â€”â€”â€”â€”Node:identifier Text: sspMode
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t
  mcp2518fd_BitTimeConfigureNominal10MHz(MCP2518FD_BITTIME_SETUP bitTime);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_BitTimeConfigureNominal10MHz(MCP2518FD_BITTIME_SETUP bitTime)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_BitTimeConfigureNominal10MHz
|â€”â€”â€”â€”Node:parameter_list Text: (MCP2518FD_BITTIME_SETUP bitTime)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: MCP2518FD_BITTIME_SETUP bitTime
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: MCP2518FD_BITTIME_SETUP
|â€”â€”â€”â€”â€”â€”Node:identifier Text: bitTime
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: int8_t mcp2518fd_BitTimeConfigureData10MHz(MCP2518FD_BITTIME_SETUP bitTime,
                                             CAN_SSP_MODE sspMode);
|â€”â€”â€”Node:primitive_type Text: int8_t
|â€”â€”â€”Node:function_declarator Text: mcp2518fd_BitTimeConfigureData10MHz(MCP2518FD_BITTIME_SETUP bitTime,
                                             CAN_SSP_MODE sspMode)
|â€”â€”â€”â€”Node:identifier Text: mcp2518fd_BitTimeConfigureData10MHz
|â€”â€”â€”â€”Node:parameter_list Text: (MCP2518FD_BITTIME_SETUP bitTime,
                                             CAN_SSP_MODE sspMode)
|â€”â€”â€”â€”â€”Node:( Text: (
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: MCP2518FD_BITTIME_SETUP bitTime
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: MCP2518FD_BITTIME_SETUP
|â€”â€”â€”â€”â€”â€”Node:identifier Text: bitTime
|â€”â€”â€”â€”â€”Node:, Text: ,
|â€”â€”â€”â€”â€”Node:parameter_declaration Text: CAN_SSP_MODE sspMode
|â€”â€”â€”â€”â€”â€”Node:type_identifier Text: CAN_SSP_MODE
|â€”â€”â€”â€”â€”â€”Node:identifier Text: sspMode
|â€”â€”â€”â€”â€”Node:) Text: )
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:declaration Text: byte ext_flg;
|â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”Node:identifier Text: ext_flg
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:comment
|â€”â€”Node:comment
|â€”â€”Node:declaration Text: unsigned long can_id;
|â€”â€”â€”Node:sized_type_specifier Text: unsigned long
|â€”â€”â€”â€”Node:unsigned Text: unsigned
|â€”â€”â€”â€”Node:long Text: long
|â€”â€”â€”Node:identifier Text: can_id
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:comment
|â€”â€”Node:declaration Text: byte rtr;
|â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”Node:identifier Text: rtr
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:comment
|â€”â€”Node:declaration Text: byte nReservedTx;
|â€”â€”â€”Node:type_identifier Text: byte
|â€”â€”â€”Node:identifier Text: nReservedTx
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:comment
|â€”â€”Node:declaration Text: CAN_OPERATION_MODE mcpMode = CAN_CLASSIC_MODE;
|â€”â€”â€”Node:type_identifier Text: CAN_OPERATION_MODE
|â€”â€”â€”Node:init_declarator Text: mcpMode = CAN_CLASSIC_MODE
|â€”â€”â€”â€”Node:identifier Text: mcpMode
|â€”â€”â€”â€”Node:= Text: =
|â€”â€”â€”â€”Node:identifier Text: CAN_CLASSIC_MODE
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:comment
|â€”â€”Node:ERROR Text: }
|â€”â€”â€”Node:} Text: }
|â€”â€”Node:expression_statement Text: ;
|â€”â€”â€”Node:; Text: ;
|â€”â€”Node:#endif Text: #endif
