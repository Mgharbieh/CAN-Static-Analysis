Seeed_Arduino_CAN-src\mcp2518fd_can.cpp

|Node:translation_unit
|—Node:preproc_include Text: #include "mcp2518fd_can.h"

|——Node:#include Text: #include
|——Node:string_literal Text: "mcp2518fd_can.h"
|———Node:" Text: "
|———Node:string_content Text: mcp2518fd_can.h
|———Node:" Text: "
|—Node:declaration Text: uint8_t SPICS = 0;
|——Node:primitive_type Text: uint8_t
|——Node:init_declarator Text: SPICS = 0
|———Node:identifier Text: SPICS
|———Node:= Text: =
|———Node:number_literal Text: 0
|——Node:; Text: ;
|—Node:declaration Text: SPIClass *pSPI;
|——Node:type_identifier Text: SPIClass
|——Node:pointer_declarator Text: *pSPI
|———Node:* Text: *
|———Node:identifier Text: pSPI
|——Node:; Text: ;
|—Node:declaration Text: CAN_CONFIG config;
|——Node:type_identifier Text: CAN_CONFIG
|——Node:identifier Text: config
|——Node:; Text: ;
|—Node:comment
|—Node:declaration Text: CAN_RX_FIFO_CONFIG rxConfig;
|——Node:type_identifier Text: CAN_RX_FIFO_CONFIG
|——Node:identifier Text: rxConfig
|——Node:; Text: ;
|—Node:declaration Text: REG_CiFLTOBJ fObj;
|——Node:type_identifier Text: REG_CiFLTOBJ
|——Node:identifier Text: fObj
|——Node:; Text: ;
|—Node:declaration Text: REG_CiMASK mObj;
|——Node:type_identifier Text: REG_CiMASK
|——Node:identifier Text: mObj
|——Node:; Text: ;
|—Node:declaration Text: CAN_RX_FIFO_EVENT rxFlags;
|——Node:type_identifier Text: CAN_RX_FIFO_EVENT
|——Node:identifier Text: rxFlags
|——Node:; Text: ;
|—Node:declaration Text: CAN_RX_MSGOBJ rxObj;
|——Node:type_identifier Text: CAN_RX_MSGOBJ
|——Node:identifier Text: rxObj
|——Node:; Text: ;
|—Node:declaration Text: uint8_t rxd[MAX_DATA_BYTES];
|——Node:primitive_type Text: uint8_t
|——Node:array_declarator Text: rxd[MAX_DATA_BYTES]
|———Node:identifier Text: rxd
|———Node:[ Text: [
|———Node:identifier Text: MAX_DATA_BYTES
|———Node:] Text: ]
|——Node:; Text: ;
|—Node:comment
|—Node:declaration Text: CAN_TX_FIFO_CONFIG txConfig;
|——Node:type_identifier Text: CAN_TX_FIFO_CONFIG
|——Node:identifier Text: txConfig
|——Node:; Text: ;
|—Node:declaration Text: CAN_TX_FIFO_EVENT txFlags;
|——Node:type_identifier Text: CAN_TX_FIFO_EVENT
|——Node:identifier Text: txFlags
|——Node:; Text: ;
|—Node:declaration Text: CAN_TX_MSGOBJ txObj;
|——Node:type_identifier Text: CAN_TX_MSGOBJ
|——Node:identifier Text: txObj
|——Node:; Text: ;
|—Node:declaration Text: uint8_t txd[MAX_DATA_BYTES];
|——Node:primitive_type Text: uint8_t
|——Node:array_declarator Text: txd[MAX_DATA_BYTES]
|———Node:identifier Text: txd
|———Node:[ Text: [
|———Node:identifier Text: MAX_DATA_BYTES
|———Node:] Text: ]
|——Node:; Text: ;
|—Node:declaration Text: CAN_TX_QUEUE_CONFIG txqueConfig;
|——Node:type_identifier Text: CAN_TX_QUEUE_CONFIG
|——Node:identifier Text: txqueConfig
|——Node:; Text: ;
|—Node:comment
|—Node:preproc_def Text: #define TX_REQUEST_ID 0x300

|——Node:#define Text: #define
|——Node:identifier Text: TX_REQUEST_ID
|——Node:preproc_arg Text: 0x300
|—Node:preproc_def Text: #define TX_RESPONSE_ID 0x301

|——Node:#define Text: #define
|——Node:identifier Text: TX_RESPONSE_ID
|——Node:preproc_arg Text: 0x301
|—Node:preproc_def Text: #define BUTTON_STATUS_ID 0x201

|——Node:#define Text: #define
|——Node:identifier Text: BUTTON_STATUS_ID
|——Node:preproc_arg Text: 0x201
|—Node:preproc_def Text: #define LED_STATUS_ID 0x200

|——Node:#define Text: #define
|——Node:identifier Text: LED_STATUS_ID
|——Node:preproc_arg Text: 0x200
|—Node:preproc_def Text: #define PAYLOAD_ID 0x101

|——Node:#define Text: #define
|——Node:identifier Text: PAYLOAD_ID
|——Node:preproc_arg Text: 0x101
|—Node:preproc_def Text: #define MAX_TXQUEUE_ATTEMPTS 50

|——Node:#define Text: #define
|——Node:identifier Text: MAX_TXQUEUE_ATTEMPTS
|——Node:preproc_arg Text: 50
|—Node:comment
|—Node:preproc_def Text: #define APP_TX_FIFO CAN_FIFO_CH2

|——Node:#define Text: #define
|——Node:identifier Text: APP_TX_FIFO
|——Node:preproc_arg Text: CAN_FIFO_CH2
|—Node:comment
|—Node:preproc_def Text: #define APP_RX_FIFO CAN_FIFO_CH1

|——Node:#define Text: #define
|——Node:identifier Text: APP_RX_FIFO
|——Node:preproc_arg Text: CAN_FIFO_CH1
|—Node:comment
|—Node:preproc_def Text: #define MAX_DATA_BYTES 64

|——Node:#define Text: #define
|——Node:identifier Text: MAX_DATA_BYTES
|——Node:preproc_arg Text: 64
|—Node:declaration Text: CAN_BUS_DIAGNOSTIC busDiagnostics;
|——Node:type_identifier Text: CAN_BUS_DIAGNOSTIC
|——Node:identifier Text: busDiagnostics
|——Node:; Text: ;
|—Node:declaration Text: uint8_t tec;
|——Node:primitive_type Text: uint8_t
|——Node:identifier Text: tec
|——Node:; Text: ;
|—Node:declaration Text: uint8_t rec;
|——Node:primitive_type Text: uint8_t
|——Node:identifier Text: rec
|——Node:; Text: ;
|—Node:declaration Text: CAN_ERROR_STATE errorFlags;
|——Node:type_identifier Text: CAN_ERROR_STATE
|——Node:identifier Text: errorFlags
|——Node:; Text: ;
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:declaration Text: uint8_t spiTransmitBuffer[SPI_DEFAULT_BUFFER_LENGTH + 2];
|——Node:primitive_type Text: uint8_t
|——Node:array_declarator Text: spiTransmitBuffer[SPI_DEFAULT_BUFFER_LENGTH + 2]
|———Node:identifier Text: spiTransmitBuffer
|———Node:[ Text: [
|———Node:binary_expression Text: SPI_DEFAULT_BUFFER_LENGTH + 2
|————Node:identifier Text: SPI_DEFAULT_BUFFER_LENGTH
|————Node:+ Text: +
|————Node:number_literal Text: 2
|———Node:] Text: ]
|——Node:; Text: ;
|—Node:comment
|—Node:declaration Text: uint8_t spiReceiveBuffer[SPI_DEFAULT_BUFFER_LENGTH];
|——Node:primitive_type Text: uint8_t
|——Node:array_declarator Text: spiReceiveBuffer[SPI_DEFAULT_BUFFER_LENGTH]
|———Node:identifier Text: spiReceiveBuffer
|———Node:[ Text: [
|———Node:identifier Text: SPI_DEFAULT_BUFFER_LENGTH
|———Node:] Text: ]
|——Node:; Text: ;
|—Node:function_definition Text: uint16_t DRV_CANFDSPI_CalculateCRC16(uint8_t *data, uint16_t size) {
  uint16_t init = CRCBASE;
  uint8_t index;

  while (size-- != 0) {
    index = ((uint8_t *)&init)[CRCUPPER] ^ *data++;
    init = (init << 8) ^ crc16_table[index];
  }

  return init;
}
|——Node:primitive_type Text: uint16_t
|——Node:function_declarator Text: DRV_CANFDSPI_CalculateCRC16(uint8_t *data, uint16_t size)
|———Node:identifier Text: DRV_CANFDSPI_CalculateCRC16
|———Node:parameter_list Text: (uint8_t *data, uint16_t size)
|————Node:( Text: (
|————Node:parameter_declaration Text: uint8_t *data
|—————Node:primitive_type Text: uint8_t
|—————Node:pointer_declarator Text: *data
|——————Node:* Text: *
|——————Node:identifier Text: data
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint16_t size
|—————Node:primitive_type Text: uint16_t
|—————Node:identifier Text: size
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint16_t init = CRCBASE;
  uint8_t index;

  while (size-- != 0) {
    index = ((uint8_t *)&init)[CRCUPPER] ^ *data++;
    init = (init << 8) ^ crc16_table[index];
  }

  return init;
}
|———Node:{ Text: {
|———Node:declaration Text: uint16_t init = CRCBASE;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: init = CRCBASE
|—————Node:identifier Text: init
|—————Node:= Text: =
|—————Node:identifier Text: CRCBASE
|————Node:; Text: ;
|———Node:declaration Text: uint8_t index;
|————Node:primitive_type Text: uint8_t
|————Node:identifier Text: index
|————Node:; Text: ;
|———Node:while_statement Text: while (size-- != 0) {
    index = ((uint8_t *)&init)[CRCUPPER] ^ *data++;
    init = (init << 8) ^ crc16_table[index];
  }
|————Node:while Text: while
|————Node:condition_clause Text: (size-- != 0)
|—————Node:( Text: (
|—————Node:binary_expression Text: size-- != 0
|——————Node:update_expression Text: size--
|———————Node:identifier Text: size
|———————Node:-- Text: --
|——————Node:!= Text: !=
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {
    index = ((uint8_t *)&init)[CRCUPPER] ^ *data++;
    init = (init << 8) ^ crc16_table[index];
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: index = ((uint8_t *)&init)[CRCUPPER] ^ *data++;
|——————Node:assignment_expression Text: index = ((uint8_t *)&init)[CRCUPPER] ^ *data++
|———————Node:identifier Text: index
|———————Node:= Text: =
|———————Node:binary_expression Text: ((uint8_t *)&init)[CRCUPPER] ^ *data++
|————————Node:subscript_expression Text: ((uint8_t *)&init)[CRCUPPER]
|—————————Node:parenthesized_expression Text: ((uint8_t *)&init)
|——————————Node:( Text: (
|——————————Node:cast_expression Text: (uint8_t *)&init
|———————————Node:( Text: (
|———————————Node:type_descriptor Text: uint8_t *
|————————————Node:primitive_type Text: uint8_t
|————————————Node:abstract_pointer_declarator Text: *
|—————————————Node:* Text: *
|———————————Node:) Text: )
|———————————Node:pointer_expression Text: &init
|————————————Node:& Text: &
|————————————Node:identifier Text: init
|——————————Node:) Text: )
|—————————Node:subscript_argument_list Text: [CRCUPPER]
|——————————Node:[ Text: [
|——————————Node:identifier Text: CRCUPPER
|——————————Node:] Text: ]
|————————Node:^ Text: ^
|————————Node:pointer_expression Text: *data++
|—————————Node:* Text: *
|—————————Node:update_expression Text: data++
|——————————Node:identifier Text: data
|——————————Node:++ Text: ++
|——————Node:; Text: ;
|—————Node:expression_statement Text: init = (init << 8) ^ crc16_table[index];
|——————Node:assignment_expression Text: init = (init << 8) ^ crc16_table[index]
|———————Node:identifier Text: init
|———————Node:= Text: =
|———————Node:binary_expression Text: (init << 8) ^ crc16_table[index]
|————————Node:parenthesized_expression Text: (init << 8)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: init << 8
|——————————Node:identifier Text: init
|——————————Node:<< Text: <<
|——————————Node:number_literal Text: 8
|—————————Node:) Text: )
|————————Node:^ Text: ^
|————————Node:subscript_expression Text: crc16_table[index]
|—————————Node:identifier Text: crc16_table
|—————————Node:subscript_argument_list Text: [index]
|——————————Node:[ Text: [
|——————————Node:identifier Text: index
|——————————Node:] Text: ]
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return init;
|————Node:return Text: return
|————Node:identifier Text: init
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: byte mcp2518fd::begin(byte speedset, const byte clockset) {
  SPI.begin();
  byte res = mcp2518fd_init(speedset, clockset);

  return res;
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: mcp2518fd::begin(byte speedset, const byte clockset)
|———Node:qualified_identifier Text: mcp2518fd::begin
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: begin
|———Node:parameter_list Text: (byte speedset, const byte clockset)
|————Node:( Text: (
|————Node:parameter_declaration Text: byte speedset
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: speedset
|————Node:, Text: ,
|————Node:parameter_declaration Text: const byte clockset
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: clockset
|————Node:) Text: )
|——Node:compound_statement Text: {
  SPI.begin();
  byte res = mcp2518fd_init(speedset, clockset);

  return res;
}
|———Node:{ Text: {
|———Node:expression_statement Text: SPI.begin();
|————Node:call_expression Text: SPI.begin()
|—————Node:field_expression Text: SPI.begin
|——————Node:identifier Text: SPI
|——————Node:. Text: .
|——————Node:field_identifier Text: begin
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: byte res = mcp2518fd_init(speedset, clockset);
|————Node:type_identifier Text: byte
|————Node:init_declarator Text: res = mcp2518fd_init(speedset, clockset)
|—————Node:identifier Text: res
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_init(speedset, clockset)
|——————Node:identifier Text: mcp2518fd_init
|——————Node:argument_list Text: (speedset, clockset)
|———————Node:( Text: (
|———————Node:identifier Text: speedset
|———————Node:, Text: ,
|———————Node:identifier Text: clockset
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return res;
|————Node:return Text: return
|————Node:identifier Text: res
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_reset(void) {
  uint16_t spiTransferSize = 2;
  int8_t spiTransferError = 0;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t)(cINSTRUCTION_RESET << 4);
  spiTransmitBuffer[1] = 0;

#ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
  MCP2518fd_SELECT();
  spi_readwrite(spiTransmitBuffer[0]);
  spi_readwrite(spiTransmitBuffer[1]);
  MCP2518fd_UNSELECT();
#ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
  delay(10);

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_reset(void)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_reset
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_reset
|———Node:parameter_list Text: (void)
|————Node:( Text: (
|————Node:parameter_declaration Text: void
|—————Node:primitive_type Text: void
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint16_t spiTransferSize = 2;
  int8_t spiTransferError = 0;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t)(cINSTRUCTION_RESET << 4);
  spiTransmitBuffer[1] = 0;

#ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
  MCP2518fd_SELECT();
  spi_readwrite(spiTransmitBuffer[0]);
  spi_readwrite(spiTransmitBuffer[1]);
  MCP2518fd_UNSELECT();
#ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
  delay(10);

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: uint16_t spiTransferSize = 2;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: spiTransferSize = 2
|—————Node:identifier Text: spiTransferSize
|—————Node:= Text: =
|—————Node:number_literal Text: 2
|————Node:; Text: ;
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: spiTransmitBuffer[0] = (uint8_t)(cINSTRUCTION_RESET << 4);
|————Node:assignment_expression Text: spiTransmitBuffer[0] = (uint8_t)(cINSTRUCTION_RESET << 4)
|—————Node:subscript_expression Text: spiTransmitBuffer[0]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:cast_expression Text: (uint8_t)(cINSTRUCTION_RESET << 4)
|——————Node:( Text: (
|——————Node:type_descriptor Text: uint8_t
|———————Node:primitive_type Text: uint8_t
|——————Node:) Text: )
|——————Node:parenthesized_expression Text: (cINSTRUCTION_RESET << 4)
|———————Node:( Text: (
|———————Node:binary_expression Text: cINSTRUCTION_RESET << 4
|————————Node:identifier Text: cINSTRUCTION_RESET
|————————Node:<< Text: <<
|————————Node:number_literal Text: 4
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransmitBuffer[1] = 0;
|————Node:assignment_expression Text: spiTransmitBuffer[1] = 0
|—————Node:subscript_expression Text: spiTransmitBuffer[1]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [1]
|———————Node:[ Text: [
|———————Node:number_literal Text: 1
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: SPI_HAS_TRANSACTION
|————Node:expression_statement Text: SPI_BEGIN();
|—————Node:call_expression Text: SPI_BEGIN()
|——————Node:identifier Text: SPI_BEGIN
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: MCP2518fd_SELECT();
|————Node:call_expression Text: MCP2518fd_SELECT()
|—————Node:identifier Text: MCP2518fd_SELECT
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[0]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[0])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[0])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[0]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [0]
|————————Node:[ Text: [
|————————Node:number_literal Text: 0
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[1]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[1])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[1])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[1]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [1]
|————————Node:[ Text: [
|————————Node:number_literal Text: 1
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: MCP2518fd_UNSELECT();
|————Node:call_expression Text: MCP2518fd_UNSELECT()
|—————Node:identifier Text: MCP2518fd_UNSELECT
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: SPI_HAS_TRANSACTION
|————Node:expression_statement Text: SPI_END();
|—————Node:call_expression Text: SPI_END()
|——————Node:identifier Text: SPI_END
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: delay(10);
|————Node:call_expression Text: delay(10)
|—————Node:identifier Text: delay
|—————Node:argument_list Text: (10)
|——————Node:( Text: (
|——————Node:number_literal Text: 10
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_ReadByte(uint16_t address, uint8_t *rxd) {
  uint16_t spiTransferSize = 3;
  int8_t spiTransferError = 0;

  // Compose command
  spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
  spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);
  spiTransmitBuffer[2] = 0;

#ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
  MCP2518fd_SELECT();
  spi_readwrite(spiTransmitBuffer[0]);
  spi_readwrite(spiTransmitBuffer[1]);
  spiReceiveBuffer[2] = spi_readwrite(0x00);
  MCP2518fd_UNSELECT();
#ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
  delay(10);
  // Update data
  *rxd = spiReceiveBuffer[2];

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_ReadByte(uint16_t address, uint8_t *rxd)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_ReadByte
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_ReadByte
|———Node:parameter_list Text: (uint16_t address, uint8_t *rxd)
|————Node:( Text: (
|————Node:parameter_declaration Text: uint16_t address
|—————Node:primitive_type Text: uint16_t
|—————Node:identifier Text: address
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint8_t *rxd
|—————Node:primitive_type Text: uint8_t
|—————Node:pointer_declarator Text: *rxd
|——————Node:* Text: *
|——————Node:identifier Text: rxd
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint16_t spiTransferSize = 3;
  int8_t spiTransferError = 0;

  // Compose command
  spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
  spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);
  spiTransmitBuffer[2] = 0;

#ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
  MCP2518fd_SELECT();
  spi_readwrite(spiTransmitBuffer[0]);
  spi_readwrite(spiTransmitBuffer[1]);
  spiReceiveBuffer[2] = spi_readwrite(0x00);
  MCP2518fd_UNSELECT();
#ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
  delay(10);
  // Update data
  *rxd = spiReceiveBuffer[2];

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: uint16_t spiTransferSize = 3;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: spiTransferSize = 3
|—————Node:identifier Text: spiTransferSize
|—————Node:= Text: =
|—————Node:number_literal Text: 3
|————Node:; Text: ;
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
|————Node:assignment_expression Text: spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF))
|—————Node:subscript_expression Text: spiTransmitBuffer[0]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:cast_expression Text: (uint8_t)((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF))
|——————Node:( Text: (
|——————Node:type_descriptor Text: uint8_t
|———————Node:primitive_type Text: uint8_t
|——————Node:) Text: )
|——————Node:parenthesized_expression Text: ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF))
|———————Node:( Text: (
|———————Node:binary_expression Text: (cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF)
|————————Node:parenthesized_expression Text: (cINSTRUCTION_READ << 4)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: cINSTRUCTION_READ << 4
|——————————Node:identifier Text: cINSTRUCTION_READ
|——————————Node:<< Text: <<
|——————————Node:number_literal Text: 4
|—————————Node:) Text: )
|————————Node:+ Text: +
|————————Node:parenthesized_expression Text: ((address >> 8) & 0xF)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: (address >> 8) & 0xF
|——————————Node:parenthesized_expression Text: (address >> 8)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: address >> 8
|————————————Node:identifier Text: address
|————————————Node:>> Text: >>
|————————————Node:number_literal Text: 8
|———————————Node:) Text: )
|——————————Node:& Text: &
|——————————Node:number_literal Text: 0xF
|—————————Node:) Text: )
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);
|————Node:assignment_expression Text: spiTransmitBuffer[1] = (uint8_t)(address & 0xFF)
|—————Node:subscript_expression Text: spiTransmitBuffer[1]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [1]
|———————Node:[ Text: [
|———————Node:number_literal Text: 1
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:cast_expression Text: (uint8_t)(address & 0xFF)
|——————Node:( Text: (
|——————Node:type_descriptor Text: uint8_t
|———————Node:primitive_type Text: uint8_t
|——————Node:) Text: )
|——————Node:parenthesized_expression Text: (address & 0xFF)
|———————Node:( Text: (
|———————Node:binary_expression Text: address & 0xFF
|————————Node:identifier Text: address
|————————Node:& Text: &
|————————Node:number_literal Text: 0xFF
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransmitBuffer[2] = 0;
|————Node:assignment_expression Text: spiTransmitBuffer[2] = 0
|—————Node:subscript_expression Text: spiTransmitBuffer[2]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [2]
|———————Node:[ Text: [
|———————Node:number_literal Text: 2
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: SPI_HAS_TRANSACTION
|————Node:expression_statement Text: SPI_BEGIN();
|—————Node:call_expression Text: SPI_BEGIN()
|——————Node:identifier Text: SPI_BEGIN
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: MCP2518fd_SELECT();
|————Node:call_expression Text: MCP2518fd_SELECT()
|—————Node:identifier Text: MCP2518fd_SELECT
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[0]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[0])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[0])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[0]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [0]
|————————Node:[ Text: [
|————————Node:number_literal Text: 0
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[1]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[1])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[1])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[1]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [1]
|————————Node:[ Text: [
|————————Node:number_literal Text: 1
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spiReceiveBuffer[2] = spi_readwrite(0x00);
|————Node:assignment_expression Text: spiReceiveBuffer[2] = spi_readwrite(0x00)
|—————Node:subscript_expression Text: spiReceiveBuffer[2]
|——————Node:identifier Text: spiReceiveBuffer
|——————Node:subscript_argument_list Text: [2]
|———————Node:[ Text: [
|———————Node:number_literal Text: 2
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:call_expression Text: spi_readwrite(0x00)
|——————Node:identifier Text: spi_readwrite
|——————Node:argument_list Text: (0x00)
|———————Node:( Text: (
|———————Node:number_literal Text: 0x00
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: MCP2518fd_UNSELECT();
|————Node:call_expression Text: MCP2518fd_UNSELECT()
|—————Node:identifier Text: MCP2518fd_UNSELECT
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: SPI_HAS_TRANSACTION
|————Node:expression_statement Text: SPI_END();
|—————Node:call_expression Text: SPI_END()
|——————Node:identifier Text: SPI_END
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: delay(10);
|————Node:call_expression Text: delay(10)
|—————Node:identifier Text: delay
|—————Node:argument_list Text: (10)
|——————Node:( Text: (
|——————Node:number_literal Text: 10
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: *rxd = spiReceiveBuffer[2];
|————Node:assignment_expression Text: *rxd = spiReceiveBuffer[2]
|—————Node:pointer_expression Text: *rxd
|——————Node:* Text: *
|——————Node:identifier Text: rxd
|—————Node:= Text: =
|—————Node:subscript_expression Text: spiReceiveBuffer[2]
|——————Node:identifier Text: spiReceiveBuffer
|——————Node:subscript_argument_list Text: [2]
|———————Node:[ Text: [
|———————Node:number_literal Text: 2
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_WriteByte(uint16_t address, uint8_t txd) {
  uint16_t spiTransferSize = 3;
  int8_t spiTransferError = 0;

  // Compose command
  spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
  spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);
  spiTransmitBuffer[2] = txd;

#ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
  MCP2518fd_SELECT();
  spi_readwrite(spiTransmitBuffer[0]);
  spi_readwrite(spiTransmitBuffer[1]);
  spi_readwrite(spiTransmitBuffer[2]);
  MCP2518fd_UNSELECT();
#ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
  delay(10);

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_WriteByte(uint16_t address, uint8_t txd)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_WriteByte
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_WriteByte
|———Node:parameter_list Text: (uint16_t address, uint8_t txd)
|————Node:( Text: (
|————Node:parameter_declaration Text: uint16_t address
|—————Node:primitive_type Text: uint16_t
|—————Node:identifier Text: address
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint8_t txd
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: txd
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint16_t spiTransferSize = 3;
  int8_t spiTransferError = 0;

  // Compose command
  spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
  spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);
  spiTransmitBuffer[2] = txd;

#ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
  MCP2518fd_SELECT();
  spi_readwrite(spiTransmitBuffer[0]);
  spi_readwrite(spiTransmitBuffer[1]);
  spi_readwrite(spiTransmitBuffer[2]);
  MCP2518fd_UNSELECT();
#ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
  delay(10);

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: uint16_t spiTransferSize = 3;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: spiTransferSize = 3
|—————Node:identifier Text: spiTransferSize
|—————Node:= Text: =
|—————Node:number_literal Text: 3
|————Node:; Text: ;
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
|————Node:assignment_expression Text: spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF))
|—————Node:subscript_expression Text: spiTransmitBuffer[0]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:cast_expression Text: (uint8_t)((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF))
|——————Node:( Text: (
|——————Node:type_descriptor Text: uint8_t
|———————Node:primitive_type Text: uint8_t
|——————Node:) Text: )
|——————Node:parenthesized_expression Text: ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF))
|———————Node:( Text: (
|———————Node:binary_expression Text: (cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF)
|————————Node:parenthesized_expression Text: (cINSTRUCTION_WRITE << 4)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: cINSTRUCTION_WRITE << 4
|——————————Node:identifier Text: cINSTRUCTION_WRITE
|——————————Node:<< Text: <<
|——————————Node:number_literal Text: 4
|—————————Node:) Text: )
|————————Node:+ Text: +
|————————Node:parenthesized_expression Text: ((address >> 8) & 0xF)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: (address >> 8) & 0xF
|——————————Node:parenthesized_expression Text: (address >> 8)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: address >> 8
|————————————Node:identifier Text: address
|————————————Node:>> Text: >>
|————————————Node:number_literal Text: 8
|———————————Node:) Text: )
|——————————Node:& Text: &
|——————————Node:number_literal Text: 0xF
|—————————Node:) Text: )
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);
|————Node:assignment_expression Text: spiTransmitBuffer[1] = (uint8_t)(address & 0xFF)
|—————Node:subscript_expression Text: spiTransmitBuffer[1]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [1]
|———————Node:[ Text: [
|———————Node:number_literal Text: 1
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:cast_expression Text: (uint8_t)(address & 0xFF)
|——————Node:( Text: (
|——————Node:type_descriptor Text: uint8_t
|———————Node:primitive_type Text: uint8_t
|——————Node:) Text: )
|——————Node:parenthesized_expression Text: (address & 0xFF)
|———————Node:( Text: (
|———————Node:binary_expression Text: address & 0xFF
|————————Node:identifier Text: address
|————————Node:& Text: &
|————————Node:number_literal Text: 0xFF
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransmitBuffer[2] = txd;
|————Node:assignment_expression Text: spiTransmitBuffer[2] = txd
|—————Node:subscript_expression Text: spiTransmitBuffer[2]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [2]
|———————Node:[ Text: [
|———————Node:number_literal Text: 2
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:identifier Text: txd
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: SPI_HAS_TRANSACTION
|————Node:expression_statement Text: SPI_BEGIN();
|—————Node:call_expression Text: SPI_BEGIN()
|——————Node:identifier Text: SPI_BEGIN
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: MCP2518fd_SELECT();
|————Node:call_expression Text: MCP2518fd_SELECT()
|—————Node:identifier Text: MCP2518fd_SELECT
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[0]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[0])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[0])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[0]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [0]
|————————Node:[ Text: [
|————————Node:number_literal Text: 0
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[1]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[1])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[1])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[1]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [1]
|————————Node:[ Text: [
|————————Node:number_literal Text: 1
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[2]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[2])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[2])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[2]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [2]
|————————Node:[ Text: [
|————————Node:number_literal Text: 2
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: MCP2518fd_UNSELECT();
|————Node:call_expression Text: MCP2518fd_UNSELECT()
|—————Node:identifier Text: MCP2518fd_UNSELECT
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: SPI_HAS_TRANSACTION
|————Node:expression_statement Text: SPI_END();
|—————Node:call_expression Text: SPI_END()
|——————Node:identifier Text: SPI_END
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: delay(10);
|————Node:call_expression Text: delay(10)
|—————Node:identifier Text: delay
|—————Node:argument_list Text: (10)
|——————Node:( Text: (
|——————Node:number_literal Text: 10
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_ReadWord(uint16_t address, uint32_t *rxd) {
  uint8_t i;
  uint32_t x;
  uint16_t spiTransferSize = 6;
  int8_t spiTransferError = 0;

  // Compose command
  spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
  spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);

#ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
  MCP2518fd_SELECT();
  spi_readwrite(spiTransmitBuffer[0]);
  spi_readwrite(spiTransmitBuffer[1]);
  for (i = 2; i < 6; i++) {
    spiReceiveBuffer[i] = spi_readwrite(0x00);
  }
  MCP2518fd_UNSELECT();
#ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
  delay(10);

  // Update data
  *rxd = 0;
  for (i = 2; i < 6; i++) {
    x = (uint32_t)spiReceiveBuffer[i];
    *rxd += x << ((i - 2) * 8);
  }

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_ReadWord(uint16_t address, uint32_t *rxd)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_ReadWord
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_ReadWord
|———Node:parameter_list Text: (uint16_t address, uint32_t *rxd)
|————Node:( Text: (
|————Node:parameter_declaration Text: uint16_t address
|—————Node:primitive_type Text: uint16_t
|—————Node:identifier Text: address
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint32_t *rxd
|—————Node:primitive_type Text: uint32_t
|—————Node:pointer_declarator Text: *rxd
|——————Node:* Text: *
|——————Node:identifier Text: rxd
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint8_t i;
  uint32_t x;
  uint16_t spiTransferSize = 6;
  int8_t spiTransferError = 0;

  // Compose command
  spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
  spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);

#ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
  MCP2518fd_SELECT();
  spi_readwrite(spiTransmitBuffer[0]);
  spi_readwrite(spiTransmitBuffer[1]);
  for (i = 2; i < 6; i++) {
    spiReceiveBuffer[i] = spi_readwrite(0x00);
  }
  MCP2518fd_UNSELECT();
#ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
  delay(10);

  // Update data
  *rxd = 0;
  for (i = 2; i < 6; i++) {
    x = (uint32_t)spiReceiveBuffer[i];
    *rxd += x << ((i - 2) * 8);
  }

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: uint8_t i;
|————Node:primitive_type Text: uint8_t
|————Node:identifier Text: i
|————Node:; Text: ;
|———Node:declaration Text: uint32_t x;
|————Node:primitive_type Text: uint32_t
|————Node:identifier Text: x
|————Node:; Text: ;
|———Node:declaration Text: uint16_t spiTransferSize = 6;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: spiTransferSize = 6
|—————Node:identifier Text: spiTransferSize
|—————Node:= Text: =
|—————Node:number_literal Text: 6
|————Node:; Text: ;
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
|————Node:assignment_expression Text: spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF))
|—————Node:subscript_expression Text: spiTransmitBuffer[0]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:cast_expression Text: (uint8_t)((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF))
|——————Node:( Text: (
|——————Node:type_descriptor Text: uint8_t
|———————Node:primitive_type Text: uint8_t
|——————Node:) Text: )
|——————Node:parenthesized_expression Text: ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF))
|———————Node:( Text: (
|———————Node:binary_expression Text: (cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF)
|————————Node:parenthesized_expression Text: (cINSTRUCTION_READ << 4)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: cINSTRUCTION_READ << 4
|——————————Node:identifier Text: cINSTRUCTION_READ
|——————————Node:<< Text: <<
|——————————Node:number_literal Text: 4
|—————————Node:) Text: )
|————————Node:+ Text: +
|————————Node:parenthesized_expression Text: ((address >> 8) & 0xF)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: (address >> 8) & 0xF
|——————————Node:parenthesized_expression Text: (address >> 8)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: address >> 8
|————————————Node:identifier Text: address
|————————————Node:>> Text: >>
|————————————Node:number_literal Text: 8
|———————————Node:) Text: )
|——————————Node:& Text: &
|——————————Node:number_literal Text: 0xF
|—————————Node:) Text: )
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);
|————Node:assignment_expression Text: spiTransmitBuffer[1] = (uint8_t)(address & 0xFF)
|—————Node:subscript_expression Text: spiTransmitBuffer[1]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [1]
|———————Node:[ Text: [
|———————Node:number_literal Text: 1
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:cast_expression Text: (uint8_t)(address & 0xFF)
|——————Node:( Text: (
|——————Node:type_descriptor Text: uint8_t
|———————Node:primitive_type Text: uint8_t
|——————Node:) Text: )
|——————Node:parenthesized_expression Text: (address & 0xFF)
|———————Node:( Text: (
|———————Node:binary_expression Text: address & 0xFF
|————————Node:identifier Text: address
|————————Node:& Text: &
|————————Node:number_literal Text: 0xFF
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: SPI_HAS_TRANSACTION
|————Node:expression_statement Text: SPI_BEGIN();
|—————Node:call_expression Text: SPI_BEGIN()
|——————Node:identifier Text: SPI_BEGIN
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: MCP2518fd_SELECT();
|————Node:call_expression Text: MCP2518fd_SELECT()
|—————Node:identifier Text: MCP2518fd_SELECT
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[0]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[0])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[0])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[0]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [0]
|————————Node:[ Text: [
|————————Node:number_literal Text: 0
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[1]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[1])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[1])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[1]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [1]
|————————Node:[ Text: [
|————————Node:number_literal Text: 1
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:for_statement Text: for (i = 2; i < 6; i++) {
    spiReceiveBuffer[i] = spi_readwrite(0x00);
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:assignment_expression Text: i = 2
|—————Node:identifier Text: i
|—————Node:= Text: =
|—————Node:number_literal Text: 2
|————Node:; Text: ;
|————Node:binary_expression Text: i < 6
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:number_literal Text: 6
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    spiReceiveBuffer[i] = spi_readwrite(0x00);
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: spiReceiveBuffer[i] = spi_readwrite(0x00);
|——————Node:assignment_expression Text: spiReceiveBuffer[i] = spi_readwrite(0x00)
|———————Node:subscript_expression Text: spiReceiveBuffer[i]
|————————Node:identifier Text: spiReceiveBuffer
|————————Node:subscript_argument_list Text: [i]
|—————————Node:[ Text: [
|—————————Node:identifier Text: i
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:call_expression Text: spi_readwrite(0x00)
|————————Node:identifier Text: spi_readwrite
|————————Node:argument_list Text: (0x00)
|—————————Node:( Text: (
|—————————Node:number_literal Text: 0x00
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: MCP2518fd_UNSELECT();
|————Node:call_expression Text: MCP2518fd_UNSELECT()
|—————Node:identifier Text: MCP2518fd_UNSELECT
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: SPI_HAS_TRANSACTION
|————Node:expression_statement Text: SPI_END();
|—————Node:call_expression Text: SPI_END()
|——————Node:identifier Text: SPI_END
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: delay(10);
|————Node:call_expression Text: delay(10)
|—————Node:identifier Text: delay
|—————Node:argument_list Text: (10)
|——————Node:( Text: (
|——————Node:number_literal Text: 10
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: *rxd = 0;
|————Node:assignment_expression Text: *rxd = 0
|—————Node:pointer_expression Text: *rxd
|——————Node:* Text: *
|——————Node:identifier Text: rxd
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:for_statement Text: for (i = 2; i < 6; i++) {
    x = (uint32_t)spiReceiveBuffer[i];
    *rxd += x << ((i - 2) * 8);
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:assignment_expression Text: i = 2
|—————Node:identifier Text: i
|—————Node:= Text: =
|—————Node:number_literal Text: 2
|————Node:; Text: ;
|————Node:binary_expression Text: i < 6
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:number_literal Text: 6
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    x = (uint32_t)spiReceiveBuffer[i];
    *rxd += x << ((i - 2) * 8);
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: x = (uint32_t)spiReceiveBuffer[i];
|——————Node:assignment_expression Text: x = (uint32_t)spiReceiveBuffer[i]
|———————Node:identifier Text: x
|———————Node:= Text: =
|———————Node:cast_expression Text: (uint32_t)spiReceiveBuffer[i]
|————————Node:( Text: (
|————————Node:type_descriptor Text: uint32_t
|—————————Node:primitive_type Text: uint32_t
|————————Node:) Text: )
|————————Node:subscript_expression Text: spiReceiveBuffer[i]
|—————————Node:identifier Text: spiReceiveBuffer
|—————————Node:subscript_argument_list Text: [i]
|——————————Node:[ Text: [
|——————————Node:identifier Text: i
|——————————Node:] Text: ]
|——————Node:; Text: ;
|—————Node:expression_statement Text: *rxd += x << ((i - 2) * 8);
|——————Node:assignment_expression Text: *rxd += x << ((i - 2) * 8)
|———————Node:pointer_expression Text: *rxd
|————————Node:* Text: *
|————————Node:identifier Text: rxd
|———————Node:+= Text: +=
|———————Node:binary_expression Text: x << ((i - 2) * 8)
|————————Node:identifier Text: x
|————————Node:<< Text: <<
|————————Node:parenthesized_expression Text: ((i - 2) * 8)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: (i - 2) * 8
|——————————Node:parenthesized_expression Text: (i - 2)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: i - 2
|————————————Node:identifier Text: i
|————————————Node:- Text: -
|————————————Node:number_literal Text: 2
|———————————Node:) Text: )
|——————————Node:* Text: *
|——————————Node:number_literal Text: 8
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_WriteWord(uint16_t address, uint32_t txd) {
  uint8_t i;
  uint16_t spiTransferSize = 6;
  int8_t spiTransferError = 0;

  // Compose command
  spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
  spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);

  // Split word into 4 bytes and add them to buffer
  for (i = 0; i < 4; i++) {
    spiTransmitBuffer[i + 2] = (uint8_t)((txd >> (i * 8)) & 0xFF);
  }

#ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
  MCP2518fd_SELECT();
  spi_readwrite(spiTransmitBuffer[0]);
  spi_readwrite(spiTransmitBuffer[1]);
  spi_readwrite(spiTransmitBuffer[2]);
  spi_readwrite(spiTransmitBuffer[3]);
  spi_readwrite(spiTransmitBuffer[4]);
  spi_readwrite(spiTransmitBuffer[5]);
  MCP2518fd_UNSELECT();
#ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
  delay(10);

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_WriteWord(uint16_t address, uint32_t txd)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_WriteWord
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_WriteWord
|———Node:parameter_list Text: (uint16_t address, uint32_t txd)
|————Node:( Text: (
|————Node:parameter_declaration Text: uint16_t address
|—————Node:primitive_type Text: uint16_t
|—————Node:identifier Text: address
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint32_t txd
|—————Node:primitive_type Text: uint32_t
|—————Node:identifier Text: txd
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint8_t i;
  uint16_t spiTransferSize = 6;
  int8_t spiTransferError = 0;

  // Compose command
  spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
  spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);

  // Split word into 4 bytes and add them to buffer
  for (i = 0; i < 4; i++) {
    spiTransmitBuffer[i + 2] = (uint8_t)((txd >> (i * 8)) & 0xFF);
  }

#ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
  MCP2518fd_SELECT();
  spi_readwrite(spiTransmitBuffer[0]);
  spi_readwrite(spiTransmitBuffer[1]);
  spi_readwrite(spiTransmitBuffer[2]);
  spi_readwrite(spiTransmitBuffer[3]);
  spi_readwrite(spiTransmitBuffer[4]);
  spi_readwrite(spiTransmitBuffer[5]);
  MCP2518fd_UNSELECT();
#ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
  delay(10);

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: uint8_t i;
|————Node:primitive_type Text: uint8_t
|————Node:identifier Text: i
|————Node:; Text: ;
|———Node:declaration Text: uint16_t spiTransferSize = 6;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: spiTransferSize = 6
|—————Node:identifier Text: spiTransferSize
|—————Node:= Text: =
|—————Node:number_literal Text: 6
|————Node:; Text: ;
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
|————Node:assignment_expression Text: spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF))
|—————Node:subscript_expression Text: spiTransmitBuffer[0]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:cast_expression Text: (uint8_t)((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF))
|——————Node:( Text: (
|——————Node:type_descriptor Text: uint8_t
|———————Node:primitive_type Text: uint8_t
|——————Node:) Text: )
|——————Node:parenthesized_expression Text: ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF))
|———————Node:( Text: (
|———————Node:binary_expression Text: (cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF)
|————————Node:parenthesized_expression Text: (cINSTRUCTION_WRITE << 4)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: cINSTRUCTION_WRITE << 4
|——————————Node:identifier Text: cINSTRUCTION_WRITE
|——————————Node:<< Text: <<
|——————————Node:number_literal Text: 4
|—————————Node:) Text: )
|————————Node:+ Text: +
|————————Node:parenthesized_expression Text: ((address >> 8) & 0xF)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: (address >> 8) & 0xF
|——————————Node:parenthesized_expression Text: (address >> 8)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: address >> 8
|————————————Node:identifier Text: address
|————————————Node:>> Text: >>
|————————————Node:number_literal Text: 8
|———————————Node:) Text: )
|——————————Node:& Text: &
|——————————Node:number_literal Text: 0xF
|—————————Node:) Text: )
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);
|————Node:assignment_expression Text: spiTransmitBuffer[1] = (uint8_t)(address & 0xFF)
|—————Node:subscript_expression Text: spiTransmitBuffer[1]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [1]
|———————Node:[ Text: [
|———————Node:number_literal Text: 1
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:cast_expression Text: (uint8_t)(address & 0xFF)
|——————Node:( Text: (
|——————Node:type_descriptor Text: uint8_t
|———————Node:primitive_type Text: uint8_t
|——————Node:) Text: )
|——————Node:parenthesized_expression Text: (address & 0xFF)
|———————Node:( Text: (
|———————Node:binary_expression Text: address & 0xFF
|————————Node:identifier Text: address
|————————Node:& Text: &
|————————Node:number_literal Text: 0xFF
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:for_statement Text: for (i = 0; i < 4; i++) {
    spiTransmitBuffer[i + 2] = (uint8_t)((txd >> (i * 8)) & 0xFF);
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:assignment_expression Text: i = 0
|—————Node:identifier Text: i
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|————Node:binary_expression Text: i < 4
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:number_literal Text: 4
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    spiTransmitBuffer[i + 2] = (uint8_t)((txd >> (i * 8)) & 0xFF);
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: spiTransmitBuffer[i + 2] = (uint8_t)((txd >> (i * 8)) & 0xFF);
|——————Node:assignment_expression Text: spiTransmitBuffer[i + 2] = (uint8_t)((txd >> (i * 8)) & 0xFF)
|———————Node:subscript_expression Text: spiTransmitBuffer[i + 2]
|————————Node:identifier Text: spiTransmitBuffer
|————————Node:subscript_argument_list Text: [i + 2]
|—————————Node:[ Text: [
|—————————Node:binary_expression Text: i + 2
|——————————Node:identifier Text: i
|——————————Node:+ Text: +
|——————————Node:number_literal Text: 2
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:cast_expression Text: (uint8_t)((txd >> (i * 8)) & 0xFF)
|————————Node:( Text: (
|————————Node:type_descriptor Text: uint8_t
|—————————Node:primitive_type Text: uint8_t
|————————Node:) Text: )
|————————Node:parenthesized_expression Text: ((txd >> (i * 8)) & 0xFF)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: (txd >> (i * 8)) & 0xFF
|——————————Node:parenthesized_expression Text: (txd >> (i * 8))
|———————————Node:( Text: (
|———————————Node:binary_expression Text: txd >> (i * 8)
|————————————Node:identifier Text: txd
|————————————Node:>> Text: >>
|————————————Node:parenthesized_expression Text: (i * 8)
|—————————————Node:( Text: (
|—————————————Node:binary_expression Text: i * 8
|——————————————Node:identifier Text: i
|——————————————Node:* Text: *
|——————————————Node:number_literal Text: 8
|—————————————Node:) Text: )
|———————————Node:) Text: )
|——————————Node:& Text: &
|——————————Node:number_literal Text: 0xFF
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:preproc_ifdef Text: #ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: SPI_HAS_TRANSACTION
|————Node:expression_statement Text: SPI_BEGIN();
|—————Node:call_expression Text: SPI_BEGIN()
|——————Node:identifier Text: SPI_BEGIN
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: MCP2518fd_SELECT();
|————Node:call_expression Text: MCP2518fd_SELECT()
|—————Node:identifier Text: MCP2518fd_SELECT
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[0]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[0])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[0])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[0]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [0]
|————————Node:[ Text: [
|————————Node:number_literal Text: 0
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[1]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[1])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[1])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[1]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [1]
|————————Node:[ Text: [
|————————Node:number_literal Text: 1
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[2]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[2])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[2])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[2]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [2]
|————————Node:[ Text: [
|————————Node:number_literal Text: 2
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[3]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[3])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[3])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[3]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [3]
|————————Node:[ Text: [
|————————Node:number_literal Text: 3
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[4]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[4])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[4])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[4]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [4]
|————————Node:[ Text: [
|————————Node:number_literal Text: 4
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[5]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[5])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[5])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[5]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [5]
|————————Node:[ Text: [
|————————Node:number_literal Text: 5
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: MCP2518fd_UNSELECT();
|————Node:call_expression Text: MCP2518fd_UNSELECT()
|—————Node:identifier Text: MCP2518fd_UNSELECT
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: SPI_HAS_TRANSACTION
|————Node:expression_statement Text: SPI_END();
|—————Node:call_expression Text: SPI_END()
|——————Node:identifier Text: SPI_END
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: delay(10);
|————Node:call_expression Text: delay(10)
|—————Node:identifier Text: delay
|—————Node:argument_list Text: (10)
|——————Node:( Text: (
|——————Node:number_literal Text: 10
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_ReadHalfWord(uint16_t address, uint16_t *rxd) {
  uint8_t i;
  uint32_t x;
  uint16_t spiTransferSize = 4;
  int8_t spiTransferError = 0;

  // Compose command
  spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
  spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);

#ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
  MCP2518fd_SELECT();
  spi_readwrite(spiTransmitBuffer[0]);
  spi_readwrite(spiTransmitBuffer[1]);
  for (i = 2; i < 4; i++) {
    spiReceiveBuffer[i] = spi_readwrite(0x00);
  }
  MCP2518fd_UNSELECT();
#ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
  delay(10);

  // Update data
  *rxd = 0;
  for (i = 2; i < 4; i++) {
    x = (uint32_t)spiReceiveBuffer[i];
    *rxd += x << ((i - 2) * 8);
  }

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_ReadHalfWord(uint16_t address, uint16_t *rxd)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_ReadHalfWord
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_ReadHalfWord
|———Node:parameter_list Text: (uint16_t address, uint16_t *rxd)
|————Node:( Text: (
|————Node:parameter_declaration Text: uint16_t address
|—————Node:primitive_type Text: uint16_t
|—————Node:identifier Text: address
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint16_t *rxd
|—————Node:primitive_type Text: uint16_t
|—————Node:pointer_declarator Text: *rxd
|——————Node:* Text: *
|——————Node:identifier Text: rxd
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint8_t i;
  uint32_t x;
  uint16_t spiTransferSize = 4;
  int8_t spiTransferError = 0;

  // Compose command
  spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
  spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);

#ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
  MCP2518fd_SELECT();
  spi_readwrite(spiTransmitBuffer[0]);
  spi_readwrite(spiTransmitBuffer[1]);
  for (i = 2; i < 4; i++) {
    spiReceiveBuffer[i] = spi_readwrite(0x00);
  }
  MCP2518fd_UNSELECT();
#ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
  delay(10);

  // Update data
  *rxd = 0;
  for (i = 2; i < 4; i++) {
    x = (uint32_t)spiReceiveBuffer[i];
    *rxd += x << ((i - 2) * 8);
  }

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: uint8_t i;
|————Node:primitive_type Text: uint8_t
|————Node:identifier Text: i
|————Node:; Text: ;
|———Node:declaration Text: uint32_t x;
|————Node:primitive_type Text: uint32_t
|————Node:identifier Text: x
|————Node:; Text: ;
|———Node:declaration Text: uint16_t spiTransferSize = 4;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: spiTransferSize = 4
|—————Node:identifier Text: spiTransferSize
|—————Node:= Text: =
|—————Node:number_literal Text: 4
|————Node:; Text: ;
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
|————Node:assignment_expression Text: spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF))
|—————Node:subscript_expression Text: spiTransmitBuffer[0]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:cast_expression Text: (uint8_t)((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF))
|——————Node:( Text: (
|——————Node:type_descriptor Text: uint8_t
|———————Node:primitive_type Text: uint8_t
|——————Node:) Text: )
|——————Node:parenthesized_expression Text: ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF))
|———————Node:( Text: (
|———————Node:binary_expression Text: (cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF)
|————————Node:parenthesized_expression Text: (cINSTRUCTION_READ << 4)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: cINSTRUCTION_READ << 4
|——————————Node:identifier Text: cINSTRUCTION_READ
|——————————Node:<< Text: <<
|——————————Node:number_literal Text: 4
|—————————Node:) Text: )
|————————Node:+ Text: +
|————————Node:parenthesized_expression Text: ((address >> 8) & 0xF)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: (address >> 8) & 0xF
|——————————Node:parenthesized_expression Text: (address >> 8)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: address >> 8
|————————————Node:identifier Text: address
|————————————Node:>> Text: >>
|————————————Node:number_literal Text: 8
|———————————Node:) Text: )
|——————————Node:& Text: &
|——————————Node:number_literal Text: 0xF
|—————————Node:) Text: )
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);
|————Node:assignment_expression Text: spiTransmitBuffer[1] = (uint8_t)(address & 0xFF)
|—————Node:subscript_expression Text: spiTransmitBuffer[1]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [1]
|———————Node:[ Text: [
|———————Node:number_literal Text: 1
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:cast_expression Text: (uint8_t)(address & 0xFF)
|——————Node:( Text: (
|——————Node:type_descriptor Text: uint8_t
|———————Node:primitive_type Text: uint8_t
|——————Node:) Text: )
|——————Node:parenthesized_expression Text: (address & 0xFF)
|———————Node:( Text: (
|———————Node:binary_expression Text: address & 0xFF
|————————Node:identifier Text: address
|————————Node:& Text: &
|————————Node:number_literal Text: 0xFF
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: SPI_HAS_TRANSACTION
|————Node:expression_statement Text: SPI_BEGIN();
|—————Node:call_expression Text: SPI_BEGIN()
|——————Node:identifier Text: SPI_BEGIN
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: MCP2518fd_SELECT();
|————Node:call_expression Text: MCP2518fd_SELECT()
|—————Node:identifier Text: MCP2518fd_SELECT
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[0]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[0])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[0])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[0]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [0]
|————————Node:[ Text: [
|————————Node:number_literal Text: 0
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[1]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[1])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[1])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[1]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [1]
|————————Node:[ Text: [
|————————Node:number_literal Text: 1
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:for_statement Text: for (i = 2; i < 4; i++) {
    spiReceiveBuffer[i] = spi_readwrite(0x00);
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:assignment_expression Text: i = 2
|—————Node:identifier Text: i
|—————Node:= Text: =
|—————Node:number_literal Text: 2
|————Node:; Text: ;
|————Node:binary_expression Text: i < 4
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:number_literal Text: 4
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    spiReceiveBuffer[i] = spi_readwrite(0x00);
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: spiReceiveBuffer[i] = spi_readwrite(0x00);
|——————Node:assignment_expression Text: spiReceiveBuffer[i] = spi_readwrite(0x00)
|———————Node:subscript_expression Text: spiReceiveBuffer[i]
|————————Node:identifier Text: spiReceiveBuffer
|————————Node:subscript_argument_list Text: [i]
|—————————Node:[ Text: [
|—————————Node:identifier Text: i
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:call_expression Text: spi_readwrite(0x00)
|————————Node:identifier Text: spi_readwrite
|————————Node:argument_list Text: (0x00)
|—————————Node:( Text: (
|—————————Node:number_literal Text: 0x00
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: MCP2518fd_UNSELECT();
|————Node:call_expression Text: MCP2518fd_UNSELECT()
|—————Node:identifier Text: MCP2518fd_UNSELECT
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: SPI_HAS_TRANSACTION
|————Node:expression_statement Text: SPI_END();
|—————Node:call_expression Text: SPI_END()
|——————Node:identifier Text: SPI_END
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: delay(10);
|————Node:call_expression Text: delay(10)
|—————Node:identifier Text: delay
|—————Node:argument_list Text: (10)
|——————Node:( Text: (
|——————Node:number_literal Text: 10
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: *rxd = 0;
|————Node:assignment_expression Text: *rxd = 0
|—————Node:pointer_expression Text: *rxd
|——————Node:* Text: *
|——————Node:identifier Text: rxd
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:for_statement Text: for (i = 2; i < 4; i++) {
    x = (uint32_t)spiReceiveBuffer[i];
    *rxd += x << ((i - 2) * 8);
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:assignment_expression Text: i = 2
|—————Node:identifier Text: i
|—————Node:= Text: =
|—————Node:number_literal Text: 2
|————Node:; Text: ;
|————Node:binary_expression Text: i < 4
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:number_literal Text: 4
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    x = (uint32_t)spiReceiveBuffer[i];
    *rxd += x << ((i - 2) * 8);
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: x = (uint32_t)spiReceiveBuffer[i];
|——————Node:assignment_expression Text: x = (uint32_t)spiReceiveBuffer[i]
|———————Node:identifier Text: x
|———————Node:= Text: =
|———————Node:cast_expression Text: (uint32_t)spiReceiveBuffer[i]
|————————Node:( Text: (
|————————Node:type_descriptor Text: uint32_t
|—————————Node:primitive_type Text: uint32_t
|————————Node:) Text: )
|————————Node:subscript_expression Text: spiReceiveBuffer[i]
|—————————Node:identifier Text: spiReceiveBuffer
|—————————Node:subscript_argument_list Text: [i]
|——————————Node:[ Text: [
|——————————Node:identifier Text: i
|——————————Node:] Text: ]
|——————Node:; Text: ;
|—————Node:expression_statement Text: *rxd += x << ((i - 2) * 8);
|——————Node:assignment_expression Text: *rxd += x << ((i - 2) * 8)
|———————Node:pointer_expression Text: *rxd
|————————Node:* Text: *
|————————Node:identifier Text: rxd
|———————Node:+= Text: +=
|———————Node:binary_expression Text: x << ((i - 2) * 8)
|————————Node:identifier Text: x
|————————Node:<< Text: <<
|————————Node:parenthesized_expression Text: ((i - 2) * 8)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: (i - 2) * 8
|——————————Node:parenthesized_expression Text: (i - 2)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: i - 2
|————————————Node:identifier Text: i
|————————————Node:- Text: -
|————————————Node:number_literal Text: 2
|———————————Node:) Text: )
|——————————Node:* Text: *
|——————————Node:number_literal Text: 8
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_WriteHalfWord(uint16_t address, uint16_t txd) {
  uint8_t i;
  uint16_t spiTransferSize = 4;
  int8_t spiTransferError = 0;

  // Compose command
  spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
  spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);

  // Split word into 2 bytes and add them to buffer
  for (i = 0; i < 2; i++) {
    spiTransmitBuffer[i + 2] = (uint8_t)((txd >> (i * 8)) & 0xFF);
  }

#ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
  MCP2518fd_SELECT();
  spi_readwrite(spiTransmitBuffer[0]);
  spi_readwrite(spiTransmitBuffer[1]);
  spi_readwrite(spiTransmitBuffer[2]);
  spi_readwrite(spiTransmitBuffer[3]);
  MCP2518fd_UNSELECT();
#ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
  delay(10);

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_WriteHalfWord(uint16_t address, uint16_t txd)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_WriteHalfWord
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_WriteHalfWord
|———Node:parameter_list Text: (uint16_t address, uint16_t txd)
|————Node:( Text: (
|————Node:parameter_declaration Text: uint16_t address
|—————Node:primitive_type Text: uint16_t
|—————Node:identifier Text: address
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint16_t txd
|—————Node:primitive_type Text: uint16_t
|—————Node:identifier Text: txd
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint8_t i;
  uint16_t spiTransferSize = 4;
  int8_t spiTransferError = 0;

  // Compose command
  spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
  spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);

  // Split word into 2 bytes and add them to buffer
  for (i = 0; i < 2; i++) {
    spiTransmitBuffer[i + 2] = (uint8_t)((txd >> (i * 8)) & 0xFF);
  }

#ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
  MCP2518fd_SELECT();
  spi_readwrite(spiTransmitBuffer[0]);
  spi_readwrite(spiTransmitBuffer[1]);
  spi_readwrite(spiTransmitBuffer[2]);
  spi_readwrite(spiTransmitBuffer[3]);
  MCP2518fd_UNSELECT();
#ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
  delay(10);

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: uint8_t i;
|————Node:primitive_type Text: uint8_t
|————Node:identifier Text: i
|————Node:; Text: ;
|———Node:declaration Text: uint16_t spiTransferSize = 4;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: spiTransferSize = 4
|—————Node:identifier Text: spiTransferSize
|—————Node:= Text: =
|—————Node:number_literal Text: 4
|————Node:; Text: ;
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
|————Node:assignment_expression Text: spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF))
|—————Node:subscript_expression Text: spiTransmitBuffer[0]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:cast_expression Text: (uint8_t)((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF))
|——————Node:( Text: (
|——————Node:type_descriptor Text: uint8_t
|———————Node:primitive_type Text: uint8_t
|——————Node:) Text: )
|——————Node:parenthesized_expression Text: ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF))
|———————Node:( Text: (
|———————Node:binary_expression Text: (cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF)
|————————Node:parenthesized_expression Text: (cINSTRUCTION_WRITE << 4)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: cINSTRUCTION_WRITE << 4
|——————————Node:identifier Text: cINSTRUCTION_WRITE
|——————————Node:<< Text: <<
|——————————Node:number_literal Text: 4
|—————————Node:) Text: )
|————————Node:+ Text: +
|————————Node:parenthesized_expression Text: ((address >> 8) & 0xF)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: (address >> 8) & 0xF
|——————————Node:parenthesized_expression Text: (address >> 8)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: address >> 8
|————————————Node:identifier Text: address
|————————————Node:>> Text: >>
|————————————Node:number_literal Text: 8
|———————————Node:) Text: )
|——————————Node:& Text: &
|——————————Node:number_literal Text: 0xF
|—————————Node:) Text: )
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);
|————Node:assignment_expression Text: spiTransmitBuffer[1] = (uint8_t)(address & 0xFF)
|—————Node:subscript_expression Text: spiTransmitBuffer[1]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [1]
|———————Node:[ Text: [
|———————Node:number_literal Text: 1
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:cast_expression Text: (uint8_t)(address & 0xFF)
|——————Node:( Text: (
|——————Node:type_descriptor Text: uint8_t
|———————Node:primitive_type Text: uint8_t
|——————Node:) Text: )
|——————Node:parenthesized_expression Text: (address & 0xFF)
|———————Node:( Text: (
|———————Node:binary_expression Text: address & 0xFF
|————————Node:identifier Text: address
|————————Node:& Text: &
|————————Node:number_literal Text: 0xFF
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:for_statement Text: for (i = 0; i < 2; i++) {
    spiTransmitBuffer[i + 2] = (uint8_t)((txd >> (i * 8)) & 0xFF);
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:assignment_expression Text: i = 0
|—————Node:identifier Text: i
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|————Node:binary_expression Text: i < 2
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:number_literal Text: 2
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    spiTransmitBuffer[i + 2] = (uint8_t)((txd >> (i * 8)) & 0xFF);
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: spiTransmitBuffer[i + 2] = (uint8_t)((txd >> (i * 8)) & 0xFF);
|——————Node:assignment_expression Text: spiTransmitBuffer[i + 2] = (uint8_t)((txd >> (i * 8)) & 0xFF)
|———————Node:subscript_expression Text: spiTransmitBuffer[i + 2]
|————————Node:identifier Text: spiTransmitBuffer
|————————Node:subscript_argument_list Text: [i + 2]
|—————————Node:[ Text: [
|—————————Node:binary_expression Text: i + 2
|——————————Node:identifier Text: i
|——————————Node:+ Text: +
|——————————Node:number_literal Text: 2
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:cast_expression Text: (uint8_t)((txd >> (i * 8)) & 0xFF)
|————————Node:( Text: (
|————————Node:type_descriptor Text: uint8_t
|—————————Node:primitive_type Text: uint8_t
|————————Node:) Text: )
|————————Node:parenthesized_expression Text: ((txd >> (i * 8)) & 0xFF)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: (txd >> (i * 8)) & 0xFF
|——————————Node:parenthesized_expression Text: (txd >> (i * 8))
|———————————Node:( Text: (
|———————————Node:binary_expression Text: txd >> (i * 8)
|————————————Node:identifier Text: txd
|————————————Node:>> Text: >>
|————————————Node:parenthesized_expression Text: (i * 8)
|—————————————Node:( Text: (
|—————————————Node:binary_expression Text: i * 8
|——————————————Node:identifier Text: i
|——————————————Node:* Text: *
|——————————————Node:number_literal Text: 8
|—————————————Node:) Text: )
|———————————Node:) Text: )
|——————————Node:& Text: &
|——————————Node:number_literal Text: 0xFF
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:preproc_ifdef Text: #ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: SPI_HAS_TRANSACTION
|————Node:expression_statement Text: SPI_BEGIN();
|—————Node:call_expression Text: SPI_BEGIN()
|——————Node:identifier Text: SPI_BEGIN
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: MCP2518fd_SELECT();
|————Node:call_expression Text: MCP2518fd_SELECT()
|—————Node:identifier Text: MCP2518fd_SELECT
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[0]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[0])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[0])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[0]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [0]
|————————Node:[ Text: [
|————————Node:number_literal Text: 0
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[1]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[1])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[1])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[1]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [1]
|————————Node:[ Text: [
|————————Node:number_literal Text: 1
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[2]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[2])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[2])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[2]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [2]
|————————Node:[ Text: [
|————————Node:number_literal Text: 2
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[3]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[3])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[3])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[3]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [3]
|————————Node:[ Text: [
|————————Node:number_literal Text: 3
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: MCP2518fd_UNSELECT();
|————Node:call_expression Text: MCP2518fd_UNSELECT()
|—————Node:identifier Text: MCP2518fd_UNSELECT
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: SPI_HAS_TRANSACTION
|————Node:expression_statement Text: SPI_END();
|—————Node:call_expression Text: SPI_END()
|——————Node:identifier Text: SPI_END
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: delay(10);
|————Node:call_expression Text: delay(10)
|—————Node:identifier Text: delay
|—————Node:argument_list Text: (10)
|——————Node:( Text: (
|——————Node:number_literal Text: 10
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_ReadByteArray(uint16_t address, uint8_t *rxd,
                                          uint16_t nBytes) {
  uint16_t i;
  uint16_t spiTransferSize = nBytes + 2;
  int8_t spiTransferError = 0;

  // Compose command
  spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
  spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);

  // Clear data
  for (i = 2; i < spiTransferSize; i++) {
    spiTransmitBuffer[i] = 0;
  }

#ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
  MCP2518fd_SELECT();
  spi_readwrite(spiTransmitBuffer[0]);
  spi_readwrite(spiTransmitBuffer[1]);
  for (i = 0; i < nBytes; i++) {
    spiReceiveBuffer[i + 2] = spi_readwrite(0x00);
  }
  MCP2518fd_UNSELECT();
#ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
  delay(10);

  // Update data
  for (i = 0; i < nBytes; i++) {
    rxd[i] = spiReceiveBuffer[i + 2];
  }

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_ReadByteArray(uint16_t address, uint8_t *rxd,
                                          uint16_t nBytes)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_ReadByteArray
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_ReadByteArray
|———Node:parameter_list Text: (uint16_t address, uint8_t *rxd,
                                          uint16_t nBytes)
|————Node:( Text: (
|————Node:parameter_declaration Text: uint16_t address
|—————Node:primitive_type Text: uint16_t
|—————Node:identifier Text: address
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint8_t *rxd
|—————Node:primitive_type Text: uint8_t
|—————Node:pointer_declarator Text: *rxd
|——————Node:* Text: *
|——————Node:identifier Text: rxd
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint16_t nBytes
|—————Node:primitive_type Text: uint16_t
|—————Node:identifier Text: nBytes
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint16_t i;
  uint16_t spiTransferSize = nBytes + 2;
  int8_t spiTransferError = 0;

  // Compose command
  spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
  spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);

  // Clear data
  for (i = 2; i < spiTransferSize; i++) {
    spiTransmitBuffer[i] = 0;
  }

#ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
  MCP2518fd_SELECT();
  spi_readwrite(spiTransmitBuffer[0]);
  spi_readwrite(spiTransmitBuffer[1]);
  for (i = 0; i < nBytes; i++) {
    spiReceiveBuffer[i + 2] = spi_readwrite(0x00);
  }
  MCP2518fd_UNSELECT();
#ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
  delay(10);

  // Update data
  for (i = 0; i < nBytes; i++) {
    rxd[i] = spiReceiveBuffer[i + 2];
  }

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: uint16_t i;
|————Node:primitive_type Text: uint16_t
|————Node:identifier Text: i
|————Node:; Text: ;
|———Node:declaration Text: uint16_t spiTransferSize = nBytes + 2;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: spiTransferSize = nBytes + 2
|—————Node:identifier Text: spiTransferSize
|—————Node:= Text: =
|—————Node:binary_expression Text: nBytes + 2
|——————Node:identifier Text: nBytes
|——————Node:+ Text: +
|——————Node:number_literal Text: 2
|————Node:; Text: ;
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
|————Node:assignment_expression Text: spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF))
|—————Node:subscript_expression Text: spiTransmitBuffer[0]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:cast_expression Text: (uint8_t)((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF))
|——————Node:( Text: (
|——————Node:type_descriptor Text: uint8_t
|———————Node:primitive_type Text: uint8_t
|——————Node:) Text: )
|——————Node:parenthesized_expression Text: ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF))
|———————Node:( Text: (
|———————Node:binary_expression Text: (cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF)
|————————Node:parenthesized_expression Text: (cINSTRUCTION_READ << 4)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: cINSTRUCTION_READ << 4
|——————————Node:identifier Text: cINSTRUCTION_READ
|——————————Node:<< Text: <<
|——————————Node:number_literal Text: 4
|—————————Node:) Text: )
|————————Node:+ Text: +
|————————Node:parenthesized_expression Text: ((address >> 8) & 0xF)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: (address >> 8) & 0xF
|——————————Node:parenthesized_expression Text: (address >> 8)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: address >> 8
|————————————Node:identifier Text: address
|————————————Node:>> Text: >>
|————————————Node:number_literal Text: 8
|———————————Node:) Text: )
|——————————Node:& Text: &
|——————————Node:number_literal Text: 0xF
|—————————Node:) Text: )
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);
|————Node:assignment_expression Text: spiTransmitBuffer[1] = (uint8_t)(address & 0xFF)
|—————Node:subscript_expression Text: spiTransmitBuffer[1]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [1]
|———————Node:[ Text: [
|———————Node:number_literal Text: 1
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:cast_expression Text: (uint8_t)(address & 0xFF)
|——————Node:( Text: (
|——————Node:type_descriptor Text: uint8_t
|———————Node:primitive_type Text: uint8_t
|——————Node:) Text: )
|——————Node:parenthesized_expression Text: (address & 0xFF)
|———————Node:( Text: (
|———————Node:binary_expression Text: address & 0xFF
|————————Node:identifier Text: address
|————————Node:& Text: &
|————————Node:number_literal Text: 0xFF
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:for_statement Text: for (i = 2; i < spiTransferSize; i++) {
    spiTransmitBuffer[i] = 0;
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:assignment_expression Text: i = 2
|—————Node:identifier Text: i
|—————Node:= Text: =
|—————Node:number_literal Text: 2
|————Node:; Text: ;
|————Node:binary_expression Text: i < spiTransferSize
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:identifier Text: spiTransferSize
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    spiTransmitBuffer[i] = 0;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: spiTransmitBuffer[i] = 0;
|——————Node:assignment_expression Text: spiTransmitBuffer[i] = 0
|———————Node:subscript_expression Text: spiTransmitBuffer[i]
|————————Node:identifier Text: spiTransmitBuffer
|————————Node:subscript_argument_list Text: [i]
|—————————Node:[ Text: [
|—————————Node:identifier Text: i
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:number_literal Text: 0
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:preproc_ifdef Text: #ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: SPI_HAS_TRANSACTION
|————Node:expression_statement Text: SPI_BEGIN();
|—————Node:call_expression Text: SPI_BEGIN()
|——————Node:identifier Text: SPI_BEGIN
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: MCP2518fd_SELECT();
|————Node:call_expression Text: MCP2518fd_SELECT()
|—————Node:identifier Text: MCP2518fd_SELECT
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[0]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[0])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[0])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[0]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [0]
|————————Node:[ Text: [
|————————Node:number_literal Text: 0
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[1]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[1])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[1])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[1]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [1]
|————————Node:[ Text: [
|————————Node:number_literal Text: 1
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:for_statement Text: for (i = 0; i < nBytes; i++) {
    spiReceiveBuffer[i + 2] = spi_readwrite(0x00);
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:assignment_expression Text: i = 0
|—————Node:identifier Text: i
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|————Node:binary_expression Text: i < nBytes
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:identifier Text: nBytes
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    spiReceiveBuffer[i + 2] = spi_readwrite(0x00);
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: spiReceiveBuffer[i + 2] = spi_readwrite(0x00);
|——————Node:assignment_expression Text: spiReceiveBuffer[i + 2] = spi_readwrite(0x00)
|———————Node:subscript_expression Text: spiReceiveBuffer[i + 2]
|————————Node:identifier Text: spiReceiveBuffer
|————————Node:subscript_argument_list Text: [i + 2]
|—————————Node:[ Text: [
|—————————Node:binary_expression Text: i + 2
|——————————Node:identifier Text: i
|——————————Node:+ Text: +
|——————————Node:number_literal Text: 2
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:call_expression Text: spi_readwrite(0x00)
|————————Node:identifier Text: spi_readwrite
|————————Node:argument_list Text: (0x00)
|—————————Node:( Text: (
|—————————Node:number_literal Text: 0x00
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: MCP2518fd_UNSELECT();
|————Node:call_expression Text: MCP2518fd_UNSELECT()
|—————Node:identifier Text: MCP2518fd_UNSELECT
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: SPI_HAS_TRANSACTION
|————Node:expression_statement Text: SPI_END();
|—————Node:call_expression Text: SPI_END()
|——————Node:identifier Text: SPI_END
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: delay(10);
|————Node:call_expression Text: delay(10)
|—————Node:identifier Text: delay
|—————Node:argument_list Text: (10)
|——————Node:( Text: (
|——————Node:number_literal Text: 10
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:for_statement Text: for (i = 0; i < nBytes; i++) {
    rxd[i] = spiReceiveBuffer[i + 2];
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:assignment_expression Text: i = 0
|—————Node:identifier Text: i
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|————Node:binary_expression Text: i < nBytes
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:identifier Text: nBytes
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    rxd[i] = spiReceiveBuffer[i + 2];
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: rxd[i] = spiReceiveBuffer[i + 2];
|——————Node:assignment_expression Text: rxd[i] = spiReceiveBuffer[i + 2]
|———————Node:subscript_expression Text: rxd[i]
|————————Node:identifier Text: rxd
|————————Node:subscript_argument_list Text: [i]
|—————————Node:[ Text: [
|—————————Node:identifier Text: i
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:subscript_expression Text: spiReceiveBuffer[i + 2]
|————————Node:identifier Text: spiReceiveBuffer
|————————Node:subscript_argument_list Text: [i + 2]
|—————————Node:[ Text: [
|—————————Node:binary_expression Text: i + 2
|——————————Node:identifier Text: i
|——————————Node:+ Text: +
|——————————Node:number_literal Text: 2
|—————————Node:] Text: ]
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_WriteByteArray(uint16_t address, uint8_t *txd,
                                           uint16_t nBytes) {
  uint16_t i;
  uint16_t spiTransferSize = nBytes + 2;
  int8_t spiTransferError = 0;

  // Compose command
  spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
  spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);
  // Add data
  for (i = 2; i < spiTransferSize; i++) {
    spiTransmitBuffer[i] = txd[i - 2];
  }

#ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
  MCP2518fd_SELECT();
  spi_readwrite(spiTransmitBuffer[0]);
  spi_readwrite(spiTransmitBuffer[1]);
  for (i = 2; i < spiTransferSize; i++) {
    spi_readwrite(spiTransmitBuffer[i]);
  }
  MCP2518fd_UNSELECT();
#ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
  delay(10);

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_WriteByteArray(uint16_t address, uint8_t *txd,
                                           uint16_t nBytes)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_WriteByteArray
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_WriteByteArray
|———Node:parameter_list Text: (uint16_t address, uint8_t *txd,
                                           uint16_t nBytes)
|————Node:( Text: (
|————Node:parameter_declaration Text: uint16_t address
|—————Node:primitive_type Text: uint16_t
|—————Node:identifier Text: address
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint8_t *txd
|—————Node:primitive_type Text: uint8_t
|—————Node:pointer_declarator Text: *txd
|——————Node:* Text: *
|——————Node:identifier Text: txd
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint16_t nBytes
|—————Node:primitive_type Text: uint16_t
|—————Node:identifier Text: nBytes
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint16_t i;
  uint16_t spiTransferSize = nBytes + 2;
  int8_t spiTransferError = 0;

  // Compose command
  spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
  spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);
  // Add data
  for (i = 2; i < spiTransferSize; i++) {
    spiTransmitBuffer[i] = txd[i - 2];
  }

#ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
  MCP2518fd_SELECT();
  spi_readwrite(spiTransmitBuffer[0]);
  spi_readwrite(spiTransmitBuffer[1]);
  for (i = 2; i < spiTransferSize; i++) {
    spi_readwrite(spiTransmitBuffer[i]);
  }
  MCP2518fd_UNSELECT();
#ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
  delay(10);

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: uint16_t i;
|————Node:primitive_type Text: uint16_t
|————Node:identifier Text: i
|————Node:; Text: ;
|———Node:declaration Text: uint16_t spiTransferSize = nBytes + 2;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: spiTransferSize = nBytes + 2
|—————Node:identifier Text: spiTransferSize
|—————Node:= Text: =
|—————Node:binary_expression Text: nBytes + 2
|——————Node:identifier Text: nBytes
|——————Node:+ Text: +
|——————Node:number_literal Text: 2
|————Node:; Text: ;
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
|————Node:assignment_expression Text: spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF))
|—————Node:subscript_expression Text: spiTransmitBuffer[0]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:cast_expression Text: (uint8_t)((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF))
|——————Node:( Text: (
|——————Node:type_descriptor Text: uint8_t
|———————Node:primitive_type Text: uint8_t
|——————Node:) Text: )
|——————Node:parenthesized_expression Text: ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF))
|———————Node:( Text: (
|———————Node:binary_expression Text: (cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF)
|————————Node:parenthesized_expression Text: (cINSTRUCTION_WRITE << 4)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: cINSTRUCTION_WRITE << 4
|——————————Node:identifier Text: cINSTRUCTION_WRITE
|——————————Node:<< Text: <<
|——————————Node:number_literal Text: 4
|—————————Node:) Text: )
|————————Node:+ Text: +
|————————Node:parenthesized_expression Text: ((address >> 8) & 0xF)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: (address >> 8) & 0xF
|——————————Node:parenthesized_expression Text: (address >> 8)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: address >> 8
|————————————Node:identifier Text: address
|————————————Node:>> Text: >>
|————————————Node:number_literal Text: 8
|———————————Node:) Text: )
|——————————Node:& Text: &
|——————————Node:number_literal Text: 0xF
|—————————Node:) Text: )
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);
|————Node:assignment_expression Text: spiTransmitBuffer[1] = (uint8_t)(address & 0xFF)
|—————Node:subscript_expression Text: spiTransmitBuffer[1]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [1]
|———————Node:[ Text: [
|———————Node:number_literal Text: 1
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:cast_expression Text: (uint8_t)(address & 0xFF)
|——————Node:( Text: (
|——————Node:type_descriptor Text: uint8_t
|———————Node:primitive_type Text: uint8_t
|——————Node:) Text: )
|——————Node:parenthesized_expression Text: (address & 0xFF)
|———————Node:( Text: (
|———————Node:binary_expression Text: address & 0xFF
|————————Node:identifier Text: address
|————————Node:& Text: &
|————————Node:number_literal Text: 0xFF
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:for_statement Text: for (i = 2; i < spiTransferSize; i++) {
    spiTransmitBuffer[i] = txd[i - 2];
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:assignment_expression Text: i = 2
|—————Node:identifier Text: i
|—————Node:= Text: =
|—————Node:number_literal Text: 2
|————Node:; Text: ;
|————Node:binary_expression Text: i < spiTransferSize
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:identifier Text: spiTransferSize
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    spiTransmitBuffer[i] = txd[i - 2];
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: spiTransmitBuffer[i] = txd[i - 2];
|——————Node:assignment_expression Text: spiTransmitBuffer[i] = txd[i - 2]
|———————Node:subscript_expression Text: spiTransmitBuffer[i]
|————————Node:identifier Text: spiTransmitBuffer
|————————Node:subscript_argument_list Text: [i]
|—————————Node:[ Text: [
|—————————Node:identifier Text: i
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:subscript_expression Text: txd[i - 2]
|————————Node:identifier Text: txd
|————————Node:subscript_argument_list Text: [i - 2]
|—————————Node:[ Text: [
|—————————Node:binary_expression Text: i - 2
|——————————Node:identifier Text: i
|——————————Node:- Text: -
|——————————Node:number_literal Text: 2
|—————————Node:] Text: ]
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:preproc_ifdef Text: #ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: SPI_HAS_TRANSACTION
|————Node:expression_statement Text: SPI_BEGIN();
|—————Node:call_expression Text: SPI_BEGIN()
|——————Node:identifier Text: SPI_BEGIN
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: MCP2518fd_SELECT();
|————Node:call_expression Text: MCP2518fd_SELECT()
|—————Node:identifier Text: MCP2518fd_SELECT
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[0]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[0])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[0])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[0]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [0]
|————————Node:[ Text: [
|————————Node:number_literal Text: 0
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[1]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[1])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[1])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[1]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [1]
|————————Node:[ Text: [
|————————Node:number_literal Text: 1
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:for_statement Text: for (i = 2; i < spiTransferSize; i++) {
    spi_readwrite(spiTransmitBuffer[i]);
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:assignment_expression Text: i = 2
|—————Node:identifier Text: i
|—————Node:= Text: =
|—————Node:number_literal Text: 2
|————Node:; Text: ;
|————Node:binary_expression Text: i < spiTransferSize
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:identifier Text: spiTransferSize
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    spi_readwrite(spiTransmitBuffer[i]);
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[i]);
|——————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[i])
|———————Node:identifier Text: spi_readwrite
|———————Node:argument_list Text: (spiTransmitBuffer[i])
|————————Node:( Text: (
|————————Node:subscript_expression Text: spiTransmitBuffer[i]
|—————————Node:identifier Text: spiTransmitBuffer
|—————————Node:subscript_argument_list Text: [i]
|——————————Node:[ Text: [
|——————————Node:identifier Text: i
|——————————Node:] Text: ]
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: MCP2518fd_UNSELECT();
|————Node:call_expression Text: MCP2518fd_UNSELECT()
|—————Node:identifier Text: MCP2518fd_UNSELECT
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: SPI_HAS_TRANSACTION
|————Node:expression_statement Text: SPI_END();
|—————Node:call_expression Text: SPI_END()
|——————Node:identifier Text: SPI_END
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: delay(10);
|————Node:call_expression Text: delay(10)
|—————Node:identifier Text: delay
|—————Node:argument_list Text: (10)
|——————Node:( Text: (
|——————Node:number_literal Text: 10
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_WriteByteSafe(uint16_t address, uint8_t txd) {
  uint16_t crcResult = 0;
  uint16_t spiTransferSize = 5;
  int8_t spiTransferError = 0;

  // Compose command
  spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_WRITE_SAFE << 4) + ((address >> 8) & 0xF));
  spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);
  spiTransmitBuffer[2] = txd;

  // Add CRC
  crcResult = DRV_CANFDSPI_CalculateCRC16(spiTransmitBuffer, 3);
  spiTransmitBuffer[3] = (crcResult >> 8) & 0xFF;
  spiTransmitBuffer[4] = crcResult & 0xFF;

#ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
  MCP2518fd_SELECT();
  spi_readwrite(spiTransmitBuffer[0]);
  spi_readwrite(spiTransmitBuffer[1]);
  spi_readwrite(spiTransmitBuffer[2]);
  spi_readwrite(spiTransmitBuffer[3]);
  spi_readwrite(spiTransmitBuffer[4]);
  MCP2518fd_UNSELECT();
#ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
  delay(10);

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_WriteByteSafe(uint16_t address, uint8_t txd)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_WriteByteSafe
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_WriteByteSafe
|———Node:parameter_list Text: (uint16_t address, uint8_t txd)
|————Node:( Text: (
|————Node:parameter_declaration Text: uint16_t address
|—————Node:primitive_type Text: uint16_t
|—————Node:identifier Text: address
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint8_t txd
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: txd
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint16_t crcResult = 0;
  uint16_t spiTransferSize = 5;
  int8_t spiTransferError = 0;

  // Compose command
  spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_WRITE_SAFE << 4) + ((address >> 8) & 0xF));
  spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);
  spiTransmitBuffer[2] = txd;

  // Add CRC
  crcResult = DRV_CANFDSPI_CalculateCRC16(spiTransmitBuffer, 3);
  spiTransmitBuffer[3] = (crcResult >> 8) & 0xFF;
  spiTransmitBuffer[4] = crcResult & 0xFF;

#ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
  MCP2518fd_SELECT();
  spi_readwrite(spiTransmitBuffer[0]);
  spi_readwrite(spiTransmitBuffer[1]);
  spi_readwrite(spiTransmitBuffer[2]);
  spi_readwrite(spiTransmitBuffer[3]);
  spi_readwrite(spiTransmitBuffer[4]);
  MCP2518fd_UNSELECT();
#ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
  delay(10);

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: uint16_t crcResult = 0;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: crcResult = 0
|—————Node:identifier Text: crcResult
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint16_t spiTransferSize = 5;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: spiTransferSize = 5
|—————Node:identifier Text: spiTransferSize
|—————Node:= Text: =
|—————Node:number_literal Text: 5
|————Node:; Text: ;
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_WRITE_SAFE << 4) + ((address >> 8) & 0xF));
|————Node:assignment_expression Text: spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_WRITE_SAFE << 4) + ((address >> 8) & 0xF))
|—————Node:subscript_expression Text: spiTransmitBuffer[0]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:cast_expression Text: (uint8_t)((cINSTRUCTION_WRITE_SAFE << 4) + ((address >> 8) & 0xF))
|——————Node:( Text: (
|——————Node:type_descriptor Text: uint8_t
|———————Node:primitive_type Text: uint8_t
|——————Node:) Text: )
|——————Node:parenthesized_expression Text: ((cINSTRUCTION_WRITE_SAFE << 4) + ((address >> 8) & 0xF))
|———————Node:( Text: (
|———————Node:binary_expression Text: (cINSTRUCTION_WRITE_SAFE << 4) + ((address >> 8) & 0xF)
|————————Node:parenthesized_expression Text: (cINSTRUCTION_WRITE_SAFE << 4)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: cINSTRUCTION_WRITE_SAFE << 4
|——————————Node:identifier Text: cINSTRUCTION_WRITE_SAFE
|——————————Node:<< Text: <<
|——————————Node:number_literal Text: 4
|—————————Node:) Text: )
|————————Node:+ Text: +
|————————Node:parenthesized_expression Text: ((address >> 8) & 0xF)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: (address >> 8) & 0xF
|——————————Node:parenthesized_expression Text: (address >> 8)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: address >> 8
|————————————Node:identifier Text: address
|————————————Node:>> Text: >>
|————————————Node:number_literal Text: 8
|———————————Node:) Text: )
|——————————Node:& Text: &
|——————————Node:number_literal Text: 0xF
|—————————Node:) Text: )
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);
|————Node:assignment_expression Text: spiTransmitBuffer[1] = (uint8_t)(address & 0xFF)
|—————Node:subscript_expression Text: spiTransmitBuffer[1]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [1]
|———————Node:[ Text: [
|———————Node:number_literal Text: 1
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:cast_expression Text: (uint8_t)(address & 0xFF)
|——————Node:( Text: (
|——————Node:type_descriptor Text: uint8_t
|———————Node:primitive_type Text: uint8_t
|——————Node:) Text: )
|——————Node:parenthesized_expression Text: (address & 0xFF)
|———————Node:( Text: (
|———————Node:binary_expression Text: address & 0xFF
|————————Node:identifier Text: address
|————————Node:& Text: &
|————————Node:number_literal Text: 0xFF
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransmitBuffer[2] = txd;
|————Node:assignment_expression Text: spiTransmitBuffer[2] = txd
|—————Node:subscript_expression Text: spiTransmitBuffer[2]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [2]
|———————Node:[ Text: [
|———————Node:number_literal Text: 2
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:identifier Text: txd
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: crcResult = DRV_CANFDSPI_CalculateCRC16(spiTransmitBuffer, 3);
|————Node:assignment_expression Text: crcResult = DRV_CANFDSPI_CalculateCRC16(spiTransmitBuffer, 3)
|—————Node:identifier Text: crcResult
|—————Node:= Text: =
|—————Node:call_expression Text: DRV_CANFDSPI_CalculateCRC16(spiTransmitBuffer, 3)
|——————Node:identifier Text: DRV_CANFDSPI_CalculateCRC16
|——————Node:argument_list Text: (spiTransmitBuffer, 3)
|———————Node:( Text: (
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:, Text: ,
|———————Node:number_literal Text: 3
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransmitBuffer[3] = (crcResult >> 8) & 0xFF;
|————Node:assignment_expression Text: spiTransmitBuffer[3] = (crcResult >> 8) & 0xFF
|—————Node:subscript_expression Text: spiTransmitBuffer[3]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [3]
|———————Node:[ Text: [
|———————Node:number_literal Text: 3
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:binary_expression Text: (crcResult >> 8) & 0xFF
|——————Node:parenthesized_expression Text: (crcResult >> 8)
|———————Node:( Text: (
|———————Node:binary_expression Text: crcResult >> 8
|————————Node:identifier Text: crcResult
|————————Node:>> Text: >>
|————————Node:number_literal Text: 8
|———————Node:) Text: )
|——————Node:& Text: &
|——————Node:number_literal Text: 0xFF
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransmitBuffer[4] = crcResult & 0xFF;
|————Node:assignment_expression Text: spiTransmitBuffer[4] = crcResult & 0xFF
|—————Node:subscript_expression Text: spiTransmitBuffer[4]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [4]
|———————Node:[ Text: [
|———————Node:number_literal Text: 4
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:binary_expression Text: crcResult & 0xFF
|——————Node:identifier Text: crcResult
|——————Node:& Text: &
|——————Node:number_literal Text: 0xFF
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: SPI_HAS_TRANSACTION
|————Node:expression_statement Text: SPI_BEGIN();
|—————Node:call_expression Text: SPI_BEGIN()
|——————Node:identifier Text: SPI_BEGIN
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: MCP2518fd_SELECT();
|————Node:call_expression Text: MCP2518fd_SELECT()
|—————Node:identifier Text: MCP2518fd_SELECT
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[0]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[0])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[0])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[0]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [0]
|————————Node:[ Text: [
|————————Node:number_literal Text: 0
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[1]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[1])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[1])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[1]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [1]
|————————Node:[ Text: [
|————————Node:number_literal Text: 1
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[2]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[2])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[2])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[2]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [2]
|————————Node:[ Text: [
|————————Node:number_literal Text: 2
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[3]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[3])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[3])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[3]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [3]
|————————Node:[ Text: [
|————————Node:number_literal Text: 3
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[4]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[4])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[4])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[4]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [4]
|————————Node:[ Text: [
|————————Node:number_literal Text: 4
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: MCP2518fd_UNSELECT();
|————Node:call_expression Text: MCP2518fd_UNSELECT()
|—————Node:identifier Text: MCP2518fd_UNSELECT
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: SPI_HAS_TRANSACTION
|————Node:expression_statement Text: SPI_END();
|—————Node:call_expression Text: SPI_END()
|——————Node:identifier Text: SPI_END
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: delay(10);
|————Node:call_expression Text: delay(10)
|—————Node:identifier Text: delay
|—————Node:argument_list Text: (10)
|——————Node:( Text: (
|——————Node:number_literal Text: 10
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_WriteWordSafe(uint16_t address, uint32_t txd) {
  uint8_t i;
  uint16_t crcResult = 0;
  uint16_t spiTransferSize = 8;
  int8_t spiTransferError = 0;

  // Compose command
  spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_WRITE_SAFE << 4) + ((address >> 8) & 0xF));
  spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);

  // Split word into 4 bytes and add them to buffer
  for (i = 0; i < 4; i++) {
    spiTransmitBuffer[i + 2] = (uint8_t)((txd >> (i * 8)) & 0xFF);
  }

  // Add CRC
  crcResult = DRV_CANFDSPI_CalculateCRC16(spiTransmitBuffer, 6);
  spiTransmitBuffer[6] = (crcResult >> 8) & 0xFF;
  spiTransmitBuffer[7] = crcResult & 0xFF;

#ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
  MCP2518fd_SELECT();
  spi_readwrite(spiTransmitBuffer[0]);
  spi_readwrite(spiTransmitBuffer[1]);
  spi_readwrite(spiTransmitBuffer[2]);
  spi_readwrite(spiTransmitBuffer[3]);
  spi_readwrite(spiTransmitBuffer[4]);
  spi_readwrite(spiTransmitBuffer[5]);
  spi_readwrite(spiTransmitBuffer[6]);
  spi_readwrite(spiTransmitBuffer[7]);
  MCP2518fd_UNSELECT();
#ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
  delay(10);

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_WriteWordSafe(uint16_t address, uint32_t txd)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_WriteWordSafe
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_WriteWordSafe
|———Node:parameter_list Text: (uint16_t address, uint32_t txd)
|————Node:( Text: (
|————Node:parameter_declaration Text: uint16_t address
|—————Node:primitive_type Text: uint16_t
|—————Node:identifier Text: address
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint32_t txd
|—————Node:primitive_type Text: uint32_t
|—————Node:identifier Text: txd
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint8_t i;
  uint16_t crcResult = 0;
  uint16_t spiTransferSize = 8;
  int8_t spiTransferError = 0;

  // Compose command
  spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_WRITE_SAFE << 4) + ((address >> 8) & 0xF));
  spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);

  // Split word into 4 bytes and add them to buffer
  for (i = 0; i < 4; i++) {
    spiTransmitBuffer[i + 2] = (uint8_t)((txd >> (i * 8)) & 0xFF);
  }

  // Add CRC
  crcResult = DRV_CANFDSPI_CalculateCRC16(spiTransmitBuffer, 6);
  spiTransmitBuffer[6] = (crcResult >> 8) & 0xFF;
  spiTransmitBuffer[7] = crcResult & 0xFF;

#ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
  MCP2518fd_SELECT();
  spi_readwrite(spiTransmitBuffer[0]);
  spi_readwrite(spiTransmitBuffer[1]);
  spi_readwrite(spiTransmitBuffer[2]);
  spi_readwrite(spiTransmitBuffer[3]);
  spi_readwrite(spiTransmitBuffer[4]);
  spi_readwrite(spiTransmitBuffer[5]);
  spi_readwrite(spiTransmitBuffer[6]);
  spi_readwrite(spiTransmitBuffer[7]);
  MCP2518fd_UNSELECT();
#ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
  delay(10);

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: uint8_t i;
|————Node:primitive_type Text: uint8_t
|————Node:identifier Text: i
|————Node:; Text: ;
|———Node:declaration Text: uint16_t crcResult = 0;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: crcResult = 0
|—————Node:identifier Text: crcResult
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint16_t spiTransferSize = 8;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: spiTransferSize = 8
|—————Node:identifier Text: spiTransferSize
|—————Node:= Text: =
|—————Node:number_literal Text: 8
|————Node:; Text: ;
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_WRITE_SAFE << 4) + ((address >> 8) & 0xF));
|————Node:assignment_expression Text: spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_WRITE_SAFE << 4) + ((address >> 8) & 0xF))
|—————Node:subscript_expression Text: spiTransmitBuffer[0]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:cast_expression Text: (uint8_t)((cINSTRUCTION_WRITE_SAFE << 4) + ((address >> 8) & 0xF))
|——————Node:( Text: (
|——————Node:type_descriptor Text: uint8_t
|———————Node:primitive_type Text: uint8_t
|——————Node:) Text: )
|——————Node:parenthesized_expression Text: ((cINSTRUCTION_WRITE_SAFE << 4) + ((address >> 8) & 0xF))
|———————Node:( Text: (
|———————Node:binary_expression Text: (cINSTRUCTION_WRITE_SAFE << 4) + ((address >> 8) & 0xF)
|————————Node:parenthesized_expression Text: (cINSTRUCTION_WRITE_SAFE << 4)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: cINSTRUCTION_WRITE_SAFE << 4
|——————————Node:identifier Text: cINSTRUCTION_WRITE_SAFE
|——————————Node:<< Text: <<
|——————————Node:number_literal Text: 4
|—————————Node:) Text: )
|————————Node:+ Text: +
|————————Node:parenthesized_expression Text: ((address >> 8) & 0xF)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: (address >> 8) & 0xF
|——————————Node:parenthesized_expression Text: (address >> 8)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: address >> 8
|————————————Node:identifier Text: address
|————————————Node:>> Text: >>
|————————————Node:number_literal Text: 8
|———————————Node:) Text: )
|——————————Node:& Text: &
|——————————Node:number_literal Text: 0xF
|—————————Node:) Text: )
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);
|————Node:assignment_expression Text: spiTransmitBuffer[1] = (uint8_t)(address & 0xFF)
|—————Node:subscript_expression Text: spiTransmitBuffer[1]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [1]
|———————Node:[ Text: [
|———————Node:number_literal Text: 1
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:cast_expression Text: (uint8_t)(address & 0xFF)
|——————Node:( Text: (
|——————Node:type_descriptor Text: uint8_t
|———————Node:primitive_type Text: uint8_t
|——————Node:) Text: )
|——————Node:parenthesized_expression Text: (address & 0xFF)
|———————Node:( Text: (
|———————Node:binary_expression Text: address & 0xFF
|————————Node:identifier Text: address
|————————Node:& Text: &
|————————Node:number_literal Text: 0xFF
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:for_statement Text: for (i = 0; i < 4; i++) {
    spiTransmitBuffer[i + 2] = (uint8_t)((txd >> (i * 8)) & 0xFF);
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:assignment_expression Text: i = 0
|—————Node:identifier Text: i
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|————Node:binary_expression Text: i < 4
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:number_literal Text: 4
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    spiTransmitBuffer[i + 2] = (uint8_t)((txd >> (i * 8)) & 0xFF);
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: spiTransmitBuffer[i + 2] = (uint8_t)((txd >> (i * 8)) & 0xFF);
|——————Node:assignment_expression Text: spiTransmitBuffer[i + 2] = (uint8_t)((txd >> (i * 8)) & 0xFF)
|———————Node:subscript_expression Text: spiTransmitBuffer[i + 2]
|————————Node:identifier Text: spiTransmitBuffer
|————————Node:subscript_argument_list Text: [i + 2]
|—————————Node:[ Text: [
|—————————Node:binary_expression Text: i + 2
|——————————Node:identifier Text: i
|——————————Node:+ Text: +
|——————————Node:number_literal Text: 2
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:cast_expression Text: (uint8_t)((txd >> (i * 8)) & 0xFF)
|————————Node:( Text: (
|————————Node:type_descriptor Text: uint8_t
|—————————Node:primitive_type Text: uint8_t
|————————Node:) Text: )
|————————Node:parenthesized_expression Text: ((txd >> (i * 8)) & 0xFF)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: (txd >> (i * 8)) & 0xFF
|——————————Node:parenthesized_expression Text: (txd >> (i * 8))
|———————————Node:( Text: (
|———————————Node:binary_expression Text: txd >> (i * 8)
|————————————Node:identifier Text: txd
|————————————Node:>> Text: >>
|————————————Node:parenthesized_expression Text: (i * 8)
|—————————————Node:( Text: (
|—————————————Node:binary_expression Text: i * 8
|——————————————Node:identifier Text: i
|——————————————Node:* Text: *
|——————————————Node:number_literal Text: 8
|—————————————Node:) Text: )
|———————————Node:) Text: )
|——————————Node:& Text: &
|——————————Node:number_literal Text: 0xFF
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:expression_statement Text: crcResult = DRV_CANFDSPI_CalculateCRC16(spiTransmitBuffer, 6);
|————Node:assignment_expression Text: crcResult = DRV_CANFDSPI_CalculateCRC16(spiTransmitBuffer, 6)
|—————Node:identifier Text: crcResult
|—————Node:= Text: =
|—————Node:call_expression Text: DRV_CANFDSPI_CalculateCRC16(spiTransmitBuffer, 6)
|——————Node:identifier Text: DRV_CANFDSPI_CalculateCRC16
|——————Node:argument_list Text: (spiTransmitBuffer, 6)
|———————Node:( Text: (
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:, Text: ,
|———————Node:number_literal Text: 6
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransmitBuffer[6] = (crcResult >> 8) & 0xFF;
|————Node:assignment_expression Text: spiTransmitBuffer[6] = (crcResult >> 8) & 0xFF
|—————Node:subscript_expression Text: spiTransmitBuffer[6]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [6]
|———————Node:[ Text: [
|———————Node:number_literal Text: 6
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:binary_expression Text: (crcResult >> 8) & 0xFF
|——————Node:parenthesized_expression Text: (crcResult >> 8)
|———————Node:( Text: (
|———————Node:binary_expression Text: crcResult >> 8
|————————Node:identifier Text: crcResult
|————————Node:>> Text: >>
|————————Node:number_literal Text: 8
|———————Node:) Text: )
|——————Node:& Text: &
|——————Node:number_literal Text: 0xFF
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransmitBuffer[7] = crcResult & 0xFF;
|————Node:assignment_expression Text: spiTransmitBuffer[7] = crcResult & 0xFF
|—————Node:subscript_expression Text: spiTransmitBuffer[7]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [7]
|———————Node:[ Text: [
|———————Node:number_literal Text: 7
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:binary_expression Text: crcResult & 0xFF
|——————Node:identifier Text: crcResult
|——————Node:& Text: &
|——————Node:number_literal Text: 0xFF
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: SPI_HAS_TRANSACTION
|————Node:expression_statement Text: SPI_BEGIN();
|—————Node:call_expression Text: SPI_BEGIN()
|——————Node:identifier Text: SPI_BEGIN
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: MCP2518fd_SELECT();
|————Node:call_expression Text: MCP2518fd_SELECT()
|—————Node:identifier Text: MCP2518fd_SELECT
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[0]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[0])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[0])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[0]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [0]
|————————Node:[ Text: [
|————————Node:number_literal Text: 0
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[1]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[1])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[1])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[1]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [1]
|————————Node:[ Text: [
|————————Node:number_literal Text: 1
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[2]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[2])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[2])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[2]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [2]
|————————Node:[ Text: [
|————————Node:number_literal Text: 2
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[3]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[3])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[3])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[3]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [3]
|————————Node:[ Text: [
|————————Node:number_literal Text: 3
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[4]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[4])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[4])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[4]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [4]
|————————Node:[ Text: [
|————————Node:number_literal Text: 4
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[5]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[5])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[5])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[5]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [5]
|————————Node:[ Text: [
|————————Node:number_literal Text: 5
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[6]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[6])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[6])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[6]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [6]
|————————Node:[ Text: [
|————————Node:number_literal Text: 6
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[7]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[7])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[7])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[7]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [7]
|————————Node:[ Text: [
|————————Node:number_literal Text: 7
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: MCP2518fd_UNSELECT();
|————Node:call_expression Text: MCP2518fd_UNSELECT()
|—————Node:identifier Text: MCP2518fd_UNSELECT
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: SPI_HAS_TRANSACTION
|————Node:expression_statement Text: SPI_END();
|—————Node:call_expression Text: SPI_END()
|——————Node:identifier Text: SPI_END
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: delay(10);
|————Node:call_expression Text: delay(10)
|—————Node:identifier Text: delay
|—————Node:argument_list Text: (10)
|——————Node:( Text: (
|——————Node:number_literal Text: 10
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_ReadByteArrayWithCRC(uint16_t address, uint8_t *rxd,
                                                 uint16_t nBytes, bool fromRam,
                                                 bool *crcIsCorrect) {
  uint8_t i;
  uint16_t crcFromSpiSlave = 0;
  uint16_t crcAtController = 0;
  uint16_t spiTransferSize =
      nBytes + 5; // first two bytes for sending command & address, third for
                  // size, last two bytes for CRC
  int8_t spiTransferError = 0;

  // Compose command
  spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_READ_CRC << 4) + ((address >> 8) & 0xF));
  spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);
  if (fromRam) {
    spiTransmitBuffer[2] = nBytes >> 2;
  } else {
    spiTransmitBuffer[2] = nBytes;
  }

  // Clear data
  for (i = 3; i < spiTransferSize; i++) {
    spiTransmitBuffer[i] = 0;
  }

#ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
  MCP2518fd_SELECT();
  spi_readwrite(spiTransmitBuffer[0]);
  spi_readwrite(spiTransmitBuffer[1]);
  spi_readwrite(spiTransmitBuffer[2]);
  for (i = 3; i < spiTransferSize; i++) {
    spiReceiveBuffer[i] = spi_readwrite(0x00);
  }
  MCP2518fd_UNSELECT();
#ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
  delay(10);

  // Get CRC from controller
  crcFromSpiSlave = (uint16_t)(spiReceiveBuffer[spiTransferSize - 2] << 8) +
                    (uint16_t)(spiReceiveBuffer[spiTransferSize - 1]);

  // Use the receive buffer to calculate CRC
  // First three bytes need to be command
  spiReceiveBuffer[0] = spiTransmitBuffer[0];
  spiReceiveBuffer[1] = spiTransmitBuffer[1];
  spiReceiveBuffer[2] = spiTransmitBuffer[2];
  crcAtController = DRV_CANFDSPI_CalculateCRC16(spiReceiveBuffer, nBytes + 3);

  // Compare CRC readings
  if (crcFromSpiSlave == crcAtController) {
    *crcIsCorrect = true;
  } else {
    *crcIsCorrect = false;
  }

  // Update data
  for (i = 0; i < nBytes; i++) {
    rxd[i] = spiReceiveBuffer[i + 3];
  }

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_ReadByteArrayWithCRC(uint16_t address, uint8_t *rxd,
                                                 uint16_t nBytes, bool fromRam,
                                                 bool *crcIsCorrect)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_ReadByteArrayWithCRC
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_ReadByteArrayWithCRC
|———Node:parameter_list Text: (uint16_t address, uint8_t *rxd,
                                                 uint16_t nBytes, bool fromRam,
                                                 bool *crcIsCorrect)
|————Node:( Text: (
|————Node:parameter_declaration Text: uint16_t address
|—————Node:primitive_type Text: uint16_t
|—————Node:identifier Text: address
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint8_t *rxd
|—————Node:primitive_type Text: uint8_t
|—————Node:pointer_declarator Text: *rxd
|——————Node:* Text: *
|——————Node:identifier Text: rxd
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint16_t nBytes
|—————Node:primitive_type Text: uint16_t
|—————Node:identifier Text: nBytes
|————Node:, Text: ,
|————Node:parameter_declaration Text: bool fromRam
|—————Node:primitive_type Text: bool
|—————Node:identifier Text: fromRam
|————Node:, Text: ,
|————Node:parameter_declaration Text: bool *crcIsCorrect
|—————Node:primitive_type Text: bool
|—————Node:pointer_declarator Text: *crcIsCorrect
|——————Node:* Text: *
|——————Node:identifier Text: crcIsCorrect
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint8_t i;
  uint16_t crcFromSpiSlave = 0;
  uint16_t crcAtController = 0;
  uint16_t spiTransferSize =
      nBytes + 5; // first two bytes for sending command & address, third for
                  // size, last two bytes for CRC
  int8_t spiTransferError = 0;

  // Compose command
  spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_READ_CRC << 4) + ((address >> 8) & 0xF));
  spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);
  if (fromRam) {
    spiTransmitBuffer[2] = nBytes >> 2;
  } else {
    spiTransmitBuffer[2] = nBytes;
  }

  // Clear data
  for (i = 3; i < spiTransferSize; i++) {
    spiTransmitBuffer[i] = 0;
  }

#ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
  MCP2518fd_SELECT();
  spi_readwrite(spiTransmitBuffer[0]);
  spi_readwrite(spiTransmitBuffer[1]);
  spi_readwrite(spiTransmitBuffer[2]);
  for (i = 3; i < spiTransferSize; i++) {
    spiReceiveBuffer[i] = spi_readwrite(0x00);
  }
  MCP2518fd_UNSELECT();
#ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
  delay(10);

  // Get CRC from controller
  crcFromSpiSlave = (uint16_t)(spiReceiveBuffer[spiTransferSize - 2] << 8) +
                    (uint16_t)(spiReceiveBuffer[spiTransferSize - 1]);

  // Use the receive buffer to calculate CRC
  // First three bytes need to be command
  spiReceiveBuffer[0] = spiTransmitBuffer[0];
  spiReceiveBuffer[1] = spiTransmitBuffer[1];
  spiReceiveBuffer[2] = spiTransmitBuffer[2];
  crcAtController = DRV_CANFDSPI_CalculateCRC16(spiReceiveBuffer, nBytes + 3);

  // Compare CRC readings
  if (crcFromSpiSlave == crcAtController) {
    *crcIsCorrect = true;
  } else {
    *crcIsCorrect = false;
  }

  // Update data
  for (i = 0; i < nBytes; i++) {
    rxd[i] = spiReceiveBuffer[i + 3];
  }

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: uint8_t i;
|————Node:primitive_type Text: uint8_t
|————Node:identifier Text: i
|————Node:; Text: ;
|———Node:declaration Text: uint16_t crcFromSpiSlave = 0;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: crcFromSpiSlave = 0
|—————Node:identifier Text: crcFromSpiSlave
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint16_t crcAtController = 0;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: crcAtController = 0
|—————Node:identifier Text: crcAtController
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint16_t spiTransferSize =
      nBytes + 5;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: spiTransferSize =
      nBytes + 5
|—————Node:identifier Text: spiTransferSize
|—————Node:= Text: =
|—————Node:binary_expression Text: nBytes + 5
|——————Node:identifier Text: nBytes
|——————Node:+ Text: +
|——————Node:number_literal Text: 5
|————Node:; Text: ;
|———Node:comment
|———Node:comment
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_READ_CRC << 4) + ((address >> 8) & 0xF));
|————Node:assignment_expression Text: spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_READ_CRC << 4) + ((address >> 8) & 0xF))
|—————Node:subscript_expression Text: spiTransmitBuffer[0]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:cast_expression Text: (uint8_t)((cINSTRUCTION_READ_CRC << 4) + ((address >> 8) & 0xF))
|——————Node:( Text: (
|——————Node:type_descriptor Text: uint8_t
|———————Node:primitive_type Text: uint8_t
|——————Node:) Text: )
|——————Node:parenthesized_expression Text: ((cINSTRUCTION_READ_CRC << 4) + ((address >> 8) & 0xF))
|———————Node:( Text: (
|———————Node:binary_expression Text: (cINSTRUCTION_READ_CRC << 4) + ((address >> 8) & 0xF)
|————————Node:parenthesized_expression Text: (cINSTRUCTION_READ_CRC << 4)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: cINSTRUCTION_READ_CRC << 4
|——————————Node:identifier Text: cINSTRUCTION_READ_CRC
|——————————Node:<< Text: <<
|——————————Node:number_literal Text: 4
|—————————Node:) Text: )
|————————Node:+ Text: +
|————————Node:parenthesized_expression Text: ((address >> 8) & 0xF)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: (address >> 8) & 0xF
|——————————Node:parenthesized_expression Text: (address >> 8)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: address >> 8
|————————————Node:identifier Text: address
|————————————Node:>> Text: >>
|————————————Node:number_literal Text: 8
|———————————Node:) Text: )
|——————————Node:& Text: &
|——————————Node:number_literal Text: 0xF
|—————————Node:) Text: )
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);
|————Node:assignment_expression Text: spiTransmitBuffer[1] = (uint8_t)(address & 0xFF)
|—————Node:subscript_expression Text: spiTransmitBuffer[1]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [1]
|———————Node:[ Text: [
|———————Node:number_literal Text: 1
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:cast_expression Text: (uint8_t)(address & 0xFF)
|——————Node:( Text: (
|——————Node:type_descriptor Text: uint8_t
|———————Node:primitive_type Text: uint8_t
|——————Node:) Text: )
|——————Node:parenthesized_expression Text: (address & 0xFF)
|———————Node:( Text: (
|———————Node:binary_expression Text: address & 0xFF
|————————Node:identifier Text: address
|————————Node:& Text: &
|————————Node:number_literal Text: 0xFF
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (fromRam) {
    spiTransmitBuffer[2] = nBytes >> 2;
  } else {
    spiTransmitBuffer[2] = nBytes;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (fromRam)
|—————Node:( Text: (
|—————Node:identifier Text: fromRam
|—————Node:) Text: )
|————Node:compound_statement Text: {
    spiTransmitBuffer[2] = nBytes >> 2;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: spiTransmitBuffer[2] = nBytes >> 2;
|——————Node:assignment_expression Text: spiTransmitBuffer[2] = nBytes >> 2
|———————Node:subscript_expression Text: spiTransmitBuffer[2]
|————————Node:identifier Text: spiTransmitBuffer
|————————Node:subscript_argument_list Text: [2]
|—————————Node:[ Text: [
|—————————Node:number_literal Text: 2
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:binary_expression Text: nBytes >> 2
|————————Node:identifier Text: nBytes
|————————Node:>> Text: >>
|————————Node:number_literal Text: 2
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else {
    spiTransmitBuffer[2] = nBytes;
  }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
    spiTransmitBuffer[2] = nBytes;
  }
|——————Node:{ Text: {
|——————Node:expression_statement Text: spiTransmitBuffer[2] = nBytes;
|———————Node:assignment_expression Text: spiTransmitBuffer[2] = nBytes
|————————Node:subscript_expression Text: spiTransmitBuffer[2]
|—————————Node:identifier Text: spiTransmitBuffer
|—————————Node:subscript_argument_list Text: [2]
|——————————Node:[ Text: [
|——————————Node:number_literal Text: 2
|——————————Node:] Text: ]
|————————Node:= Text: =
|————————Node:identifier Text: nBytes
|———————Node:; Text: ;
|——————Node:} Text: }
|———Node:comment
|———Node:for_statement Text: for (i = 3; i < spiTransferSize; i++) {
    spiTransmitBuffer[i] = 0;
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:assignment_expression Text: i = 3
|—————Node:identifier Text: i
|—————Node:= Text: =
|—————Node:number_literal Text: 3
|————Node:; Text: ;
|————Node:binary_expression Text: i < spiTransferSize
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:identifier Text: spiTransferSize
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    spiTransmitBuffer[i] = 0;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: spiTransmitBuffer[i] = 0;
|——————Node:assignment_expression Text: spiTransmitBuffer[i] = 0
|———————Node:subscript_expression Text: spiTransmitBuffer[i]
|————————Node:identifier Text: spiTransmitBuffer
|————————Node:subscript_argument_list Text: [i]
|—————————Node:[ Text: [
|—————————Node:identifier Text: i
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:number_literal Text: 0
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:preproc_ifdef Text: #ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: SPI_HAS_TRANSACTION
|————Node:expression_statement Text: SPI_BEGIN();
|—————Node:call_expression Text: SPI_BEGIN()
|——————Node:identifier Text: SPI_BEGIN
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: MCP2518fd_SELECT();
|————Node:call_expression Text: MCP2518fd_SELECT()
|—————Node:identifier Text: MCP2518fd_SELECT
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[0]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[0])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[0])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[0]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [0]
|————————Node:[ Text: [
|————————Node:number_literal Text: 0
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[1]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[1])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[1])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[1]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [1]
|————————Node:[ Text: [
|————————Node:number_literal Text: 1
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[2]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[2])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[2])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[2]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [2]
|————————Node:[ Text: [
|————————Node:number_literal Text: 2
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:for_statement Text: for (i = 3; i < spiTransferSize; i++) {
    spiReceiveBuffer[i] = spi_readwrite(0x00);
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:assignment_expression Text: i = 3
|—————Node:identifier Text: i
|—————Node:= Text: =
|—————Node:number_literal Text: 3
|————Node:; Text: ;
|————Node:binary_expression Text: i < spiTransferSize
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:identifier Text: spiTransferSize
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    spiReceiveBuffer[i] = spi_readwrite(0x00);
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: spiReceiveBuffer[i] = spi_readwrite(0x00);
|——————Node:assignment_expression Text: spiReceiveBuffer[i] = spi_readwrite(0x00)
|———————Node:subscript_expression Text: spiReceiveBuffer[i]
|————————Node:identifier Text: spiReceiveBuffer
|————————Node:subscript_argument_list Text: [i]
|—————————Node:[ Text: [
|—————————Node:identifier Text: i
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:call_expression Text: spi_readwrite(0x00)
|————————Node:identifier Text: spi_readwrite
|————————Node:argument_list Text: (0x00)
|—————————Node:( Text: (
|—————————Node:number_literal Text: 0x00
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: MCP2518fd_UNSELECT();
|————Node:call_expression Text: MCP2518fd_UNSELECT()
|—————Node:identifier Text: MCP2518fd_UNSELECT
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: SPI_HAS_TRANSACTION
|————Node:expression_statement Text: SPI_END();
|—————Node:call_expression Text: SPI_END()
|——————Node:identifier Text: SPI_END
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: delay(10);
|————Node:call_expression Text: delay(10)
|—————Node:identifier Text: delay
|—————Node:argument_list Text: (10)
|——————Node:( Text: (
|——————Node:number_literal Text: 10
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: crcFromSpiSlave = (uint16_t)(spiReceiveBuffer[spiTransferSize - 2] << 8) +
                    (uint16_t)(spiReceiveBuffer[spiTransferSize - 1]);
|————Node:assignment_expression Text: crcFromSpiSlave = (uint16_t)(spiReceiveBuffer[spiTransferSize - 2] << 8) +
                    (uint16_t)(spiReceiveBuffer[spiTransferSize - 1])
|—————Node:identifier Text: crcFromSpiSlave
|—————Node:= Text: =
|—————Node:binary_expression Text: (uint16_t)(spiReceiveBuffer[spiTransferSize - 2] << 8) +
                    (uint16_t)(spiReceiveBuffer[spiTransferSize - 1])
|——————Node:cast_expression Text: (uint16_t)(spiReceiveBuffer[spiTransferSize - 2] << 8)
|———————Node:( Text: (
|———————Node:type_descriptor Text: uint16_t
|————————Node:primitive_type Text: uint16_t
|———————Node:) Text: )
|———————Node:parenthesized_expression Text: (spiReceiveBuffer[spiTransferSize - 2] << 8)
|————————Node:( Text: (
|————————Node:binary_expression Text: spiReceiveBuffer[spiTransferSize - 2] << 8
|—————————Node:subscript_expression Text: spiReceiveBuffer[spiTransferSize - 2]
|——————————Node:identifier Text: spiReceiveBuffer
|——————————Node:subscript_argument_list Text: [spiTransferSize - 2]
|———————————Node:[ Text: [
|———————————Node:binary_expression Text: spiTransferSize - 2
|————————————Node:identifier Text: spiTransferSize
|————————————Node:- Text: -
|————————————Node:number_literal Text: 2
|———————————Node:] Text: ]
|—————————Node:<< Text: <<
|—————————Node:number_literal Text: 8
|————————Node:) Text: )
|——————Node:+ Text: +
|——————Node:cast_expression Text: (uint16_t)(spiReceiveBuffer[spiTransferSize - 1])
|———————Node:( Text: (
|———————Node:type_descriptor Text: uint16_t
|————————Node:primitive_type Text: uint16_t
|———————Node:) Text: )
|———————Node:parenthesized_expression Text: (spiReceiveBuffer[spiTransferSize - 1])
|————————Node:( Text: (
|————————Node:subscript_expression Text: spiReceiveBuffer[spiTransferSize - 1]
|—————————Node:identifier Text: spiReceiveBuffer
|—————————Node:subscript_argument_list Text: [spiTransferSize - 1]
|——————————Node:[ Text: [
|——————————Node:binary_expression Text: spiTransferSize - 1
|———————————Node:identifier Text: spiTransferSize
|———————————Node:- Text: -
|———————————Node:number_literal Text: 1
|——————————Node:] Text: ]
|————————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:comment
|———Node:expression_statement Text: spiReceiveBuffer[0] = spiTransmitBuffer[0];
|————Node:assignment_expression Text: spiReceiveBuffer[0] = spiTransmitBuffer[0]
|—————Node:subscript_expression Text: spiReceiveBuffer[0]
|——————Node:identifier Text: spiReceiveBuffer
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:subscript_expression Text: spiTransmitBuffer[0]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: spiReceiveBuffer[1] = spiTransmitBuffer[1];
|————Node:assignment_expression Text: spiReceiveBuffer[1] = spiTransmitBuffer[1]
|—————Node:subscript_expression Text: spiReceiveBuffer[1]
|——————Node:identifier Text: spiReceiveBuffer
|——————Node:subscript_argument_list Text: [1]
|———————Node:[ Text: [
|———————Node:number_literal Text: 1
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:subscript_expression Text: spiTransmitBuffer[1]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [1]
|———————Node:[ Text: [
|———————Node:number_literal Text: 1
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: spiReceiveBuffer[2] = spiTransmitBuffer[2];
|————Node:assignment_expression Text: spiReceiveBuffer[2] = spiTransmitBuffer[2]
|—————Node:subscript_expression Text: spiReceiveBuffer[2]
|——————Node:identifier Text: spiReceiveBuffer
|——————Node:subscript_argument_list Text: [2]
|———————Node:[ Text: [
|———————Node:number_literal Text: 2
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:subscript_expression Text: spiTransmitBuffer[2]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [2]
|———————Node:[ Text: [
|———————Node:number_literal Text: 2
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: crcAtController = DRV_CANFDSPI_CalculateCRC16(spiReceiveBuffer, nBytes + 3);
|————Node:assignment_expression Text: crcAtController = DRV_CANFDSPI_CalculateCRC16(spiReceiveBuffer, nBytes + 3)
|—————Node:identifier Text: crcAtController
|—————Node:= Text: =
|—————Node:call_expression Text: DRV_CANFDSPI_CalculateCRC16(spiReceiveBuffer, nBytes + 3)
|——————Node:identifier Text: DRV_CANFDSPI_CalculateCRC16
|——————Node:argument_list Text: (spiReceiveBuffer, nBytes + 3)
|———————Node:( Text: (
|———————Node:identifier Text: spiReceiveBuffer
|———————Node:, Text: ,
|———————Node:binary_expression Text: nBytes + 3
|————————Node:identifier Text: nBytes
|————————Node:+ Text: +
|————————Node:number_literal Text: 3
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:if_statement Text: if (crcFromSpiSlave == crcAtController) {
    *crcIsCorrect = true;
  } else {
    *crcIsCorrect = false;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (crcFromSpiSlave == crcAtController)
|—————Node:( Text: (
|—————Node:binary_expression Text: crcFromSpiSlave == crcAtController
|——————Node:identifier Text: crcFromSpiSlave
|——————Node:== Text: ==
|——————Node:identifier Text: crcAtController
|—————Node:) Text: )
|————Node:compound_statement Text: {
    *crcIsCorrect = true;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: *crcIsCorrect = true;
|——————Node:assignment_expression Text: *crcIsCorrect = true
|———————Node:pointer_expression Text: *crcIsCorrect
|————————Node:* Text: *
|————————Node:identifier Text: crcIsCorrect
|———————Node:= Text: =
|———————Node:true Text: true
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else {
    *crcIsCorrect = false;
  }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
    *crcIsCorrect = false;
  }
|——————Node:{ Text: {
|——————Node:expression_statement Text: *crcIsCorrect = false;
|———————Node:assignment_expression Text: *crcIsCorrect = false
|————————Node:pointer_expression Text: *crcIsCorrect
|—————————Node:* Text: *
|—————————Node:identifier Text: crcIsCorrect
|————————Node:= Text: =
|————————Node:false Text: false
|———————Node:; Text: ;
|——————Node:} Text: }
|———Node:comment
|———Node:for_statement Text: for (i = 0; i < nBytes; i++) {
    rxd[i] = spiReceiveBuffer[i + 3];
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:assignment_expression Text: i = 0
|—————Node:identifier Text: i
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|————Node:binary_expression Text: i < nBytes
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:identifier Text: nBytes
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    rxd[i] = spiReceiveBuffer[i + 3];
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: rxd[i] = spiReceiveBuffer[i + 3];
|——————Node:assignment_expression Text: rxd[i] = spiReceiveBuffer[i + 3]
|———————Node:subscript_expression Text: rxd[i]
|————————Node:identifier Text: rxd
|————————Node:subscript_argument_list Text: [i]
|—————————Node:[ Text: [
|—————————Node:identifier Text: i
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:subscript_expression Text: spiReceiveBuffer[i + 3]
|————————Node:identifier Text: spiReceiveBuffer
|————————Node:subscript_argument_list Text: [i + 3]
|—————————Node:[ Text: [
|—————————Node:binary_expression Text: i + 3
|——————————Node:identifier Text: i
|——————————Node:+ Text: +
|——————————Node:number_literal Text: 3
|—————————Node:] Text: ]
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_WriteByteArrayWithCRC(uint16_t address,
                                                  uint8_t *txd, uint16_t nBytes,
                                                  bool fromRam) {
  uint16_t i;
  uint16_t crcResult = 0;
  uint16_t spiTransferSize = nBytes + 5;
  int8_t spiTransferError = 0;

  // Compose command
  spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_WRITE_CRC << 4) + ((address >> 8) & 0xF));
  spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);
  if (fromRam) {
    spiTransmitBuffer[2] = nBytes >> 2;
  } else {
    spiTransmitBuffer[2] = nBytes;
  }

  // Add data
  for (i = 0; i < nBytes; i++) {
    spiTransmitBuffer[i + 3] = txd[i];
  }

  // Add CRC
  crcResult =
      DRV_CANFDSPI_CalculateCRC16(spiTransmitBuffer, spiTransferSize - 2);
  spiTransmitBuffer[spiTransferSize - 2] = (uint8_t)((crcResult >> 8) & 0xFF);
  spiTransmitBuffer[spiTransferSize - 1] = (uint8_t)(crcResult & 0xFF);

#ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
  MCP2518fd_SELECT();
  spi_readwrite(spiTransmitBuffer[0]);
  spi_readwrite(spiTransmitBuffer[1]);
  spi_readwrite(spiTransmitBuffer[2]);
  for (i = 0; i < nBytes; i++) {
    spi_readwrite(spiTransmitBuffer[i + 3]);
  }
  spi_readwrite(spiTransmitBuffer[spiTransferSize - 2]);
  spi_readwrite(spiTransmitBuffer[spiTransferSize - 1]);
  MCP2518fd_UNSELECT();
#ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
  delay(10);

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_WriteByteArrayWithCRC(uint16_t address,
                                                  uint8_t *txd, uint16_t nBytes,
                                                  bool fromRam)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_WriteByteArrayWithCRC
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_WriteByteArrayWithCRC
|———Node:parameter_list Text: (uint16_t address,
                                                  uint8_t *txd, uint16_t nBytes,
                                                  bool fromRam)
|————Node:( Text: (
|————Node:parameter_declaration Text: uint16_t address
|—————Node:primitive_type Text: uint16_t
|—————Node:identifier Text: address
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint8_t *txd
|—————Node:primitive_type Text: uint8_t
|—————Node:pointer_declarator Text: *txd
|——————Node:* Text: *
|——————Node:identifier Text: txd
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint16_t nBytes
|—————Node:primitive_type Text: uint16_t
|—————Node:identifier Text: nBytes
|————Node:, Text: ,
|————Node:parameter_declaration Text: bool fromRam
|—————Node:primitive_type Text: bool
|—————Node:identifier Text: fromRam
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint16_t i;
  uint16_t crcResult = 0;
  uint16_t spiTransferSize = nBytes + 5;
  int8_t spiTransferError = 0;

  // Compose command
  spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_WRITE_CRC << 4) + ((address >> 8) & 0xF));
  spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);
  if (fromRam) {
    spiTransmitBuffer[2] = nBytes >> 2;
  } else {
    spiTransmitBuffer[2] = nBytes;
  }

  // Add data
  for (i = 0; i < nBytes; i++) {
    spiTransmitBuffer[i + 3] = txd[i];
  }

  // Add CRC
  crcResult =
      DRV_CANFDSPI_CalculateCRC16(spiTransmitBuffer, spiTransferSize - 2);
  spiTransmitBuffer[spiTransferSize - 2] = (uint8_t)((crcResult >> 8) & 0xFF);
  spiTransmitBuffer[spiTransferSize - 1] = (uint8_t)(crcResult & 0xFF);

#ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
  MCP2518fd_SELECT();
  spi_readwrite(spiTransmitBuffer[0]);
  spi_readwrite(spiTransmitBuffer[1]);
  spi_readwrite(spiTransmitBuffer[2]);
  for (i = 0; i < nBytes; i++) {
    spi_readwrite(spiTransmitBuffer[i + 3]);
  }
  spi_readwrite(spiTransmitBuffer[spiTransferSize - 2]);
  spi_readwrite(spiTransmitBuffer[spiTransferSize - 1]);
  MCP2518fd_UNSELECT();
#ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
  delay(10);

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: uint16_t i;
|————Node:primitive_type Text: uint16_t
|————Node:identifier Text: i
|————Node:; Text: ;
|———Node:declaration Text: uint16_t crcResult = 0;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: crcResult = 0
|—————Node:identifier Text: crcResult
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint16_t spiTransferSize = nBytes + 5;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: spiTransferSize = nBytes + 5
|—————Node:identifier Text: spiTransferSize
|—————Node:= Text: =
|—————Node:binary_expression Text: nBytes + 5
|——————Node:identifier Text: nBytes
|——————Node:+ Text: +
|——————Node:number_literal Text: 5
|————Node:; Text: ;
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_WRITE_CRC << 4) + ((address >> 8) & 0xF));
|————Node:assignment_expression Text: spiTransmitBuffer[0] =
      (uint8_t)((cINSTRUCTION_WRITE_CRC << 4) + ((address >> 8) & 0xF))
|—————Node:subscript_expression Text: spiTransmitBuffer[0]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:cast_expression Text: (uint8_t)((cINSTRUCTION_WRITE_CRC << 4) + ((address >> 8) & 0xF))
|——————Node:( Text: (
|——————Node:type_descriptor Text: uint8_t
|———————Node:primitive_type Text: uint8_t
|——————Node:) Text: )
|——————Node:parenthesized_expression Text: ((cINSTRUCTION_WRITE_CRC << 4) + ((address >> 8) & 0xF))
|———————Node:( Text: (
|———————Node:binary_expression Text: (cINSTRUCTION_WRITE_CRC << 4) + ((address >> 8) & 0xF)
|————————Node:parenthesized_expression Text: (cINSTRUCTION_WRITE_CRC << 4)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: cINSTRUCTION_WRITE_CRC << 4
|——————————Node:identifier Text: cINSTRUCTION_WRITE_CRC
|——————————Node:<< Text: <<
|——————————Node:number_literal Text: 4
|—————————Node:) Text: )
|————————Node:+ Text: +
|————————Node:parenthesized_expression Text: ((address >> 8) & 0xF)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: (address >> 8) & 0xF
|——————————Node:parenthesized_expression Text: (address >> 8)
|———————————Node:( Text: (
|———————————Node:binary_expression Text: address >> 8
|————————————Node:identifier Text: address
|————————————Node:>> Text: >>
|————————————Node:number_literal Text: 8
|———————————Node:) Text: )
|——————————Node:& Text: &
|——————————Node:number_literal Text: 0xF
|—————————Node:) Text: )
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransmitBuffer[1] = (uint8_t)(address & 0xFF);
|————Node:assignment_expression Text: spiTransmitBuffer[1] = (uint8_t)(address & 0xFF)
|—————Node:subscript_expression Text: spiTransmitBuffer[1]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [1]
|———————Node:[ Text: [
|———————Node:number_literal Text: 1
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:cast_expression Text: (uint8_t)(address & 0xFF)
|——————Node:( Text: (
|——————Node:type_descriptor Text: uint8_t
|———————Node:primitive_type Text: uint8_t
|——————Node:) Text: )
|——————Node:parenthesized_expression Text: (address & 0xFF)
|———————Node:( Text: (
|———————Node:binary_expression Text: address & 0xFF
|————————Node:identifier Text: address
|————————Node:& Text: &
|————————Node:number_literal Text: 0xFF
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (fromRam) {
    spiTransmitBuffer[2] = nBytes >> 2;
  } else {
    spiTransmitBuffer[2] = nBytes;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (fromRam)
|—————Node:( Text: (
|—————Node:identifier Text: fromRam
|—————Node:) Text: )
|————Node:compound_statement Text: {
    spiTransmitBuffer[2] = nBytes >> 2;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: spiTransmitBuffer[2] = nBytes >> 2;
|——————Node:assignment_expression Text: spiTransmitBuffer[2] = nBytes >> 2
|———————Node:subscript_expression Text: spiTransmitBuffer[2]
|————————Node:identifier Text: spiTransmitBuffer
|————————Node:subscript_argument_list Text: [2]
|—————————Node:[ Text: [
|—————————Node:number_literal Text: 2
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:binary_expression Text: nBytes >> 2
|————————Node:identifier Text: nBytes
|————————Node:>> Text: >>
|————————Node:number_literal Text: 2
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else {
    spiTransmitBuffer[2] = nBytes;
  }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
    spiTransmitBuffer[2] = nBytes;
  }
|——————Node:{ Text: {
|——————Node:expression_statement Text: spiTransmitBuffer[2] = nBytes;
|———————Node:assignment_expression Text: spiTransmitBuffer[2] = nBytes
|————————Node:subscript_expression Text: spiTransmitBuffer[2]
|—————————Node:identifier Text: spiTransmitBuffer
|—————————Node:subscript_argument_list Text: [2]
|——————————Node:[ Text: [
|——————————Node:number_literal Text: 2
|——————————Node:] Text: ]
|————————Node:= Text: =
|————————Node:identifier Text: nBytes
|———————Node:; Text: ;
|——————Node:} Text: }
|———Node:comment
|———Node:for_statement Text: for (i = 0; i < nBytes; i++) {
    spiTransmitBuffer[i + 3] = txd[i];
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:assignment_expression Text: i = 0
|—————Node:identifier Text: i
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|————Node:binary_expression Text: i < nBytes
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:identifier Text: nBytes
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    spiTransmitBuffer[i + 3] = txd[i];
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: spiTransmitBuffer[i + 3] = txd[i];
|——————Node:assignment_expression Text: spiTransmitBuffer[i + 3] = txd[i]
|———————Node:subscript_expression Text: spiTransmitBuffer[i + 3]
|————————Node:identifier Text: spiTransmitBuffer
|————————Node:subscript_argument_list Text: [i + 3]
|—————————Node:[ Text: [
|—————————Node:binary_expression Text: i + 3
|——————————Node:identifier Text: i
|——————————Node:+ Text: +
|——————————Node:number_literal Text: 3
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:subscript_expression Text: txd[i]
|————————Node:identifier Text: txd
|————————Node:subscript_argument_list Text: [i]
|—————————Node:[ Text: [
|—————————Node:identifier Text: i
|—————————Node:] Text: ]
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:expression_statement Text: crcResult =
      DRV_CANFDSPI_CalculateCRC16(spiTransmitBuffer, spiTransferSize - 2);
|————Node:assignment_expression Text: crcResult =
      DRV_CANFDSPI_CalculateCRC16(spiTransmitBuffer, spiTransferSize - 2)
|—————Node:identifier Text: crcResult
|—————Node:= Text: =
|—————Node:call_expression Text: DRV_CANFDSPI_CalculateCRC16(spiTransmitBuffer, spiTransferSize - 2)
|——————Node:identifier Text: DRV_CANFDSPI_CalculateCRC16
|——————Node:argument_list Text: (spiTransmitBuffer, spiTransferSize - 2)
|———————Node:( Text: (
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:, Text: ,
|———————Node:binary_expression Text: spiTransferSize - 2
|————————Node:identifier Text: spiTransferSize
|————————Node:- Text: -
|————————Node:number_literal Text: 2
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransmitBuffer[spiTransferSize - 2] = (uint8_t)((crcResult >> 8) & 0xFF);
|————Node:assignment_expression Text: spiTransmitBuffer[spiTransferSize - 2] = (uint8_t)((crcResult >> 8) & 0xFF)
|—————Node:subscript_expression Text: spiTransmitBuffer[spiTransferSize - 2]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [spiTransferSize - 2]
|———————Node:[ Text: [
|———————Node:binary_expression Text: spiTransferSize - 2
|————————Node:identifier Text: spiTransferSize
|————————Node:- Text: -
|————————Node:number_literal Text: 2
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:cast_expression Text: (uint8_t)((crcResult >> 8) & 0xFF)
|——————Node:( Text: (
|——————Node:type_descriptor Text: uint8_t
|———————Node:primitive_type Text: uint8_t
|——————Node:) Text: )
|——————Node:parenthesized_expression Text: ((crcResult >> 8) & 0xFF)
|———————Node:( Text: (
|———————Node:binary_expression Text: (crcResult >> 8) & 0xFF
|————————Node:parenthesized_expression Text: (crcResult >> 8)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: crcResult >> 8
|——————————Node:identifier Text: crcResult
|——————————Node:>> Text: >>
|——————————Node:number_literal Text: 8
|—————————Node:) Text: )
|————————Node:& Text: &
|————————Node:number_literal Text: 0xFF
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransmitBuffer[spiTransferSize - 1] = (uint8_t)(crcResult & 0xFF);
|————Node:assignment_expression Text: spiTransmitBuffer[spiTransferSize - 1] = (uint8_t)(crcResult & 0xFF)
|—————Node:subscript_expression Text: spiTransmitBuffer[spiTransferSize - 1]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [spiTransferSize - 1]
|———————Node:[ Text: [
|———————Node:binary_expression Text: spiTransferSize - 1
|————————Node:identifier Text: spiTransferSize
|————————Node:- Text: -
|————————Node:number_literal Text: 1
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:cast_expression Text: (uint8_t)(crcResult & 0xFF)
|——————Node:( Text: (
|——————Node:type_descriptor Text: uint8_t
|———————Node:primitive_type Text: uint8_t
|——————Node:) Text: )
|——————Node:parenthesized_expression Text: (crcResult & 0xFF)
|———————Node:( Text: (
|———————Node:binary_expression Text: crcResult & 0xFF
|————————Node:identifier Text: crcResult
|————————Node:& Text: &
|————————Node:number_literal Text: 0xFF
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: SPI_HAS_TRANSACTION
|————Node:expression_statement Text: SPI_BEGIN();
|—————Node:call_expression Text: SPI_BEGIN()
|——————Node:identifier Text: SPI_BEGIN
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: MCP2518fd_SELECT();
|————Node:call_expression Text: MCP2518fd_SELECT()
|—————Node:identifier Text: MCP2518fd_SELECT
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[0]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[0])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[0])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[0]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [0]
|————————Node:[ Text: [
|————————Node:number_literal Text: 0
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[1]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[1])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[1])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[1]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [1]
|————————Node:[ Text: [
|————————Node:number_literal Text: 1
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[2]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[2])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[2])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[2]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [2]
|————————Node:[ Text: [
|————————Node:number_literal Text: 2
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:for_statement Text: for (i = 0; i < nBytes; i++) {
    spi_readwrite(spiTransmitBuffer[i + 3]);
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:assignment_expression Text: i = 0
|—————Node:identifier Text: i
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|————Node:binary_expression Text: i < nBytes
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:identifier Text: nBytes
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    spi_readwrite(spiTransmitBuffer[i + 3]);
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[i + 3]);
|——————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[i + 3])
|———————Node:identifier Text: spi_readwrite
|———————Node:argument_list Text: (spiTransmitBuffer[i + 3])
|————————Node:( Text: (
|————————Node:subscript_expression Text: spiTransmitBuffer[i + 3]
|—————————Node:identifier Text: spiTransmitBuffer
|—————————Node:subscript_argument_list Text: [i + 3]
|——————————Node:[ Text: [
|——————————Node:binary_expression Text: i + 3
|———————————Node:identifier Text: i
|———————————Node:+ Text: +
|———————————Node:number_literal Text: 3
|——————————Node:] Text: ]
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[spiTransferSize - 2]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[spiTransferSize - 2])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[spiTransferSize - 2])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[spiTransferSize - 2]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [spiTransferSize - 2]
|————————Node:[ Text: [
|————————Node:binary_expression Text: spiTransferSize - 2
|—————————Node:identifier Text: spiTransferSize
|—————————Node:- Text: -
|—————————Node:number_literal Text: 2
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[spiTransferSize - 1]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[spiTransferSize - 1])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[spiTransferSize - 1])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[spiTransferSize - 1]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [spiTransferSize - 1]
|————————Node:[ Text: [
|————————Node:binary_expression Text: spiTransferSize - 1
|—————————Node:identifier Text: spiTransferSize
|—————————Node:- Text: -
|—————————Node:number_literal Text: 1
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: MCP2518fd_UNSELECT();
|————Node:call_expression Text: MCP2518fd_UNSELECT()
|—————Node:identifier Text: MCP2518fd_UNSELECT
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: SPI_HAS_TRANSACTION
|————Node:expression_statement Text: SPI_END();
|—————Node:call_expression Text: SPI_END()
|——————Node:identifier Text: SPI_END
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: delay(10);
|————Node:call_expression Text: delay(10)
|—————Node:identifier Text: delay
|—————Node:argument_list Text: (10)
|——————Node:( Text: (
|——————Node:number_literal Text: 10
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_ReadWordArray(uint16_t address, uint32_t *rxd,
                                          uint16_t nWords) {
  uint16_t i, j, n;
  REG_t w;
  uint16_t spiTransferSize = nWords * 4 + 2;
  int8_t spiTransferError = 0;

  // Compose command
  spiTransmitBuffer[0] = (cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF);
  spiTransmitBuffer[1] = address & 0xFF;

  // Clear data
  for (i = 2; i < spiTransferSize; i++) {
    spiTransmitBuffer[i] = 0;
  }

#ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
  MCP2518fd_SELECT();
  spi_readwrite(spiTransmitBuffer[0]);
  spi_readwrite(spiTransmitBuffer[1]);
  for (i = 2; i < spiTransferSize; i++) {
    // for (i = 2; i < 6; i++) {
    spiReceiveBuffer[i] = spi_readwrite(0x00);
  }
  MCP2518fd_UNSELECT();
#ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
  delay(10);
  // Convert Byte array to Word array
  n = 2;
  for (i = 0; i < nWords; i++) {
    w.word = 0;
    for (j = 0; j < 4; j++, n++) {
      w.byte[j] = spiReceiveBuffer[n];
    }
    rxd[i] = w.word;
  }
  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_ReadWordArray(uint16_t address, uint32_t *rxd,
                                          uint16_t nWords)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_ReadWordArray
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_ReadWordArray
|———Node:parameter_list Text: (uint16_t address, uint32_t *rxd,
                                          uint16_t nWords)
|————Node:( Text: (
|————Node:parameter_declaration Text: uint16_t address
|—————Node:primitive_type Text: uint16_t
|—————Node:identifier Text: address
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint32_t *rxd
|—————Node:primitive_type Text: uint32_t
|—————Node:pointer_declarator Text: *rxd
|——————Node:* Text: *
|——————Node:identifier Text: rxd
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint16_t nWords
|—————Node:primitive_type Text: uint16_t
|—————Node:identifier Text: nWords
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint16_t i, j, n;
  REG_t w;
  uint16_t spiTransferSize = nWords * 4 + 2;
  int8_t spiTransferError = 0;

  // Compose command
  spiTransmitBuffer[0] = (cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF);
  spiTransmitBuffer[1] = address & 0xFF;

  // Clear data
  for (i = 2; i < spiTransferSize; i++) {
    spiTransmitBuffer[i] = 0;
  }

#ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
  MCP2518fd_SELECT();
  spi_readwrite(spiTransmitBuffer[0]);
  spi_readwrite(spiTransmitBuffer[1]);
  for (i = 2; i < spiTransferSize; i++) {
    // for (i = 2; i < 6; i++) {
    spiReceiveBuffer[i] = spi_readwrite(0x00);
  }
  MCP2518fd_UNSELECT();
#ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
  delay(10);
  // Convert Byte array to Word array
  n = 2;
  for (i = 0; i < nWords; i++) {
    w.word = 0;
    for (j = 0; j < 4; j++, n++) {
      w.byte[j] = spiReceiveBuffer[n];
    }
    rxd[i] = w.word;
  }
  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: uint16_t i, j, n;
|————Node:primitive_type Text: uint16_t
|————Node:identifier Text: i
|————Node:, Text: ,
|————Node:identifier Text: j
|————Node:, Text: ,
|————Node:identifier Text: n
|————Node:; Text: ;
|———Node:declaration Text: REG_t w;
|————Node:type_identifier Text: REG_t
|————Node:identifier Text: w
|————Node:; Text: ;
|———Node:declaration Text: uint16_t spiTransferSize = nWords * 4 + 2;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: spiTransferSize = nWords * 4 + 2
|—————Node:identifier Text: spiTransferSize
|—————Node:= Text: =
|—————Node:binary_expression Text: nWords * 4 + 2
|——————Node:binary_expression Text: nWords * 4
|———————Node:identifier Text: nWords
|———————Node:* Text: *
|———————Node:number_literal Text: 4
|——————Node:+ Text: +
|——————Node:number_literal Text: 2
|————Node:; Text: ;
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: spiTransmitBuffer[0] = (cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF);
|————Node:assignment_expression Text: spiTransmitBuffer[0] = (cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF)
|—————Node:subscript_expression Text: spiTransmitBuffer[0]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:binary_expression Text: (cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF)
|——————Node:parenthesized_expression Text: (cINSTRUCTION_READ << 4)
|———————Node:( Text: (
|———————Node:binary_expression Text: cINSTRUCTION_READ << 4
|————————Node:identifier Text: cINSTRUCTION_READ
|————————Node:<< Text: <<
|————————Node:number_literal Text: 4
|———————Node:) Text: )
|——————Node:+ Text: +
|——————Node:parenthesized_expression Text: ((address >> 8) & 0xF)
|———————Node:( Text: (
|———————Node:binary_expression Text: (address >> 8) & 0xF
|————————Node:parenthesized_expression Text: (address >> 8)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: address >> 8
|——————————Node:identifier Text: address
|——————————Node:>> Text: >>
|——————————Node:number_literal Text: 8
|—————————Node:) Text: )
|————————Node:& Text: &
|————————Node:number_literal Text: 0xF
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransmitBuffer[1] = address & 0xFF;
|————Node:assignment_expression Text: spiTransmitBuffer[1] = address & 0xFF
|—————Node:subscript_expression Text: spiTransmitBuffer[1]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [1]
|———————Node:[ Text: [
|———————Node:number_literal Text: 1
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:binary_expression Text: address & 0xFF
|——————Node:identifier Text: address
|——————Node:& Text: &
|——————Node:number_literal Text: 0xFF
|————Node:; Text: ;
|———Node:comment
|———Node:for_statement Text: for (i = 2; i < spiTransferSize; i++) {
    spiTransmitBuffer[i] = 0;
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:assignment_expression Text: i = 2
|—————Node:identifier Text: i
|—————Node:= Text: =
|—————Node:number_literal Text: 2
|————Node:; Text: ;
|————Node:binary_expression Text: i < spiTransferSize
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:identifier Text: spiTransferSize
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    spiTransmitBuffer[i] = 0;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: spiTransmitBuffer[i] = 0;
|——————Node:assignment_expression Text: spiTransmitBuffer[i] = 0
|———————Node:subscript_expression Text: spiTransmitBuffer[i]
|————————Node:identifier Text: spiTransmitBuffer
|————————Node:subscript_argument_list Text: [i]
|—————————Node:[ Text: [
|—————————Node:identifier Text: i
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:number_literal Text: 0
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:preproc_ifdef Text: #ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: SPI_HAS_TRANSACTION
|————Node:expression_statement Text: SPI_BEGIN();
|—————Node:call_expression Text: SPI_BEGIN()
|——————Node:identifier Text: SPI_BEGIN
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: MCP2518fd_SELECT();
|————Node:call_expression Text: MCP2518fd_SELECT()
|—————Node:identifier Text: MCP2518fd_SELECT
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[0]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[0])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[0])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[0]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [0]
|————————Node:[ Text: [
|————————Node:number_literal Text: 0
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[1]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[1])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[1])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[1]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [1]
|————————Node:[ Text: [
|————————Node:number_literal Text: 1
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:for_statement Text: for (i = 2; i < spiTransferSize; i++) {
    // for (i = 2; i < 6; i++) {
    spiReceiveBuffer[i] = spi_readwrite(0x00);
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:assignment_expression Text: i = 2
|—————Node:identifier Text: i
|—————Node:= Text: =
|—————Node:number_literal Text: 2
|————Node:; Text: ;
|————Node:binary_expression Text: i < spiTransferSize
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:identifier Text: spiTransferSize
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    // for (i = 2; i < 6; i++) {
    spiReceiveBuffer[i] = spi_readwrite(0x00);
  }
|—————Node:{ Text: {
|—————Node:comment
|—————Node:expression_statement Text: spiReceiveBuffer[i] = spi_readwrite(0x00);
|——————Node:assignment_expression Text: spiReceiveBuffer[i] = spi_readwrite(0x00)
|———————Node:subscript_expression Text: spiReceiveBuffer[i]
|————————Node:identifier Text: spiReceiveBuffer
|————————Node:subscript_argument_list Text: [i]
|—————————Node:[ Text: [
|—————————Node:identifier Text: i
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:call_expression Text: spi_readwrite(0x00)
|————————Node:identifier Text: spi_readwrite
|————————Node:argument_list Text: (0x00)
|—————————Node:( Text: (
|—————————Node:number_literal Text: 0x00
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: MCP2518fd_UNSELECT();
|————Node:call_expression Text: MCP2518fd_UNSELECT()
|—————Node:identifier Text: MCP2518fd_UNSELECT
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: SPI_HAS_TRANSACTION
|————Node:expression_statement Text: SPI_END();
|—————Node:call_expression Text: SPI_END()
|——————Node:identifier Text: SPI_END
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: delay(10);
|————Node:call_expression Text: delay(10)
|—————Node:identifier Text: delay
|—————Node:argument_list Text: (10)
|——————Node:( Text: (
|——————Node:number_literal Text: 10
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: n = 2;
|————Node:assignment_expression Text: n = 2
|—————Node:identifier Text: n
|—————Node:= Text: =
|—————Node:number_literal Text: 2
|————Node:; Text: ;
|———Node:for_statement Text: for (i = 0; i < nWords; i++) {
    w.word = 0;
    for (j = 0; j < 4; j++, n++) {
      w.byte[j] = spiReceiveBuffer[n];
    }
    rxd[i] = w.word;
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:assignment_expression Text: i = 0
|—————Node:identifier Text: i
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|————Node:binary_expression Text: i < nWords
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:identifier Text: nWords
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    w.word = 0;
    for (j = 0; j < 4; j++, n++) {
      w.byte[j] = spiReceiveBuffer[n];
    }
    rxd[i] = w.word;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: w.word = 0;
|——————Node:assignment_expression Text: w.word = 0
|———————Node:field_expression Text: w.word
|————————Node:identifier Text: w
|————————Node:. Text: .
|————————Node:field_identifier Text: word
|———————Node:= Text: =
|———————Node:number_literal Text: 0
|——————Node:; Text: ;
|—————Node:for_statement Text: for (j = 0; j < 4; j++, n++) {
      w.byte[j] = spiReceiveBuffer[n];
    }
|——————Node:for Text: for
|——————Node:( Text: (
|——————Node:assignment_expression Text: j = 0
|———————Node:identifier Text: j
|———————Node:= Text: =
|———————Node:number_literal Text: 0
|——————Node:; Text: ;
|——————Node:binary_expression Text: j < 4
|———————Node:identifier Text: j
|———————Node:< Text: <
|———————Node:number_literal Text: 4
|——————Node:; Text: ;
|——————Node:comma_expression Text: j++, n++
|———————Node:update_expression Text: j++
|————————Node:identifier Text: j
|————————Node:++ Text: ++
|———————Node:, Text: ,
|———————Node:update_expression Text: n++
|————————Node:identifier Text: n
|————————Node:++ Text: ++
|——————Node:) Text: )
|——————Node:compound_statement Text: {
      w.byte[j] = spiReceiveBuffer[n];
    }
|———————Node:{ Text: {
|———————Node:expression_statement Text: w.byte[j] = spiReceiveBuffer[n];
|————————Node:assignment_expression Text: w.byte[j] = spiReceiveBuffer[n]
|—————————Node:subscript_expression Text: w.byte[j]
|——————————Node:field_expression Text: w.byte
|———————————Node:identifier Text: w
|———————————Node:. Text: .
|———————————Node:field_identifier Text: byte
|——————————Node:subscript_argument_list Text: [j]
|———————————Node:[ Text: [
|———————————Node:identifier Text: j
|———————————Node:] Text: ]
|—————————Node:= Text: =
|—————————Node:subscript_expression Text: spiReceiveBuffer[n]
|——————————Node:identifier Text: spiReceiveBuffer
|——————————Node:subscript_argument_list Text: [n]
|———————————Node:[ Text: [
|———————————Node:identifier Text: n
|———————————Node:] Text: ]
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:expression_statement Text: rxd[i] = w.word;
|——————Node:assignment_expression Text: rxd[i] = w.word
|———————Node:subscript_expression Text: rxd[i]
|————————Node:identifier Text: rxd
|————————Node:subscript_argument_list Text: [i]
|—————————Node:[ Text: [
|—————————Node:identifier Text: i
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:field_expression Text: w.word
|————————Node:identifier Text: w
|————————Node:. Text: .
|————————Node:field_identifier Text: word
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_WriteWordArray(uint16_t address, uint32_t *txd,
                                           uint16_t nWords) {
  uint16_t i, j, n;
  REG_t w;
  uint16_t spiTransferSize = nWords * 4 + 2;
  int8_t spiTransferError = 0;

  // Compose command
  spiTransmitBuffer[0] = (cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF);
  spiTransmitBuffer[1] = address & 0xFF;

  // Convert ByteArray to word array
  n = 2;
  for (i = 0; i < nWords; i++) {
    w.word = txd[i];
    for (j = 0; j < 4; j++, n++) {
      spiTransmitBuffer[n] = w.byte[j];
    }
  }

#ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
  MCP2518fd_SELECT();
  spi_readwrite(spiTransmitBuffer[0]);
  spi_readwrite(spiTransmitBuffer[1]);
  for (i = 2; i < spiTransferSize; i++) {
    spi_readwrite(spiTransmitBuffer[i]);
  }
  MCP2518fd_UNSELECT();
#ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
  delay(10);

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_WriteWordArray(uint16_t address, uint32_t *txd,
                                           uint16_t nWords)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_WriteWordArray
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_WriteWordArray
|———Node:parameter_list Text: (uint16_t address, uint32_t *txd,
                                           uint16_t nWords)
|————Node:( Text: (
|————Node:parameter_declaration Text: uint16_t address
|—————Node:primitive_type Text: uint16_t
|—————Node:identifier Text: address
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint32_t *txd
|—————Node:primitive_type Text: uint32_t
|—————Node:pointer_declarator Text: *txd
|——————Node:* Text: *
|——————Node:identifier Text: txd
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint16_t nWords
|—————Node:primitive_type Text: uint16_t
|—————Node:identifier Text: nWords
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint16_t i, j, n;
  REG_t w;
  uint16_t spiTransferSize = nWords * 4 + 2;
  int8_t spiTransferError = 0;

  // Compose command
  spiTransmitBuffer[0] = (cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF);
  spiTransmitBuffer[1] = address & 0xFF;

  // Convert ByteArray to word array
  n = 2;
  for (i = 0; i < nWords; i++) {
    w.word = txd[i];
    for (j = 0; j < 4; j++, n++) {
      spiTransmitBuffer[n] = w.byte[j];
    }
  }

#ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
  MCP2518fd_SELECT();
  spi_readwrite(spiTransmitBuffer[0]);
  spi_readwrite(spiTransmitBuffer[1]);
  for (i = 2; i < spiTransferSize; i++) {
    spi_readwrite(spiTransmitBuffer[i]);
  }
  MCP2518fd_UNSELECT();
#ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
  delay(10);

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: uint16_t i, j, n;
|————Node:primitive_type Text: uint16_t
|————Node:identifier Text: i
|————Node:, Text: ,
|————Node:identifier Text: j
|————Node:, Text: ,
|————Node:identifier Text: n
|————Node:; Text: ;
|———Node:declaration Text: REG_t w;
|————Node:type_identifier Text: REG_t
|————Node:identifier Text: w
|————Node:; Text: ;
|———Node:declaration Text: uint16_t spiTransferSize = nWords * 4 + 2;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: spiTransferSize = nWords * 4 + 2
|—————Node:identifier Text: spiTransferSize
|—————Node:= Text: =
|—————Node:binary_expression Text: nWords * 4 + 2
|——————Node:binary_expression Text: nWords * 4
|———————Node:identifier Text: nWords
|———————Node:* Text: *
|———————Node:number_literal Text: 4
|——————Node:+ Text: +
|——————Node:number_literal Text: 2
|————Node:; Text: ;
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: spiTransmitBuffer[0] = (cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF);
|————Node:assignment_expression Text: spiTransmitBuffer[0] = (cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF)
|—————Node:subscript_expression Text: spiTransmitBuffer[0]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:binary_expression Text: (cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF)
|——————Node:parenthesized_expression Text: (cINSTRUCTION_WRITE << 4)
|———————Node:( Text: (
|———————Node:binary_expression Text: cINSTRUCTION_WRITE << 4
|————————Node:identifier Text: cINSTRUCTION_WRITE
|————————Node:<< Text: <<
|————————Node:number_literal Text: 4
|———————Node:) Text: )
|——————Node:+ Text: +
|——————Node:parenthesized_expression Text: ((address >> 8) & 0xF)
|———————Node:( Text: (
|———————Node:binary_expression Text: (address >> 8) & 0xF
|————————Node:parenthesized_expression Text: (address >> 8)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: address >> 8
|——————————Node:identifier Text: address
|——————————Node:>> Text: >>
|——————————Node:number_literal Text: 8
|—————————Node:) Text: )
|————————Node:& Text: &
|————————Node:number_literal Text: 0xF
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransmitBuffer[1] = address & 0xFF;
|————Node:assignment_expression Text: spiTransmitBuffer[1] = address & 0xFF
|—————Node:subscript_expression Text: spiTransmitBuffer[1]
|——————Node:identifier Text: spiTransmitBuffer
|——————Node:subscript_argument_list Text: [1]
|———————Node:[ Text: [
|———————Node:number_literal Text: 1
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:binary_expression Text: address & 0xFF
|——————Node:identifier Text: address
|——————Node:& Text: &
|——————Node:number_literal Text: 0xFF
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: n = 2;
|————Node:assignment_expression Text: n = 2
|—————Node:identifier Text: n
|—————Node:= Text: =
|—————Node:number_literal Text: 2
|————Node:; Text: ;
|———Node:for_statement Text: for (i = 0; i < nWords; i++) {
    w.word = txd[i];
    for (j = 0; j < 4; j++, n++) {
      spiTransmitBuffer[n] = w.byte[j];
    }
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:assignment_expression Text: i = 0
|—————Node:identifier Text: i
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|————Node:binary_expression Text: i < nWords
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:identifier Text: nWords
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    w.word = txd[i];
    for (j = 0; j < 4; j++, n++) {
      spiTransmitBuffer[n] = w.byte[j];
    }
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: w.word = txd[i];
|——————Node:assignment_expression Text: w.word = txd[i]
|———————Node:field_expression Text: w.word
|————————Node:identifier Text: w
|————————Node:. Text: .
|————————Node:field_identifier Text: word
|———————Node:= Text: =
|———————Node:subscript_expression Text: txd[i]
|————————Node:identifier Text: txd
|————————Node:subscript_argument_list Text: [i]
|—————————Node:[ Text: [
|—————————Node:identifier Text: i
|—————————Node:] Text: ]
|——————Node:; Text: ;
|—————Node:for_statement Text: for (j = 0; j < 4; j++, n++) {
      spiTransmitBuffer[n] = w.byte[j];
    }
|——————Node:for Text: for
|——————Node:( Text: (
|——————Node:assignment_expression Text: j = 0
|———————Node:identifier Text: j
|———————Node:= Text: =
|———————Node:number_literal Text: 0
|——————Node:; Text: ;
|——————Node:binary_expression Text: j < 4
|———————Node:identifier Text: j
|———————Node:< Text: <
|———————Node:number_literal Text: 4
|——————Node:; Text: ;
|——————Node:comma_expression Text: j++, n++
|———————Node:update_expression Text: j++
|————————Node:identifier Text: j
|————————Node:++ Text: ++
|———————Node:, Text: ,
|———————Node:update_expression Text: n++
|————————Node:identifier Text: n
|————————Node:++ Text: ++
|——————Node:) Text: )
|——————Node:compound_statement Text: {
      spiTransmitBuffer[n] = w.byte[j];
    }
|———————Node:{ Text: {
|———————Node:expression_statement Text: spiTransmitBuffer[n] = w.byte[j];
|————————Node:assignment_expression Text: spiTransmitBuffer[n] = w.byte[j]
|—————————Node:subscript_expression Text: spiTransmitBuffer[n]
|——————————Node:identifier Text: spiTransmitBuffer
|——————————Node:subscript_argument_list Text: [n]
|———————————Node:[ Text: [
|———————————Node:identifier Text: n
|———————————Node:] Text: ]
|—————————Node:= Text: =
|—————————Node:subscript_expression Text: w.byte[j]
|——————————Node:field_expression Text: w.byte
|———————————Node:identifier Text: w
|———————————Node:. Text: .
|———————————Node:field_identifier Text: byte
|——————————Node:subscript_argument_list Text: [j]
|———————————Node:[ Text: [
|———————————Node:identifier Text: j
|———————————Node:] Text: ]
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:preproc_ifdef Text: #ifdef SPI_HAS_TRANSACTION
  SPI_BEGIN();
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: SPI_HAS_TRANSACTION
|————Node:expression_statement Text: SPI_BEGIN();
|—————Node:call_expression Text: SPI_BEGIN()
|——————Node:identifier Text: SPI_BEGIN
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: MCP2518fd_SELECT();
|————Node:call_expression Text: MCP2518fd_SELECT()
|—————Node:identifier Text: MCP2518fd_SELECT
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[0]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[0])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[0])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[0]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [0]
|————————Node:[ Text: [
|————————Node:number_literal Text: 0
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[1]);
|————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[1])
|—————Node:identifier Text: spi_readwrite
|—————Node:argument_list Text: (spiTransmitBuffer[1])
|——————Node:( Text: (
|——————Node:subscript_expression Text: spiTransmitBuffer[1]
|———————Node:identifier Text: spiTransmitBuffer
|———————Node:subscript_argument_list Text: [1]
|————————Node:[ Text: [
|————————Node:number_literal Text: 1
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:for_statement Text: for (i = 2; i < spiTransferSize; i++) {
    spi_readwrite(spiTransmitBuffer[i]);
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:assignment_expression Text: i = 2
|—————Node:identifier Text: i
|—————Node:= Text: =
|—————Node:number_literal Text: 2
|————Node:; Text: ;
|————Node:binary_expression Text: i < spiTransferSize
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:identifier Text: spiTransferSize
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    spi_readwrite(spiTransmitBuffer[i]);
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: spi_readwrite(spiTransmitBuffer[i]);
|——————Node:call_expression Text: spi_readwrite(spiTransmitBuffer[i])
|———————Node:identifier Text: spi_readwrite
|———————Node:argument_list Text: (spiTransmitBuffer[i])
|————————Node:( Text: (
|————————Node:subscript_expression Text: spiTransmitBuffer[i]
|—————————Node:identifier Text: spiTransmitBuffer
|—————————Node:subscript_argument_list Text: [i]
|——————————Node:[ Text: [
|——————————Node:identifier Text: i
|——————————Node:] Text: ]
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: MCP2518fd_UNSELECT();
|————Node:call_expression Text: MCP2518fd_UNSELECT()
|—————Node:identifier Text: MCP2518fd_UNSELECT
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef SPI_HAS_TRANSACTION
  SPI_END();
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: SPI_HAS_TRANSACTION
|————Node:expression_statement Text: SPI_END();
|—————Node:call_expression Text: SPI_END()
|——————Node:identifier Text: SPI_END
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: delay(10);
|————Node:call_expression Text: delay(10)
|—————Node:identifier Text: delay
|—————Node:argument_list Text: (10)
|——————Node:( Text: (
|——————Node:number_literal Text: 10
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_EccEnable() {
  int8_t spiTransferError = 0;
  uint8_t d = 0;

  // Read
  spiTransferError = mcp2518fd_ReadByte(cREGADDR_ECCCON, &d);
  if (spiTransferError) {
    return -1;
  }
  // Modify
  d |= 0x01;

  // Write
  spiTransferError = mcp2518fd_WriteByte(cREGADDR_ECCCON, d);
  if (spiTransferError) {
    return -2;
  }

  return 0;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_EccEnable()
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_EccEnable
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_EccEnable
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
  int8_t spiTransferError = 0;
  uint8_t d = 0;

  // Read
  spiTransferError = mcp2518fd_ReadByte(cREGADDR_ECCCON, &d);
  if (spiTransferError) {
    return -1;
  }
  // Modify
  d |= 0x01;

  // Write
  spiTransferError = mcp2518fd_WriteByte(cREGADDR_ECCCON, d);
  if (spiTransferError) {
    return -2;
  }

  return 0;
}
|———Node:{ Text: {
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint8_t d = 0;
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: d = 0
|—————Node:identifier Text: d
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: spiTransferError = mcp2518fd_ReadByte(cREGADDR_ECCCON, &d);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_ReadByte(cREGADDR_ECCCON, &d)
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_ReadByte(cREGADDR_ECCCON, &d)
|——————Node:identifier Text: mcp2518fd_ReadByte
|——————Node:argument_list Text: (cREGADDR_ECCCON, &d)
|———————Node:( Text: (
|———————Node:identifier Text: cREGADDR_ECCCON
|———————Node:, Text: ,
|———————Node:pointer_expression Text: &d
|————————Node:& Text: &
|————————Node:identifier Text: d
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -1;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -1;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -1;
|——————Node:return Text: return
|——————Node:number_literal Text: -1
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:expression_statement Text: d |= 0x01;
|————Node:assignment_expression Text: d |= 0x01
|—————Node:identifier Text: d
|—————Node:|= Text: |=
|—————Node:number_literal Text: 0x01
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: spiTransferError = mcp2518fd_WriteByte(cREGADDR_ECCCON, d);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_WriteByte(cREGADDR_ECCCON, d)
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_WriteByte(cREGADDR_ECCCON, d)
|——————Node:identifier Text: mcp2518fd_WriteByte
|——————Node:argument_list Text: (cREGADDR_ECCCON, d)
|———————Node:( Text: (
|———————Node:identifier Text: cREGADDR_ECCCON
|———————Node:, Text: ,
|———————Node:identifier Text: d
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -2;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -2;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -2;
|——————Node:return Text: return
|——————Node:number_literal Text: -2
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return 0;
|————Node:return Text: return
|————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_RamInit(uint8_t d) {
  uint8_t txd[SPI_DEFAULT_BUFFER_LENGTH];
  uint32_t k;
  int8_t spiTransferError = 0;

  // Prepare data
  for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH; k++) {
    txd[k] = d;
  }

  uint16_t a = cRAMADDR_START;

  for (k = 0; k < (cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH); k++) {
    spiTransferError =
        mcp2518fd_WriteByteArray(a, txd, SPI_DEFAULT_BUFFER_LENGTH);
    if (spiTransferError) {
      return -1;
    }
    a += SPI_DEFAULT_BUFFER_LENGTH;
  }

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_RamInit(uint8_t d)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_RamInit
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_RamInit
|———Node:parameter_list Text: (uint8_t d)
|————Node:( Text: (
|————Node:parameter_declaration Text: uint8_t d
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: d
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint8_t txd[SPI_DEFAULT_BUFFER_LENGTH];
  uint32_t k;
  int8_t spiTransferError = 0;

  // Prepare data
  for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH; k++) {
    txd[k] = d;
  }

  uint16_t a = cRAMADDR_START;

  for (k = 0; k < (cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH); k++) {
    spiTransferError =
        mcp2518fd_WriteByteArray(a, txd, SPI_DEFAULT_BUFFER_LENGTH);
    if (spiTransferError) {
      return -1;
    }
    a += SPI_DEFAULT_BUFFER_LENGTH;
  }

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: uint8_t txd[SPI_DEFAULT_BUFFER_LENGTH];
|————Node:primitive_type Text: uint8_t
|————Node:array_declarator Text: txd[SPI_DEFAULT_BUFFER_LENGTH]
|—————Node:identifier Text: txd
|—————Node:[ Text: [
|—————Node:identifier Text: SPI_DEFAULT_BUFFER_LENGTH
|—————Node:] Text: ]
|————Node:; Text: ;
|———Node:declaration Text: uint32_t k;
|————Node:primitive_type Text: uint32_t
|————Node:identifier Text: k
|————Node:; Text: ;
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:for_statement Text: for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH; k++) {
    txd[k] = d;
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:assignment_expression Text: k = 0
|—————Node:identifier Text: k
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|————Node:binary_expression Text: k < SPI_DEFAULT_BUFFER_LENGTH
|—————Node:identifier Text: k
|—————Node:< Text: <
|—————Node:identifier Text: SPI_DEFAULT_BUFFER_LENGTH
|————Node:; Text: ;
|————Node:update_expression Text: k++
|—————Node:identifier Text: k
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    txd[k] = d;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: txd[k] = d;
|——————Node:assignment_expression Text: txd[k] = d
|———————Node:subscript_expression Text: txd[k]
|————————Node:identifier Text: txd
|————————Node:subscript_argument_list Text: [k]
|—————————Node:[ Text: [
|—————————Node:identifier Text: k
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:identifier Text: d
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:declaration Text: uint16_t a = cRAMADDR_START;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: a = cRAMADDR_START
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:identifier Text: cRAMADDR_START
|————Node:; Text: ;
|———Node:for_statement Text: for (k = 0; k < (cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH); k++) {
    spiTransferError =
        mcp2518fd_WriteByteArray(a, txd, SPI_DEFAULT_BUFFER_LENGTH);
    if (spiTransferError) {
      return -1;
    }
    a += SPI_DEFAULT_BUFFER_LENGTH;
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:assignment_expression Text: k = 0
|—————Node:identifier Text: k
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|————Node:binary_expression Text: k < (cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH)
|—————Node:identifier Text: k
|—————Node:< Text: <
|—————Node:parenthesized_expression Text: (cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH)
|——————Node:( Text: (
|——————Node:binary_expression Text: cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH
|———————Node:identifier Text: cRAM_SIZE
|———————Node:/ Text: /
|———————Node:identifier Text: SPI_DEFAULT_BUFFER_LENGTH
|——————Node:) Text: )
|————Node:; Text: ;
|————Node:update_expression Text: k++
|—————Node:identifier Text: k
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    spiTransferError =
        mcp2518fd_WriteByteArray(a, txd, SPI_DEFAULT_BUFFER_LENGTH);
    if (spiTransferError) {
      return -1;
    }
    a += SPI_DEFAULT_BUFFER_LENGTH;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: spiTransferError =
        mcp2518fd_WriteByteArray(a, txd, SPI_DEFAULT_BUFFER_LENGTH);
|——————Node:assignment_expression Text: spiTransferError =
        mcp2518fd_WriteByteArray(a, txd, SPI_DEFAULT_BUFFER_LENGTH)
|———————Node:identifier Text: spiTransferError
|———————Node:= Text: =
|———————Node:call_expression Text: mcp2518fd_WriteByteArray(a, txd, SPI_DEFAULT_BUFFER_LENGTH)
|————————Node:identifier Text: mcp2518fd_WriteByteArray
|————————Node:argument_list Text: (a, txd, SPI_DEFAULT_BUFFER_LENGTH)
|—————————Node:( Text: (
|—————————Node:identifier Text: a
|—————————Node:, Text: ,
|—————————Node:identifier Text: txd
|—————————Node:, Text: ,
|—————————Node:identifier Text: SPI_DEFAULT_BUFFER_LENGTH
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (spiTransferError) {
      return -1;
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: (spiTransferError)
|———————Node:( Text: (
|———————Node:identifier Text: spiTransferError
|———————Node:) Text: )
|——————Node:compound_statement Text: {
      return -1;
    }
|———————Node:{ Text: {
|———————Node:return_statement Text: return -1;
|————————Node:return Text: return
|————————Node:number_literal Text: -1
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:expression_statement Text: a += SPI_DEFAULT_BUFFER_LENGTH;
|——————Node:assignment_expression Text: a += SPI_DEFAULT_BUFFER_LENGTH
|———————Node:identifier Text: a
|———————Node:+= Text: +=
|———————Node:identifier Text: SPI_DEFAULT_BUFFER_LENGTH
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_ConfigureObjectReset(CAN_CONFIG *config) {
  REG_CiCON ciCon;
  ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];

  config->DNetFilterCount = ciCon.bF.DNetFilterCount;
  config->IsoCrcEnable = ciCon.bF.IsoCrcEnable;
  config->ProtocolExpectionEventDisable =
      ciCon.bF.ProtocolExceptionEventDisable;
  config->WakeUpFilterEnable = ciCon.bF.WakeUpFilterEnable;
  config->WakeUpFilterTime = ciCon.bF.WakeUpFilterTime;
  config->BitRateSwitchDisable = ciCon.bF.BitRateSwitchDisable;
  config->RestrictReTxAttempts = ciCon.bF.RestrictReTxAttempts;
  config->EsiInGatewayMode = ciCon.bF.EsiInGatewayMode;
  config->SystemErrorToListenOnly = ciCon.bF.SystemErrorToListenOnly;
  config->StoreInTEF = ciCon.bF.StoreInTEF;
  config->TXQEnable = ciCon.bF.TXQEnable;
  config->TxBandWidthSharing = ciCon.bF.TxBandWidthSharing;

  return 0;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_ConfigureObjectReset(CAN_CONFIG *config)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_ConfigureObjectReset
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_ConfigureObjectReset
|———Node:parameter_list Text: (CAN_CONFIG *config)
|————Node:( Text: (
|————Node:parameter_declaration Text: CAN_CONFIG *config
|—————Node:type_identifier Text: CAN_CONFIG
|—————Node:pointer_declarator Text: *config
|——————Node:* Text: *
|——————Node:identifier Text: config
|————Node:) Text: )
|——Node:compound_statement Text: {
  REG_CiCON ciCon;
  ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];

  config->DNetFilterCount = ciCon.bF.DNetFilterCount;
  config->IsoCrcEnable = ciCon.bF.IsoCrcEnable;
  config->ProtocolExpectionEventDisable =
      ciCon.bF.ProtocolExceptionEventDisable;
  config->WakeUpFilterEnable = ciCon.bF.WakeUpFilterEnable;
  config->WakeUpFilterTime = ciCon.bF.WakeUpFilterTime;
  config->BitRateSwitchDisable = ciCon.bF.BitRateSwitchDisable;
  config->RestrictReTxAttempts = ciCon.bF.RestrictReTxAttempts;
  config->EsiInGatewayMode = ciCon.bF.EsiInGatewayMode;
  config->SystemErrorToListenOnly = ciCon.bF.SystemErrorToListenOnly;
  config->StoreInTEF = ciCon.bF.StoreInTEF;
  config->TXQEnable = ciCon.bF.TXQEnable;
  config->TxBandWidthSharing = ciCon.bF.TxBandWidthSharing;

  return 0;
}
|———Node:{ Text: {
|———Node:declaration Text: REG_CiCON ciCon;
|————Node:type_identifier Text: REG_CiCON
|————Node:identifier Text: ciCon
|————Node:; Text: ;
|———Node:expression_statement Text: ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
|————Node:assignment_expression Text: ciCon.word = canControlResetValues[cREGADDR_CiCON / 4]
|—————Node:field_expression Text: ciCon.word
|——————Node:identifier Text: ciCon
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:subscript_expression Text: canControlResetValues[cREGADDR_CiCON / 4]
|——————Node:identifier Text: canControlResetValues
|——————Node:subscript_argument_list Text: [cREGADDR_CiCON / 4]
|———————Node:[ Text: [
|———————Node:binary_expression Text: cREGADDR_CiCON / 4
|————————Node:identifier Text: cREGADDR_CiCON
|————————Node:/ Text: /
|————————Node:number_literal Text: 4
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: config->DNetFilterCount = ciCon.bF.DNetFilterCount;
|————Node:assignment_expression Text: config->DNetFilterCount = ciCon.bF.DNetFilterCount
|—————Node:field_expression Text: config->DNetFilterCount
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: DNetFilterCount
|—————Node:= Text: =
|—————Node:field_expression Text: ciCon.bF.DNetFilterCount
|——————Node:field_expression Text: ciCon.bF
|———————Node:identifier Text: ciCon
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: DNetFilterCount
|————Node:; Text: ;
|———Node:expression_statement Text: config->IsoCrcEnable = ciCon.bF.IsoCrcEnable;
|————Node:assignment_expression Text: config->IsoCrcEnable = ciCon.bF.IsoCrcEnable
|—————Node:field_expression Text: config->IsoCrcEnable
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: IsoCrcEnable
|—————Node:= Text: =
|—————Node:field_expression Text: ciCon.bF.IsoCrcEnable
|——————Node:field_expression Text: ciCon.bF
|———————Node:identifier Text: ciCon
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: IsoCrcEnable
|————Node:; Text: ;
|———Node:expression_statement Text: config->ProtocolExpectionEventDisable =
      ciCon.bF.ProtocolExceptionEventDisable;
|————Node:assignment_expression Text: config->ProtocolExpectionEventDisable =
      ciCon.bF.ProtocolExceptionEventDisable
|—————Node:field_expression Text: config->ProtocolExpectionEventDisable
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: ProtocolExpectionEventDisable
|—————Node:= Text: =
|—————Node:field_expression Text: ciCon.bF.ProtocolExceptionEventDisable
|——————Node:field_expression Text: ciCon.bF
|———————Node:identifier Text: ciCon
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: ProtocolExceptionEventDisable
|————Node:; Text: ;
|———Node:expression_statement Text: config->WakeUpFilterEnable = ciCon.bF.WakeUpFilterEnable;
|————Node:assignment_expression Text: config->WakeUpFilterEnable = ciCon.bF.WakeUpFilterEnable
|—————Node:field_expression Text: config->WakeUpFilterEnable
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: WakeUpFilterEnable
|—————Node:= Text: =
|—————Node:field_expression Text: ciCon.bF.WakeUpFilterEnable
|——————Node:field_expression Text: ciCon.bF
|———————Node:identifier Text: ciCon
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: WakeUpFilterEnable
|————Node:; Text: ;
|———Node:expression_statement Text: config->WakeUpFilterTime = ciCon.bF.WakeUpFilterTime;
|————Node:assignment_expression Text: config->WakeUpFilterTime = ciCon.bF.WakeUpFilterTime
|—————Node:field_expression Text: config->WakeUpFilterTime
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: WakeUpFilterTime
|—————Node:= Text: =
|—————Node:field_expression Text: ciCon.bF.WakeUpFilterTime
|——————Node:field_expression Text: ciCon.bF
|———————Node:identifier Text: ciCon
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: WakeUpFilterTime
|————Node:; Text: ;
|———Node:expression_statement Text: config->BitRateSwitchDisable = ciCon.bF.BitRateSwitchDisable;
|————Node:assignment_expression Text: config->BitRateSwitchDisable = ciCon.bF.BitRateSwitchDisable
|—————Node:field_expression Text: config->BitRateSwitchDisable
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: BitRateSwitchDisable
|—————Node:= Text: =
|—————Node:field_expression Text: ciCon.bF.BitRateSwitchDisable
|——————Node:field_expression Text: ciCon.bF
|———————Node:identifier Text: ciCon
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: BitRateSwitchDisable
|————Node:; Text: ;
|———Node:expression_statement Text: config->RestrictReTxAttempts = ciCon.bF.RestrictReTxAttempts;
|————Node:assignment_expression Text: config->RestrictReTxAttempts = ciCon.bF.RestrictReTxAttempts
|—————Node:field_expression Text: config->RestrictReTxAttempts
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: RestrictReTxAttempts
|—————Node:= Text: =
|—————Node:field_expression Text: ciCon.bF.RestrictReTxAttempts
|——————Node:field_expression Text: ciCon.bF
|———————Node:identifier Text: ciCon
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: RestrictReTxAttempts
|————Node:; Text: ;
|———Node:expression_statement Text: config->EsiInGatewayMode = ciCon.bF.EsiInGatewayMode;
|————Node:assignment_expression Text: config->EsiInGatewayMode = ciCon.bF.EsiInGatewayMode
|—————Node:field_expression Text: config->EsiInGatewayMode
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: EsiInGatewayMode
|—————Node:= Text: =
|—————Node:field_expression Text: ciCon.bF.EsiInGatewayMode
|——————Node:field_expression Text: ciCon.bF
|———————Node:identifier Text: ciCon
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: EsiInGatewayMode
|————Node:; Text: ;
|———Node:expression_statement Text: config->SystemErrorToListenOnly = ciCon.bF.SystemErrorToListenOnly;
|————Node:assignment_expression Text: config->SystemErrorToListenOnly = ciCon.bF.SystemErrorToListenOnly
|—————Node:field_expression Text: config->SystemErrorToListenOnly
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: SystemErrorToListenOnly
|—————Node:= Text: =
|—————Node:field_expression Text: ciCon.bF.SystemErrorToListenOnly
|——————Node:field_expression Text: ciCon.bF
|———————Node:identifier Text: ciCon
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: SystemErrorToListenOnly
|————Node:; Text: ;
|———Node:expression_statement Text: config->StoreInTEF = ciCon.bF.StoreInTEF;
|————Node:assignment_expression Text: config->StoreInTEF = ciCon.bF.StoreInTEF
|—————Node:field_expression Text: config->StoreInTEF
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: StoreInTEF
|—————Node:= Text: =
|—————Node:field_expression Text: ciCon.bF.StoreInTEF
|——————Node:field_expression Text: ciCon.bF
|———————Node:identifier Text: ciCon
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: StoreInTEF
|————Node:; Text: ;
|———Node:expression_statement Text: config->TXQEnable = ciCon.bF.TXQEnable;
|————Node:assignment_expression Text: config->TXQEnable = ciCon.bF.TXQEnable
|—————Node:field_expression Text: config->TXQEnable
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: TXQEnable
|—————Node:= Text: =
|—————Node:field_expression Text: ciCon.bF.TXQEnable
|——————Node:field_expression Text: ciCon.bF
|———————Node:identifier Text: ciCon
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: TXQEnable
|————Node:; Text: ;
|———Node:expression_statement Text: config->TxBandWidthSharing = ciCon.bF.TxBandWidthSharing;
|————Node:assignment_expression Text: config->TxBandWidthSharing = ciCon.bF.TxBandWidthSharing
|—————Node:field_expression Text: config->TxBandWidthSharing
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: TxBandWidthSharing
|—————Node:= Text: =
|—————Node:field_expression Text: ciCon.bF.TxBandWidthSharing
|——————Node:field_expression Text: ciCon.bF
|———————Node:identifier Text: ciCon
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: TxBandWidthSharing
|————Node:; Text: ;
|———Node:return_statement Text: return 0;
|————Node:return Text: return
|————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_Configure(CAN_CONFIG *config) {
  REG_CiCON ciCon;
  int8_t spiTransferError = 0;

  ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];

  ciCon.bF.DNetFilterCount = config->DNetFilterCount;
  ciCon.bF.IsoCrcEnable = config->IsoCrcEnable;
  ciCon.bF.ProtocolExceptionEventDisable =
      config->ProtocolExpectionEventDisable;
  ciCon.bF.WakeUpFilterEnable = config->WakeUpFilterEnable;
  ciCon.bF.WakeUpFilterTime = config->WakeUpFilterTime;
  ciCon.bF.BitRateSwitchDisable = config->BitRateSwitchDisable;
  ciCon.bF.RestrictReTxAttempts = config->RestrictReTxAttempts;
  ciCon.bF.EsiInGatewayMode = config->EsiInGatewayMode;
  ciCon.bF.SystemErrorToListenOnly = config->SystemErrorToListenOnly;
  ciCon.bF.StoreInTEF = config->StoreInTEF;
  ciCon.bF.TXQEnable = config->TXQEnable;
  ciCon.bF.TxBandWidthSharing = config->TxBandWidthSharing;

  spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiCON, ciCon.word);
  if (spiTransferError) {
    return -1;
  }

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_Configure(CAN_CONFIG *config)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_Configure
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_Configure
|———Node:parameter_list Text: (CAN_CONFIG *config)
|————Node:( Text: (
|————Node:parameter_declaration Text: CAN_CONFIG *config
|—————Node:type_identifier Text: CAN_CONFIG
|—————Node:pointer_declarator Text: *config
|——————Node:* Text: *
|——————Node:identifier Text: config
|————Node:) Text: )
|——Node:compound_statement Text: {
  REG_CiCON ciCon;
  int8_t spiTransferError = 0;

  ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];

  ciCon.bF.DNetFilterCount = config->DNetFilterCount;
  ciCon.bF.IsoCrcEnable = config->IsoCrcEnable;
  ciCon.bF.ProtocolExceptionEventDisable =
      config->ProtocolExpectionEventDisable;
  ciCon.bF.WakeUpFilterEnable = config->WakeUpFilterEnable;
  ciCon.bF.WakeUpFilterTime = config->WakeUpFilterTime;
  ciCon.bF.BitRateSwitchDisable = config->BitRateSwitchDisable;
  ciCon.bF.RestrictReTxAttempts = config->RestrictReTxAttempts;
  ciCon.bF.EsiInGatewayMode = config->EsiInGatewayMode;
  ciCon.bF.SystemErrorToListenOnly = config->SystemErrorToListenOnly;
  ciCon.bF.StoreInTEF = config->StoreInTEF;
  ciCon.bF.TXQEnable = config->TXQEnable;
  ciCon.bF.TxBandWidthSharing = config->TxBandWidthSharing;

  spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiCON, ciCon.word);
  if (spiTransferError) {
    return -1;
  }

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: REG_CiCON ciCon;
|————Node:type_identifier Text: REG_CiCON
|————Node:identifier Text: ciCon
|————Node:; Text: ;
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
|————Node:assignment_expression Text: ciCon.word = canControlResetValues[cREGADDR_CiCON / 4]
|—————Node:field_expression Text: ciCon.word
|——————Node:identifier Text: ciCon
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:subscript_expression Text: canControlResetValues[cREGADDR_CiCON / 4]
|——————Node:identifier Text: canControlResetValues
|——————Node:subscript_argument_list Text: [cREGADDR_CiCON / 4]
|———————Node:[ Text: [
|———————Node:binary_expression Text: cREGADDR_CiCON / 4
|————————Node:identifier Text: cREGADDR_CiCON
|————————Node:/ Text: /
|————————Node:number_literal Text: 4
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: ciCon.bF.DNetFilterCount = config->DNetFilterCount;
|————Node:assignment_expression Text: ciCon.bF.DNetFilterCount = config->DNetFilterCount
|—————Node:field_expression Text: ciCon.bF.DNetFilterCount
|——————Node:field_expression Text: ciCon.bF
|———————Node:identifier Text: ciCon
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: DNetFilterCount
|—————Node:= Text: =
|—————Node:field_expression Text: config->DNetFilterCount
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: DNetFilterCount
|————Node:; Text: ;
|———Node:expression_statement Text: ciCon.bF.IsoCrcEnable = config->IsoCrcEnable;
|————Node:assignment_expression Text: ciCon.bF.IsoCrcEnable = config->IsoCrcEnable
|—————Node:field_expression Text: ciCon.bF.IsoCrcEnable
|——————Node:field_expression Text: ciCon.bF
|———————Node:identifier Text: ciCon
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: IsoCrcEnable
|—————Node:= Text: =
|—————Node:field_expression Text: config->IsoCrcEnable
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: IsoCrcEnable
|————Node:; Text: ;
|———Node:expression_statement Text: ciCon.bF.ProtocolExceptionEventDisable =
      config->ProtocolExpectionEventDisable;
|————Node:assignment_expression Text: ciCon.bF.ProtocolExceptionEventDisable =
      config->ProtocolExpectionEventDisable
|—————Node:field_expression Text: ciCon.bF.ProtocolExceptionEventDisable
|——————Node:field_expression Text: ciCon.bF
|———————Node:identifier Text: ciCon
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: ProtocolExceptionEventDisable
|—————Node:= Text: =
|—————Node:field_expression Text: config->ProtocolExpectionEventDisable
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: ProtocolExpectionEventDisable
|————Node:; Text: ;
|———Node:expression_statement Text: ciCon.bF.WakeUpFilterEnable = config->WakeUpFilterEnable;
|————Node:assignment_expression Text: ciCon.bF.WakeUpFilterEnable = config->WakeUpFilterEnable
|—————Node:field_expression Text: ciCon.bF.WakeUpFilterEnable
|——————Node:field_expression Text: ciCon.bF
|———————Node:identifier Text: ciCon
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: WakeUpFilterEnable
|—————Node:= Text: =
|—————Node:field_expression Text: config->WakeUpFilterEnable
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: WakeUpFilterEnable
|————Node:; Text: ;
|———Node:expression_statement Text: ciCon.bF.WakeUpFilterTime = config->WakeUpFilterTime;
|————Node:assignment_expression Text: ciCon.bF.WakeUpFilterTime = config->WakeUpFilterTime
|—————Node:field_expression Text: ciCon.bF.WakeUpFilterTime
|——————Node:field_expression Text: ciCon.bF
|———————Node:identifier Text: ciCon
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: WakeUpFilterTime
|—————Node:= Text: =
|—————Node:field_expression Text: config->WakeUpFilterTime
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: WakeUpFilterTime
|————Node:; Text: ;
|———Node:expression_statement Text: ciCon.bF.BitRateSwitchDisable = config->BitRateSwitchDisable;
|————Node:assignment_expression Text: ciCon.bF.BitRateSwitchDisable = config->BitRateSwitchDisable
|—————Node:field_expression Text: ciCon.bF.BitRateSwitchDisable
|——————Node:field_expression Text: ciCon.bF
|———————Node:identifier Text: ciCon
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: BitRateSwitchDisable
|—————Node:= Text: =
|—————Node:field_expression Text: config->BitRateSwitchDisable
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: BitRateSwitchDisable
|————Node:; Text: ;
|———Node:expression_statement Text: ciCon.bF.RestrictReTxAttempts = config->RestrictReTxAttempts;
|————Node:assignment_expression Text: ciCon.bF.RestrictReTxAttempts = config->RestrictReTxAttempts
|—————Node:field_expression Text: ciCon.bF.RestrictReTxAttempts
|——————Node:field_expression Text: ciCon.bF
|———————Node:identifier Text: ciCon
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: RestrictReTxAttempts
|—————Node:= Text: =
|—————Node:field_expression Text: config->RestrictReTxAttempts
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: RestrictReTxAttempts
|————Node:; Text: ;
|———Node:expression_statement Text: ciCon.bF.EsiInGatewayMode = config->EsiInGatewayMode;
|————Node:assignment_expression Text: ciCon.bF.EsiInGatewayMode = config->EsiInGatewayMode
|—————Node:field_expression Text: ciCon.bF.EsiInGatewayMode
|——————Node:field_expression Text: ciCon.bF
|———————Node:identifier Text: ciCon
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: EsiInGatewayMode
|—————Node:= Text: =
|—————Node:field_expression Text: config->EsiInGatewayMode
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: EsiInGatewayMode
|————Node:; Text: ;
|———Node:expression_statement Text: ciCon.bF.SystemErrorToListenOnly = config->SystemErrorToListenOnly;
|————Node:assignment_expression Text: ciCon.bF.SystemErrorToListenOnly = config->SystemErrorToListenOnly
|—————Node:field_expression Text: ciCon.bF.SystemErrorToListenOnly
|——————Node:field_expression Text: ciCon.bF
|———————Node:identifier Text: ciCon
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: SystemErrorToListenOnly
|—————Node:= Text: =
|—————Node:field_expression Text: config->SystemErrorToListenOnly
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: SystemErrorToListenOnly
|————Node:; Text: ;
|———Node:expression_statement Text: ciCon.bF.StoreInTEF = config->StoreInTEF;
|————Node:assignment_expression Text: ciCon.bF.StoreInTEF = config->StoreInTEF
|—————Node:field_expression Text: ciCon.bF.StoreInTEF
|——————Node:field_expression Text: ciCon.bF
|———————Node:identifier Text: ciCon
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: StoreInTEF
|—————Node:= Text: =
|—————Node:field_expression Text: config->StoreInTEF
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: StoreInTEF
|————Node:; Text: ;
|———Node:expression_statement Text: ciCon.bF.TXQEnable = config->TXQEnable;
|————Node:assignment_expression Text: ciCon.bF.TXQEnable = config->TXQEnable
|—————Node:field_expression Text: ciCon.bF.TXQEnable
|——————Node:field_expression Text: ciCon.bF
|———————Node:identifier Text: ciCon
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: TXQEnable
|—————Node:= Text: =
|—————Node:field_expression Text: config->TXQEnable
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: TXQEnable
|————Node:; Text: ;
|———Node:expression_statement Text: ciCon.bF.TxBandWidthSharing = config->TxBandWidthSharing;
|————Node:assignment_expression Text: ciCon.bF.TxBandWidthSharing = config->TxBandWidthSharing
|—————Node:field_expression Text: ciCon.bF.TxBandWidthSharing
|——————Node:field_expression Text: ciCon.bF
|———————Node:identifier Text: ciCon
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: TxBandWidthSharing
|—————Node:= Text: =
|—————Node:field_expression Text: config->TxBandWidthSharing
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: TxBandWidthSharing
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiCON, ciCon.word);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiCON, ciCon.word)
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_WriteWord(cREGADDR_CiCON, ciCon.word)
|——————Node:identifier Text: mcp2518fd_WriteWord
|——————Node:argument_list Text: (cREGADDR_CiCON, ciCon.word)
|———————Node:( Text: (
|———————Node:identifier Text: cREGADDR_CiCON
|———————Node:, Text: ,
|———————Node:field_expression Text: ciCon.word
|————————Node:identifier Text: ciCon
|————————Node:. Text: .
|————————Node:field_identifier Text: word
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -1;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -1;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -1;
|——————Node:return Text: return
|——————Node:number_literal Text: -1
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_TransmitChannelConfigureObjectReset(
    CAN_TX_FIFO_CONFIG *config) {
  REG_CiFIFOCON ciFifoCon;
  ciFifoCon.word = canFifoResetValues[0]; // 10010010100101010000

  config->RTREnable = ciFifoCon.txBF.RTREnable;
  config->TxPriority = ciFifoCon.txBF.TxPriority;
  config->TxAttempts = ciFifoCon.txBF.TxAttempts;
  config->FifoSize = ciFifoCon.txBF.FifoSize;
  config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;

  return 0;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_TransmitChannelConfigureObjectReset(
    CAN_TX_FIFO_CONFIG *config)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_TransmitChannelConfigureObjectReset
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_TransmitChannelConfigureObjectReset
|———Node:parameter_list Text: (
    CAN_TX_FIFO_CONFIG *config)
|————Node:( Text: (
|————Node:parameter_declaration Text: CAN_TX_FIFO_CONFIG *config
|—————Node:type_identifier Text: CAN_TX_FIFO_CONFIG
|—————Node:pointer_declarator Text: *config
|——————Node:* Text: *
|——————Node:identifier Text: config
|————Node:) Text: )
|——Node:compound_statement Text: {
  REG_CiFIFOCON ciFifoCon;
  ciFifoCon.word = canFifoResetValues[0]; // 10010010100101010000

  config->RTREnable = ciFifoCon.txBF.RTREnable;
  config->TxPriority = ciFifoCon.txBF.TxPriority;
  config->TxAttempts = ciFifoCon.txBF.TxAttempts;
  config->FifoSize = ciFifoCon.txBF.FifoSize;
  config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;

  return 0;
}
|———Node:{ Text: {
|———Node:declaration Text: REG_CiFIFOCON ciFifoCon;
|————Node:type_identifier Text: REG_CiFIFOCON
|————Node:identifier Text: ciFifoCon
|————Node:; Text: ;
|———Node:expression_statement Text: ciFifoCon.word = canFifoResetValues[0];
|————Node:assignment_expression Text: ciFifoCon.word = canFifoResetValues[0]
|—————Node:field_expression Text: ciFifoCon.word
|——————Node:identifier Text: ciFifoCon
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:subscript_expression Text: canFifoResetValues[0]
|——————Node:identifier Text: canFifoResetValues
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: config->RTREnable = ciFifoCon.txBF.RTREnable;
|————Node:assignment_expression Text: config->RTREnable = ciFifoCon.txBF.RTREnable
|—————Node:field_expression Text: config->RTREnable
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: RTREnable
|—————Node:= Text: =
|—————Node:field_expression Text: ciFifoCon.txBF.RTREnable
|——————Node:field_expression Text: ciFifoCon.txBF
|———————Node:identifier Text: ciFifoCon
|———————Node:. Text: .
|———————Node:field_identifier Text: txBF
|——————Node:. Text: .
|——————Node:field_identifier Text: RTREnable
|————Node:; Text: ;
|———Node:expression_statement Text: config->TxPriority = ciFifoCon.txBF.TxPriority;
|————Node:assignment_expression Text: config->TxPriority = ciFifoCon.txBF.TxPriority
|—————Node:field_expression Text: config->TxPriority
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: TxPriority
|—————Node:= Text: =
|—————Node:field_expression Text: ciFifoCon.txBF.TxPriority
|——————Node:field_expression Text: ciFifoCon.txBF
|———————Node:identifier Text: ciFifoCon
|———————Node:. Text: .
|———————Node:field_identifier Text: txBF
|——————Node:. Text: .
|——————Node:field_identifier Text: TxPriority
|————Node:; Text: ;
|———Node:expression_statement Text: config->TxAttempts = ciFifoCon.txBF.TxAttempts;
|————Node:assignment_expression Text: config->TxAttempts = ciFifoCon.txBF.TxAttempts
|—————Node:field_expression Text: config->TxAttempts
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: TxAttempts
|—————Node:= Text: =
|—————Node:field_expression Text: ciFifoCon.txBF.TxAttempts
|——————Node:field_expression Text: ciFifoCon.txBF
|———————Node:identifier Text: ciFifoCon
|———————Node:. Text: .
|———————Node:field_identifier Text: txBF
|——————Node:. Text: .
|——————Node:field_identifier Text: TxAttempts
|————Node:; Text: ;
|———Node:expression_statement Text: config->FifoSize = ciFifoCon.txBF.FifoSize;
|————Node:assignment_expression Text: config->FifoSize = ciFifoCon.txBF.FifoSize
|—————Node:field_expression Text: config->FifoSize
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: FifoSize
|—————Node:= Text: =
|—————Node:field_expression Text: ciFifoCon.txBF.FifoSize
|——————Node:field_expression Text: ciFifoCon.txBF
|———————Node:identifier Text: ciFifoCon
|———————Node:. Text: .
|———————Node:field_identifier Text: txBF
|——————Node:. Text: .
|——————Node:field_identifier Text: FifoSize
|————Node:; Text: ;
|———Node:expression_statement Text: config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
|————Node:assignment_expression Text: config->PayLoadSize = ciFifoCon.txBF.PayLoadSize
|—————Node:field_expression Text: config->PayLoadSize
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: PayLoadSize
|—————Node:= Text: =
|—————Node:field_expression Text: ciFifoCon.txBF.PayLoadSize
|——————Node:field_expression Text: ciFifoCon.txBF
|———————Node:identifier Text: ciFifoCon
|———————Node:. Text: .
|———————Node:field_identifier Text: txBF
|——————Node:. Text: .
|——————Node:field_identifier Text: PayLoadSize
|————Node:; Text: ;
|———Node:return_statement Text: return 0;
|————Node:return Text: return
|————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t
mcp2518fd::mcp2518fd_TransmitChannelConfigure(CAN_FIFO_CHANNEL channel,
                                              CAN_TX_FIFO_CONFIG *config) {
  int8_t spiTransferError = 0;
  uint16_t a = 0;
  // Setup FIFO
  REG_CiFIFOCON ciFifoCon;
  ciFifoCon.word = canFifoResetValues[0];
  ciFifoCon.txBF.TxEnable = 1;
  ciFifoCon.txBF.FifoSize = config->FifoSize;
  ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
  ciFifoCon.txBF.TxAttempts = config->TxAttempts;
  ciFifoCon.txBF.TxPriority = config->TxPriority;
  ciFifoCon.txBF.RTREnable = config->RTREnable;

  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);

  spiTransferError = mcp2518fd_WriteWord(a, ciFifoCon.word);

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_TransmitChannelConfigure(CAN_FIFO_CHANNEL channel,
                                              CAN_TX_FIFO_CONFIG *config)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_TransmitChannelConfigure
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_TransmitChannelConfigure
|———Node:parameter_list Text: (CAN_FIFO_CHANNEL channel,
                                              CAN_TX_FIFO_CONFIG *config)
|————Node:( Text: (
|————Node:parameter_declaration Text: CAN_FIFO_CHANNEL channel
|—————Node:type_identifier Text: CAN_FIFO_CHANNEL
|—————Node:identifier Text: channel
|————Node:, Text: ,
|————Node:parameter_declaration Text: CAN_TX_FIFO_CONFIG *config
|—————Node:type_identifier Text: CAN_TX_FIFO_CONFIG
|—————Node:pointer_declarator Text: *config
|——————Node:* Text: *
|——————Node:identifier Text: config
|————Node:) Text: )
|——Node:compound_statement Text: {
  int8_t spiTransferError = 0;
  uint16_t a = 0;
  // Setup FIFO
  REG_CiFIFOCON ciFifoCon;
  ciFifoCon.word = canFifoResetValues[0];
  ciFifoCon.txBF.TxEnable = 1;
  ciFifoCon.txBF.FifoSize = config->FifoSize;
  ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
  ciFifoCon.txBF.TxAttempts = config->TxAttempts;
  ciFifoCon.txBF.TxPriority = config->TxPriority;
  ciFifoCon.txBF.RTREnable = config->RTREnable;

  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);

  spiTransferError = mcp2518fd_WriteWord(a, ciFifoCon.word);

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint16_t a = 0;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: a = 0
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:declaration Text: REG_CiFIFOCON ciFifoCon;
|————Node:type_identifier Text: REG_CiFIFOCON
|————Node:identifier Text: ciFifoCon
|————Node:; Text: ;
|———Node:expression_statement Text: ciFifoCon.word = canFifoResetValues[0];
|————Node:assignment_expression Text: ciFifoCon.word = canFifoResetValues[0]
|—————Node:field_expression Text: ciFifoCon.word
|——————Node:identifier Text: ciFifoCon
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:subscript_expression Text: canFifoResetValues[0]
|——————Node:identifier Text: canFifoResetValues
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: ciFifoCon.txBF.TxEnable = 1;
|————Node:assignment_expression Text: ciFifoCon.txBF.TxEnable = 1
|—————Node:field_expression Text: ciFifoCon.txBF.TxEnable
|——————Node:field_expression Text: ciFifoCon.txBF
|———————Node:identifier Text: ciFifoCon
|———————Node:. Text: .
|———————Node:field_identifier Text: txBF
|——————Node:. Text: .
|——————Node:field_identifier Text: TxEnable
|—————Node:= Text: =
|—————Node:number_literal Text: 1
|————Node:; Text: ;
|———Node:expression_statement Text: ciFifoCon.txBF.FifoSize = config->FifoSize;
|————Node:assignment_expression Text: ciFifoCon.txBF.FifoSize = config->FifoSize
|—————Node:field_expression Text: ciFifoCon.txBF.FifoSize
|——————Node:field_expression Text: ciFifoCon.txBF
|———————Node:identifier Text: ciFifoCon
|———————Node:. Text: .
|———————Node:field_identifier Text: txBF
|——————Node:. Text: .
|——————Node:field_identifier Text: FifoSize
|—————Node:= Text: =
|—————Node:field_expression Text: config->FifoSize
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: FifoSize
|————Node:; Text: ;
|———Node:expression_statement Text: ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
|————Node:assignment_expression Text: ciFifoCon.txBF.PayLoadSize = config->PayLoadSize
|—————Node:field_expression Text: ciFifoCon.txBF.PayLoadSize
|——————Node:field_expression Text: ciFifoCon.txBF
|———————Node:identifier Text: ciFifoCon
|———————Node:. Text: .
|———————Node:field_identifier Text: txBF
|——————Node:. Text: .
|——————Node:field_identifier Text: PayLoadSize
|—————Node:= Text: =
|—————Node:field_expression Text: config->PayLoadSize
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: PayLoadSize
|————Node:; Text: ;
|———Node:expression_statement Text: ciFifoCon.txBF.TxAttempts = config->TxAttempts;
|————Node:assignment_expression Text: ciFifoCon.txBF.TxAttempts = config->TxAttempts
|—————Node:field_expression Text: ciFifoCon.txBF.TxAttempts
|——————Node:field_expression Text: ciFifoCon.txBF
|———————Node:identifier Text: ciFifoCon
|———————Node:. Text: .
|———————Node:field_identifier Text: txBF
|——————Node:. Text: .
|——————Node:field_identifier Text: TxAttempts
|—————Node:= Text: =
|—————Node:field_expression Text: config->TxAttempts
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: TxAttempts
|————Node:; Text: ;
|———Node:expression_statement Text: ciFifoCon.txBF.TxPriority = config->TxPriority;
|————Node:assignment_expression Text: ciFifoCon.txBF.TxPriority = config->TxPriority
|—————Node:field_expression Text: ciFifoCon.txBF.TxPriority
|——————Node:field_expression Text: ciFifoCon.txBF
|———————Node:identifier Text: ciFifoCon
|———————Node:. Text: .
|———————Node:field_identifier Text: txBF
|——————Node:. Text: .
|——————Node:field_identifier Text: TxPriority
|—————Node:= Text: =
|—————Node:field_expression Text: config->TxPriority
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: TxPriority
|————Node:; Text: ;
|———Node:expression_statement Text: ciFifoCon.txBF.RTREnable = config->RTREnable;
|————Node:assignment_expression Text: ciFifoCon.txBF.RTREnable = config->RTREnable
|—————Node:field_expression Text: ciFifoCon.txBF.RTREnable
|——————Node:field_expression Text: ciFifoCon.txBF
|———————Node:identifier Text: ciFifoCon
|———————Node:. Text: .
|———————Node:field_identifier Text: txBF
|——————Node:. Text: .
|——————Node:field_identifier Text: RTREnable
|—————Node:= Text: =
|—————Node:field_expression Text: config->RTREnable
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: RTREnable
|————Node:; Text: ;
|———Node:expression_statement Text: a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
|————Node:assignment_expression Text: a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET)
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:binary_expression Text: cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET)
|——————Node:identifier Text: cREGADDR_CiFIFOCON
|——————Node:+ Text: +
|——————Node:parenthesized_expression Text: (channel * CiFIFO_OFFSET)
|———————Node:( Text: (
|———————Node:binary_expression Text: channel * CiFIFO_OFFSET
|————————Node:identifier Text: channel
|————————Node:* Text: *
|————————Node:identifier Text: CiFIFO_OFFSET
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransferError = mcp2518fd_WriteWord(a, ciFifoCon.word);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_WriteWord(a, ciFifoCon.word)
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_WriteWord(a, ciFifoCon.word)
|——————Node:identifier Text: mcp2518fd_WriteWord
|——————Node:argument_list Text: (a, ciFifoCon.word)
|———————Node:( Text: (
|———————Node:identifier Text: a
|———————Node:, Text: ,
|———————Node:field_expression Text: ciFifoCon.word
|————————Node:identifier Text: ciFifoCon
|————————Node:. Text: .
|————————Node:field_identifier Text: word
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_ReceiveChannelConfigureObjectReset(
    CAN_RX_FIFO_CONFIG *config) {
  REG_CiFIFOCON ciFifoCon;
  ciFifoCon.word = canFifoResetValues[0];

  config->FifoSize = ciFifoCon.rxBF.FifoSize;
  config->PayLoadSize = ciFifoCon.rxBF.PayLoadSize;
  config->RxTimeStampEnable = ciFifoCon.rxBF.RxTimeStampEnable;

  return 0;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_ReceiveChannelConfigureObjectReset(
    CAN_RX_FIFO_CONFIG *config)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_ReceiveChannelConfigureObjectReset
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_ReceiveChannelConfigureObjectReset
|———Node:parameter_list Text: (
    CAN_RX_FIFO_CONFIG *config)
|————Node:( Text: (
|————Node:parameter_declaration Text: CAN_RX_FIFO_CONFIG *config
|—————Node:type_identifier Text: CAN_RX_FIFO_CONFIG
|—————Node:pointer_declarator Text: *config
|——————Node:* Text: *
|——————Node:identifier Text: config
|————Node:) Text: )
|——Node:compound_statement Text: {
  REG_CiFIFOCON ciFifoCon;
  ciFifoCon.word = canFifoResetValues[0];

  config->FifoSize = ciFifoCon.rxBF.FifoSize;
  config->PayLoadSize = ciFifoCon.rxBF.PayLoadSize;
  config->RxTimeStampEnable = ciFifoCon.rxBF.RxTimeStampEnable;

  return 0;
}
|———Node:{ Text: {
|———Node:declaration Text: REG_CiFIFOCON ciFifoCon;
|————Node:type_identifier Text: REG_CiFIFOCON
|————Node:identifier Text: ciFifoCon
|————Node:; Text: ;
|———Node:expression_statement Text: ciFifoCon.word = canFifoResetValues[0];
|————Node:assignment_expression Text: ciFifoCon.word = canFifoResetValues[0]
|—————Node:field_expression Text: ciFifoCon.word
|——————Node:identifier Text: ciFifoCon
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:subscript_expression Text: canFifoResetValues[0]
|——————Node:identifier Text: canFifoResetValues
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: config->FifoSize = ciFifoCon.rxBF.FifoSize;
|————Node:assignment_expression Text: config->FifoSize = ciFifoCon.rxBF.FifoSize
|—————Node:field_expression Text: config->FifoSize
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: FifoSize
|—————Node:= Text: =
|—————Node:field_expression Text: ciFifoCon.rxBF.FifoSize
|——————Node:field_expression Text: ciFifoCon.rxBF
|———————Node:identifier Text: ciFifoCon
|———————Node:. Text: .
|———————Node:field_identifier Text: rxBF
|——————Node:. Text: .
|——————Node:field_identifier Text: FifoSize
|————Node:; Text: ;
|———Node:expression_statement Text: config->PayLoadSize = ciFifoCon.rxBF.PayLoadSize;
|————Node:assignment_expression Text: config->PayLoadSize = ciFifoCon.rxBF.PayLoadSize
|—————Node:field_expression Text: config->PayLoadSize
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: PayLoadSize
|—————Node:= Text: =
|—————Node:field_expression Text: ciFifoCon.rxBF.PayLoadSize
|——————Node:field_expression Text: ciFifoCon.rxBF
|———————Node:identifier Text: ciFifoCon
|———————Node:. Text: .
|———————Node:field_identifier Text: rxBF
|——————Node:. Text: .
|——————Node:field_identifier Text: PayLoadSize
|————Node:; Text: ;
|———Node:expression_statement Text: config->RxTimeStampEnable = ciFifoCon.rxBF.RxTimeStampEnable;
|————Node:assignment_expression Text: config->RxTimeStampEnable = ciFifoCon.rxBF.RxTimeStampEnable
|—————Node:field_expression Text: config->RxTimeStampEnable
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: RxTimeStampEnable
|—————Node:= Text: =
|—————Node:field_expression Text: ciFifoCon.rxBF.RxTimeStampEnable
|——————Node:field_expression Text: ciFifoCon.rxBF
|———————Node:identifier Text: ciFifoCon
|———————Node:. Text: .
|———————Node:field_identifier Text: rxBF
|——————Node:. Text: .
|——————Node:field_identifier Text: RxTimeStampEnable
|————Node:; Text: ;
|———Node:return_statement Text: return 0;
|————Node:return Text: return
|————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t
mcp2518fd::mcp2518fd_ReceiveChannelConfigure(CAN_FIFO_CHANNEL channel,
                                             CAN_RX_FIFO_CONFIG *config) {
  int8_t spiTransferError = 0;
  uint16_t a = 0;

  if (channel == CAN_TXQUEUE_CH0) {
    return -100;
  }

  // Setup FIFO
  REG_CiFIFOCON ciFifoCon;
  ciFifoCon.word = canFifoResetValues[0];

  ciFifoCon.rxBF.TxEnable = 0;
  ciFifoCon.rxBF.FifoSize = config->FifoSize;
  ciFifoCon.rxBF.PayLoadSize = config->PayLoadSize;
  ciFifoCon.rxBF.RxTimeStampEnable = config->RxTimeStampEnable;

  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);

  spiTransferError = mcp2518fd_WriteWord(a, ciFifoCon.word);

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_ReceiveChannelConfigure(CAN_FIFO_CHANNEL channel,
                                             CAN_RX_FIFO_CONFIG *config)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_ReceiveChannelConfigure
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_ReceiveChannelConfigure
|———Node:parameter_list Text: (CAN_FIFO_CHANNEL channel,
                                             CAN_RX_FIFO_CONFIG *config)
|————Node:( Text: (
|————Node:parameter_declaration Text: CAN_FIFO_CHANNEL channel
|—————Node:type_identifier Text: CAN_FIFO_CHANNEL
|—————Node:identifier Text: channel
|————Node:, Text: ,
|————Node:parameter_declaration Text: CAN_RX_FIFO_CONFIG *config
|—————Node:type_identifier Text: CAN_RX_FIFO_CONFIG
|—————Node:pointer_declarator Text: *config
|——————Node:* Text: *
|——————Node:identifier Text: config
|————Node:) Text: )
|——Node:compound_statement Text: {
  int8_t spiTransferError = 0;
  uint16_t a = 0;

  if (channel == CAN_TXQUEUE_CH0) {
    return -100;
  }

  // Setup FIFO
  REG_CiFIFOCON ciFifoCon;
  ciFifoCon.word = canFifoResetValues[0];

  ciFifoCon.rxBF.TxEnable = 0;
  ciFifoCon.rxBF.FifoSize = config->FifoSize;
  ciFifoCon.rxBF.PayLoadSize = config->PayLoadSize;
  ciFifoCon.rxBF.RxTimeStampEnable = config->RxTimeStampEnable;

  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);

  spiTransferError = mcp2518fd_WriteWord(a, ciFifoCon.word);

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint16_t a = 0;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: a = 0
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:if_statement Text: if (channel == CAN_TXQUEUE_CH0) {
    return -100;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (channel == CAN_TXQUEUE_CH0)
|—————Node:( Text: (
|—————Node:binary_expression Text: channel == CAN_TXQUEUE_CH0
|——————Node:identifier Text: channel
|——————Node:== Text: ==
|——————Node:identifier Text: CAN_TXQUEUE_CH0
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -100;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -100;
|——————Node:return Text: return
|——————Node:number_literal Text: -100
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:declaration Text: REG_CiFIFOCON ciFifoCon;
|————Node:type_identifier Text: REG_CiFIFOCON
|————Node:identifier Text: ciFifoCon
|————Node:; Text: ;
|———Node:expression_statement Text: ciFifoCon.word = canFifoResetValues[0];
|————Node:assignment_expression Text: ciFifoCon.word = canFifoResetValues[0]
|—————Node:field_expression Text: ciFifoCon.word
|——————Node:identifier Text: ciFifoCon
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:subscript_expression Text: canFifoResetValues[0]
|——————Node:identifier Text: canFifoResetValues
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: ciFifoCon.rxBF.TxEnable = 0;
|————Node:assignment_expression Text: ciFifoCon.rxBF.TxEnable = 0
|—————Node:field_expression Text: ciFifoCon.rxBF.TxEnable
|——————Node:field_expression Text: ciFifoCon.rxBF
|———————Node:identifier Text: ciFifoCon
|———————Node:. Text: .
|———————Node:field_identifier Text: rxBF
|——————Node:. Text: .
|——————Node:field_identifier Text: TxEnable
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: ciFifoCon.rxBF.FifoSize = config->FifoSize;
|————Node:assignment_expression Text: ciFifoCon.rxBF.FifoSize = config->FifoSize
|—————Node:field_expression Text: ciFifoCon.rxBF.FifoSize
|——————Node:field_expression Text: ciFifoCon.rxBF
|———————Node:identifier Text: ciFifoCon
|———————Node:. Text: .
|———————Node:field_identifier Text: rxBF
|——————Node:. Text: .
|——————Node:field_identifier Text: FifoSize
|—————Node:= Text: =
|—————Node:field_expression Text: config->FifoSize
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: FifoSize
|————Node:; Text: ;
|———Node:expression_statement Text: ciFifoCon.rxBF.PayLoadSize = config->PayLoadSize;
|————Node:assignment_expression Text: ciFifoCon.rxBF.PayLoadSize = config->PayLoadSize
|—————Node:field_expression Text: ciFifoCon.rxBF.PayLoadSize
|——————Node:field_expression Text: ciFifoCon.rxBF
|———————Node:identifier Text: ciFifoCon
|———————Node:. Text: .
|———————Node:field_identifier Text: rxBF
|——————Node:. Text: .
|——————Node:field_identifier Text: PayLoadSize
|—————Node:= Text: =
|—————Node:field_expression Text: config->PayLoadSize
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: PayLoadSize
|————Node:; Text: ;
|———Node:expression_statement Text: ciFifoCon.rxBF.RxTimeStampEnable = config->RxTimeStampEnable;
|————Node:assignment_expression Text: ciFifoCon.rxBF.RxTimeStampEnable = config->RxTimeStampEnable
|—————Node:field_expression Text: ciFifoCon.rxBF.RxTimeStampEnable
|——————Node:field_expression Text: ciFifoCon.rxBF
|———————Node:identifier Text: ciFifoCon
|———————Node:. Text: .
|———————Node:field_identifier Text: rxBF
|——————Node:. Text: .
|——————Node:field_identifier Text: RxTimeStampEnable
|—————Node:= Text: =
|—————Node:field_expression Text: config->RxTimeStampEnable
|——————Node:identifier Text: config
|——————Node:-> Text: ->
|——————Node:field_identifier Text: RxTimeStampEnable
|————Node:; Text: ;
|———Node:expression_statement Text: a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
|————Node:assignment_expression Text: a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET)
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:binary_expression Text: cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET)
|——————Node:identifier Text: cREGADDR_CiFIFOCON
|——————Node:+ Text: +
|——————Node:parenthesized_expression Text: (channel * CiFIFO_OFFSET)
|———————Node:( Text: (
|———————Node:binary_expression Text: channel * CiFIFO_OFFSET
|————————Node:identifier Text: channel
|————————Node:* Text: *
|————————Node:identifier Text: CiFIFO_OFFSET
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransferError = mcp2518fd_WriteWord(a, ciFifoCon.word);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_WriteWord(a, ciFifoCon.word)
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_WriteWord(a, ciFifoCon.word)
|——————Node:identifier Text: mcp2518fd_WriteWord
|——————Node:argument_list Text: (a, ciFifoCon.word)
|———————Node:( Text: (
|———————Node:identifier Text: a
|———————Node:, Text: ,
|———————Node:field_expression Text: ciFifoCon.word
|————————Node:identifier Text: ciFifoCon
|————————Node:. Text: .
|————————Node:field_identifier Text: word
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_FilterObjectConfigure(CAN_FILTER filter,
                                                  CAN_FILTEROBJ_ID *id) {
  uint16_t a;
  REG_CiFLTOBJ fObj;
  int8_t spiTransferError = 0;

  // Setup
  fObj.word = 0;
  fObj.bF = *id;
  a = cREGADDR_CiFLTOBJ + (filter * CiFILTER_OFFSET);

  spiTransferError = mcp2518fd_WriteWord(a, fObj.word);

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_FilterObjectConfigure(CAN_FILTER filter,
                                                  CAN_FILTEROBJ_ID *id)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_FilterObjectConfigure
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_FilterObjectConfigure
|———Node:parameter_list Text: (CAN_FILTER filter,
                                                  CAN_FILTEROBJ_ID *id)
|————Node:( Text: (
|————Node:parameter_declaration Text: CAN_FILTER filter
|—————Node:type_identifier Text: CAN_FILTER
|—————Node:identifier Text: filter
|————Node:, Text: ,
|————Node:parameter_declaration Text: CAN_FILTEROBJ_ID *id
|—————Node:type_identifier Text: CAN_FILTEROBJ_ID
|—————Node:pointer_declarator Text: *id
|——————Node:* Text: *
|——————Node:identifier Text: id
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint16_t a;
  REG_CiFLTOBJ fObj;
  int8_t spiTransferError = 0;

  // Setup
  fObj.word = 0;
  fObj.bF = *id;
  a = cREGADDR_CiFLTOBJ + (filter * CiFILTER_OFFSET);

  spiTransferError = mcp2518fd_WriteWord(a, fObj.word);

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: uint16_t a;
|————Node:primitive_type Text: uint16_t
|————Node:identifier Text: a
|————Node:; Text: ;
|———Node:declaration Text: REG_CiFLTOBJ fObj;
|————Node:type_identifier Text: REG_CiFLTOBJ
|————Node:identifier Text: fObj
|————Node:; Text: ;
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: fObj.word = 0;
|————Node:assignment_expression Text: fObj.word = 0
|—————Node:field_expression Text: fObj.word
|——————Node:identifier Text: fObj
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: fObj.bF = *id;
|————Node:assignment_expression Text: fObj.bF = *id
|—————Node:field_expression Text: fObj.bF
|——————Node:identifier Text: fObj
|——————Node:. Text: .
|——————Node:field_identifier Text: bF
|—————Node:= Text: =
|—————Node:pointer_expression Text: *id
|——————Node:* Text: *
|——————Node:identifier Text: id
|————Node:; Text: ;
|———Node:expression_statement Text: a = cREGADDR_CiFLTOBJ + (filter * CiFILTER_OFFSET);
|————Node:assignment_expression Text: a = cREGADDR_CiFLTOBJ + (filter * CiFILTER_OFFSET)
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:binary_expression Text: cREGADDR_CiFLTOBJ + (filter * CiFILTER_OFFSET)
|——————Node:identifier Text: cREGADDR_CiFLTOBJ
|——————Node:+ Text: +
|——————Node:parenthesized_expression Text: (filter * CiFILTER_OFFSET)
|———————Node:( Text: (
|———————Node:binary_expression Text: filter * CiFILTER_OFFSET
|————————Node:identifier Text: filter
|————————Node:* Text: *
|————————Node:identifier Text: CiFILTER_OFFSET
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransferError = mcp2518fd_WriteWord(a, fObj.word);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_WriteWord(a, fObj.word)
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_WriteWord(a, fObj.word)
|——————Node:identifier Text: mcp2518fd_WriteWord
|——————Node:argument_list Text: (a, fObj.word)
|———————Node:( Text: (
|———————Node:identifier Text: a
|———————Node:, Text: ,
|———————Node:field_expression Text: fObj.word
|————————Node:identifier Text: fObj
|————————Node:. Text: .
|————————Node:field_identifier Text: word
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_FilterMaskConfigure(CAN_FILTER filter,
                                                CAN_MASKOBJ_ID *mask) {
  uint16_t a;
  REG_CiMASK mObj;
  int8_t spiTransferError = 0;

  // Setup
  mObj.word = 0;
  mObj.bF = *mask;
  a = cREGADDR_CiMASK + (filter * CiFILTER_OFFSET);

  spiTransferError = mcp2518fd_WriteWord(a, mObj.word);

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_FilterMaskConfigure(CAN_FILTER filter,
                                                CAN_MASKOBJ_ID *mask)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_FilterMaskConfigure
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_FilterMaskConfigure
|———Node:parameter_list Text: (CAN_FILTER filter,
                                                CAN_MASKOBJ_ID *mask)
|————Node:( Text: (
|————Node:parameter_declaration Text: CAN_FILTER filter
|—————Node:type_identifier Text: CAN_FILTER
|—————Node:identifier Text: filter
|————Node:, Text: ,
|————Node:parameter_declaration Text: CAN_MASKOBJ_ID *mask
|—————Node:type_identifier Text: CAN_MASKOBJ_ID
|—————Node:pointer_declarator Text: *mask
|——————Node:* Text: *
|——————Node:identifier Text: mask
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint16_t a;
  REG_CiMASK mObj;
  int8_t spiTransferError = 0;

  // Setup
  mObj.word = 0;
  mObj.bF = *mask;
  a = cREGADDR_CiMASK + (filter * CiFILTER_OFFSET);

  spiTransferError = mcp2518fd_WriteWord(a, mObj.word);

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: uint16_t a;
|————Node:primitive_type Text: uint16_t
|————Node:identifier Text: a
|————Node:; Text: ;
|———Node:declaration Text: REG_CiMASK mObj;
|————Node:type_identifier Text: REG_CiMASK
|————Node:identifier Text: mObj
|————Node:; Text: ;
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: mObj.word = 0;
|————Node:assignment_expression Text: mObj.word = 0
|—————Node:field_expression Text: mObj.word
|——————Node:identifier Text: mObj
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: mObj.bF = *mask;
|————Node:assignment_expression Text: mObj.bF = *mask
|—————Node:field_expression Text: mObj.bF
|——————Node:identifier Text: mObj
|——————Node:. Text: .
|——————Node:field_identifier Text: bF
|—————Node:= Text: =
|—————Node:pointer_expression Text: *mask
|——————Node:* Text: *
|——————Node:identifier Text: mask
|————Node:; Text: ;
|———Node:expression_statement Text: a = cREGADDR_CiMASK + (filter * CiFILTER_OFFSET);
|————Node:assignment_expression Text: a = cREGADDR_CiMASK + (filter * CiFILTER_OFFSET)
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:binary_expression Text: cREGADDR_CiMASK + (filter * CiFILTER_OFFSET)
|——————Node:identifier Text: cREGADDR_CiMASK
|——————Node:+ Text: +
|——————Node:parenthesized_expression Text: (filter * CiFILTER_OFFSET)
|———————Node:( Text: (
|———————Node:binary_expression Text: filter * CiFILTER_OFFSET
|————————Node:identifier Text: filter
|————————Node:* Text: *
|————————Node:identifier Text: CiFILTER_OFFSET
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransferError = mcp2518fd_WriteWord(a, mObj.word);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_WriteWord(a, mObj.word)
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_WriteWord(a, mObj.word)
|——————Node:identifier Text: mcp2518fd_WriteWord
|——————Node:argument_list Text: (a, mObj.word)
|———————Node:( Text: (
|———————Node:identifier Text: a
|———————Node:, Text: ,
|———————Node:field_expression Text: mObj.word
|————————Node:identifier Text: mObj
|————————Node:. Text: .
|————————Node:field_identifier Text: word
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_FilterToFifoLink(CAN_FILTER filter,
                                             CAN_FIFO_CHANNEL channel,
                                             bool enable) {
  uint16_t a;
  REG_CiFLTCON_BYTE fCtrl;
  int8_t spiTransferError = 0;

  // Enable
  if (enable) {
    fCtrl.bF.Enable = 1;
  } else {
    fCtrl.bF.Enable = 0;
  }

  // Link
  fCtrl.bF.BufferPointer = channel;
  a = cREGADDR_CiFLTCON + filter;

  spiTransferError = mcp2518fd_WriteByte(a, fCtrl.byte);

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_FilterToFifoLink(CAN_FILTER filter,
                                             CAN_FIFO_CHANNEL channel,
                                             bool enable)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_FilterToFifoLink
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_FilterToFifoLink
|———Node:parameter_list Text: (CAN_FILTER filter,
                                             CAN_FIFO_CHANNEL channel,
                                             bool enable)
|————Node:( Text: (
|————Node:parameter_declaration Text: CAN_FILTER filter
|—————Node:type_identifier Text: CAN_FILTER
|—————Node:identifier Text: filter
|————Node:, Text: ,
|————Node:parameter_declaration Text: CAN_FIFO_CHANNEL channel
|—————Node:type_identifier Text: CAN_FIFO_CHANNEL
|—————Node:identifier Text: channel
|————Node:, Text: ,
|————Node:parameter_declaration Text: bool enable
|—————Node:primitive_type Text: bool
|—————Node:identifier Text: enable
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint16_t a;
  REG_CiFLTCON_BYTE fCtrl;
  int8_t spiTransferError = 0;

  // Enable
  if (enable) {
    fCtrl.bF.Enable = 1;
  } else {
    fCtrl.bF.Enable = 0;
  }

  // Link
  fCtrl.bF.BufferPointer = channel;
  a = cREGADDR_CiFLTCON + filter;

  spiTransferError = mcp2518fd_WriteByte(a, fCtrl.byte);

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: uint16_t a;
|————Node:primitive_type Text: uint16_t
|————Node:identifier Text: a
|————Node:; Text: ;
|———Node:declaration Text: REG_CiFLTCON_BYTE fCtrl;
|————Node:type_identifier Text: REG_CiFLTCON_BYTE
|————Node:identifier Text: fCtrl
|————Node:; Text: ;
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:if_statement Text: if (enable) {
    fCtrl.bF.Enable = 1;
  } else {
    fCtrl.bF.Enable = 0;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (enable)
|—————Node:( Text: (
|—————Node:identifier Text: enable
|—————Node:) Text: )
|————Node:compound_statement Text: {
    fCtrl.bF.Enable = 1;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: fCtrl.bF.Enable = 1;
|——————Node:assignment_expression Text: fCtrl.bF.Enable = 1
|———————Node:field_expression Text: fCtrl.bF.Enable
|————————Node:field_expression Text: fCtrl.bF
|—————————Node:identifier Text: fCtrl
|—————————Node:. Text: .
|—————————Node:field_identifier Text: bF
|————————Node:. Text: .
|————————Node:field_identifier Text: Enable
|———————Node:= Text: =
|———————Node:number_literal Text: 1
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else {
    fCtrl.bF.Enable = 0;
  }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
    fCtrl.bF.Enable = 0;
  }
|——————Node:{ Text: {
|——————Node:expression_statement Text: fCtrl.bF.Enable = 0;
|———————Node:assignment_expression Text: fCtrl.bF.Enable = 0
|————————Node:field_expression Text: fCtrl.bF.Enable
|—————————Node:field_expression Text: fCtrl.bF
|——————————Node:identifier Text: fCtrl
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: Enable
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:} Text: }
|———Node:comment
|———Node:expression_statement Text: fCtrl.bF.BufferPointer = channel;
|————Node:assignment_expression Text: fCtrl.bF.BufferPointer = channel
|—————Node:field_expression Text: fCtrl.bF.BufferPointer
|——————Node:field_expression Text: fCtrl.bF
|———————Node:identifier Text: fCtrl
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: BufferPointer
|—————Node:= Text: =
|—————Node:identifier Text: channel
|————Node:; Text: ;
|———Node:expression_statement Text: a = cREGADDR_CiFLTCON + filter;
|————Node:assignment_expression Text: a = cREGADDR_CiFLTCON + filter
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:binary_expression Text: cREGADDR_CiFLTCON + filter
|——————Node:identifier Text: cREGADDR_CiFLTCON
|——————Node:+ Text: +
|——————Node:identifier Text: filter
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransferError = mcp2518fd_WriteByte(a, fCtrl.byte);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_WriteByte(a, fCtrl.byte)
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_WriteByte(a, fCtrl.byte)
|——————Node:identifier Text: mcp2518fd_WriteByte
|——————Node:argument_list Text: (a, fCtrl.byte)
|———————Node:( Text: (
|———————Node:identifier Text: a
|———————Node:, Text: ,
|———————Node:field_expression Text: fCtrl.byte
|————————Node:identifier Text: fCtrl
|————————Node:. Text: .
|————————Node:field_identifier Text: byte
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_BitTimeConfigureNominal40MHz(
    MCP2518FD_BITTIME_SETUP bitTime) {
  int8_t spiTransferError = 0;
  REG_CiNBTCFG ciNbtcfg;

  ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];

  // Arbitration Bit rate
  switch (bitTime) {
    // All 500K
  case CAN_500K_1M:
  case CAN_500K_2M:
  case CAN_500K_3M:
  case CAN_500K_4M:
  case CAN_500K_5M:
  case CAN_500K_6M7:
  case CAN_500K_8M:
  case CAN_500K_10M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 62;
    ciNbtcfg.bF.TSEG2 = 15;
    ciNbtcfg.bF.SJW = 15;
    break;

    // All 250K
  case CAN_250K_500K:
  case CAN_250K_833K:
  case CAN_250K_1M:
  case CAN_250K_1M5:
  case CAN_250K_2M:
  case CAN_250K_3M:
  case CAN_250K_4M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 126;
    ciNbtcfg.bF.TSEG2 = 31;
    ciNbtcfg.bF.SJW = 31;
    break;

  case CAN_1000K_4M:
  case CAN_1000K_8M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 30;
    ciNbtcfg.bF.TSEG2 = 7;
    ciNbtcfg.bF.SJW = 7;
    break;

  case CAN_125K_500K:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 254;
    ciNbtcfg.bF.TSEG2 = 63;
    ciNbtcfg.bF.SJW = 63;
    break;

  default:
    return -1;
    break;
  }

  // Write Bit time registers
  spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiNBTCFG, ciNbtcfg.word);

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_BitTimeConfigureNominal40MHz(
    MCP2518FD_BITTIME_SETUP bitTime)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_BitTimeConfigureNominal40MHz
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_BitTimeConfigureNominal40MHz
|———Node:parameter_list Text: (
    MCP2518FD_BITTIME_SETUP bitTime)
|————Node:( Text: (
|————Node:parameter_declaration Text: MCP2518FD_BITTIME_SETUP bitTime
|—————Node:type_identifier Text: MCP2518FD_BITTIME_SETUP
|—————Node:identifier Text: bitTime
|————Node:) Text: )
|——Node:compound_statement Text: {
  int8_t spiTransferError = 0;
  REG_CiNBTCFG ciNbtcfg;

  ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];

  // Arbitration Bit rate
  switch (bitTime) {
    // All 500K
  case CAN_500K_1M:
  case CAN_500K_2M:
  case CAN_500K_3M:
  case CAN_500K_4M:
  case CAN_500K_5M:
  case CAN_500K_6M7:
  case CAN_500K_8M:
  case CAN_500K_10M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 62;
    ciNbtcfg.bF.TSEG2 = 15;
    ciNbtcfg.bF.SJW = 15;
    break;

    // All 250K
  case CAN_250K_500K:
  case CAN_250K_833K:
  case CAN_250K_1M:
  case CAN_250K_1M5:
  case CAN_250K_2M:
  case CAN_250K_3M:
  case CAN_250K_4M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 126;
    ciNbtcfg.bF.TSEG2 = 31;
    ciNbtcfg.bF.SJW = 31;
    break;

  case CAN_1000K_4M:
  case CAN_1000K_8M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 30;
    ciNbtcfg.bF.TSEG2 = 7;
    ciNbtcfg.bF.SJW = 7;
    break;

  case CAN_125K_500K:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 254;
    ciNbtcfg.bF.TSEG2 = 63;
    ciNbtcfg.bF.SJW = 63;
    break;

  default:
    return -1;
    break;
  }

  // Write Bit time registers
  spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiNBTCFG, ciNbtcfg.word);

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: REG_CiNBTCFG ciNbtcfg;
|————Node:type_identifier Text: REG_CiNBTCFG
|————Node:identifier Text: ciNbtcfg
|————Node:; Text: ;
|———Node:expression_statement Text: ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
|————Node:assignment_expression Text: ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4]
|—————Node:field_expression Text: ciNbtcfg.word
|——————Node:identifier Text: ciNbtcfg
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:subscript_expression Text: canControlResetValues[cREGADDR_CiNBTCFG / 4]
|——————Node:identifier Text: canControlResetValues
|——————Node:subscript_argument_list Text: [cREGADDR_CiNBTCFG / 4]
|———————Node:[ Text: [
|———————Node:binary_expression Text: cREGADDR_CiNBTCFG / 4
|————————Node:identifier Text: cREGADDR_CiNBTCFG
|————————Node:/ Text: /
|————————Node:number_literal Text: 4
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:comment
|———Node:switch_statement Text: switch (bitTime) {
    // All 500K
  case CAN_500K_1M:
  case CAN_500K_2M:
  case CAN_500K_3M:
  case CAN_500K_4M:
  case CAN_500K_5M:
  case CAN_500K_6M7:
  case CAN_500K_8M:
  case CAN_500K_10M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 62;
    ciNbtcfg.bF.TSEG2 = 15;
    ciNbtcfg.bF.SJW = 15;
    break;

    // All 250K
  case CAN_250K_500K:
  case CAN_250K_833K:
  case CAN_250K_1M:
  case CAN_250K_1M5:
  case CAN_250K_2M:
  case CAN_250K_3M:
  case CAN_250K_4M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 126;
    ciNbtcfg.bF.TSEG2 = 31;
    ciNbtcfg.bF.SJW = 31;
    break;

  case CAN_1000K_4M:
  case CAN_1000K_8M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 30;
    ciNbtcfg.bF.TSEG2 = 7;
    ciNbtcfg.bF.SJW = 7;
    break;

  case CAN_125K_500K:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 254;
    ciNbtcfg.bF.TSEG2 = 63;
    ciNbtcfg.bF.SJW = 63;
    break;

  default:
    return -1;
    break;
  }
|————Node:switch Text: switch
|————Node:condition_clause Text: (bitTime)
|—————Node:( Text: (
|—————Node:identifier Text: bitTime
|—————Node:) Text: )
|————Node:compound_statement Text: {
    // All 500K
  case CAN_500K_1M:
  case CAN_500K_2M:
  case CAN_500K_3M:
  case CAN_500K_4M:
  case CAN_500K_5M:
  case CAN_500K_6M7:
  case CAN_500K_8M:
  case CAN_500K_10M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 62;
    ciNbtcfg.bF.TSEG2 = 15;
    ciNbtcfg.bF.SJW = 15;
    break;

    // All 250K
  case CAN_250K_500K:
  case CAN_250K_833K:
  case CAN_250K_1M:
  case CAN_250K_1M5:
  case CAN_250K_2M:
  case CAN_250K_3M:
  case CAN_250K_4M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 126;
    ciNbtcfg.bF.TSEG2 = 31;
    ciNbtcfg.bF.SJW = 31;
    break;

  case CAN_1000K_4M:
  case CAN_1000K_8M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 30;
    ciNbtcfg.bF.TSEG2 = 7;
    ciNbtcfg.bF.SJW = 7;
    break;

  case CAN_125K_500K:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 254;
    ciNbtcfg.bF.TSEG2 = 63;
    ciNbtcfg.bF.SJW = 63;
    break;

  default:
    return -1;
    break;
  }
|—————Node:{ Text: {
|—————Node:comment
|—————Node:case_statement Text: case CAN_500K_1M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_1M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_500K_2M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_2M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_500K_3M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_3M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_500K_4M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_4M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_500K_5M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_5M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_500K_6M7:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_6M7
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_500K_8M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_8M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_500K_10M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 62;
    ciNbtcfg.bF.TSEG2 = 15;
    ciNbtcfg.bF.SJW = 15;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_10M
|——————Node:: Text: :
|——————Node:expression_statement Text: ciNbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciNbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciNbtcfg.bF.BRP
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.TSEG1 = 62;
|———————Node:assignment_expression Text: ciNbtcfg.bF.TSEG1 = 62
|————————Node:field_expression Text: ciNbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 62
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.TSEG2 = 15;
|———————Node:assignment_expression Text: ciNbtcfg.bF.TSEG2 = 15
|————————Node:field_expression Text: ciNbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 15
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.SJW = 15;
|———————Node:assignment_expression Text: ciNbtcfg.bF.SJW = 15
|————————Node:field_expression Text: ciNbtcfg.bF.SJW
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 15
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:comment
|—————Node:case_statement Text: case CAN_250K_500K:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_500K
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_250K_833K:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_833K
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_250K_1M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_1M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_250K_1M5:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_1M5
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_250K_2M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_2M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_250K_3M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_3M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_250K_4M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 126;
    ciNbtcfg.bF.TSEG2 = 31;
    ciNbtcfg.bF.SJW = 31;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_4M
|——————Node:: Text: :
|——————Node:expression_statement Text: ciNbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciNbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciNbtcfg.bF.BRP
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.TSEG1 = 126;
|———————Node:assignment_expression Text: ciNbtcfg.bF.TSEG1 = 126
|————————Node:field_expression Text: ciNbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 126
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.TSEG2 = 31;
|———————Node:assignment_expression Text: ciNbtcfg.bF.TSEG2 = 31
|————————Node:field_expression Text: ciNbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 31
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.SJW = 31;
|———————Node:assignment_expression Text: ciNbtcfg.bF.SJW = 31
|————————Node:field_expression Text: ciNbtcfg.bF.SJW
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 31
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_1000K_4M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_1000K_4M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_1000K_8M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 30;
    ciNbtcfg.bF.TSEG2 = 7;
    ciNbtcfg.bF.SJW = 7;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_1000K_8M
|——————Node:: Text: :
|——————Node:expression_statement Text: ciNbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciNbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciNbtcfg.bF.BRP
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.TSEG1 = 30;
|———————Node:assignment_expression Text: ciNbtcfg.bF.TSEG1 = 30
|————————Node:field_expression Text: ciNbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 30
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.TSEG2 = 7;
|———————Node:assignment_expression Text: ciNbtcfg.bF.TSEG2 = 7
|————————Node:field_expression Text: ciNbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 7
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.SJW = 7;
|———————Node:assignment_expression Text: ciNbtcfg.bF.SJW = 7
|————————Node:field_expression Text: ciNbtcfg.bF.SJW
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 7
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_125K_500K:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 254;
    ciNbtcfg.bF.TSEG2 = 63;
    ciNbtcfg.bF.SJW = 63;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_125K_500K
|——————Node:: Text: :
|——————Node:expression_statement Text: ciNbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciNbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciNbtcfg.bF.BRP
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.TSEG1 = 254;
|———————Node:assignment_expression Text: ciNbtcfg.bF.TSEG1 = 254
|————————Node:field_expression Text: ciNbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 254
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.TSEG2 = 63;
|———————Node:assignment_expression Text: ciNbtcfg.bF.TSEG2 = 63
|————————Node:field_expression Text: ciNbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 63
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.SJW = 63;
|———————Node:assignment_expression Text: ciNbtcfg.bF.SJW = 63
|————————Node:field_expression Text: ciNbtcfg.bF.SJW
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 63
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: default:
    return -1;
    break;
|——————Node:default Text: default
|——————Node:: Text: :
|——————Node:return_statement Text: return -1;
|———————Node:return Text: return
|———————Node:number_literal Text: -1
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:expression_statement Text: spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiNBTCFG, ciNbtcfg.word);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiNBTCFG, ciNbtcfg.word)
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_WriteWord(cREGADDR_CiNBTCFG, ciNbtcfg.word)
|——————Node:identifier Text: mcp2518fd_WriteWord
|——————Node:argument_list Text: (cREGADDR_CiNBTCFG, ciNbtcfg.word)
|———————Node:( Text: (
|———————Node:identifier Text: cREGADDR_CiNBTCFG
|———————Node:, Text: ,
|———————Node:field_expression Text: ciNbtcfg.word
|————————Node:identifier Text: ciNbtcfg
|————————Node:. Text: .
|————————Node:field_identifier Text: word
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t
mcp2518fd::mcp2518fd_BitTimeConfigureData40MHz(MCP2518FD_BITTIME_SETUP bitTime,
                                               CAN_SSP_MODE sspMode) {
  int8_t spiTransferError = 0;
  REG_CiDBTCFG ciDbtcfg;
  REG_CiTDC ciTdc;
  //    sspMode;

  ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
  ciTdc.word = 0;

  // Configure Bit time and sample point
  ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
  uint32_t tdcValue = 0;

  // Data Bit rate and SSP
  switch (bitTime) {
  case CAN_500K_1M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 30;
    ciDbtcfg.bF.TSEG2 = 7;
    ciDbtcfg.bF.SJW = 7;
    // SSP
    ciTdc.bF.TDCOffset = 31;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_2M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 14;
    ciDbtcfg.bF.TSEG2 = 3;
    ciDbtcfg.bF.SJW = 3;
    // SSP
    ciTdc.bF.TDCOffset = 15;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_3M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 8;
    ciDbtcfg.bF.TSEG2 = 2;
    ciDbtcfg.bF.SJW = 2;
    // SSP
    ciTdc.bF.TDCOffset = 9;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_4M:
  case CAN_1000K_4M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 6;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 7;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_5M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 4;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 5;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_6M7:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 3;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 4;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_8M:
  case CAN_1000K_8M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 2;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 3;
    ciTdc.bF.TDCValue = 1;
    break;
  case CAN_500K_10M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 1;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 2;
    ciTdc.bF.TDCValue = 0;
    break;

  case CAN_250K_500K:
  case CAN_125K_500K:
    ciDbtcfg.bF.BRP = 1;
    ciDbtcfg.bF.TSEG1 = 30;
    ciDbtcfg.bF.TSEG2 = 7;
    ciDbtcfg.bF.SJW = 7;
    // SSP
    ciTdc.bF.TDCOffset = 31;
    ciTdc.bF.TDCValue = tdcValue;
    ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
    break;
  case CAN_250K_833K:
    ciDbtcfg.bF.BRP = 1;
    ciDbtcfg.bF.TSEG1 = 17;
    ciDbtcfg.bF.TSEG2 = 4;
    ciDbtcfg.bF.SJW = 4;
    // SSP
    ciTdc.bF.TDCOffset = 18;
    ciTdc.bF.TDCValue = tdcValue;
    ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
    break;
  case CAN_250K_1M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 30;
    ciDbtcfg.bF.TSEG2 = 7;
    ciDbtcfg.bF.SJW = 7;
    // SSP
    ciTdc.bF.TDCOffset = 31;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_1M5:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 18;
    ciDbtcfg.bF.TSEG2 = 5;
    ciDbtcfg.bF.SJW = 5;
    // SSP
    ciTdc.bF.TDCOffset = 19;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_2M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 14;
    ciDbtcfg.bF.TSEG2 = 3;
    ciDbtcfg.bF.SJW = 3;
    // SSP
    ciTdc.bF.TDCOffset = 15;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_3M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 8;
    ciDbtcfg.bF.TSEG2 = 2;
    ciDbtcfg.bF.SJW = 2;
    // SSP
    ciTdc.bF.TDCOffset = 9;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_4M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 6;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 7;
    ciTdc.bF.TDCValue = tdcValue;
    break;

  default:
    return -1;
    break;
  }

  // Write Bit time registers
  spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiDBTCFG, ciDbtcfg.word);
  if (spiTransferError) {
    return -2;
  }

  // Write Transmitter Delay Compensation
#ifdef REV_A
  ciTdc.bF.TDCOffset = 0;
  ciTdc.bF.TDCValue = 0;
#endif

  spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiTDC, ciTdc.word);
  if (spiTransferError) {
    return -3;
  }

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_BitTimeConfigureData40MHz(MCP2518FD_BITTIME_SETUP bitTime,
                                               CAN_SSP_MODE sspMode)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_BitTimeConfigureData40MHz
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_BitTimeConfigureData40MHz
|———Node:parameter_list Text: (MCP2518FD_BITTIME_SETUP bitTime,
                                               CAN_SSP_MODE sspMode)
|————Node:( Text: (
|————Node:parameter_declaration Text: MCP2518FD_BITTIME_SETUP bitTime
|—————Node:type_identifier Text: MCP2518FD_BITTIME_SETUP
|—————Node:identifier Text: bitTime
|————Node:, Text: ,
|————Node:parameter_declaration Text: CAN_SSP_MODE sspMode
|—————Node:type_identifier Text: CAN_SSP_MODE
|—————Node:identifier Text: sspMode
|————Node:) Text: )
|——Node:compound_statement Text: {
  int8_t spiTransferError = 0;
  REG_CiDBTCFG ciDbtcfg;
  REG_CiTDC ciTdc;
  //    sspMode;

  ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
  ciTdc.word = 0;

  // Configure Bit time and sample point
  ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
  uint32_t tdcValue = 0;

  // Data Bit rate and SSP
  switch (bitTime) {
  case CAN_500K_1M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 30;
    ciDbtcfg.bF.TSEG2 = 7;
    ciDbtcfg.bF.SJW = 7;
    // SSP
    ciTdc.bF.TDCOffset = 31;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_2M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 14;
    ciDbtcfg.bF.TSEG2 = 3;
    ciDbtcfg.bF.SJW = 3;
    // SSP
    ciTdc.bF.TDCOffset = 15;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_3M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 8;
    ciDbtcfg.bF.TSEG2 = 2;
    ciDbtcfg.bF.SJW = 2;
    // SSP
    ciTdc.bF.TDCOffset = 9;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_4M:
  case CAN_1000K_4M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 6;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 7;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_5M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 4;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 5;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_6M7:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 3;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 4;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_8M:
  case CAN_1000K_8M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 2;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 3;
    ciTdc.bF.TDCValue = 1;
    break;
  case CAN_500K_10M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 1;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 2;
    ciTdc.bF.TDCValue = 0;
    break;

  case CAN_250K_500K:
  case CAN_125K_500K:
    ciDbtcfg.bF.BRP = 1;
    ciDbtcfg.bF.TSEG1 = 30;
    ciDbtcfg.bF.TSEG2 = 7;
    ciDbtcfg.bF.SJW = 7;
    // SSP
    ciTdc.bF.TDCOffset = 31;
    ciTdc.bF.TDCValue = tdcValue;
    ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
    break;
  case CAN_250K_833K:
    ciDbtcfg.bF.BRP = 1;
    ciDbtcfg.bF.TSEG1 = 17;
    ciDbtcfg.bF.TSEG2 = 4;
    ciDbtcfg.bF.SJW = 4;
    // SSP
    ciTdc.bF.TDCOffset = 18;
    ciTdc.bF.TDCValue = tdcValue;
    ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
    break;
  case CAN_250K_1M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 30;
    ciDbtcfg.bF.TSEG2 = 7;
    ciDbtcfg.bF.SJW = 7;
    // SSP
    ciTdc.bF.TDCOffset = 31;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_1M5:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 18;
    ciDbtcfg.bF.TSEG2 = 5;
    ciDbtcfg.bF.SJW = 5;
    // SSP
    ciTdc.bF.TDCOffset = 19;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_2M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 14;
    ciDbtcfg.bF.TSEG2 = 3;
    ciDbtcfg.bF.SJW = 3;
    // SSP
    ciTdc.bF.TDCOffset = 15;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_3M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 8;
    ciDbtcfg.bF.TSEG2 = 2;
    ciDbtcfg.bF.SJW = 2;
    // SSP
    ciTdc.bF.TDCOffset = 9;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_4M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 6;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 7;
    ciTdc.bF.TDCValue = tdcValue;
    break;

  default:
    return -1;
    break;
  }

  // Write Bit time registers
  spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiDBTCFG, ciDbtcfg.word);
  if (spiTransferError) {
    return -2;
  }

  // Write Transmitter Delay Compensation
#ifdef REV_A
  ciTdc.bF.TDCOffset = 0;
  ciTdc.bF.TDCValue = 0;
#endif

  spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiTDC, ciTdc.word);
  if (spiTransferError) {
    return -3;
  }

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: REG_CiDBTCFG ciDbtcfg;
|————Node:type_identifier Text: REG_CiDBTCFG
|————Node:identifier Text: ciDbtcfg
|————Node:; Text: ;
|———Node:declaration Text: REG_CiTDC ciTdc;
|————Node:type_identifier Text: REG_CiTDC
|————Node:identifier Text: ciTdc
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
|————Node:assignment_expression Text: ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4]
|—————Node:field_expression Text: ciDbtcfg.word
|——————Node:identifier Text: ciDbtcfg
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:subscript_expression Text: canControlResetValues[cREGADDR_CiDBTCFG / 4]
|——————Node:identifier Text: canControlResetValues
|——————Node:subscript_argument_list Text: [cREGADDR_CiDBTCFG / 4]
|———————Node:[ Text: [
|———————Node:binary_expression Text: cREGADDR_CiDBTCFG / 4
|————————Node:identifier Text: cREGADDR_CiDBTCFG
|————————Node:/ Text: /
|————————Node:number_literal Text: 4
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: ciTdc.word = 0;
|————Node:assignment_expression Text: ciTdc.word = 0
|—————Node:field_expression Text: ciTdc.word
|——————Node:identifier Text: ciTdc
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
|————Node:assignment_expression Text: ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO
|—————Node:field_expression Text: ciTdc.bF.TDCMode
|——————Node:field_expression Text: ciTdc.bF
|———————Node:identifier Text: ciTdc
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: TDCMode
|—————Node:= Text: =
|—————Node:identifier Text: CAN_SSP_MODE_AUTO
|————Node:; Text: ;
|———Node:declaration Text: uint32_t tdcValue = 0;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: tdcValue = 0
|—————Node:identifier Text: tdcValue
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:switch_statement Text: switch (bitTime) {
  case CAN_500K_1M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 30;
    ciDbtcfg.bF.TSEG2 = 7;
    ciDbtcfg.bF.SJW = 7;
    // SSP
    ciTdc.bF.TDCOffset = 31;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_2M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 14;
    ciDbtcfg.bF.TSEG2 = 3;
    ciDbtcfg.bF.SJW = 3;
    // SSP
    ciTdc.bF.TDCOffset = 15;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_3M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 8;
    ciDbtcfg.bF.TSEG2 = 2;
    ciDbtcfg.bF.SJW = 2;
    // SSP
    ciTdc.bF.TDCOffset = 9;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_4M:
  case CAN_1000K_4M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 6;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 7;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_5M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 4;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 5;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_6M7:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 3;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 4;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_8M:
  case CAN_1000K_8M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 2;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 3;
    ciTdc.bF.TDCValue = 1;
    break;
  case CAN_500K_10M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 1;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 2;
    ciTdc.bF.TDCValue = 0;
    break;

  case CAN_250K_500K:
  case CAN_125K_500K:
    ciDbtcfg.bF.BRP = 1;
    ciDbtcfg.bF.TSEG1 = 30;
    ciDbtcfg.bF.TSEG2 = 7;
    ciDbtcfg.bF.SJW = 7;
    // SSP
    ciTdc.bF.TDCOffset = 31;
    ciTdc.bF.TDCValue = tdcValue;
    ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
    break;
  case CAN_250K_833K:
    ciDbtcfg.bF.BRP = 1;
    ciDbtcfg.bF.TSEG1 = 17;
    ciDbtcfg.bF.TSEG2 = 4;
    ciDbtcfg.bF.SJW = 4;
    // SSP
    ciTdc.bF.TDCOffset = 18;
    ciTdc.bF.TDCValue = tdcValue;
    ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
    break;
  case CAN_250K_1M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 30;
    ciDbtcfg.bF.TSEG2 = 7;
    ciDbtcfg.bF.SJW = 7;
    // SSP
    ciTdc.bF.TDCOffset = 31;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_1M5:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 18;
    ciDbtcfg.bF.TSEG2 = 5;
    ciDbtcfg.bF.SJW = 5;
    // SSP
    ciTdc.bF.TDCOffset = 19;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_2M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 14;
    ciDbtcfg.bF.TSEG2 = 3;
    ciDbtcfg.bF.SJW = 3;
    // SSP
    ciTdc.bF.TDCOffset = 15;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_3M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 8;
    ciDbtcfg.bF.TSEG2 = 2;
    ciDbtcfg.bF.SJW = 2;
    // SSP
    ciTdc.bF.TDCOffset = 9;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_4M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 6;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 7;
    ciTdc.bF.TDCValue = tdcValue;
    break;

  default:
    return -1;
    break;
  }
|————Node:switch Text: switch
|————Node:condition_clause Text: (bitTime)
|—————Node:( Text: (
|—————Node:identifier Text: bitTime
|—————Node:) Text: )
|————Node:compound_statement Text: {
  case CAN_500K_1M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 30;
    ciDbtcfg.bF.TSEG2 = 7;
    ciDbtcfg.bF.SJW = 7;
    // SSP
    ciTdc.bF.TDCOffset = 31;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_2M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 14;
    ciDbtcfg.bF.TSEG2 = 3;
    ciDbtcfg.bF.SJW = 3;
    // SSP
    ciTdc.bF.TDCOffset = 15;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_3M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 8;
    ciDbtcfg.bF.TSEG2 = 2;
    ciDbtcfg.bF.SJW = 2;
    // SSP
    ciTdc.bF.TDCOffset = 9;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_4M:
  case CAN_1000K_4M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 6;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 7;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_5M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 4;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 5;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_6M7:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 3;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 4;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_8M:
  case CAN_1000K_8M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 2;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 3;
    ciTdc.bF.TDCValue = 1;
    break;
  case CAN_500K_10M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 1;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 2;
    ciTdc.bF.TDCValue = 0;
    break;

  case CAN_250K_500K:
  case CAN_125K_500K:
    ciDbtcfg.bF.BRP = 1;
    ciDbtcfg.bF.TSEG1 = 30;
    ciDbtcfg.bF.TSEG2 = 7;
    ciDbtcfg.bF.SJW = 7;
    // SSP
    ciTdc.bF.TDCOffset = 31;
    ciTdc.bF.TDCValue = tdcValue;
    ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
    break;
  case CAN_250K_833K:
    ciDbtcfg.bF.BRP = 1;
    ciDbtcfg.bF.TSEG1 = 17;
    ciDbtcfg.bF.TSEG2 = 4;
    ciDbtcfg.bF.SJW = 4;
    // SSP
    ciTdc.bF.TDCOffset = 18;
    ciTdc.bF.TDCValue = tdcValue;
    ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
    break;
  case CAN_250K_1M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 30;
    ciDbtcfg.bF.TSEG2 = 7;
    ciDbtcfg.bF.SJW = 7;
    // SSP
    ciTdc.bF.TDCOffset = 31;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_1M5:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 18;
    ciDbtcfg.bF.TSEG2 = 5;
    ciDbtcfg.bF.SJW = 5;
    // SSP
    ciTdc.bF.TDCOffset = 19;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_2M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 14;
    ciDbtcfg.bF.TSEG2 = 3;
    ciDbtcfg.bF.SJW = 3;
    // SSP
    ciTdc.bF.TDCOffset = 15;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_3M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 8;
    ciDbtcfg.bF.TSEG2 = 2;
    ciDbtcfg.bF.SJW = 2;
    // SSP
    ciTdc.bF.TDCOffset = 9;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_4M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 6;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 7;
    ciTdc.bF.TDCValue = tdcValue;
    break;

  default:
    return -1;
    break;
  }
|—————Node:{ Text: {
|—————Node:case_statement Text: case CAN_500K_1M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 30;
    ciDbtcfg.bF.TSEG2 = 7;
    ciDbtcfg.bF.SJW = 7;
    // SSP
    ciTdc.bF.TDCOffset = 31;
    ciTdc.bF.TDCValue = tdcValue;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_1M
|——————Node:: Text: :
|——————Node:expression_statement Text: ciDbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciDbtcfg.bF.BRP
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG1 = 30;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG1 = 30
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 30
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG2 = 7;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG2 = 7
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 7
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.SJW = 7;
|———————Node:assignment_expression Text: ciDbtcfg.bF.SJW = 7
|————————Node:field_expression Text: ciDbtcfg.bF.SJW
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 7
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: ciTdc.bF.TDCOffset = 31;
|———————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 31
|————————Node:field_expression Text: ciTdc.bF.TDCOffset
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCOffset
|————————Node:= Text: =
|————————Node:number_literal Text: 31
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCValue = tdcValue;
|———————Node:assignment_expression Text: ciTdc.bF.TDCValue = tdcValue
|————————Node:field_expression Text: ciTdc.bF.TDCValue
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCValue
|————————Node:= Text: =
|————————Node:identifier Text: tdcValue
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_500K_2M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 14;
    ciDbtcfg.bF.TSEG2 = 3;
    ciDbtcfg.bF.SJW = 3;
    // SSP
    ciTdc.bF.TDCOffset = 15;
    ciTdc.bF.TDCValue = tdcValue;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_2M
|——————Node:: Text: :
|——————Node:comment
|——————Node:expression_statement Text: ciDbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciDbtcfg.bF.BRP
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG1 = 14;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG1 = 14
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 14
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG2 = 3;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG2 = 3
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 3
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.SJW = 3;
|———————Node:assignment_expression Text: ciDbtcfg.bF.SJW = 3
|————————Node:field_expression Text: ciDbtcfg.bF.SJW
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 3
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: ciTdc.bF.TDCOffset = 15;
|———————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 15
|————————Node:field_expression Text: ciTdc.bF.TDCOffset
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCOffset
|————————Node:= Text: =
|————————Node:number_literal Text: 15
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCValue = tdcValue;
|———————Node:assignment_expression Text: ciTdc.bF.TDCValue = tdcValue
|————————Node:field_expression Text: ciTdc.bF.TDCValue
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCValue
|————————Node:= Text: =
|————————Node:identifier Text: tdcValue
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_500K_3M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 8;
    ciDbtcfg.bF.TSEG2 = 2;
    ciDbtcfg.bF.SJW = 2;
    // SSP
    ciTdc.bF.TDCOffset = 9;
    ciTdc.bF.TDCValue = tdcValue;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_3M
|——————Node:: Text: :
|——————Node:comment
|——————Node:expression_statement Text: ciDbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciDbtcfg.bF.BRP
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG1 = 8;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG1 = 8
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 8
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG2 = 2;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG2 = 2
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 2
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.SJW = 2;
|———————Node:assignment_expression Text: ciDbtcfg.bF.SJW = 2
|————————Node:field_expression Text: ciDbtcfg.bF.SJW
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 2
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: ciTdc.bF.TDCOffset = 9;
|———————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 9
|————————Node:field_expression Text: ciTdc.bF.TDCOffset
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCOffset
|————————Node:= Text: =
|————————Node:number_literal Text: 9
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCValue = tdcValue;
|———————Node:assignment_expression Text: ciTdc.bF.TDCValue = tdcValue
|————————Node:field_expression Text: ciTdc.bF.TDCValue
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCValue
|————————Node:= Text: =
|————————Node:identifier Text: tdcValue
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_500K_4M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_4M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_1000K_4M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 6;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 7;
    ciTdc.bF.TDCValue = tdcValue;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_1000K_4M
|——————Node:: Text: :
|——————Node:comment
|——————Node:expression_statement Text: ciDbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciDbtcfg.bF.BRP
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG1 = 6;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG1 = 6
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 6
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG2 = 1;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG2 = 1
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 1
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.SJW = 1;
|———————Node:assignment_expression Text: ciDbtcfg.bF.SJW = 1
|————————Node:field_expression Text: ciDbtcfg.bF.SJW
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 1
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: ciTdc.bF.TDCOffset = 7;
|———————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 7
|————————Node:field_expression Text: ciTdc.bF.TDCOffset
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCOffset
|————————Node:= Text: =
|————————Node:number_literal Text: 7
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCValue = tdcValue;
|———————Node:assignment_expression Text: ciTdc.bF.TDCValue = tdcValue
|————————Node:field_expression Text: ciTdc.bF.TDCValue
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCValue
|————————Node:= Text: =
|————————Node:identifier Text: tdcValue
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_500K_5M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 4;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 5;
    ciTdc.bF.TDCValue = tdcValue;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_5M
|——————Node:: Text: :
|——————Node:comment
|——————Node:expression_statement Text: ciDbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciDbtcfg.bF.BRP
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG1 = 4;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG1 = 4
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 4
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG2 = 1;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG2 = 1
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 1
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.SJW = 1;
|———————Node:assignment_expression Text: ciDbtcfg.bF.SJW = 1
|————————Node:field_expression Text: ciDbtcfg.bF.SJW
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 1
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: ciTdc.bF.TDCOffset = 5;
|———————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 5
|————————Node:field_expression Text: ciTdc.bF.TDCOffset
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCOffset
|————————Node:= Text: =
|————————Node:number_literal Text: 5
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCValue = tdcValue;
|———————Node:assignment_expression Text: ciTdc.bF.TDCValue = tdcValue
|————————Node:field_expression Text: ciTdc.bF.TDCValue
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCValue
|————————Node:= Text: =
|————————Node:identifier Text: tdcValue
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_500K_6M7:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 3;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 4;
    ciTdc.bF.TDCValue = tdcValue;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_6M7
|——————Node:: Text: :
|——————Node:comment
|——————Node:expression_statement Text: ciDbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciDbtcfg.bF.BRP
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG1 = 3;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG1 = 3
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 3
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG2 = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG2 = 0
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.SJW = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.SJW = 0
|————————Node:field_expression Text: ciDbtcfg.bF.SJW
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: ciTdc.bF.TDCOffset = 4;
|———————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 4
|————————Node:field_expression Text: ciTdc.bF.TDCOffset
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCOffset
|————————Node:= Text: =
|————————Node:number_literal Text: 4
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCValue = tdcValue;
|———————Node:assignment_expression Text: ciTdc.bF.TDCValue = tdcValue
|————————Node:field_expression Text: ciTdc.bF.TDCValue
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCValue
|————————Node:= Text: =
|————————Node:identifier Text: tdcValue
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_500K_8M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_8M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_1000K_8M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 2;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 3;
    ciTdc.bF.TDCValue = 1;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_1000K_8M
|——————Node:: Text: :
|——————Node:comment
|——————Node:expression_statement Text: ciDbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciDbtcfg.bF.BRP
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG1 = 2;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG1 = 2
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 2
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG2 = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG2 = 0
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.SJW = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.SJW = 0
|————————Node:field_expression Text: ciDbtcfg.bF.SJW
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: ciTdc.bF.TDCOffset = 3;
|———————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 3
|————————Node:field_expression Text: ciTdc.bF.TDCOffset
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCOffset
|————————Node:= Text: =
|————————Node:number_literal Text: 3
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCValue = 1;
|———————Node:assignment_expression Text: ciTdc.bF.TDCValue = 1
|————————Node:field_expression Text: ciTdc.bF.TDCValue
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCValue
|————————Node:= Text: =
|————————Node:number_literal Text: 1
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_500K_10M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 1;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 2;
    ciTdc.bF.TDCValue = 0;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_10M
|——————Node:: Text: :
|——————Node:comment
|——————Node:expression_statement Text: ciDbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciDbtcfg.bF.BRP
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG1 = 1;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG1 = 1
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 1
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG2 = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG2 = 0
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.SJW = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.SJW = 0
|————————Node:field_expression Text: ciDbtcfg.bF.SJW
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: ciTdc.bF.TDCOffset = 2;
|———————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 2
|————————Node:field_expression Text: ciTdc.bF.TDCOffset
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCOffset
|————————Node:= Text: =
|————————Node:number_literal Text: 2
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCValue = 0;
|———————Node:assignment_expression Text: ciTdc.bF.TDCValue = 0
|————————Node:field_expression Text: ciTdc.bF.TDCValue
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCValue
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_250K_500K:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_500K
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_125K_500K:
    ciDbtcfg.bF.BRP = 1;
    ciDbtcfg.bF.TSEG1 = 30;
    ciDbtcfg.bF.TSEG2 = 7;
    ciDbtcfg.bF.SJW = 7;
    // SSP
    ciTdc.bF.TDCOffset = 31;
    ciTdc.bF.TDCValue = tdcValue;
    ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_125K_500K
|——————Node:: Text: :
|——————Node:expression_statement Text: ciDbtcfg.bF.BRP = 1;
|———————Node:assignment_expression Text: ciDbtcfg.bF.BRP = 1
|————————Node:field_expression Text: ciDbtcfg.bF.BRP
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 1
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG1 = 30;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG1 = 30
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 30
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG2 = 7;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG2 = 7
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 7
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.SJW = 7;
|———————Node:assignment_expression Text: ciDbtcfg.bF.SJW = 7
|————————Node:field_expression Text: ciDbtcfg.bF.SJW
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 7
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: ciTdc.bF.TDCOffset = 31;
|———————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 31
|————————Node:field_expression Text: ciTdc.bF.TDCOffset
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCOffset
|————————Node:= Text: =
|————————Node:number_literal Text: 31
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCValue = tdcValue;
|———————Node:assignment_expression Text: ciTdc.bF.TDCValue = tdcValue
|————————Node:field_expression Text: ciTdc.bF.TDCValue
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCValue
|————————Node:= Text: =
|————————Node:identifier Text: tdcValue
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
|———————Node:assignment_expression Text: ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF
|————————Node:field_expression Text: ciTdc.bF.TDCMode
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCMode
|————————Node:= Text: =
|————————Node:identifier Text: CAN_SSP_MODE_OFF
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_250K_833K:
    ciDbtcfg.bF.BRP = 1;
    ciDbtcfg.bF.TSEG1 = 17;
    ciDbtcfg.bF.TSEG2 = 4;
    ciDbtcfg.bF.SJW = 4;
    // SSP
    ciTdc.bF.TDCOffset = 18;
    ciTdc.bF.TDCValue = tdcValue;
    ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_833K
|——————Node:: Text: :
|——————Node:expression_statement Text: ciDbtcfg.bF.BRP = 1;
|———————Node:assignment_expression Text: ciDbtcfg.bF.BRP = 1
|————————Node:field_expression Text: ciDbtcfg.bF.BRP
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 1
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG1 = 17;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG1 = 17
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 17
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG2 = 4;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG2 = 4
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 4
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.SJW = 4;
|———————Node:assignment_expression Text: ciDbtcfg.bF.SJW = 4
|————————Node:field_expression Text: ciDbtcfg.bF.SJW
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 4
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: ciTdc.bF.TDCOffset = 18;
|———————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 18
|————————Node:field_expression Text: ciTdc.bF.TDCOffset
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCOffset
|————————Node:= Text: =
|————————Node:number_literal Text: 18
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCValue = tdcValue;
|———————Node:assignment_expression Text: ciTdc.bF.TDCValue = tdcValue
|————————Node:field_expression Text: ciTdc.bF.TDCValue
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCValue
|————————Node:= Text: =
|————————Node:identifier Text: tdcValue
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
|———————Node:assignment_expression Text: ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF
|————————Node:field_expression Text: ciTdc.bF.TDCMode
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCMode
|————————Node:= Text: =
|————————Node:identifier Text: CAN_SSP_MODE_OFF
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_250K_1M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 30;
    ciDbtcfg.bF.TSEG2 = 7;
    ciDbtcfg.bF.SJW = 7;
    // SSP
    ciTdc.bF.TDCOffset = 31;
    ciTdc.bF.TDCValue = tdcValue;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_1M
|——————Node:: Text: :
|——————Node:expression_statement Text: ciDbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciDbtcfg.bF.BRP
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG1 = 30;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG1 = 30
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 30
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG2 = 7;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG2 = 7
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 7
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.SJW = 7;
|———————Node:assignment_expression Text: ciDbtcfg.bF.SJW = 7
|————————Node:field_expression Text: ciDbtcfg.bF.SJW
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 7
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: ciTdc.bF.TDCOffset = 31;
|———————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 31
|————————Node:field_expression Text: ciTdc.bF.TDCOffset
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCOffset
|————————Node:= Text: =
|————————Node:number_literal Text: 31
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCValue = tdcValue;
|———————Node:assignment_expression Text: ciTdc.bF.TDCValue = tdcValue
|————————Node:field_expression Text: ciTdc.bF.TDCValue
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCValue
|————————Node:= Text: =
|————————Node:identifier Text: tdcValue
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_250K_1M5:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 18;
    ciDbtcfg.bF.TSEG2 = 5;
    ciDbtcfg.bF.SJW = 5;
    // SSP
    ciTdc.bF.TDCOffset = 19;
    ciTdc.bF.TDCValue = tdcValue;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_1M5
|——————Node:: Text: :
|——————Node:expression_statement Text: ciDbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciDbtcfg.bF.BRP
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG1 = 18;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG1 = 18
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 18
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG2 = 5;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG2 = 5
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 5
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.SJW = 5;
|———————Node:assignment_expression Text: ciDbtcfg.bF.SJW = 5
|————————Node:field_expression Text: ciDbtcfg.bF.SJW
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 5
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: ciTdc.bF.TDCOffset = 19;
|———————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 19
|————————Node:field_expression Text: ciTdc.bF.TDCOffset
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCOffset
|————————Node:= Text: =
|————————Node:number_literal Text: 19
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCValue = tdcValue;
|———————Node:assignment_expression Text: ciTdc.bF.TDCValue = tdcValue
|————————Node:field_expression Text: ciTdc.bF.TDCValue
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCValue
|————————Node:= Text: =
|————————Node:identifier Text: tdcValue
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_250K_2M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 14;
    ciDbtcfg.bF.TSEG2 = 3;
    ciDbtcfg.bF.SJW = 3;
    // SSP
    ciTdc.bF.TDCOffset = 15;
    ciTdc.bF.TDCValue = tdcValue;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_2M
|——————Node:: Text: :
|——————Node:expression_statement Text: ciDbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciDbtcfg.bF.BRP
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG1 = 14;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG1 = 14
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 14
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG2 = 3;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG2 = 3
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 3
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.SJW = 3;
|———————Node:assignment_expression Text: ciDbtcfg.bF.SJW = 3
|————————Node:field_expression Text: ciDbtcfg.bF.SJW
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 3
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: ciTdc.bF.TDCOffset = 15;
|———————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 15
|————————Node:field_expression Text: ciTdc.bF.TDCOffset
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCOffset
|————————Node:= Text: =
|————————Node:number_literal Text: 15
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCValue = tdcValue;
|———————Node:assignment_expression Text: ciTdc.bF.TDCValue = tdcValue
|————————Node:field_expression Text: ciTdc.bF.TDCValue
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCValue
|————————Node:= Text: =
|————————Node:identifier Text: tdcValue
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_250K_3M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 8;
    ciDbtcfg.bF.TSEG2 = 2;
    ciDbtcfg.bF.SJW = 2;
    // SSP
    ciTdc.bF.TDCOffset = 9;
    ciTdc.bF.TDCValue = tdcValue;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_3M
|——————Node:: Text: :
|——————Node:expression_statement Text: ciDbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciDbtcfg.bF.BRP
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG1 = 8;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG1 = 8
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 8
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG2 = 2;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG2 = 2
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 2
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.SJW = 2;
|———————Node:assignment_expression Text: ciDbtcfg.bF.SJW = 2
|————————Node:field_expression Text: ciDbtcfg.bF.SJW
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 2
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: ciTdc.bF.TDCOffset = 9;
|———————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 9
|————————Node:field_expression Text: ciTdc.bF.TDCOffset
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCOffset
|————————Node:= Text: =
|————————Node:number_literal Text: 9
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCValue = tdcValue;
|———————Node:assignment_expression Text: ciTdc.bF.TDCValue = tdcValue
|————————Node:field_expression Text: ciTdc.bF.TDCValue
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCValue
|————————Node:= Text: =
|————————Node:identifier Text: tdcValue
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_250K_4M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 6;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 7;
    ciTdc.bF.TDCValue = tdcValue;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_4M
|——————Node:: Text: :
|——————Node:comment
|——————Node:expression_statement Text: ciDbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciDbtcfg.bF.BRP
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG1 = 6;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG1 = 6
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 6
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG2 = 1;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG2 = 1
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 1
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.SJW = 1;
|———————Node:assignment_expression Text: ciDbtcfg.bF.SJW = 1
|————————Node:field_expression Text: ciDbtcfg.bF.SJW
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 1
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: ciTdc.bF.TDCOffset = 7;
|———————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 7
|————————Node:field_expression Text: ciTdc.bF.TDCOffset
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCOffset
|————————Node:= Text: =
|————————Node:number_literal Text: 7
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCValue = tdcValue;
|———————Node:assignment_expression Text: ciTdc.bF.TDCValue = tdcValue
|————————Node:field_expression Text: ciTdc.bF.TDCValue
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCValue
|————————Node:= Text: =
|————————Node:identifier Text: tdcValue
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: default:
    return -1;
    break;
|——————Node:default Text: default
|——————Node:: Text: :
|——————Node:return_statement Text: return -1;
|———————Node:return Text: return
|———————Node:number_literal Text: -1
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:expression_statement Text: spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiDBTCFG, ciDbtcfg.word);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiDBTCFG, ciDbtcfg.word)
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_WriteWord(cREGADDR_CiDBTCFG, ciDbtcfg.word)
|——————Node:identifier Text: mcp2518fd_WriteWord
|——————Node:argument_list Text: (cREGADDR_CiDBTCFG, ciDbtcfg.word)
|———————Node:( Text: (
|———————Node:identifier Text: cREGADDR_CiDBTCFG
|———————Node:, Text: ,
|———————Node:field_expression Text: ciDbtcfg.word
|————————Node:identifier Text: ciDbtcfg
|————————Node:. Text: .
|————————Node:field_identifier Text: word
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -2;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -2;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -2;
|——————Node:return Text: return
|——————Node:number_literal Text: -2
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:preproc_ifdef Text: #ifdef REV_A
  ciTdc.bF.TDCOffset = 0;
  ciTdc.bF.TDCValue = 0;
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: REV_A
|————Node:expression_statement Text: ciTdc.bF.TDCOffset = 0;
|—————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 0
|——————Node:field_expression Text: ciTdc.bF.TDCOffset
|———————Node:field_expression Text: ciTdc.bF
|————————Node:identifier Text: ciTdc
|————————Node:. Text: .
|————————Node:field_identifier Text: bF
|———————Node:. Text: .
|———————Node:field_identifier Text: TDCOffset
|——————Node:= Text: =
|——————Node:number_literal Text: 0
|—————Node:; Text: ;
|————Node:expression_statement Text: ciTdc.bF.TDCValue = 0;
|—————Node:assignment_expression Text: ciTdc.bF.TDCValue = 0
|——————Node:field_expression Text: ciTdc.bF.TDCValue
|———————Node:field_expression Text: ciTdc.bF
|————————Node:identifier Text: ciTdc
|————————Node:. Text: .
|————————Node:field_identifier Text: bF
|———————Node:. Text: .
|———————Node:field_identifier Text: TDCValue
|——————Node:= Text: =
|——————Node:number_literal Text: 0
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiTDC, ciTdc.word);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiTDC, ciTdc.word)
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_WriteWord(cREGADDR_CiTDC, ciTdc.word)
|——————Node:identifier Text: mcp2518fd_WriteWord
|——————Node:argument_list Text: (cREGADDR_CiTDC, ciTdc.word)
|———————Node:( Text: (
|———————Node:identifier Text: cREGADDR_CiTDC
|———————Node:, Text: ,
|———————Node:field_expression Text: ciTdc.word
|————————Node:identifier Text: ciTdc
|————————Node:. Text: .
|————————Node:field_identifier Text: word
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -3;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -3;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -3;
|——————Node:return Text: return
|——————Node:number_literal Text: -3
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_BitTimeConfigureNominal20MHz(
    MCP2518FD_BITTIME_SETUP bitTime) {
  int8_t spiTransferError = 0;
  REG_CiNBTCFG ciNbtcfg;

  ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];

  // Arbitration Bit rate
  switch (bitTime) {
    // All 500K
  case CAN_500K_1M:
  case CAN_500K_2M:
  case CAN_500K_4M:
  case CAN_500K_5M:
  case CAN_500K_6M7:
  case CAN_500K_8M:
  case CAN_500K_10M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 30;
    ciNbtcfg.bF.TSEG2 = 7;
    ciNbtcfg.bF.SJW = 7;
    break;

    // All 250K
  case CAN_250K_500K:
  case CAN_250K_833K:
  case CAN_250K_1M:
  case CAN_250K_1M5:
  case CAN_250K_2M:
  case CAN_250K_3M:
  case CAN_250K_4M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 62;
    ciNbtcfg.bF.TSEG2 = 15;
    ciNbtcfg.bF.SJW = 15;
    break;

  case CAN_1000K_4M:
  case CAN_1000K_8M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 14;
    ciNbtcfg.bF.TSEG2 = 3;
    ciNbtcfg.bF.SJW = 3;
    break;

  case CAN_125K_500K:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 126;
    ciNbtcfg.bF.TSEG2 = 31;
    ciNbtcfg.bF.SJW = 31;
    break;

  default:
    return -1;
    break;
  }

  // Write Bit time registers
  spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiNBTCFG, ciNbtcfg.word);
  if (spiTransferError) {
    return -2;
  }

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_BitTimeConfigureNominal20MHz(
    MCP2518FD_BITTIME_SETUP bitTime)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_BitTimeConfigureNominal20MHz
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_BitTimeConfigureNominal20MHz
|———Node:parameter_list Text: (
    MCP2518FD_BITTIME_SETUP bitTime)
|————Node:( Text: (
|————Node:parameter_declaration Text: MCP2518FD_BITTIME_SETUP bitTime
|—————Node:type_identifier Text: MCP2518FD_BITTIME_SETUP
|—————Node:identifier Text: bitTime
|————Node:) Text: )
|——Node:compound_statement Text: {
  int8_t spiTransferError = 0;
  REG_CiNBTCFG ciNbtcfg;

  ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];

  // Arbitration Bit rate
  switch (bitTime) {
    // All 500K
  case CAN_500K_1M:
  case CAN_500K_2M:
  case CAN_500K_4M:
  case CAN_500K_5M:
  case CAN_500K_6M7:
  case CAN_500K_8M:
  case CAN_500K_10M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 30;
    ciNbtcfg.bF.TSEG2 = 7;
    ciNbtcfg.bF.SJW = 7;
    break;

    // All 250K
  case CAN_250K_500K:
  case CAN_250K_833K:
  case CAN_250K_1M:
  case CAN_250K_1M5:
  case CAN_250K_2M:
  case CAN_250K_3M:
  case CAN_250K_4M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 62;
    ciNbtcfg.bF.TSEG2 = 15;
    ciNbtcfg.bF.SJW = 15;
    break;

  case CAN_1000K_4M:
  case CAN_1000K_8M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 14;
    ciNbtcfg.bF.TSEG2 = 3;
    ciNbtcfg.bF.SJW = 3;
    break;

  case CAN_125K_500K:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 126;
    ciNbtcfg.bF.TSEG2 = 31;
    ciNbtcfg.bF.SJW = 31;
    break;

  default:
    return -1;
    break;
  }

  // Write Bit time registers
  spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiNBTCFG, ciNbtcfg.word);
  if (spiTransferError) {
    return -2;
  }

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: REG_CiNBTCFG ciNbtcfg;
|————Node:type_identifier Text: REG_CiNBTCFG
|————Node:identifier Text: ciNbtcfg
|————Node:; Text: ;
|———Node:expression_statement Text: ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
|————Node:assignment_expression Text: ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4]
|—————Node:field_expression Text: ciNbtcfg.word
|——————Node:identifier Text: ciNbtcfg
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:subscript_expression Text: canControlResetValues[cREGADDR_CiNBTCFG / 4]
|——————Node:identifier Text: canControlResetValues
|——————Node:subscript_argument_list Text: [cREGADDR_CiNBTCFG / 4]
|———————Node:[ Text: [
|———————Node:binary_expression Text: cREGADDR_CiNBTCFG / 4
|————————Node:identifier Text: cREGADDR_CiNBTCFG
|————————Node:/ Text: /
|————————Node:number_literal Text: 4
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:comment
|———Node:switch_statement Text: switch (bitTime) {
    // All 500K
  case CAN_500K_1M:
  case CAN_500K_2M:
  case CAN_500K_4M:
  case CAN_500K_5M:
  case CAN_500K_6M7:
  case CAN_500K_8M:
  case CAN_500K_10M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 30;
    ciNbtcfg.bF.TSEG2 = 7;
    ciNbtcfg.bF.SJW = 7;
    break;

    // All 250K
  case CAN_250K_500K:
  case CAN_250K_833K:
  case CAN_250K_1M:
  case CAN_250K_1M5:
  case CAN_250K_2M:
  case CAN_250K_3M:
  case CAN_250K_4M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 62;
    ciNbtcfg.bF.TSEG2 = 15;
    ciNbtcfg.bF.SJW = 15;
    break;

  case CAN_1000K_4M:
  case CAN_1000K_8M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 14;
    ciNbtcfg.bF.TSEG2 = 3;
    ciNbtcfg.bF.SJW = 3;
    break;

  case CAN_125K_500K:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 126;
    ciNbtcfg.bF.TSEG2 = 31;
    ciNbtcfg.bF.SJW = 31;
    break;

  default:
    return -1;
    break;
  }
|————Node:switch Text: switch
|————Node:condition_clause Text: (bitTime)
|—————Node:( Text: (
|—————Node:identifier Text: bitTime
|—————Node:) Text: )
|————Node:compound_statement Text: {
    // All 500K
  case CAN_500K_1M:
  case CAN_500K_2M:
  case CAN_500K_4M:
  case CAN_500K_5M:
  case CAN_500K_6M7:
  case CAN_500K_8M:
  case CAN_500K_10M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 30;
    ciNbtcfg.bF.TSEG2 = 7;
    ciNbtcfg.bF.SJW = 7;
    break;

    // All 250K
  case CAN_250K_500K:
  case CAN_250K_833K:
  case CAN_250K_1M:
  case CAN_250K_1M5:
  case CAN_250K_2M:
  case CAN_250K_3M:
  case CAN_250K_4M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 62;
    ciNbtcfg.bF.TSEG2 = 15;
    ciNbtcfg.bF.SJW = 15;
    break;

  case CAN_1000K_4M:
  case CAN_1000K_8M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 14;
    ciNbtcfg.bF.TSEG2 = 3;
    ciNbtcfg.bF.SJW = 3;
    break;

  case CAN_125K_500K:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 126;
    ciNbtcfg.bF.TSEG2 = 31;
    ciNbtcfg.bF.SJW = 31;
    break;

  default:
    return -1;
    break;
  }
|—————Node:{ Text: {
|—————Node:comment
|—————Node:case_statement Text: case CAN_500K_1M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_1M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_500K_2M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_2M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_500K_4M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_4M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_500K_5M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_5M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_500K_6M7:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_6M7
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_500K_8M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_8M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_500K_10M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 30;
    ciNbtcfg.bF.TSEG2 = 7;
    ciNbtcfg.bF.SJW = 7;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_10M
|——————Node:: Text: :
|——————Node:expression_statement Text: ciNbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciNbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciNbtcfg.bF.BRP
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.TSEG1 = 30;
|———————Node:assignment_expression Text: ciNbtcfg.bF.TSEG1 = 30
|————————Node:field_expression Text: ciNbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 30
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.TSEG2 = 7;
|———————Node:assignment_expression Text: ciNbtcfg.bF.TSEG2 = 7
|————————Node:field_expression Text: ciNbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 7
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.SJW = 7;
|———————Node:assignment_expression Text: ciNbtcfg.bF.SJW = 7
|————————Node:field_expression Text: ciNbtcfg.bF.SJW
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 7
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:comment
|—————Node:case_statement Text: case CAN_250K_500K:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_500K
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_250K_833K:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_833K
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_250K_1M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_1M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_250K_1M5:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_1M5
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_250K_2M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_2M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_250K_3M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_3M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_250K_4M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 62;
    ciNbtcfg.bF.TSEG2 = 15;
    ciNbtcfg.bF.SJW = 15;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_4M
|——————Node:: Text: :
|——————Node:expression_statement Text: ciNbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciNbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciNbtcfg.bF.BRP
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.TSEG1 = 62;
|———————Node:assignment_expression Text: ciNbtcfg.bF.TSEG1 = 62
|————————Node:field_expression Text: ciNbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 62
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.TSEG2 = 15;
|———————Node:assignment_expression Text: ciNbtcfg.bF.TSEG2 = 15
|————————Node:field_expression Text: ciNbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 15
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.SJW = 15;
|———————Node:assignment_expression Text: ciNbtcfg.bF.SJW = 15
|————————Node:field_expression Text: ciNbtcfg.bF.SJW
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 15
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_1000K_4M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_1000K_4M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_1000K_8M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 14;
    ciNbtcfg.bF.TSEG2 = 3;
    ciNbtcfg.bF.SJW = 3;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_1000K_8M
|——————Node:: Text: :
|——————Node:expression_statement Text: ciNbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciNbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciNbtcfg.bF.BRP
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.TSEG1 = 14;
|———————Node:assignment_expression Text: ciNbtcfg.bF.TSEG1 = 14
|————————Node:field_expression Text: ciNbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 14
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.TSEG2 = 3;
|———————Node:assignment_expression Text: ciNbtcfg.bF.TSEG2 = 3
|————————Node:field_expression Text: ciNbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 3
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.SJW = 3;
|———————Node:assignment_expression Text: ciNbtcfg.bF.SJW = 3
|————————Node:field_expression Text: ciNbtcfg.bF.SJW
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 3
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_125K_500K:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 126;
    ciNbtcfg.bF.TSEG2 = 31;
    ciNbtcfg.bF.SJW = 31;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_125K_500K
|——————Node:: Text: :
|——————Node:expression_statement Text: ciNbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciNbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciNbtcfg.bF.BRP
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.TSEG1 = 126;
|———————Node:assignment_expression Text: ciNbtcfg.bF.TSEG1 = 126
|————————Node:field_expression Text: ciNbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 126
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.TSEG2 = 31;
|———————Node:assignment_expression Text: ciNbtcfg.bF.TSEG2 = 31
|————————Node:field_expression Text: ciNbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 31
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.SJW = 31;
|———————Node:assignment_expression Text: ciNbtcfg.bF.SJW = 31
|————————Node:field_expression Text: ciNbtcfg.bF.SJW
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 31
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: default:
    return -1;
    break;
|——————Node:default Text: default
|——————Node:: Text: :
|——————Node:return_statement Text: return -1;
|———————Node:return Text: return
|———————Node:number_literal Text: -1
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:expression_statement Text: spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiNBTCFG, ciNbtcfg.word);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiNBTCFG, ciNbtcfg.word)
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_WriteWord(cREGADDR_CiNBTCFG, ciNbtcfg.word)
|——————Node:identifier Text: mcp2518fd_WriteWord
|——————Node:argument_list Text: (cREGADDR_CiNBTCFG, ciNbtcfg.word)
|———————Node:( Text: (
|———————Node:identifier Text: cREGADDR_CiNBTCFG
|———————Node:, Text: ,
|———————Node:field_expression Text: ciNbtcfg.word
|————————Node:identifier Text: ciNbtcfg
|————————Node:. Text: .
|————————Node:field_identifier Text: word
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -2;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -2;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -2;
|——————Node:return Text: return
|——————Node:number_literal Text: -2
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t
mcp2518fd::mcp2518fd_BitTimeConfigureData20MHz(MCP2518FD_BITTIME_SETUP bitTime,
                                               CAN_SSP_MODE sspMode) {
  int8_t spiTransferError = 0;
  REG_CiDBTCFG ciDbtcfg;
  REG_CiTDC ciTdc;
  //    sspMode;

  ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
  ciTdc.word = 0;

  // Configure Bit time and sample point
  ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
  uint32_t tdcValue = 0;

  // Data Bit rate and SSP
  switch (bitTime) {
  case CAN_500K_1M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 14;
    ciDbtcfg.bF.TSEG2 = 3;
    ciDbtcfg.bF.SJW = 3;
    // SSP
    ciTdc.bF.TDCOffset = 15;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_2M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 6;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 7;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_4M:
  case CAN_1000K_4M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 2;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 3;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_5M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 1;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 2;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_6M7:
  case CAN_500K_8M:
  case CAN_500K_10M:
  case CAN_1000K_8M:
    // qDebug("Data Bitrate not feasible with this clock!");
    return -1;
    break;

  case CAN_250K_500K:
  case CAN_125K_500K:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 30;
    ciDbtcfg.bF.TSEG2 = 7;
    ciDbtcfg.bF.SJW = 7;
    // SSP
    ciTdc.bF.TDCOffset = 31;
    ciTdc.bF.TDCValue = tdcValue;
    ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
    break;
  case CAN_250K_833K:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 17;
    ciDbtcfg.bF.TSEG2 = 4;
    ciDbtcfg.bF.SJW = 4;
    // SSP
    ciTdc.bF.TDCOffset = 18;
    ciTdc.bF.TDCValue = tdcValue;
    ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
    break;
  case CAN_250K_1M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 14;
    ciDbtcfg.bF.TSEG2 = 3;
    ciDbtcfg.bF.SJW = 3;
    // SSP
    ciTdc.bF.TDCOffset = 15;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_1M5:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 8;
    ciDbtcfg.bF.TSEG2 = 2;
    ciDbtcfg.bF.SJW = 2;
    // SSP
    ciTdc.bF.TDCOffset = 9;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_2M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 6;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 7;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_3M:
    // qDebug("Data Bitrate not feasible with this clock!");
    return -1;
    break;
  case CAN_250K_4M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 2;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 3;
    ciTdc.bF.TDCValue = tdcValue;
    break;

  default:
    return -1;
    break;
  }

  // Write Bit time registers
  spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiDBTCFG, ciDbtcfg.word);
  if (spiTransferError) {
    return -2;
  }

  // Write Transmitter Delay Compensation
#ifdef REV_A
  ciTdc.bF.TDCOffset = 0;
  ciTdc.bF.TDCValue = 0;
#endif

  spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiTDC, ciTdc.word);
  if (spiTransferError) {
    return -3;
  }

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_BitTimeConfigureData20MHz(MCP2518FD_BITTIME_SETUP bitTime,
                                               CAN_SSP_MODE sspMode)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_BitTimeConfigureData20MHz
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_BitTimeConfigureData20MHz
|———Node:parameter_list Text: (MCP2518FD_BITTIME_SETUP bitTime,
                                               CAN_SSP_MODE sspMode)
|————Node:( Text: (
|————Node:parameter_declaration Text: MCP2518FD_BITTIME_SETUP bitTime
|—————Node:type_identifier Text: MCP2518FD_BITTIME_SETUP
|—————Node:identifier Text: bitTime
|————Node:, Text: ,
|————Node:parameter_declaration Text: CAN_SSP_MODE sspMode
|—————Node:type_identifier Text: CAN_SSP_MODE
|—————Node:identifier Text: sspMode
|————Node:) Text: )
|——Node:compound_statement Text: {
  int8_t spiTransferError = 0;
  REG_CiDBTCFG ciDbtcfg;
  REG_CiTDC ciTdc;
  //    sspMode;

  ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
  ciTdc.word = 0;

  // Configure Bit time and sample point
  ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
  uint32_t tdcValue = 0;

  // Data Bit rate and SSP
  switch (bitTime) {
  case CAN_500K_1M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 14;
    ciDbtcfg.bF.TSEG2 = 3;
    ciDbtcfg.bF.SJW = 3;
    // SSP
    ciTdc.bF.TDCOffset = 15;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_2M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 6;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 7;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_4M:
  case CAN_1000K_4M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 2;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 3;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_5M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 1;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 2;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_6M7:
  case CAN_500K_8M:
  case CAN_500K_10M:
  case CAN_1000K_8M:
    // qDebug("Data Bitrate not feasible with this clock!");
    return -1;
    break;

  case CAN_250K_500K:
  case CAN_125K_500K:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 30;
    ciDbtcfg.bF.TSEG2 = 7;
    ciDbtcfg.bF.SJW = 7;
    // SSP
    ciTdc.bF.TDCOffset = 31;
    ciTdc.bF.TDCValue = tdcValue;
    ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
    break;
  case CAN_250K_833K:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 17;
    ciDbtcfg.bF.TSEG2 = 4;
    ciDbtcfg.bF.SJW = 4;
    // SSP
    ciTdc.bF.TDCOffset = 18;
    ciTdc.bF.TDCValue = tdcValue;
    ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
    break;
  case CAN_250K_1M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 14;
    ciDbtcfg.bF.TSEG2 = 3;
    ciDbtcfg.bF.SJW = 3;
    // SSP
    ciTdc.bF.TDCOffset = 15;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_1M5:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 8;
    ciDbtcfg.bF.TSEG2 = 2;
    ciDbtcfg.bF.SJW = 2;
    // SSP
    ciTdc.bF.TDCOffset = 9;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_2M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 6;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 7;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_3M:
    // qDebug("Data Bitrate not feasible with this clock!");
    return -1;
    break;
  case CAN_250K_4M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 2;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 3;
    ciTdc.bF.TDCValue = tdcValue;
    break;

  default:
    return -1;
    break;
  }

  // Write Bit time registers
  spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiDBTCFG, ciDbtcfg.word);
  if (spiTransferError) {
    return -2;
  }

  // Write Transmitter Delay Compensation
#ifdef REV_A
  ciTdc.bF.TDCOffset = 0;
  ciTdc.bF.TDCValue = 0;
#endif

  spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiTDC, ciTdc.word);
  if (spiTransferError) {
    return -3;
  }

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: REG_CiDBTCFG ciDbtcfg;
|————Node:type_identifier Text: REG_CiDBTCFG
|————Node:identifier Text: ciDbtcfg
|————Node:; Text: ;
|———Node:declaration Text: REG_CiTDC ciTdc;
|————Node:type_identifier Text: REG_CiTDC
|————Node:identifier Text: ciTdc
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
|————Node:assignment_expression Text: ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4]
|—————Node:field_expression Text: ciDbtcfg.word
|——————Node:identifier Text: ciDbtcfg
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:subscript_expression Text: canControlResetValues[cREGADDR_CiDBTCFG / 4]
|——————Node:identifier Text: canControlResetValues
|——————Node:subscript_argument_list Text: [cREGADDR_CiDBTCFG / 4]
|———————Node:[ Text: [
|———————Node:binary_expression Text: cREGADDR_CiDBTCFG / 4
|————————Node:identifier Text: cREGADDR_CiDBTCFG
|————————Node:/ Text: /
|————————Node:number_literal Text: 4
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: ciTdc.word = 0;
|————Node:assignment_expression Text: ciTdc.word = 0
|—————Node:field_expression Text: ciTdc.word
|——————Node:identifier Text: ciTdc
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
|————Node:assignment_expression Text: ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO
|—————Node:field_expression Text: ciTdc.bF.TDCMode
|——————Node:field_expression Text: ciTdc.bF
|———————Node:identifier Text: ciTdc
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: TDCMode
|—————Node:= Text: =
|—————Node:identifier Text: CAN_SSP_MODE_AUTO
|————Node:; Text: ;
|———Node:declaration Text: uint32_t tdcValue = 0;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: tdcValue = 0
|—————Node:identifier Text: tdcValue
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:switch_statement Text: switch (bitTime) {
  case CAN_500K_1M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 14;
    ciDbtcfg.bF.TSEG2 = 3;
    ciDbtcfg.bF.SJW = 3;
    // SSP
    ciTdc.bF.TDCOffset = 15;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_2M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 6;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 7;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_4M:
  case CAN_1000K_4M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 2;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 3;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_5M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 1;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 2;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_6M7:
  case CAN_500K_8M:
  case CAN_500K_10M:
  case CAN_1000K_8M:
    // qDebug("Data Bitrate not feasible with this clock!");
    return -1;
    break;

  case CAN_250K_500K:
  case CAN_125K_500K:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 30;
    ciDbtcfg.bF.TSEG2 = 7;
    ciDbtcfg.bF.SJW = 7;
    // SSP
    ciTdc.bF.TDCOffset = 31;
    ciTdc.bF.TDCValue = tdcValue;
    ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
    break;
  case CAN_250K_833K:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 17;
    ciDbtcfg.bF.TSEG2 = 4;
    ciDbtcfg.bF.SJW = 4;
    // SSP
    ciTdc.bF.TDCOffset = 18;
    ciTdc.bF.TDCValue = tdcValue;
    ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
    break;
  case CAN_250K_1M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 14;
    ciDbtcfg.bF.TSEG2 = 3;
    ciDbtcfg.bF.SJW = 3;
    // SSP
    ciTdc.bF.TDCOffset = 15;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_1M5:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 8;
    ciDbtcfg.bF.TSEG2 = 2;
    ciDbtcfg.bF.SJW = 2;
    // SSP
    ciTdc.bF.TDCOffset = 9;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_2M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 6;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 7;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_3M:
    // qDebug("Data Bitrate not feasible with this clock!");
    return -1;
    break;
  case CAN_250K_4M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 2;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 3;
    ciTdc.bF.TDCValue = tdcValue;
    break;

  default:
    return -1;
    break;
  }
|————Node:switch Text: switch
|————Node:condition_clause Text: (bitTime)
|—————Node:( Text: (
|—————Node:identifier Text: bitTime
|—————Node:) Text: )
|————Node:compound_statement Text: {
  case CAN_500K_1M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 14;
    ciDbtcfg.bF.TSEG2 = 3;
    ciDbtcfg.bF.SJW = 3;
    // SSP
    ciTdc.bF.TDCOffset = 15;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_2M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 6;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 7;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_4M:
  case CAN_1000K_4M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 2;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 3;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_5M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 1;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 2;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_6M7:
  case CAN_500K_8M:
  case CAN_500K_10M:
  case CAN_1000K_8M:
    // qDebug("Data Bitrate not feasible with this clock!");
    return -1;
    break;

  case CAN_250K_500K:
  case CAN_125K_500K:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 30;
    ciDbtcfg.bF.TSEG2 = 7;
    ciDbtcfg.bF.SJW = 7;
    // SSP
    ciTdc.bF.TDCOffset = 31;
    ciTdc.bF.TDCValue = tdcValue;
    ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
    break;
  case CAN_250K_833K:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 17;
    ciDbtcfg.bF.TSEG2 = 4;
    ciDbtcfg.bF.SJW = 4;
    // SSP
    ciTdc.bF.TDCOffset = 18;
    ciTdc.bF.TDCValue = tdcValue;
    ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
    break;
  case CAN_250K_1M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 14;
    ciDbtcfg.bF.TSEG2 = 3;
    ciDbtcfg.bF.SJW = 3;
    // SSP
    ciTdc.bF.TDCOffset = 15;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_1M5:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 8;
    ciDbtcfg.bF.TSEG2 = 2;
    ciDbtcfg.bF.SJW = 2;
    // SSP
    ciTdc.bF.TDCOffset = 9;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_2M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 6;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 7;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_3M:
    // qDebug("Data Bitrate not feasible with this clock!");
    return -1;
    break;
  case CAN_250K_4M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 2;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 3;
    ciTdc.bF.TDCValue = tdcValue;
    break;

  default:
    return -1;
    break;
  }
|—————Node:{ Text: {
|—————Node:case_statement Text: case CAN_500K_1M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 14;
    ciDbtcfg.bF.TSEG2 = 3;
    ciDbtcfg.bF.SJW = 3;
    // SSP
    ciTdc.bF.TDCOffset = 15;
    ciTdc.bF.TDCValue = tdcValue;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_1M
|——————Node:: Text: :
|——————Node:expression_statement Text: ciDbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciDbtcfg.bF.BRP
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG1 = 14;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG1 = 14
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 14
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG2 = 3;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG2 = 3
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 3
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.SJW = 3;
|———————Node:assignment_expression Text: ciDbtcfg.bF.SJW = 3
|————————Node:field_expression Text: ciDbtcfg.bF.SJW
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 3
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: ciTdc.bF.TDCOffset = 15;
|———————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 15
|————————Node:field_expression Text: ciTdc.bF.TDCOffset
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCOffset
|————————Node:= Text: =
|————————Node:number_literal Text: 15
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCValue = tdcValue;
|———————Node:assignment_expression Text: ciTdc.bF.TDCValue = tdcValue
|————————Node:field_expression Text: ciTdc.bF.TDCValue
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCValue
|————————Node:= Text: =
|————————Node:identifier Text: tdcValue
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_500K_2M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 6;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 7;
    ciTdc.bF.TDCValue = tdcValue;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_2M
|——————Node:: Text: :
|——————Node:comment
|——————Node:expression_statement Text: ciDbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciDbtcfg.bF.BRP
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG1 = 6;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG1 = 6
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 6
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG2 = 1;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG2 = 1
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 1
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.SJW = 1;
|———————Node:assignment_expression Text: ciDbtcfg.bF.SJW = 1
|————————Node:field_expression Text: ciDbtcfg.bF.SJW
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 1
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: ciTdc.bF.TDCOffset = 7;
|———————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 7
|————————Node:field_expression Text: ciTdc.bF.TDCOffset
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCOffset
|————————Node:= Text: =
|————————Node:number_literal Text: 7
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCValue = tdcValue;
|———————Node:assignment_expression Text: ciTdc.bF.TDCValue = tdcValue
|————————Node:field_expression Text: ciTdc.bF.TDCValue
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCValue
|————————Node:= Text: =
|————————Node:identifier Text: tdcValue
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_500K_4M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_4M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_1000K_4M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 2;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 3;
    ciTdc.bF.TDCValue = tdcValue;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_1000K_4M
|——————Node:: Text: :
|——————Node:comment
|——————Node:expression_statement Text: ciDbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciDbtcfg.bF.BRP
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG1 = 2;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG1 = 2
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 2
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG2 = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG2 = 0
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.SJW = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.SJW = 0
|————————Node:field_expression Text: ciDbtcfg.bF.SJW
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: ciTdc.bF.TDCOffset = 3;
|———————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 3
|————————Node:field_expression Text: ciTdc.bF.TDCOffset
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCOffset
|————————Node:= Text: =
|————————Node:number_literal Text: 3
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCValue = tdcValue;
|———————Node:assignment_expression Text: ciTdc.bF.TDCValue = tdcValue
|————————Node:field_expression Text: ciTdc.bF.TDCValue
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCValue
|————————Node:= Text: =
|————————Node:identifier Text: tdcValue
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_500K_5M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 1;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 2;
    ciTdc.bF.TDCValue = tdcValue;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_5M
|——————Node:: Text: :
|——————Node:comment
|——————Node:expression_statement Text: ciDbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciDbtcfg.bF.BRP
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG1 = 1;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG1 = 1
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 1
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG2 = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG2 = 0
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.SJW = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.SJW = 0
|————————Node:field_expression Text: ciDbtcfg.bF.SJW
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: ciTdc.bF.TDCOffset = 2;
|———————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 2
|————————Node:field_expression Text: ciTdc.bF.TDCOffset
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCOffset
|————————Node:= Text: =
|————————Node:number_literal Text: 2
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCValue = tdcValue;
|———————Node:assignment_expression Text: ciTdc.bF.TDCValue = tdcValue
|————————Node:field_expression Text: ciTdc.bF.TDCValue
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCValue
|————————Node:= Text: =
|————————Node:identifier Text: tdcValue
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_500K_6M7:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_6M7
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_500K_8M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_8M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_500K_10M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_10M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_1000K_8M:
    // qDebug("Data Bitrate not feasible with this clock!");
    return -1;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_1000K_8M
|——————Node:: Text: :
|——————Node:comment
|——————Node:return_statement Text: return -1;
|———————Node:return Text: return
|———————Node:number_literal Text: -1
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_250K_500K:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_500K
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_125K_500K:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 30;
    ciDbtcfg.bF.TSEG2 = 7;
    ciDbtcfg.bF.SJW = 7;
    // SSP
    ciTdc.bF.TDCOffset = 31;
    ciTdc.bF.TDCValue = tdcValue;
    ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_125K_500K
|——————Node:: Text: :
|——————Node:expression_statement Text: ciDbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciDbtcfg.bF.BRP
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG1 = 30;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG1 = 30
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 30
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG2 = 7;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG2 = 7
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 7
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.SJW = 7;
|———————Node:assignment_expression Text: ciDbtcfg.bF.SJW = 7
|————————Node:field_expression Text: ciDbtcfg.bF.SJW
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 7
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: ciTdc.bF.TDCOffset = 31;
|———————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 31
|————————Node:field_expression Text: ciTdc.bF.TDCOffset
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCOffset
|————————Node:= Text: =
|————————Node:number_literal Text: 31
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCValue = tdcValue;
|———————Node:assignment_expression Text: ciTdc.bF.TDCValue = tdcValue
|————————Node:field_expression Text: ciTdc.bF.TDCValue
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCValue
|————————Node:= Text: =
|————————Node:identifier Text: tdcValue
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
|———————Node:assignment_expression Text: ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF
|————————Node:field_expression Text: ciTdc.bF.TDCMode
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCMode
|————————Node:= Text: =
|————————Node:identifier Text: CAN_SSP_MODE_OFF
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_250K_833K:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 17;
    ciDbtcfg.bF.TSEG2 = 4;
    ciDbtcfg.bF.SJW = 4;
    // SSP
    ciTdc.bF.TDCOffset = 18;
    ciTdc.bF.TDCValue = tdcValue;
    ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_833K
|——————Node:: Text: :
|——————Node:expression_statement Text: ciDbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciDbtcfg.bF.BRP
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG1 = 17;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG1 = 17
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 17
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG2 = 4;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG2 = 4
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 4
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.SJW = 4;
|———————Node:assignment_expression Text: ciDbtcfg.bF.SJW = 4
|————————Node:field_expression Text: ciDbtcfg.bF.SJW
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 4
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: ciTdc.bF.TDCOffset = 18;
|———————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 18
|————————Node:field_expression Text: ciTdc.bF.TDCOffset
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCOffset
|————————Node:= Text: =
|————————Node:number_literal Text: 18
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCValue = tdcValue;
|———————Node:assignment_expression Text: ciTdc.bF.TDCValue = tdcValue
|————————Node:field_expression Text: ciTdc.bF.TDCValue
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCValue
|————————Node:= Text: =
|————————Node:identifier Text: tdcValue
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
|———————Node:assignment_expression Text: ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF
|————————Node:field_expression Text: ciTdc.bF.TDCMode
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCMode
|————————Node:= Text: =
|————————Node:identifier Text: CAN_SSP_MODE_OFF
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_250K_1M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 14;
    ciDbtcfg.bF.TSEG2 = 3;
    ciDbtcfg.bF.SJW = 3;
    // SSP
    ciTdc.bF.TDCOffset = 15;
    ciTdc.bF.TDCValue = tdcValue;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_1M
|——————Node:: Text: :
|——————Node:expression_statement Text: ciDbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciDbtcfg.bF.BRP
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG1 = 14;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG1 = 14
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 14
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG2 = 3;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG2 = 3
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 3
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.SJW = 3;
|———————Node:assignment_expression Text: ciDbtcfg.bF.SJW = 3
|————————Node:field_expression Text: ciDbtcfg.bF.SJW
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 3
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: ciTdc.bF.TDCOffset = 15;
|———————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 15
|————————Node:field_expression Text: ciTdc.bF.TDCOffset
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCOffset
|————————Node:= Text: =
|————————Node:number_literal Text: 15
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCValue = tdcValue;
|———————Node:assignment_expression Text: ciTdc.bF.TDCValue = tdcValue
|————————Node:field_expression Text: ciTdc.bF.TDCValue
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCValue
|————————Node:= Text: =
|————————Node:identifier Text: tdcValue
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_250K_1M5:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 8;
    ciDbtcfg.bF.TSEG2 = 2;
    ciDbtcfg.bF.SJW = 2;
    // SSP
    ciTdc.bF.TDCOffset = 9;
    ciTdc.bF.TDCValue = tdcValue;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_1M5
|——————Node:: Text: :
|——————Node:expression_statement Text: ciDbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciDbtcfg.bF.BRP
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG1 = 8;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG1 = 8
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 8
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG2 = 2;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG2 = 2
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 2
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.SJW = 2;
|———————Node:assignment_expression Text: ciDbtcfg.bF.SJW = 2
|————————Node:field_expression Text: ciDbtcfg.bF.SJW
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 2
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: ciTdc.bF.TDCOffset = 9;
|———————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 9
|————————Node:field_expression Text: ciTdc.bF.TDCOffset
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCOffset
|————————Node:= Text: =
|————————Node:number_literal Text: 9
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCValue = tdcValue;
|———————Node:assignment_expression Text: ciTdc.bF.TDCValue = tdcValue
|————————Node:field_expression Text: ciTdc.bF.TDCValue
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCValue
|————————Node:= Text: =
|————————Node:identifier Text: tdcValue
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_250K_2M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 6;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 7;
    ciTdc.bF.TDCValue = tdcValue;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_2M
|——————Node:: Text: :
|——————Node:expression_statement Text: ciDbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciDbtcfg.bF.BRP
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG1 = 6;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG1 = 6
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 6
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG2 = 1;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG2 = 1
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 1
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.SJW = 1;
|———————Node:assignment_expression Text: ciDbtcfg.bF.SJW = 1
|————————Node:field_expression Text: ciDbtcfg.bF.SJW
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 1
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: ciTdc.bF.TDCOffset = 7;
|———————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 7
|————————Node:field_expression Text: ciTdc.bF.TDCOffset
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCOffset
|————————Node:= Text: =
|————————Node:number_literal Text: 7
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCValue = tdcValue;
|———————Node:assignment_expression Text: ciTdc.bF.TDCValue = tdcValue
|————————Node:field_expression Text: ciTdc.bF.TDCValue
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCValue
|————————Node:= Text: =
|————————Node:identifier Text: tdcValue
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_250K_3M:
    // qDebug("Data Bitrate not feasible with this clock!");
    return -1;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_3M
|——————Node:: Text: :
|——————Node:comment
|——————Node:return_statement Text: return -1;
|———————Node:return Text: return
|———————Node:number_literal Text: -1
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_250K_4M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 2;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 3;
    ciTdc.bF.TDCValue = tdcValue;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_4M
|——————Node:: Text: :
|——————Node:comment
|——————Node:expression_statement Text: ciDbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciDbtcfg.bF.BRP
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG1 = 2;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG1 = 2
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 2
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG2 = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG2 = 0
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.SJW = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.SJW = 0
|————————Node:field_expression Text: ciDbtcfg.bF.SJW
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: ciTdc.bF.TDCOffset = 3;
|———————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 3
|————————Node:field_expression Text: ciTdc.bF.TDCOffset
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCOffset
|————————Node:= Text: =
|————————Node:number_literal Text: 3
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCValue = tdcValue;
|———————Node:assignment_expression Text: ciTdc.bF.TDCValue = tdcValue
|————————Node:field_expression Text: ciTdc.bF.TDCValue
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCValue
|————————Node:= Text: =
|————————Node:identifier Text: tdcValue
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: default:
    return -1;
    break;
|——————Node:default Text: default
|——————Node:: Text: :
|——————Node:return_statement Text: return -1;
|———————Node:return Text: return
|———————Node:number_literal Text: -1
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:expression_statement Text: spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiDBTCFG, ciDbtcfg.word);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiDBTCFG, ciDbtcfg.word)
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_WriteWord(cREGADDR_CiDBTCFG, ciDbtcfg.word)
|——————Node:identifier Text: mcp2518fd_WriteWord
|——————Node:argument_list Text: (cREGADDR_CiDBTCFG, ciDbtcfg.word)
|———————Node:( Text: (
|———————Node:identifier Text: cREGADDR_CiDBTCFG
|———————Node:, Text: ,
|———————Node:field_expression Text: ciDbtcfg.word
|————————Node:identifier Text: ciDbtcfg
|————————Node:. Text: .
|————————Node:field_identifier Text: word
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -2;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -2;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -2;
|——————Node:return Text: return
|——————Node:number_literal Text: -2
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:preproc_ifdef Text: #ifdef REV_A
  ciTdc.bF.TDCOffset = 0;
  ciTdc.bF.TDCValue = 0;
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: REV_A
|————Node:expression_statement Text: ciTdc.bF.TDCOffset = 0;
|—————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 0
|——————Node:field_expression Text: ciTdc.bF.TDCOffset
|———————Node:field_expression Text: ciTdc.bF
|————————Node:identifier Text: ciTdc
|————————Node:. Text: .
|————————Node:field_identifier Text: bF
|———————Node:. Text: .
|———————Node:field_identifier Text: TDCOffset
|——————Node:= Text: =
|——————Node:number_literal Text: 0
|—————Node:; Text: ;
|————Node:expression_statement Text: ciTdc.bF.TDCValue = 0;
|—————Node:assignment_expression Text: ciTdc.bF.TDCValue = 0
|——————Node:field_expression Text: ciTdc.bF.TDCValue
|———————Node:field_expression Text: ciTdc.bF
|————————Node:identifier Text: ciTdc
|————————Node:. Text: .
|————————Node:field_identifier Text: bF
|———————Node:. Text: .
|———————Node:field_identifier Text: TDCValue
|——————Node:= Text: =
|——————Node:number_literal Text: 0
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiTDC, ciTdc.word);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiTDC, ciTdc.word)
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_WriteWord(cREGADDR_CiTDC, ciTdc.word)
|——————Node:identifier Text: mcp2518fd_WriteWord
|——————Node:argument_list Text: (cREGADDR_CiTDC, ciTdc.word)
|———————Node:( Text: (
|———————Node:identifier Text: cREGADDR_CiTDC
|———————Node:, Text: ,
|———————Node:field_expression Text: ciTdc.word
|————————Node:identifier Text: ciTdc
|————————Node:. Text: .
|————————Node:field_identifier Text: word
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -3;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -3;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -3;
|——————Node:return Text: return
|——————Node:number_literal Text: -3
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_BitTimeConfigureNominal10MHz(
    MCP2518FD_BITTIME_SETUP bitTime) {
  int8_t spiTransferError = 0;
  REG_CiNBTCFG ciNbtcfg;

  ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];

  // Arbitration Bit rate
  switch (bitTime) {
    // All 500K
  case CAN_500K_1M:
  case CAN_500K_2M:
  case CAN_500K_4M:
  case CAN_500K_5M:
  case CAN_500K_6M7:
  case CAN_500K_8M:
  case CAN_500K_10M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 14;
    ciNbtcfg.bF.TSEG2 = 3;
    ciNbtcfg.bF.SJW = 3;
    break;

    // All 250K
  case CAN_250K_500K:
  case CAN_250K_833K:
  case CAN_250K_1M:
  case CAN_250K_1M5:
  case CAN_250K_2M:
  case CAN_250K_3M:
  case CAN_250K_4M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 30;
    ciNbtcfg.bF.TSEG2 = 7;
    ciNbtcfg.bF.SJW = 7;
    break;

  case CAN_1000K_4M:
  case CAN_1000K_8M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 7;
    ciNbtcfg.bF.TSEG2 = 2;
    ciNbtcfg.bF.SJW = 2;
    break;

  case CAN_125K_500K:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 62;
    ciNbtcfg.bF.TSEG2 = 15;
    ciNbtcfg.bF.SJW = 15;
    break;

  default:
    return -1;
    break;
  }

  // Write Bit time registers
  spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiNBTCFG, ciNbtcfg.word);
  if (spiTransferError) {
    return -2;
  }

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_BitTimeConfigureNominal10MHz(
    MCP2518FD_BITTIME_SETUP bitTime)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_BitTimeConfigureNominal10MHz
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_BitTimeConfigureNominal10MHz
|———Node:parameter_list Text: (
    MCP2518FD_BITTIME_SETUP bitTime)
|————Node:( Text: (
|————Node:parameter_declaration Text: MCP2518FD_BITTIME_SETUP bitTime
|—————Node:type_identifier Text: MCP2518FD_BITTIME_SETUP
|—————Node:identifier Text: bitTime
|————Node:) Text: )
|——Node:compound_statement Text: {
  int8_t spiTransferError = 0;
  REG_CiNBTCFG ciNbtcfg;

  ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];

  // Arbitration Bit rate
  switch (bitTime) {
    // All 500K
  case CAN_500K_1M:
  case CAN_500K_2M:
  case CAN_500K_4M:
  case CAN_500K_5M:
  case CAN_500K_6M7:
  case CAN_500K_8M:
  case CAN_500K_10M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 14;
    ciNbtcfg.bF.TSEG2 = 3;
    ciNbtcfg.bF.SJW = 3;
    break;

    // All 250K
  case CAN_250K_500K:
  case CAN_250K_833K:
  case CAN_250K_1M:
  case CAN_250K_1M5:
  case CAN_250K_2M:
  case CAN_250K_3M:
  case CAN_250K_4M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 30;
    ciNbtcfg.bF.TSEG2 = 7;
    ciNbtcfg.bF.SJW = 7;
    break;

  case CAN_1000K_4M:
  case CAN_1000K_8M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 7;
    ciNbtcfg.bF.TSEG2 = 2;
    ciNbtcfg.bF.SJW = 2;
    break;

  case CAN_125K_500K:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 62;
    ciNbtcfg.bF.TSEG2 = 15;
    ciNbtcfg.bF.SJW = 15;
    break;

  default:
    return -1;
    break;
  }

  // Write Bit time registers
  spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiNBTCFG, ciNbtcfg.word);
  if (spiTransferError) {
    return -2;
  }

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: REG_CiNBTCFG ciNbtcfg;
|————Node:type_identifier Text: REG_CiNBTCFG
|————Node:identifier Text: ciNbtcfg
|————Node:; Text: ;
|———Node:expression_statement Text: ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
|————Node:assignment_expression Text: ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4]
|—————Node:field_expression Text: ciNbtcfg.word
|——————Node:identifier Text: ciNbtcfg
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:subscript_expression Text: canControlResetValues[cREGADDR_CiNBTCFG / 4]
|——————Node:identifier Text: canControlResetValues
|——————Node:subscript_argument_list Text: [cREGADDR_CiNBTCFG / 4]
|———————Node:[ Text: [
|———————Node:binary_expression Text: cREGADDR_CiNBTCFG / 4
|————————Node:identifier Text: cREGADDR_CiNBTCFG
|————————Node:/ Text: /
|————————Node:number_literal Text: 4
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:comment
|———Node:switch_statement Text: switch (bitTime) {
    // All 500K
  case CAN_500K_1M:
  case CAN_500K_2M:
  case CAN_500K_4M:
  case CAN_500K_5M:
  case CAN_500K_6M7:
  case CAN_500K_8M:
  case CAN_500K_10M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 14;
    ciNbtcfg.bF.TSEG2 = 3;
    ciNbtcfg.bF.SJW = 3;
    break;

    // All 250K
  case CAN_250K_500K:
  case CAN_250K_833K:
  case CAN_250K_1M:
  case CAN_250K_1M5:
  case CAN_250K_2M:
  case CAN_250K_3M:
  case CAN_250K_4M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 30;
    ciNbtcfg.bF.TSEG2 = 7;
    ciNbtcfg.bF.SJW = 7;
    break;

  case CAN_1000K_4M:
  case CAN_1000K_8M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 7;
    ciNbtcfg.bF.TSEG2 = 2;
    ciNbtcfg.bF.SJW = 2;
    break;

  case CAN_125K_500K:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 62;
    ciNbtcfg.bF.TSEG2 = 15;
    ciNbtcfg.bF.SJW = 15;
    break;

  default:
    return -1;
    break;
  }
|————Node:switch Text: switch
|————Node:condition_clause Text: (bitTime)
|—————Node:( Text: (
|—————Node:identifier Text: bitTime
|—————Node:) Text: )
|————Node:compound_statement Text: {
    // All 500K
  case CAN_500K_1M:
  case CAN_500K_2M:
  case CAN_500K_4M:
  case CAN_500K_5M:
  case CAN_500K_6M7:
  case CAN_500K_8M:
  case CAN_500K_10M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 14;
    ciNbtcfg.bF.TSEG2 = 3;
    ciNbtcfg.bF.SJW = 3;
    break;

    // All 250K
  case CAN_250K_500K:
  case CAN_250K_833K:
  case CAN_250K_1M:
  case CAN_250K_1M5:
  case CAN_250K_2M:
  case CAN_250K_3M:
  case CAN_250K_4M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 30;
    ciNbtcfg.bF.TSEG2 = 7;
    ciNbtcfg.bF.SJW = 7;
    break;

  case CAN_1000K_4M:
  case CAN_1000K_8M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 7;
    ciNbtcfg.bF.TSEG2 = 2;
    ciNbtcfg.bF.SJW = 2;
    break;

  case CAN_125K_500K:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 62;
    ciNbtcfg.bF.TSEG2 = 15;
    ciNbtcfg.bF.SJW = 15;
    break;

  default:
    return -1;
    break;
  }
|—————Node:{ Text: {
|—————Node:comment
|—————Node:case_statement Text: case CAN_500K_1M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_1M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_500K_2M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_2M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_500K_4M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_4M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_500K_5M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_5M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_500K_6M7:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_6M7
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_500K_8M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_8M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_500K_10M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 14;
    ciNbtcfg.bF.TSEG2 = 3;
    ciNbtcfg.bF.SJW = 3;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_10M
|——————Node:: Text: :
|——————Node:expression_statement Text: ciNbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciNbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciNbtcfg.bF.BRP
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.TSEG1 = 14;
|———————Node:assignment_expression Text: ciNbtcfg.bF.TSEG1 = 14
|————————Node:field_expression Text: ciNbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 14
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.TSEG2 = 3;
|———————Node:assignment_expression Text: ciNbtcfg.bF.TSEG2 = 3
|————————Node:field_expression Text: ciNbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 3
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.SJW = 3;
|———————Node:assignment_expression Text: ciNbtcfg.bF.SJW = 3
|————————Node:field_expression Text: ciNbtcfg.bF.SJW
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 3
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:comment
|—————Node:case_statement Text: case CAN_250K_500K:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_500K
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_250K_833K:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_833K
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_250K_1M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_1M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_250K_1M5:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_1M5
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_250K_2M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_2M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_250K_3M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_3M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_250K_4M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 30;
    ciNbtcfg.bF.TSEG2 = 7;
    ciNbtcfg.bF.SJW = 7;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_4M
|——————Node:: Text: :
|——————Node:expression_statement Text: ciNbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciNbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciNbtcfg.bF.BRP
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.TSEG1 = 30;
|———————Node:assignment_expression Text: ciNbtcfg.bF.TSEG1 = 30
|————————Node:field_expression Text: ciNbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 30
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.TSEG2 = 7;
|———————Node:assignment_expression Text: ciNbtcfg.bF.TSEG2 = 7
|————————Node:field_expression Text: ciNbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 7
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.SJW = 7;
|———————Node:assignment_expression Text: ciNbtcfg.bF.SJW = 7
|————————Node:field_expression Text: ciNbtcfg.bF.SJW
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 7
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_1000K_4M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_1000K_4M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_1000K_8M:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 7;
    ciNbtcfg.bF.TSEG2 = 2;
    ciNbtcfg.bF.SJW = 2;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_1000K_8M
|——————Node:: Text: :
|——————Node:expression_statement Text: ciNbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciNbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciNbtcfg.bF.BRP
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.TSEG1 = 7;
|———————Node:assignment_expression Text: ciNbtcfg.bF.TSEG1 = 7
|————————Node:field_expression Text: ciNbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 7
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.TSEG2 = 2;
|———————Node:assignment_expression Text: ciNbtcfg.bF.TSEG2 = 2
|————————Node:field_expression Text: ciNbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 2
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.SJW = 2;
|———————Node:assignment_expression Text: ciNbtcfg.bF.SJW = 2
|————————Node:field_expression Text: ciNbtcfg.bF.SJW
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 2
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_125K_500K:
    ciNbtcfg.bF.BRP = 0;
    ciNbtcfg.bF.TSEG1 = 62;
    ciNbtcfg.bF.TSEG2 = 15;
    ciNbtcfg.bF.SJW = 15;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_125K_500K
|——————Node:: Text: :
|——————Node:expression_statement Text: ciNbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciNbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciNbtcfg.bF.BRP
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.TSEG1 = 62;
|———————Node:assignment_expression Text: ciNbtcfg.bF.TSEG1 = 62
|————————Node:field_expression Text: ciNbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 62
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.TSEG2 = 15;
|———————Node:assignment_expression Text: ciNbtcfg.bF.TSEG2 = 15
|————————Node:field_expression Text: ciNbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 15
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciNbtcfg.bF.SJW = 15;
|———————Node:assignment_expression Text: ciNbtcfg.bF.SJW = 15
|————————Node:field_expression Text: ciNbtcfg.bF.SJW
|—————————Node:field_expression Text: ciNbtcfg.bF
|——————————Node:identifier Text: ciNbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 15
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: default:
    return -1;
    break;
|——————Node:default Text: default
|——————Node:: Text: :
|——————Node:return_statement Text: return -1;
|———————Node:return Text: return
|———————Node:number_literal Text: -1
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:expression_statement Text: spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiNBTCFG, ciNbtcfg.word);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiNBTCFG, ciNbtcfg.word)
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_WriteWord(cREGADDR_CiNBTCFG, ciNbtcfg.word)
|——————Node:identifier Text: mcp2518fd_WriteWord
|——————Node:argument_list Text: (cREGADDR_CiNBTCFG, ciNbtcfg.word)
|———————Node:( Text: (
|———————Node:identifier Text: cREGADDR_CiNBTCFG
|———————Node:, Text: ,
|———————Node:field_expression Text: ciNbtcfg.word
|————————Node:identifier Text: ciNbtcfg
|————————Node:. Text: .
|————————Node:field_identifier Text: word
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -2;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -2;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -2;
|——————Node:return Text: return
|——————Node:number_literal Text: -2
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t
mcp2518fd::mcp2518fd_BitTimeConfigureData10MHz(MCP2518FD_BITTIME_SETUP bitTime,
                                               CAN_SSP_MODE sspMode) {
  int8_t spiTransferError = 0;
  REG_CiDBTCFG ciDbtcfg;
  REG_CiTDC ciTdc;
  //    sspMode;

  ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
  ciTdc.word = 0;

  // Configure Bit time and sample point
  ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
  uint32_t tdcValue = 0;

  // Data Bit rate and SSP
  switch (bitTime) {
  case CAN_500K_1M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 6;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 7;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_2M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 2;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 3;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_4M:
  case CAN_500K_5M:
  case CAN_500K_6M7:
  case CAN_500K_8M:
  case CAN_500K_10M:
  case CAN_1000K_4M:
  case CAN_1000K_8M:
    // qDebug("Data Bitrate not feasible with this clock!");
    return -1;
    break;

  case CAN_250K_500K:
  case CAN_125K_500K:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 14;
    ciDbtcfg.bF.TSEG2 = 3;
    ciDbtcfg.bF.SJW = 3;
    // SSP
    ciTdc.bF.TDCOffset = 15;
    ciTdc.bF.TDCValue = tdcValue;
    ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
    break;
  case CAN_250K_833K:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 7;
    ciDbtcfg.bF.TSEG2 = 2;
    ciDbtcfg.bF.SJW = 2;
    // SSP
    ciTdc.bF.TDCOffset = 8;
    ciTdc.bF.TDCValue = tdcValue;
    ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
    break;
  case CAN_250K_1M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 6;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 7;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_1M5:
    // qDebug("Data Bitrate not feasible with this clock!");
    return -1;
    break;
  case CAN_250K_2M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 2;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 3;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_3M:
  case CAN_250K_4M:
    // qDebug("Data Bitrate not feasible with this clock!");
    return -1;
    break;

  default:
    return -1;
    break;
  }

  // Write Bit time registers
  spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiDBTCFG, ciDbtcfg.word);
  if (spiTransferError) {
    return -2;
  }

  // Write Transmitter Delay Compensation
#ifdef REV_A
  ciTdc.bF.TDCOffset = 0;
  ciTdc.bF.TDCValue = 0;
#endif

  spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiTDC, ciTdc.word);
  if (spiTransferError) {
    return -3;
  }

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_BitTimeConfigureData10MHz(MCP2518FD_BITTIME_SETUP bitTime,
                                               CAN_SSP_MODE sspMode)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_BitTimeConfigureData10MHz
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_BitTimeConfigureData10MHz
|———Node:parameter_list Text: (MCP2518FD_BITTIME_SETUP bitTime,
                                               CAN_SSP_MODE sspMode)
|————Node:( Text: (
|————Node:parameter_declaration Text: MCP2518FD_BITTIME_SETUP bitTime
|—————Node:type_identifier Text: MCP2518FD_BITTIME_SETUP
|—————Node:identifier Text: bitTime
|————Node:, Text: ,
|————Node:parameter_declaration Text: CAN_SSP_MODE sspMode
|—————Node:type_identifier Text: CAN_SSP_MODE
|—————Node:identifier Text: sspMode
|————Node:) Text: )
|——Node:compound_statement Text: {
  int8_t spiTransferError = 0;
  REG_CiDBTCFG ciDbtcfg;
  REG_CiTDC ciTdc;
  //    sspMode;

  ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
  ciTdc.word = 0;

  // Configure Bit time and sample point
  ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
  uint32_t tdcValue = 0;

  // Data Bit rate and SSP
  switch (bitTime) {
  case CAN_500K_1M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 6;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 7;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_2M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 2;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 3;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_4M:
  case CAN_500K_5M:
  case CAN_500K_6M7:
  case CAN_500K_8M:
  case CAN_500K_10M:
  case CAN_1000K_4M:
  case CAN_1000K_8M:
    // qDebug("Data Bitrate not feasible with this clock!");
    return -1;
    break;

  case CAN_250K_500K:
  case CAN_125K_500K:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 14;
    ciDbtcfg.bF.TSEG2 = 3;
    ciDbtcfg.bF.SJW = 3;
    // SSP
    ciTdc.bF.TDCOffset = 15;
    ciTdc.bF.TDCValue = tdcValue;
    ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
    break;
  case CAN_250K_833K:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 7;
    ciDbtcfg.bF.TSEG2 = 2;
    ciDbtcfg.bF.SJW = 2;
    // SSP
    ciTdc.bF.TDCOffset = 8;
    ciTdc.bF.TDCValue = tdcValue;
    ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
    break;
  case CAN_250K_1M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 6;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 7;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_1M5:
    // qDebug("Data Bitrate not feasible with this clock!");
    return -1;
    break;
  case CAN_250K_2M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 2;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 3;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_3M:
  case CAN_250K_4M:
    // qDebug("Data Bitrate not feasible with this clock!");
    return -1;
    break;

  default:
    return -1;
    break;
  }

  // Write Bit time registers
  spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiDBTCFG, ciDbtcfg.word);
  if (spiTransferError) {
    return -2;
  }

  // Write Transmitter Delay Compensation
#ifdef REV_A
  ciTdc.bF.TDCOffset = 0;
  ciTdc.bF.TDCValue = 0;
#endif

  spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiTDC, ciTdc.word);
  if (spiTransferError) {
    return -3;
  }

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: REG_CiDBTCFG ciDbtcfg;
|————Node:type_identifier Text: REG_CiDBTCFG
|————Node:identifier Text: ciDbtcfg
|————Node:; Text: ;
|———Node:declaration Text: REG_CiTDC ciTdc;
|————Node:type_identifier Text: REG_CiTDC
|————Node:identifier Text: ciTdc
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
|————Node:assignment_expression Text: ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4]
|—————Node:field_expression Text: ciDbtcfg.word
|——————Node:identifier Text: ciDbtcfg
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:subscript_expression Text: canControlResetValues[cREGADDR_CiDBTCFG / 4]
|——————Node:identifier Text: canControlResetValues
|——————Node:subscript_argument_list Text: [cREGADDR_CiDBTCFG / 4]
|———————Node:[ Text: [
|———————Node:binary_expression Text: cREGADDR_CiDBTCFG / 4
|————————Node:identifier Text: cREGADDR_CiDBTCFG
|————————Node:/ Text: /
|————————Node:number_literal Text: 4
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: ciTdc.word = 0;
|————Node:assignment_expression Text: ciTdc.word = 0
|—————Node:field_expression Text: ciTdc.word
|——————Node:identifier Text: ciTdc
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
|————Node:assignment_expression Text: ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO
|—————Node:field_expression Text: ciTdc.bF.TDCMode
|——————Node:field_expression Text: ciTdc.bF
|———————Node:identifier Text: ciTdc
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: TDCMode
|—————Node:= Text: =
|—————Node:identifier Text: CAN_SSP_MODE_AUTO
|————Node:; Text: ;
|———Node:declaration Text: uint32_t tdcValue = 0;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: tdcValue = 0
|—————Node:identifier Text: tdcValue
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:switch_statement Text: switch (bitTime) {
  case CAN_500K_1M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 6;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 7;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_2M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 2;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 3;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_4M:
  case CAN_500K_5M:
  case CAN_500K_6M7:
  case CAN_500K_8M:
  case CAN_500K_10M:
  case CAN_1000K_4M:
  case CAN_1000K_8M:
    // qDebug("Data Bitrate not feasible with this clock!");
    return -1;
    break;

  case CAN_250K_500K:
  case CAN_125K_500K:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 14;
    ciDbtcfg.bF.TSEG2 = 3;
    ciDbtcfg.bF.SJW = 3;
    // SSP
    ciTdc.bF.TDCOffset = 15;
    ciTdc.bF.TDCValue = tdcValue;
    ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
    break;
  case CAN_250K_833K:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 7;
    ciDbtcfg.bF.TSEG2 = 2;
    ciDbtcfg.bF.SJW = 2;
    // SSP
    ciTdc.bF.TDCOffset = 8;
    ciTdc.bF.TDCValue = tdcValue;
    ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
    break;
  case CAN_250K_1M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 6;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 7;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_1M5:
    // qDebug("Data Bitrate not feasible with this clock!");
    return -1;
    break;
  case CAN_250K_2M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 2;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 3;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_3M:
  case CAN_250K_4M:
    // qDebug("Data Bitrate not feasible with this clock!");
    return -1;
    break;

  default:
    return -1;
    break;
  }
|————Node:switch Text: switch
|————Node:condition_clause Text: (bitTime)
|—————Node:( Text: (
|—————Node:identifier Text: bitTime
|—————Node:) Text: )
|————Node:compound_statement Text: {
  case CAN_500K_1M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 6;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 7;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_2M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 2;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 3;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_500K_4M:
  case CAN_500K_5M:
  case CAN_500K_6M7:
  case CAN_500K_8M:
  case CAN_500K_10M:
  case CAN_1000K_4M:
  case CAN_1000K_8M:
    // qDebug("Data Bitrate not feasible with this clock!");
    return -1;
    break;

  case CAN_250K_500K:
  case CAN_125K_500K:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 14;
    ciDbtcfg.bF.TSEG2 = 3;
    ciDbtcfg.bF.SJW = 3;
    // SSP
    ciTdc.bF.TDCOffset = 15;
    ciTdc.bF.TDCValue = tdcValue;
    ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
    break;
  case CAN_250K_833K:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 7;
    ciDbtcfg.bF.TSEG2 = 2;
    ciDbtcfg.bF.SJW = 2;
    // SSP
    ciTdc.bF.TDCOffset = 8;
    ciTdc.bF.TDCValue = tdcValue;
    ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
    break;
  case CAN_250K_1M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 6;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 7;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_1M5:
    // qDebug("Data Bitrate not feasible with this clock!");
    return -1;
    break;
  case CAN_250K_2M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 2;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 3;
    ciTdc.bF.TDCValue = tdcValue;
    break;
  case CAN_250K_3M:
  case CAN_250K_4M:
    // qDebug("Data Bitrate not feasible with this clock!");
    return -1;
    break;

  default:
    return -1;
    break;
  }
|—————Node:{ Text: {
|—————Node:case_statement Text: case CAN_500K_1M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 6;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 7;
    ciTdc.bF.TDCValue = tdcValue;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_1M
|——————Node:: Text: :
|——————Node:expression_statement Text: ciDbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciDbtcfg.bF.BRP
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG1 = 6;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG1 = 6
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 6
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG2 = 1;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG2 = 1
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 1
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.SJW = 1;
|———————Node:assignment_expression Text: ciDbtcfg.bF.SJW = 1
|————————Node:field_expression Text: ciDbtcfg.bF.SJW
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 1
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: ciTdc.bF.TDCOffset = 7;
|———————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 7
|————————Node:field_expression Text: ciTdc.bF.TDCOffset
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCOffset
|————————Node:= Text: =
|————————Node:number_literal Text: 7
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCValue = tdcValue;
|———————Node:assignment_expression Text: ciTdc.bF.TDCValue = tdcValue
|————————Node:field_expression Text: ciTdc.bF.TDCValue
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCValue
|————————Node:= Text: =
|————————Node:identifier Text: tdcValue
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_500K_2M:
    // Data BR
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 2;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 3;
    ciTdc.bF.TDCValue = tdcValue;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_2M
|——————Node:: Text: :
|——————Node:comment
|——————Node:expression_statement Text: ciDbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciDbtcfg.bF.BRP
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG1 = 2;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG1 = 2
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 2
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG2 = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG2 = 0
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.SJW = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.SJW = 0
|————————Node:field_expression Text: ciDbtcfg.bF.SJW
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: ciTdc.bF.TDCOffset = 3;
|———————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 3
|————————Node:field_expression Text: ciTdc.bF.TDCOffset
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCOffset
|————————Node:= Text: =
|————————Node:number_literal Text: 3
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCValue = tdcValue;
|———————Node:assignment_expression Text: ciTdc.bF.TDCValue = tdcValue
|————————Node:field_expression Text: ciTdc.bF.TDCValue
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCValue
|————————Node:= Text: =
|————————Node:identifier Text: tdcValue
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_500K_4M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_4M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_500K_5M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_5M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_500K_6M7:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_6M7
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_500K_8M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_8M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_500K_10M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_500K_10M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_1000K_4M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_1000K_4M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_1000K_8M:
    // qDebug("Data Bitrate not feasible with this clock!");
    return -1;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_1000K_8M
|——————Node:: Text: :
|——————Node:comment
|——————Node:return_statement Text: return -1;
|———————Node:return Text: return
|———————Node:number_literal Text: -1
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_250K_500K:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_500K
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_125K_500K:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 14;
    ciDbtcfg.bF.TSEG2 = 3;
    ciDbtcfg.bF.SJW = 3;
    // SSP
    ciTdc.bF.TDCOffset = 15;
    ciTdc.bF.TDCValue = tdcValue;
    ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_125K_500K
|——————Node:: Text: :
|——————Node:expression_statement Text: ciDbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciDbtcfg.bF.BRP
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG1 = 14;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG1 = 14
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 14
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG2 = 3;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG2 = 3
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 3
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.SJW = 3;
|———————Node:assignment_expression Text: ciDbtcfg.bF.SJW = 3
|————————Node:field_expression Text: ciDbtcfg.bF.SJW
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 3
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: ciTdc.bF.TDCOffset = 15;
|———————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 15
|————————Node:field_expression Text: ciTdc.bF.TDCOffset
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCOffset
|————————Node:= Text: =
|————————Node:number_literal Text: 15
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCValue = tdcValue;
|———————Node:assignment_expression Text: ciTdc.bF.TDCValue = tdcValue
|————————Node:field_expression Text: ciTdc.bF.TDCValue
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCValue
|————————Node:= Text: =
|————————Node:identifier Text: tdcValue
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
|———————Node:assignment_expression Text: ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF
|————————Node:field_expression Text: ciTdc.bF.TDCMode
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCMode
|————————Node:= Text: =
|————————Node:identifier Text: CAN_SSP_MODE_OFF
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_250K_833K:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 7;
    ciDbtcfg.bF.TSEG2 = 2;
    ciDbtcfg.bF.SJW = 2;
    // SSP
    ciTdc.bF.TDCOffset = 8;
    ciTdc.bF.TDCValue = tdcValue;
    ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_833K
|——————Node:: Text: :
|——————Node:expression_statement Text: ciDbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciDbtcfg.bF.BRP
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG1 = 7;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG1 = 7
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 7
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG2 = 2;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG2 = 2
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 2
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.SJW = 2;
|———————Node:assignment_expression Text: ciDbtcfg.bF.SJW = 2
|————————Node:field_expression Text: ciDbtcfg.bF.SJW
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 2
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: ciTdc.bF.TDCOffset = 8;
|———————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 8
|————————Node:field_expression Text: ciTdc.bF.TDCOffset
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCOffset
|————————Node:= Text: =
|————————Node:number_literal Text: 8
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCValue = tdcValue;
|———————Node:assignment_expression Text: ciTdc.bF.TDCValue = tdcValue
|————————Node:field_expression Text: ciTdc.bF.TDCValue
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCValue
|————————Node:= Text: =
|————————Node:identifier Text: tdcValue
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
|———————Node:assignment_expression Text: ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF
|————————Node:field_expression Text: ciTdc.bF.TDCMode
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCMode
|————————Node:= Text: =
|————————Node:identifier Text: CAN_SSP_MODE_OFF
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_250K_1M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 6;
    ciDbtcfg.bF.TSEG2 = 1;
    ciDbtcfg.bF.SJW = 1;
    // SSP
    ciTdc.bF.TDCOffset = 7;
    ciTdc.bF.TDCValue = tdcValue;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_1M
|——————Node:: Text: :
|——————Node:expression_statement Text: ciDbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciDbtcfg.bF.BRP
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG1 = 6;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG1 = 6
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 6
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG2 = 1;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG2 = 1
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 1
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.SJW = 1;
|———————Node:assignment_expression Text: ciDbtcfg.bF.SJW = 1
|————————Node:field_expression Text: ciDbtcfg.bF.SJW
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 1
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: ciTdc.bF.TDCOffset = 7;
|———————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 7
|————————Node:field_expression Text: ciTdc.bF.TDCOffset
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCOffset
|————————Node:= Text: =
|————————Node:number_literal Text: 7
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCValue = tdcValue;
|———————Node:assignment_expression Text: ciTdc.bF.TDCValue = tdcValue
|————————Node:field_expression Text: ciTdc.bF.TDCValue
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCValue
|————————Node:= Text: =
|————————Node:identifier Text: tdcValue
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_250K_1M5:
    // qDebug("Data Bitrate not feasible with this clock!");
    return -1;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_1M5
|——————Node:: Text: :
|——————Node:comment
|——————Node:return_statement Text: return -1;
|———————Node:return Text: return
|———————Node:number_literal Text: -1
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_250K_2M:
    ciDbtcfg.bF.BRP = 0;
    ciDbtcfg.bF.TSEG1 = 2;
    ciDbtcfg.bF.TSEG2 = 0;
    ciDbtcfg.bF.SJW = 0;
    // SSP
    ciTdc.bF.TDCOffset = 3;
    ciTdc.bF.TDCValue = tdcValue;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_2M
|——————Node:: Text: :
|——————Node:expression_statement Text: ciDbtcfg.bF.BRP = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.BRP = 0
|————————Node:field_expression Text: ciDbtcfg.bF.BRP
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: BRP
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG1 = 2;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG1 = 2
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG1
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG1
|————————Node:= Text: =
|————————Node:number_literal Text: 2
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.TSEG2 = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.TSEG2 = 0
|————————Node:field_expression Text: ciDbtcfg.bF.TSEG2
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TSEG2
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciDbtcfg.bF.SJW = 0;
|———————Node:assignment_expression Text: ciDbtcfg.bF.SJW = 0
|————————Node:field_expression Text: ciDbtcfg.bF.SJW
|—————————Node:field_expression Text: ciDbtcfg.bF
|——————————Node:identifier Text: ciDbtcfg
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SJW
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:comment
|——————Node:expression_statement Text: ciTdc.bF.TDCOffset = 3;
|———————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 3
|————————Node:field_expression Text: ciTdc.bF.TDCOffset
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCOffset
|————————Node:= Text: =
|————————Node:number_literal Text: 3
|———————Node:; Text: ;
|——————Node:expression_statement Text: ciTdc.bF.TDCValue = tdcValue;
|———————Node:assignment_expression Text: ciTdc.bF.TDCValue = tdcValue
|————————Node:field_expression Text: ciTdc.bF.TDCValue
|—————————Node:field_expression Text: ciTdc.bF
|——————————Node:identifier Text: ciTdc
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: TDCValue
|————————Node:= Text: =
|————————Node:identifier Text: tdcValue
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_250K_3M:
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_3M
|——————Node:: Text: :
|—————Node:case_statement Text: case CAN_250K_4M:
    // qDebug("Data Bitrate not feasible with this clock!");
    return -1;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_250K_4M
|——————Node:: Text: :
|——————Node:comment
|——————Node:return_statement Text: return -1;
|———————Node:return Text: return
|———————Node:number_literal Text: -1
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: default:
    return -1;
    break;
|——————Node:default Text: default
|——————Node:: Text: :
|——————Node:return_statement Text: return -1;
|———————Node:return Text: return
|———————Node:number_literal Text: -1
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:expression_statement Text: spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiDBTCFG, ciDbtcfg.word);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiDBTCFG, ciDbtcfg.word)
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_WriteWord(cREGADDR_CiDBTCFG, ciDbtcfg.word)
|——————Node:identifier Text: mcp2518fd_WriteWord
|——————Node:argument_list Text: (cREGADDR_CiDBTCFG, ciDbtcfg.word)
|———————Node:( Text: (
|———————Node:identifier Text: cREGADDR_CiDBTCFG
|———————Node:, Text: ,
|———————Node:field_expression Text: ciDbtcfg.word
|————————Node:identifier Text: ciDbtcfg
|————————Node:. Text: .
|————————Node:field_identifier Text: word
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -2;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -2;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -2;
|——————Node:return Text: return
|——————Node:number_literal Text: -2
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:preproc_ifdef Text: #ifdef REV_A
  ciTdc.bF.TDCOffset = 0;
  ciTdc.bF.TDCValue = 0;
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: REV_A
|————Node:expression_statement Text: ciTdc.bF.TDCOffset = 0;
|—————Node:assignment_expression Text: ciTdc.bF.TDCOffset = 0
|——————Node:field_expression Text: ciTdc.bF.TDCOffset
|———————Node:field_expression Text: ciTdc.bF
|————————Node:identifier Text: ciTdc
|————————Node:. Text: .
|————————Node:field_identifier Text: bF
|———————Node:. Text: .
|———————Node:field_identifier Text: TDCOffset
|——————Node:= Text: =
|——————Node:number_literal Text: 0
|—————Node:; Text: ;
|————Node:expression_statement Text: ciTdc.bF.TDCValue = 0;
|—————Node:assignment_expression Text: ciTdc.bF.TDCValue = 0
|——————Node:field_expression Text: ciTdc.bF.TDCValue
|———————Node:field_expression Text: ciTdc.bF
|————————Node:identifier Text: ciTdc
|————————Node:. Text: .
|————————Node:field_identifier Text: bF
|———————Node:. Text: .
|———————Node:field_identifier Text: TDCValue
|——————Node:= Text: =
|——————Node:number_literal Text: 0
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiTDC, ciTdc.word);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_WriteWord(cREGADDR_CiTDC, ciTdc.word)
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_WriteWord(cREGADDR_CiTDC, ciTdc.word)
|——————Node:identifier Text: mcp2518fd_WriteWord
|——————Node:argument_list Text: (cREGADDR_CiTDC, ciTdc.word)
|———————Node:( Text: (
|———————Node:identifier Text: cREGADDR_CiTDC
|———————Node:, Text: ,
|———————Node:field_expression Text: ciTdc.word
|————————Node:identifier Text: ciTdc
|————————Node:. Text: .
|————————Node:field_identifier Text: word
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -3;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -3;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -3;
|——————Node:return Text: return
|——————Node:number_literal Text: -3
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_BitTimeConfigure(MCP2518FD_BITTIME_SETUP bitTime,
                                             CAN_SSP_MODE sspMode,
                                             CAN_SYSCLK_SPEED clk) {
  int8_t spiTransferError = 0;

  // Decode clk
  switch (clk) {
  case CAN_SYSCLK_40M:
    spiTransferError = mcp2518fd_BitTimeConfigureNominal40MHz(bitTime);
    if (spiTransferError)
      return spiTransferError;

    spiTransferError = mcp2518fd_BitTimeConfigureData40MHz(bitTime, sspMode);
    break;
  case CAN_SYSCLK_20M:
    spiTransferError = mcp2518fd_BitTimeConfigureNominal20MHz(bitTime);
    if (spiTransferError)
      return spiTransferError;

    spiTransferError = mcp2518fd_BitTimeConfigureData20MHz(bitTime, sspMode);
    break;
  case CAN_SYSCLK_10M:
    spiTransferError = mcp2518fd_BitTimeConfigureNominal10MHz(bitTime);
    if (spiTransferError)
      return spiTransferError;

    spiTransferError = mcp2518fd_BitTimeConfigureData10MHz(bitTime, sspMode);
    break;
  default:
    spiTransferError = -1;
    break;
  }

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_BitTimeConfigure(MCP2518FD_BITTIME_SETUP bitTime,
                                             CAN_SSP_MODE sspMode,
                                             CAN_SYSCLK_SPEED clk)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_BitTimeConfigure
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_BitTimeConfigure
|———Node:parameter_list Text: (MCP2518FD_BITTIME_SETUP bitTime,
                                             CAN_SSP_MODE sspMode,
                                             CAN_SYSCLK_SPEED clk)
|————Node:( Text: (
|————Node:parameter_declaration Text: MCP2518FD_BITTIME_SETUP bitTime
|—————Node:type_identifier Text: MCP2518FD_BITTIME_SETUP
|—————Node:identifier Text: bitTime
|————Node:, Text: ,
|————Node:parameter_declaration Text: CAN_SSP_MODE sspMode
|—————Node:type_identifier Text: CAN_SSP_MODE
|—————Node:identifier Text: sspMode
|————Node:, Text: ,
|————Node:parameter_declaration Text: CAN_SYSCLK_SPEED clk
|—————Node:type_identifier Text: CAN_SYSCLK_SPEED
|—————Node:identifier Text: clk
|————Node:) Text: )
|——Node:compound_statement Text: {
  int8_t spiTransferError = 0;

  // Decode clk
  switch (clk) {
  case CAN_SYSCLK_40M:
    spiTransferError = mcp2518fd_BitTimeConfigureNominal40MHz(bitTime);
    if (spiTransferError)
      return spiTransferError;

    spiTransferError = mcp2518fd_BitTimeConfigureData40MHz(bitTime, sspMode);
    break;
  case CAN_SYSCLK_20M:
    spiTransferError = mcp2518fd_BitTimeConfigureNominal20MHz(bitTime);
    if (spiTransferError)
      return spiTransferError;

    spiTransferError = mcp2518fd_BitTimeConfigureData20MHz(bitTime, sspMode);
    break;
  case CAN_SYSCLK_10M:
    spiTransferError = mcp2518fd_BitTimeConfigureNominal10MHz(bitTime);
    if (spiTransferError)
      return spiTransferError;

    spiTransferError = mcp2518fd_BitTimeConfigureData10MHz(bitTime, sspMode);
    break;
  default:
    spiTransferError = -1;
    break;
  }

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:switch_statement Text: switch (clk) {
  case CAN_SYSCLK_40M:
    spiTransferError = mcp2518fd_BitTimeConfigureNominal40MHz(bitTime);
    if (spiTransferError)
      return spiTransferError;

    spiTransferError = mcp2518fd_BitTimeConfigureData40MHz(bitTime, sspMode);
    break;
  case CAN_SYSCLK_20M:
    spiTransferError = mcp2518fd_BitTimeConfigureNominal20MHz(bitTime);
    if (spiTransferError)
      return spiTransferError;

    spiTransferError = mcp2518fd_BitTimeConfigureData20MHz(bitTime, sspMode);
    break;
  case CAN_SYSCLK_10M:
    spiTransferError = mcp2518fd_BitTimeConfigureNominal10MHz(bitTime);
    if (spiTransferError)
      return spiTransferError;

    spiTransferError = mcp2518fd_BitTimeConfigureData10MHz(bitTime, sspMode);
    break;
  default:
    spiTransferError = -1;
    break;
  }
|————Node:switch Text: switch
|————Node:condition_clause Text: (clk)
|—————Node:( Text: (
|—————Node:identifier Text: clk
|—————Node:) Text: )
|————Node:compound_statement Text: {
  case CAN_SYSCLK_40M:
    spiTransferError = mcp2518fd_BitTimeConfigureNominal40MHz(bitTime);
    if (spiTransferError)
      return spiTransferError;

    spiTransferError = mcp2518fd_BitTimeConfigureData40MHz(bitTime, sspMode);
    break;
  case CAN_SYSCLK_20M:
    spiTransferError = mcp2518fd_BitTimeConfigureNominal20MHz(bitTime);
    if (spiTransferError)
      return spiTransferError;

    spiTransferError = mcp2518fd_BitTimeConfigureData20MHz(bitTime, sspMode);
    break;
  case CAN_SYSCLK_10M:
    spiTransferError = mcp2518fd_BitTimeConfigureNominal10MHz(bitTime);
    if (spiTransferError)
      return spiTransferError;

    spiTransferError = mcp2518fd_BitTimeConfigureData10MHz(bitTime, sspMode);
    break;
  default:
    spiTransferError = -1;
    break;
  }
|—————Node:{ Text: {
|—————Node:case_statement Text: case CAN_SYSCLK_40M:
    spiTransferError = mcp2518fd_BitTimeConfigureNominal40MHz(bitTime);
    if (spiTransferError)
      return spiTransferError;

    spiTransferError = mcp2518fd_BitTimeConfigureData40MHz(bitTime, sspMode);
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_SYSCLK_40M
|——————Node:: Text: :
|——————Node:expression_statement Text: spiTransferError = mcp2518fd_BitTimeConfigureNominal40MHz(bitTime);
|———————Node:assignment_expression Text: spiTransferError = mcp2518fd_BitTimeConfigureNominal40MHz(bitTime)
|————————Node:identifier Text: spiTransferError
|————————Node:= Text: =
|————————Node:call_expression Text: mcp2518fd_BitTimeConfigureNominal40MHz(bitTime)
|—————————Node:identifier Text: mcp2518fd_BitTimeConfigureNominal40MHz
|—————————Node:argument_list Text: (bitTime)
|——————————Node:( Text: (
|——————————Node:identifier Text: bitTime
|——————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:if_statement Text: if (spiTransferError)
      return spiTransferError;
|———————Node:if Text: if
|———————Node:condition_clause Text: (spiTransferError)
|————————Node:( Text: (
|————————Node:identifier Text: spiTransferError
|————————Node:) Text: )
|———————Node:return_statement Text: return spiTransferError;
|————————Node:return Text: return
|————————Node:identifier Text: spiTransferError
|————————Node:; Text: ;
|——————Node:expression_statement Text: spiTransferError = mcp2518fd_BitTimeConfigureData40MHz(bitTime, sspMode);
|———————Node:assignment_expression Text: spiTransferError = mcp2518fd_BitTimeConfigureData40MHz(bitTime, sspMode)
|————————Node:identifier Text: spiTransferError
|————————Node:= Text: =
|————————Node:call_expression Text: mcp2518fd_BitTimeConfigureData40MHz(bitTime, sspMode)
|—————————Node:identifier Text: mcp2518fd_BitTimeConfigureData40MHz
|—————————Node:argument_list Text: (bitTime, sspMode)
|——————————Node:( Text: (
|——————————Node:identifier Text: bitTime
|——————————Node:, Text: ,
|——————————Node:identifier Text: sspMode
|——————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_SYSCLK_20M:
    spiTransferError = mcp2518fd_BitTimeConfigureNominal20MHz(bitTime);
    if (spiTransferError)
      return spiTransferError;

    spiTransferError = mcp2518fd_BitTimeConfigureData20MHz(bitTime, sspMode);
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_SYSCLK_20M
|——————Node:: Text: :
|——————Node:expression_statement Text: spiTransferError = mcp2518fd_BitTimeConfigureNominal20MHz(bitTime);
|———————Node:assignment_expression Text: spiTransferError = mcp2518fd_BitTimeConfigureNominal20MHz(bitTime)
|————————Node:identifier Text: spiTransferError
|————————Node:= Text: =
|————————Node:call_expression Text: mcp2518fd_BitTimeConfigureNominal20MHz(bitTime)
|—————————Node:identifier Text: mcp2518fd_BitTimeConfigureNominal20MHz
|—————————Node:argument_list Text: (bitTime)
|——————————Node:( Text: (
|——————————Node:identifier Text: bitTime
|——————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:if_statement Text: if (spiTransferError)
      return spiTransferError;
|———————Node:if Text: if
|———————Node:condition_clause Text: (spiTransferError)
|————————Node:( Text: (
|————————Node:identifier Text: spiTransferError
|————————Node:) Text: )
|———————Node:return_statement Text: return spiTransferError;
|————————Node:return Text: return
|————————Node:identifier Text: spiTransferError
|————————Node:; Text: ;
|——————Node:expression_statement Text: spiTransferError = mcp2518fd_BitTimeConfigureData20MHz(bitTime, sspMode);
|———————Node:assignment_expression Text: spiTransferError = mcp2518fd_BitTimeConfigureData20MHz(bitTime, sspMode)
|————————Node:identifier Text: spiTransferError
|————————Node:= Text: =
|————————Node:call_expression Text: mcp2518fd_BitTimeConfigureData20MHz(bitTime, sspMode)
|—————————Node:identifier Text: mcp2518fd_BitTimeConfigureData20MHz
|—————————Node:argument_list Text: (bitTime, sspMode)
|——————————Node:( Text: (
|——————————Node:identifier Text: bitTime
|——————————Node:, Text: ,
|——————————Node:identifier Text: sspMode
|——————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_SYSCLK_10M:
    spiTransferError = mcp2518fd_BitTimeConfigureNominal10MHz(bitTime);
    if (spiTransferError)
      return spiTransferError;

    spiTransferError = mcp2518fd_BitTimeConfigureData10MHz(bitTime, sspMode);
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_SYSCLK_10M
|——————Node:: Text: :
|——————Node:expression_statement Text: spiTransferError = mcp2518fd_BitTimeConfigureNominal10MHz(bitTime);
|———————Node:assignment_expression Text: spiTransferError = mcp2518fd_BitTimeConfigureNominal10MHz(bitTime)
|————————Node:identifier Text: spiTransferError
|————————Node:= Text: =
|————————Node:call_expression Text: mcp2518fd_BitTimeConfigureNominal10MHz(bitTime)
|—————————Node:identifier Text: mcp2518fd_BitTimeConfigureNominal10MHz
|—————————Node:argument_list Text: (bitTime)
|——————————Node:( Text: (
|——————————Node:identifier Text: bitTime
|——————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:if_statement Text: if (spiTransferError)
      return spiTransferError;
|———————Node:if Text: if
|———————Node:condition_clause Text: (spiTransferError)
|————————Node:( Text: (
|————————Node:identifier Text: spiTransferError
|————————Node:) Text: )
|———————Node:return_statement Text: return spiTransferError;
|————————Node:return Text: return
|————————Node:identifier Text: spiTransferError
|————————Node:; Text: ;
|——————Node:expression_statement Text: spiTransferError = mcp2518fd_BitTimeConfigureData10MHz(bitTime, sspMode);
|———————Node:assignment_expression Text: spiTransferError = mcp2518fd_BitTimeConfigureData10MHz(bitTime, sspMode)
|————————Node:identifier Text: spiTransferError
|————————Node:= Text: =
|————————Node:call_expression Text: mcp2518fd_BitTimeConfigureData10MHz(bitTime, sspMode)
|—————————Node:identifier Text: mcp2518fd_BitTimeConfigureData10MHz
|—————————Node:argument_list Text: (bitTime, sspMode)
|——————————Node:( Text: (
|——————————Node:identifier Text: bitTime
|——————————Node:, Text: ,
|——————————Node:identifier Text: sspMode
|——————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: default:
    spiTransferError = -1;
    break;
|——————Node:default Text: default
|——————Node:: Text: :
|——————Node:expression_statement Text: spiTransferError = -1;
|———————Node:assignment_expression Text: spiTransferError = -1
|————————Node:identifier Text: spiTransferError
|————————Node:= Text: =
|————————Node:number_literal Text: -1
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_GpioModeConfigure(GPIO_PIN_MODE gpio0,
                                              GPIO_PIN_MODE gpio1) {
  int8_t spiTransferError = 0;
  uint16_t a = 0;

  // Read
  a = cREGADDR_IOCON + 3;
  REG_IOCON iocon;
  iocon.word = 0;

  spiTransferError = mcp2518fd_ReadByte(a, &iocon.byte[3]);
  if (spiTransferError) {
    return -1;
  }

  // Modify
  iocon.bF.PinMode0 = gpio0;
  iocon.bF.PinMode1 = gpio1;

  // Write
  spiTransferError = mcp2518fd_WriteByte(a, iocon.byte[3]);
  if (spiTransferError) {
    return -2;
  }

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_GpioModeConfigure(GPIO_PIN_MODE gpio0,
                                              GPIO_PIN_MODE gpio1)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_GpioModeConfigure
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_GpioModeConfigure
|———Node:parameter_list Text: (GPIO_PIN_MODE gpio0,
                                              GPIO_PIN_MODE gpio1)
|————Node:( Text: (
|————Node:parameter_declaration Text: GPIO_PIN_MODE gpio0
|—————Node:type_identifier Text: GPIO_PIN_MODE
|—————Node:identifier Text: gpio0
|————Node:, Text: ,
|————Node:parameter_declaration Text: GPIO_PIN_MODE gpio1
|—————Node:type_identifier Text: GPIO_PIN_MODE
|—————Node:identifier Text: gpio1
|————Node:) Text: )
|——Node:compound_statement Text: {
  int8_t spiTransferError = 0;
  uint16_t a = 0;

  // Read
  a = cREGADDR_IOCON + 3;
  REG_IOCON iocon;
  iocon.word = 0;

  spiTransferError = mcp2518fd_ReadByte(a, &iocon.byte[3]);
  if (spiTransferError) {
    return -1;
  }

  // Modify
  iocon.bF.PinMode0 = gpio0;
  iocon.bF.PinMode1 = gpio1;

  // Write
  spiTransferError = mcp2518fd_WriteByte(a, iocon.byte[3]);
  if (spiTransferError) {
    return -2;
  }

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint16_t a = 0;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: a = 0
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: a = cREGADDR_IOCON + 3;
|————Node:assignment_expression Text: a = cREGADDR_IOCON + 3
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:binary_expression Text: cREGADDR_IOCON + 3
|——————Node:identifier Text: cREGADDR_IOCON
|——————Node:+ Text: +
|——————Node:number_literal Text: 3
|————Node:; Text: ;
|———Node:declaration Text: REG_IOCON iocon;
|————Node:type_identifier Text: REG_IOCON
|————Node:identifier Text: iocon
|————Node:; Text: ;
|———Node:expression_statement Text: iocon.word = 0;
|————Node:assignment_expression Text: iocon.word = 0
|—————Node:field_expression Text: iocon.word
|——————Node:identifier Text: iocon
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransferError = mcp2518fd_ReadByte(a, &iocon.byte[3]);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_ReadByte(a, &iocon.byte[3])
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_ReadByte(a, &iocon.byte[3])
|——————Node:identifier Text: mcp2518fd_ReadByte
|——————Node:argument_list Text: (a, &iocon.byte[3])
|———————Node:( Text: (
|———————Node:identifier Text: a
|———————Node:, Text: ,
|———————Node:pointer_expression Text: &iocon.byte[3]
|————————Node:& Text: &
|————————Node:subscript_expression Text: iocon.byte[3]
|—————————Node:field_expression Text: iocon.byte
|——————————Node:identifier Text: iocon
|——————————Node:. Text: .
|——————————Node:field_identifier Text: byte
|—————————Node:subscript_argument_list Text: [3]
|——————————Node:[ Text: [
|——————————Node:number_literal Text: 3
|——————————Node:] Text: ]
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -1;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -1;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -1;
|——————Node:return Text: return
|——————Node:number_literal Text: -1
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:expression_statement Text: iocon.bF.PinMode0 = gpio0;
|————Node:assignment_expression Text: iocon.bF.PinMode0 = gpio0
|—————Node:field_expression Text: iocon.bF.PinMode0
|——————Node:field_expression Text: iocon.bF
|———————Node:identifier Text: iocon
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: PinMode0
|—————Node:= Text: =
|—————Node:identifier Text: gpio0
|————Node:; Text: ;
|———Node:expression_statement Text: iocon.bF.PinMode1 = gpio1;
|————Node:assignment_expression Text: iocon.bF.PinMode1 = gpio1
|—————Node:field_expression Text: iocon.bF.PinMode1
|——————Node:field_expression Text: iocon.bF
|———————Node:identifier Text: iocon
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: PinMode1
|—————Node:= Text: =
|—————Node:identifier Text: gpio1
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: spiTransferError = mcp2518fd_WriteByte(a, iocon.byte[3]);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_WriteByte(a, iocon.byte[3])
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_WriteByte(a, iocon.byte[3])
|——————Node:identifier Text: mcp2518fd_WriteByte
|——————Node:argument_list Text: (a, iocon.byte[3])
|———————Node:( Text: (
|———————Node:identifier Text: a
|———————Node:, Text: ,
|———————Node:subscript_expression Text: iocon.byte[3]
|————————Node:field_expression Text: iocon.byte
|—————————Node:identifier Text: iocon
|—————————Node:. Text: .
|—————————Node:field_identifier Text: byte
|————————Node:subscript_argument_list Text: [3]
|—————————Node:[ Text: [
|—————————Node:number_literal Text: 3
|—————————Node:] Text: ]
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -2;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -2;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -2;
|——————Node:return Text: return
|——————Node:number_literal Text: -2
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t
mcp2518fd::mcp2518fd_TransmitChannelEventEnable(CAN_FIFO_CHANNEL channel,
                                                CAN_TX_FIFO_EVENT flags) {
  int8_t spiTransferError = 0;
  uint16_t a = 0;

  // Read Interrupt Enables
  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
  REG_CiFIFOCON ciFifoCon;
  ciFifoCon.word = 0;

  spiTransferError = mcp2518fd_ReadByte(a, &ciFifoCon.byte[0]);
  if (spiTransferError) {
    return -1;
  }

  // Modify
  ciFifoCon.byte[0] |= (flags & CAN_TX_FIFO_ALL_EVENTS);

  // Write
  spiTransferError = mcp2518fd_WriteByte(a, ciFifoCon.byte[0]);
  if (spiTransferError) {
    return -2;
  }

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_TransmitChannelEventEnable(CAN_FIFO_CHANNEL channel,
                                                CAN_TX_FIFO_EVENT flags)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_TransmitChannelEventEnable
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_TransmitChannelEventEnable
|———Node:parameter_list Text: (CAN_FIFO_CHANNEL channel,
                                                CAN_TX_FIFO_EVENT flags)
|————Node:( Text: (
|————Node:parameter_declaration Text: CAN_FIFO_CHANNEL channel
|—————Node:type_identifier Text: CAN_FIFO_CHANNEL
|—————Node:identifier Text: channel
|————Node:, Text: ,
|————Node:parameter_declaration Text: CAN_TX_FIFO_EVENT flags
|—————Node:type_identifier Text: CAN_TX_FIFO_EVENT
|—————Node:identifier Text: flags
|————Node:) Text: )
|——Node:compound_statement Text: {
  int8_t spiTransferError = 0;
  uint16_t a = 0;

  // Read Interrupt Enables
  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
  REG_CiFIFOCON ciFifoCon;
  ciFifoCon.word = 0;

  spiTransferError = mcp2518fd_ReadByte(a, &ciFifoCon.byte[0]);
  if (spiTransferError) {
    return -1;
  }

  // Modify
  ciFifoCon.byte[0] |= (flags & CAN_TX_FIFO_ALL_EVENTS);

  // Write
  spiTransferError = mcp2518fd_WriteByte(a, ciFifoCon.byte[0]);
  if (spiTransferError) {
    return -2;
  }

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint16_t a = 0;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: a = 0
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
|————Node:assignment_expression Text: a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET)
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:binary_expression Text: cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET)
|——————Node:identifier Text: cREGADDR_CiFIFOCON
|——————Node:+ Text: +
|——————Node:parenthesized_expression Text: (channel * CiFIFO_OFFSET)
|———————Node:( Text: (
|———————Node:binary_expression Text: channel * CiFIFO_OFFSET
|————————Node:identifier Text: channel
|————————Node:* Text: *
|————————Node:identifier Text: CiFIFO_OFFSET
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: REG_CiFIFOCON ciFifoCon;
|————Node:type_identifier Text: REG_CiFIFOCON
|————Node:identifier Text: ciFifoCon
|————Node:; Text: ;
|———Node:expression_statement Text: ciFifoCon.word = 0;
|————Node:assignment_expression Text: ciFifoCon.word = 0
|—————Node:field_expression Text: ciFifoCon.word
|——————Node:identifier Text: ciFifoCon
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransferError = mcp2518fd_ReadByte(a, &ciFifoCon.byte[0]);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_ReadByte(a, &ciFifoCon.byte[0])
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_ReadByte(a, &ciFifoCon.byte[0])
|——————Node:identifier Text: mcp2518fd_ReadByte
|——————Node:argument_list Text: (a, &ciFifoCon.byte[0])
|———————Node:( Text: (
|———————Node:identifier Text: a
|———————Node:, Text: ,
|———————Node:pointer_expression Text: &ciFifoCon.byte[0]
|————————Node:& Text: &
|————————Node:subscript_expression Text: ciFifoCon.byte[0]
|—————————Node:field_expression Text: ciFifoCon.byte
|——————————Node:identifier Text: ciFifoCon
|——————————Node:. Text: .
|——————————Node:field_identifier Text: byte
|—————————Node:subscript_argument_list Text: [0]
|——————————Node:[ Text: [
|——————————Node:number_literal Text: 0
|——————————Node:] Text: ]
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -1;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -1;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -1;
|——————Node:return Text: return
|——————Node:number_literal Text: -1
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:expression_statement Text: ciFifoCon.byte[0] |= (flags & CAN_TX_FIFO_ALL_EVENTS);
|————Node:assignment_expression Text: ciFifoCon.byte[0] |= (flags & CAN_TX_FIFO_ALL_EVENTS)
|—————Node:subscript_expression Text: ciFifoCon.byte[0]
|——————Node:field_expression Text: ciFifoCon.byte
|———————Node:identifier Text: ciFifoCon
|———————Node:. Text: .
|———————Node:field_identifier Text: byte
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|—————Node:|= Text: |=
|—————Node:parenthesized_expression Text: (flags & CAN_TX_FIFO_ALL_EVENTS)
|——————Node:( Text: (
|——————Node:binary_expression Text: flags & CAN_TX_FIFO_ALL_EVENTS
|———————Node:identifier Text: flags
|———————Node:& Text: &
|———————Node:identifier Text: CAN_TX_FIFO_ALL_EVENTS
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: spiTransferError = mcp2518fd_WriteByte(a, ciFifoCon.byte[0]);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_WriteByte(a, ciFifoCon.byte[0])
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_WriteByte(a, ciFifoCon.byte[0])
|——————Node:identifier Text: mcp2518fd_WriteByte
|——————Node:argument_list Text: (a, ciFifoCon.byte[0])
|———————Node:( Text: (
|———————Node:identifier Text: a
|———————Node:, Text: ,
|———————Node:subscript_expression Text: ciFifoCon.byte[0]
|————————Node:field_expression Text: ciFifoCon.byte
|—————————Node:identifier Text: ciFifoCon
|—————————Node:. Text: .
|—————————Node:field_identifier Text: byte
|————————Node:subscript_argument_list Text: [0]
|—————————Node:[ Text: [
|—————————Node:number_literal Text: 0
|—————————Node:] Text: ]
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -2;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -2;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -2;
|——————Node:return Text: return
|——————Node:number_literal Text: -2
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_ReceiveChannelEventEnable(CAN_FIFO_CHANNEL channel,
                                                      CAN_RX_FIFO_EVENT flags) {
  int8_t spiTransferError = 0;
  uint16_t a = 0;

  if (channel == CAN_TXQUEUE_CH0)
    return -100;

  // Read Interrupt Enables
  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
  REG_CiFIFOCON ciFifoCon;
  ciFifoCon.word = 0;

  spiTransferError = mcp2518fd_ReadByte(a, &ciFifoCon.byte[0]);
  if (spiTransferError) {
    return -1;
  }

  // Modify
  ciFifoCon.byte[0] |= (flags & CAN_RX_FIFO_ALL_EVENTS);

  // Write
  spiTransferError = mcp2518fd_WriteByte(a, ciFifoCon.byte[0]);
  if (spiTransferError) {
    return -2;
  }

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_ReceiveChannelEventEnable(CAN_FIFO_CHANNEL channel,
                                                      CAN_RX_FIFO_EVENT flags)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_ReceiveChannelEventEnable
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_ReceiveChannelEventEnable
|———Node:parameter_list Text: (CAN_FIFO_CHANNEL channel,
                                                      CAN_RX_FIFO_EVENT flags)
|————Node:( Text: (
|————Node:parameter_declaration Text: CAN_FIFO_CHANNEL channel
|—————Node:type_identifier Text: CAN_FIFO_CHANNEL
|—————Node:identifier Text: channel
|————Node:, Text: ,
|————Node:parameter_declaration Text: CAN_RX_FIFO_EVENT flags
|—————Node:type_identifier Text: CAN_RX_FIFO_EVENT
|—————Node:identifier Text: flags
|————Node:) Text: )
|——Node:compound_statement Text: {
  int8_t spiTransferError = 0;
  uint16_t a = 0;

  if (channel == CAN_TXQUEUE_CH0)
    return -100;

  // Read Interrupt Enables
  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
  REG_CiFIFOCON ciFifoCon;
  ciFifoCon.word = 0;

  spiTransferError = mcp2518fd_ReadByte(a, &ciFifoCon.byte[0]);
  if (spiTransferError) {
    return -1;
  }

  // Modify
  ciFifoCon.byte[0] |= (flags & CAN_RX_FIFO_ALL_EVENTS);

  // Write
  spiTransferError = mcp2518fd_WriteByte(a, ciFifoCon.byte[0]);
  if (spiTransferError) {
    return -2;
  }

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint16_t a = 0;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: a = 0
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:if_statement Text: if (channel == CAN_TXQUEUE_CH0)
    return -100;
|————Node:if Text: if
|————Node:condition_clause Text: (channel == CAN_TXQUEUE_CH0)
|—————Node:( Text: (
|—————Node:binary_expression Text: channel == CAN_TXQUEUE_CH0
|——————Node:identifier Text: channel
|——————Node:== Text: ==
|——————Node:identifier Text: CAN_TXQUEUE_CH0
|—————Node:) Text: )
|————Node:return_statement Text: return -100;
|—————Node:return Text: return
|—————Node:number_literal Text: -100
|—————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
|————Node:assignment_expression Text: a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET)
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:binary_expression Text: cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET)
|——————Node:identifier Text: cREGADDR_CiFIFOCON
|——————Node:+ Text: +
|——————Node:parenthesized_expression Text: (channel * CiFIFO_OFFSET)
|———————Node:( Text: (
|———————Node:binary_expression Text: channel * CiFIFO_OFFSET
|————————Node:identifier Text: channel
|————————Node:* Text: *
|————————Node:identifier Text: CiFIFO_OFFSET
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: REG_CiFIFOCON ciFifoCon;
|————Node:type_identifier Text: REG_CiFIFOCON
|————Node:identifier Text: ciFifoCon
|————Node:; Text: ;
|———Node:expression_statement Text: ciFifoCon.word = 0;
|————Node:assignment_expression Text: ciFifoCon.word = 0
|—————Node:field_expression Text: ciFifoCon.word
|——————Node:identifier Text: ciFifoCon
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransferError = mcp2518fd_ReadByte(a, &ciFifoCon.byte[0]);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_ReadByte(a, &ciFifoCon.byte[0])
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_ReadByte(a, &ciFifoCon.byte[0])
|——————Node:identifier Text: mcp2518fd_ReadByte
|——————Node:argument_list Text: (a, &ciFifoCon.byte[0])
|———————Node:( Text: (
|———————Node:identifier Text: a
|———————Node:, Text: ,
|———————Node:pointer_expression Text: &ciFifoCon.byte[0]
|————————Node:& Text: &
|————————Node:subscript_expression Text: ciFifoCon.byte[0]
|—————————Node:field_expression Text: ciFifoCon.byte
|——————————Node:identifier Text: ciFifoCon
|——————————Node:. Text: .
|——————————Node:field_identifier Text: byte
|—————————Node:subscript_argument_list Text: [0]
|——————————Node:[ Text: [
|——————————Node:number_literal Text: 0
|——————————Node:] Text: ]
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -1;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -1;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -1;
|——————Node:return Text: return
|——————Node:number_literal Text: -1
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:expression_statement Text: ciFifoCon.byte[0] |= (flags & CAN_RX_FIFO_ALL_EVENTS);
|————Node:assignment_expression Text: ciFifoCon.byte[0] |= (flags & CAN_RX_FIFO_ALL_EVENTS)
|—————Node:subscript_expression Text: ciFifoCon.byte[0]
|——————Node:field_expression Text: ciFifoCon.byte
|———————Node:identifier Text: ciFifoCon
|———————Node:. Text: .
|———————Node:field_identifier Text: byte
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|—————Node:|= Text: |=
|—————Node:parenthesized_expression Text: (flags & CAN_RX_FIFO_ALL_EVENTS)
|——————Node:( Text: (
|——————Node:binary_expression Text: flags & CAN_RX_FIFO_ALL_EVENTS
|———————Node:identifier Text: flags
|———————Node:& Text: &
|———————Node:identifier Text: CAN_RX_FIFO_ALL_EVENTS
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: spiTransferError = mcp2518fd_WriteByte(a, ciFifoCon.byte[0]);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_WriteByte(a, ciFifoCon.byte[0])
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_WriteByte(a, ciFifoCon.byte[0])
|——————Node:identifier Text: mcp2518fd_WriteByte
|——————Node:argument_list Text: (a, ciFifoCon.byte[0])
|———————Node:( Text: (
|———————Node:identifier Text: a
|———————Node:, Text: ,
|———————Node:subscript_expression Text: ciFifoCon.byte[0]
|————————Node:field_expression Text: ciFifoCon.byte
|—————————Node:identifier Text: ciFifoCon
|—————————Node:. Text: .
|—————————Node:field_identifier Text: byte
|————————Node:subscript_argument_list Text: [0]
|—————————Node:[ Text: [
|—————————Node:number_literal Text: 0
|—————————Node:] Text: ]
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -2;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -2;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -2;
|——————Node:return Text: return
|——————Node:number_literal Text: -2
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_ModuleEventEnable(CAN_MODULE_EVENT flags) {
  int8_t spiTransferError = 0;
  uint16_t a = 0;

  // Read Interrupt Enables
  a = cREGADDR_CiINTENABLE;
  REG_CiINTENABLE intEnables;
  intEnables.word = 0;

  spiTransferError = mcp2518fd_ReadHalfWord(a, &intEnables.word);
  if (spiTransferError) {
    return -1;
  }

  // Modify
  intEnables.word |= (flags & CAN_ALL_EVENTS);

  // Write
  spiTransferError = mcp2518fd_WriteHalfWord(a, intEnables.word);
  if (spiTransferError) {
    return -2;
  }

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_ModuleEventEnable(CAN_MODULE_EVENT flags)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_ModuleEventEnable
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_ModuleEventEnable
|———Node:parameter_list Text: (CAN_MODULE_EVENT flags)
|————Node:( Text: (
|————Node:parameter_declaration Text: CAN_MODULE_EVENT flags
|—————Node:type_identifier Text: CAN_MODULE_EVENT
|—————Node:identifier Text: flags
|————Node:) Text: )
|——Node:compound_statement Text: {
  int8_t spiTransferError = 0;
  uint16_t a = 0;

  // Read Interrupt Enables
  a = cREGADDR_CiINTENABLE;
  REG_CiINTENABLE intEnables;
  intEnables.word = 0;

  spiTransferError = mcp2518fd_ReadHalfWord(a, &intEnables.word);
  if (spiTransferError) {
    return -1;
  }

  // Modify
  intEnables.word |= (flags & CAN_ALL_EVENTS);

  // Write
  spiTransferError = mcp2518fd_WriteHalfWord(a, intEnables.word);
  if (spiTransferError) {
    return -2;
  }

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint16_t a = 0;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: a = 0
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: a = cREGADDR_CiINTENABLE;
|————Node:assignment_expression Text: a = cREGADDR_CiINTENABLE
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:identifier Text: cREGADDR_CiINTENABLE
|————Node:; Text: ;
|———Node:declaration Text: REG_CiINTENABLE intEnables;
|————Node:type_identifier Text: REG_CiINTENABLE
|————Node:identifier Text: intEnables
|————Node:; Text: ;
|———Node:expression_statement Text: intEnables.word = 0;
|————Node:assignment_expression Text: intEnables.word = 0
|—————Node:field_expression Text: intEnables.word
|——————Node:identifier Text: intEnables
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransferError = mcp2518fd_ReadHalfWord(a, &intEnables.word);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_ReadHalfWord(a, &intEnables.word)
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_ReadHalfWord(a, &intEnables.word)
|——————Node:identifier Text: mcp2518fd_ReadHalfWord
|——————Node:argument_list Text: (a, &intEnables.word)
|———————Node:( Text: (
|———————Node:identifier Text: a
|———————Node:, Text: ,
|———————Node:pointer_expression Text: &intEnables.word
|————————Node:& Text: &
|————————Node:field_expression Text: intEnables.word
|—————————Node:identifier Text: intEnables
|—————————Node:. Text: .
|—————————Node:field_identifier Text: word
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -1;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -1;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -1;
|——————Node:return Text: return
|——————Node:number_literal Text: -1
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:expression_statement Text: intEnables.word |= (flags & CAN_ALL_EVENTS);
|————Node:assignment_expression Text: intEnables.word |= (flags & CAN_ALL_EVENTS)
|—————Node:field_expression Text: intEnables.word
|——————Node:identifier Text: intEnables
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:|= Text: |=
|—————Node:parenthesized_expression Text: (flags & CAN_ALL_EVENTS)
|——————Node:( Text: (
|——————Node:binary_expression Text: flags & CAN_ALL_EVENTS
|———————Node:identifier Text: flags
|———————Node:& Text: &
|———————Node:identifier Text: CAN_ALL_EVENTS
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: spiTransferError = mcp2518fd_WriteHalfWord(a, intEnables.word);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_WriteHalfWord(a, intEnables.word)
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_WriteHalfWord(a, intEnables.word)
|——————Node:identifier Text: mcp2518fd_WriteHalfWord
|——————Node:argument_list Text: (a, intEnables.word)
|———————Node:( Text: (
|———————Node:identifier Text: a
|———————Node:, Text: ,
|———————Node:field_expression Text: intEnables.word
|————————Node:identifier Text: intEnables
|————————Node:. Text: .
|————————Node:field_identifier Text: word
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -2;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -2;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -2;
|——————Node:return Text: return
|——————Node:number_literal Text: -2
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_OperationModeSelect(CAN_OPERATION_MODE opMode) {
  uint8_t d = 0;
  int8_t spiTransferError = 0;

  // Read
  spiTransferError = mcp2518fd_ReadByte(cREGADDR_CiCON + 3, &d);
  if (spiTransferError) {
    return -1;
  }

  // Modify
  d &= ~0x07;
  d |= opMode;

  // Write
  spiTransferError = mcp2518fd_WriteByte(cREGADDR_CiCON + 3, d);
  if (spiTransferError) {
    return -2;
  }

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_OperationModeSelect(CAN_OPERATION_MODE opMode)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_OperationModeSelect
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_OperationModeSelect
|———Node:parameter_list Text: (CAN_OPERATION_MODE opMode)
|————Node:( Text: (
|————Node:parameter_declaration Text: CAN_OPERATION_MODE opMode
|—————Node:type_identifier Text: CAN_OPERATION_MODE
|—————Node:identifier Text: opMode
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint8_t d = 0;
  int8_t spiTransferError = 0;

  // Read
  spiTransferError = mcp2518fd_ReadByte(cREGADDR_CiCON + 3, &d);
  if (spiTransferError) {
    return -1;
  }

  // Modify
  d &= ~0x07;
  d |= opMode;

  // Write
  spiTransferError = mcp2518fd_WriteByte(cREGADDR_CiCON + 3, d);
  if (spiTransferError) {
    return -2;
  }

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: uint8_t d = 0;
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: d = 0
|—————Node:identifier Text: d
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: spiTransferError = mcp2518fd_ReadByte(cREGADDR_CiCON + 3, &d);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_ReadByte(cREGADDR_CiCON + 3, &d)
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_ReadByte(cREGADDR_CiCON + 3, &d)
|——————Node:identifier Text: mcp2518fd_ReadByte
|——————Node:argument_list Text: (cREGADDR_CiCON + 3, &d)
|———————Node:( Text: (
|———————Node:binary_expression Text: cREGADDR_CiCON + 3
|————————Node:identifier Text: cREGADDR_CiCON
|————————Node:+ Text: +
|————————Node:number_literal Text: 3
|———————Node:, Text: ,
|———————Node:pointer_expression Text: &d
|————————Node:& Text: &
|————————Node:identifier Text: d
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -1;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -1;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -1;
|——————Node:return Text: return
|——————Node:number_literal Text: -1
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:expression_statement Text: d &= ~0x07;
|————Node:assignment_expression Text: d &= ~0x07
|—————Node:identifier Text: d
|—————Node:&= Text: &=
|—————Node:unary_expression Text: ~0x07
|——————Node:~ Text: ~
|——————Node:number_literal Text: 0x07
|————Node:; Text: ;
|———Node:expression_statement Text: d |= opMode;
|————Node:assignment_expression Text: d |= opMode
|—————Node:identifier Text: d
|—————Node:|= Text: |=
|—————Node:identifier Text: opMode
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: spiTransferError = mcp2518fd_WriteByte(cREGADDR_CiCON + 3, d);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_WriteByte(cREGADDR_CiCON + 3, d)
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_WriteByte(cREGADDR_CiCON + 3, d)
|——————Node:identifier Text: mcp2518fd_WriteByte
|——————Node:argument_list Text: (cREGADDR_CiCON + 3, d)
|———————Node:( Text: (
|———————Node:binary_expression Text: cREGADDR_CiCON + 3
|————————Node:identifier Text: cREGADDR_CiCON
|————————Node:+ Text: +
|————————Node:number_literal Text: 3
|———————Node:, Text: ,
|———————Node:identifier Text: d
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -2;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -2;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -2;
|——————Node:return Text: return
|——————Node:number_literal Text: -2
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: CAN_OPERATION_MODE mcp2518fd::mcp2518fd_OperationModeGet() {
  uint8_t d = 0;
  CAN_OPERATION_MODE mode = CAN_INVALID_MODE;
  int8_t spiTransferError = 0;

  // Read Opmode
  spiTransferError = mcp2518fd_ReadByte(cREGADDR_CiCON + 2, &d);
  if (spiTransferError) {
    return CAN_INVALID_MODE;
  }

  // Get Opmode bits
  d = (d >> 5) & 0x7;

  // Decode Opmode
  switch (d) {
  case CAN_NORMAL_MODE:
    mode = CAN_NORMAL_MODE;
    break;
  case CAN_SLEEP_MODE:
    mode = CAN_SLEEP_MODE;
    break;
  case CAN_INTERNAL_LOOPBACK_MODE:
    mode = CAN_INTERNAL_LOOPBACK_MODE;
    break;
  case CAN_EXTERNAL_LOOPBACK_MODE:
    mode = CAN_EXTERNAL_LOOPBACK_MODE;
    break;
  case CAN_LISTEN_ONLY_MODE:
    mode = CAN_LISTEN_ONLY_MODE;
    break;
  case CAN_CONFIGURATION_MODE:
    mode = CAN_CONFIGURATION_MODE;
    break;
  case CAN_CLASSIC_MODE:
    mode = CAN_CLASSIC_MODE;
    break;
  case CAN_RESTRICTED_MODE:
    mode = CAN_RESTRICTED_MODE;
    break;
  default:
    mode = CAN_INVALID_MODE;
    break;
  }

  return mode;
}
|——Node:type_identifier Text: CAN_OPERATION_MODE
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_OperationModeGet()
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_OperationModeGet
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_OperationModeGet
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint8_t d = 0;
  CAN_OPERATION_MODE mode = CAN_INVALID_MODE;
  int8_t spiTransferError = 0;

  // Read Opmode
  spiTransferError = mcp2518fd_ReadByte(cREGADDR_CiCON + 2, &d);
  if (spiTransferError) {
    return CAN_INVALID_MODE;
  }

  // Get Opmode bits
  d = (d >> 5) & 0x7;

  // Decode Opmode
  switch (d) {
  case CAN_NORMAL_MODE:
    mode = CAN_NORMAL_MODE;
    break;
  case CAN_SLEEP_MODE:
    mode = CAN_SLEEP_MODE;
    break;
  case CAN_INTERNAL_LOOPBACK_MODE:
    mode = CAN_INTERNAL_LOOPBACK_MODE;
    break;
  case CAN_EXTERNAL_LOOPBACK_MODE:
    mode = CAN_EXTERNAL_LOOPBACK_MODE;
    break;
  case CAN_LISTEN_ONLY_MODE:
    mode = CAN_LISTEN_ONLY_MODE;
    break;
  case CAN_CONFIGURATION_MODE:
    mode = CAN_CONFIGURATION_MODE;
    break;
  case CAN_CLASSIC_MODE:
    mode = CAN_CLASSIC_MODE;
    break;
  case CAN_RESTRICTED_MODE:
    mode = CAN_RESTRICTED_MODE;
    break;
  default:
    mode = CAN_INVALID_MODE;
    break;
  }

  return mode;
}
|———Node:{ Text: {
|———Node:declaration Text: uint8_t d = 0;
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: d = 0
|—————Node:identifier Text: d
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: CAN_OPERATION_MODE mode = CAN_INVALID_MODE;
|————Node:type_identifier Text: CAN_OPERATION_MODE
|————Node:init_declarator Text: mode = CAN_INVALID_MODE
|—————Node:identifier Text: mode
|—————Node:= Text: =
|—————Node:identifier Text: CAN_INVALID_MODE
|————Node:; Text: ;
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: spiTransferError = mcp2518fd_ReadByte(cREGADDR_CiCON + 2, &d);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_ReadByte(cREGADDR_CiCON + 2, &d)
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_ReadByte(cREGADDR_CiCON + 2, &d)
|——————Node:identifier Text: mcp2518fd_ReadByte
|——————Node:argument_list Text: (cREGADDR_CiCON + 2, &d)
|———————Node:( Text: (
|———————Node:binary_expression Text: cREGADDR_CiCON + 2
|————————Node:identifier Text: cREGADDR_CiCON
|————————Node:+ Text: +
|————————Node:number_literal Text: 2
|———————Node:, Text: ,
|———————Node:pointer_expression Text: &d
|————————Node:& Text: &
|————————Node:identifier Text: d
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return CAN_INVALID_MODE;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return CAN_INVALID_MODE;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return CAN_INVALID_MODE;
|——————Node:return Text: return
|——————Node:identifier Text: CAN_INVALID_MODE
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:expression_statement Text: d = (d >> 5) & 0x7;
|————Node:assignment_expression Text: d = (d >> 5) & 0x7
|—————Node:identifier Text: d
|—————Node:= Text: =
|—————Node:binary_expression Text: (d >> 5) & 0x7
|——————Node:parenthesized_expression Text: (d >> 5)
|———————Node:( Text: (
|———————Node:binary_expression Text: d >> 5
|————————Node:identifier Text: d
|————————Node:>> Text: >>
|————————Node:number_literal Text: 5
|———————Node:) Text: )
|——————Node:& Text: &
|——————Node:number_literal Text: 0x7
|————Node:; Text: ;
|———Node:comment
|———Node:switch_statement Text: switch (d) {
  case CAN_NORMAL_MODE:
    mode = CAN_NORMAL_MODE;
    break;
  case CAN_SLEEP_MODE:
    mode = CAN_SLEEP_MODE;
    break;
  case CAN_INTERNAL_LOOPBACK_MODE:
    mode = CAN_INTERNAL_LOOPBACK_MODE;
    break;
  case CAN_EXTERNAL_LOOPBACK_MODE:
    mode = CAN_EXTERNAL_LOOPBACK_MODE;
    break;
  case CAN_LISTEN_ONLY_MODE:
    mode = CAN_LISTEN_ONLY_MODE;
    break;
  case CAN_CONFIGURATION_MODE:
    mode = CAN_CONFIGURATION_MODE;
    break;
  case CAN_CLASSIC_MODE:
    mode = CAN_CLASSIC_MODE;
    break;
  case CAN_RESTRICTED_MODE:
    mode = CAN_RESTRICTED_MODE;
    break;
  default:
    mode = CAN_INVALID_MODE;
    break;
  }
|————Node:switch Text: switch
|————Node:condition_clause Text: (d)
|—————Node:( Text: (
|—————Node:identifier Text: d
|—————Node:) Text: )
|————Node:compound_statement Text: {
  case CAN_NORMAL_MODE:
    mode = CAN_NORMAL_MODE;
    break;
  case CAN_SLEEP_MODE:
    mode = CAN_SLEEP_MODE;
    break;
  case CAN_INTERNAL_LOOPBACK_MODE:
    mode = CAN_INTERNAL_LOOPBACK_MODE;
    break;
  case CAN_EXTERNAL_LOOPBACK_MODE:
    mode = CAN_EXTERNAL_LOOPBACK_MODE;
    break;
  case CAN_LISTEN_ONLY_MODE:
    mode = CAN_LISTEN_ONLY_MODE;
    break;
  case CAN_CONFIGURATION_MODE:
    mode = CAN_CONFIGURATION_MODE;
    break;
  case CAN_CLASSIC_MODE:
    mode = CAN_CLASSIC_MODE;
    break;
  case CAN_RESTRICTED_MODE:
    mode = CAN_RESTRICTED_MODE;
    break;
  default:
    mode = CAN_INVALID_MODE;
    break;
  }
|—————Node:{ Text: {
|—————Node:case_statement Text: case CAN_NORMAL_MODE:
    mode = CAN_NORMAL_MODE;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_NORMAL_MODE
|——————Node:: Text: :
|——————Node:expression_statement Text: mode = CAN_NORMAL_MODE;
|———————Node:assignment_expression Text: mode = CAN_NORMAL_MODE
|————————Node:identifier Text: mode
|————————Node:= Text: =
|————————Node:identifier Text: CAN_NORMAL_MODE
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_SLEEP_MODE:
    mode = CAN_SLEEP_MODE;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_SLEEP_MODE
|——————Node:: Text: :
|——————Node:expression_statement Text: mode = CAN_SLEEP_MODE;
|———————Node:assignment_expression Text: mode = CAN_SLEEP_MODE
|————————Node:identifier Text: mode
|————————Node:= Text: =
|————————Node:identifier Text: CAN_SLEEP_MODE
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_INTERNAL_LOOPBACK_MODE:
    mode = CAN_INTERNAL_LOOPBACK_MODE;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_INTERNAL_LOOPBACK_MODE
|——————Node:: Text: :
|——————Node:expression_statement Text: mode = CAN_INTERNAL_LOOPBACK_MODE;
|———————Node:assignment_expression Text: mode = CAN_INTERNAL_LOOPBACK_MODE
|————————Node:identifier Text: mode
|————————Node:= Text: =
|————————Node:identifier Text: CAN_INTERNAL_LOOPBACK_MODE
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_EXTERNAL_LOOPBACK_MODE:
    mode = CAN_EXTERNAL_LOOPBACK_MODE;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_EXTERNAL_LOOPBACK_MODE
|——————Node:: Text: :
|——————Node:expression_statement Text: mode = CAN_EXTERNAL_LOOPBACK_MODE;
|———————Node:assignment_expression Text: mode = CAN_EXTERNAL_LOOPBACK_MODE
|————————Node:identifier Text: mode
|————————Node:= Text: =
|————————Node:identifier Text: CAN_EXTERNAL_LOOPBACK_MODE
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_LISTEN_ONLY_MODE:
    mode = CAN_LISTEN_ONLY_MODE;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_LISTEN_ONLY_MODE
|——————Node:: Text: :
|——————Node:expression_statement Text: mode = CAN_LISTEN_ONLY_MODE;
|———————Node:assignment_expression Text: mode = CAN_LISTEN_ONLY_MODE
|————————Node:identifier Text: mode
|————————Node:= Text: =
|————————Node:identifier Text: CAN_LISTEN_ONLY_MODE
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_CONFIGURATION_MODE:
    mode = CAN_CONFIGURATION_MODE;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_CONFIGURATION_MODE
|——————Node:: Text: :
|——————Node:expression_statement Text: mode = CAN_CONFIGURATION_MODE;
|———————Node:assignment_expression Text: mode = CAN_CONFIGURATION_MODE
|————————Node:identifier Text: mode
|————————Node:= Text: =
|————————Node:identifier Text: CAN_CONFIGURATION_MODE
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_CLASSIC_MODE:
    mode = CAN_CLASSIC_MODE;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_CLASSIC_MODE
|——————Node:: Text: :
|——————Node:expression_statement Text: mode = CAN_CLASSIC_MODE;
|———————Node:assignment_expression Text: mode = CAN_CLASSIC_MODE
|————————Node:identifier Text: mode
|————————Node:= Text: =
|————————Node:identifier Text: CAN_CLASSIC_MODE
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case CAN_RESTRICTED_MODE:
    mode = CAN_RESTRICTED_MODE;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: CAN_RESTRICTED_MODE
|——————Node:: Text: :
|——————Node:expression_statement Text: mode = CAN_RESTRICTED_MODE;
|———————Node:assignment_expression Text: mode = CAN_RESTRICTED_MODE
|————————Node:identifier Text: mode
|————————Node:= Text: =
|————————Node:identifier Text: CAN_RESTRICTED_MODE
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: default:
    mode = CAN_INVALID_MODE;
    break;
|——————Node:default Text: default
|——————Node:: Text: :
|——————Node:expression_statement Text: mode = CAN_INVALID_MODE;
|———————Node:assignment_expression Text: mode = CAN_INVALID_MODE
|————————Node:identifier Text: mode
|————————Node:= Text: =
|————————Node:identifier Text: CAN_INVALID_MODE
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return mode;
|————Node:return Text: return
|————Node:identifier Text: mode
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_TransmitChannelEventGet(CAN_FIFO_CHANNEL channel,
                                                    CAN_TX_FIFO_EVENT *flags) {
  int8_t spiTransferError = 0;
  uint16_t a = 0;

  // Read Interrupt flags
  REG_CiFIFOSTA ciFifoSta;
  ciFifoSta.word = 0;
  a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);

  spiTransferError = mcp2518fd_ReadByte(a, &ciFifoSta.byte[0]);
  if (spiTransferError) {
    return -1;
  }

  // Update data
  *flags = (CAN_TX_FIFO_EVENT)(ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_EVENTS);

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_TransmitChannelEventGet(CAN_FIFO_CHANNEL channel,
                                                    CAN_TX_FIFO_EVENT *flags)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_TransmitChannelEventGet
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_TransmitChannelEventGet
|———Node:parameter_list Text: (CAN_FIFO_CHANNEL channel,
                                                    CAN_TX_FIFO_EVENT *flags)
|————Node:( Text: (
|————Node:parameter_declaration Text: CAN_FIFO_CHANNEL channel
|—————Node:type_identifier Text: CAN_FIFO_CHANNEL
|—————Node:identifier Text: channel
|————Node:, Text: ,
|————Node:parameter_declaration Text: CAN_TX_FIFO_EVENT *flags
|—————Node:type_identifier Text: CAN_TX_FIFO_EVENT
|—————Node:pointer_declarator Text: *flags
|——————Node:* Text: *
|——————Node:identifier Text: flags
|————Node:) Text: )
|——Node:compound_statement Text: {
  int8_t spiTransferError = 0;
  uint16_t a = 0;

  // Read Interrupt flags
  REG_CiFIFOSTA ciFifoSta;
  ciFifoSta.word = 0;
  a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);

  spiTransferError = mcp2518fd_ReadByte(a, &ciFifoSta.byte[0]);
  if (spiTransferError) {
    return -1;
  }

  // Update data
  *flags = (CAN_TX_FIFO_EVENT)(ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_EVENTS);

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint16_t a = 0;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: a = 0
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:declaration Text: REG_CiFIFOSTA ciFifoSta;
|————Node:type_identifier Text: REG_CiFIFOSTA
|————Node:identifier Text: ciFifoSta
|————Node:; Text: ;
|———Node:expression_statement Text: ciFifoSta.word = 0;
|————Node:assignment_expression Text: ciFifoSta.word = 0
|—————Node:field_expression Text: ciFifoSta.word
|——————Node:identifier Text: ciFifoSta
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
|————Node:assignment_expression Text: a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET)
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:binary_expression Text: cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET)
|——————Node:identifier Text: cREGADDR_CiFIFOSTA
|——————Node:+ Text: +
|——————Node:parenthesized_expression Text: (channel * CiFIFO_OFFSET)
|———————Node:( Text: (
|———————Node:binary_expression Text: channel * CiFIFO_OFFSET
|————————Node:identifier Text: channel
|————————Node:* Text: *
|————————Node:identifier Text: CiFIFO_OFFSET
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransferError = mcp2518fd_ReadByte(a, &ciFifoSta.byte[0]);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_ReadByte(a, &ciFifoSta.byte[0])
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_ReadByte(a, &ciFifoSta.byte[0])
|——————Node:identifier Text: mcp2518fd_ReadByte
|——————Node:argument_list Text: (a, &ciFifoSta.byte[0])
|———————Node:( Text: (
|———————Node:identifier Text: a
|———————Node:, Text: ,
|———————Node:pointer_expression Text: &ciFifoSta.byte[0]
|————————Node:& Text: &
|————————Node:subscript_expression Text: ciFifoSta.byte[0]
|—————————Node:field_expression Text: ciFifoSta.byte
|——————————Node:identifier Text: ciFifoSta
|——————————Node:. Text: .
|——————————Node:field_identifier Text: byte
|—————————Node:subscript_argument_list Text: [0]
|——————————Node:[ Text: [
|——————————Node:number_literal Text: 0
|——————————Node:] Text: ]
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -1;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -1;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -1;
|——————Node:return Text: return
|——————Node:number_literal Text: -1
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:expression_statement Text: *flags = (CAN_TX_FIFO_EVENT)(ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_EVENTS);
|————Node:assignment_expression Text: *flags = (CAN_TX_FIFO_EVENT)(ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_EVENTS)
|—————Node:pointer_expression Text: *flags
|——————Node:* Text: *
|——————Node:identifier Text: flags
|—————Node:= Text: =
|—————Node:call_expression Text: (CAN_TX_FIFO_EVENT)(ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_EVENTS)
|——————Node:parenthesized_expression Text: (CAN_TX_FIFO_EVENT)
|———————Node:( Text: (
|———————Node:identifier Text: CAN_TX_FIFO_EVENT
|———————Node:) Text: )
|——————Node:argument_list Text: (ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_EVENTS)
|———————Node:( Text: (
|———————Node:binary_expression Text: ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_EVENTS
|————————Node:subscript_expression Text: ciFifoSta.byte[0]
|—————————Node:field_expression Text: ciFifoSta.byte
|——————————Node:identifier Text: ciFifoSta
|——————————Node:. Text: .
|——————————Node:field_identifier Text: byte
|—————————Node:subscript_argument_list Text: [0]
|——————————Node:[ Text: [
|——————————Node:number_literal Text: 0
|——————————Node:] Text: ]
|————————Node:& Text: &
|————————Node:identifier Text: CAN_TX_FIFO_ALL_EVENTS
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_ErrorCountStateGet(uint8_t *tec, uint8_t *rec,
                                               CAN_ERROR_STATE *flags) {
  int8_t spiTransferError = 0;
  uint16_t a = 0;

  // Read Error
  a = cREGADDR_CiTREC;
  REG_CiTREC ciTrec;
  ciTrec.word = 0;

  spiTransferError = mcp2518fd_ReadWord(a, &ciTrec.word);
  if (spiTransferError) {
    return -1;
  }

  // Update data
  *tec = ciTrec.byte[1];
  *rec = ciTrec.byte[0];
  *flags = (CAN_ERROR_STATE)(ciTrec.byte[2] & CAN_ERROR_ALL);

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_ErrorCountStateGet(uint8_t *tec, uint8_t *rec,
                                               CAN_ERROR_STATE *flags)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_ErrorCountStateGet
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_ErrorCountStateGet
|———Node:parameter_list Text: (uint8_t *tec, uint8_t *rec,
                                               CAN_ERROR_STATE *flags)
|————Node:( Text: (
|————Node:parameter_declaration Text: uint8_t *tec
|—————Node:primitive_type Text: uint8_t
|—————Node:pointer_declarator Text: *tec
|——————Node:* Text: *
|——————Node:identifier Text: tec
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint8_t *rec
|—————Node:primitive_type Text: uint8_t
|—————Node:pointer_declarator Text: *rec
|——————Node:* Text: *
|——————Node:identifier Text: rec
|————Node:, Text: ,
|————Node:parameter_declaration Text: CAN_ERROR_STATE *flags
|—————Node:type_identifier Text: CAN_ERROR_STATE
|—————Node:pointer_declarator Text: *flags
|——————Node:* Text: *
|——————Node:identifier Text: flags
|————Node:) Text: )
|——Node:compound_statement Text: {
  int8_t spiTransferError = 0;
  uint16_t a = 0;

  // Read Error
  a = cREGADDR_CiTREC;
  REG_CiTREC ciTrec;
  ciTrec.word = 0;

  spiTransferError = mcp2518fd_ReadWord(a, &ciTrec.word);
  if (spiTransferError) {
    return -1;
  }

  // Update data
  *tec = ciTrec.byte[1];
  *rec = ciTrec.byte[0];
  *flags = (CAN_ERROR_STATE)(ciTrec.byte[2] & CAN_ERROR_ALL);

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint16_t a = 0;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: a = 0
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: a = cREGADDR_CiTREC;
|————Node:assignment_expression Text: a = cREGADDR_CiTREC
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:identifier Text: cREGADDR_CiTREC
|————Node:; Text: ;
|———Node:declaration Text: REG_CiTREC ciTrec;
|————Node:type_identifier Text: REG_CiTREC
|————Node:identifier Text: ciTrec
|————Node:; Text: ;
|———Node:expression_statement Text: ciTrec.word = 0;
|————Node:assignment_expression Text: ciTrec.word = 0
|—————Node:field_expression Text: ciTrec.word
|——————Node:identifier Text: ciTrec
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransferError = mcp2518fd_ReadWord(a, &ciTrec.word);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_ReadWord(a, &ciTrec.word)
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_ReadWord(a, &ciTrec.word)
|——————Node:identifier Text: mcp2518fd_ReadWord
|——————Node:argument_list Text: (a, &ciTrec.word)
|———————Node:( Text: (
|———————Node:identifier Text: a
|———————Node:, Text: ,
|———————Node:pointer_expression Text: &ciTrec.word
|————————Node:& Text: &
|————————Node:field_expression Text: ciTrec.word
|—————————Node:identifier Text: ciTrec
|—————————Node:. Text: .
|—————————Node:field_identifier Text: word
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -1;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -1;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -1;
|——————Node:return Text: return
|——————Node:number_literal Text: -1
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:expression_statement Text: *tec = ciTrec.byte[1];
|————Node:assignment_expression Text: *tec = ciTrec.byte[1]
|—————Node:pointer_expression Text: *tec
|——————Node:* Text: *
|——————Node:identifier Text: tec
|—————Node:= Text: =
|—————Node:subscript_expression Text: ciTrec.byte[1]
|——————Node:field_expression Text: ciTrec.byte
|———————Node:identifier Text: ciTrec
|———————Node:. Text: .
|———————Node:field_identifier Text: byte
|——————Node:subscript_argument_list Text: [1]
|———————Node:[ Text: [
|———————Node:number_literal Text: 1
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: *rec = ciTrec.byte[0];
|————Node:assignment_expression Text: *rec = ciTrec.byte[0]
|—————Node:pointer_expression Text: *rec
|——————Node:* Text: *
|——————Node:identifier Text: rec
|—————Node:= Text: =
|—————Node:subscript_expression Text: ciTrec.byte[0]
|——————Node:field_expression Text: ciTrec.byte
|———————Node:identifier Text: ciTrec
|———————Node:. Text: .
|———————Node:field_identifier Text: byte
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: *flags = (CAN_ERROR_STATE)(ciTrec.byte[2] & CAN_ERROR_ALL);
|————Node:assignment_expression Text: *flags = (CAN_ERROR_STATE)(ciTrec.byte[2] & CAN_ERROR_ALL)
|—————Node:pointer_expression Text: *flags
|——————Node:* Text: *
|——————Node:identifier Text: flags
|—————Node:= Text: =
|—————Node:call_expression Text: (CAN_ERROR_STATE)(ciTrec.byte[2] & CAN_ERROR_ALL)
|——————Node:parenthesized_expression Text: (CAN_ERROR_STATE)
|———————Node:( Text: (
|———————Node:identifier Text: CAN_ERROR_STATE
|———————Node:) Text: )
|——————Node:argument_list Text: (ciTrec.byte[2] & CAN_ERROR_ALL)
|———————Node:( Text: (
|———————Node:binary_expression Text: ciTrec.byte[2] & CAN_ERROR_ALL
|————————Node:subscript_expression Text: ciTrec.byte[2]
|—————————Node:field_expression Text: ciTrec.byte
|——————————Node:identifier Text: ciTrec
|——————————Node:. Text: .
|——————————Node:field_identifier Text: byte
|—————————Node:subscript_argument_list Text: [2]
|——————————Node:[ Text: [
|——————————Node:number_literal Text: 2
|——————————Node:] Text: ]
|————————Node:& Text: &
|————————Node:identifier Text: CAN_ERROR_ALL
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:function_definition Text: uint32_t DRV_CANFDSPI_DlcToDataBytes(CAN_DLC dlc) {
  uint32_t dataBytesInObject = 0;

  Nop();
  Nop();

  if (dlc < CAN_DLC_12) {
    dataBytesInObject = dlc;
  } else {
    switch (dlc) {
    case CAN_DLC_12:
      dataBytesInObject = 12;
      break;
    case CAN_DLC_16:
      dataBytesInObject = 16;
      break;
    case CAN_DLC_20:
      dataBytesInObject = 20;
      break;
    case CAN_DLC_24:
      dataBytesInObject = 24;
      break;
    case CAN_DLC_32:
      dataBytesInObject = 32;
      break;
    case CAN_DLC_48:
      dataBytesInObject = 48;
      break;
    case CAN_DLC_64:
      dataBytesInObject = 64;
      break;
    default:
      break;
    }
  }

  return dataBytesInObject;
}
|——Node:primitive_type Text: uint32_t
|——Node:function_declarator Text: DRV_CANFDSPI_DlcToDataBytes(CAN_DLC dlc)
|———Node:identifier Text: DRV_CANFDSPI_DlcToDataBytes
|———Node:parameter_list Text: (CAN_DLC dlc)
|————Node:( Text: (
|————Node:parameter_declaration Text: CAN_DLC dlc
|—————Node:type_identifier Text: CAN_DLC
|—————Node:identifier Text: dlc
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint32_t dataBytesInObject = 0;

  Nop();
  Nop();

  if (dlc < CAN_DLC_12) {
    dataBytesInObject = dlc;
  } else {
    switch (dlc) {
    case CAN_DLC_12:
      dataBytesInObject = 12;
      break;
    case CAN_DLC_16:
      dataBytesInObject = 16;
      break;
    case CAN_DLC_20:
      dataBytesInObject = 20;
      break;
    case CAN_DLC_24:
      dataBytesInObject = 24;
      break;
    case CAN_DLC_32:
      dataBytesInObject = 32;
      break;
    case CAN_DLC_48:
      dataBytesInObject = 48;
      break;
    case CAN_DLC_64:
      dataBytesInObject = 64;
      break;
    default:
      break;
    }
  }

  return dataBytesInObject;
}
|———Node:{ Text: {
|———Node:declaration Text: uint32_t dataBytesInObject = 0;
|————Node:primitive_type Text: uint32_t
|————Node:init_declarator Text: dataBytesInObject = 0
|—————Node:identifier Text: dataBytesInObject
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: Nop();
|————Node:call_expression Text: Nop()
|—————Node:identifier Text: Nop
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: Nop();
|————Node:call_expression Text: Nop()
|—————Node:identifier Text: Nop
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (dlc < CAN_DLC_12) {
    dataBytesInObject = dlc;
  } else {
    switch (dlc) {
    case CAN_DLC_12:
      dataBytesInObject = 12;
      break;
    case CAN_DLC_16:
      dataBytesInObject = 16;
      break;
    case CAN_DLC_20:
      dataBytesInObject = 20;
      break;
    case CAN_DLC_24:
      dataBytesInObject = 24;
      break;
    case CAN_DLC_32:
      dataBytesInObject = 32;
      break;
    case CAN_DLC_48:
      dataBytesInObject = 48;
      break;
    case CAN_DLC_64:
      dataBytesInObject = 64;
      break;
    default:
      break;
    }
  }
|————Node:if Text: if
|————Node:condition_clause Text: (dlc < CAN_DLC_12)
|—————Node:( Text: (
|—————Node:binary_expression Text: dlc < CAN_DLC_12
|——————Node:identifier Text: dlc
|——————Node:< Text: <
|——————Node:identifier Text: CAN_DLC_12
|—————Node:) Text: )
|————Node:compound_statement Text: {
    dataBytesInObject = dlc;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: dataBytesInObject = dlc;
|——————Node:assignment_expression Text: dataBytesInObject = dlc
|———————Node:identifier Text: dataBytesInObject
|———————Node:= Text: =
|———————Node:identifier Text: dlc
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else {
    switch (dlc) {
    case CAN_DLC_12:
      dataBytesInObject = 12;
      break;
    case CAN_DLC_16:
      dataBytesInObject = 16;
      break;
    case CAN_DLC_20:
      dataBytesInObject = 20;
      break;
    case CAN_DLC_24:
      dataBytesInObject = 24;
      break;
    case CAN_DLC_32:
      dataBytesInObject = 32;
      break;
    case CAN_DLC_48:
      dataBytesInObject = 48;
      break;
    case CAN_DLC_64:
      dataBytesInObject = 64;
      break;
    default:
      break;
    }
  }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
    switch (dlc) {
    case CAN_DLC_12:
      dataBytesInObject = 12;
      break;
    case CAN_DLC_16:
      dataBytesInObject = 16;
      break;
    case CAN_DLC_20:
      dataBytesInObject = 20;
      break;
    case CAN_DLC_24:
      dataBytesInObject = 24;
      break;
    case CAN_DLC_32:
      dataBytesInObject = 32;
      break;
    case CAN_DLC_48:
      dataBytesInObject = 48;
      break;
    case CAN_DLC_64:
      dataBytesInObject = 64;
      break;
    default:
      break;
    }
  }
|——————Node:{ Text: {
|——————Node:switch_statement Text: switch (dlc) {
    case CAN_DLC_12:
      dataBytesInObject = 12;
      break;
    case CAN_DLC_16:
      dataBytesInObject = 16;
      break;
    case CAN_DLC_20:
      dataBytesInObject = 20;
      break;
    case CAN_DLC_24:
      dataBytesInObject = 24;
      break;
    case CAN_DLC_32:
      dataBytesInObject = 32;
      break;
    case CAN_DLC_48:
      dataBytesInObject = 48;
      break;
    case CAN_DLC_64:
      dataBytesInObject = 64;
      break;
    default:
      break;
    }
|———————Node:switch Text: switch
|———————Node:condition_clause Text: (dlc)
|————————Node:( Text: (
|————————Node:identifier Text: dlc
|————————Node:) Text: )
|———————Node:compound_statement Text: {
    case CAN_DLC_12:
      dataBytesInObject = 12;
      break;
    case CAN_DLC_16:
      dataBytesInObject = 16;
      break;
    case CAN_DLC_20:
      dataBytesInObject = 20;
      break;
    case CAN_DLC_24:
      dataBytesInObject = 24;
      break;
    case CAN_DLC_32:
      dataBytesInObject = 32;
      break;
    case CAN_DLC_48:
      dataBytesInObject = 48;
      break;
    case CAN_DLC_64:
      dataBytesInObject = 64;
      break;
    default:
      break;
    }
|————————Node:{ Text: {
|————————Node:case_statement Text: case CAN_DLC_12:
      dataBytesInObject = 12;
      break;
|—————————Node:case Text: case
|—————————Node:identifier Text: CAN_DLC_12
|—————————Node:: Text: :
|—————————Node:expression_statement Text: dataBytesInObject = 12;
|——————————Node:assignment_expression Text: dataBytesInObject = 12
|———————————Node:identifier Text: dataBytesInObject
|———————————Node:= Text: =
|———————————Node:number_literal Text: 12
|——————————Node:; Text: ;
|—————————Node:break_statement Text: break;
|——————————Node:break Text: break
|——————————Node:; Text: ;
|————————Node:case_statement Text: case CAN_DLC_16:
      dataBytesInObject = 16;
      break;
|—————————Node:case Text: case
|—————————Node:identifier Text: CAN_DLC_16
|—————————Node:: Text: :
|—————————Node:expression_statement Text: dataBytesInObject = 16;
|——————————Node:assignment_expression Text: dataBytesInObject = 16
|———————————Node:identifier Text: dataBytesInObject
|———————————Node:= Text: =
|———————————Node:number_literal Text: 16
|——————————Node:; Text: ;
|—————————Node:break_statement Text: break;
|——————————Node:break Text: break
|——————————Node:; Text: ;
|————————Node:case_statement Text: case CAN_DLC_20:
      dataBytesInObject = 20;
      break;
|—————————Node:case Text: case
|—————————Node:identifier Text: CAN_DLC_20
|—————————Node:: Text: :
|—————————Node:expression_statement Text: dataBytesInObject = 20;
|——————————Node:assignment_expression Text: dataBytesInObject = 20
|———————————Node:identifier Text: dataBytesInObject
|———————————Node:= Text: =
|———————————Node:number_literal Text: 20
|——————————Node:; Text: ;
|—————————Node:break_statement Text: break;
|——————————Node:break Text: break
|——————————Node:; Text: ;
|————————Node:case_statement Text: case CAN_DLC_24:
      dataBytesInObject = 24;
      break;
|—————————Node:case Text: case
|—————————Node:identifier Text: CAN_DLC_24
|—————————Node:: Text: :
|—————————Node:expression_statement Text: dataBytesInObject = 24;
|——————————Node:assignment_expression Text: dataBytesInObject = 24
|———————————Node:identifier Text: dataBytesInObject
|———————————Node:= Text: =
|———————————Node:number_literal Text: 24
|——————————Node:; Text: ;
|—————————Node:break_statement Text: break;
|——————————Node:break Text: break
|——————————Node:; Text: ;
|————————Node:case_statement Text: case CAN_DLC_32:
      dataBytesInObject = 32;
      break;
|—————————Node:case Text: case
|—————————Node:identifier Text: CAN_DLC_32
|—————————Node:: Text: :
|—————————Node:expression_statement Text: dataBytesInObject = 32;
|——————————Node:assignment_expression Text: dataBytesInObject = 32
|———————————Node:identifier Text: dataBytesInObject
|———————————Node:= Text: =
|———————————Node:number_literal Text: 32
|——————————Node:; Text: ;
|—————————Node:break_statement Text: break;
|——————————Node:break Text: break
|——————————Node:; Text: ;
|————————Node:case_statement Text: case CAN_DLC_48:
      dataBytesInObject = 48;
      break;
|—————————Node:case Text: case
|—————————Node:identifier Text: CAN_DLC_48
|—————————Node:: Text: :
|—————————Node:expression_statement Text: dataBytesInObject = 48;
|——————————Node:assignment_expression Text: dataBytesInObject = 48
|———————————Node:identifier Text: dataBytesInObject
|———————————Node:= Text: =
|———————————Node:number_literal Text: 48
|——————————Node:; Text: ;
|—————————Node:break_statement Text: break;
|——————————Node:break Text: break
|——————————Node:; Text: ;
|————————Node:case_statement Text: case CAN_DLC_64:
      dataBytesInObject = 64;
      break;
|—————————Node:case Text: case
|—————————Node:identifier Text: CAN_DLC_64
|—————————Node:: Text: :
|—————————Node:expression_statement Text: dataBytesInObject = 64;
|——————————Node:assignment_expression Text: dataBytesInObject = 64
|———————————Node:identifier Text: dataBytesInObject
|———————————Node:= Text: =
|———————————Node:number_literal Text: 64
|——————————Node:; Text: ;
|—————————Node:break_statement Text: break;
|——————————Node:break Text: break
|——————————Node:; Text: ;
|————————Node:case_statement Text: default:
      break;
|—————————Node:default Text: default
|—————————Node:: Text: :
|—————————Node:break_statement Text: break;
|——————————Node:break Text: break
|——————————Node:; Text: ;
|————————Node:} Text: }
|——————Node:} Text: }
|———Node:return_statement Text: return dataBytesInObject;
|————Node:return Text: return
|————Node:identifier Text: dataBytesInObject
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_TransmitChannelLoad(CAN_FIFO_CHANNEL channel,
                                                CAN_TX_MSGOBJ *txObj,
                                                uint8_t *txd,
                                                uint32_t txdNumBytes,
                                                bool flush) {
  uint16_t a;
  uint32_t fifoReg[3];
  uint32_t dataBytesInObject;
  REG_CiFIFOCON ciFifoCon;
  REG_CiFIFOSTA ciFifoSta;
  REG_CiFIFOUA ciFifoUa;
  int8_t spiTransferError = 0;

  // Get FIFO registers
  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);

  spiTransferError = mcp2518fd_ReadWordArray(a, fifoReg, 3);
  if (spiTransferError) {
    return -1;
  }

  // Check that it is a transmit buffer
  ciFifoCon.word = fifoReg[0];
  if (!ciFifoCon.txBF.TxEnable) {
    return -2;
  }

  // Check that DLC is big enough for data
  dataBytesInObject = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC)txObj->bF.ctrl.DLC);
  if (dataBytesInObject < txdNumBytes) {
    return -3;
  }

  // Get status
  ciFifoSta.word = fifoReg[1];

  // Get address
  ciFifoUa.word = fifoReg[2];
#ifdef USERADDRESS_TIMES_FOUR
  a = 4 * ciFifoUa.bF.UserAddress;
#else
  a = ciFifoUa.bF.UserAddress;
#endif
  a += cRAMADDR_START;
  uint8_t txBuffer[MAX_MSG_SIZE];

  txBuffer[0] = txObj->byte[0]; // not using 'for' to reduce no of instructions
  txBuffer[1] = txObj->byte[1];
  txBuffer[2] = txObj->byte[2];
  txBuffer[3] = txObj->byte[3];

  txBuffer[4] = txObj->byte[4];
  txBuffer[5] = txObj->byte[5];
  txBuffer[6] = txObj->byte[6];
  txBuffer[7] = txObj->byte[7];

  uint8_t i;
  for (i = 0; i < txdNumBytes; i++) {
    txBuffer[i + 8] = txd[i];
  }

  // Make sure we write a multiple of 4 bytes to RAM
  uint16_t n = 0;
  uint8_t j = 0;

  if (txdNumBytes % 4) {
    // Need to add bytes
    n = 4 - (txdNumBytes % 4);
    i = txdNumBytes + 8;

    for (j = 0; j < n; j++) {
      txBuffer[i + 8 + j] = 0;
    }
  }
  spiTransferError = mcp2518fd_WriteByteArray(a, txBuffer, txdNumBytes + 8 + n);
  if (spiTransferError) {
    return -4;
  }

  // Set UINC and TXREQ
  spiTransferError = mcp2518fd_TransmitChannelUpdate(channel, flush);
  if (spiTransferError) {
    return -5;
  }
  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_TransmitChannelLoad(CAN_FIFO_CHANNEL channel,
                                                CAN_TX_MSGOBJ *txObj,
                                                uint8_t *txd,
                                                uint32_t txdNumBytes,
                                                bool flush)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_TransmitChannelLoad
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_TransmitChannelLoad
|———Node:parameter_list Text: (CAN_FIFO_CHANNEL channel,
                                                CAN_TX_MSGOBJ *txObj,
                                                uint8_t *txd,
                                                uint32_t txdNumBytes,
                                                bool flush)
|————Node:( Text: (
|————Node:parameter_declaration Text: CAN_FIFO_CHANNEL channel
|—————Node:type_identifier Text: CAN_FIFO_CHANNEL
|—————Node:identifier Text: channel
|————Node:, Text: ,
|————Node:parameter_declaration Text: CAN_TX_MSGOBJ *txObj
|—————Node:type_identifier Text: CAN_TX_MSGOBJ
|—————Node:pointer_declarator Text: *txObj
|——————Node:* Text: *
|——————Node:identifier Text: txObj
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint8_t *txd
|—————Node:primitive_type Text: uint8_t
|—————Node:pointer_declarator Text: *txd
|——————Node:* Text: *
|——————Node:identifier Text: txd
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint32_t txdNumBytes
|—————Node:primitive_type Text: uint32_t
|—————Node:identifier Text: txdNumBytes
|————Node:, Text: ,
|————Node:parameter_declaration Text: bool flush
|—————Node:primitive_type Text: bool
|—————Node:identifier Text: flush
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint16_t a;
  uint32_t fifoReg[3];
  uint32_t dataBytesInObject;
  REG_CiFIFOCON ciFifoCon;
  REG_CiFIFOSTA ciFifoSta;
  REG_CiFIFOUA ciFifoUa;
  int8_t spiTransferError = 0;

  // Get FIFO registers
  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);

  spiTransferError = mcp2518fd_ReadWordArray(a, fifoReg, 3);
  if (spiTransferError) {
    return -1;
  }

  // Check that it is a transmit buffer
  ciFifoCon.word = fifoReg[0];
  if (!ciFifoCon.txBF.TxEnable) {
    return -2;
  }

  // Check that DLC is big enough for data
  dataBytesInObject = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC)txObj->bF.ctrl.DLC);
  if (dataBytesInObject < txdNumBytes) {
    return -3;
  }

  // Get status
  ciFifoSta.word = fifoReg[1];

  // Get address
  ciFifoUa.word = fifoReg[2];
#ifdef USERADDRESS_TIMES_FOUR
  a = 4 * ciFifoUa.bF.UserAddress;
#else
  a = ciFifoUa.bF.UserAddress;
#endif
  a += cRAMADDR_START;
  uint8_t txBuffer[MAX_MSG_SIZE];

  txBuffer[0] = txObj->byte[0]; // not using 'for' to reduce no of instructions
  txBuffer[1] = txObj->byte[1];
  txBuffer[2] = txObj->byte[2];
  txBuffer[3] = txObj->byte[3];

  txBuffer[4] = txObj->byte[4];
  txBuffer[5] = txObj->byte[5];
  txBuffer[6] = txObj->byte[6];
  txBuffer[7] = txObj->byte[7];

  uint8_t i;
  for (i = 0; i < txdNumBytes; i++) {
    txBuffer[i + 8] = txd[i];
  }

  // Make sure we write a multiple of 4 bytes to RAM
  uint16_t n = 0;
  uint8_t j = 0;

  if (txdNumBytes % 4) {
    // Need to add bytes
    n = 4 - (txdNumBytes % 4);
    i = txdNumBytes + 8;

    for (j = 0; j < n; j++) {
      txBuffer[i + 8 + j] = 0;
    }
  }
  spiTransferError = mcp2518fd_WriteByteArray(a, txBuffer, txdNumBytes + 8 + n);
  if (spiTransferError) {
    return -4;
  }

  // Set UINC and TXREQ
  spiTransferError = mcp2518fd_TransmitChannelUpdate(channel, flush);
  if (spiTransferError) {
    return -5;
  }
  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: uint16_t a;
|————Node:primitive_type Text: uint16_t
|————Node:identifier Text: a
|————Node:; Text: ;
|———Node:declaration Text: uint32_t fifoReg[3];
|————Node:primitive_type Text: uint32_t
|————Node:array_declarator Text: fifoReg[3]
|—————Node:identifier Text: fifoReg
|—————Node:[ Text: [
|—————Node:number_literal Text: 3
|—————Node:] Text: ]
|————Node:; Text: ;
|———Node:declaration Text: uint32_t dataBytesInObject;
|————Node:primitive_type Text: uint32_t
|————Node:identifier Text: dataBytesInObject
|————Node:; Text: ;
|———Node:declaration Text: REG_CiFIFOCON ciFifoCon;
|————Node:type_identifier Text: REG_CiFIFOCON
|————Node:identifier Text: ciFifoCon
|————Node:; Text: ;
|———Node:declaration Text: REG_CiFIFOSTA ciFifoSta;
|————Node:type_identifier Text: REG_CiFIFOSTA
|————Node:identifier Text: ciFifoSta
|————Node:; Text: ;
|———Node:declaration Text: REG_CiFIFOUA ciFifoUa;
|————Node:type_identifier Text: REG_CiFIFOUA
|————Node:identifier Text: ciFifoUa
|————Node:; Text: ;
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
|————Node:assignment_expression Text: a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET)
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:binary_expression Text: cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET)
|——————Node:identifier Text: cREGADDR_CiFIFOCON
|——————Node:+ Text: +
|——————Node:parenthesized_expression Text: (channel * CiFIFO_OFFSET)
|———————Node:( Text: (
|———————Node:binary_expression Text: channel * CiFIFO_OFFSET
|————————Node:identifier Text: channel
|————————Node:* Text: *
|————————Node:identifier Text: CiFIFO_OFFSET
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransferError = mcp2518fd_ReadWordArray(a, fifoReg, 3);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_ReadWordArray(a, fifoReg, 3)
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_ReadWordArray(a, fifoReg, 3)
|——————Node:identifier Text: mcp2518fd_ReadWordArray
|——————Node:argument_list Text: (a, fifoReg, 3)
|———————Node:( Text: (
|———————Node:identifier Text: a
|———————Node:, Text: ,
|———————Node:identifier Text: fifoReg
|———————Node:, Text: ,
|———————Node:number_literal Text: 3
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -1;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -1;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -1;
|——————Node:return Text: return
|——————Node:number_literal Text: -1
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:expression_statement Text: ciFifoCon.word = fifoReg[0];
|————Node:assignment_expression Text: ciFifoCon.word = fifoReg[0]
|—————Node:field_expression Text: ciFifoCon.word
|——————Node:identifier Text: ciFifoCon
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:subscript_expression Text: fifoReg[0]
|——————Node:identifier Text: fifoReg
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:if_statement Text: if (!ciFifoCon.txBF.TxEnable) {
    return -2;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (!ciFifoCon.txBF.TxEnable)
|—————Node:( Text: (
|—————Node:unary_expression Text: !ciFifoCon.txBF.TxEnable
|——————Node:! Text: !
|——————Node:field_expression Text: ciFifoCon.txBF.TxEnable
|———————Node:field_expression Text: ciFifoCon.txBF
|————————Node:identifier Text: ciFifoCon
|————————Node:. Text: .
|————————Node:field_identifier Text: txBF
|———————Node:. Text: .
|———————Node:field_identifier Text: TxEnable
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -2;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -2;
|——————Node:return Text: return
|——————Node:number_literal Text: -2
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:expression_statement Text: dataBytesInObject = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC)txObj->bF.ctrl.DLC);
|————Node:assignment_expression Text: dataBytesInObject = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC)txObj->bF.ctrl.DLC)
|—————Node:identifier Text: dataBytesInObject
|—————Node:= Text: =
|—————Node:call_expression Text: DRV_CANFDSPI_DlcToDataBytes((CAN_DLC)txObj->bF.ctrl.DLC)
|——————Node:identifier Text: DRV_CANFDSPI_DlcToDataBytes
|——————Node:argument_list Text: ((CAN_DLC)txObj->bF.ctrl.DLC)
|———————Node:( Text: (
|———————Node:cast_expression Text: (CAN_DLC)txObj->bF.ctrl.DLC
|————————Node:( Text: (
|————————Node:type_descriptor Text: CAN_DLC
|—————————Node:type_identifier Text: CAN_DLC
|————————Node:) Text: )
|————————Node:field_expression Text: txObj->bF.ctrl.DLC
|—————————Node:field_expression Text: txObj->bF.ctrl
|——————————Node:field_expression Text: txObj->bF
|———————————Node:identifier Text: txObj
|———————————Node:-> Text: ->
|———————————Node:field_identifier Text: bF
|——————————Node:. Text: .
|——————————Node:field_identifier Text: ctrl
|—————————Node:. Text: .
|—————————Node:field_identifier Text: DLC
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (dataBytesInObject < txdNumBytes) {
    return -3;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (dataBytesInObject < txdNumBytes)
|—————Node:( Text: (
|—————Node:binary_expression Text: dataBytesInObject < txdNumBytes
|——————Node:identifier Text: dataBytesInObject
|——————Node:< Text: <
|——————Node:identifier Text: txdNumBytes
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -3;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -3;
|——————Node:return Text: return
|——————Node:number_literal Text: -3
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:expression_statement Text: ciFifoSta.word = fifoReg[1];
|————Node:assignment_expression Text: ciFifoSta.word = fifoReg[1]
|—————Node:field_expression Text: ciFifoSta.word
|——————Node:identifier Text: ciFifoSta
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:subscript_expression Text: fifoReg[1]
|——————Node:identifier Text: fifoReg
|——————Node:subscript_argument_list Text: [1]
|———————Node:[ Text: [
|———————Node:number_literal Text: 1
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: ciFifoUa.word = fifoReg[2];
|————Node:assignment_expression Text: ciFifoUa.word = fifoReg[2]
|—————Node:field_expression Text: ciFifoUa.word
|——————Node:identifier Text: ciFifoUa
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:subscript_expression Text: fifoReg[2]
|——————Node:identifier Text: fifoReg
|——————Node:subscript_argument_list Text: [2]
|———————Node:[ Text: [
|———————Node:number_literal Text: 2
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef USERADDRESS_TIMES_FOUR
  a = 4 * ciFifoUa.bF.UserAddress;
#else
  a = ciFifoUa.bF.UserAddress;
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: USERADDRESS_TIMES_FOUR
|————Node:expression_statement Text: a = 4 * ciFifoUa.bF.UserAddress;
|—————Node:assignment_expression Text: a = 4 * ciFifoUa.bF.UserAddress
|——————Node:identifier Text: a
|——————Node:= Text: =
|——————Node:binary_expression Text: 4 * ciFifoUa.bF.UserAddress
|———————Node:number_literal Text: 4
|———————Node:* Text: *
|———————Node:field_expression Text: ciFifoUa.bF.UserAddress
|————————Node:field_expression Text: ciFifoUa.bF
|—————————Node:identifier Text: ciFifoUa
|—————————Node:. Text: .
|—————————Node:field_identifier Text: bF
|————————Node:. Text: .
|————————Node:field_identifier Text: UserAddress
|—————Node:; Text: ;
|————Node:preproc_else Text: #else
  a = ciFifoUa.bF.UserAddress;
|—————Node:#else Text: #else
|—————Node:expression_statement Text: a = ciFifoUa.bF.UserAddress;
|——————Node:assignment_expression Text: a = ciFifoUa.bF.UserAddress
|———————Node:identifier Text: a
|———————Node:= Text: =
|———————Node:field_expression Text: ciFifoUa.bF.UserAddress
|————————Node:field_expression Text: ciFifoUa.bF
|—————————Node:identifier Text: ciFifoUa
|—————————Node:. Text: .
|—————————Node:field_identifier Text: bF
|————————Node:. Text: .
|————————Node:field_identifier Text: UserAddress
|——————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: a += cRAMADDR_START;
|————Node:assignment_expression Text: a += cRAMADDR_START
|—————Node:identifier Text: a
|—————Node:+= Text: +=
|—————Node:identifier Text: cRAMADDR_START
|————Node:; Text: ;
|———Node:declaration Text: uint8_t txBuffer[MAX_MSG_SIZE];
|————Node:primitive_type Text: uint8_t
|————Node:array_declarator Text: txBuffer[MAX_MSG_SIZE]
|—————Node:identifier Text: txBuffer
|—————Node:[ Text: [
|—————Node:identifier Text: MAX_MSG_SIZE
|—————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: txBuffer[0] = txObj->byte[0];
|————Node:assignment_expression Text: txBuffer[0] = txObj->byte[0]
|—————Node:subscript_expression Text: txBuffer[0]
|——————Node:identifier Text: txBuffer
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:subscript_expression Text: txObj->byte[0]
|——————Node:field_expression Text: txObj->byte
|———————Node:identifier Text: txObj
|———————Node:-> Text: ->
|———————Node:field_identifier Text: byte
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: txBuffer[1] = txObj->byte[1];
|————Node:assignment_expression Text: txBuffer[1] = txObj->byte[1]
|—————Node:subscript_expression Text: txBuffer[1]
|——————Node:identifier Text: txBuffer
|——————Node:subscript_argument_list Text: [1]
|———————Node:[ Text: [
|———————Node:number_literal Text: 1
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:subscript_expression Text: txObj->byte[1]
|——————Node:field_expression Text: txObj->byte
|———————Node:identifier Text: txObj
|———————Node:-> Text: ->
|———————Node:field_identifier Text: byte
|——————Node:subscript_argument_list Text: [1]
|———————Node:[ Text: [
|———————Node:number_literal Text: 1
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: txBuffer[2] = txObj->byte[2];
|————Node:assignment_expression Text: txBuffer[2] = txObj->byte[2]
|—————Node:subscript_expression Text: txBuffer[2]
|——————Node:identifier Text: txBuffer
|——————Node:subscript_argument_list Text: [2]
|———————Node:[ Text: [
|———————Node:number_literal Text: 2
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:subscript_expression Text: txObj->byte[2]
|——————Node:field_expression Text: txObj->byte
|———————Node:identifier Text: txObj
|———————Node:-> Text: ->
|———————Node:field_identifier Text: byte
|——————Node:subscript_argument_list Text: [2]
|———————Node:[ Text: [
|———————Node:number_literal Text: 2
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: txBuffer[3] = txObj->byte[3];
|————Node:assignment_expression Text: txBuffer[3] = txObj->byte[3]
|—————Node:subscript_expression Text: txBuffer[3]
|——————Node:identifier Text: txBuffer
|——————Node:subscript_argument_list Text: [3]
|———————Node:[ Text: [
|———————Node:number_literal Text: 3
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:subscript_expression Text: txObj->byte[3]
|——————Node:field_expression Text: txObj->byte
|———————Node:identifier Text: txObj
|———————Node:-> Text: ->
|———————Node:field_identifier Text: byte
|——————Node:subscript_argument_list Text: [3]
|———————Node:[ Text: [
|———————Node:number_literal Text: 3
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: txBuffer[4] = txObj->byte[4];
|————Node:assignment_expression Text: txBuffer[4] = txObj->byte[4]
|—————Node:subscript_expression Text: txBuffer[4]
|——————Node:identifier Text: txBuffer
|——————Node:subscript_argument_list Text: [4]
|———————Node:[ Text: [
|———————Node:number_literal Text: 4
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:subscript_expression Text: txObj->byte[4]
|——————Node:field_expression Text: txObj->byte
|———————Node:identifier Text: txObj
|———————Node:-> Text: ->
|———————Node:field_identifier Text: byte
|——————Node:subscript_argument_list Text: [4]
|———————Node:[ Text: [
|———————Node:number_literal Text: 4
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: txBuffer[5] = txObj->byte[5];
|————Node:assignment_expression Text: txBuffer[5] = txObj->byte[5]
|—————Node:subscript_expression Text: txBuffer[5]
|——————Node:identifier Text: txBuffer
|——————Node:subscript_argument_list Text: [5]
|———————Node:[ Text: [
|———————Node:number_literal Text: 5
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:subscript_expression Text: txObj->byte[5]
|——————Node:field_expression Text: txObj->byte
|———————Node:identifier Text: txObj
|———————Node:-> Text: ->
|———————Node:field_identifier Text: byte
|——————Node:subscript_argument_list Text: [5]
|———————Node:[ Text: [
|———————Node:number_literal Text: 5
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: txBuffer[6] = txObj->byte[6];
|————Node:assignment_expression Text: txBuffer[6] = txObj->byte[6]
|—————Node:subscript_expression Text: txBuffer[6]
|——————Node:identifier Text: txBuffer
|——————Node:subscript_argument_list Text: [6]
|———————Node:[ Text: [
|———————Node:number_literal Text: 6
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:subscript_expression Text: txObj->byte[6]
|——————Node:field_expression Text: txObj->byte
|———————Node:identifier Text: txObj
|———————Node:-> Text: ->
|———————Node:field_identifier Text: byte
|——————Node:subscript_argument_list Text: [6]
|———————Node:[ Text: [
|———————Node:number_literal Text: 6
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: txBuffer[7] = txObj->byte[7];
|————Node:assignment_expression Text: txBuffer[7] = txObj->byte[7]
|—————Node:subscript_expression Text: txBuffer[7]
|——————Node:identifier Text: txBuffer
|——————Node:subscript_argument_list Text: [7]
|———————Node:[ Text: [
|———————Node:number_literal Text: 7
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:subscript_expression Text: txObj->byte[7]
|——————Node:field_expression Text: txObj->byte
|———————Node:identifier Text: txObj
|———————Node:-> Text: ->
|———————Node:field_identifier Text: byte
|——————Node:subscript_argument_list Text: [7]
|———————Node:[ Text: [
|———————Node:number_literal Text: 7
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:declaration Text: uint8_t i;
|————Node:primitive_type Text: uint8_t
|————Node:identifier Text: i
|————Node:; Text: ;
|———Node:for_statement Text: for (i = 0; i < txdNumBytes; i++) {
    txBuffer[i + 8] = txd[i];
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:assignment_expression Text: i = 0
|—————Node:identifier Text: i
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|————Node:binary_expression Text: i < txdNumBytes
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:identifier Text: txdNumBytes
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    txBuffer[i + 8] = txd[i];
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: txBuffer[i + 8] = txd[i];
|——————Node:assignment_expression Text: txBuffer[i + 8] = txd[i]
|———————Node:subscript_expression Text: txBuffer[i + 8]
|————————Node:identifier Text: txBuffer
|————————Node:subscript_argument_list Text: [i + 8]
|—————————Node:[ Text: [
|—————————Node:binary_expression Text: i + 8
|——————————Node:identifier Text: i
|——————————Node:+ Text: +
|——————————Node:number_literal Text: 8
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:subscript_expression Text: txd[i]
|————————Node:identifier Text: txd
|————————Node:subscript_argument_list Text: [i]
|—————————Node:[ Text: [
|—————————Node:identifier Text: i
|—————————Node:] Text: ]
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:declaration Text: uint16_t n = 0;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: n = 0
|—————Node:identifier Text: n
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint8_t j = 0;
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: j = 0
|—————Node:identifier Text: j
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:if_statement Text: if (txdNumBytes % 4) {
    // Need to add bytes
    n = 4 - (txdNumBytes % 4);
    i = txdNumBytes + 8;

    for (j = 0; j < n; j++) {
      txBuffer[i + 8 + j] = 0;
    }
  }
|————Node:if Text: if
|————Node:condition_clause Text: (txdNumBytes % 4)
|—————Node:( Text: (
|—————Node:binary_expression Text: txdNumBytes % 4
|——————Node:identifier Text: txdNumBytes
|——————Node:% Text: %
|——————Node:number_literal Text: 4
|—————Node:) Text: )
|————Node:compound_statement Text: {
    // Need to add bytes
    n = 4 - (txdNumBytes % 4);
    i = txdNumBytes + 8;

    for (j = 0; j < n; j++) {
      txBuffer[i + 8 + j] = 0;
    }
  }
|—————Node:{ Text: {
|—————Node:comment
|—————Node:expression_statement Text: n = 4 - (txdNumBytes % 4);
|——————Node:assignment_expression Text: n = 4 - (txdNumBytes % 4)
|———————Node:identifier Text: n
|———————Node:= Text: =
|———————Node:binary_expression Text: 4 - (txdNumBytes % 4)
|————————Node:number_literal Text: 4
|————————Node:- Text: -
|————————Node:parenthesized_expression Text: (txdNumBytes % 4)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: txdNumBytes % 4
|——————————Node:identifier Text: txdNumBytes
|——————————Node:% Text: %
|——————————Node:number_literal Text: 4
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: i = txdNumBytes + 8;
|——————Node:assignment_expression Text: i = txdNumBytes + 8
|———————Node:identifier Text: i
|———————Node:= Text: =
|———————Node:binary_expression Text: txdNumBytes + 8
|————————Node:identifier Text: txdNumBytes
|————————Node:+ Text: +
|————————Node:number_literal Text: 8
|——————Node:; Text: ;
|—————Node:for_statement Text: for (j = 0; j < n; j++) {
      txBuffer[i + 8 + j] = 0;
    }
|——————Node:for Text: for
|——————Node:( Text: (
|——————Node:assignment_expression Text: j = 0
|———————Node:identifier Text: j
|———————Node:= Text: =
|———————Node:number_literal Text: 0
|——————Node:; Text: ;
|——————Node:binary_expression Text: j < n
|———————Node:identifier Text: j
|———————Node:< Text: <
|———————Node:identifier Text: n
|——————Node:; Text: ;
|——————Node:update_expression Text: j++
|———————Node:identifier Text: j
|———————Node:++ Text: ++
|——————Node:) Text: )
|——————Node:compound_statement Text: {
      txBuffer[i + 8 + j] = 0;
    }
|———————Node:{ Text: {
|———————Node:expression_statement Text: txBuffer[i + 8 + j] = 0;
|————————Node:assignment_expression Text: txBuffer[i + 8 + j] = 0
|—————————Node:subscript_expression Text: txBuffer[i + 8 + j]
|——————————Node:identifier Text: txBuffer
|——————————Node:subscript_argument_list Text: [i + 8 + j]
|———————————Node:[ Text: [
|———————————Node:binary_expression Text: i + 8 + j
|————————————Node:binary_expression Text: i + 8
|—————————————Node:identifier Text: i
|—————————————Node:+ Text: +
|—————————————Node:number_literal Text: 8
|————————————Node:+ Text: +
|————————————Node:identifier Text: j
|———————————Node:] Text: ]
|—————————Node:= Text: =
|—————————Node:number_literal Text: 0
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|———Node:expression_statement Text: spiTransferError = mcp2518fd_WriteByteArray(a, txBuffer, txdNumBytes + 8 + n);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_WriteByteArray(a, txBuffer, txdNumBytes + 8 + n)
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_WriteByteArray(a, txBuffer, txdNumBytes + 8 + n)
|——————Node:identifier Text: mcp2518fd_WriteByteArray
|——————Node:argument_list Text: (a, txBuffer, txdNumBytes + 8 + n)
|———————Node:( Text: (
|———————Node:identifier Text: a
|———————Node:, Text: ,
|———————Node:identifier Text: txBuffer
|———————Node:, Text: ,
|———————Node:binary_expression Text: txdNumBytes + 8 + n
|————————Node:binary_expression Text: txdNumBytes + 8
|—————————Node:identifier Text: txdNumBytes
|—————————Node:+ Text: +
|—————————Node:number_literal Text: 8
|————————Node:+ Text: +
|————————Node:identifier Text: n
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -4;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -4;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -4;
|——————Node:return Text: return
|——————Node:number_literal Text: -4
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:expression_statement Text: spiTransferError = mcp2518fd_TransmitChannelUpdate(channel, flush);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_TransmitChannelUpdate(channel, flush)
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_TransmitChannelUpdate(channel, flush)
|——————Node:identifier Text: mcp2518fd_TransmitChannelUpdate
|——————Node:argument_list Text: (channel, flush)
|———————Node:( Text: (
|———————Node:identifier Text: channel
|———————Node:, Text: ,
|———————Node:identifier Text: flush
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -5;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -5;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -5;
|——————Node:return Text: return
|——————Node:number_literal Text: -5
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_ReceiveChannelEventGet(CAN_FIFO_CHANNEL channel,
                                                   CAN_RX_FIFO_EVENT *flags) {
  int8_t spiTransferError = 0;
  uint16_t a = 0;

  if (channel == CAN_TXQUEUE_CH0)
    return -100;

  // Read Interrupt flags
  REG_CiFIFOSTA ciFifoSta;
  ciFifoSta.word = 0;
  a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);

  spiTransferError = mcp2518fd_ReadByte(a, &ciFifoSta.byte[0]);
  if (spiTransferError) {
    return -1;
  }

  // Update data
  *flags = (CAN_RX_FIFO_EVENT)(ciFifoSta.byte[0] & CAN_RX_FIFO_ALL_EVENTS);
  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_ReceiveChannelEventGet(CAN_FIFO_CHANNEL channel,
                                                   CAN_RX_FIFO_EVENT *flags)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_ReceiveChannelEventGet
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_ReceiveChannelEventGet
|———Node:parameter_list Text: (CAN_FIFO_CHANNEL channel,
                                                   CAN_RX_FIFO_EVENT *flags)
|————Node:( Text: (
|————Node:parameter_declaration Text: CAN_FIFO_CHANNEL channel
|—————Node:type_identifier Text: CAN_FIFO_CHANNEL
|—————Node:identifier Text: channel
|————Node:, Text: ,
|————Node:parameter_declaration Text: CAN_RX_FIFO_EVENT *flags
|—————Node:type_identifier Text: CAN_RX_FIFO_EVENT
|—————Node:pointer_declarator Text: *flags
|——————Node:* Text: *
|——————Node:identifier Text: flags
|————Node:) Text: )
|——Node:compound_statement Text: {
  int8_t spiTransferError = 0;
  uint16_t a = 0;

  if (channel == CAN_TXQUEUE_CH0)
    return -100;

  // Read Interrupt flags
  REG_CiFIFOSTA ciFifoSta;
  ciFifoSta.word = 0;
  a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);

  spiTransferError = mcp2518fd_ReadByte(a, &ciFifoSta.byte[0]);
  if (spiTransferError) {
    return -1;
  }

  // Update data
  *flags = (CAN_RX_FIFO_EVENT)(ciFifoSta.byte[0] & CAN_RX_FIFO_ALL_EVENTS);
  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint16_t a = 0;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: a = 0
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:if_statement Text: if (channel == CAN_TXQUEUE_CH0)
    return -100;
|————Node:if Text: if
|————Node:condition_clause Text: (channel == CAN_TXQUEUE_CH0)
|—————Node:( Text: (
|—————Node:binary_expression Text: channel == CAN_TXQUEUE_CH0
|——————Node:identifier Text: channel
|——————Node:== Text: ==
|——————Node:identifier Text: CAN_TXQUEUE_CH0
|—————Node:) Text: )
|————Node:return_statement Text: return -100;
|—————Node:return Text: return
|—————Node:number_literal Text: -100
|—————Node:; Text: ;
|———Node:comment
|———Node:declaration Text: REG_CiFIFOSTA ciFifoSta;
|————Node:type_identifier Text: REG_CiFIFOSTA
|————Node:identifier Text: ciFifoSta
|————Node:; Text: ;
|———Node:expression_statement Text: ciFifoSta.word = 0;
|————Node:assignment_expression Text: ciFifoSta.word = 0
|—————Node:field_expression Text: ciFifoSta.word
|——————Node:identifier Text: ciFifoSta
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
|————Node:assignment_expression Text: a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET)
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:binary_expression Text: cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET)
|——————Node:identifier Text: cREGADDR_CiFIFOSTA
|——————Node:+ Text: +
|——————Node:parenthesized_expression Text: (channel * CiFIFO_OFFSET)
|———————Node:( Text: (
|———————Node:binary_expression Text: channel * CiFIFO_OFFSET
|————————Node:identifier Text: channel
|————————Node:* Text: *
|————————Node:identifier Text: CiFIFO_OFFSET
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransferError = mcp2518fd_ReadByte(a, &ciFifoSta.byte[0]);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_ReadByte(a, &ciFifoSta.byte[0])
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_ReadByte(a, &ciFifoSta.byte[0])
|——————Node:identifier Text: mcp2518fd_ReadByte
|——————Node:argument_list Text: (a, &ciFifoSta.byte[0])
|———————Node:( Text: (
|———————Node:identifier Text: a
|———————Node:, Text: ,
|———————Node:pointer_expression Text: &ciFifoSta.byte[0]
|————————Node:& Text: &
|————————Node:subscript_expression Text: ciFifoSta.byte[0]
|—————————Node:field_expression Text: ciFifoSta.byte
|——————————Node:identifier Text: ciFifoSta
|——————————Node:. Text: .
|——————————Node:field_identifier Text: byte
|—————————Node:subscript_argument_list Text: [0]
|——————————Node:[ Text: [
|——————————Node:number_literal Text: 0
|——————————Node:] Text: ]
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -1;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -1;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -1;
|——————Node:return Text: return
|——————Node:number_literal Text: -1
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:expression_statement Text: *flags = (CAN_RX_FIFO_EVENT)(ciFifoSta.byte[0] & CAN_RX_FIFO_ALL_EVENTS);
|————Node:assignment_expression Text: *flags = (CAN_RX_FIFO_EVENT)(ciFifoSta.byte[0] & CAN_RX_FIFO_ALL_EVENTS)
|—————Node:pointer_expression Text: *flags
|——————Node:* Text: *
|——————Node:identifier Text: flags
|—————Node:= Text: =
|—————Node:call_expression Text: (CAN_RX_FIFO_EVENT)(ciFifoSta.byte[0] & CAN_RX_FIFO_ALL_EVENTS)
|——————Node:parenthesized_expression Text: (CAN_RX_FIFO_EVENT)
|———————Node:( Text: (
|———————Node:identifier Text: CAN_RX_FIFO_EVENT
|———————Node:) Text: )
|——————Node:argument_list Text: (ciFifoSta.byte[0] & CAN_RX_FIFO_ALL_EVENTS)
|———————Node:( Text: (
|———————Node:binary_expression Text: ciFifoSta.byte[0] & CAN_RX_FIFO_ALL_EVENTS
|————————Node:subscript_expression Text: ciFifoSta.byte[0]
|—————————Node:field_expression Text: ciFifoSta.byte
|——————————Node:identifier Text: ciFifoSta
|——————————Node:. Text: .
|——————————Node:field_identifier Text: byte
|—————————Node:subscript_argument_list Text: [0]
|——————————Node:[ Text: [
|——————————Node:number_literal Text: 0
|——————————Node:] Text: ]
|————————Node:& Text: &
|————————Node:identifier Text: CAN_RX_FIFO_ALL_EVENTS
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_ReceiveMessageGet(CAN_FIFO_CHANNEL channel,
                                              CAN_RX_MSGOBJ *rxObj,
                                              uint8_t *rxd, uint8_t nBytes) {
  uint8_t n = 0;
  uint8_t i = 0;
  uint16_t a;
  uint32_t fifoReg[3];
  REG_CiFIFOCON ciFifoCon;
  REG_CiFIFOSTA ciFifoSta;
  REG_CiFIFOUA ciFifoUa;
  int8_t spiTransferError = 0;

  // Get FIFO registers
  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);

  spiTransferError = mcp2518fd_ReadWordArray(a, fifoReg, 3);
  if (spiTransferError) {
    return -1;
  }

  // Check that it is a receive buffer
  ciFifoCon.word = fifoReg[0];
  ciFifoCon.txBF.TxEnable = 0;
  if (ciFifoCon.txBF.TxEnable) {
    return -2;
  }

  // Get Status
  ciFifoSta.word = fifoReg[1];
  // Get address
  ciFifoUa.word = fifoReg[2];
#ifdef USERADDRESS_TIMES_FOUR
  a = 4 * ciFifoUa.bF.UserAddress;
#else
  a = ciFifoUa.bF.UserAddress;
#endif
  a += cRAMADDR_START;

  // Number of bytes to read
  n = nBytes + 8; // Add 8 header bytes

  if (ciFifoCon.rxBF.RxTimeStampEnable) {
    n += 4; // Add 4 time stamp bytes
  }

  // Make sure we read a multiple of 4 bytes from RAM
  if (n % 4) {
    n = n + 4 - (n % 4);
  }

  // Read rxObj using one access
  uint8_t ba[MAX_MSG_SIZE];

  if (n > MAX_MSG_SIZE) {
    n = MAX_MSG_SIZE;
  }

  spiTransferError = mcp2518fd_ReadByteArray(a, ba, n);
  if (spiTransferError) {
    return -3;
  }

  // Assign message header
  REG_t myReg;

  myReg.byte[0] = ba[0];
  myReg.byte[1] = ba[1];
  myReg.byte[2] = ba[2];
  myReg.byte[3] = ba[3];
  rxObj->word[0] = myReg.word;

  myReg.byte[0] = ba[4];
  myReg.byte[1] = ba[5];
  myReg.byte[2] = ba[6];
  myReg.byte[3] = ba[7];
  rxObj->word[1] = myReg.word;

  if (ciFifoCon.rxBF.RxTimeStampEnable) {
    myReg.byte[0] = ba[8];
    myReg.byte[1] = ba[9];
    myReg.byte[2] = ba[10];
    myReg.byte[3] = ba[11];
    rxObj->word[2] = myReg.word;

    // Assign message data
    for (i = 0; i < nBytes; i++) {
      rxd[i] = ba[i + 12];
    }
  } else {
    rxObj->word[2] = 0;

    // Assign message data
    for (i = 0; i < nBytes; i++) {
      rxd[i] = ba[i + 8];
    }
  }

  // UINC channel
  spiTransferError = mcp2518fd_ReceiveChannelUpdate(channel);
  if (spiTransferError) {
    return -4;
  }

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_ReceiveMessageGet(CAN_FIFO_CHANNEL channel,
                                              CAN_RX_MSGOBJ *rxObj,
                                              uint8_t *rxd, uint8_t nBytes)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_ReceiveMessageGet
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_ReceiveMessageGet
|———Node:parameter_list Text: (CAN_FIFO_CHANNEL channel,
                                              CAN_RX_MSGOBJ *rxObj,
                                              uint8_t *rxd, uint8_t nBytes)
|————Node:( Text: (
|————Node:parameter_declaration Text: CAN_FIFO_CHANNEL channel
|—————Node:type_identifier Text: CAN_FIFO_CHANNEL
|—————Node:identifier Text: channel
|————Node:, Text: ,
|————Node:parameter_declaration Text: CAN_RX_MSGOBJ *rxObj
|—————Node:type_identifier Text: CAN_RX_MSGOBJ
|—————Node:pointer_declarator Text: *rxObj
|——————Node:* Text: *
|——————Node:identifier Text: rxObj
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint8_t *rxd
|—————Node:primitive_type Text: uint8_t
|—————Node:pointer_declarator Text: *rxd
|——————Node:* Text: *
|——————Node:identifier Text: rxd
|————Node:, Text: ,
|————Node:parameter_declaration Text: uint8_t nBytes
|—————Node:primitive_type Text: uint8_t
|—————Node:identifier Text: nBytes
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint8_t n = 0;
  uint8_t i = 0;
  uint16_t a;
  uint32_t fifoReg[3];
  REG_CiFIFOCON ciFifoCon;
  REG_CiFIFOSTA ciFifoSta;
  REG_CiFIFOUA ciFifoUa;
  int8_t spiTransferError = 0;

  // Get FIFO registers
  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);

  spiTransferError = mcp2518fd_ReadWordArray(a, fifoReg, 3);
  if (spiTransferError) {
    return -1;
  }

  // Check that it is a receive buffer
  ciFifoCon.word = fifoReg[0];
  ciFifoCon.txBF.TxEnable = 0;
  if (ciFifoCon.txBF.TxEnable) {
    return -2;
  }

  // Get Status
  ciFifoSta.word = fifoReg[1];
  // Get address
  ciFifoUa.word = fifoReg[2];
#ifdef USERADDRESS_TIMES_FOUR
  a = 4 * ciFifoUa.bF.UserAddress;
#else
  a = ciFifoUa.bF.UserAddress;
#endif
  a += cRAMADDR_START;

  // Number of bytes to read
  n = nBytes + 8; // Add 8 header bytes

  if (ciFifoCon.rxBF.RxTimeStampEnable) {
    n += 4; // Add 4 time stamp bytes
  }

  // Make sure we read a multiple of 4 bytes from RAM
  if (n % 4) {
    n = n + 4 - (n % 4);
  }

  // Read rxObj using one access
  uint8_t ba[MAX_MSG_SIZE];

  if (n > MAX_MSG_SIZE) {
    n = MAX_MSG_SIZE;
  }

  spiTransferError = mcp2518fd_ReadByteArray(a, ba, n);
  if (spiTransferError) {
    return -3;
  }

  // Assign message header
  REG_t myReg;

  myReg.byte[0] = ba[0];
  myReg.byte[1] = ba[1];
  myReg.byte[2] = ba[2];
  myReg.byte[3] = ba[3];
  rxObj->word[0] = myReg.word;

  myReg.byte[0] = ba[4];
  myReg.byte[1] = ba[5];
  myReg.byte[2] = ba[6];
  myReg.byte[3] = ba[7];
  rxObj->word[1] = myReg.word;

  if (ciFifoCon.rxBF.RxTimeStampEnable) {
    myReg.byte[0] = ba[8];
    myReg.byte[1] = ba[9];
    myReg.byte[2] = ba[10];
    myReg.byte[3] = ba[11];
    rxObj->word[2] = myReg.word;

    // Assign message data
    for (i = 0; i < nBytes; i++) {
      rxd[i] = ba[i + 12];
    }
  } else {
    rxObj->word[2] = 0;

    // Assign message data
    for (i = 0; i < nBytes; i++) {
      rxd[i] = ba[i + 8];
    }
  }

  // UINC channel
  spiTransferError = mcp2518fd_ReceiveChannelUpdate(channel);
  if (spiTransferError) {
    return -4;
  }

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: uint8_t n = 0;
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: n = 0
|—————Node:identifier Text: n
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint8_t i = 0;
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: i = 0
|—————Node:identifier Text: i
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint16_t a;
|————Node:primitive_type Text: uint16_t
|————Node:identifier Text: a
|————Node:; Text: ;
|———Node:declaration Text: uint32_t fifoReg[3];
|————Node:primitive_type Text: uint32_t
|————Node:array_declarator Text: fifoReg[3]
|—————Node:identifier Text: fifoReg
|—————Node:[ Text: [
|—————Node:number_literal Text: 3
|—————Node:] Text: ]
|————Node:; Text: ;
|———Node:declaration Text: REG_CiFIFOCON ciFifoCon;
|————Node:type_identifier Text: REG_CiFIFOCON
|————Node:identifier Text: ciFifoCon
|————Node:; Text: ;
|———Node:declaration Text: REG_CiFIFOSTA ciFifoSta;
|————Node:type_identifier Text: REG_CiFIFOSTA
|————Node:identifier Text: ciFifoSta
|————Node:; Text: ;
|———Node:declaration Text: REG_CiFIFOUA ciFifoUa;
|————Node:type_identifier Text: REG_CiFIFOUA
|————Node:identifier Text: ciFifoUa
|————Node:; Text: ;
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
|————Node:assignment_expression Text: a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET)
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:binary_expression Text: cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET)
|——————Node:identifier Text: cREGADDR_CiFIFOCON
|——————Node:+ Text: +
|——————Node:parenthesized_expression Text: (channel * CiFIFO_OFFSET)
|———————Node:( Text: (
|———————Node:binary_expression Text: channel * CiFIFO_OFFSET
|————————Node:identifier Text: channel
|————————Node:* Text: *
|————————Node:identifier Text: CiFIFO_OFFSET
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransferError = mcp2518fd_ReadWordArray(a, fifoReg, 3);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_ReadWordArray(a, fifoReg, 3)
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_ReadWordArray(a, fifoReg, 3)
|——————Node:identifier Text: mcp2518fd_ReadWordArray
|——————Node:argument_list Text: (a, fifoReg, 3)
|———————Node:( Text: (
|———————Node:identifier Text: a
|———————Node:, Text: ,
|———————Node:identifier Text: fifoReg
|———————Node:, Text: ,
|———————Node:number_literal Text: 3
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -1;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -1;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -1;
|——————Node:return Text: return
|——————Node:number_literal Text: -1
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:expression_statement Text: ciFifoCon.word = fifoReg[0];
|————Node:assignment_expression Text: ciFifoCon.word = fifoReg[0]
|—————Node:field_expression Text: ciFifoCon.word
|——————Node:identifier Text: ciFifoCon
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:subscript_expression Text: fifoReg[0]
|——————Node:identifier Text: fifoReg
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: ciFifoCon.txBF.TxEnable = 0;
|————Node:assignment_expression Text: ciFifoCon.txBF.TxEnable = 0
|—————Node:field_expression Text: ciFifoCon.txBF.TxEnable
|——————Node:field_expression Text: ciFifoCon.txBF
|———————Node:identifier Text: ciFifoCon
|———————Node:. Text: .
|———————Node:field_identifier Text: txBF
|——————Node:. Text: .
|——————Node:field_identifier Text: TxEnable
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:if_statement Text: if (ciFifoCon.txBF.TxEnable) {
    return -2;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (ciFifoCon.txBF.TxEnable)
|—————Node:( Text: (
|—————Node:field_expression Text: ciFifoCon.txBF.TxEnable
|——————Node:field_expression Text: ciFifoCon.txBF
|———————Node:identifier Text: ciFifoCon
|———————Node:. Text: .
|———————Node:field_identifier Text: txBF
|——————Node:. Text: .
|——————Node:field_identifier Text: TxEnable
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -2;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -2;
|——————Node:return Text: return
|——————Node:number_literal Text: -2
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:expression_statement Text: ciFifoSta.word = fifoReg[1];
|————Node:assignment_expression Text: ciFifoSta.word = fifoReg[1]
|—————Node:field_expression Text: ciFifoSta.word
|——————Node:identifier Text: ciFifoSta
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:subscript_expression Text: fifoReg[1]
|——————Node:identifier Text: fifoReg
|——————Node:subscript_argument_list Text: [1]
|———————Node:[ Text: [
|———————Node:number_literal Text: 1
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: ciFifoUa.word = fifoReg[2];
|————Node:assignment_expression Text: ciFifoUa.word = fifoReg[2]
|—————Node:field_expression Text: ciFifoUa.word
|——————Node:identifier Text: ciFifoUa
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:subscript_expression Text: fifoReg[2]
|——————Node:identifier Text: fifoReg
|——————Node:subscript_argument_list Text: [2]
|———————Node:[ Text: [
|———————Node:number_literal Text: 2
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef USERADDRESS_TIMES_FOUR
  a = 4 * ciFifoUa.bF.UserAddress;
#else
  a = ciFifoUa.bF.UserAddress;
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: USERADDRESS_TIMES_FOUR
|————Node:expression_statement Text: a = 4 * ciFifoUa.bF.UserAddress;
|—————Node:assignment_expression Text: a = 4 * ciFifoUa.bF.UserAddress
|——————Node:identifier Text: a
|——————Node:= Text: =
|——————Node:binary_expression Text: 4 * ciFifoUa.bF.UserAddress
|———————Node:number_literal Text: 4
|———————Node:* Text: *
|———————Node:field_expression Text: ciFifoUa.bF.UserAddress
|————————Node:field_expression Text: ciFifoUa.bF
|—————————Node:identifier Text: ciFifoUa
|—————————Node:. Text: .
|—————————Node:field_identifier Text: bF
|————————Node:. Text: .
|————————Node:field_identifier Text: UserAddress
|—————Node:; Text: ;
|————Node:preproc_else Text: #else
  a = ciFifoUa.bF.UserAddress;
|—————Node:#else Text: #else
|—————Node:expression_statement Text: a = ciFifoUa.bF.UserAddress;
|——————Node:assignment_expression Text: a = ciFifoUa.bF.UserAddress
|———————Node:identifier Text: a
|———————Node:= Text: =
|———————Node:field_expression Text: ciFifoUa.bF.UserAddress
|————————Node:field_expression Text: ciFifoUa.bF
|—————————Node:identifier Text: ciFifoUa
|—————————Node:. Text: .
|—————————Node:field_identifier Text: bF
|————————Node:. Text: .
|————————Node:field_identifier Text: UserAddress
|——————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: a += cRAMADDR_START;
|————Node:assignment_expression Text: a += cRAMADDR_START
|—————Node:identifier Text: a
|—————Node:+= Text: +=
|—————Node:identifier Text: cRAMADDR_START
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: n = nBytes + 8;
|————Node:assignment_expression Text: n = nBytes + 8
|—————Node:identifier Text: n
|—————Node:= Text: =
|—————Node:binary_expression Text: nBytes + 8
|——————Node:identifier Text: nBytes
|——————Node:+ Text: +
|——————Node:number_literal Text: 8
|————Node:; Text: ;
|———Node:comment
|———Node:if_statement Text: if (ciFifoCon.rxBF.RxTimeStampEnable) {
    n += 4; // Add 4 time stamp bytes
  }
|————Node:if Text: if
|————Node:condition_clause Text: (ciFifoCon.rxBF.RxTimeStampEnable)
|—————Node:( Text: (
|—————Node:field_expression Text: ciFifoCon.rxBF.RxTimeStampEnable
|——————Node:field_expression Text: ciFifoCon.rxBF
|———————Node:identifier Text: ciFifoCon
|———————Node:. Text: .
|———————Node:field_identifier Text: rxBF
|——————Node:. Text: .
|——————Node:field_identifier Text: RxTimeStampEnable
|—————Node:) Text: )
|————Node:compound_statement Text: {
    n += 4; // Add 4 time stamp bytes
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: n += 4;
|——————Node:assignment_expression Text: n += 4
|———————Node:identifier Text: n
|———————Node:+= Text: +=
|———————Node:number_literal Text: 4
|——————Node:; Text: ;
|—————Node:comment
|—————Node:} Text: }
|———Node:comment
|———Node:if_statement Text: if (n % 4) {
    n = n + 4 - (n % 4);
  }
|————Node:if Text: if
|————Node:condition_clause Text: (n % 4)
|—————Node:( Text: (
|—————Node:binary_expression Text: n % 4
|——————Node:identifier Text: n
|——————Node:% Text: %
|——————Node:number_literal Text: 4
|—————Node:) Text: )
|————Node:compound_statement Text: {
    n = n + 4 - (n % 4);
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: n = n + 4 - (n % 4);
|——————Node:assignment_expression Text: n = n + 4 - (n % 4)
|———————Node:identifier Text: n
|———————Node:= Text: =
|———————Node:binary_expression Text: n + 4 - (n % 4)
|————————Node:binary_expression Text: n + 4
|—————————Node:identifier Text: n
|—————————Node:+ Text: +
|—————————Node:number_literal Text: 4
|————————Node:- Text: -
|————————Node:parenthesized_expression Text: (n % 4)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: n % 4
|——————————Node:identifier Text: n
|——————————Node:% Text: %
|——————————Node:number_literal Text: 4
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:declaration Text: uint8_t ba[MAX_MSG_SIZE];
|————Node:primitive_type Text: uint8_t
|————Node:array_declarator Text: ba[MAX_MSG_SIZE]
|—————Node:identifier Text: ba
|—————Node:[ Text: [
|—————Node:identifier Text: MAX_MSG_SIZE
|—————Node:] Text: ]
|————Node:; Text: ;
|———Node:if_statement Text: if (n > MAX_MSG_SIZE) {
    n = MAX_MSG_SIZE;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (n > MAX_MSG_SIZE)
|—————Node:( Text: (
|—————Node:binary_expression Text: n > MAX_MSG_SIZE
|——————Node:identifier Text: n
|——————Node:> Text: >
|——————Node:identifier Text: MAX_MSG_SIZE
|—————Node:) Text: )
|————Node:compound_statement Text: {
    n = MAX_MSG_SIZE;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: n = MAX_MSG_SIZE;
|——————Node:assignment_expression Text: n = MAX_MSG_SIZE
|———————Node:identifier Text: n
|———————Node:= Text: =
|———————Node:identifier Text: MAX_MSG_SIZE
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: spiTransferError = mcp2518fd_ReadByteArray(a, ba, n);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_ReadByteArray(a, ba, n)
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_ReadByteArray(a, ba, n)
|——————Node:identifier Text: mcp2518fd_ReadByteArray
|——————Node:argument_list Text: (a, ba, n)
|———————Node:( Text: (
|———————Node:identifier Text: a
|———————Node:, Text: ,
|———————Node:identifier Text: ba
|———————Node:, Text: ,
|———————Node:identifier Text: n
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -3;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -3;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -3;
|——————Node:return Text: return
|——————Node:number_literal Text: -3
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:declaration Text: REG_t myReg;
|————Node:type_identifier Text: REG_t
|————Node:identifier Text: myReg
|————Node:; Text: ;
|———Node:expression_statement Text: myReg.byte[0] = ba[0];
|————Node:assignment_expression Text: myReg.byte[0] = ba[0]
|—————Node:subscript_expression Text: myReg.byte[0]
|——————Node:field_expression Text: myReg.byte
|———————Node:identifier Text: myReg
|———————Node:. Text: .
|———————Node:field_identifier Text: byte
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:subscript_expression Text: ba[0]
|——————Node:identifier Text: ba
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: myReg.byte[1] = ba[1];
|————Node:assignment_expression Text: myReg.byte[1] = ba[1]
|—————Node:subscript_expression Text: myReg.byte[1]
|——————Node:field_expression Text: myReg.byte
|———————Node:identifier Text: myReg
|———————Node:. Text: .
|———————Node:field_identifier Text: byte
|——————Node:subscript_argument_list Text: [1]
|———————Node:[ Text: [
|———————Node:number_literal Text: 1
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:subscript_expression Text: ba[1]
|——————Node:identifier Text: ba
|——————Node:subscript_argument_list Text: [1]
|———————Node:[ Text: [
|———————Node:number_literal Text: 1
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: myReg.byte[2] = ba[2];
|————Node:assignment_expression Text: myReg.byte[2] = ba[2]
|—————Node:subscript_expression Text: myReg.byte[2]
|——————Node:field_expression Text: myReg.byte
|———————Node:identifier Text: myReg
|———————Node:. Text: .
|———————Node:field_identifier Text: byte
|——————Node:subscript_argument_list Text: [2]
|———————Node:[ Text: [
|———————Node:number_literal Text: 2
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:subscript_expression Text: ba[2]
|——————Node:identifier Text: ba
|——————Node:subscript_argument_list Text: [2]
|———————Node:[ Text: [
|———————Node:number_literal Text: 2
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: myReg.byte[3] = ba[3];
|————Node:assignment_expression Text: myReg.byte[3] = ba[3]
|—————Node:subscript_expression Text: myReg.byte[3]
|——————Node:field_expression Text: myReg.byte
|———————Node:identifier Text: myReg
|———————Node:. Text: .
|———————Node:field_identifier Text: byte
|——————Node:subscript_argument_list Text: [3]
|———————Node:[ Text: [
|———————Node:number_literal Text: 3
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:subscript_expression Text: ba[3]
|——————Node:identifier Text: ba
|——————Node:subscript_argument_list Text: [3]
|———————Node:[ Text: [
|———————Node:number_literal Text: 3
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: rxObj->word[0] = myReg.word;
|————Node:assignment_expression Text: rxObj->word[0] = myReg.word
|—————Node:subscript_expression Text: rxObj->word[0]
|——————Node:field_expression Text: rxObj->word
|———————Node:identifier Text: rxObj
|———————Node:-> Text: ->
|———————Node:field_identifier Text: word
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:field_expression Text: myReg.word
|——————Node:identifier Text: myReg
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|————Node:; Text: ;
|———Node:expression_statement Text: myReg.byte[0] = ba[4];
|————Node:assignment_expression Text: myReg.byte[0] = ba[4]
|—————Node:subscript_expression Text: myReg.byte[0]
|——————Node:field_expression Text: myReg.byte
|———————Node:identifier Text: myReg
|———————Node:. Text: .
|———————Node:field_identifier Text: byte
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:subscript_expression Text: ba[4]
|——————Node:identifier Text: ba
|——————Node:subscript_argument_list Text: [4]
|———————Node:[ Text: [
|———————Node:number_literal Text: 4
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: myReg.byte[1] = ba[5];
|————Node:assignment_expression Text: myReg.byte[1] = ba[5]
|—————Node:subscript_expression Text: myReg.byte[1]
|——————Node:field_expression Text: myReg.byte
|———————Node:identifier Text: myReg
|———————Node:. Text: .
|———————Node:field_identifier Text: byte
|——————Node:subscript_argument_list Text: [1]
|———————Node:[ Text: [
|———————Node:number_literal Text: 1
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:subscript_expression Text: ba[5]
|——————Node:identifier Text: ba
|——————Node:subscript_argument_list Text: [5]
|———————Node:[ Text: [
|———————Node:number_literal Text: 5
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: myReg.byte[2] = ba[6];
|————Node:assignment_expression Text: myReg.byte[2] = ba[6]
|—————Node:subscript_expression Text: myReg.byte[2]
|——————Node:field_expression Text: myReg.byte
|———————Node:identifier Text: myReg
|———————Node:. Text: .
|———————Node:field_identifier Text: byte
|——————Node:subscript_argument_list Text: [2]
|———————Node:[ Text: [
|———————Node:number_literal Text: 2
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:subscript_expression Text: ba[6]
|——————Node:identifier Text: ba
|——————Node:subscript_argument_list Text: [6]
|———————Node:[ Text: [
|———————Node:number_literal Text: 6
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: myReg.byte[3] = ba[7];
|————Node:assignment_expression Text: myReg.byte[3] = ba[7]
|—————Node:subscript_expression Text: myReg.byte[3]
|——————Node:field_expression Text: myReg.byte
|———————Node:identifier Text: myReg
|———————Node:. Text: .
|———————Node:field_identifier Text: byte
|——————Node:subscript_argument_list Text: [3]
|———————Node:[ Text: [
|———————Node:number_literal Text: 3
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:subscript_expression Text: ba[7]
|——————Node:identifier Text: ba
|——————Node:subscript_argument_list Text: [7]
|———————Node:[ Text: [
|———————Node:number_literal Text: 7
|———————Node:] Text: ]
|————Node:; Text: ;
|———Node:expression_statement Text: rxObj->word[1] = myReg.word;
|————Node:assignment_expression Text: rxObj->word[1] = myReg.word
|—————Node:subscript_expression Text: rxObj->word[1]
|——————Node:field_expression Text: rxObj->word
|———————Node:identifier Text: rxObj
|———————Node:-> Text: ->
|———————Node:field_identifier Text: word
|——————Node:subscript_argument_list Text: [1]
|———————Node:[ Text: [
|———————Node:number_literal Text: 1
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:field_expression Text: myReg.word
|——————Node:identifier Text: myReg
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|————Node:; Text: ;
|———Node:if_statement Text: if (ciFifoCon.rxBF.RxTimeStampEnable) {
    myReg.byte[0] = ba[8];
    myReg.byte[1] = ba[9];
    myReg.byte[2] = ba[10];
    myReg.byte[3] = ba[11];
    rxObj->word[2] = myReg.word;

    // Assign message data
    for (i = 0; i < nBytes; i++) {
      rxd[i] = ba[i + 12];
    }
  } else {
    rxObj->word[2] = 0;

    // Assign message data
    for (i = 0; i < nBytes; i++) {
      rxd[i] = ba[i + 8];
    }
  }
|————Node:if Text: if
|————Node:condition_clause Text: (ciFifoCon.rxBF.RxTimeStampEnable)
|—————Node:( Text: (
|—————Node:field_expression Text: ciFifoCon.rxBF.RxTimeStampEnable
|——————Node:field_expression Text: ciFifoCon.rxBF
|———————Node:identifier Text: ciFifoCon
|———————Node:. Text: .
|———————Node:field_identifier Text: rxBF
|——————Node:. Text: .
|——————Node:field_identifier Text: RxTimeStampEnable
|—————Node:) Text: )
|————Node:compound_statement Text: {
    myReg.byte[0] = ba[8];
    myReg.byte[1] = ba[9];
    myReg.byte[2] = ba[10];
    myReg.byte[3] = ba[11];
    rxObj->word[2] = myReg.word;

    // Assign message data
    for (i = 0; i < nBytes; i++) {
      rxd[i] = ba[i + 12];
    }
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: myReg.byte[0] = ba[8];
|——————Node:assignment_expression Text: myReg.byte[0] = ba[8]
|———————Node:subscript_expression Text: myReg.byte[0]
|————————Node:field_expression Text: myReg.byte
|—————————Node:identifier Text: myReg
|—————————Node:. Text: .
|—————————Node:field_identifier Text: byte
|————————Node:subscript_argument_list Text: [0]
|—————————Node:[ Text: [
|—————————Node:number_literal Text: 0
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:subscript_expression Text: ba[8]
|————————Node:identifier Text: ba
|————————Node:subscript_argument_list Text: [8]
|—————————Node:[ Text: [
|—————————Node:number_literal Text: 8
|—————————Node:] Text: ]
|——————Node:; Text: ;
|—————Node:expression_statement Text: myReg.byte[1] = ba[9];
|——————Node:assignment_expression Text: myReg.byte[1] = ba[9]
|———————Node:subscript_expression Text: myReg.byte[1]
|————————Node:field_expression Text: myReg.byte
|—————————Node:identifier Text: myReg
|—————————Node:. Text: .
|—————————Node:field_identifier Text: byte
|————————Node:subscript_argument_list Text: [1]
|—————————Node:[ Text: [
|—————————Node:number_literal Text: 1
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:subscript_expression Text: ba[9]
|————————Node:identifier Text: ba
|————————Node:subscript_argument_list Text: [9]
|—————————Node:[ Text: [
|—————————Node:number_literal Text: 9
|—————————Node:] Text: ]
|——————Node:; Text: ;
|—————Node:expression_statement Text: myReg.byte[2] = ba[10];
|——————Node:assignment_expression Text: myReg.byte[2] = ba[10]
|———————Node:subscript_expression Text: myReg.byte[2]
|————————Node:field_expression Text: myReg.byte
|—————————Node:identifier Text: myReg
|—————————Node:. Text: .
|—————————Node:field_identifier Text: byte
|————————Node:subscript_argument_list Text: [2]
|—————————Node:[ Text: [
|—————————Node:number_literal Text: 2
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:subscript_expression Text: ba[10]
|————————Node:identifier Text: ba
|————————Node:subscript_argument_list Text: [10]
|—————————Node:[ Text: [
|—————————Node:number_literal Text: 10
|—————————Node:] Text: ]
|——————Node:; Text: ;
|—————Node:expression_statement Text: myReg.byte[3] = ba[11];
|——————Node:assignment_expression Text: myReg.byte[3] = ba[11]
|———————Node:subscript_expression Text: myReg.byte[3]
|————————Node:field_expression Text: myReg.byte
|—————————Node:identifier Text: myReg
|—————————Node:. Text: .
|—————————Node:field_identifier Text: byte
|————————Node:subscript_argument_list Text: [3]
|—————————Node:[ Text: [
|—————————Node:number_literal Text: 3
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:subscript_expression Text: ba[11]
|————————Node:identifier Text: ba
|————————Node:subscript_argument_list Text: [11]
|—————————Node:[ Text: [
|—————————Node:number_literal Text: 11
|—————————Node:] Text: ]
|——————Node:; Text: ;
|—————Node:expression_statement Text: rxObj->word[2] = myReg.word;
|——————Node:assignment_expression Text: rxObj->word[2] = myReg.word
|———————Node:subscript_expression Text: rxObj->word[2]
|————————Node:field_expression Text: rxObj->word
|—————————Node:identifier Text: rxObj
|—————————Node:-> Text: ->
|—————————Node:field_identifier Text: word
|————————Node:subscript_argument_list Text: [2]
|—————————Node:[ Text: [
|—————————Node:number_literal Text: 2
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:field_expression Text: myReg.word
|————————Node:identifier Text: myReg
|————————Node:. Text: .
|————————Node:field_identifier Text: word
|——————Node:; Text: ;
|—————Node:comment
|—————Node:for_statement Text: for (i = 0; i < nBytes; i++) {
      rxd[i] = ba[i + 12];
    }
|——————Node:for Text: for
|——————Node:( Text: (
|——————Node:assignment_expression Text: i = 0
|———————Node:identifier Text: i
|———————Node:= Text: =
|———————Node:number_literal Text: 0
|——————Node:; Text: ;
|——————Node:binary_expression Text: i < nBytes
|———————Node:identifier Text: i
|———————Node:< Text: <
|———————Node:identifier Text: nBytes
|——————Node:; Text: ;
|——————Node:update_expression Text: i++
|———————Node:identifier Text: i
|———————Node:++ Text: ++
|——————Node:) Text: )
|——————Node:compound_statement Text: {
      rxd[i] = ba[i + 12];
    }
|———————Node:{ Text: {
|———————Node:expression_statement Text: rxd[i] = ba[i + 12];
|————————Node:assignment_expression Text: rxd[i] = ba[i + 12]
|—————————Node:subscript_expression Text: rxd[i]
|——————————Node:identifier Text: rxd
|——————————Node:subscript_argument_list Text: [i]
|———————————Node:[ Text: [
|———————————Node:identifier Text: i
|———————————Node:] Text: ]
|—————————Node:= Text: =
|—————————Node:subscript_expression Text: ba[i + 12]
|——————————Node:identifier Text: ba
|——————————Node:subscript_argument_list Text: [i + 12]
|———————————Node:[ Text: [
|———————————Node:binary_expression Text: i + 12
|————————————Node:identifier Text: i
|————————————Node:+ Text: +
|————————————Node:number_literal Text: 12
|———————————Node:] Text: ]
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:} Text: }
|————Node:else_clause Text: else {
    rxObj->word[2] = 0;

    // Assign message data
    for (i = 0; i < nBytes; i++) {
      rxd[i] = ba[i + 8];
    }
  }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
    rxObj->word[2] = 0;

    // Assign message data
    for (i = 0; i < nBytes; i++) {
      rxd[i] = ba[i + 8];
    }
  }
|——————Node:{ Text: {
|——————Node:expression_statement Text: rxObj->word[2] = 0;
|———————Node:assignment_expression Text: rxObj->word[2] = 0
|————————Node:subscript_expression Text: rxObj->word[2]
|—————————Node:field_expression Text: rxObj->word
|——————————Node:identifier Text: rxObj
|——————————Node:-> Text: ->
|——————————Node:field_identifier Text: word
|—————————Node:subscript_argument_list Text: [2]
|——————————Node:[ Text: [
|——————————Node:number_literal Text: 2
|——————————Node:] Text: ]
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:comment
|——————Node:for_statement Text: for (i = 0; i < nBytes; i++) {
      rxd[i] = ba[i + 8];
    }
|———————Node:for Text: for
|———————Node:( Text: (
|———————Node:assignment_expression Text: i = 0
|————————Node:identifier Text: i
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|———————Node:binary_expression Text: i < nBytes
|————————Node:identifier Text: i
|————————Node:< Text: <
|————————Node:identifier Text: nBytes
|———————Node:; Text: ;
|———————Node:update_expression Text: i++
|————————Node:identifier Text: i
|————————Node:++ Text: ++
|———————Node:) Text: )
|———————Node:compound_statement Text: {
      rxd[i] = ba[i + 8];
    }
|————————Node:{ Text: {
|————————Node:expression_statement Text: rxd[i] = ba[i + 8];
|—————————Node:assignment_expression Text: rxd[i] = ba[i + 8]
|——————————Node:subscript_expression Text: rxd[i]
|———————————Node:identifier Text: rxd
|———————————Node:subscript_argument_list Text: [i]
|————————————Node:[ Text: [
|————————————Node:identifier Text: i
|————————————Node:] Text: ]
|——————————Node:= Text: =
|——————————Node:subscript_expression Text: ba[i + 8]
|———————————Node:identifier Text: ba
|———————————Node:subscript_argument_list Text: [i + 8]
|————————————Node:[ Text: [
|————————————Node:binary_expression Text: i + 8
|—————————————Node:identifier Text: i
|—————————————Node:+ Text: +
|—————————————Node:number_literal Text: 8
|————————————Node:] Text: ]
|—————————Node:; Text: ;
|————————Node:} Text: }
|——————Node:} Text: }
|———Node:comment
|———Node:expression_statement Text: spiTransferError = mcp2518fd_ReceiveChannelUpdate(channel);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_ReceiveChannelUpdate(channel)
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_ReceiveChannelUpdate(channel)
|——————Node:identifier Text: mcp2518fd_ReceiveChannelUpdate
|——————Node:argument_list Text: (channel)
|———————Node:( Text: (
|———————Node:identifier Text: channel
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -4;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -4;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -4;
|——————Node:return Text: return
|——————Node:number_literal Text: -4
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_ReceiveChannelUpdate(CAN_FIFO_CHANNEL channel) {
  uint16_t a = 0;
  REG_CiFIFOCON ciFifoCon;
  int8_t spiTransferError = 0;
  ciFifoCon.word = 0;

  // Set UINC
  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) +
      1; // Byte that contains FRESET
  ciFifoCon.rxBF.UINC = 1;

  // Write byte
  spiTransferError = mcp2518fd_WriteByte(a, ciFifoCon.byte[1]);

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_ReceiveChannelUpdate(CAN_FIFO_CHANNEL channel)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_ReceiveChannelUpdate
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_ReceiveChannelUpdate
|———Node:parameter_list Text: (CAN_FIFO_CHANNEL channel)
|————Node:( Text: (
|————Node:parameter_declaration Text: CAN_FIFO_CHANNEL channel
|—————Node:type_identifier Text: CAN_FIFO_CHANNEL
|—————Node:identifier Text: channel
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint16_t a = 0;
  REG_CiFIFOCON ciFifoCon;
  int8_t spiTransferError = 0;
  ciFifoCon.word = 0;

  // Set UINC
  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) +
      1; // Byte that contains FRESET
  ciFifoCon.rxBF.UINC = 1;

  // Write byte
  spiTransferError = mcp2518fd_WriteByte(a, ciFifoCon.byte[1]);

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: uint16_t a = 0;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: a = 0
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: REG_CiFIFOCON ciFifoCon;
|————Node:type_identifier Text: REG_CiFIFOCON
|————Node:identifier Text: ciFifoCon
|————Node:; Text: ;
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: ciFifoCon.word = 0;
|————Node:assignment_expression Text: ciFifoCon.word = 0
|—————Node:field_expression Text: ciFifoCon.word
|——————Node:identifier Text: ciFifoCon
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) +
      1;
|————Node:assignment_expression Text: a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) +
      1
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:binary_expression Text: cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) +
      1
|——————Node:binary_expression Text: cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET)
|———————Node:identifier Text: cREGADDR_CiFIFOCON
|———————Node:+ Text: +
|———————Node:parenthesized_expression Text: (channel * CiFIFO_OFFSET)
|————————Node:( Text: (
|————————Node:binary_expression Text: channel * CiFIFO_OFFSET
|—————————Node:identifier Text: channel
|—————————Node:* Text: *
|—————————Node:identifier Text: CiFIFO_OFFSET
|————————Node:) Text: )
|——————Node:+ Text: +
|——————Node:number_literal Text: 1
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: ciFifoCon.rxBF.UINC = 1;
|————Node:assignment_expression Text: ciFifoCon.rxBF.UINC = 1
|—————Node:field_expression Text: ciFifoCon.rxBF.UINC
|——————Node:field_expression Text: ciFifoCon.rxBF
|———————Node:identifier Text: ciFifoCon
|———————Node:. Text: .
|———————Node:field_identifier Text: rxBF
|——————Node:. Text: .
|——————Node:field_identifier Text: UINC
|—————Node:= Text: =
|—————Node:number_literal Text: 1
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: spiTransferError = mcp2518fd_WriteByte(a, ciFifoCon.byte[1]);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_WriteByte(a, ciFifoCon.byte[1])
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_WriteByte(a, ciFifoCon.byte[1])
|——————Node:identifier Text: mcp2518fd_WriteByte
|——————Node:argument_list Text: (a, ciFifoCon.byte[1])
|———————Node:( Text: (
|———————Node:identifier Text: a
|———————Node:, Text: ,
|———————Node:subscript_expression Text: ciFifoCon.byte[1]
|————————Node:field_expression Text: ciFifoCon.byte
|—————————Node:identifier Text: ciFifoCon
|—————————Node:. Text: .
|—————————Node:field_identifier Text: byte
|————————Node:subscript_argument_list Text: [1]
|—————————Node:[ Text: [
|—————————Node:number_literal Text: 1
|—————————Node:] Text: ]
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_TransmitChannelUpdate(CAN_FIFO_CHANNEL channel,
                                                  bool flush) {
  uint16_t a;
  REG_CiFIFOCON ciFifoCon;
  int8_t spiTransferError = 0;

  // Set UINC
  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) +
      1; // Byte that contains FRESET
  ciFifoCon.word = 0;
  ciFifoCon.txBF.UINC = 1;

  // Set TXREQ
  if (flush) {
    ciFifoCon.txBF.TxRequest = 1;
  }

  spiTransferError = mcp2518fd_WriteByte(a, ciFifoCon.byte[1]);
  if (spiTransferError) {
    return -1;
  }

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_TransmitChannelUpdate(CAN_FIFO_CHANNEL channel,
                                                  bool flush)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_TransmitChannelUpdate
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_TransmitChannelUpdate
|———Node:parameter_list Text: (CAN_FIFO_CHANNEL channel,
                                                  bool flush)
|————Node:( Text: (
|————Node:parameter_declaration Text: CAN_FIFO_CHANNEL channel
|—————Node:type_identifier Text: CAN_FIFO_CHANNEL
|—————Node:identifier Text: channel
|————Node:, Text: ,
|————Node:parameter_declaration Text: bool flush
|—————Node:primitive_type Text: bool
|—————Node:identifier Text: flush
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint16_t a;
  REG_CiFIFOCON ciFifoCon;
  int8_t spiTransferError = 0;

  // Set UINC
  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) +
      1; // Byte that contains FRESET
  ciFifoCon.word = 0;
  ciFifoCon.txBF.UINC = 1;

  // Set TXREQ
  if (flush) {
    ciFifoCon.txBF.TxRequest = 1;
  }

  spiTransferError = mcp2518fd_WriteByte(a, ciFifoCon.byte[1]);
  if (spiTransferError) {
    return -1;
  }

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: uint16_t a;
|————Node:primitive_type Text: uint16_t
|————Node:identifier Text: a
|————Node:; Text: ;
|———Node:declaration Text: REG_CiFIFOCON ciFifoCon;
|————Node:type_identifier Text: REG_CiFIFOCON
|————Node:identifier Text: ciFifoCon
|————Node:; Text: ;
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) +
      1;
|————Node:assignment_expression Text: a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) +
      1
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:binary_expression Text: cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) +
      1
|——————Node:binary_expression Text: cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET)
|———————Node:identifier Text: cREGADDR_CiFIFOCON
|———————Node:+ Text: +
|———————Node:parenthesized_expression Text: (channel * CiFIFO_OFFSET)
|————————Node:( Text: (
|————————Node:binary_expression Text: channel * CiFIFO_OFFSET
|—————————Node:identifier Text: channel
|—————————Node:* Text: *
|—————————Node:identifier Text: CiFIFO_OFFSET
|————————Node:) Text: )
|——————Node:+ Text: +
|——————Node:number_literal Text: 1
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: ciFifoCon.word = 0;
|————Node:assignment_expression Text: ciFifoCon.word = 0
|—————Node:field_expression Text: ciFifoCon.word
|——————Node:identifier Text: ciFifoCon
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: ciFifoCon.txBF.UINC = 1;
|————Node:assignment_expression Text: ciFifoCon.txBF.UINC = 1
|—————Node:field_expression Text: ciFifoCon.txBF.UINC
|——————Node:field_expression Text: ciFifoCon.txBF
|———————Node:identifier Text: ciFifoCon
|———————Node:. Text: .
|———————Node:field_identifier Text: txBF
|——————Node:. Text: .
|——————Node:field_identifier Text: UINC
|—————Node:= Text: =
|—————Node:number_literal Text: 1
|————Node:; Text: ;
|———Node:comment
|———Node:if_statement Text: if (flush) {
    ciFifoCon.txBF.TxRequest = 1;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (flush)
|—————Node:( Text: (
|—————Node:identifier Text: flush
|—————Node:) Text: )
|————Node:compound_statement Text: {
    ciFifoCon.txBF.TxRequest = 1;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: ciFifoCon.txBF.TxRequest = 1;
|——————Node:assignment_expression Text: ciFifoCon.txBF.TxRequest = 1
|———————Node:field_expression Text: ciFifoCon.txBF.TxRequest
|————————Node:field_expression Text: ciFifoCon.txBF
|—————————Node:identifier Text: ciFifoCon
|—————————Node:. Text: .
|—————————Node:field_identifier Text: txBF
|————————Node:. Text: .
|————————Node:field_identifier Text: TxRequest
|———————Node:= Text: =
|———————Node:number_literal Text: 1
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: spiTransferError = mcp2518fd_WriteByte(a, ciFifoCon.byte[1]);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_WriteByte(a, ciFifoCon.byte[1])
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_WriteByte(a, ciFifoCon.byte[1])
|——————Node:identifier Text: mcp2518fd_WriteByte
|——————Node:argument_list Text: (a, ciFifoCon.byte[1])
|———————Node:( Text: (
|———————Node:identifier Text: a
|———————Node:, Text: ,
|———————Node:subscript_expression Text: ciFifoCon.byte[1]
|————————Node:field_expression Text: ciFifoCon.byte
|—————————Node:identifier Text: ciFifoCon
|—————————Node:. Text: .
|—————————Node:field_identifier Text: byte
|————————Node:subscript_argument_list Text: [1]
|—————————Node:[ Text: [
|—————————Node:number_literal Text: 1
|—————————Node:] Text: ]
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -1;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -1;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -1;
|——————Node:return Text: return
|——————Node:number_literal Text: -1
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t
mcp2518fd::mcp2518fd_ReceiveChannelStatusGet(CAN_FIFO_CHANNEL channel,
                                             CAN_RX_FIFO_STATUS *status) {
  uint16_t a;
  REG_CiFIFOSTA ciFifoSta;
  int8_t spiTransferError = 0;

  // Read
  ciFifoSta.word = 0;
  a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);

  spiTransferError = mcp2518fd_ReadByte(a, &ciFifoSta.byte[0]);
  if (spiTransferError) {
    return -1;
  }

  // Update data
  *status = (CAN_RX_FIFO_STATUS)(ciFifoSta.byte[0] & 0x0F);

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_ReceiveChannelStatusGet(CAN_FIFO_CHANNEL channel,
                                             CAN_RX_FIFO_STATUS *status)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_ReceiveChannelStatusGet
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_ReceiveChannelStatusGet
|———Node:parameter_list Text: (CAN_FIFO_CHANNEL channel,
                                             CAN_RX_FIFO_STATUS *status)
|————Node:( Text: (
|————Node:parameter_declaration Text: CAN_FIFO_CHANNEL channel
|—————Node:type_identifier Text: CAN_FIFO_CHANNEL
|—————Node:identifier Text: channel
|————Node:, Text: ,
|————Node:parameter_declaration Text: CAN_RX_FIFO_STATUS *status
|—————Node:type_identifier Text: CAN_RX_FIFO_STATUS
|—————Node:pointer_declarator Text: *status
|——————Node:* Text: *
|——————Node:identifier Text: status
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint16_t a;
  REG_CiFIFOSTA ciFifoSta;
  int8_t spiTransferError = 0;

  // Read
  ciFifoSta.word = 0;
  a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);

  spiTransferError = mcp2518fd_ReadByte(a, &ciFifoSta.byte[0]);
  if (spiTransferError) {
    return -1;
  }

  // Update data
  *status = (CAN_RX_FIFO_STATUS)(ciFifoSta.byte[0] & 0x0F);

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: uint16_t a;
|————Node:primitive_type Text: uint16_t
|————Node:identifier Text: a
|————Node:; Text: ;
|———Node:declaration Text: REG_CiFIFOSTA ciFifoSta;
|————Node:type_identifier Text: REG_CiFIFOSTA
|————Node:identifier Text: ciFifoSta
|————Node:; Text: ;
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: ciFifoSta.word = 0;
|————Node:assignment_expression Text: ciFifoSta.word = 0
|—————Node:field_expression Text: ciFifoSta.word
|——————Node:identifier Text: ciFifoSta
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
|————Node:assignment_expression Text: a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET)
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:binary_expression Text: cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET)
|——————Node:identifier Text: cREGADDR_CiFIFOSTA
|——————Node:+ Text: +
|——————Node:parenthesized_expression Text: (channel * CiFIFO_OFFSET)
|———————Node:( Text: (
|———————Node:binary_expression Text: channel * CiFIFO_OFFSET
|————————Node:identifier Text: channel
|————————Node:* Text: *
|————————Node:identifier Text: CiFIFO_OFFSET
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransferError = mcp2518fd_ReadByte(a, &ciFifoSta.byte[0]);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_ReadByte(a, &ciFifoSta.byte[0])
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_ReadByte(a, &ciFifoSta.byte[0])
|——————Node:identifier Text: mcp2518fd_ReadByte
|——————Node:argument_list Text: (a, &ciFifoSta.byte[0])
|———————Node:( Text: (
|———————Node:identifier Text: a
|———————Node:, Text: ,
|———————Node:pointer_expression Text: &ciFifoSta.byte[0]
|————————Node:& Text: &
|————————Node:subscript_expression Text: ciFifoSta.byte[0]
|—————————Node:field_expression Text: ciFifoSta.byte
|——————————Node:identifier Text: ciFifoSta
|——————————Node:. Text: .
|——————————Node:field_identifier Text: byte
|—————————Node:subscript_argument_list Text: [0]
|——————————Node:[ Text: [
|——————————Node:number_literal Text: 0
|——————————Node:] Text: ]
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -1;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -1;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -1;
|——————Node:return Text: return
|——————Node:number_literal Text: -1
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:expression_statement Text: *status = (CAN_RX_FIFO_STATUS)(ciFifoSta.byte[0] & 0x0F);
|————Node:assignment_expression Text: *status = (CAN_RX_FIFO_STATUS)(ciFifoSta.byte[0] & 0x0F)
|—————Node:pointer_expression Text: *status
|——————Node:* Text: *
|——————Node:identifier Text: status
|—————Node:= Text: =
|—————Node:call_expression Text: (CAN_RX_FIFO_STATUS)(ciFifoSta.byte[0] & 0x0F)
|——————Node:parenthesized_expression Text: (CAN_RX_FIFO_STATUS)
|———————Node:( Text: (
|———————Node:identifier Text: CAN_RX_FIFO_STATUS
|———————Node:) Text: )
|——————Node:argument_list Text: (ciFifoSta.byte[0] & 0x0F)
|———————Node:( Text: (
|———————Node:binary_expression Text: ciFifoSta.byte[0] & 0x0F
|————————Node:subscript_expression Text: ciFifoSta.byte[0]
|—————————Node:field_expression Text: ciFifoSta.byte
|——————————Node:identifier Text: ciFifoSta
|——————————Node:. Text: .
|——————————Node:field_identifier Text: byte
|—————————Node:subscript_argument_list Text: [0]
|——————————Node:[ Text: [
|——————————Node:number_literal Text: 0
|——————————Node:] Text: ]
|————————Node:& Text: &
|————————Node:number_literal Text: 0x0F
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_ErrorStateGet(CAN_ERROR_STATE *flags) {
  int8_t spiTransferError = 0;
  uint16_t a = 0;

  // Read Error state
  a = cREGADDR_CiTREC + 2;
  uint8_t f = 0;

  spiTransferError = mcp2518fd_ReadByte(a, &f);
  if (spiTransferError) {
    return -1;
  }

  // Update data
  *flags = (CAN_ERROR_STATE)(f & CAN_ERROR_ALL);

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_ErrorStateGet(CAN_ERROR_STATE *flags)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_ErrorStateGet
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_ErrorStateGet
|———Node:parameter_list Text: (CAN_ERROR_STATE *flags)
|————Node:( Text: (
|————Node:parameter_declaration Text: CAN_ERROR_STATE *flags
|—————Node:type_identifier Text: CAN_ERROR_STATE
|—————Node:pointer_declarator Text: *flags
|——————Node:* Text: *
|——————Node:identifier Text: flags
|————Node:) Text: )
|——Node:compound_statement Text: {
  int8_t spiTransferError = 0;
  uint16_t a = 0;

  // Read Error state
  a = cREGADDR_CiTREC + 2;
  uint8_t f = 0;

  spiTransferError = mcp2518fd_ReadByte(a, &f);
  if (spiTransferError) {
    return -1;
  }

  // Update data
  *flags = (CAN_ERROR_STATE)(f & CAN_ERROR_ALL);

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint16_t a = 0;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: a = 0
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: a = cREGADDR_CiTREC + 2;
|————Node:assignment_expression Text: a = cREGADDR_CiTREC + 2
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:binary_expression Text: cREGADDR_CiTREC + 2
|——————Node:identifier Text: cREGADDR_CiTREC
|——————Node:+ Text: +
|——————Node:number_literal Text: 2
|————Node:; Text: ;
|———Node:declaration Text: uint8_t f = 0;
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: f = 0
|—————Node:identifier Text: f
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransferError = mcp2518fd_ReadByte(a, &f);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_ReadByte(a, &f)
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_ReadByte(a, &f)
|——————Node:identifier Text: mcp2518fd_ReadByte
|——————Node:argument_list Text: (a, &f)
|———————Node:( Text: (
|———————Node:identifier Text: a
|———————Node:, Text: ,
|———————Node:pointer_expression Text: &f
|————————Node:& Text: &
|————————Node:identifier Text: f
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -1;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -1;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -1;
|——————Node:return Text: return
|——————Node:number_literal Text: -1
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:expression_statement Text: *flags = (CAN_ERROR_STATE)(f & CAN_ERROR_ALL);
|————Node:assignment_expression Text: *flags = (CAN_ERROR_STATE)(f & CAN_ERROR_ALL)
|—————Node:pointer_expression Text: *flags
|——————Node:* Text: *
|——————Node:identifier Text: flags
|—————Node:= Text: =
|—————Node:call_expression Text: (CAN_ERROR_STATE)(f & CAN_ERROR_ALL)
|——————Node:parenthesized_expression Text: (CAN_ERROR_STATE)
|———————Node:( Text: (
|———————Node:identifier Text: CAN_ERROR_STATE
|———————Node:) Text: )
|——————Node:argument_list Text: (f & CAN_ERROR_ALL)
|———————Node:( Text: (
|———————Node:binary_expression Text: f & CAN_ERROR_ALL
|————————Node:identifier Text: f
|————————Node:& Text: &
|————————Node:identifier Text: CAN_ERROR_ALL
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_ModuleEventRxCodeGet(CAN_RXCODE *rxCode) {
  int8_t spiTransferError = 0;
  uint16_t a = 0;
  uint8_t rxCodeByte = 0;

  // Read
  a = cREGADDR_CiVEC + 3;

  spiTransferError = mcp2518fd_ReadByte(a, &rxCodeByte);
  if (spiTransferError) {
    return -1;
  }

  // Decode data
  // 0x40 = "no interrupt" (CAN_FIFO_CIVEC_NOINTERRUPT)
  if ((rxCodeByte < CAN_RXCODE_TOTAL_CHANNELS) ||
      (rxCodeByte == CAN_RXCODE_NO_INT)) {
    *rxCode = (CAN_RXCODE)rxCodeByte;
  } else {
    *rxCode = CAN_RXCODE_RESERVED; // shouldn't get here
  }

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_ModuleEventRxCodeGet(CAN_RXCODE *rxCode)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_ModuleEventRxCodeGet
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_ModuleEventRxCodeGet
|———Node:parameter_list Text: (CAN_RXCODE *rxCode)
|————Node:( Text: (
|————Node:parameter_declaration Text: CAN_RXCODE *rxCode
|—————Node:type_identifier Text: CAN_RXCODE
|—————Node:pointer_declarator Text: *rxCode
|——————Node:* Text: *
|——————Node:identifier Text: rxCode
|————Node:) Text: )
|——Node:compound_statement Text: {
  int8_t spiTransferError = 0;
  uint16_t a = 0;
  uint8_t rxCodeByte = 0;

  // Read
  a = cREGADDR_CiVEC + 3;

  spiTransferError = mcp2518fd_ReadByte(a, &rxCodeByte);
  if (spiTransferError) {
    return -1;
  }

  // Decode data
  // 0x40 = "no interrupt" (CAN_FIFO_CIVEC_NOINTERRUPT)
  if ((rxCodeByte < CAN_RXCODE_TOTAL_CHANNELS) ||
      (rxCodeByte == CAN_RXCODE_NO_INT)) {
    *rxCode = (CAN_RXCODE)rxCodeByte;
  } else {
    *rxCode = CAN_RXCODE_RESERVED; // shouldn't get here
  }

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint16_t a = 0;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: a = 0
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint8_t rxCodeByte = 0;
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: rxCodeByte = 0
|—————Node:identifier Text: rxCodeByte
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: a = cREGADDR_CiVEC + 3;
|————Node:assignment_expression Text: a = cREGADDR_CiVEC + 3
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:binary_expression Text: cREGADDR_CiVEC + 3
|——————Node:identifier Text: cREGADDR_CiVEC
|——————Node:+ Text: +
|——————Node:number_literal Text: 3
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransferError = mcp2518fd_ReadByte(a, &rxCodeByte);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_ReadByte(a, &rxCodeByte)
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_ReadByte(a, &rxCodeByte)
|——————Node:identifier Text: mcp2518fd_ReadByte
|——————Node:argument_list Text: (a, &rxCodeByte)
|———————Node:( Text: (
|———————Node:identifier Text: a
|———————Node:, Text: ,
|———————Node:pointer_expression Text: &rxCodeByte
|————————Node:& Text: &
|————————Node:identifier Text: rxCodeByte
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -1;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -1;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -1;
|——————Node:return Text: return
|——————Node:number_literal Text: -1
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:comment
|———Node:if_statement Text: if ((rxCodeByte < CAN_RXCODE_TOTAL_CHANNELS) ||
      (rxCodeByte == CAN_RXCODE_NO_INT)) {
    *rxCode = (CAN_RXCODE)rxCodeByte;
  } else {
    *rxCode = CAN_RXCODE_RESERVED; // shouldn't get here
  }
|————Node:if Text: if
|————Node:condition_clause Text: ((rxCodeByte < CAN_RXCODE_TOTAL_CHANNELS) ||
      (rxCodeByte == CAN_RXCODE_NO_INT))
|—————Node:( Text: (
|—————Node:binary_expression Text: (rxCodeByte < CAN_RXCODE_TOTAL_CHANNELS) ||
      (rxCodeByte == CAN_RXCODE_NO_INT)
|——————Node:parenthesized_expression Text: (rxCodeByte < CAN_RXCODE_TOTAL_CHANNELS)
|———————Node:( Text: (
|———————Node:binary_expression Text: rxCodeByte < CAN_RXCODE_TOTAL_CHANNELS
|————————Node:identifier Text: rxCodeByte
|————————Node:< Text: <
|————————Node:identifier Text: CAN_RXCODE_TOTAL_CHANNELS
|———————Node:) Text: )
|——————Node:|| Text: ||
|——————Node:parenthesized_expression Text: (rxCodeByte == CAN_RXCODE_NO_INT)
|———————Node:( Text: (
|———————Node:binary_expression Text: rxCodeByte == CAN_RXCODE_NO_INT
|————————Node:identifier Text: rxCodeByte
|————————Node:== Text: ==
|————————Node:identifier Text: CAN_RXCODE_NO_INT
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
    *rxCode = (CAN_RXCODE)rxCodeByte;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: *rxCode = (CAN_RXCODE)rxCodeByte;
|——————Node:assignment_expression Text: *rxCode = (CAN_RXCODE)rxCodeByte
|———————Node:pointer_expression Text: *rxCode
|————————Node:* Text: *
|————————Node:identifier Text: rxCode
|———————Node:= Text: =
|———————Node:cast_expression Text: (CAN_RXCODE)rxCodeByte
|————————Node:( Text: (
|————————Node:type_descriptor Text: CAN_RXCODE
|—————————Node:type_identifier Text: CAN_RXCODE
|————————Node:) Text: )
|————————Node:identifier Text: rxCodeByte
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else {
    *rxCode = CAN_RXCODE_RESERVED; // shouldn't get here
  }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
    *rxCode = CAN_RXCODE_RESERVED; // shouldn't get here
  }
|——————Node:{ Text: {
|——————Node:expression_statement Text: *rxCode = CAN_RXCODE_RESERVED;
|———————Node:assignment_expression Text: *rxCode = CAN_RXCODE_RESERVED
|————————Node:pointer_expression Text: *rxCode
|—————————Node:* Text: *
|—————————Node:identifier Text: rxCode
|————————Node:= Text: =
|————————Node:identifier Text: CAN_RXCODE_RESERVED
|———————Node:; Text: ;
|——————Node:comment
|——————Node:} Text: }
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_ModuleEventTxCodeGet(CAN_TXCODE *txCode) {
  int8_t spiTransferError = 0;
  uint16_t a = 0;
  uint8_t txCodeByte = 0;

  // Read
  a = cREGADDR_CiVEC + 2;

  spiTransferError = mcp2518fd_ReadByte(a, &txCodeByte);
  if (spiTransferError) {
    return -1;
  }

  // Decode data
  // 0x40 = "no interrupt" (CAN_FIFO_CIVEC_NOINTERRUPT)
  if ((txCodeByte < CAN_TXCODE_TOTAL_CHANNELS) ||
      (txCodeByte == CAN_TXCODE_NO_INT)) {
    *txCode = (CAN_TXCODE)txCodeByte;
  } else {
    *txCode = CAN_TXCODE_RESERVED; // shouldn't get here
  }

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_ModuleEventTxCodeGet(CAN_TXCODE *txCode)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_ModuleEventTxCodeGet
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_ModuleEventTxCodeGet
|———Node:parameter_list Text: (CAN_TXCODE *txCode)
|————Node:( Text: (
|————Node:parameter_declaration Text: CAN_TXCODE *txCode
|—————Node:type_identifier Text: CAN_TXCODE
|—————Node:pointer_declarator Text: *txCode
|——————Node:* Text: *
|——————Node:identifier Text: txCode
|————Node:) Text: )
|——Node:compound_statement Text: {
  int8_t spiTransferError = 0;
  uint16_t a = 0;
  uint8_t txCodeByte = 0;

  // Read
  a = cREGADDR_CiVEC + 2;

  spiTransferError = mcp2518fd_ReadByte(a, &txCodeByte);
  if (spiTransferError) {
    return -1;
  }

  // Decode data
  // 0x40 = "no interrupt" (CAN_FIFO_CIVEC_NOINTERRUPT)
  if ((txCodeByte < CAN_TXCODE_TOTAL_CHANNELS) ||
      (txCodeByte == CAN_TXCODE_NO_INT)) {
    *txCode = (CAN_TXCODE)txCodeByte;
  } else {
    *txCode = CAN_TXCODE_RESERVED; // shouldn't get here
  }

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint16_t a = 0;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: a = 0
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint8_t txCodeByte = 0;
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: txCodeByte = 0
|—————Node:identifier Text: txCodeByte
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: a = cREGADDR_CiVEC + 2;
|————Node:assignment_expression Text: a = cREGADDR_CiVEC + 2
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:binary_expression Text: cREGADDR_CiVEC + 2
|——————Node:identifier Text: cREGADDR_CiVEC
|——————Node:+ Text: +
|——————Node:number_literal Text: 2
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransferError = mcp2518fd_ReadByte(a, &txCodeByte);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_ReadByte(a, &txCodeByte)
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_ReadByte(a, &txCodeByte)
|——————Node:identifier Text: mcp2518fd_ReadByte
|——————Node:argument_list Text: (a, &txCodeByte)
|———————Node:( Text: (
|———————Node:identifier Text: a
|———————Node:, Text: ,
|———————Node:pointer_expression Text: &txCodeByte
|————————Node:& Text: &
|————————Node:identifier Text: txCodeByte
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -1;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -1;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -1;
|——————Node:return Text: return
|——————Node:number_literal Text: -1
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:comment
|———Node:if_statement Text: if ((txCodeByte < CAN_TXCODE_TOTAL_CHANNELS) ||
      (txCodeByte == CAN_TXCODE_NO_INT)) {
    *txCode = (CAN_TXCODE)txCodeByte;
  } else {
    *txCode = CAN_TXCODE_RESERVED; // shouldn't get here
  }
|————Node:if Text: if
|————Node:condition_clause Text: ((txCodeByte < CAN_TXCODE_TOTAL_CHANNELS) ||
      (txCodeByte == CAN_TXCODE_NO_INT))
|—————Node:( Text: (
|—————Node:binary_expression Text: (txCodeByte < CAN_TXCODE_TOTAL_CHANNELS) ||
      (txCodeByte == CAN_TXCODE_NO_INT)
|——————Node:parenthesized_expression Text: (txCodeByte < CAN_TXCODE_TOTAL_CHANNELS)
|———————Node:( Text: (
|———————Node:binary_expression Text: txCodeByte < CAN_TXCODE_TOTAL_CHANNELS
|————————Node:identifier Text: txCodeByte
|————————Node:< Text: <
|————————Node:identifier Text: CAN_TXCODE_TOTAL_CHANNELS
|———————Node:) Text: )
|——————Node:|| Text: ||
|——————Node:parenthesized_expression Text: (txCodeByte == CAN_TXCODE_NO_INT)
|———————Node:( Text: (
|———————Node:binary_expression Text: txCodeByte == CAN_TXCODE_NO_INT
|————————Node:identifier Text: txCodeByte
|————————Node:== Text: ==
|————————Node:identifier Text: CAN_TXCODE_NO_INT
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:compound_statement Text: {
    *txCode = (CAN_TXCODE)txCodeByte;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: *txCode = (CAN_TXCODE)txCodeByte;
|——————Node:assignment_expression Text: *txCode = (CAN_TXCODE)txCodeByte
|———————Node:pointer_expression Text: *txCode
|————————Node:* Text: *
|————————Node:identifier Text: txCode
|———————Node:= Text: =
|———————Node:cast_expression Text: (CAN_TXCODE)txCodeByte
|————————Node:( Text: (
|————————Node:type_descriptor Text: CAN_TXCODE
|—————————Node:type_identifier Text: CAN_TXCODE
|————————Node:) Text: )
|————————Node:identifier Text: txCodeByte
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else {
    *txCode = CAN_TXCODE_RESERVED; // shouldn't get here
  }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
    *txCode = CAN_TXCODE_RESERVED; // shouldn't get here
  }
|——————Node:{ Text: {
|——————Node:expression_statement Text: *txCode = CAN_TXCODE_RESERVED;
|———————Node:assignment_expression Text: *txCode = CAN_TXCODE_RESERVED
|————————Node:pointer_expression Text: *txCode
|—————————Node:* Text: *
|—————————Node:identifier Text: txCode
|————————Node:= Text: =
|————————Node:identifier Text: CAN_TXCODE_RESERVED
|———————Node:; Text: ;
|——————Node:comment
|——————Node:} Text: }
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_TransmitChannelEventAttemptClear(CAN_FIFO_CHANNEL channel)
{
    int8_t spiTransferError = 0;
    uint16_t a = 0;

    // Read Interrupt Enables
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;

    spiTransferError = mcp2518fd_ReadByte(a, &ciFifoSta.byte[0]);
    if (spiTransferError) {
        return -1;
    }

    // Modify
    ciFifoSta.byte[0] &= ~CAN_TX_FIFO_ATTEMPTS_EXHAUSTED_EVENT;

    // Write
    spiTransferError = mcp2518fd_WriteByte(a, ciFifoSta.byte[0]);
    if (spiTransferError) {
        return -2;
    }

    return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_TransmitChannelEventAttemptClear(CAN_FIFO_CHANNEL channel)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_TransmitChannelEventAttemptClear
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_TransmitChannelEventAttemptClear
|———Node:parameter_list Text: (CAN_FIFO_CHANNEL channel)
|————Node:( Text: (
|————Node:parameter_declaration Text: CAN_FIFO_CHANNEL channel
|—————Node:type_identifier Text: CAN_FIFO_CHANNEL
|—————Node:identifier Text: channel
|————Node:) Text: )
|——Node:compound_statement Text: {
    int8_t spiTransferError = 0;
    uint16_t a = 0;

    // Read Interrupt Enables
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;

    spiTransferError = mcp2518fd_ReadByte(a, &ciFifoSta.byte[0]);
    if (spiTransferError) {
        return -1;
    }

    // Modify
    ciFifoSta.byte[0] &= ~CAN_TX_FIFO_ATTEMPTS_EXHAUSTED_EVENT;

    // Write
    spiTransferError = mcp2518fd_WriteByte(a, ciFifoSta.byte[0]);
    if (spiTransferError) {
        return -2;
    }

    return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint16_t a = 0;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: a = 0
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
|————Node:assignment_expression Text: a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET)
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:binary_expression Text: cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET)
|——————Node:identifier Text: cREGADDR_CiFIFOSTA
|——————Node:+ Text: +
|——————Node:parenthesized_expression Text: (channel * CiFIFO_OFFSET)
|———————Node:( Text: (
|———————Node:binary_expression Text: channel * CiFIFO_OFFSET
|————————Node:identifier Text: channel
|————————Node:* Text: *
|————————Node:identifier Text: CiFIFO_OFFSET
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: REG_CiFIFOSTA ciFifoSta;
|————Node:type_identifier Text: REG_CiFIFOSTA
|————Node:identifier Text: ciFifoSta
|————Node:; Text: ;
|———Node:expression_statement Text: ciFifoSta.word = 0;
|————Node:assignment_expression Text: ciFifoSta.word = 0
|—————Node:field_expression Text: ciFifoSta.word
|——————Node:identifier Text: ciFifoSta
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransferError = mcp2518fd_ReadByte(a, &ciFifoSta.byte[0]);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_ReadByte(a, &ciFifoSta.byte[0])
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_ReadByte(a, &ciFifoSta.byte[0])
|——————Node:identifier Text: mcp2518fd_ReadByte
|——————Node:argument_list Text: (a, &ciFifoSta.byte[0])
|———————Node:( Text: (
|———————Node:identifier Text: a
|———————Node:, Text: ,
|———————Node:pointer_expression Text: &ciFifoSta.byte[0]
|————————Node:& Text: &
|————————Node:subscript_expression Text: ciFifoSta.byte[0]
|—————————Node:field_expression Text: ciFifoSta.byte
|——————————Node:identifier Text: ciFifoSta
|——————————Node:. Text: .
|——————————Node:field_identifier Text: byte
|—————————Node:subscript_argument_list Text: [0]
|——————————Node:[ Text: [
|——————————Node:number_literal Text: 0
|——————————Node:] Text: ]
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
        return -1;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
        return -1;
    }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -1;
|——————Node:return Text: return
|——————Node:number_literal Text: -1
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:expression_statement Text: ciFifoSta.byte[0] &= ~CAN_TX_FIFO_ATTEMPTS_EXHAUSTED_EVENT;
|————Node:assignment_expression Text: ciFifoSta.byte[0] &= ~CAN_TX_FIFO_ATTEMPTS_EXHAUSTED_EVENT
|—————Node:subscript_expression Text: ciFifoSta.byte[0]
|——————Node:field_expression Text: ciFifoSta.byte
|———————Node:identifier Text: ciFifoSta
|———————Node:. Text: .
|———————Node:field_identifier Text: byte
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|—————Node:&= Text: &=
|—————Node:unary_expression Text: ~CAN_TX_FIFO_ATTEMPTS_EXHAUSTED_EVENT
|——————Node:~ Text: ~
|——————Node:identifier Text: CAN_TX_FIFO_ATTEMPTS_EXHAUSTED_EVENT
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: spiTransferError = mcp2518fd_WriteByte(a, ciFifoSta.byte[0]);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_WriteByte(a, ciFifoSta.byte[0])
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_WriteByte(a, ciFifoSta.byte[0])
|——————Node:identifier Text: mcp2518fd_WriteByte
|——————Node:argument_list Text: (a, ciFifoSta.byte[0])
|———————Node:( Text: (
|———————Node:identifier Text: a
|———————Node:, Text: ,
|———————Node:subscript_expression Text: ciFifoSta.byte[0]
|————————Node:field_expression Text: ciFifoSta.byte
|—————————Node:identifier Text: ciFifoSta
|—————————Node:. Text: .
|—————————Node:field_identifier Text: byte
|————————Node:subscript_argument_list Text: [0]
|—————————Node:[ Text: [
|—————————Node:number_literal Text: 0
|—————————Node:] Text: ]
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
        return -2;
    }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
        return -2;
    }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -2;
|——————Node:return Text: return
|——————Node:number_literal Text: -2
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_LowPowerModeEnable() {
  int8_t spiTransferError = 0;
  uint8_t d = 0;

#ifdef MCP2517FD
  // LPM not implemented
  spiTransferError = -100;
#else
  // Read
  spiTransferError = mcp2518fd_ReadByte(cREGADDR_OSC, &d);
  if (spiTransferError) {
    return -1;
  }

  // Modify
  d |= 0x08;

  // Write
  spiTransferError = mcp2518fd_WriteByte(cREGADDR_OSC, d);
  if (spiTransferError) {
    return -2;
  }
#endif

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_LowPowerModeEnable()
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_LowPowerModeEnable
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_LowPowerModeEnable
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
  int8_t spiTransferError = 0;
  uint8_t d = 0;

#ifdef MCP2517FD
  // LPM not implemented
  spiTransferError = -100;
#else
  // Read
  spiTransferError = mcp2518fd_ReadByte(cREGADDR_OSC, &d);
  if (spiTransferError) {
    return -1;
  }

  // Modify
  d |= 0x08;

  // Write
  spiTransferError = mcp2518fd_WriteByte(cREGADDR_OSC, d);
  if (spiTransferError) {
    return -2;
  }
#endif

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint8_t d = 0;
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: d = 0
|—————Node:identifier Text: d
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef MCP2517FD
  // LPM not implemented
  spiTransferError = -100;
#else
  // Read
  spiTransferError = mcp2518fd_ReadByte(cREGADDR_OSC, &d);
  if (spiTransferError) {
    return -1;
  }

  // Modify
  d |= 0x08;

  // Write
  spiTransferError = mcp2518fd_WriteByte(cREGADDR_OSC, d);
  if (spiTransferError) {
    return -2;
  }
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: MCP2517FD
|————Node:comment
|————Node:expression_statement Text: spiTransferError = -100;
|—————Node:assignment_expression Text: spiTransferError = -100
|——————Node:identifier Text: spiTransferError
|——————Node:= Text: =
|——————Node:number_literal Text: -100
|—————Node:; Text: ;
|————Node:preproc_else Text: #else
  // Read
  spiTransferError = mcp2518fd_ReadByte(cREGADDR_OSC, &d);
  if (spiTransferError) {
    return -1;
  }

  // Modify
  d |= 0x08;

  // Write
  spiTransferError = mcp2518fd_WriteByte(cREGADDR_OSC, d);
  if (spiTransferError) {
    return -2;
  }
|—————Node:#else Text: #else
|—————Node:comment
|—————Node:expression_statement Text: spiTransferError = mcp2518fd_ReadByte(cREGADDR_OSC, &d);
|——————Node:assignment_expression Text: spiTransferError = mcp2518fd_ReadByte(cREGADDR_OSC, &d)
|———————Node:identifier Text: spiTransferError
|———————Node:= Text: =
|———————Node:call_expression Text: mcp2518fd_ReadByte(cREGADDR_OSC, &d)
|————————Node:identifier Text: mcp2518fd_ReadByte
|————————Node:argument_list Text: (cREGADDR_OSC, &d)
|—————————Node:( Text: (
|—————————Node:identifier Text: cREGADDR_OSC
|—————————Node:, Text: ,
|—————————Node:pointer_expression Text: &d
|——————————Node:& Text: &
|——————————Node:identifier Text: d
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (spiTransferError) {
    return -1;
  }
|——————Node:if Text: if
|——————Node:condition_clause Text: (spiTransferError)
|———————Node:( Text: (
|———————Node:identifier Text: spiTransferError
|———————Node:) Text: )
|——————Node:compound_statement Text: {
    return -1;
  }
|———————Node:{ Text: {
|———————Node:return_statement Text: return -1;
|————————Node:return Text: return
|————————Node:number_literal Text: -1
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:comment
|—————Node:expression_statement Text: d |= 0x08;
|——————Node:assignment_expression Text: d |= 0x08
|———————Node:identifier Text: d
|———————Node:|= Text: |=
|———————Node:number_literal Text: 0x08
|——————Node:; Text: ;
|—————Node:comment
|—————Node:expression_statement Text: spiTransferError = mcp2518fd_WriteByte(cREGADDR_OSC, d);
|——————Node:assignment_expression Text: spiTransferError = mcp2518fd_WriteByte(cREGADDR_OSC, d)
|———————Node:identifier Text: spiTransferError
|———————Node:= Text: =
|———————Node:call_expression Text: mcp2518fd_WriteByte(cREGADDR_OSC, d)
|————————Node:identifier Text: mcp2518fd_WriteByte
|————————Node:argument_list Text: (cREGADDR_OSC, d)
|—————————Node:( Text: (
|—————————Node:identifier Text: cREGADDR_OSC
|—————————Node:, Text: ,
|—————————Node:identifier Text: d
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (spiTransferError) {
    return -2;
  }
|——————Node:if Text: if
|——————Node:condition_clause Text: (spiTransferError)
|———————Node:( Text: (
|———————Node:identifier Text: spiTransferError
|———————Node:) Text: )
|——————Node:compound_statement Text: {
    return -2;
  }
|———————Node:{ Text: {
|———————Node:return_statement Text: return -2;
|————————Node:return Text: return
|————————Node:number_literal Text: -2
|————————Node:; Text: ;
|———————Node:} Text: }
|————Node:#endif Text: #endif
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_LowPowerModeDisable() {
  int8_t spiTransferError = 0;
  uint8_t d = 0;

#ifdef MCP2517FD
  // LPM not implemented
  spiTransferError = -100;
#else
  // Read
  spiTransferError = mcp2518fd_ReadByte(cREGADDR_OSC, &d);
  if (spiTransferError) {
    return -1;
  }

  // Modify
  d &= ~0x08;

  // Write
  spiTransferError = mcp2518fd_WriteByte(cREGADDR_OSC, d);
  if (spiTransferError) {
    return -2;
  }
#endif

  return spiTransferError;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_LowPowerModeDisable()
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_LowPowerModeDisable
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_LowPowerModeDisable
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
  int8_t spiTransferError = 0;
  uint8_t d = 0;

#ifdef MCP2517FD
  // LPM not implemented
  spiTransferError = -100;
#else
  // Read
  spiTransferError = mcp2518fd_ReadByte(cREGADDR_OSC, &d);
  if (spiTransferError) {
    return -1;
  }

  // Modify
  d &= ~0x08;

  // Write
  spiTransferError = mcp2518fd_WriteByte(cREGADDR_OSC, d);
  if (spiTransferError) {
    return -2;
  }
#endif

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint8_t d = 0;
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: d = 0
|—————Node:identifier Text: d
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef MCP2517FD
  // LPM not implemented
  spiTransferError = -100;
#else
  // Read
  spiTransferError = mcp2518fd_ReadByte(cREGADDR_OSC, &d);
  if (spiTransferError) {
    return -1;
  }

  // Modify
  d &= ~0x08;

  // Write
  spiTransferError = mcp2518fd_WriteByte(cREGADDR_OSC, d);
  if (spiTransferError) {
    return -2;
  }
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: MCP2517FD
|————Node:comment
|————Node:expression_statement Text: spiTransferError = -100;
|—————Node:assignment_expression Text: spiTransferError = -100
|——————Node:identifier Text: spiTransferError
|——————Node:= Text: =
|——————Node:number_literal Text: -100
|—————Node:; Text: ;
|————Node:preproc_else Text: #else
  // Read
  spiTransferError = mcp2518fd_ReadByte(cREGADDR_OSC, &d);
  if (spiTransferError) {
    return -1;
  }

  // Modify
  d &= ~0x08;

  // Write
  spiTransferError = mcp2518fd_WriteByte(cREGADDR_OSC, d);
  if (spiTransferError) {
    return -2;
  }
|—————Node:#else Text: #else
|—————Node:comment
|—————Node:expression_statement Text: spiTransferError = mcp2518fd_ReadByte(cREGADDR_OSC, &d);
|——————Node:assignment_expression Text: spiTransferError = mcp2518fd_ReadByte(cREGADDR_OSC, &d)
|———————Node:identifier Text: spiTransferError
|———————Node:= Text: =
|———————Node:call_expression Text: mcp2518fd_ReadByte(cREGADDR_OSC, &d)
|————————Node:identifier Text: mcp2518fd_ReadByte
|————————Node:argument_list Text: (cREGADDR_OSC, &d)
|—————————Node:( Text: (
|—————————Node:identifier Text: cREGADDR_OSC
|—————————Node:, Text: ,
|—————————Node:pointer_expression Text: &d
|——————————Node:& Text: &
|——————————Node:identifier Text: d
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (spiTransferError) {
    return -1;
  }
|——————Node:if Text: if
|——————Node:condition_clause Text: (spiTransferError)
|———————Node:( Text: (
|———————Node:identifier Text: spiTransferError
|———————Node:) Text: )
|——————Node:compound_statement Text: {
    return -1;
  }
|———————Node:{ Text: {
|———————Node:return_statement Text: return -1;
|————————Node:return Text: return
|————————Node:number_literal Text: -1
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:comment
|—————Node:expression_statement Text: d &= ~0x08;
|——————Node:assignment_expression Text: d &= ~0x08
|———————Node:identifier Text: d
|———————Node:&= Text: &=
|———————Node:unary_expression Text: ~0x08
|————————Node:~ Text: ~
|————————Node:number_literal Text: 0x08
|——————Node:; Text: ;
|—————Node:comment
|—————Node:expression_statement Text: spiTransferError = mcp2518fd_WriteByte(cREGADDR_OSC, d);
|——————Node:assignment_expression Text: spiTransferError = mcp2518fd_WriteByte(cREGADDR_OSC, d)
|———————Node:identifier Text: spiTransferError
|———————Node:= Text: =
|———————Node:call_expression Text: mcp2518fd_WriteByte(cREGADDR_OSC, d)
|————————Node:identifier Text: mcp2518fd_WriteByte
|————————Node:argument_list Text: (cREGADDR_OSC, d)
|—————————Node:( Text: (
|—————————Node:identifier Text: cREGADDR_OSC
|—————————Node:, Text: ,
|—————————Node:identifier Text: d
|—————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (spiTransferError) {
    return -2;
  }
|——————Node:if Text: if
|——————Node:condition_clause Text: (spiTransferError)
|———————Node:( Text: (
|———————Node:identifier Text: spiTransferError
|———————Node:) Text: )
|——————Node:compound_statement Text: {
    return -2;
  }
|———————Node:{ Text: {
|———————Node:return_statement Text: return -2;
|————————Node:return Text: return
|————————Node:number_literal Text: -2
|————————Node:; Text: ;
|———————Node:} Text: }
|————Node:#endif Text: #endif
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void mcp2518fd::mcp2518fd_TransmitMessageQueue(void) {
  uint8_t attempts = MAX_TXQUEUE_ATTEMPTS;

  // Check if FIFO is not full
  do {
    mcp2518fd_TransmitChannelEventGet(APP_TX_FIFO, &txFlags);
    if (attempts == 0) {
      Nop();
      Nop();
      mcp2518fd_ErrorCountStateGet(&tec, &rec, &errorFlags);
      return;
    }
    attempts--;
  } while (!(txFlags & CAN_TX_FIFO_NOT_FULL_EVENT));

  // Load message and transmit
  uint8_t n = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC)txObj.bF.ctrl.DLC);
  mcp2518fd_TransmitChannelLoad(APP_TX_FIFO, &txObj, txd, n, true);
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_TransmitMessageQueue(void)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_TransmitMessageQueue
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_TransmitMessageQueue
|———Node:parameter_list Text: (void)
|————Node:( Text: (
|————Node:parameter_declaration Text: void
|—————Node:primitive_type Text: void
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint8_t attempts = MAX_TXQUEUE_ATTEMPTS;

  // Check if FIFO is not full
  do {
    mcp2518fd_TransmitChannelEventGet(APP_TX_FIFO, &txFlags);
    if (attempts == 0) {
      Nop();
      Nop();
      mcp2518fd_ErrorCountStateGet(&tec, &rec, &errorFlags);
      return;
    }
    attempts--;
  } while (!(txFlags & CAN_TX_FIFO_NOT_FULL_EVENT));

  // Load message and transmit
  uint8_t n = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC)txObj.bF.ctrl.DLC);
  mcp2518fd_TransmitChannelLoad(APP_TX_FIFO, &txObj, txd, n, true);
}
|———Node:{ Text: {
|———Node:declaration Text: uint8_t attempts = MAX_TXQUEUE_ATTEMPTS;
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: attempts = MAX_TXQUEUE_ATTEMPTS
|—————Node:identifier Text: attempts
|—————Node:= Text: =
|—————Node:identifier Text: MAX_TXQUEUE_ATTEMPTS
|————Node:; Text: ;
|———Node:comment
|———Node:do_statement Text: do {
    mcp2518fd_TransmitChannelEventGet(APP_TX_FIFO, &txFlags);
    if (attempts == 0) {
      Nop();
      Nop();
      mcp2518fd_ErrorCountStateGet(&tec, &rec, &errorFlags);
      return;
    }
    attempts--;
  } while (!(txFlags & CAN_TX_FIFO_NOT_FULL_EVENT));
|————Node:do Text: do
|————Node:compound_statement Text: {
    mcp2518fd_TransmitChannelEventGet(APP_TX_FIFO, &txFlags);
    if (attempts == 0) {
      Nop();
      Nop();
      mcp2518fd_ErrorCountStateGet(&tec, &rec, &errorFlags);
      return;
    }
    attempts--;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: mcp2518fd_TransmitChannelEventGet(APP_TX_FIFO, &txFlags);
|——————Node:call_expression Text: mcp2518fd_TransmitChannelEventGet(APP_TX_FIFO, &txFlags)
|———————Node:identifier Text: mcp2518fd_TransmitChannelEventGet
|———————Node:argument_list Text: (APP_TX_FIFO, &txFlags)
|————————Node:( Text: (
|————————Node:identifier Text: APP_TX_FIFO
|————————Node:, Text: ,
|————————Node:pointer_expression Text: &txFlags
|—————————Node:& Text: &
|—————————Node:identifier Text: txFlags
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (attempts == 0) {
      Nop();
      Nop();
      mcp2518fd_ErrorCountStateGet(&tec, &rec, &errorFlags);
      return;
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: (attempts == 0)
|———————Node:( Text: (
|———————Node:binary_expression Text: attempts == 0
|————————Node:identifier Text: attempts
|————————Node:== Text: ==
|————————Node:number_literal Text: 0
|———————Node:) Text: )
|——————Node:compound_statement Text: {
      Nop();
      Nop();
      mcp2518fd_ErrorCountStateGet(&tec, &rec, &errorFlags);
      return;
    }
|———————Node:{ Text: {
|———————Node:expression_statement Text: Nop();
|————————Node:call_expression Text: Nop()
|—————————Node:identifier Text: Nop
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: Nop();
|————————Node:call_expression Text: Nop()
|—————————Node:identifier Text: Nop
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: mcp2518fd_ErrorCountStateGet(&tec, &rec, &errorFlags);
|————————Node:call_expression Text: mcp2518fd_ErrorCountStateGet(&tec, &rec, &errorFlags)
|—————————Node:identifier Text: mcp2518fd_ErrorCountStateGet
|—————————Node:argument_list Text: (&tec, &rec, &errorFlags)
|——————————Node:( Text: (
|——————————Node:pointer_expression Text: &tec
|———————————Node:& Text: &
|———————————Node:identifier Text: tec
|——————————Node:, Text: ,
|——————————Node:pointer_expression Text: &rec
|———————————Node:& Text: &
|———————————Node:identifier Text: rec
|——————————Node:, Text: ,
|——————————Node:pointer_expression Text: &errorFlags
|———————————Node:& Text: &
|———————————Node:identifier Text: errorFlags
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:return_statement Text: return;
|————————Node:return Text: return
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:expression_statement Text: attempts--;
|——————Node:update_expression Text: attempts--
|———————Node:identifier Text: attempts
|———————Node:-- Text: --
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:while Text: while
|————Node:parenthesized_expression Text: (!(txFlags & CAN_TX_FIFO_NOT_FULL_EVENT))
|—————Node:( Text: (
|—————Node:unary_expression Text: !(txFlags & CAN_TX_FIFO_NOT_FULL_EVENT)
|——————Node:! Text: !
|——————Node:parenthesized_expression Text: (txFlags & CAN_TX_FIFO_NOT_FULL_EVENT)
|———————Node:( Text: (
|———————Node:binary_expression Text: txFlags & CAN_TX_FIFO_NOT_FULL_EVENT
|————————Node:identifier Text: txFlags
|————————Node:& Text: &
|————————Node:identifier Text: CAN_TX_FIFO_NOT_FULL_EVENT
|———————Node:) Text: )
|—————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:declaration Text: uint8_t n = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC)txObj.bF.ctrl.DLC);
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: n = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC)txObj.bF.ctrl.DLC)
|—————Node:identifier Text: n
|—————Node:= Text: =
|—————Node:call_expression Text: DRV_CANFDSPI_DlcToDataBytes((CAN_DLC)txObj.bF.ctrl.DLC)
|——————Node:identifier Text: DRV_CANFDSPI_DlcToDataBytes
|——————Node:argument_list Text: ((CAN_DLC)txObj.bF.ctrl.DLC)
|———————Node:( Text: (
|———————Node:cast_expression Text: (CAN_DLC)txObj.bF.ctrl.DLC
|————————Node:( Text: (
|————————Node:type_descriptor Text: CAN_DLC
|—————————Node:type_identifier Text: CAN_DLC
|————————Node:) Text: )
|————————Node:field_expression Text: txObj.bF.ctrl.DLC
|—————————Node:field_expression Text: txObj.bF.ctrl
|——————————Node:field_expression Text: txObj.bF
|———————————Node:identifier Text: txObj
|———————————Node:. Text: .
|———————————Node:field_identifier Text: bF
|——————————Node:. Text: .
|——————————Node:field_identifier Text: ctrl
|—————————Node:. Text: .
|—————————Node:field_identifier Text: DLC
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mcp2518fd_TransmitChannelLoad(APP_TX_FIFO, &txObj, txd, n, true);
|————Node:call_expression Text: mcp2518fd_TransmitChannelLoad(APP_TX_FIFO, &txObj, txd, n, true)
|—————Node:identifier Text: mcp2518fd_TransmitChannelLoad
|—————Node:argument_list Text: (APP_TX_FIFO, &txObj, txd, n, true)
|——————Node:( Text: (
|——————Node:identifier Text: APP_TX_FIFO
|——————Node:, Text: ,
|——————Node:pointer_expression Text: &txObj
|———————Node:& Text: &
|———————Node:identifier Text: txObj
|——————Node:, Text: ,
|——————Node:identifier Text: txd
|——————Node:, Text: ,
|——————Node:identifier Text: n
|——————Node:, Text: ,
|——————Node:true Text: true
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: byte mcp2518fd::mcp2518fd_sendMsg(const byte *buf, byte len, unsigned long id,
                                  byte ext, byte rtr, bool wait_sent) {
  uint8_t n;
  int i;
  byte spiTransferError = 0;
  // Configure message data
  txObj.word[0] = 0;
  txObj.word[1] = 0;

  txObj.bF.ctrl.RTR = !!rtr;
  if (rtr && len > CAN_DLC_8) {
    len = CAN_DLC_8;
  }
  txObj.bF.ctrl.DLC = len;

  txObj.bF.ctrl.IDE = !!ext;
  if (ext) {
    txObj.bF.id.SID = (id >> 18) & 0x7FF;
    txObj.bF.id.EID = id & 0x3FFFF;
  } else {
    txObj.bF.id.SID = id;
  }

  txObj.bF.ctrl.BRS = true;

  txObj.bF.ctrl.FDF = (len > 8);
  n = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC)txObj.bF.ctrl.DLC);
  // Prepare data
  for (i = 0; i < n; i++) {
    txd[i] = buf[i];
  }

  mcp2518fd_TransmitMessageQueue();
  return spiTransferError;
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_sendMsg(const byte *buf, byte len, unsigned long id,
                                  byte ext, byte rtr, bool wait_sent)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_sendMsg
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_sendMsg
|———Node:parameter_list Text: (const byte *buf, byte len, unsigned long id,
                                  byte ext, byte rtr, bool wait_sent)
|————Node:( Text: (
|————Node:parameter_declaration Text: const byte *buf
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: byte
|—————Node:pointer_declarator Text: *buf
|——————Node:* Text: *
|——————Node:identifier Text: buf
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte len
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: len
|————Node:, Text: ,
|————Node:parameter_declaration Text: unsigned long id
|—————Node:sized_type_specifier Text: unsigned long
|——————Node:unsigned Text: unsigned
|——————Node:long Text: long
|—————Node:identifier Text: id
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte ext
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: ext
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte rtr
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: rtr
|————Node:, Text: ,
|————Node:parameter_declaration Text: bool wait_sent
|—————Node:primitive_type Text: bool
|—————Node:identifier Text: wait_sent
|————Node:) Text: )
|——Node:compound_statement Text: {
  uint8_t n;
  int i;
  byte spiTransferError = 0;
  // Configure message data
  txObj.word[0] = 0;
  txObj.word[1] = 0;

  txObj.bF.ctrl.RTR = !!rtr;
  if (rtr && len > CAN_DLC_8) {
    len = CAN_DLC_8;
  }
  txObj.bF.ctrl.DLC = len;

  txObj.bF.ctrl.IDE = !!ext;
  if (ext) {
    txObj.bF.id.SID = (id >> 18) & 0x7FF;
    txObj.bF.id.EID = id & 0x3FFFF;
  } else {
    txObj.bF.id.SID = id;
  }

  txObj.bF.ctrl.BRS = true;

  txObj.bF.ctrl.FDF = (len > 8);
  n = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC)txObj.bF.ctrl.DLC);
  // Prepare data
  for (i = 0; i < n; i++) {
    txd[i] = buf[i];
  }

  mcp2518fd_TransmitMessageQueue();
  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: uint8_t n;
|————Node:primitive_type Text: uint8_t
|————Node:identifier Text: n
|————Node:; Text: ;
|———Node:declaration Text: int i;
|————Node:primitive_type Text: int
|————Node:identifier Text: i
|————Node:; Text: ;
|———Node:declaration Text: byte spiTransferError = 0;
|————Node:type_identifier Text: byte
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: txObj.word[0] = 0;
|————Node:assignment_expression Text: txObj.word[0] = 0
|—————Node:subscript_expression Text: txObj.word[0]
|——————Node:field_expression Text: txObj.word
|———————Node:identifier Text: txObj
|———————Node:. Text: .
|———————Node:field_identifier Text: word
|——————Node:subscript_argument_list Text: [0]
|———————Node:[ Text: [
|———————Node:number_literal Text: 0
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: txObj.word[1] = 0;
|————Node:assignment_expression Text: txObj.word[1] = 0
|—————Node:subscript_expression Text: txObj.word[1]
|——————Node:field_expression Text: txObj.word
|———————Node:identifier Text: txObj
|———————Node:. Text: .
|———————Node:field_identifier Text: word
|——————Node:subscript_argument_list Text: [1]
|———————Node:[ Text: [
|———————Node:number_literal Text: 1
|———————Node:] Text: ]
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: txObj.bF.ctrl.RTR = !!rtr;
|————Node:assignment_expression Text: txObj.bF.ctrl.RTR = !!rtr
|—————Node:field_expression Text: txObj.bF.ctrl.RTR
|——————Node:field_expression Text: txObj.bF.ctrl
|———————Node:field_expression Text: txObj.bF
|————————Node:identifier Text: txObj
|————————Node:. Text: .
|————————Node:field_identifier Text: bF
|———————Node:. Text: .
|———————Node:field_identifier Text: ctrl
|——————Node:. Text: .
|——————Node:field_identifier Text: RTR
|—————Node:= Text: =
|—————Node:unary_expression Text: !!rtr
|——————Node:! Text: !
|——————Node:unary_expression Text: !rtr
|———————Node:! Text: !
|———————Node:identifier Text: rtr
|————Node:; Text: ;
|———Node:if_statement Text: if (rtr && len > CAN_DLC_8) {
    len = CAN_DLC_8;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (rtr && len > CAN_DLC_8)
|—————Node:( Text: (
|—————Node:binary_expression Text: rtr && len > CAN_DLC_8
|——————Node:identifier Text: rtr
|——————Node:&& Text: &&
|——————Node:binary_expression Text: len > CAN_DLC_8
|———————Node:identifier Text: len
|———————Node:> Text: >
|———————Node:identifier Text: CAN_DLC_8
|—————Node:) Text: )
|————Node:compound_statement Text: {
    len = CAN_DLC_8;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: len = CAN_DLC_8;
|——————Node:assignment_expression Text: len = CAN_DLC_8
|———————Node:identifier Text: len
|———————Node:= Text: =
|———————Node:identifier Text: CAN_DLC_8
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: txObj.bF.ctrl.DLC = len;
|————Node:assignment_expression Text: txObj.bF.ctrl.DLC = len
|—————Node:field_expression Text: txObj.bF.ctrl.DLC
|——————Node:field_expression Text: txObj.bF.ctrl
|———————Node:field_expression Text: txObj.bF
|————————Node:identifier Text: txObj
|————————Node:. Text: .
|————————Node:field_identifier Text: bF
|———————Node:. Text: .
|———————Node:field_identifier Text: ctrl
|——————Node:. Text: .
|——————Node:field_identifier Text: DLC
|—————Node:= Text: =
|—————Node:identifier Text: len
|————Node:; Text: ;
|———Node:expression_statement Text: txObj.bF.ctrl.IDE = !!ext;
|————Node:assignment_expression Text: txObj.bF.ctrl.IDE = !!ext
|—————Node:field_expression Text: txObj.bF.ctrl.IDE
|——————Node:field_expression Text: txObj.bF.ctrl
|———————Node:field_expression Text: txObj.bF
|————————Node:identifier Text: txObj
|————————Node:. Text: .
|————————Node:field_identifier Text: bF
|———————Node:. Text: .
|———————Node:field_identifier Text: ctrl
|——————Node:. Text: .
|——————Node:field_identifier Text: IDE
|—————Node:= Text: =
|—————Node:unary_expression Text: !!ext
|——————Node:! Text: !
|——————Node:unary_expression Text: !ext
|———————Node:! Text: !
|———————Node:identifier Text: ext
|————Node:; Text: ;
|———Node:if_statement Text: if (ext) {
    txObj.bF.id.SID = (id >> 18) & 0x7FF;
    txObj.bF.id.EID = id & 0x3FFFF;
  } else {
    txObj.bF.id.SID = id;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (ext)
|—————Node:( Text: (
|—————Node:identifier Text: ext
|—————Node:) Text: )
|————Node:compound_statement Text: {
    txObj.bF.id.SID = (id >> 18) & 0x7FF;
    txObj.bF.id.EID = id & 0x3FFFF;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: txObj.bF.id.SID = (id >> 18) & 0x7FF;
|——————Node:assignment_expression Text: txObj.bF.id.SID = (id >> 18) & 0x7FF
|———————Node:field_expression Text: txObj.bF.id.SID
|————————Node:field_expression Text: txObj.bF.id
|—————————Node:field_expression Text: txObj.bF
|——————————Node:identifier Text: txObj
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: id
|————————Node:. Text: .
|————————Node:field_identifier Text: SID
|———————Node:= Text: =
|———————Node:binary_expression Text: (id >> 18) & 0x7FF
|————————Node:parenthesized_expression Text: (id >> 18)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: id >> 18
|——————————Node:identifier Text: id
|——————————Node:>> Text: >>
|——————————Node:number_literal Text: 18
|—————————Node:) Text: )
|————————Node:& Text: &
|————————Node:number_literal Text: 0x7FF
|——————Node:; Text: ;
|—————Node:expression_statement Text: txObj.bF.id.EID = id & 0x3FFFF;
|——————Node:assignment_expression Text: txObj.bF.id.EID = id & 0x3FFFF
|———————Node:field_expression Text: txObj.bF.id.EID
|————————Node:field_expression Text: txObj.bF.id
|—————————Node:field_expression Text: txObj.bF
|——————————Node:identifier Text: txObj
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: id
|————————Node:. Text: .
|————————Node:field_identifier Text: EID
|———————Node:= Text: =
|———————Node:binary_expression Text: id & 0x3FFFF
|————————Node:identifier Text: id
|————————Node:& Text: &
|————————Node:number_literal Text: 0x3FFFF
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else {
    txObj.bF.id.SID = id;
  }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
    txObj.bF.id.SID = id;
  }
|——————Node:{ Text: {
|——————Node:expression_statement Text: txObj.bF.id.SID = id;
|———————Node:assignment_expression Text: txObj.bF.id.SID = id
|————————Node:field_expression Text: txObj.bF.id.SID
|—————————Node:field_expression Text: txObj.bF.id
|——————————Node:field_expression Text: txObj.bF
|———————————Node:identifier Text: txObj
|———————————Node:. Text: .
|———————————Node:field_identifier Text: bF
|——————————Node:. Text: .
|——————————Node:field_identifier Text: id
|—————————Node:. Text: .
|—————————Node:field_identifier Text: SID
|————————Node:= Text: =
|————————Node:identifier Text: id
|———————Node:; Text: ;
|——————Node:} Text: }
|———Node:expression_statement Text: txObj.bF.ctrl.BRS = true;
|————Node:assignment_expression Text: txObj.bF.ctrl.BRS = true
|—————Node:field_expression Text: txObj.bF.ctrl.BRS
|——————Node:field_expression Text: txObj.bF.ctrl
|———————Node:field_expression Text: txObj.bF
|————————Node:identifier Text: txObj
|————————Node:. Text: .
|————————Node:field_identifier Text: bF
|———————Node:. Text: .
|———————Node:field_identifier Text: ctrl
|——————Node:. Text: .
|——————Node:field_identifier Text: BRS
|—————Node:= Text: =
|—————Node:true Text: true
|————Node:; Text: ;
|———Node:expression_statement Text: txObj.bF.ctrl.FDF = (len > 8);
|————Node:assignment_expression Text: txObj.bF.ctrl.FDF = (len > 8)
|—————Node:field_expression Text: txObj.bF.ctrl.FDF
|——————Node:field_expression Text: txObj.bF.ctrl
|———————Node:field_expression Text: txObj.bF
|————————Node:identifier Text: txObj
|————————Node:. Text: .
|————————Node:field_identifier Text: bF
|———————Node:. Text: .
|———————Node:field_identifier Text: ctrl
|——————Node:. Text: .
|——————Node:field_identifier Text: FDF
|—————Node:= Text: =
|—————Node:parenthesized_expression Text: (len > 8)
|——————Node:( Text: (
|——————Node:binary_expression Text: len > 8
|———————Node:identifier Text: len
|———————Node:> Text: >
|———————Node:number_literal Text: 8
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: n = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC)txObj.bF.ctrl.DLC);
|————Node:assignment_expression Text: n = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC)txObj.bF.ctrl.DLC)
|—————Node:identifier Text: n
|—————Node:= Text: =
|—————Node:call_expression Text: DRV_CANFDSPI_DlcToDataBytes((CAN_DLC)txObj.bF.ctrl.DLC)
|——————Node:identifier Text: DRV_CANFDSPI_DlcToDataBytes
|——————Node:argument_list Text: ((CAN_DLC)txObj.bF.ctrl.DLC)
|———————Node:( Text: (
|———————Node:cast_expression Text: (CAN_DLC)txObj.bF.ctrl.DLC
|————————Node:( Text: (
|————————Node:type_descriptor Text: CAN_DLC
|—————————Node:type_identifier Text: CAN_DLC
|————————Node:) Text: )
|————————Node:field_expression Text: txObj.bF.ctrl.DLC
|—————————Node:field_expression Text: txObj.bF.ctrl
|——————————Node:field_expression Text: txObj.bF
|———————————Node:identifier Text: txObj
|———————————Node:. Text: .
|———————————Node:field_identifier Text: bF
|——————————Node:. Text: .
|——————————Node:field_identifier Text: ctrl
|—————————Node:. Text: .
|—————————Node:field_identifier Text: DLC
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:for_statement Text: for (i = 0; i < n; i++) {
    txd[i] = buf[i];
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:assignment_expression Text: i = 0
|—————Node:identifier Text: i
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|————Node:binary_expression Text: i < n
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:identifier Text: n
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    txd[i] = buf[i];
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: txd[i] = buf[i];
|——————Node:assignment_expression Text: txd[i] = buf[i]
|———————Node:subscript_expression Text: txd[i]
|————————Node:identifier Text: txd
|————————Node:subscript_argument_list Text: [i]
|—————————Node:[ Text: [
|—————————Node:identifier Text: i
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:subscript_expression Text: buf[i]
|————————Node:identifier Text: buf
|————————Node:subscript_argument_list Text: [i]
|—————————Node:[ Text: [
|—————————Node:identifier Text: i
|—————————Node:] Text: ]
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: mcp2518fd_TransmitMessageQueue();
|————Node:call_expression Text: mcp2518fd_TransmitMessageQueue()
|—————Node:identifier Text: mcp2518fd_TransmitMessageQueue
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: int8_t mcp2518fd::mcp2518fd_receiveMsg() {
  mcp2518fd_ReceiveChannelEventGet(APP_RX_FIFO, &rxFlags);

  if (rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT) {
    mcp2518fd_ReceiveMessageGet(APP_RX_FIFO, &rxObj, rxd, 8);
    for (int i = 0; i < 8; i++) {
      Serial.println(rxd[i]);
      Serial.println("\t");
    }
    Serial.println();
  }

  return 0;
}
|——Node:primitive_type Text: int8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_receiveMsg()
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_receiveMsg
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_receiveMsg
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
  mcp2518fd_ReceiveChannelEventGet(APP_RX_FIFO, &rxFlags);

  if (rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT) {
    mcp2518fd_ReceiveMessageGet(APP_RX_FIFO, &rxObj, rxd, 8);
    for (int i = 0; i < 8; i++) {
      Serial.println(rxd[i]);
      Serial.println("\t");
    }
    Serial.println();
  }

  return 0;
}
|———Node:{ Text: {
|———Node:expression_statement Text: mcp2518fd_ReceiveChannelEventGet(APP_RX_FIFO, &rxFlags);
|————Node:call_expression Text: mcp2518fd_ReceiveChannelEventGet(APP_RX_FIFO, &rxFlags)
|—————Node:identifier Text: mcp2518fd_ReceiveChannelEventGet
|—————Node:argument_list Text: (APP_RX_FIFO, &rxFlags)
|——————Node:( Text: (
|——————Node:identifier Text: APP_RX_FIFO
|——————Node:, Text: ,
|——————Node:pointer_expression Text: &rxFlags
|———————Node:& Text: &
|———————Node:identifier Text: rxFlags
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT) {
    mcp2518fd_ReceiveMessageGet(APP_RX_FIFO, &rxObj, rxd, 8);
    for (int i = 0; i < 8; i++) {
      Serial.println(rxd[i]);
      Serial.println("\t");
    }
    Serial.println();
  }
|————Node:if Text: if
|————Node:condition_clause Text: (rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT)
|—————Node:( Text: (
|—————Node:binary_expression Text: rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT
|——————Node:identifier Text: rxFlags
|——————Node:& Text: &
|——————Node:identifier Text: CAN_RX_FIFO_NOT_EMPTY_EVENT
|—————Node:) Text: )
|————Node:compound_statement Text: {
    mcp2518fd_ReceiveMessageGet(APP_RX_FIFO, &rxObj, rxd, 8);
    for (int i = 0; i < 8; i++) {
      Serial.println(rxd[i]);
      Serial.println("\t");
    }
    Serial.println();
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: mcp2518fd_ReceiveMessageGet(APP_RX_FIFO, &rxObj, rxd, 8);
|——————Node:call_expression Text: mcp2518fd_ReceiveMessageGet(APP_RX_FIFO, &rxObj, rxd, 8)
|———————Node:identifier Text: mcp2518fd_ReceiveMessageGet
|———————Node:argument_list Text: (APP_RX_FIFO, &rxObj, rxd, 8)
|————————Node:( Text: (
|————————Node:identifier Text: APP_RX_FIFO
|————————Node:, Text: ,
|————————Node:pointer_expression Text: &rxObj
|—————————Node:& Text: &
|—————————Node:identifier Text: rxObj
|————————Node:, Text: ,
|————————Node:identifier Text: rxd
|————————Node:, Text: ,
|————————Node:number_literal Text: 8
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:for_statement Text: for (int i = 0; i < 8; i++) {
      Serial.println(rxd[i]);
      Serial.println("\t");
    }
|——————Node:for Text: for
|——————Node:( Text: (
|——————Node:declaration Text: int i = 0;
|———————Node:primitive_type Text: int
|———————Node:init_declarator Text: i = 0
|————————Node:identifier Text: i
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:binary_expression Text: i < 8
|———————Node:identifier Text: i
|———————Node:< Text: <
|———————Node:number_literal Text: 8
|——————Node:; Text: ;
|——————Node:update_expression Text: i++
|———————Node:identifier Text: i
|———————Node:++ Text: ++
|——————Node:) Text: )
|——————Node:compound_statement Text: {
      Serial.println(rxd[i]);
      Serial.println("\t");
    }
|———————Node:{ Text: {
|———————Node:expression_statement Text: Serial.println(rxd[i]);
|————————Node:call_expression Text: Serial.println(rxd[i])
|—————————Node:field_expression Text: Serial.println
|——————————Node:identifier Text: Serial
|——————————Node:. Text: .
|——————————Node:field_identifier Text: println
|—————————Node:argument_list Text: (rxd[i])
|——————————Node:( Text: (
|——————————Node:subscript_expression Text: rxd[i]
|———————————Node:identifier Text: rxd
|———————————Node:subscript_argument_list Text: [i]
|————————————Node:[ Text: [
|————————————Node:identifier Text: i
|————————————Node:] Text: ]
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: Serial.println("\t");
|————————Node:call_expression Text: Serial.println("\t")
|—————————Node:field_expression Text: Serial.println
|——————————Node:identifier Text: Serial
|——————————Node:. Text: .
|——————————Node:field_identifier Text: println
|—————————Node:argument_list Text: ("\t")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "\t"
|———————————Node:" Text: "
|———————————Node:escape_sequence Text: \t
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:expression_statement Text: Serial.println();
|——————Node:call_expression Text: Serial.println()
|———————Node:field_expression Text: Serial.println
|————————Node:identifier Text: Serial
|————————Node:. Text: .
|————————Node:field_identifier Text: println
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return 0;
|————Node:return Text: return
|————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: uint8_t mcp2518fd::mcp2518fd_init(byte speedset, const byte clock) {
  // Reset device
  mcp2518fd_reset();

  // Enable ECC and initialize RAM
  mcp2518fd_EccEnable();

  mcp2518fd_RamInit(0xff);

  // Configure device
  mcp2518fd_ConfigureObjectReset(&config);
  config.IsoCrcEnable = 1;
  config.StoreInTEF = 0;
  mcp2518fd_Configure(&config);

  // Setup TX FIFO
  mcp2518fd_TransmitChannelConfigureObjectReset(&txConfig);
  txConfig.FifoSize = 7;
  txConfig.PayLoadSize = CAN_PLSIZE_64;
  txConfig.TxPriority = 1;
  mcp2518fd_TransmitChannelConfigure(APP_TX_FIFO, &txConfig);

  // Setup RX FIFO
  mcp2518fd_ReceiveChannelConfigureObjectReset(&rxConfig);
  rxConfig.FifoSize = 15;
  rxConfig.PayLoadSize = CAN_PLSIZE_64;
  mcp2518fd_ReceiveChannelConfigure(APP_RX_FIFO, &rxConfig);

  // Setup RX Filter
  fObj.word = 0;
  fObj.bF.SID = 0;
  fObj.bF.EXIDE = 0;
  fObj.bF.EID = 0x00;

  mcp2518fd_FilterObjectConfigure(CAN_FILTER0, &fObj.bF);

  // Setup RX Mask
  mObj.word = 0;
  mObj.bF.MSID = 0;
  mObj.bF.MIDE = 0; // Only allow standard IDs
  mObj.bF.MEID = 0x0;
  mcp2518fd_FilterMaskConfigure(CAN_FILTER0, &mObj.bF);

  // Link FIFO and Filter
  mcp2518fd_FilterToFifoLink(CAN_FILTER0, APP_RX_FIFO, true);

  // Setup Bit Time
  mcp2518fd_BitTimeConfigure((MCP2518FD_BITTIME_SETUP)speedset,
                             CAN_SSP_MODE_AUTO, CAN_SYSCLK_40M);

  // Setup Transmit and Receive Interrupts
  mcp2518fd_GpioModeConfigure(GPIO_MODE_INT, GPIO_MODE_INT);
#ifdef APP_USE_TX_INT
  mcp2518fd_TransmitChannelEventEnable(APP_TX_FIFO, CAN_TX_FIFO_NOT_FULL_EVENT);
#endif
  mcp2518fd_ReceiveChannelEventEnable(APP_RX_FIFO, CAN_RX_FIFO_NOT_EMPTY_EVENT);
  mcp2518fd_ModuleEventEnable((CAN_MODULE_EVENT)(CAN_TX_EVENT | CAN_RX_EVENT));

  // Select Normal Mode
  // mcp2518fd_OperationModeSelect(CAN_CLASSIC_MODE);
  setMode(mcpMode);

  return 0;
}
|——Node:primitive_type Text: uint8_t
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_init(byte speedset, const byte clock)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_init
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_init
|———Node:parameter_list Text: (byte speedset, const byte clock)
|————Node:( Text: (
|————Node:parameter_declaration Text: byte speedset
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: speedset
|————Node:, Text: ,
|————Node:parameter_declaration Text: const byte clock
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: clock
|————Node:) Text: )
|——Node:compound_statement Text: {
  // Reset device
  mcp2518fd_reset();

  // Enable ECC and initialize RAM
  mcp2518fd_EccEnable();

  mcp2518fd_RamInit(0xff);

  // Configure device
  mcp2518fd_ConfigureObjectReset(&config);
  config.IsoCrcEnable = 1;
  config.StoreInTEF = 0;
  mcp2518fd_Configure(&config);

  // Setup TX FIFO
  mcp2518fd_TransmitChannelConfigureObjectReset(&txConfig);
  txConfig.FifoSize = 7;
  txConfig.PayLoadSize = CAN_PLSIZE_64;
  txConfig.TxPriority = 1;
  mcp2518fd_TransmitChannelConfigure(APP_TX_FIFO, &txConfig);

  // Setup RX FIFO
  mcp2518fd_ReceiveChannelConfigureObjectReset(&rxConfig);
  rxConfig.FifoSize = 15;
  rxConfig.PayLoadSize = CAN_PLSIZE_64;
  mcp2518fd_ReceiveChannelConfigure(APP_RX_FIFO, &rxConfig);

  // Setup RX Filter
  fObj.word = 0;
  fObj.bF.SID = 0;
  fObj.bF.EXIDE = 0;
  fObj.bF.EID = 0x00;

  mcp2518fd_FilterObjectConfigure(CAN_FILTER0, &fObj.bF);

  // Setup RX Mask
  mObj.word = 0;
  mObj.bF.MSID = 0;
  mObj.bF.MIDE = 0; // Only allow standard IDs
  mObj.bF.MEID = 0x0;
  mcp2518fd_FilterMaskConfigure(CAN_FILTER0, &mObj.bF);

  // Link FIFO and Filter
  mcp2518fd_FilterToFifoLink(CAN_FILTER0, APP_RX_FIFO, true);

  // Setup Bit Time
  mcp2518fd_BitTimeConfigure((MCP2518FD_BITTIME_SETUP)speedset,
                             CAN_SSP_MODE_AUTO, CAN_SYSCLK_40M);

  // Setup Transmit and Receive Interrupts
  mcp2518fd_GpioModeConfigure(GPIO_MODE_INT, GPIO_MODE_INT);
#ifdef APP_USE_TX_INT
  mcp2518fd_TransmitChannelEventEnable(APP_TX_FIFO, CAN_TX_FIFO_NOT_FULL_EVENT);
#endif
  mcp2518fd_ReceiveChannelEventEnable(APP_RX_FIFO, CAN_RX_FIFO_NOT_EMPTY_EVENT);
  mcp2518fd_ModuleEventEnable((CAN_MODULE_EVENT)(CAN_TX_EVENT | CAN_RX_EVENT));

  // Select Normal Mode
  // mcp2518fd_OperationModeSelect(CAN_CLASSIC_MODE);
  setMode(mcpMode);

  return 0;
}
|———Node:{ Text: {
|———Node:comment
|———Node:expression_statement Text: mcp2518fd_reset();
|————Node:call_expression Text: mcp2518fd_reset()
|—————Node:identifier Text: mcp2518fd_reset
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: mcp2518fd_EccEnable();
|————Node:call_expression Text: mcp2518fd_EccEnable()
|—————Node:identifier Text: mcp2518fd_EccEnable
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mcp2518fd_RamInit(0xff);
|————Node:call_expression Text: mcp2518fd_RamInit(0xff)
|—————Node:identifier Text: mcp2518fd_RamInit
|—————Node:argument_list Text: (0xff)
|——————Node:( Text: (
|——————Node:number_literal Text: 0xff
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: mcp2518fd_ConfigureObjectReset(&config);
|————Node:call_expression Text: mcp2518fd_ConfigureObjectReset(&config)
|—————Node:identifier Text: mcp2518fd_ConfigureObjectReset
|—————Node:argument_list Text: (&config)
|——————Node:( Text: (
|——————Node:pointer_expression Text: &config
|———————Node:& Text: &
|———————Node:identifier Text: config
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: config.IsoCrcEnable = 1;
|————Node:assignment_expression Text: config.IsoCrcEnable = 1
|—————Node:field_expression Text: config.IsoCrcEnable
|——————Node:identifier Text: config
|——————Node:. Text: .
|——————Node:field_identifier Text: IsoCrcEnable
|—————Node:= Text: =
|—————Node:number_literal Text: 1
|————Node:; Text: ;
|———Node:expression_statement Text: config.StoreInTEF = 0;
|————Node:assignment_expression Text: config.StoreInTEF = 0
|—————Node:field_expression Text: config.StoreInTEF
|——————Node:identifier Text: config
|——————Node:. Text: .
|——————Node:field_identifier Text: StoreInTEF
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: mcp2518fd_Configure(&config);
|————Node:call_expression Text: mcp2518fd_Configure(&config)
|—————Node:identifier Text: mcp2518fd_Configure
|—————Node:argument_list Text: (&config)
|——————Node:( Text: (
|——————Node:pointer_expression Text: &config
|———————Node:& Text: &
|———————Node:identifier Text: config
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: mcp2518fd_TransmitChannelConfigureObjectReset(&txConfig);
|————Node:call_expression Text: mcp2518fd_TransmitChannelConfigureObjectReset(&txConfig)
|—————Node:identifier Text: mcp2518fd_TransmitChannelConfigureObjectReset
|—————Node:argument_list Text: (&txConfig)
|——————Node:( Text: (
|——————Node:pointer_expression Text: &txConfig
|———————Node:& Text: &
|———————Node:identifier Text: txConfig
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: txConfig.FifoSize = 7;
|————Node:assignment_expression Text: txConfig.FifoSize = 7
|—————Node:field_expression Text: txConfig.FifoSize
|——————Node:identifier Text: txConfig
|——————Node:. Text: .
|——————Node:field_identifier Text: FifoSize
|—————Node:= Text: =
|—————Node:number_literal Text: 7
|————Node:; Text: ;
|———Node:expression_statement Text: txConfig.PayLoadSize = CAN_PLSIZE_64;
|————Node:assignment_expression Text: txConfig.PayLoadSize = CAN_PLSIZE_64
|—————Node:field_expression Text: txConfig.PayLoadSize
|——————Node:identifier Text: txConfig
|——————Node:. Text: .
|——————Node:field_identifier Text: PayLoadSize
|—————Node:= Text: =
|—————Node:identifier Text: CAN_PLSIZE_64
|————Node:; Text: ;
|———Node:expression_statement Text: txConfig.TxPriority = 1;
|————Node:assignment_expression Text: txConfig.TxPriority = 1
|—————Node:field_expression Text: txConfig.TxPriority
|——————Node:identifier Text: txConfig
|——————Node:. Text: .
|——————Node:field_identifier Text: TxPriority
|—————Node:= Text: =
|—————Node:number_literal Text: 1
|————Node:; Text: ;
|———Node:expression_statement Text: mcp2518fd_TransmitChannelConfigure(APP_TX_FIFO, &txConfig);
|————Node:call_expression Text: mcp2518fd_TransmitChannelConfigure(APP_TX_FIFO, &txConfig)
|—————Node:identifier Text: mcp2518fd_TransmitChannelConfigure
|—————Node:argument_list Text: (APP_TX_FIFO, &txConfig)
|——————Node:( Text: (
|——————Node:identifier Text: APP_TX_FIFO
|——————Node:, Text: ,
|——————Node:pointer_expression Text: &txConfig
|———————Node:& Text: &
|———————Node:identifier Text: txConfig
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: mcp2518fd_ReceiveChannelConfigureObjectReset(&rxConfig);
|————Node:call_expression Text: mcp2518fd_ReceiveChannelConfigureObjectReset(&rxConfig)
|—————Node:identifier Text: mcp2518fd_ReceiveChannelConfigureObjectReset
|—————Node:argument_list Text: (&rxConfig)
|——————Node:( Text: (
|——————Node:pointer_expression Text: &rxConfig
|———————Node:& Text: &
|———————Node:identifier Text: rxConfig
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: rxConfig.FifoSize = 15;
|————Node:assignment_expression Text: rxConfig.FifoSize = 15
|—————Node:field_expression Text: rxConfig.FifoSize
|——————Node:identifier Text: rxConfig
|——————Node:. Text: .
|——————Node:field_identifier Text: FifoSize
|—————Node:= Text: =
|—————Node:number_literal Text: 15
|————Node:; Text: ;
|———Node:expression_statement Text: rxConfig.PayLoadSize = CAN_PLSIZE_64;
|————Node:assignment_expression Text: rxConfig.PayLoadSize = CAN_PLSIZE_64
|—————Node:field_expression Text: rxConfig.PayLoadSize
|——————Node:identifier Text: rxConfig
|——————Node:. Text: .
|——————Node:field_identifier Text: PayLoadSize
|—————Node:= Text: =
|—————Node:identifier Text: CAN_PLSIZE_64
|————Node:; Text: ;
|———Node:expression_statement Text: mcp2518fd_ReceiveChannelConfigure(APP_RX_FIFO, &rxConfig);
|————Node:call_expression Text: mcp2518fd_ReceiveChannelConfigure(APP_RX_FIFO, &rxConfig)
|—————Node:identifier Text: mcp2518fd_ReceiveChannelConfigure
|—————Node:argument_list Text: (APP_RX_FIFO, &rxConfig)
|——————Node:( Text: (
|——————Node:identifier Text: APP_RX_FIFO
|——————Node:, Text: ,
|——————Node:pointer_expression Text: &rxConfig
|———————Node:& Text: &
|———————Node:identifier Text: rxConfig
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: fObj.word = 0;
|————Node:assignment_expression Text: fObj.word = 0
|—————Node:field_expression Text: fObj.word
|——————Node:identifier Text: fObj
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: fObj.bF.SID = 0;
|————Node:assignment_expression Text: fObj.bF.SID = 0
|—————Node:field_expression Text: fObj.bF.SID
|——————Node:field_expression Text: fObj.bF
|———————Node:identifier Text: fObj
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: SID
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: fObj.bF.EXIDE = 0;
|————Node:assignment_expression Text: fObj.bF.EXIDE = 0
|—————Node:field_expression Text: fObj.bF.EXIDE
|——————Node:field_expression Text: fObj.bF
|———————Node:identifier Text: fObj
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: EXIDE
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: fObj.bF.EID = 0x00;
|————Node:assignment_expression Text: fObj.bF.EID = 0x00
|—————Node:field_expression Text: fObj.bF.EID
|——————Node:field_expression Text: fObj.bF
|———————Node:identifier Text: fObj
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: EID
|—————Node:= Text: =
|—————Node:number_literal Text: 0x00
|————Node:; Text: ;
|———Node:expression_statement Text: mcp2518fd_FilterObjectConfigure(CAN_FILTER0, &fObj.bF);
|————Node:call_expression Text: mcp2518fd_FilterObjectConfigure(CAN_FILTER0, &fObj.bF)
|—————Node:identifier Text: mcp2518fd_FilterObjectConfigure
|—————Node:argument_list Text: (CAN_FILTER0, &fObj.bF)
|——————Node:( Text: (
|——————Node:identifier Text: CAN_FILTER0
|——————Node:, Text: ,
|——————Node:pointer_expression Text: &fObj.bF
|———————Node:& Text: &
|———————Node:field_expression Text: fObj.bF
|————————Node:identifier Text: fObj
|————————Node:. Text: .
|————————Node:field_identifier Text: bF
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: mObj.word = 0;
|————Node:assignment_expression Text: mObj.word = 0
|—————Node:field_expression Text: mObj.word
|——————Node:identifier Text: mObj
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: mObj.bF.MSID = 0;
|————Node:assignment_expression Text: mObj.bF.MSID = 0
|—————Node:field_expression Text: mObj.bF.MSID
|——————Node:field_expression Text: mObj.bF
|———————Node:identifier Text: mObj
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: MSID
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: mObj.bF.MIDE = 0;
|————Node:assignment_expression Text: mObj.bF.MIDE = 0
|—————Node:field_expression Text: mObj.bF.MIDE
|——————Node:field_expression Text: mObj.bF
|———————Node:identifier Text: mObj
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: MIDE
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: mObj.bF.MEID = 0x0;
|————Node:assignment_expression Text: mObj.bF.MEID = 0x0
|—————Node:field_expression Text: mObj.bF.MEID
|——————Node:field_expression Text: mObj.bF
|———————Node:identifier Text: mObj
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: MEID
|—————Node:= Text: =
|—————Node:number_literal Text: 0x0
|————Node:; Text: ;
|———Node:expression_statement Text: mcp2518fd_FilterMaskConfigure(CAN_FILTER0, &mObj.bF);
|————Node:call_expression Text: mcp2518fd_FilterMaskConfigure(CAN_FILTER0, &mObj.bF)
|—————Node:identifier Text: mcp2518fd_FilterMaskConfigure
|—————Node:argument_list Text: (CAN_FILTER0, &mObj.bF)
|——————Node:( Text: (
|——————Node:identifier Text: CAN_FILTER0
|——————Node:, Text: ,
|——————Node:pointer_expression Text: &mObj.bF
|———————Node:& Text: &
|———————Node:field_expression Text: mObj.bF
|————————Node:identifier Text: mObj
|————————Node:. Text: .
|————————Node:field_identifier Text: bF
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: mcp2518fd_FilterToFifoLink(CAN_FILTER0, APP_RX_FIFO, true);
|————Node:call_expression Text: mcp2518fd_FilterToFifoLink(CAN_FILTER0, APP_RX_FIFO, true)
|—————Node:identifier Text: mcp2518fd_FilterToFifoLink
|—————Node:argument_list Text: (CAN_FILTER0, APP_RX_FIFO, true)
|——————Node:( Text: (
|——————Node:identifier Text: CAN_FILTER0
|——————Node:, Text: ,
|——————Node:identifier Text: APP_RX_FIFO
|——————Node:, Text: ,
|——————Node:true Text: true
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: mcp2518fd_BitTimeConfigure((MCP2518FD_BITTIME_SETUP)speedset,
                             CAN_SSP_MODE_AUTO, CAN_SYSCLK_40M);
|————Node:call_expression Text: mcp2518fd_BitTimeConfigure((MCP2518FD_BITTIME_SETUP)speedset,
                             CAN_SSP_MODE_AUTO, CAN_SYSCLK_40M)
|—————Node:identifier Text: mcp2518fd_BitTimeConfigure
|—————Node:argument_list Text: ((MCP2518FD_BITTIME_SETUP)speedset,
                             CAN_SSP_MODE_AUTO, CAN_SYSCLK_40M)
|——————Node:( Text: (
|——————Node:cast_expression Text: (MCP2518FD_BITTIME_SETUP)speedset
|———————Node:( Text: (
|———————Node:type_descriptor Text: MCP2518FD_BITTIME_SETUP
|————————Node:type_identifier Text: MCP2518FD_BITTIME_SETUP
|———————Node:) Text: )
|———————Node:identifier Text: speedset
|——————Node:, Text: ,
|——————Node:identifier Text: CAN_SSP_MODE_AUTO
|——————Node:, Text: ,
|——————Node:identifier Text: CAN_SYSCLK_40M
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: mcp2518fd_GpioModeConfigure(GPIO_MODE_INT, GPIO_MODE_INT);
|————Node:call_expression Text: mcp2518fd_GpioModeConfigure(GPIO_MODE_INT, GPIO_MODE_INT)
|—————Node:identifier Text: mcp2518fd_GpioModeConfigure
|—————Node:argument_list Text: (GPIO_MODE_INT, GPIO_MODE_INT)
|——————Node:( Text: (
|——————Node:identifier Text: GPIO_MODE_INT
|——————Node:, Text: ,
|——————Node:identifier Text: GPIO_MODE_INT
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:preproc_ifdef Text: #ifdef APP_USE_TX_INT
  mcp2518fd_TransmitChannelEventEnable(APP_TX_FIFO, CAN_TX_FIFO_NOT_FULL_EVENT);
#endif
|————Node:#ifdef Text: #ifdef
|————Node:identifier Text: APP_USE_TX_INT
|————Node:expression_statement Text: mcp2518fd_TransmitChannelEventEnable(APP_TX_FIFO, CAN_TX_FIFO_NOT_FULL_EVENT);
|—————Node:call_expression Text: mcp2518fd_TransmitChannelEventEnable(APP_TX_FIFO, CAN_TX_FIFO_NOT_FULL_EVENT)
|——————Node:identifier Text: mcp2518fd_TransmitChannelEventEnable
|——————Node:argument_list Text: (APP_TX_FIFO, CAN_TX_FIFO_NOT_FULL_EVENT)
|———————Node:( Text: (
|———————Node:identifier Text: APP_TX_FIFO
|———————Node:, Text: ,
|———————Node:identifier Text: CAN_TX_FIFO_NOT_FULL_EVENT
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:#endif Text: #endif
|———Node:expression_statement Text: mcp2518fd_ReceiveChannelEventEnable(APP_RX_FIFO, CAN_RX_FIFO_NOT_EMPTY_EVENT);
|————Node:call_expression Text: mcp2518fd_ReceiveChannelEventEnable(APP_RX_FIFO, CAN_RX_FIFO_NOT_EMPTY_EVENT)
|—————Node:identifier Text: mcp2518fd_ReceiveChannelEventEnable
|—————Node:argument_list Text: (APP_RX_FIFO, CAN_RX_FIFO_NOT_EMPTY_EVENT)
|——————Node:( Text: (
|——————Node:identifier Text: APP_RX_FIFO
|——————Node:, Text: ,
|——————Node:identifier Text: CAN_RX_FIFO_NOT_EMPTY_EVENT
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mcp2518fd_ModuleEventEnable((CAN_MODULE_EVENT)(CAN_TX_EVENT | CAN_RX_EVENT));
|————Node:call_expression Text: mcp2518fd_ModuleEventEnable((CAN_MODULE_EVENT)(CAN_TX_EVENT | CAN_RX_EVENT))
|—————Node:identifier Text: mcp2518fd_ModuleEventEnable
|—————Node:argument_list Text: ((CAN_MODULE_EVENT)(CAN_TX_EVENT | CAN_RX_EVENT))
|——————Node:( Text: (
|——————Node:call_expression Text: (CAN_MODULE_EVENT)(CAN_TX_EVENT | CAN_RX_EVENT)
|———————Node:parenthesized_expression Text: (CAN_MODULE_EVENT)
|————————Node:( Text: (
|————————Node:identifier Text: CAN_MODULE_EVENT
|————————Node:) Text: )
|———————Node:argument_list Text: (CAN_TX_EVENT | CAN_RX_EVENT)
|————————Node:( Text: (
|————————Node:binary_expression Text: CAN_TX_EVENT | CAN_RX_EVENT
|—————————Node:identifier Text: CAN_TX_EVENT
|—————————Node:| Text: |
|—————————Node:identifier Text: CAN_RX_EVENT
|————————Node:) Text: )
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:comment
|———Node:expression_statement Text: setMode(mcpMode);
|————Node:call_expression Text: setMode(mcpMode)
|—————Node:identifier Text: setMode
|—————Node:argument_list Text: (mcpMode)
|——————Node:( Text: (
|——————Node:identifier Text: mcpMode
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return 0;
|————Node:return Text: return
|————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: void mcp2518fd::enableTxInterrupt(bool enable) {
  if (enable == true)
  {
    mcp2518fd_ModuleEventEnable(CAN_TX_EVENT);
  }
  return;
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: mcp2518fd::enableTxInterrupt(bool enable)
|———Node:qualified_identifier Text: mcp2518fd::enableTxInterrupt
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: enableTxInterrupt
|———Node:parameter_list Text: (bool enable)
|————Node:( Text: (
|————Node:parameter_declaration Text: bool enable
|—————Node:primitive_type Text: bool
|—————Node:identifier Text: enable
|————Node:) Text: )
|——Node:compound_statement Text: {
  if (enable == true)
  {
    mcp2518fd_ModuleEventEnable(CAN_TX_EVENT);
  }
  return;
}
|———Node:{ Text: {
|———Node:if_statement Text: if (enable == true)
  {
    mcp2518fd_ModuleEventEnable(CAN_TX_EVENT);
  }
|————Node:if Text: if
|————Node:condition_clause Text: (enable == true)
|—————Node:( Text: (
|—————Node:binary_expression Text: enable == true
|——————Node:identifier Text: enable
|——————Node:== Text: ==
|——————Node:true Text: true
|—————Node:) Text: )
|————Node:compound_statement Text: {
    mcp2518fd_ModuleEventEnable(CAN_TX_EVENT);
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: mcp2518fd_ModuleEventEnable(CAN_TX_EVENT);
|——————Node:call_expression Text: mcp2518fd_ModuleEventEnable(CAN_TX_EVENT)
|———————Node:identifier Text: mcp2518fd_ModuleEventEnable
|———————Node:argument_list Text: (CAN_TX_EVENT)
|————————Node:( Text: (
|————————Node:identifier Text: CAN_TX_EVENT
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return;
|————Node:return Text: return
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: byte mcp2518fd::init_Mask(byte num, byte ext, unsigned long ulData) {

  int8_t err;
  mcp2518fd_OperationModeSelect(CAN_CONFIGURATION_MODE);

  // Setup RX Mask
  mObj.word = 0;
  mObj.bF.MSID = ulData;
  mObj.bF.MIDE = ext; // Only allow standard IDs
  mObj.bF.MEID = 0x0;
  err = mcp2518fd_FilterMaskConfigure((CAN_FILTER)num, &mObj.bF);
  mcp2518fd_OperationModeSelect(mcpMode);

  return err;
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: mcp2518fd::init_Mask(byte num, byte ext, unsigned long ulData)
|———Node:qualified_identifier Text: mcp2518fd::init_Mask
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: init_Mask
|———Node:parameter_list Text: (byte num, byte ext, unsigned long ulData)
|————Node:( Text: (
|————Node:parameter_declaration Text: byte num
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: num
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte ext
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: ext
|————Node:, Text: ,
|————Node:parameter_declaration Text: unsigned long ulData
|—————Node:sized_type_specifier Text: unsigned long
|——————Node:unsigned Text: unsigned
|——————Node:long Text: long
|—————Node:identifier Text: ulData
|————Node:) Text: )
|——Node:compound_statement Text: {

  int8_t err;
  mcp2518fd_OperationModeSelect(CAN_CONFIGURATION_MODE);

  // Setup RX Mask
  mObj.word = 0;
  mObj.bF.MSID = ulData;
  mObj.bF.MIDE = ext; // Only allow standard IDs
  mObj.bF.MEID = 0x0;
  err = mcp2518fd_FilterMaskConfigure((CAN_FILTER)num, &mObj.bF);
  mcp2518fd_OperationModeSelect(mcpMode);

  return err;
}
|———Node:{ Text: {
|———Node:declaration Text: int8_t err;
|————Node:primitive_type Text: int8_t
|————Node:identifier Text: err
|————Node:; Text: ;
|———Node:expression_statement Text: mcp2518fd_OperationModeSelect(CAN_CONFIGURATION_MODE);
|————Node:call_expression Text: mcp2518fd_OperationModeSelect(CAN_CONFIGURATION_MODE)
|—————Node:identifier Text: mcp2518fd_OperationModeSelect
|—————Node:argument_list Text: (CAN_CONFIGURATION_MODE)
|——————Node:( Text: (
|——————Node:identifier Text: CAN_CONFIGURATION_MODE
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: mObj.word = 0;
|————Node:assignment_expression Text: mObj.word = 0
|—————Node:field_expression Text: mObj.word
|——————Node:identifier Text: mObj
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: mObj.bF.MSID = ulData;
|————Node:assignment_expression Text: mObj.bF.MSID = ulData
|—————Node:field_expression Text: mObj.bF.MSID
|——————Node:field_expression Text: mObj.bF
|———————Node:identifier Text: mObj
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: MSID
|—————Node:= Text: =
|—————Node:identifier Text: ulData
|————Node:; Text: ;
|———Node:expression_statement Text: mObj.bF.MIDE = ext;
|————Node:assignment_expression Text: mObj.bF.MIDE = ext
|—————Node:field_expression Text: mObj.bF.MIDE
|——————Node:field_expression Text: mObj.bF
|———————Node:identifier Text: mObj
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: MIDE
|—————Node:= Text: =
|—————Node:identifier Text: ext
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: mObj.bF.MEID = 0x0;
|————Node:assignment_expression Text: mObj.bF.MEID = 0x0
|—————Node:field_expression Text: mObj.bF.MEID
|——————Node:field_expression Text: mObj.bF
|———————Node:identifier Text: mObj
|———————Node:. Text: .
|———————Node:field_identifier Text: bF
|——————Node:. Text: .
|——————Node:field_identifier Text: MEID
|—————Node:= Text: =
|—————Node:number_literal Text: 0x0
|————Node:; Text: ;
|———Node:expression_statement Text: err = mcp2518fd_FilterMaskConfigure((CAN_FILTER)num, &mObj.bF);
|————Node:assignment_expression Text: err = mcp2518fd_FilterMaskConfigure((CAN_FILTER)num, &mObj.bF)
|—————Node:identifier Text: err
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_FilterMaskConfigure((CAN_FILTER)num, &mObj.bF)
|——————Node:identifier Text: mcp2518fd_FilterMaskConfigure
|——————Node:argument_list Text: ((CAN_FILTER)num, &mObj.bF)
|———————Node:( Text: (
|———————Node:cast_expression Text: (CAN_FILTER)num
|————————Node:( Text: (
|————————Node:type_descriptor Text: CAN_FILTER
|—————————Node:type_identifier Text: CAN_FILTER
|————————Node:) Text: )
|————————Node:identifier Text: num
|———————Node:, Text: ,
|———————Node:pointer_expression Text: &mObj.bF
|————————Node:& Text: &
|————————Node:field_expression Text: mObj.bF
|—————————Node:identifier Text: mObj
|—————————Node:. Text: .
|—————————Node:field_identifier Text: bF
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mcp2518fd_OperationModeSelect(mcpMode);
|————Node:call_expression Text: mcp2518fd_OperationModeSelect(mcpMode)
|—————Node:identifier Text: mcp2518fd_OperationModeSelect
|—————Node:argument_list Text: (mcpMode)
|——————Node:( Text: (
|——————Node:identifier Text: mcpMode
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return err;
|————Node:return Text: return
|————Node:identifier Text: err
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: byte mcp2518fd::init_Filt(byte num, byte ext, unsigned long ulData) {
  int8_t err;
  err = mcp2518fd_OperationModeSelect(CAN_CONFIGURATION_MODE);

  // Setup RX Filter
  fObj.word = 0;
  if (ext == 0) {
    fObj.bF.SID = ulData;
    fObj.bF.EXIDE = 0; // standard identifier
    fObj.bF.EID = 0x00;
  } else if (ext == 1) {
    fObj.bF.SID = 0;
    fObj.bF.EXIDE = 1; // extended identifier
    fObj.bF.EID = ulData;
  }
  mcp2518fd_FilterObjectConfigure((CAN_FILTER)num, &fObj.bF);
  mcp2518fd_OperationModeSelect(mcpMode);
  return err;
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: mcp2518fd::init_Filt(byte num, byte ext, unsigned long ulData)
|———Node:qualified_identifier Text: mcp2518fd::init_Filt
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: init_Filt
|———Node:parameter_list Text: (byte num, byte ext, unsigned long ulData)
|————Node:( Text: (
|————Node:parameter_declaration Text: byte num
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: num
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte ext
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: ext
|————Node:, Text: ,
|————Node:parameter_declaration Text: unsigned long ulData
|—————Node:sized_type_specifier Text: unsigned long
|——————Node:unsigned Text: unsigned
|——————Node:long Text: long
|—————Node:identifier Text: ulData
|————Node:) Text: )
|——Node:compound_statement Text: {
  int8_t err;
  err = mcp2518fd_OperationModeSelect(CAN_CONFIGURATION_MODE);

  // Setup RX Filter
  fObj.word = 0;
  if (ext == 0) {
    fObj.bF.SID = ulData;
    fObj.bF.EXIDE = 0; // standard identifier
    fObj.bF.EID = 0x00;
  } else if (ext == 1) {
    fObj.bF.SID = 0;
    fObj.bF.EXIDE = 1; // extended identifier
    fObj.bF.EID = ulData;
  }
  mcp2518fd_FilterObjectConfigure((CAN_FILTER)num, &fObj.bF);
  mcp2518fd_OperationModeSelect(mcpMode);
  return err;
}
|———Node:{ Text: {
|———Node:declaration Text: int8_t err;
|————Node:primitive_type Text: int8_t
|————Node:identifier Text: err
|————Node:; Text: ;
|———Node:expression_statement Text: err = mcp2518fd_OperationModeSelect(CAN_CONFIGURATION_MODE);
|————Node:assignment_expression Text: err = mcp2518fd_OperationModeSelect(CAN_CONFIGURATION_MODE)
|—————Node:identifier Text: err
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_OperationModeSelect(CAN_CONFIGURATION_MODE)
|——————Node:identifier Text: mcp2518fd_OperationModeSelect
|——————Node:argument_list Text: (CAN_CONFIGURATION_MODE)
|———————Node:( Text: (
|———————Node:identifier Text: CAN_CONFIGURATION_MODE
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: fObj.word = 0;
|————Node:assignment_expression Text: fObj.word = 0
|—————Node:field_expression Text: fObj.word
|——————Node:identifier Text: fObj
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:if_statement Text: if (ext == 0) {
    fObj.bF.SID = ulData;
    fObj.bF.EXIDE = 0; // standard identifier
    fObj.bF.EID = 0x00;
  } else if (ext == 1) {
    fObj.bF.SID = 0;
    fObj.bF.EXIDE = 1; // extended identifier
    fObj.bF.EID = ulData;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (ext == 0)
|—————Node:( Text: (
|—————Node:binary_expression Text: ext == 0
|——————Node:identifier Text: ext
|——————Node:== Text: ==
|——————Node:number_literal Text: 0
|—————Node:) Text: )
|————Node:compound_statement Text: {
    fObj.bF.SID = ulData;
    fObj.bF.EXIDE = 0; // standard identifier
    fObj.bF.EID = 0x00;
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: fObj.bF.SID = ulData;
|——————Node:assignment_expression Text: fObj.bF.SID = ulData
|———————Node:field_expression Text: fObj.bF.SID
|————————Node:field_expression Text: fObj.bF
|—————————Node:identifier Text: fObj
|—————————Node:. Text: .
|—————————Node:field_identifier Text: bF
|————————Node:. Text: .
|————————Node:field_identifier Text: SID
|———————Node:= Text: =
|———————Node:identifier Text: ulData
|——————Node:; Text: ;
|—————Node:expression_statement Text: fObj.bF.EXIDE = 0;
|——————Node:assignment_expression Text: fObj.bF.EXIDE = 0
|———————Node:field_expression Text: fObj.bF.EXIDE
|————————Node:field_expression Text: fObj.bF
|—————————Node:identifier Text: fObj
|—————————Node:. Text: .
|—————————Node:field_identifier Text: bF
|————————Node:. Text: .
|————————Node:field_identifier Text: EXIDE
|———————Node:= Text: =
|———————Node:number_literal Text: 0
|——————Node:; Text: ;
|—————Node:comment
|—————Node:expression_statement Text: fObj.bF.EID = 0x00;
|——————Node:assignment_expression Text: fObj.bF.EID = 0x00
|———————Node:field_expression Text: fObj.bF.EID
|————————Node:field_expression Text: fObj.bF
|—————————Node:identifier Text: fObj
|—————————Node:. Text: .
|—————————Node:field_identifier Text: bF
|————————Node:. Text: .
|————————Node:field_identifier Text: EID
|———————Node:= Text: =
|———————Node:number_literal Text: 0x00
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else if (ext == 1) {
    fObj.bF.SID = 0;
    fObj.bF.EXIDE = 1; // extended identifier
    fObj.bF.EID = ulData;
  }
|—————Node:else Text: else
|—————Node:if_statement Text: if (ext == 1) {
    fObj.bF.SID = 0;
    fObj.bF.EXIDE = 1; // extended identifier
    fObj.bF.EID = ulData;
  }
|——————Node:if Text: if
|——————Node:condition_clause Text: (ext == 1)
|———————Node:( Text: (
|———————Node:binary_expression Text: ext == 1
|————————Node:identifier Text: ext
|————————Node:== Text: ==
|————————Node:number_literal Text: 1
|———————Node:) Text: )
|——————Node:compound_statement Text: {
    fObj.bF.SID = 0;
    fObj.bF.EXIDE = 1; // extended identifier
    fObj.bF.EID = ulData;
  }
|———————Node:{ Text: {
|———————Node:expression_statement Text: fObj.bF.SID = 0;
|————————Node:assignment_expression Text: fObj.bF.SID = 0
|—————————Node:field_expression Text: fObj.bF.SID
|——————————Node:field_expression Text: fObj.bF
|———————————Node:identifier Text: fObj
|———————————Node:. Text: .
|———————————Node:field_identifier Text: bF
|——————————Node:. Text: .
|——————————Node:field_identifier Text: SID
|—————————Node:= Text: =
|—————————Node:number_literal Text: 0
|————————Node:; Text: ;
|———————Node:expression_statement Text: fObj.bF.EXIDE = 1;
|————————Node:assignment_expression Text: fObj.bF.EXIDE = 1
|—————————Node:field_expression Text: fObj.bF.EXIDE
|——————————Node:field_expression Text: fObj.bF
|———————————Node:identifier Text: fObj
|———————————Node:. Text: .
|———————————Node:field_identifier Text: bF
|——————————Node:. Text: .
|——————————Node:field_identifier Text: EXIDE
|—————————Node:= Text: =
|—————————Node:number_literal Text: 1
|————————Node:; Text: ;
|———————Node:comment
|———————Node:expression_statement Text: fObj.bF.EID = ulData;
|————————Node:assignment_expression Text: fObj.bF.EID = ulData
|—————————Node:field_expression Text: fObj.bF.EID
|——————————Node:field_expression Text: fObj.bF
|———————————Node:identifier Text: fObj
|———————————Node:. Text: .
|———————————Node:field_identifier Text: bF
|——————————Node:. Text: .
|——————————Node:field_identifier Text: EID
|—————————Node:= Text: =
|—————————Node:identifier Text: ulData
|————————Node:; Text: ;
|———————Node:} Text: }
|———Node:expression_statement Text: mcp2518fd_FilterObjectConfigure((CAN_FILTER)num, &fObj.bF);
|————Node:call_expression Text: mcp2518fd_FilterObjectConfigure((CAN_FILTER)num, &fObj.bF)
|—————Node:identifier Text: mcp2518fd_FilterObjectConfigure
|—————Node:argument_list Text: ((CAN_FILTER)num, &fObj.bF)
|——————Node:( Text: (
|——————Node:cast_expression Text: (CAN_FILTER)num
|———————Node:( Text: (
|———————Node:type_descriptor Text: CAN_FILTER
|————————Node:type_identifier Text: CAN_FILTER
|———————Node:) Text: )
|———————Node:identifier Text: num
|——————Node:, Text: ,
|——————Node:pointer_expression Text: &fObj.bF
|———————Node:& Text: &
|———————Node:field_expression Text: fObj.bF
|————————Node:identifier Text: fObj
|————————Node:. Text: .
|————————Node:field_identifier Text: bF
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mcp2518fd_OperationModeSelect(mcpMode);
|————Node:call_expression Text: mcp2518fd_OperationModeSelect(mcpMode)
|—————Node:identifier Text: mcp2518fd_OperationModeSelect
|—————Node:argument_list Text: (mcpMode)
|——————Node:( Text: (
|——————Node:identifier Text: mcpMode
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return err;
|————Node:return Text: return
|————Node:identifier Text: err
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: void mcp2518fd::setSleepWakeup(const byte enable) {
  if (enable) {
    mcp2518fd_LowPowerModeEnable();
  } else {
    mcp2518fd_LowPowerModeDisable();
  }
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: mcp2518fd::setSleepWakeup(const byte enable)
|———Node:qualified_identifier Text: mcp2518fd::setSleepWakeup
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: setSleepWakeup
|———Node:parameter_list Text: (const byte enable)
|————Node:( Text: (
|————Node:parameter_declaration Text: const byte enable
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: enable
|————Node:) Text: )
|——Node:compound_statement Text: {
  if (enable) {
    mcp2518fd_LowPowerModeEnable();
  } else {
    mcp2518fd_LowPowerModeDisable();
  }
}
|———Node:{ Text: {
|———Node:if_statement Text: if (enable) {
    mcp2518fd_LowPowerModeEnable();
  } else {
    mcp2518fd_LowPowerModeDisable();
  }
|————Node:if Text: if
|————Node:condition_clause Text: (enable)
|—————Node:( Text: (
|—————Node:identifier Text: enable
|—————Node:) Text: )
|————Node:compound_statement Text: {
    mcp2518fd_LowPowerModeEnable();
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: mcp2518fd_LowPowerModeEnable();
|——————Node:call_expression Text: mcp2518fd_LowPowerModeEnable()
|———————Node:identifier Text: mcp2518fd_LowPowerModeEnable
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else {
    mcp2518fd_LowPowerModeDisable();
  }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
    mcp2518fd_LowPowerModeDisable();
  }
|——————Node:{ Text: {
|——————Node:expression_statement Text: mcp2518fd_LowPowerModeDisable();
|———————Node:call_expression Text: mcp2518fd_LowPowerModeDisable()
|————————Node:identifier Text: mcp2518fd_LowPowerModeDisable
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:; Text: ;
|——————Node:} Text: }
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: byte mcp2518fd::sleep() {
  if (getMode() != 0x01) {
    return mcp2518fd_OperationModeSelect(CAN_SLEEP_MODE);
  } else {
    return CAN_OK;
  }
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: mcp2518fd::sleep()
|———Node:qualified_identifier Text: mcp2518fd::sleep
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: sleep
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
  if (getMode() != 0x01) {
    return mcp2518fd_OperationModeSelect(CAN_SLEEP_MODE);
  } else {
    return CAN_OK;
  }
}
|———Node:{ Text: {
|———Node:if_statement Text: if (getMode() != 0x01) {
    return mcp2518fd_OperationModeSelect(CAN_SLEEP_MODE);
  } else {
    return CAN_OK;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (getMode() != 0x01)
|—————Node:( Text: (
|—————Node:binary_expression Text: getMode() != 0x01
|——————Node:call_expression Text: getMode()
|———————Node:identifier Text: getMode
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:!= Text: !=
|——————Node:number_literal Text: 0x01
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return mcp2518fd_OperationModeSelect(CAN_SLEEP_MODE);
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return mcp2518fd_OperationModeSelect(CAN_SLEEP_MODE);
|——————Node:return Text: return
|——————Node:call_expression Text: mcp2518fd_OperationModeSelect(CAN_SLEEP_MODE)
|———————Node:identifier Text: mcp2518fd_OperationModeSelect
|———————Node:argument_list Text: (CAN_SLEEP_MODE)
|————————Node:( Text: (
|————————Node:identifier Text: CAN_SLEEP_MODE
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else {
    return CAN_OK;
  }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
    return CAN_OK;
  }
|——————Node:{ Text: {
|——————Node:return_statement Text: return CAN_OK;
|———————Node:return Text: return
|———————Node:identifier Text: CAN_OK
|———————Node:; Text: ;
|——————Node:} Text: }
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: byte mcp2518fd::wake() {
  byte currMode = getMode();
  if (currMode != mcpMode) {
    return mcp2518fd_OperationModeSelect(mcpMode);
  } else {
    return CAN_OK;
  }
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: mcp2518fd::wake()
|———Node:qualified_identifier Text: mcp2518fd::wake
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: wake
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
  byte currMode = getMode();
  if (currMode != mcpMode) {
    return mcp2518fd_OperationModeSelect(mcpMode);
  } else {
    return CAN_OK;
  }
}
|———Node:{ Text: {
|———Node:declaration Text: byte currMode = getMode();
|————Node:type_identifier Text: byte
|————Node:init_declarator Text: currMode = getMode()
|—————Node:identifier Text: currMode
|—————Node:= Text: =
|—————Node:call_expression Text: getMode()
|——————Node:identifier Text: getMode
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (currMode != mcpMode) {
    return mcp2518fd_OperationModeSelect(mcpMode);
  } else {
    return CAN_OK;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (currMode != mcpMode)
|—————Node:( Text: (
|—————Node:binary_expression Text: currMode != mcpMode
|——————Node:identifier Text: currMode
|——————Node:!= Text: !=
|——————Node:identifier Text: mcpMode
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return mcp2518fd_OperationModeSelect(mcpMode);
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return mcp2518fd_OperationModeSelect(mcpMode);
|——————Node:return Text: return
|——————Node:call_expression Text: mcp2518fd_OperationModeSelect(mcpMode)
|———————Node:identifier Text: mcp2518fd_OperationModeSelect
|———————Node:argument_list Text: (mcpMode)
|————————Node:( Text: (
|————————Node:identifier Text: mcpMode
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|————Node:else_clause Text: else {
    return CAN_OK;
  }
|—————Node:else Text: else
|—————Node:compound_statement Text: {
    return CAN_OK;
  }
|——————Node:{ Text: {
|——————Node:return_statement Text: return CAN_OK;
|———————Node:return Text: return
|———————Node:identifier Text: CAN_OK
|———————Node:; Text: ;
|——————Node:} Text: }
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: byte mcp2518fd::getMode() {
  byte ret;
  CAN_OPERATION_MODE mode;
  mode = mcp2518fd_OperationModeGet();
  ret = (byte)mode;
  return ret;
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: mcp2518fd::getMode()
|———Node:qualified_identifier Text: mcp2518fd::getMode
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: getMode
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
  byte ret;
  CAN_OPERATION_MODE mode;
  mode = mcp2518fd_OperationModeGet();
  ret = (byte)mode;
  return ret;
}
|———Node:{ Text: {
|———Node:declaration Text: byte ret;
|————Node:type_identifier Text: byte
|————Node:identifier Text: ret
|————Node:; Text: ;
|———Node:declaration Text: CAN_OPERATION_MODE mode;
|————Node:type_identifier Text: CAN_OPERATION_MODE
|————Node:identifier Text: mode
|————Node:; Text: ;
|———Node:expression_statement Text: mode = mcp2518fd_OperationModeGet();
|————Node:assignment_expression Text: mode = mcp2518fd_OperationModeGet()
|—————Node:identifier Text: mode
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_OperationModeGet()
|——————Node:identifier Text: mcp2518fd_OperationModeGet
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: ret = (byte)mode;
|————Node:assignment_expression Text: ret = (byte)mode
|—————Node:identifier Text: ret
|—————Node:= Text: =
|—————Node:cast_expression Text: (byte)mode
|——————Node:( Text: (
|——————Node:type_descriptor Text: byte
|———————Node:type_identifier Text: byte
|——————Node:) Text: )
|——————Node:identifier Text: mode
|————Node:; Text: ;
|———Node:return_statement Text: return ret;
|————Node:return Text: return
|————Node:identifier Text: ret
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: byte mcp2518fd::setMode(const byte opMode) {
  if ((CAN_OPERATION_MODE)opMode !=
      CAN_SLEEP_MODE) { // if going to sleep, the value stored in opMode is not
                        // changed so that we can return to it later
    mcpMode = (CAN_OPERATION_MODE)opMode;
  }
  return mcp2518fd_OperationModeSelect(mcpMode);
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: mcp2518fd::setMode(const byte opMode)
|———Node:qualified_identifier Text: mcp2518fd::setMode
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: setMode
|———Node:parameter_list Text: (const byte opMode)
|————Node:( Text: (
|————Node:parameter_declaration Text: const byte opMode
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: opMode
|————Node:) Text: )
|——Node:compound_statement Text: {
  if ((CAN_OPERATION_MODE)opMode !=
      CAN_SLEEP_MODE) { // if going to sleep, the value stored in opMode is not
                        // changed so that we can return to it later
    mcpMode = (CAN_OPERATION_MODE)opMode;
  }
  return mcp2518fd_OperationModeSelect(mcpMode);
}
|———Node:{ Text: {
|———Node:if_statement Text: if ((CAN_OPERATION_MODE)opMode !=
      CAN_SLEEP_MODE) { // if going to sleep, the value stored in opMode is not
                        // changed so that we can return to it later
    mcpMode = (CAN_OPERATION_MODE)opMode;
  }
|————Node:if Text: if
|————Node:condition_clause Text: ((CAN_OPERATION_MODE)opMode !=
      CAN_SLEEP_MODE)
|—————Node:( Text: (
|—————Node:binary_expression Text: (CAN_OPERATION_MODE)opMode !=
      CAN_SLEEP_MODE
|——————Node:cast_expression Text: (CAN_OPERATION_MODE)opMode
|———————Node:( Text: (
|———————Node:type_descriptor Text: CAN_OPERATION_MODE
|————————Node:type_identifier Text: CAN_OPERATION_MODE
|———————Node:) Text: )
|———————Node:identifier Text: opMode
|——————Node:!= Text: !=
|——————Node:identifier Text: CAN_SLEEP_MODE
|—————Node:) Text: )
|————Node:compound_statement Text: { // if going to sleep, the value stored in opMode is not
                        // changed so that we can return to it later
    mcpMode = (CAN_OPERATION_MODE)opMode;
  }
|—————Node:{ Text: {
|—————Node:comment
|—————Node:comment
|—————Node:expression_statement Text: mcpMode = (CAN_OPERATION_MODE)opMode;
|——————Node:assignment_expression Text: mcpMode = (CAN_OPERATION_MODE)opMode
|———————Node:identifier Text: mcpMode
|———————Node:= Text: =
|———————Node:cast_expression Text: (CAN_OPERATION_MODE)opMode
|————————Node:( Text: (
|————————Node:type_descriptor Text: CAN_OPERATION_MODE
|—————————Node:type_identifier Text: CAN_OPERATION_MODE
|————————Node:) Text: )
|————————Node:identifier Text: opMode
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return mcp2518fd_OperationModeSelect(mcpMode);
|————Node:return Text: return
|————Node:call_expression Text: mcp2518fd_OperationModeSelect(mcpMode)
|—————Node:identifier Text: mcp2518fd_OperationModeSelect
|—————Node:argument_list Text: (mcpMode)
|——————Node:( Text: (
|——————Node:identifier Text: mcpMode
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: unsigned long mcp2518fd::getCanId(void) { return can_id; }
|——Node:sized_type_specifier Text: unsigned long
|———Node:unsigned Text: unsigned
|———Node:long Text: long
|——Node:function_declarator Text: mcp2518fd::getCanId(void)
|———Node:qualified_identifier Text: mcp2518fd::getCanId
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: getCanId
|———Node:parameter_list Text: (void)
|————Node:( Text: (
|————Node:parameter_declaration Text: void
|—————Node:primitive_type Text: void
|————Node:) Text: )
|——Node:compound_statement Text: { return can_id; }
|———Node:{ Text: {
|———Node:return_statement Text: return can_id;
|————Node:return Text: return
|————Node:identifier Text: can_id
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: byte mcp2518fd::isRemoteRequest(void) { return rtr; }
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: mcp2518fd::isRemoteRequest(void)
|———Node:qualified_identifier Text: mcp2518fd::isRemoteRequest
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: isRemoteRequest
|———Node:parameter_list Text: (void)
|————Node:( Text: (
|————Node:parameter_declaration Text: void
|—————Node:primitive_type Text: void
|————Node:) Text: )
|——Node:compound_statement Text: { return rtr; }
|———Node:{ Text: {
|———Node:return_statement Text: return rtr;
|————Node:return Text: return
|————Node:identifier Text: rtr
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: byte mcp2518fd::isExtendedFrame(void) { return ext_flg; }
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: mcp2518fd::isExtendedFrame(void)
|———Node:qualified_identifier Text: mcp2518fd::isExtendedFrame
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: isExtendedFrame
|———Node:parameter_list Text: (void)
|————Node:( Text: (
|————Node:parameter_declaration Text: void
|—————Node:primitive_type Text: void
|————Node:) Text: )
|——Node:compound_statement Text: { return ext_flg; }
|———Node:{ Text: {
|———Node:return_statement Text: return ext_flg;
|————Node:return Text: return
|————Node:identifier Text: ext_flg
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: byte mcp2518fd::readMsgBufID(byte status, volatile unsigned long *id,
                             volatile byte *ext, volatile byte *rtrBit,
                             volatile byte *len, volatile byte *buf) {

  byte r = mcp2518fd_readMsgBufID(len, buf);
  if (ext)
    *ext = ext_flg;
  if (rtrBit)
    *rtrBit = rtr;
  return r;
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: mcp2518fd::readMsgBufID(byte status, volatile unsigned long *id,
                             volatile byte *ext, volatile byte *rtrBit,
                             volatile byte *len, volatile byte *buf)
|———Node:qualified_identifier Text: mcp2518fd::readMsgBufID
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: readMsgBufID
|———Node:parameter_list Text: (byte status, volatile unsigned long *id,
                             volatile byte *ext, volatile byte *rtrBit,
                             volatile byte *len, volatile byte *buf)
|————Node:( Text: (
|————Node:parameter_declaration Text: byte status
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: status
|————Node:, Text: ,
|————Node:parameter_declaration Text: volatile unsigned long *id
|—————Node:type_qualifier Text: volatile
|——————Node:volatile Text: volatile
|—————Node:sized_type_specifier Text: unsigned long
|——————Node:unsigned Text: unsigned
|——————Node:long Text: long
|—————Node:pointer_declarator Text: *id
|——————Node:* Text: *
|——————Node:identifier Text: id
|————Node:, Text: ,
|————Node:parameter_declaration Text: volatile byte *ext
|—————Node:type_qualifier Text: volatile
|——————Node:volatile Text: volatile
|—————Node:type_identifier Text: byte
|—————Node:pointer_declarator Text: *ext
|——————Node:* Text: *
|——————Node:identifier Text: ext
|————Node:, Text: ,
|————Node:parameter_declaration Text: volatile byte *rtrBit
|—————Node:type_qualifier Text: volatile
|——————Node:volatile Text: volatile
|—————Node:type_identifier Text: byte
|—————Node:pointer_declarator Text: *rtrBit
|——————Node:* Text: *
|——————Node:identifier Text: rtrBit
|————Node:, Text: ,
|————Node:parameter_declaration Text: volatile byte *len
|—————Node:type_qualifier Text: volatile
|——————Node:volatile Text: volatile
|—————Node:type_identifier Text: byte
|—————Node:pointer_declarator Text: *len
|——————Node:* Text: *
|——————Node:identifier Text: len
|————Node:, Text: ,
|————Node:parameter_declaration Text: volatile byte *buf
|—————Node:type_qualifier Text: volatile
|——————Node:volatile Text: volatile
|—————Node:type_identifier Text: byte
|—————Node:pointer_declarator Text: *buf
|——————Node:* Text: *
|——————Node:identifier Text: buf
|————Node:) Text: )
|——Node:compound_statement Text: {

  byte r = mcp2518fd_readMsgBufID(len, buf);
  if (ext)
    *ext = ext_flg;
  if (rtrBit)
    *rtrBit = rtr;
  return r;
}
|———Node:{ Text: {
|———Node:declaration Text: byte r = mcp2518fd_readMsgBufID(len, buf);
|————Node:type_identifier Text: byte
|————Node:init_declarator Text: r = mcp2518fd_readMsgBufID(len, buf)
|—————Node:identifier Text: r
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_readMsgBufID(len, buf)
|——————Node:identifier Text: mcp2518fd_readMsgBufID
|——————Node:argument_list Text: (len, buf)
|———————Node:( Text: (
|———————Node:identifier Text: len
|———————Node:, Text: ,
|———————Node:identifier Text: buf
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (ext)
    *ext = ext_flg;
|————Node:if Text: if
|————Node:condition_clause Text: (ext)
|—————Node:( Text: (
|—————Node:identifier Text: ext
|—————Node:) Text: )
|————Node:expression_statement Text: *ext = ext_flg;
|—————Node:assignment_expression Text: *ext = ext_flg
|——————Node:pointer_expression Text: *ext
|———————Node:* Text: *
|———————Node:identifier Text: ext
|——————Node:= Text: =
|——————Node:identifier Text: ext_flg
|—————Node:; Text: ;
|———Node:if_statement Text: if (rtrBit)
    *rtrBit = rtr;
|————Node:if Text: if
|————Node:condition_clause Text: (rtrBit)
|—————Node:( Text: (
|—————Node:identifier Text: rtrBit
|—————Node:) Text: )
|————Node:expression_statement Text: *rtrBit = rtr;
|—————Node:assignment_expression Text: *rtrBit = rtr
|——————Node:pointer_expression Text: *rtrBit
|———————Node:* Text: *
|———————Node:identifier Text: rtrBit
|——————Node:= Text: =
|——————Node:identifier Text: rtr
|—————Node:; Text: ;
|———Node:return_statement Text: return r;
|————Node:return Text: return
|————Node:identifier Text: r
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: byte mcp2518fd::readMsgBuf(byte *len, byte buf[]) {
  return mcp2518fd_readMsgBufID(len, buf);
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: mcp2518fd::readMsgBuf(byte *len, byte buf[])
|———Node:qualified_identifier Text: mcp2518fd::readMsgBuf
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: readMsgBuf
|———Node:parameter_list Text: (byte *len, byte buf[])
|————Node:( Text: (
|————Node:parameter_declaration Text: byte *len
|—————Node:type_identifier Text: byte
|—————Node:pointer_declarator Text: *len
|——————Node:* Text: *
|——————Node:identifier Text: len
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte buf[]
|—————Node:type_identifier Text: byte
|—————Node:array_declarator Text: buf[]
|——————Node:identifier Text: buf
|——————Node:[ Text: [
|——————Node:] Text: ]
|————Node:) Text: )
|——Node:compound_statement Text: {
  return mcp2518fd_readMsgBufID(len, buf);
}
|———Node:{ Text: {
|———Node:return_statement Text: return mcp2518fd_readMsgBufID(len, buf);
|————Node:return Text: return
|————Node:call_expression Text: mcp2518fd_readMsgBufID(len, buf)
|—————Node:identifier Text: mcp2518fd_readMsgBufID
|—————Node:argument_list Text: (len, buf)
|——————Node:( Text: (
|——————Node:identifier Text: len
|——————Node:, Text: ,
|——————Node:identifier Text: buf
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: byte mcp2518fd::readMsgBufID(unsigned long *ID, byte *len, byte buf[]) {
  return readMsgBufID(readRxTxStatus(), ID, &ext_flg, &rtr, len, buf);
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: mcp2518fd::readMsgBufID(unsigned long *ID, byte *len, byte buf[])
|———Node:qualified_identifier Text: mcp2518fd::readMsgBufID
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: readMsgBufID
|———Node:parameter_list Text: (unsigned long *ID, byte *len, byte buf[])
|————Node:( Text: (
|————Node:parameter_declaration Text: unsigned long *ID
|—————Node:sized_type_specifier Text: unsigned long
|——————Node:unsigned Text: unsigned
|——————Node:long Text: long
|—————Node:pointer_declarator Text: *ID
|——————Node:* Text: *
|——————Node:identifier Text: ID
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte *len
|—————Node:type_identifier Text: byte
|—————Node:pointer_declarator Text: *len
|——————Node:* Text: *
|——————Node:identifier Text: len
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte buf[]
|—————Node:type_identifier Text: byte
|—————Node:array_declarator Text: buf[]
|——————Node:identifier Text: buf
|——————Node:[ Text: [
|——————Node:] Text: ]
|————Node:) Text: )
|——Node:compound_statement Text: {
  return readMsgBufID(readRxTxStatus(), ID, &ext_flg, &rtr, len, buf);
}
|———Node:{ Text: {
|———Node:return_statement Text: return readMsgBufID(readRxTxStatus(), ID, &ext_flg, &rtr, len, buf);
|————Node:return Text: return
|————Node:call_expression Text: readMsgBufID(readRxTxStatus(), ID, &ext_flg, &rtr, len, buf)
|—————Node:identifier Text: readMsgBufID
|—————Node:argument_list Text: (readRxTxStatus(), ID, &ext_flg, &rtr, len, buf)
|——————Node:( Text: (
|——————Node:call_expression Text: readRxTxStatus()
|———————Node:identifier Text: readRxTxStatus
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:, Text: ,
|——————Node:identifier Text: ID
|——————Node:, Text: ,
|——————Node:pointer_expression Text: &ext_flg
|———————Node:& Text: &
|———————Node:identifier Text: ext_flg
|——————Node:, Text: ,
|——————Node:pointer_expression Text: &rtr
|———————Node:& Text: &
|———————Node:identifier Text: rtr
|——————Node:, Text: ,
|——————Node:identifier Text: len
|——————Node:, Text: ,
|——————Node:identifier Text: buf
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: byte mcp2518fd::checkReceive(void) {
  CAN_RX_FIFO_STATUS status;                                       //
  // RXnIF in Bit 1 and 0 return ((res & MCP_STAT_RXIF_MASK) ? CAN_MSGAVAIL :
  // CAN_NOMSG);
  mcp2518fd_ReceiveChannelStatusGet(APP_RX_FIFO, &status);

  byte res = (byte)(status & CAN_RX_FIFO_NOT_EMPTY_EVENT) + 2;
  return res;
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: mcp2518fd::checkReceive(void)
|———Node:qualified_identifier Text: mcp2518fd::checkReceive
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: checkReceive
|———Node:parameter_list Text: (void)
|————Node:( Text: (
|————Node:parameter_declaration Text: void
|—————Node:primitive_type Text: void
|————Node:) Text: )
|——Node:compound_statement Text: {
  CAN_RX_FIFO_STATUS status;                                       //
  // RXnIF in Bit 1 and 0 return ((res & MCP_STAT_RXIF_MASK) ? CAN_MSGAVAIL :
  // CAN_NOMSG);
  mcp2518fd_ReceiveChannelStatusGet(APP_RX_FIFO, &status);

  byte res = (byte)(status & CAN_RX_FIFO_NOT_EMPTY_EVENT) + 2;
  return res;
}
|———Node:{ Text: {
|———Node:declaration Text: CAN_RX_FIFO_STATUS status;
|————Node:type_identifier Text: CAN_RX_FIFO_STATUS
|————Node:identifier Text: status
|————Node:; Text: ;
|———Node:comment
|———Node:comment
|———Node:comment
|———Node:expression_statement Text: mcp2518fd_ReceiveChannelStatusGet(APP_RX_FIFO, &status);
|————Node:call_expression Text: mcp2518fd_ReceiveChannelStatusGet(APP_RX_FIFO, &status)
|—————Node:identifier Text: mcp2518fd_ReceiveChannelStatusGet
|—————Node:argument_list Text: (APP_RX_FIFO, &status)
|——————Node:( Text: (
|——————Node:identifier Text: APP_RX_FIFO
|——————Node:, Text: ,
|——————Node:pointer_expression Text: &status
|———————Node:& Text: &
|———————Node:identifier Text: status
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: byte res = (byte)(status & CAN_RX_FIFO_NOT_EMPTY_EVENT) + 2;
|————Node:type_identifier Text: byte
|————Node:init_declarator Text: res = (byte)(status & CAN_RX_FIFO_NOT_EMPTY_EVENT) + 2
|—————Node:identifier Text: res
|—————Node:= Text: =
|—————Node:binary_expression Text: (byte)(status & CAN_RX_FIFO_NOT_EMPTY_EVENT) + 2
|——————Node:call_expression Text: (byte)(status & CAN_RX_FIFO_NOT_EMPTY_EVENT)
|———————Node:parenthesized_expression Text: (byte)
|————————Node:( Text: (
|————————Node:identifier Text: byte
|————————Node:) Text: )
|———————Node:argument_list Text: (status & CAN_RX_FIFO_NOT_EMPTY_EVENT)
|————————Node:( Text: (
|————————Node:binary_expression Text: status & CAN_RX_FIFO_NOT_EMPTY_EVENT
|—————————Node:identifier Text: status
|—————————Node:& Text: &
|—————————Node:identifier Text: CAN_RX_FIFO_NOT_EMPTY_EVENT
|————————Node:) Text: )
|——————Node:+ Text: +
|——————Node:number_literal Text: 2
|————Node:; Text: ;
|———Node:return_statement Text: return res;
|————Node:return Text: return
|————Node:identifier Text: res
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: byte mcp2518fd::checkError(void) {

  CAN_ERROR_STATE flags;
  mcp2518fd_ErrorStateGet(&flags);
  byte eflg = (byte)flags;
  return eflg;  
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: mcp2518fd::checkError(void)
|———Node:qualified_identifier Text: mcp2518fd::checkError
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: checkError
|———Node:parameter_list Text: (void)
|————Node:( Text: (
|————Node:parameter_declaration Text: void
|—————Node:primitive_type Text: void
|————Node:) Text: )
|——Node:compound_statement Text: {

  CAN_ERROR_STATE flags;
  mcp2518fd_ErrorStateGet(&flags);
  byte eflg = (byte)flags;
  return eflg;  
}
|———Node:{ Text: {
|———Node:declaration Text: CAN_ERROR_STATE flags;
|————Node:type_identifier Text: CAN_ERROR_STATE
|————Node:identifier Text: flags
|————Node:; Text: ;
|———Node:expression_statement Text: mcp2518fd_ErrorStateGet(&flags);
|————Node:call_expression Text: mcp2518fd_ErrorStateGet(&flags)
|—————Node:identifier Text: mcp2518fd_ErrorStateGet
|—————Node:argument_list Text: (&flags)
|——————Node:( Text: (
|——————Node:pointer_expression Text: &flags
|———————Node:& Text: &
|———————Node:identifier Text: flags
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:declaration Text: byte eflg = (byte)flags;
|————Node:type_identifier Text: byte
|————Node:init_declarator Text: eflg = (byte)flags
|—————Node:identifier Text: eflg
|—————Node:= Text: =
|—————Node:cast_expression Text: (byte)flags
|——————Node:( Text: (
|——————Node:type_descriptor Text: byte
|———————Node:type_identifier Text: byte
|——————Node:) Text: )
|——————Node:identifier Text: flags
|————Node:; Text: ;
|———Node:return_statement Text: return eflg;
|————Node:return Text: return
|————Node:identifier Text: eflg
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:comment
|—Node:function_definition Text: byte mcp2518fd::mcp2518fd_readMsgBufID(volatile byte *len, volatile byte *buf) {
  mcp2518fd_ReceiveMessageGet(APP_RX_FIFO, &rxObj, rxd, MAX_DATA_BYTES);
  can_id = rxObj.bF.ctrl.IDE? (rxObj.bF.id.EID | (rxObj.bF.id.SID << 18))
                            :  rxObj.bF.id.SID;
  ext_flg = rxObj.bF.ctrl.IDE;
  rtr = rxObj.bF.ctrl.RTR;
  uint8_t n = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC)rxObj.bF.ctrl.DLC);
  *len = n;

  for (int i = 0; i < n; i++) {
    buf[i] = rxd[i];
  }

  return 0;
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: mcp2518fd::mcp2518fd_readMsgBufID(volatile byte *len, volatile byte *buf)
|———Node:qualified_identifier Text: mcp2518fd::mcp2518fd_readMsgBufID
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcp2518fd_readMsgBufID
|———Node:parameter_list Text: (volatile byte *len, volatile byte *buf)
|————Node:( Text: (
|————Node:parameter_declaration Text: volatile byte *len
|—————Node:type_qualifier Text: volatile
|——————Node:volatile Text: volatile
|—————Node:type_identifier Text: byte
|—————Node:pointer_declarator Text: *len
|——————Node:* Text: *
|——————Node:identifier Text: len
|————Node:, Text: ,
|————Node:parameter_declaration Text: volatile byte *buf
|—————Node:type_qualifier Text: volatile
|——————Node:volatile Text: volatile
|—————Node:type_identifier Text: byte
|—————Node:pointer_declarator Text: *buf
|——————Node:* Text: *
|——————Node:identifier Text: buf
|————Node:) Text: )
|——Node:compound_statement Text: {
  mcp2518fd_ReceiveMessageGet(APP_RX_FIFO, &rxObj, rxd, MAX_DATA_BYTES);
  can_id = rxObj.bF.ctrl.IDE? (rxObj.bF.id.EID | (rxObj.bF.id.SID << 18))
                            :  rxObj.bF.id.SID;
  ext_flg = rxObj.bF.ctrl.IDE;
  rtr = rxObj.bF.ctrl.RTR;
  uint8_t n = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC)rxObj.bF.ctrl.DLC);
  *len = n;

  for (int i = 0; i < n; i++) {
    buf[i] = rxd[i];
  }

  return 0;
}
|———Node:{ Text: {
|———Node:expression_statement Text: mcp2518fd_ReceiveMessageGet(APP_RX_FIFO, &rxObj, rxd, MAX_DATA_BYTES);
|————Node:call_expression Text: mcp2518fd_ReceiveMessageGet(APP_RX_FIFO, &rxObj, rxd, MAX_DATA_BYTES)
|—————Node:identifier Text: mcp2518fd_ReceiveMessageGet
|—————Node:argument_list Text: (APP_RX_FIFO, &rxObj, rxd, MAX_DATA_BYTES)
|——————Node:( Text: (
|——————Node:identifier Text: APP_RX_FIFO
|——————Node:, Text: ,
|——————Node:pointer_expression Text: &rxObj
|———————Node:& Text: &
|———————Node:identifier Text: rxObj
|——————Node:, Text: ,
|——————Node:identifier Text: rxd
|——————Node:, Text: ,
|——————Node:identifier Text: MAX_DATA_BYTES
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: can_id = rxObj.bF.ctrl.IDE? (rxObj.bF.id.EID | (rxObj.bF.id.SID << 18))
                            :  rxObj.bF.id.SID;
|————Node:assignment_expression Text: can_id = rxObj.bF.ctrl.IDE? (rxObj.bF.id.EID | (rxObj.bF.id.SID << 18))
                            :  rxObj.bF.id.SID
|—————Node:identifier Text: can_id
|—————Node:= Text: =
|—————Node:conditional_expression Text: rxObj.bF.ctrl.IDE? (rxObj.bF.id.EID | (rxObj.bF.id.SID << 18))
                            :  rxObj.bF.id.SID
|——————Node:field_expression Text: rxObj.bF.ctrl.IDE
|———————Node:field_expression Text: rxObj.bF.ctrl
|————————Node:field_expression Text: rxObj.bF
|—————————Node:identifier Text: rxObj
|—————————Node:. Text: .
|—————————Node:field_identifier Text: bF
|————————Node:. Text: .
|————————Node:field_identifier Text: ctrl
|———————Node:. Text: .
|———————Node:field_identifier Text: IDE
|——————Node:? Text: ?
|——————Node:parenthesized_expression Text: (rxObj.bF.id.EID | (rxObj.bF.id.SID << 18))
|———————Node:( Text: (
|———————Node:binary_expression Text: rxObj.bF.id.EID | (rxObj.bF.id.SID << 18)
|————————Node:field_expression Text: rxObj.bF.id.EID
|—————————Node:field_expression Text: rxObj.bF.id
|——————————Node:field_expression Text: rxObj.bF
|———————————Node:identifier Text: rxObj
|———————————Node:. Text: .
|———————————Node:field_identifier Text: bF
|——————————Node:. Text: .
|——————————Node:field_identifier Text: id
|—————————Node:. Text: .
|—————————Node:field_identifier Text: EID
|————————Node:| Text: |
|————————Node:parenthesized_expression Text: (rxObj.bF.id.SID << 18)
|—————————Node:( Text: (
|—————————Node:binary_expression Text: rxObj.bF.id.SID << 18
|——————————Node:field_expression Text: rxObj.bF.id.SID
|———————————Node:field_expression Text: rxObj.bF.id
|————————————Node:field_expression Text: rxObj.bF
|—————————————Node:identifier Text: rxObj
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: bF
|————————————Node:. Text: .
|————————————Node:field_identifier Text: id
|———————————Node:. Text: .
|———————————Node:field_identifier Text: SID
|——————————Node:<< Text: <<
|——————————Node:number_literal Text: 18
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:: Text: :
|——————Node:field_expression Text: rxObj.bF.id.SID
|———————Node:field_expression Text: rxObj.bF.id
|————————Node:field_expression Text: rxObj.bF
|—————————Node:identifier Text: rxObj
|—————————Node:. Text: .
|—————————Node:field_identifier Text: bF
|————————Node:. Text: .
|————————Node:field_identifier Text: id
|———————Node:. Text: .
|———————Node:field_identifier Text: SID
|————Node:; Text: ;
|———Node:expression_statement Text: ext_flg = rxObj.bF.ctrl.IDE;
|————Node:assignment_expression Text: ext_flg = rxObj.bF.ctrl.IDE
|—————Node:identifier Text: ext_flg
|—————Node:= Text: =
|—————Node:field_expression Text: rxObj.bF.ctrl.IDE
|——————Node:field_expression Text: rxObj.bF.ctrl
|———————Node:field_expression Text: rxObj.bF
|————————Node:identifier Text: rxObj
|————————Node:. Text: .
|————————Node:field_identifier Text: bF
|———————Node:. Text: .
|———————Node:field_identifier Text: ctrl
|——————Node:. Text: .
|——————Node:field_identifier Text: IDE
|————Node:; Text: ;
|———Node:expression_statement Text: rtr = rxObj.bF.ctrl.RTR;
|————Node:assignment_expression Text: rtr = rxObj.bF.ctrl.RTR
|—————Node:identifier Text: rtr
|—————Node:= Text: =
|—————Node:field_expression Text: rxObj.bF.ctrl.RTR
|——————Node:field_expression Text: rxObj.bF.ctrl
|———————Node:field_expression Text: rxObj.bF
|————————Node:identifier Text: rxObj
|————————Node:. Text: .
|————————Node:field_identifier Text: bF
|———————Node:. Text: .
|———————Node:field_identifier Text: ctrl
|——————Node:. Text: .
|——————Node:field_identifier Text: RTR
|————Node:; Text: ;
|———Node:declaration Text: uint8_t n = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC)rxObj.bF.ctrl.DLC);
|————Node:primitive_type Text: uint8_t
|————Node:init_declarator Text: n = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC)rxObj.bF.ctrl.DLC)
|—————Node:identifier Text: n
|—————Node:= Text: =
|—————Node:call_expression Text: DRV_CANFDSPI_DlcToDataBytes((CAN_DLC)rxObj.bF.ctrl.DLC)
|——————Node:identifier Text: DRV_CANFDSPI_DlcToDataBytes
|——————Node:argument_list Text: ((CAN_DLC)rxObj.bF.ctrl.DLC)
|———————Node:( Text: (
|———————Node:cast_expression Text: (CAN_DLC)rxObj.bF.ctrl.DLC
|————————Node:( Text: (
|————————Node:type_descriptor Text: CAN_DLC
|—————————Node:type_identifier Text: CAN_DLC
|————————Node:) Text: )
|————————Node:field_expression Text: rxObj.bF.ctrl.DLC
|—————————Node:field_expression Text: rxObj.bF.ctrl
|——————————Node:field_expression Text: rxObj.bF
|———————————Node:identifier Text: rxObj
|———————————Node:. Text: .
|———————————Node:field_identifier Text: bF
|——————————Node:. Text: .
|——————————Node:field_identifier Text: ctrl
|—————————Node:. Text: .
|—————————Node:field_identifier Text: DLC
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: *len = n;
|————Node:assignment_expression Text: *len = n
|—————Node:pointer_expression Text: *len
|——————Node:* Text: *
|——————Node:identifier Text: len
|—————Node:= Text: =
|—————Node:identifier Text: n
|————Node:; Text: ;
|———Node:for_statement Text: for (int i = 0; i < n; i++) {
    buf[i] = rxd[i];
  }
|————Node:for Text: for
|————Node:( Text: (
|————Node:declaration Text: int i = 0;
|—————Node:primitive_type Text: int
|—————Node:init_declarator Text: i = 0
|——————Node:identifier Text: i
|——————Node:= Text: =
|——————Node:number_literal Text: 0
|—————Node:; Text: ;
|————Node:binary_expression Text: i < n
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:identifier Text: n
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
    buf[i] = rxd[i];
  }
|—————Node:{ Text: {
|—————Node:expression_statement Text: buf[i] = rxd[i];
|——————Node:assignment_expression Text: buf[i] = rxd[i]
|———————Node:subscript_expression Text: buf[i]
|————————Node:identifier Text: buf
|————————Node:subscript_argument_list Text: [i]
|—————————Node:[ Text: [
|—————————Node:identifier Text: i
|—————————Node:] Text: ]
|———————Node:= Text: =
|———————Node:subscript_expression Text: rxd[i]
|————————Node:identifier Text: rxd
|————————Node:subscript_argument_list Text: [i]
|—————————Node:[ Text: [
|—————————Node:identifier Text: i
|—————————Node:] Text: ]
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return 0;
|————Node:return Text: return
|————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: byte mcp2518fd::trySendMsgBuf(unsigned long id, byte ext, byte rtrBit, byte len,
                              const byte *buf, byte iTxBuf) {

  return CAN_OK;
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: mcp2518fd::trySendMsgBuf(unsigned long id, byte ext, byte rtrBit, byte len,
                              const byte *buf, byte iTxBuf)
|———Node:qualified_identifier Text: mcp2518fd::trySendMsgBuf
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: trySendMsgBuf
|———Node:parameter_list Text: (unsigned long id, byte ext, byte rtrBit, byte len,
                              const byte *buf, byte iTxBuf)
|————Node:( Text: (
|————Node:parameter_declaration Text: unsigned long id
|—————Node:sized_type_specifier Text: unsigned long
|——————Node:unsigned Text: unsigned
|——————Node:long Text: long
|—————Node:identifier Text: id
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte ext
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: ext
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte rtrBit
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: rtrBit
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte len
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: len
|————Node:, Text: ,
|————Node:parameter_declaration Text: const byte *buf
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: byte
|—————Node:pointer_declarator Text: *buf
|——————Node:* Text: *
|——————Node:identifier Text: buf
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte iTxBuf
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: iTxBuf
|————Node:) Text: )
|——Node:compound_statement Text: {

  return CAN_OK;
}
|———Node:{ Text: {
|———Node:return_statement Text: return CAN_OK;
|————Node:return Text: return
|————Node:identifier Text: CAN_OK
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: void mcp2518fd::clearBufferTransmitIfFlags(byte flags) {
  mcp2518fd_TransmitChannelEventAttemptClear(APP_TX_FIFO);
  return;
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: mcp2518fd::clearBufferTransmitIfFlags(byte flags)
|———Node:qualified_identifier Text: mcp2518fd::clearBufferTransmitIfFlags
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: clearBufferTransmitIfFlags
|———Node:parameter_list Text: (byte flags)
|————Node:( Text: (
|————Node:parameter_declaration Text: byte flags
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: flags
|————Node:) Text: )
|——Node:compound_statement Text: {
  mcp2518fd_TransmitChannelEventAttemptClear(APP_TX_FIFO);
  return;
}
|———Node:{ Text: {
|———Node:expression_statement Text: mcp2518fd_TransmitChannelEventAttemptClear(APP_TX_FIFO);
|————Node:call_expression Text: mcp2518fd_TransmitChannelEventAttemptClear(APP_TX_FIFO)
|—————Node:identifier Text: mcp2518fd_TransmitChannelEventAttemptClear
|—————Node:argument_list Text: (APP_TX_FIFO)
|——————Node:( Text: (
|——————Node:identifier Text: APP_TX_FIFO
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return;
|————Node:return Text: return
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: byte mcp2518fd::sendMsgBuf(byte status, unsigned long id, byte ext, byte rtrBit,
                           byte len, volatile const byte *buf) {
  return CAN_OK;
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: mcp2518fd::sendMsgBuf(byte status, unsigned long id, byte ext, byte rtrBit,
                           byte len, volatile const byte *buf)
|———Node:qualified_identifier Text: mcp2518fd::sendMsgBuf
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: sendMsgBuf
|———Node:parameter_list Text: (byte status, unsigned long id, byte ext, byte rtrBit,
                           byte len, volatile const byte *buf)
|————Node:( Text: (
|————Node:parameter_declaration Text: byte status
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: status
|————Node:, Text: ,
|————Node:parameter_declaration Text: unsigned long id
|—————Node:sized_type_specifier Text: unsigned long
|——————Node:unsigned Text: unsigned
|——————Node:long Text: long
|—————Node:identifier Text: id
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte ext
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: ext
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte rtrBit
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: rtrBit
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte len
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: len
|————Node:, Text: ,
|————Node:parameter_declaration Text: volatile const byte *buf
|—————Node:type_qualifier Text: volatile
|——————Node:volatile Text: volatile
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: byte
|—————Node:pointer_declarator Text: *buf
|——————Node:* Text: *
|——————Node:identifier Text: buf
|————Node:) Text: )
|——Node:compound_statement Text: {
  return CAN_OK;
}
|———Node:{ Text: {
|———Node:return_statement Text: return CAN_OK;
|————Node:return Text: return
|————Node:identifier Text: CAN_OK
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: byte mcp2518fd::sendMsgBuf(unsigned long id, byte ext, byte rtrBit, byte len,
                           const byte *buf, bool wait_sent) {
  return mcp2518fd_sendMsg(buf, len, id, ext, rtrBit, wait_sent);
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: mcp2518fd::sendMsgBuf(unsigned long id, byte ext, byte rtrBit, byte len,
                           const byte *buf, bool wait_sent)
|———Node:qualified_identifier Text: mcp2518fd::sendMsgBuf
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: sendMsgBuf
|———Node:parameter_list Text: (unsigned long id, byte ext, byte rtrBit, byte len,
                           const byte *buf, bool wait_sent)
|————Node:( Text: (
|————Node:parameter_declaration Text: unsigned long id
|—————Node:sized_type_specifier Text: unsigned long
|——————Node:unsigned Text: unsigned
|——————Node:long Text: long
|—————Node:identifier Text: id
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte ext
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: ext
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte rtrBit
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: rtrBit
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte len
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: len
|————Node:, Text: ,
|————Node:parameter_declaration Text: const byte *buf
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: byte
|—————Node:pointer_declarator Text: *buf
|——————Node:* Text: *
|——————Node:identifier Text: buf
|————Node:, Text: ,
|————Node:parameter_declaration Text: bool wait_sent
|—————Node:primitive_type Text: bool
|—————Node:identifier Text: wait_sent
|————Node:) Text: )
|——Node:compound_statement Text: {
  return mcp2518fd_sendMsg(buf, len, id, ext, rtrBit, wait_sent);
}
|———Node:{ Text: {
|———Node:return_statement Text: return mcp2518fd_sendMsg(buf, len, id, ext, rtrBit, wait_sent);
|————Node:return Text: return
|————Node:call_expression Text: mcp2518fd_sendMsg(buf, len, id, ext, rtrBit, wait_sent)
|—————Node:identifier Text: mcp2518fd_sendMsg
|—————Node:argument_list Text: (buf, len, id, ext, rtrBit, wait_sent)
|——————Node:( Text: (
|——————Node:identifier Text: buf
|——————Node:, Text: ,
|——————Node:identifier Text: len
|——————Node:, Text: ,
|——————Node:identifier Text: id
|——————Node:, Text: ,
|——————Node:identifier Text: ext
|——————Node:, Text: ,
|——————Node:identifier Text: rtrBit
|——————Node:, Text: ,
|——————Node:identifier Text: wait_sent
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: byte mcp2518fd::sendMsgBuf(unsigned long id, byte ext, byte len,
                           const byte *buf, bool wait_sent) {
  return mcp2518fd_sendMsg(buf, len, id, ext, 0, wait_sent);
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: mcp2518fd::sendMsgBuf(unsigned long id, byte ext, byte len,
                           const byte *buf, bool wait_sent)
|———Node:qualified_identifier Text: mcp2518fd::sendMsgBuf
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: sendMsgBuf
|———Node:parameter_list Text: (unsigned long id, byte ext, byte len,
                           const byte *buf, bool wait_sent)
|————Node:( Text: (
|————Node:parameter_declaration Text: unsigned long id
|—————Node:sized_type_specifier Text: unsigned long
|——————Node:unsigned Text: unsigned
|——————Node:long Text: long
|—————Node:identifier Text: id
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte ext
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: ext
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte len
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: len
|————Node:, Text: ,
|————Node:parameter_declaration Text: const byte *buf
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: byte
|—————Node:pointer_declarator Text: *buf
|——————Node:* Text: *
|——————Node:identifier Text: buf
|————Node:, Text: ,
|————Node:parameter_declaration Text: bool wait_sent
|—————Node:primitive_type Text: bool
|—————Node:identifier Text: wait_sent
|————Node:) Text: )
|——Node:compound_statement Text: {
  return mcp2518fd_sendMsg(buf, len, id, ext, 0, wait_sent);
}
|———Node:{ Text: {
|———Node:return_statement Text: return mcp2518fd_sendMsg(buf, len, id, ext, 0, wait_sent);
|————Node:return Text: return
|————Node:call_expression Text: mcp2518fd_sendMsg(buf, len, id, ext, 0, wait_sent)
|—————Node:identifier Text: mcp2518fd_sendMsg
|—————Node:argument_list Text: (buf, len, id, ext, 0, wait_sent)
|——————Node:( Text: (
|——————Node:identifier Text: buf
|——————Node:, Text: ,
|——————Node:identifier Text: len
|——————Node:, Text: ,
|——————Node:identifier Text: id
|——————Node:, Text: ,
|——————Node:identifier Text: ext
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:, Text: ,
|——————Node:identifier Text: wait_sent
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: byte mcp2518fd::readRxTxStatus(void) {
  byte ret;
  mcp2518fd_ReceiveChannelEventGet(APP_RX_FIFO, &rxFlags);
  ret = (byte)rxFlags;
  return ret;
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: mcp2518fd::readRxTxStatus(void)
|———Node:qualified_identifier Text: mcp2518fd::readRxTxStatus
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: readRxTxStatus
|———Node:parameter_list Text: (void)
|————Node:( Text: (
|————Node:parameter_declaration Text: void
|—————Node:primitive_type Text: void
|————Node:) Text: )
|——Node:compound_statement Text: {
  byte ret;
  mcp2518fd_ReceiveChannelEventGet(APP_RX_FIFO, &rxFlags);
  ret = (byte)rxFlags;
  return ret;
}
|———Node:{ Text: {
|———Node:declaration Text: byte ret;
|————Node:type_identifier Text: byte
|————Node:identifier Text: ret
|————Node:; Text: ;
|———Node:expression_statement Text: mcp2518fd_ReceiveChannelEventGet(APP_RX_FIFO, &rxFlags);
|————Node:call_expression Text: mcp2518fd_ReceiveChannelEventGet(APP_RX_FIFO, &rxFlags)
|—————Node:identifier Text: mcp2518fd_ReceiveChannelEventGet
|—————Node:argument_list Text: (APP_RX_FIFO, &rxFlags)
|——————Node:( Text: (
|——————Node:identifier Text: APP_RX_FIFO
|——————Node:, Text: ,
|——————Node:pointer_expression Text: &rxFlags
|———————Node:& Text: &
|———————Node:identifier Text: rxFlags
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: ret = (byte)rxFlags;
|————Node:assignment_expression Text: ret = (byte)rxFlags
|—————Node:identifier Text: ret
|—————Node:= Text: =
|—————Node:cast_expression Text: (byte)rxFlags
|——————Node:( Text: (
|——————Node:type_descriptor Text: byte
|———————Node:type_identifier Text: byte
|——————Node:) Text: )
|——————Node:identifier Text: rxFlags
|————Node:; Text: ;
|———Node:return_statement Text: return ret;
|————Node:return Text: return
|————Node:identifier Text: ret
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: byte mcp2518fd::checkClearRxStatus(byte *status) {
  return 1;
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: mcp2518fd::checkClearRxStatus(byte *status)
|———Node:qualified_identifier Text: mcp2518fd::checkClearRxStatus
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: checkClearRxStatus
|———Node:parameter_list Text: (byte *status)
|————Node:( Text: (
|————Node:parameter_declaration Text: byte *status
|—————Node:type_identifier Text: byte
|—————Node:pointer_declarator Text: *status
|——————Node:* Text: *
|——————Node:identifier Text: status
|————Node:) Text: )
|——Node:compound_statement Text: {
  return 1;
}
|———Node:{ Text: {
|———Node:return_statement Text: return 1;
|————Node:return Text: return
|————Node:number_literal Text: 1
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: byte mcp2518fd::checkClearTxStatus(byte *status, byte iTxBuf) {
  return 1;
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: mcp2518fd::checkClearTxStatus(byte *status, byte iTxBuf)
|———Node:qualified_identifier Text: mcp2518fd::checkClearTxStatus
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: checkClearTxStatus
|———Node:parameter_list Text: (byte *status, byte iTxBuf)
|————Node:( Text: (
|————Node:parameter_declaration Text: byte *status
|—————Node:type_identifier Text: byte
|—————Node:pointer_declarator Text: *status
|——————Node:* Text: *
|——————Node:identifier Text: status
|————Node:, Text: ,
|————Node:parameter_declaration Text: byte iTxBuf
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: iTxBuf
|————Node:) Text: )
|——Node:compound_statement Text: {
  return 1;
}
|———Node:{ Text: {
|———Node:return_statement Text: return 1;
|————Node:return Text: return
|————Node:number_literal Text: 1
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: bool mcp2518fd::mcpPinMode(const byte pin, const byte mode) {
  int8_t spiTransferError = 1;
  uint16_t a = 0;

  // Read
  a = cREGADDR_IOCON + 3;
  REG_IOCON iocon;
  iocon.word = 0;

  mcp2518fd_ReadByte(a, &iocon.byte[3]);

  if (pin == GPIO_PIN_0) {
    // Modify
    iocon.bF.PinMode0 = (GPIO_PIN_MODE)mode;
  }
  if (pin == GPIO_PIN_1) {
    // Modify
    iocon.bF.PinMode1 = (GPIO_PIN_MODE)mode;
  }
  // Write
  mcp2518fd_WriteByte(a, iocon.byte[3]);

  return spiTransferError;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: mcp2518fd::mcpPinMode(const byte pin, const byte mode)
|———Node:qualified_identifier Text: mcp2518fd::mcpPinMode
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcpPinMode
|———Node:parameter_list Text: (const byte pin, const byte mode)
|————Node:( Text: (
|————Node:parameter_declaration Text: const byte pin
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: pin
|————Node:, Text: ,
|————Node:parameter_declaration Text: const byte mode
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: mode
|————Node:) Text: )
|——Node:compound_statement Text: {
  int8_t spiTransferError = 1;
  uint16_t a = 0;

  // Read
  a = cREGADDR_IOCON + 3;
  REG_IOCON iocon;
  iocon.word = 0;

  mcp2518fd_ReadByte(a, &iocon.byte[3]);

  if (pin == GPIO_PIN_0) {
    // Modify
    iocon.bF.PinMode0 = (GPIO_PIN_MODE)mode;
  }
  if (pin == GPIO_PIN_1) {
    // Modify
    iocon.bF.PinMode1 = (GPIO_PIN_MODE)mode;
  }
  // Write
  mcp2518fd_WriteByte(a, iocon.byte[3]);

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: int8_t spiTransferError = 1;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 1
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 1
|————Node:; Text: ;
|———Node:declaration Text: uint16_t a = 0;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: a = 0
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: a = cREGADDR_IOCON + 3;
|————Node:assignment_expression Text: a = cREGADDR_IOCON + 3
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:binary_expression Text: cREGADDR_IOCON + 3
|——————Node:identifier Text: cREGADDR_IOCON
|——————Node:+ Text: +
|——————Node:number_literal Text: 3
|————Node:; Text: ;
|———Node:declaration Text: REG_IOCON iocon;
|————Node:type_identifier Text: REG_IOCON
|————Node:identifier Text: iocon
|————Node:; Text: ;
|———Node:expression_statement Text: iocon.word = 0;
|————Node:assignment_expression Text: iocon.word = 0
|—————Node:field_expression Text: iocon.word
|——————Node:identifier Text: iocon
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: mcp2518fd_ReadByte(a, &iocon.byte[3]);
|————Node:call_expression Text: mcp2518fd_ReadByte(a, &iocon.byte[3])
|—————Node:identifier Text: mcp2518fd_ReadByte
|—————Node:argument_list Text: (a, &iocon.byte[3])
|——————Node:( Text: (
|——————Node:identifier Text: a
|——————Node:, Text: ,
|——————Node:pointer_expression Text: &iocon.byte[3]
|———————Node:& Text: &
|———————Node:subscript_expression Text: iocon.byte[3]
|————————Node:field_expression Text: iocon.byte
|—————————Node:identifier Text: iocon
|—————————Node:. Text: .
|—————————Node:field_identifier Text: byte
|————————Node:subscript_argument_list Text: [3]
|—————————Node:[ Text: [
|—————————Node:number_literal Text: 3
|—————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (pin == GPIO_PIN_0) {
    // Modify
    iocon.bF.PinMode0 = (GPIO_PIN_MODE)mode;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (pin == GPIO_PIN_0)
|—————Node:( Text: (
|—————Node:binary_expression Text: pin == GPIO_PIN_0
|——————Node:identifier Text: pin
|——————Node:== Text: ==
|——————Node:identifier Text: GPIO_PIN_0
|—————Node:) Text: )
|————Node:compound_statement Text: {
    // Modify
    iocon.bF.PinMode0 = (GPIO_PIN_MODE)mode;
  }
|—————Node:{ Text: {
|—————Node:comment
|—————Node:expression_statement Text: iocon.bF.PinMode0 = (GPIO_PIN_MODE)mode;
|——————Node:assignment_expression Text: iocon.bF.PinMode0 = (GPIO_PIN_MODE)mode
|———————Node:field_expression Text: iocon.bF.PinMode0
|————————Node:field_expression Text: iocon.bF
|—————————Node:identifier Text: iocon
|—————————Node:. Text: .
|—————————Node:field_identifier Text: bF
|————————Node:. Text: .
|————————Node:field_identifier Text: PinMode0
|———————Node:= Text: =
|———————Node:cast_expression Text: (GPIO_PIN_MODE)mode
|————————Node:( Text: (
|————————Node:type_descriptor Text: GPIO_PIN_MODE
|—————————Node:type_identifier Text: GPIO_PIN_MODE
|————————Node:) Text: )
|————————Node:identifier Text: mode
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:if_statement Text: if (pin == GPIO_PIN_1) {
    // Modify
    iocon.bF.PinMode1 = (GPIO_PIN_MODE)mode;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (pin == GPIO_PIN_1)
|—————Node:( Text: (
|—————Node:binary_expression Text: pin == GPIO_PIN_1
|——————Node:identifier Text: pin
|——————Node:== Text: ==
|——————Node:identifier Text: GPIO_PIN_1
|—————Node:) Text: )
|————Node:compound_statement Text: {
    // Modify
    iocon.bF.PinMode1 = (GPIO_PIN_MODE)mode;
  }
|—————Node:{ Text: {
|—————Node:comment
|—————Node:expression_statement Text: iocon.bF.PinMode1 = (GPIO_PIN_MODE)mode;
|——————Node:assignment_expression Text: iocon.bF.PinMode1 = (GPIO_PIN_MODE)mode
|———————Node:field_expression Text: iocon.bF.PinMode1
|————————Node:field_expression Text: iocon.bF
|—————————Node:identifier Text: iocon
|—————————Node:. Text: .
|—————————Node:field_identifier Text: bF
|————————Node:. Text: .
|————————Node:field_identifier Text: PinMode1
|———————Node:= Text: =
|———————Node:cast_expression Text: (GPIO_PIN_MODE)mode
|————————Node:( Text: (
|————————Node:type_descriptor Text: GPIO_PIN_MODE
|—————————Node:type_identifier Text: GPIO_PIN_MODE
|————————Node:) Text: )
|————————Node:identifier Text: mode
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:expression_statement Text: mcp2518fd_WriteByte(a, iocon.byte[3]);
|————Node:call_expression Text: mcp2518fd_WriteByte(a, iocon.byte[3])
|—————Node:identifier Text: mcp2518fd_WriteByte
|—————Node:argument_list Text: (a, iocon.byte[3])
|——————Node:( Text: (
|——————Node:identifier Text: a
|——————Node:, Text: ,
|——————Node:subscript_expression Text: iocon.byte[3]
|———————Node:field_expression Text: iocon.byte
|————————Node:identifier Text: iocon
|————————Node:. Text: .
|————————Node:field_identifier Text: byte
|———————Node:subscript_argument_list Text: [3]
|————————Node:[ Text: [
|————————Node:number_literal Text: 3
|————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: bool mcp2518fd::mcpDigitalWrite(const byte pin, const byte mode) {
  int8_t spiTransferError = 0;
  uint16_t a = 0;

  // Read
  a = cREGADDR_IOCON + 1;
  REG_IOCON iocon;
  iocon.word = 0;

  spiTransferError = mcp2518fd_ReadByte(a, &iocon.byte[1]);
  if (spiTransferError) {
    return -1;
  }

  // Modify
  switch (pin) {
  case GPIO_PIN_0:
    iocon.bF.LAT0 = (GPIO_PIN_STATE)mode;
    break;
  case GPIO_PIN_1:
    iocon.bF.LAT1 = (GPIO_PIN_STATE)mode;
    break;
  default:
    return -1;
    break;
  }

  // Write
  spiTransferError = mcp2518fd_WriteByte(a, iocon.byte[1]);
  if (spiTransferError) {
    return -2;
  }

  return spiTransferError;
}
|——Node:primitive_type Text: bool
|——Node:function_declarator Text: mcp2518fd::mcpDigitalWrite(const byte pin, const byte mode)
|———Node:qualified_identifier Text: mcp2518fd::mcpDigitalWrite
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcpDigitalWrite
|———Node:parameter_list Text: (const byte pin, const byte mode)
|————Node:( Text: (
|————Node:parameter_declaration Text: const byte pin
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: pin
|————Node:, Text: ,
|————Node:parameter_declaration Text: const byte mode
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: mode
|————Node:) Text: )
|——Node:compound_statement Text: {
  int8_t spiTransferError = 0;
  uint16_t a = 0;

  // Read
  a = cREGADDR_IOCON + 1;
  REG_IOCON iocon;
  iocon.word = 0;

  spiTransferError = mcp2518fd_ReadByte(a, &iocon.byte[1]);
  if (spiTransferError) {
    return -1;
  }

  // Modify
  switch (pin) {
  case GPIO_PIN_0:
    iocon.bF.LAT0 = (GPIO_PIN_STATE)mode;
    break;
  case GPIO_PIN_1:
    iocon.bF.LAT1 = (GPIO_PIN_STATE)mode;
    break;
  default:
    return -1;
    break;
  }

  // Write
  spiTransferError = mcp2518fd_WriteByte(a, iocon.byte[1]);
  if (spiTransferError) {
    return -2;
  }

  return spiTransferError;
}
|———Node:{ Text: {
|———Node:declaration Text: int8_t spiTransferError = 0;
|————Node:primitive_type Text: int8_t
|————Node:init_declarator Text: spiTransferError = 0
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:declaration Text: uint16_t a = 0;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: a = 0
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: a = cREGADDR_IOCON + 1;
|————Node:assignment_expression Text: a = cREGADDR_IOCON + 1
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:binary_expression Text: cREGADDR_IOCON + 1
|——————Node:identifier Text: cREGADDR_IOCON
|——————Node:+ Text: +
|——————Node:number_literal Text: 1
|————Node:; Text: ;
|———Node:declaration Text: REG_IOCON iocon;
|————Node:type_identifier Text: REG_IOCON
|————Node:identifier Text: iocon
|————Node:; Text: ;
|———Node:expression_statement Text: iocon.word = 0;
|————Node:assignment_expression Text: iocon.word = 0
|—————Node:field_expression Text: iocon.word
|——————Node:identifier Text: iocon
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: spiTransferError = mcp2518fd_ReadByte(a, &iocon.byte[1]);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_ReadByte(a, &iocon.byte[1])
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_ReadByte(a, &iocon.byte[1])
|——————Node:identifier Text: mcp2518fd_ReadByte
|——————Node:argument_list Text: (a, &iocon.byte[1])
|———————Node:( Text: (
|———————Node:identifier Text: a
|———————Node:, Text: ,
|———————Node:pointer_expression Text: &iocon.byte[1]
|————————Node:& Text: &
|————————Node:subscript_expression Text: iocon.byte[1]
|—————————Node:field_expression Text: iocon.byte
|——————————Node:identifier Text: iocon
|——————————Node:. Text: .
|——————————Node:field_identifier Text: byte
|—————————Node:subscript_argument_list Text: [1]
|——————————Node:[ Text: [
|——————————Node:number_literal Text: 1
|——————————Node:] Text: ]
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -1;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -1;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -1;
|——————Node:return Text: return
|——————Node:number_literal Text: -1
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:switch_statement Text: switch (pin) {
  case GPIO_PIN_0:
    iocon.bF.LAT0 = (GPIO_PIN_STATE)mode;
    break;
  case GPIO_PIN_1:
    iocon.bF.LAT1 = (GPIO_PIN_STATE)mode;
    break;
  default:
    return -1;
    break;
  }
|————Node:switch Text: switch
|————Node:condition_clause Text: (pin)
|—————Node:( Text: (
|—————Node:identifier Text: pin
|—————Node:) Text: )
|————Node:compound_statement Text: {
  case GPIO_PIN_0:
    iocon.bF.LAT0 = (GPIO_PIN_STATE)mode;
    break;
  case GPIO_PIN_1:
    iocon.bF.LAT1 = (GPIO_PIN_STATE)mode;
    break;
  default:
    return -1;
    break;
  }
|—————Node:{ Text: {
|—————Node:case_statement Text: case GPIO_PIN_0:
    iocon.bF.LAT0 = (GPIO_PIN_STATE)mode;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: GPIO_PIN_0
|——————Node:: Text: :
|——————Node:expression_statement Text: iocon.bF.LAT0 = (GPIO_PIN_STATE)mode;
|———————Node:assignment_expression Text: iocon.bF.LAT0 = (GPIO_PIN_STATE)mode
|————————Node:field_expression Text: iocon.bF.LAT0
|—————————Node:field_expression Text: iocon.bF
|——————————Node:identifier Text: iocon
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: LAT0
|————————Node:= Text: =
|————————Node:cast_expression Text: (GPIO_PIN_STATE)mode
|—————————Node:( Text: (
|—————————Node:type_descriptor Text: GPIO_PIN_STATE
|——————————Node:type_identifier Text: GPIO_PIN_STATE
|—————————Node:) Text: )
|—————————Node:identifier Text: mode
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case GPIO_PIN_1:
    iocon.bF.LAT1 = (GPIO_PIN_STATE)mode;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: GPIO_PIN_1
|——————Node:: Text: :
|——————Node:expression_statement Text: iocon.bF.LAT1 = (GPIO_PIN_STATE)mode;
|———————Node:assignment_expression Text: iocon.bF.LAT1 = (GPIO_PIN_STATE)mode
|————————Node:field_expression Text: iocon.bF.LAT1
|—————————Node:field_expression Text: iocon.bF
|——————————Node:identifier Text: iocon
|——————————Node:. Text: .
|——————————Node:field_identifier Text: bF
|—————————Node:. Text: .
|—————————Node:field_identifier Text: LAT1
|————————Node:= Text: =
|————————Node:cast_expression Text: (GPIO_PIN_STATE)mode
|—————————Node:( Text: (
|—————————Node:type_descriptor Text: GPIO_PIN_STATE
|——————————Node:type_identifier Text: GPIO_PIN_STATE
|—————————Node:) Text: )
|—————————Node:identifier Text: mode
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: default:
    return -1;
    break;
|——————Node:default Text: default
|——————Node:: Text: :
|——————Node:return_statement Text: return -1;
|———————Node:return Text: return
|———————Node:number_literal Text: -1
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:} Text: }
|———Node:comment
|———Node:expression_statement Text: spiTransferError = mcp2518fd_WriteByte(a, iocon.byte[1]);
|————Node:assignment_expression Text: spiTransferError = mcp2518fd_WriteByte(a, iocon.byte[1])
|—————Node:identifier Text: spiTransferError
|—————Node:= Text: =
|—————Node:call_expression Text: mcp2518fd_WriteByte(a, iocon.byte[1])
|——————Node:identifier Text: mcp2518fd_WriteByte
|——————Node:argument_list Text: (a, iocon.byte[1])
|———————Node:( Text: (
|———————Node:identifier Text: a
|———————Node:, Text: ,
|———————Node:subscript_expression Text: iocon.byte[1]
|————————Node:field_expression Text: iocon.byte
|—————————Node:identifier Text: iocon
|—————————Node:. Text: .
|—————————Node:field_identifier Text: byte
|————————Node:subscript_argument_list Text: [1]
|—————————Node:[ Text: [
|—————————Node:number_literal Text: 1
|—————————Node:] Text: ]
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (spiTransferError) {
    return -2;
  }
|————Node:if Text: if
|————Node:condition_clause Text: (spiTransferError)
|—————Node:( Text: (
|—————Node:identifier Text: spiTransferError
|—————Node:) Text: )
|————Node:compound_statement Text: {
    return -2;
  }
|—————Node:{ Text: {
|—————Node:return_statement Text: return -2;
|——————Node:return Text: return
|——————Node:number_literal Text: -2
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:return_statement Text: return spiTransferError;
|————Node:return Text: return
|————Node:identifier Text: spiTransferError
|————Node:; Text: ;
|———Node:} Text: }
|—Node:comment
|—Node:function_definition Text: byte mcp2518fd::mcpDigitalRead(const byte pin) {

  GPIO_PIN_STATE state;
  uint16_t a = 0;

  // Read
  a = cREGADDR_IOCON + 2;
  REG_IOCON iocon;
  iocon.word = 0;

  mcp2518fd_ReadByte(a, &iocon.byte[2]);

  // Update data
  switch (pin) {
  case GPIO_PIN_0:
    state = (GPIO_PIN_STATE)iocon.bF.GPIO0;
    break;
  case GPIO_PIN_1:
    state = (GPIO_PIN_STATE)iocon.bF.GPIO1;
    break;
  default:
    return -1;
    break;
  }

  byte ret = (byte)state;

  return ret;
}
|——Node:type_identifier Text: byte
|——Node:function_declarator Text: mcp2518fd::mcpDigitalRead(const byte pin)
|———Node:qualified_identifier Text: mcp2518fd::mcpDigitalRead
|————Node:namespace_identifier Text: mcp2518fd
|————Node::: Text: ::
|————Node:identifier Text: mcpDigitalRead
|———Node:parameter_list Text: (const byte pin)
|————Node:( Text: (
|————Node:parameter_declaration Text: const byte pin
|—————Node:type_qualifier Text: const
|——————Node:const Text: const
|—————Node:type_identifier Text: byte
|—————Node:identifier Text: pin
|————Node:) Text: )
|——Node:compound_statement Text: {

  GPIO_PIN_STATE state;
  uint16_t a = 0;

  // Read
  a = cREGADDR_IOCON + 2;
  REG_IOCON iocon;
  iocon.word = 0;

  mcp2518fd_ReadByte(a, &iocon.byte[2]);

  // Update data
  switch (pin) {
  case GPIO_PIN_0:
    state = (GPIO_PIN_STATE)iocon.bF.GPIO0;
    break;
  case GPIO_PIN_1:
    state = (GPIO_PIN_STATE)iocon.bF.GPIO1;
    break;
  default:
    return -1;
    break;
  }

  byte ret = (byte)state;

  return ret;
}
|———Node:{ Text: {
|———Node:declaration Text: GPIO_PIN_STATE state;
|————Node:type_identifier Text: GPIO_PIN_STATE
|————Node:identifier Text: state
|————Node:; Text: ;
|———Node:declaration Text: uint16_t a = 0;
|————Node:primitive_type Text: uint16_t
|————Node:init_declarator Text: a = 0
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: a = cREGADDR_IOCON + 2;
|————Node:assignment_expression Text: a = cREGADDR_IOCON + 2
|—————Node:identifier Text: a
|—————Node:= Text: =
|—————Node:binary_expression Text: cREGADDR_IOCON + 2
|——————Node:identifier Text: cREGADDR_IOCON
|——————Node:+ Text: +
|——————Node:number_literal Text: 2
|————Node:; Text: ;
|———Node:declaration Text: REG_IOCON iocon;
|————Node:type_identifier Text: REG_IOCON
|————Node:identifier Text: iocon
|————Node:; Text: ;
|———Node:expression_statement Text: iocon.word = 0;
|————Node:assignment_expression Text: iocon.word = 0
|—————Node:field_expression Text: iocon.word
|——————Node:identifier Text: iocon
|——————Node:. Text: .
|——————Node:field_identifier Text: word
|—————Node:= Text: =
|—————Node:number_literal Text: 0
|————Node:; Text: ;
|———Node:expression_statement Text: mcp2518fd_ReadByte(a, &iocon.byte[2]);
|————Node:call_expression Text: mcp2518fd_ReadByte(a, &iocon.byte[2])
|—————Node:identifier Text: mcp2518fd_ReadByte
|—————Node:argument_list Text: (a, &iocon.byte[2])
|——————Node:( Text: (
|——————Node:identifier Text: a
|——————Node:, Text: ,
|——————Node:pointer_expression Text: &iocon.byte[2]
|———————Node:& Text: &
|———————Node:subscript_expression Text: iocon.byte[2]
|————————Node:field_expression Text: iocon.byte
|—————————Node:identifier Text: iocon
|—————————Node:. Text: .
|—————————Node:field_identifier Text: byte
|————————Node:subscript_argument_list Text: [2]
|—————————Node:[ Text: [
|—————————Node:number_literal Text: 2
|—————————Node:] Text: ]
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:switch_statement Text: switch (pin) {
  case GPIO_PIN_0:
    state = (GPIO_PIN_STATE)iocon.bF.GPIO0;
    break;
  case GPIO_PIN_1:
    state = (GPIO_PIN_STATE)iocon.bF.GPIO1;
    break;
  default:
    return -1;
    break;
  }
|————Node:switch Text: switch
|————Node:condition_clause Text: (pin)
|—————Node:( Text: (
|—————Node:identifier Text: pin
|—————Node:) Text: )
|————Node:compound_statement Text: {
  case GPIO_PIN_0:
    state = (GPIO_PIN_STATE)iocon.bF.GPIO0;
    break;
  case GPIO_PIN_1:
    state = (GPIO_PIN_STATE)iocon.bF.GPIO1;
    break;
  default:
    return -1;
    break;
  }
|—————Node:{ Text: {
|—————Node:case_statement Text: case GPIO_PIN_0:
    state = (GPIO_PIN_STATE)iocon.bF.GPIO0;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: GPIO_PIN_0
|——————Node:: Text: :
|——————Node:expression_statement Text: state = (GPIO_PIN_STATE)iocon.bF.GPIO0;
|———————Node:assignment_expression Text: state = (GPIO_PIN_STATE)iocon.bF.GPIO0
|————————Node:identifier Text: state
|————————Node:= Text: =
|————————Node:cast_expression Text: (GPIO_PIN_STATE)iocon.bF.GPIO0
|—————————Node:( Text: (
|—————————Node:type_descriptor Text: GPIO_PIN_STATE
|——————————Node:type_identifier Text: GPIO_PIN_STATE
|—————————Node:) Text: )
|—————————Node:field_expression Text: iocon.bF.GPIO0
|——————————Node:field_expression Text: iocon.bF
|———————————Node:identifier Text: iocon
|———————————Node:. Text: .
|———————————Node:field_identifier Text: bF
|——————————Node:. Text: .
|——————————Node:field_identifier Text: GPIO0
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case GPIO_PIN_1:
    state = (GPIO_PIN_STATE)iocon.bF.GPIO1;
    break;
|——————Node:case Text: case
|——————Node:identifier Text: GPIO_PIN_1
|——————Node:: Text: :
|——————Node:expression_statement Text: state = (GPIO_PIN_STATE)iocon.bF.GPIO1;
|———————Node:assignment_expression Text: state = (GPIO_PIN_STATE)iocon.bF.GPIO1
|————————Node:identifier Text: state
|————————Node:= Text: =
|————————Node:cast_expression Text: (GPIO_PIN_STATE)iocon.bF.GPIO1
|—————————Node:( Text: (
|—————————Node:type_descriptor Text: GPIO_PIN_STATE
|——————————Node:type_identifier Text: GPIO_PIN_STATE
|—————————Node:) Text: )
|—————————Node:field_expression Text: iocon.bF.GPIO1
|——————————Node:field_expression Text: iocon.bF
|———————————Node:identifier Text: iocon
|———————————Node:. Text: .
|———————————Node:field_identifier Text: bF
|——————————Node:. Text: .
|——————————Node:field_identifier Text: GPIO1
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: default:
    return -1;
    break;
|——————Node:default Text: default
|——————Node:: Text: :
|——————Node:return_statement Text: return -1;
|———————Node:return Text: return
|———————Node:number_literal Text: -1
|———————Node:; Text: ;
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:} Text: }
|———Node:declaration Text: byte ret = (byte)state;
|————Node:type_identifier Text: byte
|————Node:init_declarator Text: ret = (byte)state
|—————Node:identifier Text: ret
|—————Node:= Text: =
|—————Node:cast_expression Text: (byte)state
|——————Node:( Text: (
|——————Node:type_descriptor Text: byte
|———————Node:type_identifier Text: byte
|——————Node:) Text: )
|——————Node:identifier Text: state
|————Node:; Text: ;
|———Node:return_statement Text: return ret;
|————Node:return Text: return
|————Node:identifier Text: ret
|————Node:; Text: ;
|———Node:} Text: }
