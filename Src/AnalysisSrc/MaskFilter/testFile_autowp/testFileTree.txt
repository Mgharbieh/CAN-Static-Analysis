|Node:translation_unit
|—Node:preproc_include Text: #include <SPI.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <SPI.h>
|—Node:preproc_include Text: #include <mcp2515.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <mcp2515.h>
|—Node:declaration Text: struct can_frame canMsg;
|——Node:struct_specifier Text: struct can_frame
|———Node:struct Text: struct
|———Node:type_identifier Text: can_frame
|——Node:identifier Text: canMsg
|——Node:; Text: ;
|—Node:declaration Text: MCP2515 mcp2515(10);
|——Node:type_identifier Text: MCP2515
|——Node:init_declarator Text: mcp2515(10)
|———Node:identifier Text: mcp2515
|———Node:argument_list Text: (10)
|————Node:( Text: (
|————Node:number_literal Text: 10
|————Node:) Text: )
|——Node:; Text: ;
|—Node:function_definition Text: void setup() {
  Serial.begin(115200);
  
  mcp2515.reset();
  mcp2515.setBitrate(CAN_125KBPS);

  mcp2515.setConfigMode();
  mcp2515.setFilterMask(MCP2515::MASK0, false, 0x7FF);
  mcp2515.setFilter(MCP2515::RXF0, false, 0x640);
  mcp2515.setFilter(MCP2515::RXF1, false, 0x641);

  mcp2515.setFilterMask(MCP2515::MASK1, false, 0x7FF);
  mcp2515.setFilter(MCP2515::RXF2, false, 0x080);
  mcp2515.setFilter(MCP2515::RXF3, false, 0x081);
  mcp2515.setFilter(MCP2515::RXF4, false, 0x082);
  mcp2515.setFilter(MCP2515::RXF5, false, 0x083);
  mcp2515.setNormalMode();
  
  Serial.println("------- CAN Read ----------");
  Serial.println("ID  DLC   DATA");
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: setup()
|———Node:identifier Text: setup
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
  Serial.begin(115200);
  
  mcp2515.reset();
  mcp2515.setBitrate(CAN_125KBPS);

  mcp2515.setConfigMode();
  mcp2515.setFilterMask(MCP2515::MASK0, false, 0x7FF);
  mcp2515.setFilter(MCP2515::RXF0, false, 0x640);
  mcp2515.setFilter(MCP2515::RXF1, false, 0x641);

  mcp2515.setFilterMask(MCP2515::MASK1, false, 0x7FF);
  mcp2515.setFilter(MCP2515::RXF2, false, 0x080);
  mcp2515.setFilter(MCP2515::RXF3, false, 0x081);
  mcp2515.setFilter(MCP2515::RXF4, false, 0x082);
  mcp2515.setFilter(MCP2515::RXF5, false, 0x083);
  mcp2515.setNormalMode();
  
  Serial.println("------- CAN Read ----------");
  Serial.println("ID  DLC   DATA");
}
|———Node:{ Text: {
|———Node:expression_statement Text: Serial.begin(115200);
|————Node:call_expression Text: Serial.begin(115200)
|—————Node:field_expression Text: Serial.begin
|——————Node:identifier Text: Serial
|——————Node:. Text: .
|——————Node:field_identifier Text: begin
|—————Node:argument_list Text: (115200)
|——————Node:( Text: (
|——————Node:number_literal Text: 115200
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mcp2515.reset();
|————Node:call_expression Text: mcp2515.reset()
|—————Node:field_expression Text: mcp2515.reset
|——————Node:identifier Text: mcp2515
|——————Node:. Text: .
|——————Node:field_identifier Text: reset
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mcp2515.setBitrate(CAN_125KBPS);
|————Node:call_expression Text: mcp2515.setBitrate(CAN_125KBPS)
|—————Node:field_expression Text: mcp2515.setBitrate
|——————Node:identifier Text: mcp2515
|——————Node:. Text: .
|——————Node:field_identifier Text: setBitrate
|—————Node:argument_list Text: (CAN_125KBPS)
|——————Node:( Text: (
|——————Node:identifier Text: CAN_125KBPS
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mcp2515.setConfigMode();
|————Node:call_expression Text: mcp2515.setConfigMode()
|—————Node:field_expression Text: mcp2515.setConfigMode
|——————Node:identifier Text: mcp2515
|——————Node:. Text: .
|——————Node:field_identifier Text: setConfigMode
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mcp2515.setFilterMask(MCP2515::MASK0, false, 0x7FF);
|————Node:call_expression Text: mcp2515.setFilterMask(MCP2515::MASK0, false, 0x7FF)
|—————Node:field_expression Text: mcp2515.setFilterMask
|——————Node:identifier Text: mcp2515
|——————Node:. Text: .
|——————Node:field_identifier Text: setFilterMask
|—————Node:argument_list Text: (MCP2515::MASK0, false, 0x7FF)
|——————Node:( Text: (
|——————Node:qualified_identifier Text: MCP2515::MASK0
|———————Node:namespace_identifier Text: MCP2515
|———————Node::: Text: ::
|———————Node:identifier Text: MASK0
|——————Node:, Text: ,
|——————Node:false Text: false
|——————Node:, Text: ,
|——————Node:number_literal Text: 0x7FF
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mcp2515.setFilter(MCP2515::RXF0, false, 0x640);
|————Node:call_expression Text: mcp2515.setFilter(MCP2515::RXF0, false, 0x640)
|—————Node:field_expression Text: mcp2515.setFilter
|——————Node:identifier Text: mcp2515
|——————Node:. Text: .
|——————Node:field_identifier Text: setFilter
|—————Node:argument_list Text: (MCP2515::RXF0, false, 0x640)
|——————Node:( Text: (
|——————Node:qualified_identifier Text: MCP2515::RXF0
|———————Node:namespace_identifier Text: MCP2515
|———————Node::: Text: ::
|———————Node:identifier Text: RXF0
|——————Node:, Text: ,
|——————Node:false Text: false
|——————Node:, Text: ,
|——————Node:number_literal Text: 0x640
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mcp2515.setFilter(MCP2515::RXF1, false, 0x641);
|————Node:call_expression Text: mcp2515.setFilter(MCP2515::RXF1, false, 0x641)
|—————Node:field_expression Text: mcp2515.setFilter
|——————Node:identifier Text: mcp2515
|——————Node:. Text: .
|——————Node:field_identifier Text: setFilter
|—————Node:argument_list Text: (MCP2515::RXF1, false, 0x641)
|——————Node:( Text: (
|——————Node:qualified_identifier Text: MCP2515::RXF1
|———————Node:namespace_identifier Text: MCP2515
|———————Node::: Text: ::
|———————Node:identifier Text: RXF1
|——————Node:, Text: ,
|——————Node:false Text: false
|——————Node:, Text: ,
|——————Node:number_literal Text: 0x641
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mcp2515.setFilterMask(MCP2515::MASK1, false, 0x7FF);
|————Node:call_expression Text: mcp2515.setFilterMask(MCP2515::MASK1, false, 0x7FF)
|—————Node:field_expression Text: mcp2515.setFilterMask
|——————Node:identifier Text: mcp2515
|——————Node:. Text: .
|——————Node:field_identifier Text: setFilterMask
|—————Node:argument_list Text: (MCP2515::MASK1, false, 0x7FF)
|——————Node:( Text: (
|——————Node:qualified_identifier Text: MCP2515::MASK1
|———————Node:namespace_identifier Text: MCP2515
|———————Node::: Text: ::
|———————Node:identifier Text: MASK1
|——————Node:, Text: ,
|——————Node:false Text: false
|——————Node:, Text: ,
|——————Node:number_literal Text: 0x7FF
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mcp2515.setFilter(MCP2515::RXF2, false, 0x080);
|————Node:call_expression Text: mcp2515.setFilter(MCP2515::RXF2, false, 0x080)
|—————Node:field_expression Text: mcp2515.setFilter
|——————Node:identifier Text: mcp2515
|——————Node:. Text: .
|——————Node:field_identifier Text: setFilter
|—————Node:argument_list Text: (MCP2515::RXF2, false, 0x080)
|——————Node:( Text: (
|——————Node:qualified_identifier Text: MCP2515::RXF2
|———————Node:namespace_identifier Text: MCP2515
|———————Node::: Text: ::
|———————Node:identifier Text: RXF2
|——————Node:, Text: ,
|——————Node:false Text: false
|——————Node:, Text: ,
|——————Node:number_literal Text: 0x080
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mcp2515.setFilter(MCP2515::RXF3, false, 0x081);
|————Node:call_expression Text: mcp2515.setFilter(MCP2515::RXF3, false, 0x081)
|—————Node:field_expression Text: mcp2515.setFilter
|——————Node:identifier Text: mcp2515
|——————Node:. Text: .
|——————Node:field_identifier Text: setFilter
|—————Node:argument_list Text: (MCP2515::RXF3, false, 0x081)
|——————Node:( Text: (
|——————Node:qualified_identifier Text: MCP2515::RXF3
|———————Node:namespace_identifier Text: MCP2515
|———————Node::: Text: ::
|———————Node:identifier Text: RXF3
|——————Node:, Text: ,
|——————Node:false Text: false
|——————Node:, Text: ,
|——————Node:number_literal Text: 0x081
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mcp2515.setFilter(MCP2515::RXF4, false, 0x082);
|————Node:call_expression Text: mcp2515.setFilter(MCP2515::RXF4, false, 0x082)
|—————Node:field_expression Text: mcp2515.setFilter
|——————Node:identifier Text: mcp2515
|——————Node:. Text: .
|——————Node:field_identifier Text: setFilter
|—————Node:argument_list Text: (MCP2515::RXF4, false, 0x082)
|——————Node:( Text: (
|——————Node:qualified_identifier Text: MCP2515::RXF4
|———————Node:namespace_identifier Text: MCP2515
|———————Node::: Text: ::
|———————Node:identifier Text: RXF4
|——————Node:, Text: ,
|——————Node:false Text: false
|——————Node:, Text: ,
|——————Node:number_literal Text: 0x082
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mcp2515.setFilter(MCP2515::RXF5, false, 0x083);
|————Node:call_expression Text: mcp2515.setFilter(MCP2515::RXF5, false, 0x083)
|—————Node:field_expression Text: mcp2515.setFilter
|——————Node:identifier Text: mcp2515
|——————Node:. Text: .
|——————Node:field_identifier Text: setFilter
|—————Node:argument_list Text: (MCP2515::RXF5, false, 0x083)
|——————Node:( Text: (
|——————Node:qualified_identifier Text: MCP2515::RXF5
|———————Node:namespace_identifier Text: MCP2515
|———————Node::: Text: ::
|———————Node:identifier Text: RXF5
|——————Node:, Text: ,
|——————Node:false Text: false
|——————Node:, Text: ,
|——————Node:number_literal Text: 0x083
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: mcp2515.setNormalMode();
|————Node:call_expression Text: mcp2515.setNormalMode()
|—————Node:field_expression Text: mcp2515.setNormalMode
|——————Node:identifier Text: mcp2515
|——————Node:. Text: .
|——————Node:field_identifier Text: setNormalMode
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: Serial.println("------- CAN Read ----------");
|————Node:call_expression Text: Serial.println("------- CAN Read ----------")
|—————Node:field_expression Text: Serial.println
|——————Node:identifier Text: Serial
|——————Node:. Text: .
|——————Node:field_identifier Text: println
|—————Node:argument_list Text: ("------- CAN Read ----------")
|——————Node:( Text: (
|——————Node:string_literal Text: "------- CAN Read ----------"
|———————Node:" Text: "
|———————Node:string_content Text: ------- CAN Read ----------
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: Serial.println("ID  DLC   DATA");
|————Node:call_expression Text: Serial.println("ID  DLC   DATA")
|—————Node:field_expression Text: Serial.println
|——————Node:identifier Text: Serial
|——————Node:. Text: .
|——————Node:field_identifier Text: println
|—————Node:argument_list Text: ("ID  DLC   DATA")
|——————Node:( Text: (
|——————Node:string_literal Text: "ID  DLC   DATA"
|———————Node:" Text: "
|———————Node:string_content Text: ID  DLC   DATA
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void loop() {
  if (mcp2515.readMessage(&canMsg) == MCP2515::ERROR_OK) 
  {
    switch(canMsg.can_id)
    {
    case (0x640):
        break;
    case (0x082):
        break;
    case (0x083):
        break;
    case (0x084):
        break;
    default:
        break;
    }
    
    if(canMsg.can_id == 0x081)
    {
        continue;
    }

    Serial.print(canMsg.can_id, HEX); // print ID
    Serial.print(" "); 
    Serial.print(canMsg.can_dlc, HEX); // print DLC
    Serial.print(" ");
    
    for (int i = 0; i<canMsg.can_dlc; i++)  {  // print the data
      Serial.print(canMsg.data[i],HEX);
      Serial.print(" ");
    }

    Serial.println();      
  }
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: loop()
|———Node:identifier Text: loop
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
  if (mcp2515.readMessage(&canMsg) == MCP2515::ERROR_OK) 
  {
    switch(canMsg.can_id)
    {
    case (0x640):
        break;
    case (0x082):
        break;
    case (0x083):
        break;
    case (0x084):
        break;
    default:
        break;
    }
    
    if(canMsg.can_id == 0x081)
    {
        continue;
    }

    Serial.print(canMsg.can_id, HEX); // print ID
    Serial.print(" "); 
    Serial.print(canMsg.can_dlc, HEX); // print DLC
    Serial.print(" ");
    
    for (int i = 0; i<canMsg.can_dlc; i++)  {  // print the data
      Serial.print(canMsg.data[i],HEX);
      Serial.print(" ");
    }

    Serial.println();      
  }
}
|———Node:{ Text: {
|———Node:if_statement Text: if (mcp2515.readMessage(&canMsg) == MCP2515::ERROR_OK) 
  {
    switch(canMsg.can_id)
    {
    case (0x640):
        break;
    case (0x082):
        break;
    case (0x083):
        break;
    case (0x084):
        break;
    default:
        break;
    }
    
    if(canMsg.can_id == 0x081)
    {
        continue;
    }

    Serial.print(canMsg.can_id, HEX); // print ID
    Serial.print(" "); 
    Serial.print(canMsg.can_dlc, HEX); // print DLC
    Serial.print(" ");
    
    for (int i = 0; i<canMsg.can_dlc; i++)  {  // print the data
      Serial.print(canMsg.data[i],HEX);
      Serial.print(" ");
    }

    Serial.println();      
  }
|————Node:if Text: if
|————Node:condition_clause Text: (mcp2515.readMessage(&canMsg) == MCP2515::ERROR_OK)
|—————Node:( Text: (
|—————Node:binary_expression Text: mcp2515.readMessage(&canMsg) == MCP2515::ERROR_OK
|——————Node:call_expression Text: mcp2515.readMessage(&canMsg)
|———————Node:field_expression Text: mcp2515.readMessage
|————————Node:identifier Text: mcp2515
|————————Node:. Text: .
|————————Node:field_identifier Text: readMessage
|———————Node:argument_list Text: (&canMsg)
|————————Node:( Text: (
|————————Node:pointer_expression Text: &canMsg
|—————————Node:& Text: &
|—————————Node:identifier Text: canMsg
|————————Node:) Text: )
|——————Node:== Text: ==
|——————Node:qualified_identifier Text: MCP2515::ERROR_OK
|———————Node:namespace_identifier Text: MCP2515
|———————Node::: Text: ::
|———————Node:identifier Text: ERROR_OK
|—————Node:) Text: )
|————Node:compound_statement Text: {
    switch(canMsg.can_id)
    {
    case (0x640):
        break;
    case (0x082):
        break;
    case (0x083):
        break;
    case (0x084):
        break;
    default:
        break;
    }
    
    if(canMsg.can_id == 0x081)
    {
        continue;
    }

    Serial.print(canMsg.can_id, HEX); // print ID
    Serial.print(" "); 
    Serial.print(canMsg.can_dlc, HEX); // print DLC
    Serial.print(" ");
    
    for (int i = 0; i<canMsg.can_dlc; i++)  {  // print the data
      Serial.print(canMsg.data[i],HEX);
      Serial.print(" ");
    }

    Serial.println();      
  }
|—————Node:{ Text: {
|—————Node:switch_statement Text: switch(canMsg.can_id)
    {
    case (0x640):
        break;
    case (0x082):
        break;
    case (0x083):
        break;
    case (0x084):
        break;
    default:
        break;
    }
|——————Node:switch Text: switch
|——————Node:condition_clause Text: (canMsg.can_id)
|———————Node:( Text: (
|———————Node:field_expression Text: canMsg.can_id
|————————Node:identifier Text: canMsg
|————————Node:. Text: .
|————————Node:field_identifier Text: can_id
|———————Node:) Text: )
|——————Node:compound_statement Text: {
    case (0x640):
        break;
    case (0x082):
        break;
    case (0x083):
        break;
    case (0x084):
        break;
    default:
        break;
    }
|———————Node:{ Text: {
|———————Node:case_statement Text: case (0x640):
        break;
|————————Node:case Text: case
|————————Node:parenthesized_expression Text: (0x640)
|—————————Node:( Text: (
|—————————Node:number_literal Text: 0x640
|—————————Node:) Text: )
|————————Node:: Text: :
|————————Node:break_statement Text: break;
|—————————Node:break Text: break
|—————————Node:; Text: ;
|———————Node:case_statement Text: case (0x082):
        break;
|————————Node:case Text: case
|————————Node:parenthesized_expression Text: (0x082)
|—————————Node:( Text: (
|—————————Node:number_literal Text: 0x082
|—————————Node:) Text: )
|————————Node:: Text: :
|————————Node:break_statement Text: break;
|—————————Node:break Text: break
|—————————Node:; Text: ;
|———————Node:case_statement Text: case (0x083):
        break;
|————————Node:case Text: case
|————————Node:parenthesized_expression Text: (0x083)
|—————————Node:( Text: (
|—————————Node:number_literal Text: 0x083
|—————————Node:) Text: )
|————————Node:: Text: :
|————————Node:break_statement Text: break;
|—————————Node:break Text: break
|—————————Node:; Text: ;
|———————Node:case_statement Text: case (0x084):
        break;
|————————Node:case Text: case
|————————Node:parenthesized_expression Text: (0x084)
|—————————Node:( Text: (
|—————————Node:number_literal Text: 0x084
|—————————Node:) Text: )
|————————Node:: Text: :
|————————Node:break_statement Text: break;
|—————————Node:break Text: break
|—————————Node:; Text: ;
|———————Node:case_statement Text: default:
        break;
|————————Node:default Text: default
|————————Node:: Text: :
|————————Node:break_statement Text: break;
|—————————Node:break Text: break
|—————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:if_statement Text: if(canMsg.can_id == 0x081)
    {
        continue;
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: (canMsg.can_id == 0x081)
|———————Node:( Text: (
|———————Node:binary_expression Text: canMsg.can_id == 0x081
|————————Node:field_expression Text: canMsg.can_id
|—————————Node:identifier Text: canMsg
|—————————Node:. Text: .
|—————————Node:field_identifier Text: can_id
|————————Node:== Text: ==
|————————Node:number_literal Text: 0x081
|———————Node:) Text: )
|——————Node:compound_statement Text: {
        continue;
    }
|———————Node:{ Text: {
|———————Node:continue_statement Text: continue;
|————————Node:continue Text: continue
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:expression_statement Text: Serial.print(canMsg.can_id, HEX);
|——————Node:call_expression Text: Serial.print(canMsg.can_id, HEX)
|———————Node:field_expression Text: Serial.print
|————————Node:identifier Text: Serial
|————————Node:. Text: .
|————————Node:field_identifier Text: print
|———————Node:argument_list Text: (canMsg.can_id, HEX)
|————————Node:( Text: (
|————————Node:field_expression Text: canMsg.can_id
|—————————Node:identifier Text: canMsg
|—————————Node:. Text: .
|—————————Node:field_identifier Text: can_id
|————————Node:, Text: ,
|————————Node:identifier Text: HEX
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment
|—————Node:expression_statement Text: Serial.print(" ");
|——————Node:call_expression Text: Serial.print(" ")
|———————Node:field_expression Text: Serial.print
|————————Node:identifier Text: Serial
|————————Node:. Text: .
|————————Node:field_identifier Text: print
|———————Node:argument_list Text: (" ")
|————————Node:( Text: (
|————————Node:string_literal Text: " "
|—————————Node:" Text: "
|—————————Node:string_content Text:  
|—————————Node:" Text: "
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: Serial.print(canMsg.can_dlc, HEX);
|——————Node:call_expression Text: Serial.print(canMsg.can_dlc, HEX)
|———————Node:field_expression Text: Serial.print
|————————Node:identifier Text: Serial
|————————Node:. Text: .
|————————Node:field_identifier Text: print
|———————Node:argument_list Text: (canMsg.can_dlc, HEX)
|————————Node:( Text: (
|————————Node:field_expression Text: canMsg.can_dlc
|—————————Node:identifier Text: canMsg
|—————————Node:. Text: .
|—————————Node:field_identifier Text: can_dlc
|————————Node:, Text: ,
|————————Node:identifier Text: HEX
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:comment
|—————Node:expression_statement Text: Serial.print(" ");
|——————Node:call_expression Text: Serial.print(" ")
|———————Node:field_expression Text: Serial.print
|————————Node:identifier Text: Serial
|————————Node:. Text: .
|————————Node:field_identifier Text: print
|———————Node:argument_list Text: (" ")
|————————Node:( Text: (
|————————Node:string_literal Text: " "
|—————————Node:" Text: "
|—————————Node:string_content Text:  
|—————————Node:" Text: "
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:for_statement Text: for (int i = 0; i<canMsg.can_dlc; i++)  {  // print the data
      Serial.print(canMsg.data[i],HEX);
      Serial.print(" ");
    }
|——————Node:for Text: for
|——————Node:( Text: (
|——————Node:declaration Text: int i = 0;
|———————Node:primitive_type Text: int
|———————Node:init_declarator Text: i = 0
|————————Node:identifier Text: i
|————————Node:= Text: =
|————————Node:number_literal Text: 0
|———————Node:; Text: ;
|——————Node:binary_expression Text: i<canMsg.can_dlc
|———————Node:identifier Text: i
|———————Node:< Text: <
|———————Node:field_expression Text: canMsg.can_dlc
|————————Node:identifier Text: canMsg
|————————Node:. Text: .
|————————Node:field_identifier Text: can_dlc
|——————Node:; Text: ;
|——————Node:update_expression Text: i++
|———————Node:identifier Text: i
|———————Node:++ Text: ++
|——————Node:) Text: )
|——————Node:compound_statement Text: {  // print the data
      Serial.print(canMsg.data[i],HEX);
      Serial.print(" ");
    }
|———————Node:{ Text: {
|———————Node:comment
|———————Node:expression_statement Text: Serial.print(canMsg.data[i],HEX);
|————————Node:call_expression Text: Serial.print(canMsg.data[i],HEX)
|—————————Node:field_expression Text: Serial.print
|——————————Node:identifier Text: Serial
|——————————Node:. Text: .
|——————————Node:field_identifier Text: print
|—————————Node:argument_list Text: (canMsg.data[i],HEX)
|——————————Node:( Text: (
|——————————Node:subscript_expression Text: canMsg.data[i]
|———————————Node:field_expression Text: canMsg.data
|————————————Node:identifier Text: canMsg
|————————————Node:. Text: .
|————————————Node:field_identifier Text: data
|———————————Node:subscript_argument_list Text: [i]
|————————————Node:[ Text: [
|————————————Node:identifier Text: i
|————————————Node:] Text: ]
|——————————Node:, Text: ,
|——————————Node:identifier Text: HEX
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: Serial.print(" ");
|————————Node:call_expression Text: Serial.print(" ")
|—————————Node:field_expression Text: Serial.print
|——————————Node:identifier Text: Serial
|——————————Node:. Text: .
|——————————Node:field_identifier Text: print
|—————————Node:argument_list Text: (" ")
|——————————Node:( Text: (
|——————————Node:string_literal Text: " "
|———————————Node:" Text: "
|———————————Node:string_content Text:  
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:expression_statement Text: Serial.println();
|——————Node:call_expression Text: Serial.println()
|———————Node:field_expression Text: Serial.println
|————————Node:identifier Text: Serial
|————————Node:. Text: .
|————————Node:field_identifier Text: println
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:} Text: }
