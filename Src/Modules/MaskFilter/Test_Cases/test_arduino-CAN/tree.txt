

|Node:translation_unit
|—Node:function_definition Text: void loop() {
  // try to parse packet
  int packetSize = CAN.parsePacket();

  if (packetSize || CAN.packetId() != -1) {
    // received a packet
    Serial.print("Received ");

    if (CAN.packetExtended()) {
      Serial.print("extended ");
    }

    if (CAN.packetRtr()) {
      // Remote transmission request, packet contains no data
      Serial.print("RTR ");
    }

    Serial.print("packet with id 0x");
    Serial.print(CAN.packetId(), HEX);

    if (CAN.packetRtr()) {
      Serial.print(" and requested length ");
      Serial.println(CAN.packetDlc());
    } else {
      Serial.print(" and length ");
      Serial.println(packetSize);

      // only print packet data for non-RTR packets
      while (CAN.available()) {
        Serial.print((char)CAN.read());
      }
      Serial.println();
    }

    Serial.println();
  }
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: loop()
|———Node:identifier Text: loop
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
  // try to parse packet
  int packetSize = CAN.parsePacket();

  if (packetSize || CAN.packetId() != -1) {
    // received a packet
    Serial.print("Received ");

    if (CAN.packetExtended()) {
      Serial.print("extended ");
    }

    if (CAN.packetRtr()) {
      // Remote transmission request, packet contains no data
      Serial.print("RTR ");
    }

    Serial.print("packet with id 0x");
    Serial.print(CAN.packetId(), HEX);

    if (CAN.packetRtr()) {
      Serial.print(" and requested length ");
      Serial.println(CAN.packetDlc());
    } else {
      Serial.print(" and length ");
      Serial.println(packetSize);

      // only print packet data for non-RTR packets
      while (CAN.available()) {
        Serial.print((char)CAN.read());
      }
      Serial.println();
    }

    Serial.println();
  }
}
|———Node:{ Text: {
|———Node:comment
|———Node:declaration Text: int packetSize = CAN.parsePacket();
|————Node:primitive_type Text: int
|————Node:init_declarator Text: packetSize = CAN.parsePacket()
|—————Node:identifier Text: packetSize
|—————Node:= Text: =
|—————Node:call_expression Text: CAN.parsePacket()
|——————Node:field_expression Text: CAN.parsePacket
|———————Node:identifier Text: CAN
|———————Node:. Text: .
|———————Node:field_identifier Text: parsePacket
|——————Node:argument_list Text: ()
|———————Node:( Text: (
|———————Node:) Text: )
|————Node:; Text: ;
|———Node:if_statement Text: if (packetSize || CAN.packetId() != -1) {
    // received a packet
    Serial.print("Received ");

    if (CAN.packetExtended()) {
      Serial.print("extended ");
    }

    if (CAN.packetRtr()) {
      // Remote transmission request, packet contains no data
      Serial.print("RTR ");
    }

    Serial.print("packet with id 0x");
    Serial.print(CAN.packetId(), HEX);

    if (CAN.packetRtr()) {
      Serial.print(" and requested length ");
      Serial.println(CAN.packetDlc());
    } else {
      Serial.print(" and length ");
      Serial.println(packetSize);

      // only print packet data for non-RTR packets
      while (CAN.available()) {
        Serial.print((char)CAN.read());
      }
      Serial.println();
    }

    Serial.println();
  }
|————Node:if Text: if
|————Node:condition_clause Text: (packetSize || CAN.packetId() != -1)
|—————Node:( Text: (
|—————Node:binary_expression Text: packetSize || CAN.packetId() != -1
|——————Node:identifier Text: packetSize
|——————Node:|| Text: ||
|——————Node:binary_expression Text: CAN.packetId() != -1
|———————Node:call_expression Text: CAN.packetId()
|————————Node:field_expression Text: CAN.packetId
|—————————Node:identifier Text: CAN
|—————————Node:. Text: .
|—————————Node:field_identifier Text: packetId
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:!= Text: !=
|———————Node:number_literal Text: -1
|—————Node:) Text: )
|————Node:compound_statement Text: {
    // received a packet
    Serial.print("Received ");

    if (CAN.packetExtended()) {
      Serial.print("extended ");
    }

    if (CAN.packetRtr()) {
      // Remote transmission request, packet contains no data
      Serial.print("RTR ");
    }

    Serial.print("packet with id 0x");
    Serial.print(CAN.packetId(), HEX);

    if (CAN.packetRtr()) {
      Serial.print(" and requested length ");
      Serial.println(CAN.packetDlc());
    } else {
      Serial.print(" and length ");
      Serial.println(packetSize);

      // only print packet data for non-RTR packets
      while (CAN.available()) {
        Serial.print((char)CAN.read());
      }
      Serial.println();
    }

    Serial.println();
  }
|—————Node:{ Text: {
|—————Node:comment
|—————Node:expression_statement Text: Serial.print("Received ");
|——————Node:call_expression Text: Serial.print("Received ")
|———————Node:field_expression Text: Serial.print
|————————Node:identifier Text: Serial
|————————Node:. Text: .
|————————Node:field_identifier Text: print
|———————Node:argument_list Text: ("Received ")
|————————Node:( Text: (
|————————Node:string_literal Text: "Received "
|—————————Node:" Text: "
|—————————Node:string_content Text: Received 
|—————————Node:" Text: "
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (CAN.packetExtended()) {
      Serial.print("extended ");
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: (CAN.packetExtended())
|———————Node:( Text: (
|———————Node:call_expression Text: CAN.packetExtended()
|————————Node:field_expression Text: CAN.packetExtended
|—————————Node:identifier Text: CAN
|—————————Node:. Text: .
|—————————Node:field_identifier Text: packetExtended
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {
      Serial.print("extended ");
    }
|———————Node:{ Text: {
|———————Node:expression_statement Text: Serial.print("extended ");
|————————Node:call_expression Text: Serial.print("extended ")
|—————————Node:field_expression Text: Serial.print
|——————————Node:identifier Text: Serial
|——————————Node:. Text: .
|——————————Node:field_identifier Text: print
|—————————Node:argument_list Text: ("extended ")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "extended "
|———————————Node:" Text: "
|———————————Node:string_content Text: extended 
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:if_statement Text: if (CAN.packetRtr()) {
      // Remote transmission request, packet contains no data
      Serial.print("RTR ");
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: (CAN.packetRtr())
|———————Node:( Text: (
|———————Node:call_expression Text: CAN.packetRtr()
|————————Node:field_expression Text: CAN.packetRtr
|—————————Node:identifier Text: CAN
|—————————Node:. Text: .
|—————————Node:field_identifier Text: packetRtr
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {
      // Remote transmission request, packet contains no data
      Serial.print("RTR ");
    }
|———————Node:{ Text: {
|———————Node:comment
|———————Node:expression_statement Text: Serial.print("RTR ");
|————————Node:call_expression Text: Serial.print("RTR ")
|—————————Node:field_expression Text: Serial.print
|——————————Node:identifier Text: Serial
|——————————Node:. Text: .
|——————————Node:field_identifier Text: print
|—————————Node:argument_list Text: ("RTR ")
|——————————Node:( Text: (
|——————————Node:string_literal Text: "RTR "
|———————————Node:" Text: "
|———————————Node:string_content Text: RTR 
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|—————Node:expression_statement Text: Serial.print("packet with id 0x");
|——————Node:call_expression Text: Serial.print("packet with id 0x")
|———————Node:field_expression Text: Serial.print
|————————Node:identifier Text: Serial
|————————Node:. Text: .
|————————Node:field_identifier Text: print
|———————Node:argument_list Text: ("packet with id 0x")
|————————Node:( Text: (
|————————Node:string_literal Text: "packet with id 0x"
|—————————Node:" Text: "
|—————————Node:string_content Text: packet with id 0x
|—————————Node:" Text: "
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: Serial.print(CAN.packetId(), HEX);
|——————Node:call_expression Text: Serial.print(CAN.packetId(), HEX)
|———————Node:field_expression Text: Serial.print
|————————Node:identifier Text: Serial
|————————Node:. Text: .
|————————Node:field_identifier Text: print
|———————Node:argument_list Text: (CAN.packetId(), HEX)
|————————Node:( Text: (
|————————Node:call_expression Text: CAN.packetId()
|—————————Node:field_expression Text: CAN.packetId
|——————————Node:identifier Text: CAN
|——————————Node:. Text: .
|——————————Node:field_identifier Text: packetId
|—————————Node:argument_list Text: ()
|——————————Node:( Text: (
|——————————Node:) Text: )
|————————Node:, Text: ,
|————————Node:identifier Text: HEX
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:if_statement Text: if (CAN.packetRtr()) {
      Serial.print(" and requested length ");
      Serial.println(CAN.packetDlc());
    } else {
      Serial.print(" and length ");
      Serial.println(packetSize);

      // only print packet data for non-RTR packets
      while (CAN.available()) {
        Serial.print((char)CAN.read());
      }
      Serial.println();
    }
|——————Node:if Text: if
|——————Node:condition_clause Text: (CAN.packetRtr())
|———————Node:( Text: (
|———————Node:call_expression Text: CAN.packetRtr()
|————————Node:field_expression Text: CAN.packetRtr
|—————————Node:identifier Text: CAN
|—————————Node:. Text: .
|—————————Node:field_identifier Text: packetRtr
|————————Node:argument_list Text: ()
|—————————Node:( Text: (
|—————————Node:) Text: )
|———————Node:) Text: )
|——————Node:compound_statement Text: {
      Serial.print(" and requested length ");
      Serial.println(CAN.packetDlc());
    }
|———————Node:{ Text: {
|———————Node:expression_statement Text: Serial.print(" and requested length ");
|————————Node:call_expression Text: Serial.print(" and requested length ")
|—————————Node:field_expression Text: Serial.print
|——————————Node:identifier Text: Serial
|——————————Node:. Text: .
|——————————Node:field_identifier Text: print
|—————————Node:argument_list Text: (" and requested length ")
|——————————Node:( Text: (
|——————————Node:string_literal Text: " and requested length "
|———————————Node:" Text: "
|———————————Node:string_content Text:  and requested length 
|———————————Node:" Text: "
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:expression_statement Text: Serial.println(CAN.packetDlc());
|————————Node:call_expression Text: Serial.println(CAN.packetDlc())
|—————————Node:field_expression Text: Serial.println
|——————————Node:identifier Text: Serial
|——————————Node:. Text: .
|——————————Node:field_identifier Text: println
|—————————Node:argument_list Text: (CAN.packetDlc())
|——————————Node:( Text: (
|——————————Node:call_expression Text: CAN.packetDlc()
|———————————Node:field_expression Text: CAN.packetDlc
|————————————Node:identifier Text: CAN
|————————————Node:. Text: .
|————————————Node:field_identifier Text: packetDlc
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:) Text: )
|————————Node:; Text: ;
|———————Node:} Text: }
|——————Node:else_clause Text: else {
      Serial.print(" and length ");
      Serial.println(packetSize);

      // only print packet data for non-RTR packets
      while (CAN.available()) {
        Serial.print((char)CAN.read());
      }
      Serial.println();
    }
|———————Node:else Text: else
|———————Node:compound_statement Text: {
      Serial.print(" and length ");
      Serial.println(packetSize);

      // only print packet data for non-RTR packets
      while (CAN.available()) {
        Serial.print((char)CAN.read());
      }
      Serial.println();
    }
|————————Node:{ Text: {
|————————Node:expression_statement Text: Serial.print(" and length ");
|—————————Node:call_expression Text: Serial.print(" and length ")
|——————————Node:field_expression Text: Serial.print
|———————————Node:identifier Text: Serial
|———————————Node:. Text: .
|———————————Node:field_identifier Text: print
|——————————Node:argument_list Text: (" and length ")
|———————————Node:( Text: (
|———————————Node:string_literal Text: " and length "
|————————————Node:" Text: "
|————————————Node:string_content Text:  and length 
|————————————Node:" Text: "
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:expression_statement Text: Serial.println(packetSize);
|—————————Node:call_expression Text: Serial.println(packetSize)
|——————————Node:field_expression Text: Serial.println
|———————————Node:identifier Text: Serial
|———————————Node:. Text: .
|———————————Node:field_identifier Text: println
|——————————Node:argument_list Text: (packetSize)
|———————————Node:( Text: (
|———————————Node:identifier Text: packetSize
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:comment
|————————Node:while_statement Text: while (CAN.available()) {
        Serial.print((char)CAN.read());
      }
|—————————Node:while Text: while
|—————————Node:condition_clause Text: (CAN.available())
|——————————Node:( Text: (
|——————————Node:call_expression Text: CAN.available()
|———————————Node:field_expression Text: CAN.available
|————————————Node:identifier Text: CAN
|————————————Node:. Text: .
|————————————Node:field_identifier Text: available
|———————————Node:argument_list Text: ()
|————————————Node:( Text: (
|————————————Node:) Text: )
|——————————Node:) Text: )
|—————————Node:compound_statement Text: {
        Serial.print((char)CAN.read());
      }
|——————————Node:{ Text: {
|——————————Node:expression_statement Text: Serial.print((char)CAN.read());
|———————————Node:call_expression Text: Serial.print((char)CAN.read())
|————————————Node:field_expression Text: Serial.print
|—————————————Node:identifier Text: Serial
|—————————————Node:. Text: .
|—————————————Node:field_identifier Text: print
|————————————Node:argument_list Text: ((char)CAN.read())
|—————————————Node:( Text: (
|—————————————Node:cast_expression Text: (char)CAN.read()
|——————————————Node:( Text: (
|——————————————Node:type_descriptor Text: char
|———————————————Node:primitive_type Text: char
|——————————————Node:) Text: )
|——————————————Node:call_expression Text: CAN.read()
|———————————————Node:field_expression Text: CAN.read
|————————————————Node:identifier Text: CAN
|————————————————Node:. Text: .
|————————————————Node:field_identifier Text: read
|———————————————Node:argument_list Text: ()
|————————————————Node:( Text: (
|————————————————Node:) Text: )
|—————————————Node:) Text: )
|———————————Node:; Text: ;
|——————————Node:} Text: }
|————————Node:expression_statement Text: Serial.println();
|—————————Node:call_expression Text: Serial.println()
|——————————Node:field_expression Text: Serial.println
|———————————Node:identifier Text: Serial
|———————————Node:. Text: .
|———————————Node:field_identifier Text: println
|——————————Node:argument_list Text: ()
|———————————Node:( Text: (
|———————————Node:) Text: )
|—————————Node:; Text: ;
|————————Node:} Text: }
|—————Node:expression_statement Text: Serial.println();
|——————Node:call_expression Text: Serial.println()
|———————Node:field_expression Text: Serial.println
|————————Node:identifier Text: Serial
|————————Node:. Text: .
|————————Node:field_identifier Text: println
|———————Node:argument_list Text: ()
|————————Node:( Text: (
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:} Text: }
