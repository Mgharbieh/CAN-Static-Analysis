TestCase-7-8.ino

|Node:translation_unit
|—Node:preproc_include Text: #include <mcp_can.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <mcp_can.h>
|—Node:preproc_include Text: #include <SPI.h>

|——Node:#include Text: #include
|——Node:system_lib_string Text: <SPI.h>
|—Node:declaration Text: long unsigned int rxId;
|——Node:sized_type_specifier Text: long unsigned int
|———Node:long Text: long
|———Node:unsigned Text: unsigned
|———Node:primitive_type Text: int
|——Node:identifier Text: rxId
|——Node:; Text: ;
|—Node:declaration Text: unsigned char len = 0;
|——Node:sized_type_specifier Text: unsigned char
|———Node:unsigned Text: unsigned
|———Node:primitive_type Text: char
|——Node:init_declarator Text: len = 0
|———Node:identifier Text: len
|———Node:= Text: =
|———Node:number_literal Text: 0
|——Node:; Text: ;
|—Node:declaration Text: unsigned char rxBuf[8];
|——Node:sized_type_specifier Text: unsigned char
|———Node:unsigned Text: unsigned
|———Node:primitive_type Text: char
|——Node:array_declarator Text: rxBuf[8]
|———Node:identifier Text: rxBuf
|———Node:[ Text: [
|———Node:number_literal Text: 8
|———Node:] Text: ]
|——Node:; Text: ;
|—Node:declaration Text: char msgString[128];
|——Node:primitive_type Text: char
|——Node:array_declarator Text: msgString[128]
|———Node:identifier Text: msgString
|———Node:[ Text: [
|———Node:number_literal Text: 128
|———Node:] Text: ]
|——Node:; Text: ;
|—Node:comment
|—Node:preproc_def Text: #define CAN0_INT 2                              // Set INT to pin 2

|——Node:#define Text: #define
|——Node:identifier Text: CAN0_INT
|——Node:preproc_arg Text: 2                              // Set INT to pin 2
|—Node:declaration Text: MCP_CAN CAN0(10);
|——Node:type_identifier Text: MCP_CAN
|——Node:init_declarator Text: CAN0(10)
|———Node:identifier Text: CAN0
|———Node:argument_list Text: (10)
|————Node:( Text: (
|————Node:number_literal Text: 10
|————Node:) Text: )
|——Node:; Text: ;
|—Node:comment
|—Node:function_definition Text: void setup()
{
  Serial.begin(115200);
  
  // Initialize MCP2515 running at 16MHz with a baudrate of 500kb/s and the masks and filters disabled.
  if(CAN0.begin(MCP_ANY, CAN_500KBPS, MCP_16MHZ) == CAN_OK)
    Serial.println("MCP2515 Initialized Successfully!");
  else
    Serial.println("Error Initializing MCP2515...");
  
  CAN0.init_Mask(0,0,0x7FF);                // Init first mask...
  CAN0.init_Mask(1,0,0x7FF);                // Init first mask...
  CAN0.init_Filt(0,0,0x1E3);  
  CAN0.init_Filt(1,0,0x1E4);
  CAN0.init_Filt(2,0,0x1E5); 
  CAN0.init_Filt(3,0,0x1E6); 

  CAN0.setMode(MCP_NORMAL);                     // Set operation mode to normal so the MCP2515 sends acks to received data.

  pinMode(CAN0_INT, INPUT);                            // Configuring pin for /INT input
  attachInterrupt(digitalPinToInterrupt(CAN0_INT), callback, LOW); // start interrupt

  Serial.println("MCP2515 Library Receive Example...");
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: setup()
|———Node:identifier Text: setup
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
  Serial.begin(115200);
  
  // Initialize MCP2515 running at 16MHz with a baudrate of 500kb/s and the masks and filters disabled.
  if(CAN0.begin(MCP_ANY, CAN_500KBPS, MCP_16MHZ) == CAN_OK)
    Serial.println("MCP2515 Initialized Successfully!");
  else
    Serial.println("Error Initializing MCP2515...");
  
  CAN0.init_Mask(0,0,0x7FF);                // Init first mask...
  CAN0.init_Mask(1,0,0x7FF);                // Init first mask...
  CAN0.init_Filt(0,0,0x1E3);  
  CAN0.init_Filt(1,0,0x1E4);
  CAN0.init_Filt(2,0,0x1E5); 
  CAN0.init_Filt(3,0,0x1E6); 

  CAN0.setMode(MCP_NORMAL);                     // Set operation mode to normal so the MCP2515 sends acks to received data.

  pinMode(CAN0_INT, INPUT);                            // Configuring pin for /INT input
  attachInterrupt(digitalPinToInterrupt(CAN0_INT), callback, LOW); // start interrupt

  Serial.println("MCP2515 Library Receive Example...");
}
|———Node:{ Text: {
|———Node:expression_statement Text: Serial.begin(115200);
|————Node:call_expression Text: Serial.begin(115200)
|—————Node:field_expression Text: Serial.begin
|——————Node:identifier Text: Serial
|——————Node:. Text: .
|——————Node:field_identifier Text: begin
|—————Node:argument_list Text: (115200)
|——————Node:( Text: (
|——————Node:number_literal Text: 115200
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:if_statement Text: if(CAN0.begin(MCP_ANY, CAN_500KBPS, MCP_16MHZ) == CAN_OK)
    Serial.println("MCP2515 Initialized Successfully!");
  else
    Serial.println("Error Initializing MCP2515...");
|————Node:if Text: if
|————Node:condition_clause Text: (CAN0.begin(MCP_ANY, CAN_500KBPS, MCP_16MHZ) == CAN_OK)
|—————Node:( Text: (
|—————Node:binary_expression Text: CAN0.begin(MCP_ANY, CAN_500KBPS, MCP_16MHZ) == CAN_OK
|——————Node:call_expression Text: CAN0.begin(MCP_ANY, CAN_500KBPS, MCP_16MHZ)
|———————Node:field_expression Text: CAN0.begin
|————————Node:identifier Text: CAN0
|————————Node:. Text: .
|————————Node:field_identifier Text: begin
|———————Node:argument_list Text: (MCP_ANY, CAN_500KBPS, MCP_16MHZ)
|————————Node:( Text: (
|————————Node:identifier Text: MCP_ANY
|————————Node:, Text: ,
|————————Node:identifier Text: CAN_500KBPS
|————————Node:, Text: ,
|————————Node:identifier Text: MCP_16MHZ
|————————Node:) Text: )
|——————Node:== Text: ==
|——————Node:identifier Text: CAN_OK
|—————Node:) Text: )
|————Node:expression_statement Text: Serial.println("MCP2515 Initialized Successfully!");
|—————Node:call_expression Text: Serial.println("MCP2515 Initialized Successfully!")
|——————Node:field_expression Text: Serial.println
|———————Node:identifier Text: Serial
|———————Node:. Text: .
|———————Node:field_identifier Text: println
|——————Node:argument_list Text: ("MCP2515 Initialized Successfully!")
|———————Node:( Text: (
|———————Node:string_literal Text: "MCP2515 Initialized Successfully!"
|————————Node:" Text: "
|————————Node:string_content Text: MCP2515 Initialized Successfully!
|————————Node:" Text: "
|———————Node:) Text: )
|—————Node:; Text: ;
|————Node:else_clause Text: else
    Serial.println("Error Initializing MCP2515...");
|—————Node:else Text: else
|—————Node:expression_statement Text: Serial.println("Error Initializing MCP2515...");
|——————Node:call_expression Text: Serial.println("Error Initializing MCP2515...")
|———————Node:field_expression Text: Serial.println
|————————Node:identifier Text: Serial
|————————Node:. Text: .
|————————Node:field_identifier Text: println
|———————Node:argument_list Text: ("Error Initializing MCP2515...")
|————————Node:( Text: (
|————————Node:string_literal Text: "Error Initializing MCP2515..."
|—————————Node:" Text: "
|—————————Node:string_content Text: Error Initializing MCP2515...
|—————————Node:" Text: "
|————————Node:) Text: )
|——————Node:; Text: ;
|———Node:expression_statement Text: CAN0.init_Mask(0,0,0x7FF);
|————Node:call_expression Text: CAN0.init_Mask(0,0,0x7FF)
|—————Node:field_expression Text: CAN0.init_Mask
|——————Node:identifier Text: CAN0
|——————Node:. Text: .
|——————Node:field_identifier Text: init_Mask
|—————Node:argument_list Text: (0,0,0x7FF)
|——————Node:( Text: (
|——————Node:number_literal Text: 0
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:, Text: ,
|——————Node:number_literal Text: 0x7FF
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: CAN0.init_Mask(1,0,0x7FF);
|————Node:call_expression Text: CAN0.init_Mask(1,0,0x7FF)
|—————Node:field_expression Text: CAN0.init_Mask
|——————Node:identifier Text: CAN0
|——————Node:. Text: .
|——————Node:field_identifier Text: init_Mask
|—————Node:argument_list Text: (1,0,0x7FF)
|——————Node:( Text: (
|——————Node:number_literal Text: 1
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:, Text: ,
|——————Node:number_literal Text: 0x7FF
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: CAN0.init_Filt(0,0,0x1E3);
|————Node:call_expression Text: CAN0.init_Filt(0,0,0x1E3)
|—————Node:field_expression Text: CAN0.init_Filt
|——————Node:identifier Text: CAN0
|——————Node:. Text: .
|——————Node:field_identifier Text: init_Filt
|—————Node:argument_list Text: (0,0,0x1E3)
|——————Node:( Text: (
|——————Node:number_literal Text: 0
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:, Text: ,
|——————Node:number_literal Text: 0x1E3
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: CAN0.init_Filt(1,0,0x1E4);
|————Node:call_expression Text: CAN0.init_Filt(1,0,0x1E4)
|—————Node:field_expression Text: CAN0.init_Filt
|——————Node:identifier Text: CAN0
|——————Node:. Text: .
|——————Node:field_identifier Text: init_Filt
|—————Node:argument_list Text: (1,0,0x1E4)
|——————Node:( Text: (
|——————Node:number_literal Text: 1
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:, Text: ,
|——————Node:number_literal Text: 0x1E4
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: CAN0.init_Filt(2,0,0x1E5);
|————Node:call_expression Text: CAN0.init_Filt(2,0,0x1E5)
|—————Node:field_expression Text: CAN0.init_Filt
|——————Node:identifier Text: CAN0
|——————Node:. Text: .
|——————Node:field_identifier Text: init_Filt
|—————Node:argument_list Text: (2,0,0x1E5)
|——————Node:( Text: (
|——————Node:number_literal Text: 2
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:, Text: ,
|——————Node:number_literal Text: 0x1E5
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: CAN0.init_Filt(3,0,0x1E6);
|————Node:call_expression Text: CAN0.init_Filt(3,0,0x1E6)
|—————Node:field_expression Text: CAN0.init_Filt
|——————Node:identifier Text: CAN0
|——————Node:. Text: .
|——————Node:field_identifier Text: init_Filt
|—————Node:argument_list Text: (3,0,0x1E6)
|——————Node:( Text: (
|——————Node:number_literal Text: 3
|——————Node:, Text: ,
|——————Node:number_literal Text: 0
|——————Node:, Text: ,
|——————Node:number_literal Text: 0x1E6
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:expression_statement Text: CAN0.setMode(MCP_NORMAL);
|————Node:call_expression Text: CAN0.setMode(MCP_NORMAL)
|—————Node:field_expression Text: CAN0.setMode
|——————Node:identifier Text: CAN0
|——————Node:. Text: .
|——————Node:field_identifier Text: setMode
|—————Node:argument_list Text: (MCP_NORMAL)
|——————Node:( Text: (
|——————Node:identifier Text: MCP_NORMAL
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: pinMode(CAN0_INT, INPUT);
|————Node:call_expression Text: pinMode(CAN0_INT, INPUT)
|—————Node:identifier Text: pinMode
|—————Node:argument_list Text: (CAN0_INT, INPUT)
|——————Node:( Text: (
|——————Node:identifier Text: CAN0_INT
|——————Node:, Text: ,
|——————Node:identifier Text: INPUT
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: attachInterrupt(digitalPinToInterrupt(CAN0_INT), callback, LOW);
|————Node:call_expression Text: attachInterrupt(digitalPinToInterrupt(CAN0_INT), callback, LOW)
|—————Node:identifier Text: attachInterrupt
|—————Node:argument_list Text: (digitalPinToInterrupt(CAN0_INT), callback, LOW)
|——————Node:( Text: (
|——————Node:call_expression Text: digitalPinToInterrupt(CAN0_INT)
|———————Node:identifier Text: digitalPinToInterrupt
|———————Node:argument_list Text: (CAN0_INT)
|————————Node:( Text: (
|————————Node:identifier Text: CAN0_INT
|————————Node:) Text: )
|——————Node:, Text: ,
|——————Node:identifier Text: callback
|——————Node:, Text: ,
|——————Node:identifier Text: LOW
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:expression_statement Text: Serial.println("MCP2515 Library Receive Example...");
|————Node:call_expression Text: Serial.println("MCP2515 Library Receive Example...")
|—————Node:field_expression Text: Serial.println
|——————Node:identifier Text: Serial
|——————Node:. Text: .
|——————Node:field_identifier Text: println
|—————Node:argument_list Text: ("MCP2515 Library Receive Example...")
|——————Node:( Text: (
|——————Node:string_literal Text: "MCP2515 Library Receive Example..."
|———————Node:" Text: "
|———————Node:string_content Text: MCP2515 Library Receive Example...
|———————Node:" Text: "
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
|—Node:function_definition Text: void loop()
{

}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: loop()
|———Node:identifier Text: loop
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {

}
|———Node:{ Text: {
|———Node:} Text: }
|—Node:function_definition Text: void callback()
{
    CAN0.readMsgBuf(&rxId, &len, rxBuf);      // Read data: len = data length, buf = data byte(s)

    switch(rxId)
    {
    case (0x1E3):
        break;
    case (0x1E4):
        break;
    case (0x1E7):
        break;
    default:
        break;
    }

    if(rxId == 0x1E5)
        continue;
    else if(rxId == 0x1E8)
        continue;

    for(byte i = 0; i<len; i++){
        sprintf(msgString, " 0x%.2X", rxBuf[i]);
        Serial.print(msgString);
    }
    Serial.println();
}
|——Node:primitive_type Text: void
|——Node:function_declarator Text: callback()
|———Node:identifier Text: callback
|———Node:parameter_list Text: ()
|————Node:( Text: (
|————Node:) Text: )
|——Node:compound_statement Text: {
    CAN0.readMsgBuf(&rxId, &len, rxBuf);      // Read data: len = data length, buf = data byte(s)

    switch(rxId)
    {
    case (0x1E3):
        break;
    case (0x1E4):
        break;
    case (0x1E7):
        break;
    default:
        break;
    }

    if(rxId == 0x1E5)
        continue;
    else if(rxId == 0x1E8)
        continue;

    for(byte i = 0; i<len; i++){
        sprintf(msgString, " 0x%.2X", rxBuf[i]);
        Serial.print(msgString);
    }
    Serial.println();
}
|———Node:{ Text: {
|———Node:expression_statement Text: CAN0.readMsgBuf(&rxId, &len, rxBuf);
|————Node:call_expression Text: CAN0.readMsgBuf(&rxId, &len, rxBuf)
|—————Node:field_expression Text: CAN0.readMsgBuf
|——————Node:identifier Text: CAN0
|——————Node:. Text: .
|——————Node:field_identifier Text: readMsgBuf
|—————Node:argument_list Text: (&rxId, &len, rxBuf)
|——————Node:( Text: (
|——————Node:pointer_expression Text: &rxId
|———————Node:& Text: &
|———————Node:identifier Text: rxId
|——————Node:, Text: ,
|——————Node:pointer_expression Text: &len
|———————Node:& Text: &
|———————Node:identifier Text: len
|——————Node:, Text: ,
|——————Node:identifier Text: rxBuf
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:comment
|———Node:switch_statement Text: switch(rxId)
    {
    case (0x1E3):
        break;
    case (0x1E4):
        break;
    case (0x1E7):
        break;
    default:
        break;
    }
|————Node:switch Text: switch
|————Node:condition_clause Text: (rxId)
|—————Node:( Text: (
|—————Node:identifier Text: rxId
|—————Node:) Text: )
|————Node:compound_statement Text: {
    case (0x1E3):
        break;
    case (0x1E4):
        break;
    case (0x1E7):
        break;
    default:
        break;
    }
|—————Node:{ Text: {
|—————Node:case_statement Text: case (0x1E3):
        break;
|——————Node:case Text: case
|——————Node:parenthesized_expression Text: (0x1E3)
|———————Node:( Text: (
|———————Node:number_literal Text: 0x1E3
|———————Node:) Text: )
|——————Node:: Text: :
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case (0x1E4):
        break;
|——————Node:case Text: case
|——————Node:parenthesized_expression Text: (0x1E4)
|———————Node:( Text: (
|———————Node:number_literal Text: 0x1E4
|———————Node:) Text: )
|——————Node:: Text: :
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: case (0x1E7):
        break;
|——————Node:case Text: case
|——————Node:parenthesized_expression Text: (0x1E7)
|———————Node:( Text: (
|———————Node:number_literal Text: 0x1E7
|———————Node:) Text: )
|——————Node:: Text: :
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:case_statement Text: default:
        break;
|——————Node:default Text: default
|——————Node:: Text: :
|——————Node:break_statement Text: break;
|———————Node:break Text: break
|———————Node:; Text: ;
|—————Node:} Text: }
|———Node:if_statement Text: if(rxId == 0x1E5)
        continue;
    else if(rxId == 0x1E8)
        continue;
|————Node:if Text: if
|————Node:condition_clause Text: (rxId == 0x1E5)
|—————Node:( Text: (
|—————Node:binary_expression Text: rxId == 0x1E5
|——————Node:identifier Text: rxId
|——————Node:== Text: ==
|——————Node:number_literal Text: 0x1E5
|—————Node:) Text: )
|————Node:continue_statement Text: continue;
|—————Node:continue Text: continue
|—————Node:; Text: ;
|————Node:else_clause Text: else if(rxId == 0x1E8)
        continue;
|—————Node:else Text: else
|—————Node:if_statement Text: if(rxId == 0x1E8)
        continue;
|——————Node:if Text: if
|——————Node:condition_clause Text: (rxId == 0x1E8)
|———————Node:( Text: (
|———————Node:binary_expression Text: rxId == 0x1E8
|————————Node:identifier Text: rxId
|————————Node:== Text: ==
|————————Node:number_literal Text: 0x1E8
|———————Node:) Text: )
|——————Node:continue_statement Text: continue;
|———————Node:continue Text: continue
|———————Node:; Text: ;
|———Node:for_statement Text: for(byte i = 0; i<len; i++){
        sprintf(msgString, " 0x%.2X", rxBuf[i]);
        Serial.print(msgString);
    }
|————Node:for Text: for
|————Node:( Text: (
|————Node:declaration Text: byte i = 0;
|—————Node:type_identifier Text: byte
|—————Node:init_declarator Text: i = 0
|——————Node:identifier Text: i
|——————Node:= Text: =
|——————Node:number_literal Text: 0
|—————Node:; Text: ;
|————Node:binary_expression Text: i<len
|—————Node:identifier Text: i
|—————Node:< Text: <
|—————Node:identifier Text: len
|————Node:; Text: ;
|————Node:update_expression Text: i++
|—————Node:identifier Text: i
|—————Node:++ Text: ++
|————Node:) Text: )
|————Node:compound_statement Text: {
        sprintf(msgString, " 0x%.2X", rxBuf[i]);
        Serial.print(msgString);
    }
|—————Node:{ Text: {
|—————Node:expression_statement Text: sprintf(msgString, " 0x%.2X", rxBuf[i]);
|——————Node:call_expression Text: sprintf(msgString, " 0x%.2X", rxBuf[i])
|———————Node:identifier Text: sprintf
|———————Node:argument_list Text: (msgString, " 0x%.2X", rxBuf[i])
|————————Node:( Text: (
|————————Node:identifier Text: msgString
|————————Node:, Text: ,
|————————Node:string_literal Text: " 0x%.2X"
|—————————Node:" Text: "
|—————————Node:string_content Text:  0x%.2X
|—————————Node:" Text: "
|————————Node:, Text: ,
|————————Node:subscript_expression Text: rxBuf[i]
|—————————Node:identifier Text: rxBuf
|—————————Node:subscript_argument_list Text: [i]
|——————————Node:[ Text: [
|——————————Node:identifier Text: i
|——————————Node:] Text: ]
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:expression_statement Text: Serial.print(msgString);
|——————Node:call_expression Text: Serial.print(msgString)
|———————Node:field_expression Text: Serial.print
|————————Node:identifier Text: Serial
|————————Node:. Text: .
|————————Node:field_identifier Text: print
|———————Node:argument_list Text: (msgString)
|————————Node:( Text: (
|————————Node:identifier Text: msgString
|————————Node:) Text: )
|——————Node:; Text: ;
|—————Node:} Text: }
|———Node:expression_statement Text: Serial.println();
|————Node:call_expression Text: Serial.println()
|—————Node:field_expression Text: Serial.println
|——————Node:identifier Text: Serial
|——————Node:. Text: .
|——————Node:field_identifier Text: println
|—————Node:argument_list Text: ()
|——————Node:( Text: (
|——————Node:) Text: )
|————Node:; Text: ;
|———Node:} Text: }
